//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/HeartbeatMessage.java
//

#include "AlertDescription.h"
#include "Arrays.h"
#include "HeartbeatMessage.h"
#include "HeartbeatMessageType.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RandomGenerator.h"
#include "Streams.h"
#include "TlsContext.h"
#include "TlsFatalAlert.h"
#include "TlsUtils.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"

@implementation LibOrgBouncycastleCryptoTlsHeartbeatMessage

- (instancetype)initWithShort:(jshort)type
                withByteArray:(IOSByteArray *)payload
                      withInt:(jint)paddingLength {
  LibOrgBouncycastleCryptoTlsHeartbeatMessage_initWithShort_withByteArray_withInt_(self, type, payload, paddingLength);
  return self;
}

- (void)encodeWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                 withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(type_, output);
  LibOrgBouncycastleCryptoTlsTlsUtils_checkUint16WithInt_(((IOSByteArray *) nil_chk(payload_))->size_);
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(((IOSByteArray *) nil_chk(payload_))->size_, output);
  [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:payload_];
  IOSByteArray *padding = [IOSByteArray newArrayWithLength:paddingLength_];
  [((id<LibOrgBouncycastleCryptoPrngRandomGenerator>) nil_chk([((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context)) getNonceRandomGenerator])) nextBytesWithByteArray:padding];
  [output writeWithByteArray:padding];
}

+ (LibOrgBouncycastleCryptoTlsHeartbeatMessage *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleCryptoTlsHeartbeatMessage_parseWithJavaIoInputStream_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsHeartbeatMessage;", 0x9, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:withByteArray:withInt:);
  methods[1].selector = @selector(encodeWithLibOrgBouncycastleCryptoTlsTlsContext:withJavaIoOutputStream:);
  methods[2].selector = @selector(parseWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "payload_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "paddingLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "S[BI", "encode", "LLibOrgBouncycastleCryptoTlsTlsContext;LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;", "LLibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsHeartbeatMessage = { "HeartbeatMessage", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, 6, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsHeartbeatMessage;
}

@end

void LibOrgBouncycastleCryptoTlsHeartbeatMessage_initWithShort_withByteArray_withInt_(LibOrgBouncycastleCryptoTlsHeartbeatMessage *self, jshort type, IOSByteArray *payload, jint paddingLength) {
  NSObject_init(self);
  if (!LibOrgBouncycastleCryptoTlsHeartbeatMessageType_isValidWithShort_(type)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'type' is not a valid HeartbeatMessageType value");
  }
  if (payload == nil || payload->size_ >= (JreLShift32(1, 16))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'payload' must have length < 2^16");
  }
  if (paddingLength < 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'paddingLength' must be at least 16");
  }
  self->type_ = type;
  self->payload_ = payload;
  self->paddingLength_ = paddingLength;
}

LibOrgBouncycastleCryptoTlsHeartbeatMessage *new_LibOrgBouncycastleCryptoTlsHeartbeatMessage_initWithShort_withByteArray_withInt_(jshort type, IOSByteArray *payload, jint paddingLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsHeartbeatMessage, initWithShort_withByteArray_withInt_, type, payload, paddingLength)
}

LibOrgBouncycastleCryptoTlsHeartbeatMessage *create_LibOrgBouncycastleCryptoTlsHeartbeatMessage_initWithShort_withByteArray_withInt_(jshort type, IOSByteArray *payload, jint paddingLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsHeartbeatMessage, initWithShort_withByteArray_withInt_, type, payload, paddingLength)
}

LibOrgBouncycastleCryptoTlsHeartbeatMessage *LibOrgBouncycastleCryptoTlsHeartbeatMessage_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  LibOrgBouncycastleCryptoTlsHeartbeatMessage_initialize();
  jshort type = LibOrgBouncycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  if (!LibOrgBouncycastleCryptoTlsHeartbeatMessageType_isValidWithShort_(type)) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  jint payload_length = LibOrgBouncycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
  LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer *buf = new_LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer_init();
  LibOrgBouncycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(input, buf);
  IOSByteArray *payload = [buf toTruncatedByteArrayWithInt:payload_length];
  if (payload == nil) {
    return nil;
  }
  jint padding_length = [buf size] - payload->size_;
  return new_LibOrgBouncycastleCryptoTlsHeartbeatMessage_initWithShort_withByteArray_withInt_(type, payload, padding_length);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsHeartbeatMessage)

@implementation LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)toTruncatedByteArrayWithInt:(jint)payloadLength {
  jint minimumCount = payloadLength + 16;
  if (count_ < minimumCount) {
    return nil;
  }
  return LibOrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(buf_, payloadLength);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toTruncatedByteArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toTruncatedByteArray", "I", "LLibOrgBouncycastleCryptoTlsHeartbeatMessage;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer = { "PayloadBuffer", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer;
}

@end

void LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer_init(LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer *self) {
  JavaIoByteArrayOutputStream_init(self);
}

LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer *new_LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer, init)
}

LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer *create_LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsHeartbeatMessage_PayloadBuffer)
