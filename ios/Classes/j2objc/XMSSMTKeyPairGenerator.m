//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "BDS.h"
#include "BDSStateMap.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "OTSHashAddress.h"
#include "WOTSPlus.h"
#include "XMSSAddress.h"
#include "XMSSMTKeyGenerationParameters.h"
#include "XMSSMTKeyPairGenerator.h"
#include "XMSSMTParameters.h"
#include "XMSSMTPrivateKeyParameters.h"
#include "XMSSMTPublicKeyParameters.h"
#include "XMSSNode.h"
#include "XMSSParameters.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator () {
 @public
  LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *params_;
  LibOrgBouncycastlePqcCryptoXmssXMSSParameters *xmssParams_;
  JavaSecuritySecureRandom *prng_;
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap:(LibOrgBouncycastlePqcCryptoXmssBDSStateMap *)bdsState;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, params_, LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, xmssParams_, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, prng_, JavaSecuritySecureRandom *)

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap_(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *self, LibOrgBouncycastlePqcCryptoXmssBDSStateMap *bdsState);

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters *parameters = (LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters class]);
  prng_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters *) nil_chk(parameters)) getRandom];
  self->params_ = [parameters getParameters];
  self->xmssParams_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getXMSSParameters];
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey;
  LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *publicKey;
  privateKey = LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap_(self, [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) build])) getBDSState]);
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getWOTSPlus])) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey)) getPublicSeed]];
  jint rootLayerIndex = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getLayers] - 1;
  LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:rootLayerIndex])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  LibOrgBouncycastlePqcCryptoXmssBDS *bdsRoot = new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(xmssParams_, [privateKey getPublicSeed], [privateKey getSecretKeySeed], otsHashAddress);
  LibOrgBouncycastlePqcCryptoXmssXMSSNode *root = [bdsRoot getRoot];
  [((LibOrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk([privateKey getBDSState])) putWithInt:rootLayerIndex withLibOrgBouncycastlePqcCryptoXmssBDS:bdsRoot];
  privateKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withSecretKeySeedWithByteArray:[privateKey getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[privateKey getSecretKeyPRF]])) withPublicSeedWithByteArray:[privateKey getPublicSeed]])) withRootWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(root)) getValue]])) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap:[privateKey getBDSState]])) build];
  publicKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withRootWithByteArray:[root getValue]])) withPublicSeedWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey)) getPublicSeed]])) build];
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(publicKey, privateKey);
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap:(LibOrgBouncycastlePqcCryptoXmssBDSStateMap *)bdsState {
  return LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap_(self, bdsState);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmssParams_", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prng_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;", "generatePrivateKey", "LLibOrgBouncycastlePqcCryptoXmssBDSStateMap;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator = { "XMSSMTKeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 4, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap_(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *self, LibOrgBouncycastlePqcCryptoXmssBDSStateMap *bdsState) {
  jint n = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(self->params_)) getDigestSize];
  IOSByteArray *secretKeySeed = [IOSByteArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(self->prng_)) nextBytesWithByteArray:secretKeySeed];
  IOSByteArray *secretKeyPRF = [IOSByteArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(self->prng_)) nextBytesWithByteArray:secretKeyPRF];
  IOSByteArray *publicSeed = [IOSByteArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(self->prng_)) nextBytesWithByteArray:publicSeed];
  LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey = nil;
  privateKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(self->params_) withSecretKeySeedWithByteArray:secretKeySeed])) withSecretKeyPRFWithByteArray:secretKeyPRF])) withPublicSeedWithByteArray:publicSeed])) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap:bdsState])) build];
  return privateKey;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator)
