//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/ntru/NTRUSigningPrivateKeyParameters.java
//

#include "AsymmetricKeyParameter.h"
#include "DenseTernaryPolynomial.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IntegerPolynomial.h"
#include "J2ObjC_source.h"
#include "NTRUParameters.h"
#include "NTRUSigningKeyGenerationParameters.h"
#include "NTRUSigningParameters.h"
#include "NTRUSigningPrivateKeyParameters.h"
#include "NTRUSigningPublicKeyParameters.h"
#include "PqcMathPolynomial.h"
#include "ProductFormPolynomial.h"
#include "SparseTernaryPolynomial.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters () {
 @public
  id<JavaUtilList> bases_;
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *publicKey_;
}

- (void)addWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *)b;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters, bases_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters, publicKey_, LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_addWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *self, LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *b);

@interface LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis ()

- (IOSByteArray *)getEncodedWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)p;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_getEncodedWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *self, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> p);

@implementation LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters

- (instancetype)initWithByteArray:(IOSByteArray *)b
withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)params {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(self, b, params);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)params {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(self, is, params);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)bases
withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *)publicKey {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaUtilList_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_(self, bases, publicKey);
  return self;
}

- (void)addWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *)b {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_addWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_(self, b);
}

- (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *)getBasisWithInt:(jint)i {
  return [((id<JavaUtilList>) nil_chk(bases_)) getWithInt:i];
}

- (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *)getPublicKey {
  return publicKey_;
}

- (IOSByteArray *)getEncoded {
  JavaIoByteArrayOutputStream *os = new_JavaIoByteArrayOutputStream_init();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(bases_)) size]; i++) {
    [((LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *) nil_chk([((id<JavaUtilList>) nil_chk(bases_)) getWithInt:i])) encodeWithJavaIoOutputStream:os withBoolean:i != 0];
  }
  [os writeWithByteArray:[((LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *) nil_chk(publicKey_)) getEncoded]];
  return [os toByteArray];
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[self getEncoded]];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result;
  if (bases_ == nil) return result;
  result += ((jint) [bases_ hash]);
  for (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis * __strong basis in nil_chk(bases_)) {
    result += ((jint) [((LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *) nil_chk(basis)) hash]);
  }
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *other = (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *) cast_chk(obj, [LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters class]);
  if ((bases_ == nil) != (other->bases_ == nil)) {
    return false;
  }
  if (bases_ == nil) {
    return true;
  }
  if ([bases_ size] != [((id<JavaUtilList>) nil_chk(other->bases_)) size]) {
    return false;
  }
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(bases_)) size]; i++) {
    LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *basis1 = [((id<JavaUtilList>) nil_chk(bases_)) getWithInt:i];
    LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *basis2 = [((id<JavaUtilList>) nil_chk(other->bases_)) getWithInt:i];
    if (![((id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>) nil_chk(((LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *) nil_chk(basis1))->f_)) isEqual:((LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *) nil_chk(basis2))->f_]) {
      return false;
    }
    if (![((id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>) nil_chk(basis1->fPrime_)) isEqual:basis2->fPrime_]) {
      return false;
    }
    if (i != 0 && ![((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(basis1->h_)) isEqual:basis2->h_]) {
      return false;
    }
    if (![((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(basis1->params_)) isEqual:basis2->params_]) {
      return false;
    }
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:);
  methods[1].selector = @selector(initWithJavaIoInputStream:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:);
  methods[2].selector = @selector(initWithJavaUtilList:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters:);
  methods[3].selector = @selector(addWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis:);
  methods[4].selector = @selector(getBasisWithInt:);
  methods[5].selector = @selector(getPublicKey);
  methods[6].selector = @selector(getEncoded);
  methods[7].selector = @selector(writeToWithJavaIoOutputStream:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bases_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 14, -1 },
    { "publicKey_", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BLLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", "LJavaIoIOException;", "LJavaIoInputStream;LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", "LJavaUtilList;LLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters;", "(Ljava/util/List<Llib/org/bouncycastle/pqc/crypto/ntru/NTRUSigningPrivateKeyParameters$Basis;>;Llib/org/bouncycastle/pqc/crypto/ntru/NTRUSigningPublicKeyParameters;)V", "add", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis;", "getBasis", "I", "writeTo", "LJavaIoOutputStream;", "hashCode", "equals", "LNSObject;", "Ljava/util/List<Llib/org/bouncycastle/pqc/crypto/ntru/NTRUSigningPrivateKeyParameters$Basis;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters = { "NTRUSigningPrivateKeyParameters", "lib.org.bouncycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, 6, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters;
}

@end

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *self, IOSByteArray *b, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(self, new_JavaIoByteArrayInputStream_initWithByteArray_(b), params);
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(IOSByteArray *b, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters, initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_, b, params)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(IOSByteArray *b, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters, initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_, b, params)
}

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *self, JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, true);
  self->bases_ = new_JavaUtilArrayList_init();
  for (jint i = 0; i <= ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params))->B_; i++) {
    LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_addWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_(self, new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_withBoolean_(is, params, i != 0));
  }
  self->publicKey_ = new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(is, [params getSigningParameters]);
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters, initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_, is, params)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters, initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_, is, params)
}

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaUtilList_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *self, id<JavaUtilList> bases, LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *publicKey) {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, true);
  self->bases_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(bases);
  self->publicKey_ = publicKey;
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaUtilList_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_(id<JavaUtilList> bases, LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *publicKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters, initWithJavaUtilList_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_, bases, publicKey)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaUtilList_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_(id<JavaUtilList> bases, LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *publicKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters, initWithJavaUtilList_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_, bases, publicKey)
}

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_addWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *self, LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *b) {
  [((id<JavaUtilList>) nil_chk(self->bases_)) addWithId:b];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters)

@implementation LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis

- (instancetype)initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)f
                    withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)fPrime
                    withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)h
           withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)params {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(self, f, fPrime, h, params);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)params
                              withBoolean:(jboolean)include_h {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_withBoolean_(self, is, params, include_h);
  return self;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)os
                         withBoolean:(jboolean)include_h {
  jint q = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_))->q_;
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_getEncodedWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_(self, f_)];
  if (((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_))->basisType_ == LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_STANDARD) {
    LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *fPrimeInt = [((id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>) nil_chk(fPrime_)) toIntegerPolynomial];
    for (jint i = 0; i < ((IOSIntArray *) nil_chk(((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(fPrimeInt))->coeffs_))->size_; i++) {
      *IOSIntArray_GetRef(fPrimeInt->coeffs_, i) += q / 2;
    }
    [os writeWithByteArray:[fPrimeInt toBinaryWithInt:q]];
  }
  else {
    [os writeWithByteArray:LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_getEncodedWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_(self, fPrime_)];
  }
  if (include_h) {
    [os writeWithByteArray:[((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(h_)) toBinaryWithInt:q]];
  }
}

- (IOSByteArray *)getEncodedWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)p {
  return LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_getEncodedWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_(self, p);
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((f_ == nil) ? 0 : ((jint) [((id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>) nil_chk(f_)) hash]));
  result = prime * result + ((fPrime_ == nil) ? 0 : ((jint) [((id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>) nil_chk(fPrime_)) hash]));
  result = prime * result + ((h_ == nil) ? 0 : ((jint) [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(h_)) hash]));
  result = prime * result + ((params_ == nil) ? 0 : ((jint) [((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if (!([obj isKindOfClass:[LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis class]])) {
    return false;
  }
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *other = (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *) cast_chk(obj, [LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis class]);
  if (f_ == nil) {
    if (other->f_ != nil) {
      return false;
    }
  }
  else if (![f_ isEqual:other->f_]) {
    return false;
  }
  if (fPrime_ == nil) {
    if (other->fPrime_ != nil) {
      return false;
    }
  }
  else if (![fPrime_ isEqual:other->fPrime_]) {
    return false;
  }
  if (h_ == nil) {
    if (other->h_ != nil) {
      return false;
    }
  }
  else if (![h_ isEqual:other->h_]) {
    return false;
  }
  if (params_ == nil) {
    if (other->params_ != nil) {
      return false;
    }
  }
  else if (![params_ isEqual:other->params_]) {
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:);
  methods[1].selector = @selector(initWithJavaIoInputStream:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:withBoolean:);
  methods[2].selector = @selector(encodeWithJavaIoOutputStream:withBoolean:);
  methods[3].selector = @selector(getEncodedWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "f_", "LLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "fPrime_", "LLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "h_", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "params_", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", "LJavaIoInputStream;LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;Z", "LJavaIoIOException;", "encode", "LJavaIoOutputStream;Z", "getEncoded", "LLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;", "hashCode", "equals", "LNSObject;", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis = { "Basis", "lib.org.bouncycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x9, 6, 4, 10, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis;
}

@end

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *self, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  NSObject_init(self);
  self->f_ = f;
  self->fPrime_ = fPrime;
  self->h_ = h;
  self->params_ = params;
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis, initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_, f, fPrime, h, params)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis, initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_, f, fPrime, h, params)
}

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_withBoolean_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *self, JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params, jboolean include_h) {
  NSObject_init(self);
  jint N = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params))->N_;
  jint q = params->q_;
  jint d1 = params->d1_;
  jint d2 = params->d2_;
  jint d3 = params->d3_;
  jboolean sparse = params->sparse_;
  self->params_ = params;
  if (params->polyType_ == LibOrgBouncycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_PRODUCT) {
    self->f_ = LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_withInt_withInt_(is, N, d1, d2, d3 + 1, d3);
  }
  else {
    LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *fInt = LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithJavaIoInputStream_withInt_(is, N);
    self->f_ = sparse ? new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(fInt) : (id) new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(fInt);
  }
  if (params->basisType_ == LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_STANDARD) {
    LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *fPrimeInt = LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_(is, N, q);
    for (jint i = 0; i < ((IOSIntArray *) nil_chk(((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(fPrimeInt))->coeffs_))->size_; i++) {
      *IOSIntArray_GetRef(fPrimeInt->coeffs_, i) -= q / 2;
    }
    self->fPrime_ = fPrimeInt;
  }
  else if (params->polyType_ == LibOrgBouncycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_PRODUCT) {
    self->fPrime_ = LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_withInt_withInt_(is, N, d1, d2, d3 + 1, d3);
  }
  else {
    self->fPrime_ = LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithJavaIoInputStream_withInt_(is, N);
  }
  if (include_h) {
    self->h_ = LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_(is, N, q);
  }
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_withBoolean_(JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params, jboolean include_h) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis, initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_withBoolean_, is, params, include_h)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_withBoolean_(JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params, jboolean include_h) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis, initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_withBoolean_, is, params, include_h)
}

IOSByteArray *LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_getEncodedWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *self, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> p) {
  if ([p isKindOfClass:[LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial class]]) {
    return [((LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *) nil_chk(((LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *) p))) toBinary];
  }
  else {
    return [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk([((id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>) nil_chk(p)) toIntegerPolynomial])) toBinary3Tight];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis)
