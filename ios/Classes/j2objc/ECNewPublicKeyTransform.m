//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/ec/ECNewPublicKeyTransform.java
//

#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "ECAlgorithms.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECMultiplier.h"
#include "ECNewPublicKeyTransform.h"
#include "ECPair.h"
#include "ECPoint.h"
#include "ECPublicKeyParameters.h"
#include "ECUtil.h"
#include "FixedPointCombMultiplier.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoEcECNewPublicKeyTransform () {
 @public
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEcECNewPublicKeyTransform, key_, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEcECNewPublicKeyTransform, random_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastleCryptoEcECNewPublicKeyTransform

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEcECNewPublicKeyTransform_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *p = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
    if (!([[((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getParameters] isKindOfClass:[LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ECPublicKeyParameters are required for new public key transform.");
    }
    self->key_ = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk([p getParameters], [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
    self->random_ = [p getRandom];
  }
  else {
    if (!([param isKindOfClass:[LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ECPublicKeyParameters are required for new public key transform.");
    }
    self->key_ = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
    self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  }
}

- (LibOrgBouncycastleCryptoEcECPair *)transformWithLibOrgBouncycastleCryptoEcECPair:(LibOrgBouncycastleCryptoEcECPair *)cipherText {
  if (key_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECNewPublicKeyTransform not initialised");
  }
  LibOrgBouncycastleCryptoParamsECDomainParameters *ec = [key_ getParameters];
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  id<LibOrgBouncycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  JavaMathBigInteger *k = LibOrgBouncycastleCryptoEcECUtil_generateKWithJavaMathBigInteger_withJavaSecuritySecureRandom_(n, random_);
  IOSObjectArray *gamma_phi = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<LibOrgBouncycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithLibOrgBouncycastleMathEcECPoint:[ec getG] withJavaMathBigInteger:k], [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(key_)) getQ])) multiplyWithJavaMathBigInteger:k])) addWithLibOrgBouncycastleMathEcECPoint:LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_([ec getCurve], [((LibOrgBouncycastleCryptoEcECPair *) nil_chk(cipherText)) getY])] } count:2 type:LibOrgBouncycastleMathEcECPoint_class_()];
  [((LibOrgBouncycastleMathEcECCurve *) nil_chk([ec getCurve])) normalizeAllWithLibOrgBouncycastleMathEcECPointArray:gamma_phi];
  return new_LibOrgBouncycastleCryptoEcECPair_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(IOSObjectArray_Get(gamma_phi, 0), IOSObjectArray_Get(gamma_phi, 1));
}

- (id<LibOrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_LibOrgBouncycastleMathEcFixedPointCombMultiplier_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoEcECPair;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(transformWithLibOrgBouncycastleCryptoEcECPair:);
  methods[3].selector = @selector(createBasePointMultiplier);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoCipherParameters;", "transform", "LLibOrgBouncycastleCryptoEcECPair;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEcECNewPublicKeyTransform = { "ECNewPublicKeyTransform", "lib.org.bouncycastle.crypto.ec", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEcECNewPublicKeyTransform;
}

@end

void LibOrgBouncycastleCryptoEcECNewPublicKeyTransform_init(LibOrgBouncycastleCryptoEcECNewPublicKeyTransform *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoEcECNewPublicKeyTransform *new_LibOrgBouncycastleCryptoEcECNewPublicKeyTransform_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEcECNewPublicKeyTransform, init)
}

LibOrgBouncycastleCryptoEcECNewPublicKeyTransform *create_LibOrgBouncycastleCryptoEcECNewPublicKeyTransform_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEcECNewPublicKeyTransform, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEcECNewPublicKeyTransform)
