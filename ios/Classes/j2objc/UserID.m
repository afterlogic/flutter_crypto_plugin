//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/UserID.java
//

#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyBoxByteBuffer.h"
#include "Strings.h"
#include "UserID.h"

@interface LibOrgBouncycastleGpgKeyboxUserID () {
 @public
  jlong offsetToUserId_;
  jlong lengthOfUserId_;
  jint userIdFlags_;
  jint validity_;
  jint reserved_;
  IOSByteArray *userID_;
}

- (instancetype)initWithLong:(jlong)offsetToUserId
                    withLong:(jlong)lengthOfUserId
                     withInt:(jint)userIdFlags
                     withInt:(jint)validity
                     withInt:(jint)reserved
               withByteArray:(IOSByteArray *)userID;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxUserID, userID_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleGpgKeyboxUserID_initWithLong_withLong_withInt_withInt_withInt_withByteArray_(LibOrgBouncycastleGpgKeyboxUserID *self, jlong offsetToUserId, jlong lengthOfUserId, jint userIdFlags, jint validity, jint reserved, IOSByteArray *userID);

__attribute__((unused)) static LibOrgBouncycastleGpgKeyboxUserID *new_LibOrgBouncycastleGpgKeyboxUserID_initWithLong_withLong_withInt_withInt_withInt_withByteArray_(jlong offsetToUserId, jlong lengthOfUserId, jint userIdFlags, jint validity, jint reserved, IOSByteArray *userID) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleGpgKeyboxUserID *create_LibOrgBouncycastleGpgKeyboxUserID_initWithLong_withLong_withInt_withInt_withInt_withByteArray_(jlong offsetToUserId, jlong lengthOfUserId, jint userIdFlags, jint validity, jint reserved, IOSByteArray *userID);

@implementation LibOrgBouncycastleGpgKeyboxUserID

- (instancetype)initWithLong:(jlong)offsetToUserId
                    withLong:(jlong)lengthOfUserId
                     withInt:(jint)userIdFlags
                     withInt:(jint)validity
                     withInt:(jint)reserved
               withByteArray:(IOSByteArray *)userID {
  LibOrgBouncycastleGpgKeyboxUserID_initWithLong_withLong_withInt_withInt_withInt_withByteArray_(self, offsetToUserId, lengthOfUserId, userIdFlags, validity, reserved, userID);
  return self;
}

+ (LibOrgBouncycastleGpgKeyboxUserID *)getInstanceWithId:(id)src
                                                 withInt:(jint)base {
  return LibOrgBouncycastleGpgKeyboxUserID_getInstanceWithId_withInt_(src, base);
}

- (jlong)getOffsetToUserId {
  return offsetToUserId_;
}

- (jlong)getLengthOfUserId {
  return lengthOfUserId_;
}

- (jlong)getUserIdFlags {
  return userIdFlags_;
}

- (jint)getValidity {
  return validity_;
}

- (jint)getReserved {
  return reserved_;
}

- (IOSByteArray *)getUserID {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(userID_);
}

- (NSString *)getUserIDAsString {
  return LibOrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(userID_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleGpgKeyboxUserID;", 0x8, 1, 2, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:withLong:withInt:withInt:withInt:withByteArray:);
  methods[1].selector = @selector(getInstanceWithId:withInt:);
  methods[2].selector = @selector(getOffsetToUserId);
  methods[3].selector = @selector(getLengthOfUserId);
  methods[4].selector = @selector(getUserIdFlags);
  methods[5].selector = @selector(getValidity);
  methods[6].selector = @selector(getReserved);
  methods[7].selector = @selector(getUserID);
  methods[8].selector = @selector(getUserIDAsString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "offsetToUserId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lengthOfUserId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "userIdFlags_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "validity_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reserved_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "userID_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JJIII[B", "getInstance", "LNSObject;I", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleGpgKeyboxUserID = { "UserID", "lib.org.bouncycastle.gpg.keybox", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleGpgKeyboxUserID;
}

@end

void LibOrgBouncycastleGpgKeyboxUserID_initWithLong_withLong_withInt_withInt_withInt_withByteArray_(LibOrgBouncycastleGpgKeyboxUserID *self, jlong offsetToUserId, jlong lengthOfUserId, jint userIdFlags, jint validity, jint reserved, IOSByteArray *userID) {
  NSObject_init(self);
  self->offsetToUserId_ = offsetToUserId;
  self->lengthOfUserId_ = lengthOfUserId;
  self->userIdFlags_ = userIdFlags;
  self->validity_ = validity;
  self->reserved_ = reserved;
  self->userID_ = userID;
}

LibOrgBouncycastleGpgKeyboxUserID *new_LibOrgBouncycastleGpgKeyboxUserID_initWithLong_withLong_withInt_withInt_withInt_withByteArray_(jlong offsetToUserId, jlong lengthOfUserId, jint userIdFlags, jint validity, jint reserved, IOSByteArray *userID) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleGpgKeyboxUserID, initWithLong_withLong_withInt_withInt_withInt_withByteArray_, offsetToUserId, lengthOfUserId, userIdFlags, validity, reserved, userID)
}

LibOrgBouncycastleGpgKeyboxUserID *create_LibOrgBouncycastleGpgKeyboxUserID_initWithLong_withLong_withInt_withInt_withInt_withByteArray_(jlong offsetToUserId, jlong lengthOfUserId, jint userIdFlags, jint validity, jint reserved, IOSByteArray *userID) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleGpgKeyboxUserID, initWithLong_withLong_withInt_withInt_withInt_withByteArray_, offsetToUserId, lengthOfUserId, userIdFlags, validity, reserved, userID)
}

LibOrgBouncycastleGpgKeyboxUserID *LibOrgBouncycastleGpgKeyboxUserID_getInstanceWithId_withInt_(id src, jint base) {
  LibOrgBouncycastleGpgKeyboxUserID_initialize();
  if ([src isKindOfClass:[LibOrgBouncycastleGpgKeyboxUserID class]]) {
    return (LibOrgBouncycastleGpgKeyboxUserID *) src;
  }
  LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *buffer = LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_wrapWithId_(src);
  jlong offsetToUserId = [((LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *) nil_chk(buffer)) u32];
  jlong lengthOfUserId = [buffer u32];
  jint specialUserIdFlags = [buffer u16];
  jint validity = [buffer u8];
  jint reserved = [buffer u8];
  IOSByteArray *userID = [buffer rangeOfWithInt:(jint) (base + offsetToUserId) withInt:(jint) (base + offsetToUserId + lengthOfUserId)];
  return new_LibOrgBouncycastleGpgKeyboxUserID_initWithLong_withLong_withInt_withInt_withInt_withByteArray_(offsetToUserId, lengthOfUserId, specialUserIdFlags, validity, reserved, userID);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleGpgKeyboxUserID)
