//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/qualified/TypeOfBiometricData.java
//

#include "ASN1Encodable.h"
#include "ASN1Integer.h"
#include "ASN1Object.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "J2ObjC_source.h"
#include "TypeOfBiometricData.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

@implementation LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData

+ (jint)PICTURE {
  return LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_PICTURE;
}

+ (jint)HANDWRITTEN_SIGNATURE {
  return LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_HANDWRITTEN_SIGNATURE;
}

+ (LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_getInstanceWithId_(obj);
}

- (instancetype)initWithInt:(jint)predefinedBiometricType {
  LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithInt_(self, predefinedBiometricType);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)BiometricDataID {
  LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, BiometricDataID);
  return self;
}

- (jboolean)isPredefined {
  return [obj_ isKindOfClass:[LibOrgBouncycastleAsn1ASN1Integer class]];
}

- (jint)getPredefinedBiometricType {
  return [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk(obj_, [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue])) intValue];
}

- (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getBiometricDataOid {
  return (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk(obj_, [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return [((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(obj_)) toASN1Primitive];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[3].selector = @selector(isPredefined);
  methods[4].selector = @selector(getPredefinedBiometricType);
  methods[5].selector = @selector(getBiometricDataOid);
  methods[6].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PICTURE", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_PICTURE, 0x19, -1, -1, -1, -1 },
    { "HANDWRITTEN_SIGNATURE", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_HANDWRITTEN_SIGNATURE, 0x19, -1, -1, -1, -1 },
    { "obj_", "LLibOrgBouncycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "I", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData = { "TypeOfBiometricData", "lib.org.bouncycastle.asn1.x509.qualified", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData;
}

@end

LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initialize();
  if (obj == nil || [obj isKindOfClass:[LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData class]]) {
    return (LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *) cast_chk(obj, [LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData class]);
  }
  if ([obj isKindOfClass:[LibOrgBouncycastleAsn1ASN1Integer class]]) {
    LibOrgBouncycastleAsn1ASN1Integer *predefinedBiometricTypeObj = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(obj);
    jint predefinedBiometricType = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(predefinedBiometricTypeObj)) getValue])) intValue];
    return new_LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithInt_(predefinedBiometricType);
  }
  else if ([obj isKindOfClass:[LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]]) {
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *BiometricDataID = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_(obj);
    return new_LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(BiometricDataID);
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown object in getInstance");
}

void LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithInt_(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *self, jint predefinedBiometricType) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  if (predefinedBiometricType == LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_PICTURE || predefinedBiometricType == LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_HANDWRITTEN_SIGNATURE) {
    self->obj_ = new_LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(predefinedBiometricType);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknow PredefinedBiometricType : ", predefinedBiometricType));
  }
}

LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *new_LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithInt_(jint predefinedBiometricType) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData, initWithInt_, predefinedBiometricType)
}

LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *create_LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithInt_(jint predefinedBiometricType) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData, initWithInt_, predefinedBiometricType)
}

void LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *BiometricDataID) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->obj_ = BiometricDataID;
}

LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *new_LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *BiometricDataID) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData, initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_, BiometricDataID)
}

LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *create_LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *BiometricDataID) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData, initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_, BiometricDataID)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData)
