//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/PolicyMappings.java
//

#ifndef PolicyMappings_H
#define PolicyMappings_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaUtilHashtable;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1X509CertPolicyId;

@interface LibOrgBouncycastleAsn1X509PolicyMappings : LibOrgBouncycastleAsn1ASN1Object {
 @public
  LibOrgBouncycastleAsn1ASN1Sequence *seq_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509CertPolicyId:(LibOrgBouncycastleAsn1X509CertPolicyId *)issuerDomainPolicy
                              withLibOrgBouncycastleAsn1X509CertPolicyId:(LibOrgBouncycastleAsn1X509CertPolicyId *)subjectDomainPolicy;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509CertPolicyIdArray:(IOSObjectArray *)issuerDomainPolicy
                              withLibOrgBouncycastleAsn1X509CertPolicyIdArray:(IOSObjectArray *)subjectDomainPolicy;

- (instancetype __nonnull)initWithJavaUtilHashtable:(JavaUtilHashtable *)mappings;

+ (LibOrgBouncycastleAsn1X509PolicyMappings *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509PolicyMappings)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PolicyMappings, seq_, LibOrgBouncycastleAsn1ASN1Sequence *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyMappings *LibOrgBouncycastleAsn1X509PolicyMappings_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509PolicyMappings_initWithJavaUtilHashtable_(LibOrgBouncycastleAsn1X509PolicyMappings *self, JavaUtilHashtable *mappings);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyMappings *new_LibOrgBouncycastleAsn1X509PolicyMappings_initWithJavaUtilHashtable_(JavaUtilHashtable *mappings) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyMappings *create_LibOrgBouncycastleAsn1X509PolicyMappings_initWithJavaUtilHashtable_(JavaUtilHashtable *mappings);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509PolicyMappings_initWithLibOrgBouncycastleAsn1X509CertPolicyId_withLibOrgBouncycastleAsn1X509CertPolicyId_(LibOrgBouncycastleAsn1X509PolicyMappings *self, LibOrgBouncycastleAsn1X509CertPolicyId *issuerDomainPolicy, LibOrgBouncycastleAsn1X509CertPolicyId *subjectDomainPolicy);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyMappings *new_LibOrgBouncycastleAsn1X509PolicyMappings_initWithLibOrgBouncycastleAsn1X509CertPolicyId_withLibOrgBouncycastleAsn1X509CertPolicyId_(LibOrgBouncycastleAsn1X509CertPolicyId *issuerDomainPolicy, LibOrgBouncycastleAsn1X509CertPolicyId *subjectDomainPolicy) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyMappings *create_LibOrgBouncycastleAsn1X509PolicyMappings_initWithLibOrgBouncycastleAsn1X509CertPolicyId_withLibOrgBouncycastleAsn1X509CertPolicyId_(LibOrgBouncycastleAsn1X509CertPolicyId *issuerDomainPolicy, LibOrgBouncycastleAsn1X509CertPolicyId *subjectDomainPolicy);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509PolicyMappings_initWithLibOrgBouncycastleAsn1X509CertPolicyIdArray_withLibOrgBouncycastleAsn1X509CertPolicyIdArray_(LibOrgBouncycastleAsn1X509PolicyMappings *self, IOSObjectArray *issuerDomainPolicy, IOSObjectArray *subjectDomainPolicy);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyMappings *new_LibOrgBouncycastleAsn1X509PolicyMappings_initWithLibOrgBouncycastleAsn1X509CertPolicyIdArray_withLibOrgBouncycastleAsn1X509CertPolicyIdArray_(IOSObjectArray *issuerDomainPolicy, IOSObjectArray *subjectDomainPolicy) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyMappings *create_LibOrgBouncycastleAsn1X509PolicyMappings_initWithLibOrgBouncycastleAsn1X509CertPolicyIdArray_withLibOrgBouncycastleAsn1X509CertPolicyIdArray_(IOSObjectArray *issuerDomainPolicy, IOSObjectArray *subjectDomainPolicy);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509PolicyMappings)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PolicyMappings_H
