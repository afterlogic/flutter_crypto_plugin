//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java
//

#ifndef BaseBlockCipher_H
#define BaseBlockCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BaseWrapCipher.h"
#include "J2ObjC_header.h"
#include "PBE.h"

@class IOSByteArray;
@class JavaNioByteBuffer;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoBufferedBlockCipher;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoModesAEADBlockCipher;
@protocol LibOrgBouncycastleCryptoWrapper;
@protocol LibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider;

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher : LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher < LibOrgBouncycastleJcajceProviderSymmetricUtilPBE >

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)engine;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)engine
                                                                   withBoolean:(jboolean)fixedIv
                                                                       withInt:(jint)ivLength;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                          withBoolean:(jboolean)fixedIv
                                                              withInt:(jint)ivLength;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                              withInt:(jint)ivLength;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                              withInt:(jint)scheme
                                                              withInt:(jint)digest
                                                              withInt:(jint)keySizeInBits
                                                              withInt:(jint)ivLength;

- (instancetype __nonnull)initWithLibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider:(id<LibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider>)provider;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)engine
                                                                  withBoolean:(jboolean)fixedIv
                                                                      withInt:(jint)ivLength;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)engine
                                                                      withInt:(jint)ivLength;

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen;

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset;

- (jint)engineGetBlockSize;

- (IOSByteArray *)engineGetIV;

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (jint)engineGetOutputSizeWithInt:(jint)inputLen;

- (JavaSecurityAlgorithmParameters *)engineGetParameters;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineSetModeWithNSString:(NSString *)mode;

- (void)engineSetPaddingWithNSString:(NSString *)padding;

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen;

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset;

- (void)engineUpdateAADWithByteArray:(IOSByteArray *)input
                             withInt:(jint)offset
                             withInt:(jint)length;

- (void)engineUpdateAADWithJavaNioByteBuffer:(JavaNioByteBuffer *)bytebuffer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoWrapper:(id<LibOrgBouncycastleCryptoWrapper>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoWrapper:(id<LibOrgBouncycastleCryptoWrapper>)arg0
                                                          withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> engine);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> engine) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> engine);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> engine, jint scheme, jint digest, jint keySizeInBits, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jint scheme, jint digest, jint keySizeInBits, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jint scheme, jint digest, jint keySizeInBits, jint ivLength);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, id<LibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider> provider);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider_(id<LibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider> provider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider_(id<LibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider> provider);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoModesAEADBlockCipher_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> engine);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoModesAEADBlockCipher_(id<LibOrgBouncycastleCryptoModesAEADBlockCipher> engine) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoModesAEADBlockCipher_(id<LibOrgBouncycastleCryptoModesAEADBlockCipher> engine);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoModesAEADBlockCipher_withBoolean_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> engine, jboolean fixedIv, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoModesAEADBlockCipher_withBoolean_withInt_(id<LibOrgBouncycastleCryptoModesAEADBlockCipher> engine, jboolean fixedIv, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoModesAEADBlockCipher_withBoolean_withInt_(id<LibOrgBouncycastleCryptoModesAEADBlockCipher> engine, jboolean fixedIv, jint ivLength);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> engine, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jint ivLength);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withBoolean_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> engine, jboolean fixedIv, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withBoolean_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jboolean fixedIv, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withBoolean_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jboolean fixedIv, jint ivLength);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, LibOrgBouncycastleCryptoBufferedBlockCipher *engine, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_withInt_(LibOrgBouncycastleCryptoBufferedBlockCipher *engine, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_withInt_(LibOrgBouncycastleCryptoBufferedBlockCipher *engine, jint ivLength);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_withBoolean_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *self, LibOrgBouncycastleCryptoBufferedBlockCipher *engine, jboolean fixedIv, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_withBoolean_withInt_(LibOrgBouncycastleCryptoBufferedBlockCipher *engine, jboolean fixedIv, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_withBoolean_withInt_(LibOrgBouncycastleCryptoBufferedBlockCipher *engine, jboolean fixedIv, jint ivLength);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BaseBlockCipher_H
