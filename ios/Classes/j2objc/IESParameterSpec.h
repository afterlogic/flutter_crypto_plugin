//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/spec/IESParameterSpec.java
//

#ifndef IESParameterSpec_H
#define IESParameterSpec_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@class IOSByteArray;

@interface LibOrgBouncycastleJceSpecIESParameterSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >

#pragma mark Public

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)derivation
                              withByteArray:(IOSByteArray *)encoding
                                    withInt:(jint)macKeySize;

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)derivation
                              withByteArray:(IOSByteArray *)encoding
                                    withInt:(jint)macKeySize
                                    withInt:(jint)cipherKeySize
                              withByteArray:(IOSByteArray *)nonce;

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)derivation
                              withByteArray:(IOSByteArray *)encoding
                                    withInt:(jint)macKeySize
                                    withInt:(jint)cipherKeySize
                              withByteArray:(IOSByteArray *)nonce
                                withBoolean:(jboolean)usePointCompression;

- (jint)getCipherKeySize;

- (IOSByteArray *)getDerivationV;

- (IOSByteArray *)getEncodingV;

- (jint)getMacKeySize;

- (IOSByteArray *)getNonce;

- (jboolean)getPointCompression;

- (void)setPointCompressionWithBoolean:(jboolean)usePointCompression;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceSpecIESParameterSpec)

FOUNDATION_EXPORT void LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_(LibOrgBouncycastleJceSpecIESParameterSpec *self, IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize);

FOUNDATION_EXPORT LibOrgBouncycastleJceSpecIESParameterSpec *new_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceSpecIESParameterSpec *create_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize);

FOUNDATION_EXPORT void LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_(LibOrgBouncycastleJceSpecIESParameterSpec *self, IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce);

FOUNDATION_EXPORT LibOrgBouncycastleJceSpecIESParameterSpec *new_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceSpecIESParameterSpec *create_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce);

FOUNDATION_EXPORT void LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(LibOrgBouncycastleJceSpecIESParameterSpec *self, IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce, jboolean usePointCompression);

FOUNDATION_EXPORT LibOrgBouncycastleJceSpecIESParameterSpec *new_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce, jboolean usePointCompression) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceSpecIESParameterSpec *create_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce, jboolean usePointCompression);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceSpecIESParameterSpec)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // IESParameterSpec_H
