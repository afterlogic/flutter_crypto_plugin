//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPEncryptedData.java
//

#include "Arrays.h"
#include "BCPGInputStream.h"
#include "IOSPrimitiveArray.h"
#include "InputStreamPacket.h"
#include "J2ObjC_source.h"
#include "PGPDigestCalculator.h"
#include "PGPEncryptedData.h"
#include "PGPException.h"
#include "SymmetricEncIntegrityPacket.h"
#include "java/io/EOFException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"

@implementation LibOrgBouncycastleOpenpgpPGPEncryptedData

- (instancetype)initWithLibOrgBouncycastleBcpgInputStreamPacket:(LibOrgBouncycastleBcpgInputStreamPacket *)encData {
  LibOrgBouncycastleOpenpgpPGPEncryptedData_initWithLibOrgBouncycastleBcpgInputStreamPacket_(self, encData);
  return self;
}

- (JavaIoInputStream *)getInputStream {
  return [((LibOrgBouncycastleBcpgInputStreamPacket *) nil_chk(encData_)) getInputStream];
}

- (jboolean)isIntegrityProtected {
  return ([encData_ isKindOfClass:[LibOrgBouncycastleBcpgSymmetricEncIntegrityPacket class]]);
}

- (jboolean)verify {
  if (![self isIntegrityProtected]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"data not integrity protected.");
  }
  while ([((JavaIoInputStream *) nil_chk(encStream_)) read] >= 0) {
  }
  IOSIntArray *lookAhead = [((LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *) nil_chk(truncStream_)) getLookAhead];
  JavaIoOutputStream *dOut = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(integrityCalculator_)) getOutputStream];
  [((JavaIoOutputStream *) nil_chk(dOut)) writeWithInt:(jbyte) IOSIntArray_Get(nil_chk(lookAhead), 0)];
  [dOut writeWithInt:(jbyte) IOSIntArray_Get(lookAhead, 1)];
  IOSByteArray *digest = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(integrityCalculator_)) getDigest];
  IOSByteArray *streamDigest = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(digest))->size_];
  for (jint i = 0; i != streamDigest->size_; i++) {
    *IOSByteArray_GetRef(streamDigest, i) = (jbyte) IOSIntArray_Get(lookAhead, i + 2);
  }
  return LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(digest, streamDigest);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgInputStreamPacket:);
  methods[1].selector = @selector(getInputStream);
  methods[2].selector = @selector(isIntegrityProtected);
  methods[3].selector = @selector(verify);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encData_", "LLibOrgBouncycastleBcpgInputStreamPacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "encStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "truncStream_", "LLibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "integrityCalculator_", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleBcpgInputStreamPacket;", "LLibOrgBouncycastleOpenpgpPGPException;LJavaIoIOException;", "LLibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPEncryptedData = { "PGPEncryptedData", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x401, 4, 4, -1, 2, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPEncryptedData;
}

@end

void LibOrgBouncycastleOpenpgpPGPEncryptedData_initWithLibOrgBouncycastleBcpgInputStreamPacket_(LibOrgBouncycastleOpenpgpPGPEncryptedData *self, LibOrgBouncycastleBcpgInputStreamPacket *encData) {
  NSObject_init(self);
  self->encData_ = encData;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPEncryptedData)

@implementation LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPEncryptedData:(LibOrgBouncycastleOpenpgpPGPEncryptedData *)outer$
                                            withJavaIoInputStream:(JavaIoInputStream *)inArg {
  LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(self, outer$, inArg);
  return self;
}

- (jint)read {
  jint ch = [((JavaIoInputStream *) nil_chk(in_)) read];
  if (ch >= 0) {
    jint c = IOSIntArray_Get(nil_chk(lookAhead_), bufPtr_);
    *IOSIntArray_GetRef(lookAhead_, bufPtr_) = ch;
    bufPtr_ = (bufPtr_ + 1) % lookAhead_->size_;
    return c;
  }
  return -1;
}

- (IOSIntArray *)getLookAhead {
  IOSIntArray *tmp = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(lookAhead_))->size_];
  jint count = 0;
  for (jint i = bufPtr_; i != lookAhead_->size_; i++) {
    *IOSIntArray_GetRef(tmp, count++) = IOSIntArray_Get(lookAhead_, i);
  }
  for (jint i = 0; i != bufPtr_; i++) {
    *IOSIntArray_GetRef(tmp, count++) = IOSIntArray_Get(lookAhead_, i);
  }
  return tmp;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPEncryptedData:withJavaIoInputStream:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(getLookAhead);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lookAhead_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufPtr_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "in_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "LLibOrgBouncycastleOpenpgpPGPEncryptedData;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream = { "TruncatedStream", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x4, 3, 3, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream;
}

@end

void LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *self, LibOrgBouncycastleOpenpgpPGPEncryptedData *outer$, JavaIoInputStream *inArg) {
  JavaIoInputStream_init(self);
  self->lookAhead_ = [IOSIntArray newArrayWithLength:22];
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(self->lookAhead_))->size_; i++) {
    if ((*IOSIntArray_GetRef(self->lookAhead_, i) = [((JavaIoInputStream *) nil_chk(inArg)) read]) < 0) {
      @throw new_JavaIoEOFException_init();
    }
  }
  self->bufPtr_ = 0;
  self->in_ = inArg;
}

LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *new_LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPEncryptedData *outer$, JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream, initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_, outer$, inArg)
}

LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *create_LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPEncryptedData *outer$, JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream, initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_, outer$, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream)
