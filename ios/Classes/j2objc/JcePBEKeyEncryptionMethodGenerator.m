//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcePBEKeyEncryptionMethodGenerator.java
//

#include "DefaultJcaJceHelper.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcePBEKeyEncryptionMethodGenerator.h"
#include "NamedJcaJceHelper.h"
#include "OperatorHelper.h"
#include "PBEKeyEncryptionMethodGenerator.h"
#include "PGPDigestCalculator.h"
#include "PGPException.h"
#include "PGPUtil.h"
#include "ProviderJcaJceHelper.h"
#include "SHA1PGPDigestCalculator.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Provider.h"
#include "java/security/SecureRandom.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/IllegalBlockSizeException.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "javax/crypto/spec/SecretKeySpec.h"

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator () {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *helper_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, helper_, LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *)

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator

- (instancetype)initWithCharArray:(IOSCharArray *)passPhrase
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(self, passPhrase, s2kDigestCalculator);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)passPhrase {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_(self, passPhrase);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)passPhrase
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator
                          withInt:(jint)s2kCount {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(self, passPhrase, s2kDigestCalculator, s2kCount);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)passPhrase
                          withInt:(jint)s2kCount {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withInt_(self, passPhrase, s2kCount);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *)setProviderWithNSString:(NSString *)providerName {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  (void) [super setSecureRandomWithJavaSecuritySecureRandom:random];
  return self;
}

- (IOSByteArray *)encryptSessionInfoWithInt:(jint)encAlgorithm
                              withByteArray:(IOSByteArray *)key
                              withByteArray:(IOSByteArray *)sessionInfo {
  @try {
    NSString *cName = LibOrgBouncycastleOpenpgpPGPUtil_getSymmetricCipherNameWithInt_(encAlgorithm);
    JavaxCryptoCipher *c = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createCipherWithNSString:JreStrcat("$$", cName, @"/CFB/NoPadding")];
    id<JavaxCryptoSecretKey> sKey = new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(key, LibOrgBouncycastleOpenpgpPGPUtil_getSymmetricCipherNameWithInt_(encAlgorithm));
    [((JavaxCryptoCipher *) nil_chk(c)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:sKey withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([IOSByteArray newArrayWithLength:[c getBlockSize]])];
    return [c doFinalWithByteArray:sessionInfo withInt:0 withInt:((IOSByteArray *) nil_chk(sessionInfo))->size_];
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"illegal block size: ", [e getMessage]), e);
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"bad padding: ", [e getMessage]), e);
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"IV invalid: ", [e getMessage]), e);
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"key invalid: ", [e getMessage]), e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 9, 10, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:);
  methods[1].selector = @selector(initWithCharArray:);
  methods[2].selector = @selector(initWithCharArray:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withInt:);
  methods[3].selector = @selector(initWithCharArray:withInt:);
  methods[4].selector = @selector(setProviderWithJavaSecurityProvider:);
  methods[5].selector = @selector(setProviderWithNSString:);
  methods[6].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[7].selector = @selector(encryptSessionInfoWithInt:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[CLLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", "[C", "[CLLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;I", "[CI", "setProvider", "LJavaSecurityProvider;", "LNSString;", "setSecureRandom", "LJavaSecuritySecureRandom;", "encryptSessionInfo", "I[B[B", "LLibOrgBouncycastleOpenpgpPGPException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator = { "JcePBEKeyEncryptionMethodGenerator", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *self, IOSCharArray *passPhrase, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator) {
  LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(self, passPhrase, s2kDigestCalculator);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(IOSCharArray *passPhrase, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_, passPhrase, s2kDigestCalculator)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(IOSCharArray *passPhrase, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_, passPhrase, s2kDigestCalculator)
}

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *self, IOSCharArray *passPhrase) {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(self, passPhrase, new_LibOrgBouncycastleOpenpgpOperatorJcajceSHA1PGPDigestCalculator_init());
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_(IOSCharArray *passPhrase) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, initWithCharArray_, passPhrase)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_(IOSCharArray *passPhrase) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, initWithCharArray_, passPhrase)
}

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *self, IOSCharArray *passPhrase, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount) {
  LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(self, passPhrase, s2kDigestCalculator, s2kCount);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(IOSCharArray *passPhrase, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_, passPhrase, s2kDigestCalculator, s2kCount)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(IOSCharArray *passPhrase, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_, passPhrase, s2kDigestCalculator, s2kCount)
}

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *self, IOSCharArray *passPhrase, jint s2kCount) {
  LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(self, passPhrase, new_LibOrgBouncycastleOpenpgpOperatorJcajceSHA1PGPDigestCalculator_init(), s2kCount);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withInt_(IOSCharArray *passPhrase, jint s2kCount) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, initWithCharArray_withInt_, passPhrase, s2kCount)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_withInt_(IOSCharArray *passPhrase, jint s2kCount) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator, initWithCharArray_withInt_, passPhrase, s2kCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator)
