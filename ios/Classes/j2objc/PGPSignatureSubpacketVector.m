//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPSignatureSubpacketVector.java
//

#include "Features.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuerKeyID.h"
#include "J2ObjC_source.h"
#include "KeyExpirationTime.h"
#include "KeyFlags.h"
#include "NotationData.h"
#include "PGPException.h"
#include "PGPSignature.h"
#include "PGPSignatureList.h"
#include "PGPSignatureSubpacketVector.h"
#include "PreferredAlgorithms.h"
#include "PrimaryUserID.h"
#include "SignatureCreationTime.h"
#include "SignatureExpirationTime.h"
#include "SignaturePacket.h"
#include "SignatureSubpacket.h"
#include "SignatureSubpacketTags.h"
#include "SignatureTarget.h"
#include "SignerUserID.h"
#include "java/io/IOException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"

@implementation LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector

- (instancetype)initWithLibOrgBouncycastleBcpgSignatureSubpacketArray:(IOSObjectArray *)packets {
  LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_initWithLibOrgBouncycastleBcpgSignatureSubpacketArray_(self, packets);
  return self;
}

- (LibOrgBouncycastleBcpgSignatureSubpacket *)getSubpacketWithInt:(jint)type {
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(packets_))->size_; i++) {
    if ([((LibOrgBouncycastleBcpgSignatureSubpacket *) nil_chk(IOSObjectArray_Get(packets_, i))) getType] == type) {
      return IOSObjectArray_Get(nil_chk(packets_), i);
    }
  }
  return nil;
}

- (jboolean)hasSubpacketWithInt:(jint)type {
  return [self getSubpacketWithInt:type] != nil;
}

- (IOSObjectArray *)getSubpacketsWithInt:(jint)type {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(packets_))->size_; i++) {
    if ([((LibOrgBouncycastleBcpgSignatureSubpacket *) nil_chk(IOSObjectArray_Get(packets_, i))) getType] == type) {
      [list addWithId:IOSObjectArray_Get(nil_chk(packets_), i)];
    }
  }
  return (IOSObjectArray *) cast_check([list toArrayWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:LibOrgBouncycastleBcpgSignatureSubpacket_class_()]], IOSClass_arrayType(LibOrgBouncycastleBcpgSignatureSubpacket_class_(), 1));
}

- (LibOrgBouncycastleOpenpgpPGPSignatureList *)getEmbeddedSignatures {
  IOSObjectArray *sigs = [self getSubpacketsWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_EMBEDDED_SIGNATURE];
  JavaUtilArrayList *l = new_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(sigs))->size_; i++) {
    @try {
      [l addWithId:new_LibOrgBouncycastleOpenpgpPGPSignature_initWithLibOrgBouncycastleBcpgSignaturePacket_(LibOrgBouncycastleBcpgSignaturePacket_fromByteArrayWithByteArray_([((LibOrgBouncycastleBcpgSignatureSubpacket *) nil_chk(IOSObjectArray_Get(sigs, i))) getData]))];
    }
    @catch (JavaIoIOException *e) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"Unable to parse signature packet: ", [e getMessage]), e);
    }
  }
  return new_LibOrgBouncycastleOpenpgpPGPSignatureList_initWithLibOrgBouncycastleOpenpgpPGPSignatureArray_((IOSObjectArray *) cast_check([l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:LibOrgBouncycastleOpenpgpPGPSignature_class_()]], IOSClass_arrayType(LibOrgBouncycastleOpenpgpPGPSignature_class_(), 1)));
}

- (IOSObjectArray *)getNotationDataOccurrences {
  IOSObjectArray *notations = [self getSubpacketsWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_NOTATION_DATA];
  IOSObjectArray *vals = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(notations))->size_ type:LibOrgBouncycastleBcpgSigNotationData_class_()];
  for (jint i = 0; i < notations->size_; i++) {
    (void) IOSObjectArray_Set(vals, i, (LibOrgBouncycastleBcpgSigNotationData *) cast_chk(IOSObjectArray_Get(notations, i), [LibOrgBouncycastleBcpgSigNotationData class]));
  }
  return vals;
}

- (IOSObjectArray *)getNotationDataOccurences {
  return [self getNotationDataOccurrences];
}

- (jlong)getIssuerKeyID {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_ISSUER_KEY_ID];
  if (p == nil) {
    return 0;
  }
  return [((LibOrgBouncycastleBcpgSigIssuerKeyID *) cast_chk(p, [LibOrgBouncycastleBcpgSigIssuerKeyID class])) getKeyID];
}

- (JavaUtilDate *)getSignatureCreationTime {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_CREATION_TIME];
  if (p == nil) {
    return nil;
  }
  return [((LibOrgBouncycastleBcpgSigSignatureCreationTime *) cast_chk(p, [LibOrgBouncycastleBcpgSigSignatureCreationTime class])) getTime];
}

- (jlong)getSignatureExpirationTime {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_EXPIRE_TIME];
  if (p == nil) {
    return 0;
  }
  return [((LibOrgBouncycastleBcpgSigSignatureExpirationTime *) cast_chk(p, [LibOrgBouncycastleBcpgSigSignatureExpirationTime class])) getTime];
}

- (jlong)getKeyExpirationTime {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_KEY_EXPIRE_TIME];
  if (p == nil) {
    return 0;
  }
  return [((LibOrgBouncycastleBcpgSigKeyExpirationTime *) cast_chk(p, [LibOrgBouncycastleBcpgSigKeyExpirationTime class])) getTime];
}

- (IOSIntArray *)getPreferredHashAlgorithms {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_HASH_ALGS];
  if (p == nil) {
    return nil;
  }
  return [((LibOrgBouncycastleBcpgSigPreferredAlgorithms *) cast_chk(p, [LibOrgBouncycastleBcpgSigPreferredAlgorithms class])) getPreferences];
}

- (IOSIntArray *)getPreferredSymmetricAlgorithms {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_SYM_ALGS];
  if (p == nil) {
    return nil;
  }
  return [((LibOrgBouncycastleBcpgSigPreferredAlgorithms *) cast_chk(p, [LibOrgBouncycastleBcpgSigPreferredAlgorithms class])) getPreferences];
}

- (IOSIntArray *)getPreferredCompressionAlgorithms {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_COMP_ALGS];
  if (p == nil) {
    return nil;
  }
  return [((LibOrgBouncycastleBcpgSigPreferredAlgorithms *) cast_chk(p, [LibOrgBouncycastleBcpgSigPreferredAlgorithms class])) getPreferences];
}

- (jint)getKeyFlags {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_KEY_FLAGS];
  if (p == nil) {
    return 0;
  }
  return [((LibOrgBouncycastleBcpgSigKeyFlags *) cast_chk(p, [LibOrgBouncycastleBcpgSigKeyFlags class])) getFlags];
}

- (NSString *)getSignerUserID {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_SIGNER_USER_ID];
  if (p == nil) {
    return nil;
  }
  return [((LibOrgBouncycastleBcpgSigSignerUserID *) cast_chk(p, [LibOrgBouncycastleBcpgSigSignerUserID class])) getID];
}

- (jboolean)isPrimaryUserID {
  LibOrgBouncycastleBcpgSigPrimaryUserID *primaryId = (LibOrgBouncycastleBcpgSigPrimaryUserID *) cast_chk([self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_PRIMARY_USER_ID], [LibOrgBouncycastleBcpgSigPrimaryUserID class]);
  if (primaryId != nil) {
    return [primaryId isPrimaryUserID];
  }
  return false;
}

- (IOSIntArray *)getCriticalTags {
  jint count = 0;
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(packets_))->size_; i++) {
    if ([((LibOrgBouncycastleBcpgSignatureSubpacket *) nil_chk(IOSObjectArray_Get(packets_, i))) isCritical]) {
      count++;
    }
  }
  IOSIntArray *list = [IOSIntArray newArrayWithLength:count];
  count = 0;
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(packets_))->size_; i++) {
    if ([((LibOrgBouncycastleBcpgSignatureSubpacket *) nil_chk(IOSObjectArray_Get(packets_, i))) isCritical]) {
      *IOSIntArray_GetRef(list, count++) = [((LibOrgBouncycastleBcpgSignatureSubpacket *) nil_chk(IOSObjectArray_Get(nil_chk(packets_), i))) getType];
    }
  }
  return list;
}

- (LibOrgBouncycastleBcpgSigSignatureTarget *)getSignatureTarget {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_SIGNATURE_TARGET];
  if (p == nil) {
    return nil;
  }
  return new_LibOrgBouncycastleBcpgSigSignatureTarget_initWithBoolean_withBoolean_withByteArray_([p isCritical], [p isLongLength], [p getData]);
}

- (LibOrgBouncycastleBcpgSigFeatures *)getFeatures {
  LibOrgBouncycastleBcpgSignatureSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgSignatureSubpacketTags_FEATURES];
  if (p == nil) {
    return nil;
  }
  return new_LibOrgBouncycastleBcpgSigFeatures_initWithBoolean_withBoolean_withByteArray_([p isCritical], [p isLongLength], [p getData]);
}

- (jint)size {
  return ((IOSObjectArray *) nil_chk(packets_))->size_;
}

- (IOSObjectArray *)toSubpacketArray {
  return packets_;
}

- (IOSObjectArray *)toArray {
  IOSObjectArray *rv = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(packets_))->size_ type:LibOrgBouncycastleBcpgSignatureSubpacket_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(packets_, 0, rv, 0, rv->size_);
  return rv;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgSignatureSubpacket;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleBcpgSignatureSubpacket;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSignatureList;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleBcpgSigNotationData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleBcpgSigNotationData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgSigSignatureTarget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgSigFeatures;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleBcpgSignatureSubpacket;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleBcpgSignatureSubpacket;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgSignatureSubpacketArray:);
  methods[1].selector = @selector(getSubpacketWithInt:);
  methods[2].selector = @selector(hasSubpacketWithInt:);
  methods[3].selector = @selector(getSubpacketsWithInt:);
  methods[4].selector = @selector(getEmbeddedSignatures);
  methods[5].selector = @selector(getNotationDataOccurrences);
  methods[6].selector = @selector(getNotationDataOccurences);
  methods[7].selector = @selector(getIssuerKeyID);
  methods[8].selector = @selector(getSignatureCreationTime);
  methods[9].selector = @selector(getSignatureExpirationTime);
  methods[10].selector = @selector(getKeyExpirationTime);
  methods[11].selector = @selector(getPreferredHashAlgorithms);
  methods[12].selector = @selector(getPreferredSymmetricAlgorithms);
  methods[13].selector = @selector(getPreferredCompressionAlgorithms);
  methods[14].selector = @selector(getKeyFlags);
  methods[15].selector = @selector(getSignerUserID);
  methods[16].selector = @selector(isPrimaryUserID);
  methods[17].selector = @selector(getCriticalTags);
  methods[18].selector = @selector(getSignatureTarget);
  methods[19].selector = @selector(getFeatures);
  methods[20].selector = @selector(size);
  methods[21].selector = @selector(toSubpacketArray);
  methods[22].selector = @selector(toArray);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "packets_", "[LLibOrgBouncycastleBcpgSignatureSubpacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LLibOrgBouncycastleBcpgSignatureSubpacket;", "getSubpacket", "I", "hasSubpacket", "getSubpackets", "LLibOrgBouncycastleOpenpgpPGPException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector = { "PGPSignatureSubpacketVector", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 23, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;
}

@end

void LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_initWithLibOrgBouncycastleBcpgSignatureSubpacketArray_(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *self, IOSObjectArray *packets) {
  NSObject_init(self);
  self->packets_ = packets;
}

LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *new_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_initWithLibOrgBouncycastleBcpgSignatureSubpacketArray_(IOSObjectArray *packets) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector, initWithLibOrgBouncycastleBcpgSignatureSubpacketArray_, packets)
}

LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *create_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_initWithLibOrgBouncycastleBcpgSignatureSubpacketArray_(IOSObjectArray *packets) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector, initWithLibOrgBouncycastleBcpgSignatureSubpacketArray_, packets)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector)
