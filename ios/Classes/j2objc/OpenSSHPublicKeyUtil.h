//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/OpenSSHPublicKeyUtil.java
//

#ifndef OpenSSHPublicKeyUtil_H
#define OpenSSHPublicKeyUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoUtilSSHBuffer;

@interface LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil : NSObject

#pragma mark Public

+ (IOSByteArray *)encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)cipherParameters;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)parsePublicKeyWithByteArray:(IOSByteArray *)encoded;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)parsePublicKeyWithLibOrgBouncycastleCryptoUtilSSHBuffer:(LibOrgBouncycastleCryptoUtilSSHBuffer *)buffer;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil)

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithByteArray_(IOSByteArray *encoded);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *cipherParameters);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithLibOrgBouncycastleCryptoUtilSSHBuffer_(LibOrgBouncycastleCryptoUtilSSHBuffer *buffer);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OpenSSHPublicKeyUtil_H
