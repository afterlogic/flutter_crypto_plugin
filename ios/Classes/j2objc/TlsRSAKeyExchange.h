//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsRSAKeyExchange.java
//

#ifndef TlsRSAKeyExchange_H
#define TlsRSAKeyExchange_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsKeyExchange.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoParamsRSAKeyParameters;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsEncryptionCredentials;

@interface LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange : LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange {
 @public
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *serverPublicKey_;
  LibOrgBouncycastleCryptoParamsRSAKeyParameters *rsaServerPublicKey_;
  id<LibOrgBouncycastleCryptoTlsTlsEncryptionCredentials> serverCredentials_;
  IOSByteArray *premasterSecret_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)generatePremasterSecret;

- (void)processClientCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)skipServerCredentials;

- (void)validateCertificateRequestWithLibOrgBouncycastleCryptoTlsCertificateRequest:(LibOrgBouncycastleCryptoTlsCertificateRequest *)certificateRequest;

#pragma mark Protected

- (LibOrgBouncycastleCryptoParamsRSAKeyParameters *)validateRSAPublicKeyWithLibOrgBouncycastleCryptoParamsRSAKeyParameters:(LibOrgBouncycastleCryptoParamsRSAKeyParameters *)key;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0
                   withJavaUtilVector:(JavaUtilVector *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange, serverPublicKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange, rsaServerPublicKey_, LibOrgBouncycastleCryptoParamsRSAKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange, serverCredentials_, id<LibOrgBouncycastleCryptoTlsTlsEncryptionCredentials>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange, premasterSecret_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange_initWithJavaUtilVector_(LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange *self, JavaUtilVector *supportedSignatureAlgorithms);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange_initWithJavaUtilVector_(JavaUtilVector *supportedSignatureAlgorithms) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange_initWithJavaUtilVector_(JavaUtilVector *supportedSignatureAlgorithms);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsRSAKeyExchange_H
