//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/ECDSASigner.java
//

#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "DSAKCalculator.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECDSASigner.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECKeyParameters.h"
#include "ECMultiplier.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "FixedPointCombMultiplier.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "RandomDSAKCalculator.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoSignersECDSASigner () {
 @public
  id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator_;
  LibOrgBouncycastleCryptoParamsECKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersECDSASigner, kCalculator_, id<LibOrgBouncycastleCryptoSignersDSAKCalculator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersECDSASigner, key_, LibOrgBouncycastleCryptoParamsECKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersECDSASigner, random_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastleCryptoSignersECDSASigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoSignersECDSASigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoSignersDSAKCalculator:(id<LibOrgBouncycastleCryptoSignersDSAKCalculator>)kCalculator {
  LibOrgBouncycastleCryptoSignersECDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(self, kCalculator);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  JavaSecuritySecureRandom *providedRandom = nil;
  if (forSigning) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->key_ = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
      providedRandom = [rParam getRandom];
    }
    else {
      self->key_ = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  }
  self->random_ = [self initSecureRandomWithBoolean:forSigning && ![((id<LibOrgBouncycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) isDeterministic] withJavaSecuritySecureRandom:providedRandom];
}

- (JavaMathBigInteger *)getOrder {
  return [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters])) getN];
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  LibOrgBouncycastleCryptoParamsECDomainParameters *ec = [((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  JavaMathBigInteger *e = [self calculateEWithJavaMathBigInteger:n withByteArray:message];
  JavaMathBigInteger *d = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class])))) getD];
  if ([((id<LibOrgBouncycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) isDeterministic]) {
    [kCalculator_ init__WithJavaMathBigInteger:n withJavaMathBigInteger:d withByteArray:message];
  }
  else {
    [kCalculator_ init__WithJavaMathBigInteger:n withJavaSecuritySecureRandom:random_];
  }
  JavaMathBigInteger *r;
  JavaMathBigInteger *s;
  id<LibOrgBouncycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  do {
    JavaMathBigInteger *k;
    do {
      k = [kCalculator_ nextK];
      LibOrgBouncycastleMathEcECPoint *p = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((id<LibOrgBouncycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithLibOrgBouncycastleMathEcECPoint:[ec getG] withJavaMathBigInteger:k])) normalize];
      r = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getAffineXCoord])) toBigInteger])) modWithJavaMathBigInteger:n];
    }
    while ([((JavaMathBigInteger *) nil_chk(r)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]);
    s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(k)) modInverseWithJavaMathBigInteger:n])) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(e)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(d)) multiplyWithJavaMathBigInteger:r]]])) modWithJavaMathBigInteger:n];
  }
  while ([((JavaMathBigInteger *) nil_chk(s)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]);
  return [IOSObjectArray newArrayWithObjects:(id[]){ r, s } count:2 type:JavaMathBigInteger_class_()];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  LibOrgBouncycastleCryptoParamsECDomainParameters *ec = [((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  JavaMathBigInteger *e = [self calculateEWithJavaMathBigInteger:n withByteArray:message];
  if ([((JavaMathBigInteger *) nil_chk(r)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] < 0 || [r compareToWithId:n] >= 0) {
    return false;
  }
  if ([((JavaMathBigInteger *) nil_chk(s)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] < 0 || [s compareToWithId:n] >= 0) {
    return false;
  }
  JavaMathBigInteger *c = [s modInverseWithJavaMathBigInteger:n];
  JavaMathBigInteger *u1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(e)) multiplyWithJavaMathBigInteger:c])) modWithJavaMathBigInteger:n];
  JavaMathBigInteger *u2 = [((JavaMathBigInteger *) nil_chk([r multiplyWithJavaMathBigInteger:c])) modWithJavaMathBigInteger:n];
  LibOrgBouncycastleMathEcECPoint *G = [ec getG];
  LibOrgBouncycastleMathEcECPoint *Q = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class])))) getQ];
  LibOrgBouncycastleMathEcECPoint *point = LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(G, u1, Q, u2);
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(point)) isInfinity]) {
    return false;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [point getCurve];
  if (curve != nil) {
    JavaMathBigInteger *cofactor = [curve getCofactor];
    if (cofactor != nil && [cofactor compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, EIGHT)] <= 0) {
      LibOrgBouncycastleMathEcECFieldElement *D = [self getDenominatorWithInt:[curve getCoordinateSystem] withLibOrgBouncycastleMathEcECPoint:point];
      if (D != nil && ![D isZero]) {
        LibOrgBouncycastleMathEcECFieldElement *X = [point getXCoord];
        while ([curve isValidFieldElementWithJavaMathBigInteger:r]) {
          LibOrgBouncycastleMathEcECFieldElement *R = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve fromBigIntegerWithJavaMathBigInteger:r])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:D];
          if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(R)) isEqual:X]) {
            return true;
          }
          r = [((JavaMathBigInteger *) nil_chk(r)) addWithJavaMathBigInteger:n];
        }
        return false;
      }
    }
  }
  JavaMathBigInteger *v = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([point normalize])) getAffineXCoord])) toBigInteger])) modWithJavaMathBigInteger:n];
  return [((JavaMathBigInteger *) nil_chk(v)) isEqual:r];
}

- (JavaMathBigInteger *)calculateEWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                           withByteArray:(IOSByteArray *)message {
  jint log2n = [((JavaMathBigInteger *) nil_chk(n)) bitLength];
  jint messageBitLength = ((IOSByteArray *) nil_chk(message))->size_ * 8;
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, message);
  if (log2n < messageBitLength) {
    e = [e shiftRightWithInt:messageBitLength - log2n];
  }
  return e;
}

- (id<LibOrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_LibOrgBouncycastleMathEcFixedPointCombMultiplier_init();
}

- (LibOrgBouncycastleMathEcECFieldElement *)getDenominatorWithInt:(jint)coordinateSystem
                              withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  switch (coordinateSystem) {
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    case LibOrgBouncycastleMathEcECCurve_COORD_SKEWED:
    return [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getZCoordWithInt:0];
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getZCoordWithInt:0])) square];
    default:
    return nil;
  }
}

- (JavaSecuritySecureRandom *)initSecureRandomWithBoolean:(jboolean)needed
                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)provided {
  return !needed ? nil : (provided != nil) ? provided : LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x4, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoSignersDSAKCalculator:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getOrder);
  methods[4].selector = @selector(generateSignatureWithByteArray:);
  methods[5].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[6].selector = @selector(calculateEWithJavaMathBigInteger:withByteArray:);
  methods[7].selector = @selector(createBasePointMultiplier);
  methods[8].selector = @selector(getDenominatorWithInt:withLibOrgBouncycastleMathEcECPoint:);
  methods[9].selector = @selector(initSecureRandomWithBoolean:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "kCalculator_", "LLibOrgBouncycastleCryptoSignersDSAKCalculator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoSignersDSAKCalculator;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;", "calculateE", "LJavaMathBigInteger;[B", "getDenominator", "ILLibOrgBouncycastleMathEcECPoint;", "initSecureRandom", "ZLJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoSignersECDSASigner = { "ECDSASigner", "lib.org.bouncycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoSignersECDSASigner;
}

@end

void LibOrgBouncycastleCryptoSignersECDSASigner_init(LibOrgBouncycastleCryptoSignersECDSASigner *self) {
  NSObject_init(self);
  self->kCalculator_ = new_LibOrgBouncycastleCryptoSignersRandomDSAKCalculator_init();
}

LibOrgBouncycastleCryptoSignersECDSASigner *new_LibOrgBouncycastleCryptoSignersECDSASigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersECDSASigner, init)
}

LibOrgBouncycastleCryptoSignersECDSASigner *create_LibOrgBouncycastleCryptoSignersECDSASigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersECDSASigner, init)
}

void LibOrgBouncycastleCryptoSignersECDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(LibOrgBouncycastleCryptoSignersECDSASigner *self, id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator) {
  NSObject_init(self);
  self->kCalculator_ = kCalculator;
}

LibOrgBouncycastleCryptoSignersECDSASigner *new_LibOrgBouncycastleCryptoSignersECDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersECDSASigner, initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_, kCalculator)
}

LibOrgBouncycastleCryptoSignersECDSASigner *create_LibOrgBouncycastleCryptoSignersECDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersECDSASigner, initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_, kCalculator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoSignersECDSASigner)
