//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/XDHUPrivateParameters.java
//

#include "AsymmetricKeyParameter.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "X25519PrivateKeyParameters.h"
#include "X25519PublicKeyParameters.h"
#include "X448PrivateKeyParameters.h"
#include "X448PublicKeyParameters.h"
#include "XDHUPrivateParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"

@interface LibOrgBouncycastleCryptoParamsXDHUPrivateParameters () {
 @public
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *staticPrivateKey_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPrivateKey_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPublicKey_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters, staticPrivateKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters, ephemeralPrivateKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters, ephemeralPublicKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)

@implementation LibOrgBouncycastleCryptoParamsXDHUPrivateParameters

- (instancetype)initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)staticPrivateKey
                    withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)ephemeralPrivateKey {
  LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(self, staticPrivateKey, ephemeralPrivateKey);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)staticPrivateKey
                    withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)ephemeralPrivateKey
                    withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)ephemeralPublicKey {
  LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(self, staticPrivateKey, ephemeralPrivateKey, ephemeralPublicKey);
  return self;
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getStaticPrivateKey {
  return staticPrivateKey_;
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getEphemeralPrivateKey {
  return ephemeralPrivateKey_;
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getEphemeralPublicKey {
  return ephemeralPublicKey_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[2].selector = @selector(getStaticPrivateKey);
  methods[3].selector = @selector(getEphemeralPrivateKey);
  methods[4].selector = @selector(getEphemeralPublicKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "staticPrivateKey_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ephemeralPrivateKey_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ephemeralPublicKey_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsXDHUPrivateParameters = { "XDHUPrivateParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsXDHUPrivateParameters;
}

@end

void LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *self, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *staticPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPrivateKey) {
  LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(self, staticPrivateKey, ephemeralPrivateKey, nil);
}

LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *new_LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *staticPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPrivateKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, staticPrivateKey, ephemeralPrivateKey)
}

LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *create_LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *staticPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPrivateKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, staticPrivateKey, ephemeralPrivateKey)
}

void LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *self, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *staticPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPublicKey) {
  NSObject_init(self);
  if (staticPrivateKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"staticPrivateKey cannot be null");
  }
  if (!([staticPrivateKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX448PrivateKeyParameters class]] || [staticPrivateKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX25519PrivateKeyParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"only X25519 and X448 paramaters can be used");
  }
  if (ephemeralPrivateKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"ephemeralPrivateKey cannot be null");
  }
  if (![[staticPrivateKey java_getClass] isAssignableFrom:[ephemeralPrivateKey java_getClass]]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"static and ephemeral private keys have different domain parameters");
  }
  if (ephemeralPublicKey == nil) {
    if ([ephemeralPrivateKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX448PrivateKeyParameters class]]) {
      ephemeralPublicKey = [((LibOrgBouncycastleCryptoParamsX448PrivateKeyParameters *) ephemeralPrivateKey) generatePublicKey];
    }
    else {
      ephemeralPublicKey = [((LibOrgBouncycastleCryptoParamsX25519PrivateKeyParameters *) cast_chk(ephemeralPrivateKey, [LibOrgBouncycastleCryptoParamsX25519PrivateKeyParameters class])) generatePublicKey];
    }
  }
  else {
    if ([ephemeralPublicKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX448PublicKeyParameters class]] && !([staticPrivateKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX448PrivateKeyParameters class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ephemeral public key has different domain parameters");
    }
    if ([ephemeralPublicKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX25519PublicKeyParameters class]] && !([staticPrivateKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX25519PrivateKeyParameters class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ephemeral public key has different domain parameters");
    }
  }
  self->staticPrivateKey_ = staticPrivateKey;
  self->ephemeralPrivateKey_ = ephemeralPrivateKey;
  self->ephemeralPublicKey_ = ephemeralPublicKey;
}

LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *new_LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *staticPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPublicKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, staticPrivateKey, ephemeralPrivateKey, ephemeralPublicKey)
}

LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *create_LibOrgBouncycastleCryptoParamsXDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *staticPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *ephemeralPublicKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, staticPrivateKey, ephemeralPrivateKey, ephemeralPublicKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsXDHUPrivateParameters)
