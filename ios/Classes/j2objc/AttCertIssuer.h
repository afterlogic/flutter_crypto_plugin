//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/AttCertIssuer.java
//

#ifndef AttCertIssuer_H
#define AttCertIssuer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1X509GeneralNames;
@class LibOrgBouncycastleAsn1X509V2Form;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1X509AttCertIssuer : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice > {
 @public
  id<LibOrgBouncycastleAsn1ASN1Encodable> obj_;
  LibOrgBouncycastleAsn1ASN1Primitive *choiceObj_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509GeneralNames:(LibOrgBouncycastleAsn1X509GeneralNames *)names;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509V2Form:(LibOrgBouncycastleAsn1X509V2Form *)v2Form;

+ (LibOrgBouncycastleAsn1X509AttCertIssuer *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                       withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1X509AttCertIssuer *)getInstanceWithId:(id)obj;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getIssuer;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509AttCertIssuer)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509AttCertIssuer, obj_, id<LibOrgBouncycastleAsn1ASN1Encodable>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509AttCertIssuer, choiceObj_, LibOrgBouncycastleAsn1ASN1Primitive *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AttCertIssuer *LibOrgBouncycastleAsn1X509AttCertIssuer_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AttCertIssuer *LibOrgBouncycastleAsn1X509AttCertIssuer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509AttCertIssuer_initWithLibOrgBouncycastleAsn1X509GeneralNames_(LibOrgBouncycastleAsn1X509AttCertIssuer *self, LibOrgBouncycastleAsn1X509GeneralNames *names);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AttCertIssuer *new_LibOrgBouncycastleAsn1X509AttCertIssuer_initWithLibOrgBouncycastleAsn1X509GeneralNames_(LibOrgBouncycastleAsn1X509GeneralNames *names) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AttCertIssuer *create_LibOrgBouncycastleAsn1X509AttCertIssuer_initWithLibOrgBouncycastleAsn1X509GeneralNames_(LibOrgBouncycastleAsn1X509GeneralNames *names);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509AttCertIssuer_initWithLibOrgBouncycastleAsn1X509V2Form_(LibOrgBouncycastleAsn1X509AttCertIssuer *self, LibOrgBouncycastleAsn1X509V2Form *v2Form);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AttCertIssuer *new_LibOrgBouncycastleAsn1X509AttCertIssuer_initWithLibOrgBouncycastleAsn1X509V2Form_(LibOrgBouncycastleAsn1X509V2Form *v2Form) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AttCertIssuer *create_LibOrgBouncycastleAsn1X509AttCertIssuer_initWithLibOrgBouncycastleAsn1X509V2Form_(LibOrgBouncycastleAsn1X509V2Form *v2Form);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509AttCertIssuer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // AttCertIssuer_H
