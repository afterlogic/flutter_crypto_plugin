//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ASN1Object.java
//

#ifndef ASN1Object_H
#define ASN1Object_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Encodable.h"
#include "Encodable.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;

@interface LibOrgBouncycastleAsn1ASN1Object : NSObject < LibOrgBouncycastleAsn1ASN1Encodable, LibOrgBouncycastleUtilEncodable >

#pragma mark Public

- (instancetype __nonnull)init;

- (jboolean)isEqual:(id)o;

- (IOSByteArray *)getEncoded;

- (IOSByteArray *)getEncodedWithNSString:(NSString *)encoding;

- (NSUInteger)hash;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Object;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

#pragma mark Protected

+ (jboolean)hasEncodedTagValueWithId:(id)obj
                             withInt:(jint)tagValue;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1ASN1Object)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Object_init(LibOrgBouncycastleAsn1ASN1Object *self);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleAsn1ASN1Object_hasEncodedTagValueWithId_withInt_(id obj, jint tagValue);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1ASN1Object)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ASN1Object_H
