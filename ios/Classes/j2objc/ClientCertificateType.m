//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ClientCertificateType.java
//

#include "ClientCertificateType.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleCryptoTlsClientCertificateType

+ (jshort)rsa_sign {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_sign;
}

+ (jshort)dss_sign {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_dss_sign;
}

+ (jshort)rsa_fixed_dh {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_fixed_dh;
}

+ (jshort)dss_fixed_dh {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_dss_fixed_dh;
}

+ (jshort)rsa_ephemeral_dh_RESERVED {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_ephemeral_dh_RESERVED;
}

+ (jshort)dss_ephemeral_dh_RESERVED {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_dss_ephemeral_dh_RESERVED;
}

+ (jshort)fortezza_dms_RESERVED {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_fortezza_dms_RESERVED;
}

+ (jshort)ecdsa_sign {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_ecdsa_sign;
}

+ (jshort)rsa_fixed_ecdh {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_fixed_ecdh;
}

+ (jshort)ecdsa_fixed_ecdh {
  return LibOrgBouncycastleCryptoTlsClientCertificateType_ecdsa_fixed_ecdh;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsClientCertificateType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rsa_sign", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_sign, 0x19, -1, -1, -1, -1 },
    { "dss_sign", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_dss_sign, 0x19, -1, -1, -1, -1 },
    { "rsa_fixed_dh", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_fixed_dh, 0x19, -1, -1, -1, -1 },
    { "dss_fixed_dh", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_dss_fixed_dh, 0x19, -1, -1, -1, -1 },
    { "rsa_ephemeral_dh_RESERVED", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_ephemeral_dh_RESERVED, 0x19, -1, -1, -1, -1 },
    { "dss_ephemeral_dh_RESERVED", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_dss_ephemeral_dh_RESERVED, 0x19, -1, -1, -1, -1 },
    { "fortezza_dms_RESERVED", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_fortezza_dms_RESERVED, 0x19, -1, -1, -1, -1 },
    { "ecdsa_sign", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_ecdsa_sign, 0x19, -1, -1, -1, -1 },
    { "rsa_fixed_ecdh", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_fixed_ecdh, 0x19, -1, -1, -1, -1 },
    { "ecdsa_fixed_ecdh", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsClientCertificateType_ecdsa_fixed_ecdh, 0x19, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsClientCertificateType = { "ClientCertificateType", "lib.org.bouncycastle.crypto.tls", NULL, methods, fields, 7, 0x1, 1, 10, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsClientCertificateType;
}

@end

void LibOrgBouncycastleCryptoTlsClientCertificateType_init(LibOrgBouncycastleCryptoTlsClientCertificateType *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsClientCertificateType *new_LibOrgBouncycastleCryptoTlsClientCertificateType_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsClientCertificateType, init)
}

LibOrgBouncycastleCryptoTlsClientCertificateType *create_LibOrgBouncycastleCryptoTlsClientCertificateType_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsClientCertificateType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsClientCertificateType)
