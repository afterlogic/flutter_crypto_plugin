//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/PBEFileProcessor.java
//

#include "ArmoredOutputStream.h"
#include "BouncyCastleProvider.h"
#include "CompressionAlgorithmTags.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaPGPDigestCalculatorProviderBuilder.h"
#include "JcaPGPObjectFactory.h"
#include "JcePBEDataDecryptorFactoryBuilder.h"
#include "JcePBEKeyEncryptionMethodGenerator.h"
#include "JcePGPDataEncryptorBuilder.h"
#include "PBEDataDecryptorFactory.h"
#include "PBEFileProcessor.h"
#include "PGPCompressedData.h"
#include "PGPDigestCalculatorProvider.h"
#include "PGPEncryptedDataGenerator.h"
#include "PGPEncryptedDataList.h"
#include "PGPExampleUtil.h"
#include "PGPException.h"
#include "PGPLiteralData.h"
#include "PGPPBEEncryptedData.h"
#include "PGPUtil.h"
#include "Streams.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "java/security/Security.h"

@interface LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor ()

+ (void)decryptFileWithNSString:(NSString *)inputFileName
                  withCharArray:(IOSCharArray *)passPhrase;

+ (void)decryptFileWithJavaIoInputStream:(JavaIoInputStream *)inArg
                           withCharArray:(IOSCharArray *)passPhrase;

+ (void)encryptFileWithNSString:(NSString *)outputFileName
                   withNSString:(NSString *)inputFileName
                  withCharArray:(IOSCharArray *)passPhrase
                    withBoolean:(jboolean)armor
                    withBoolean:(jboolean)withIntegrityCheck;

+ (void)encryptFileWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                             withNSString:(NSString *)fileName
                            withCharArray:(IOSCharArray *)passPhrase
                              withBoolean:(jboolean)armor
                              withBoolean:(jboolean)withIntegrityCheck;

@end

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_decryptFileWithNSString_withCharArray_(NSString *inputFileName, IOSCharArray *passPhrase);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_decryptFileWithJavaIoInputStream_withCharArray_(JavaIoInputStream *inArg, IOSCharArray *passPhrase);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithNSString_withNSString_withCharArray_withBoolean_withBoolean_(NSString *outputFileName, NSString *inputFileName, IOSCharArray *passPhrase, jboolean armor, jboolean withIntegrityCheck);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithJavaIoOutputStream_withNSString_withCharArray_withBoolean_withBoolean_(JavaIoOutputStream *outArg, NSString *fileName, IOSCharArray *passPhrase, jboolean armor, jboolean withIntegrityCheck);

@implementation LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)decryptFileWithNSString:(NSString *)inputFileName
                  withCharArray:(IOSCharArray *)passPhrase {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_decryptFileWithNSString_withCharArray_(inputFileName, passPhrase);
}

+ (void)decryptFileWithJavaIoInputStream:(JavaIoInputStream *)inArg
                           withCharArray:(IOSCharArray *)passPhrase {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_decryptFileWithJavaIoInputStream_withCharArray_(inArg, passPhrase);
}

+ (void)encryptFileWithNSString:(NSString *)outputFileName
                   withNSString:(NSString *)inputFileName
                  withCharArray:(IOSCharArray *)passPhrase
                    withBoolean:(jboolean)armor
                    withBoolean:(jboolean)withIntegrityCheck {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithNSString_withNSString_withCharArray_withBoolean_withBoolean_(outputFileName, inputFileName, passPhrase, armor, withIntegrityCheck);
}

+ (void)encryptFileWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                             withNSString:(NSString *)fileName
                            withCharArray:(IOSCharArray *)passPhrase
                              withBoolean:(jboolean)armor
                              withBoolean:(jboolean)withIntegrityCheck {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithJavaIoOutputStream_withNSString_withCharArray_withBoolean_withBoolean_(outArg, fileName, passPhrase, armor, withIntegrityCheck);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 7, 6, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(decryptFileWithNSString:withCharArray:);
  methods[2].selector = @selector(decryptFileWithJavaIoInputStream:withCharArray:);
  methods[3].selector = @selector(encryptFileWithNSString:withNSString:withCharArray:withBoolean:withBoolean:);
  methods[4].selector = @selector(encryptFileWithJavaIoOutputStream:withNSString:withCharArray:withBoolean:withBoolean:);
  methods[5].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "decryptFile", "LNSString;[C", "LJavaIoIOException;LJavaSecurityNoSuchProviderException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoInputStream;[C", "encryptFile", "LNSString;LNSString;[CZZ", "LJavaIoIOException;LJavaSecurityNoSuchProviderException;", "LJavaIoOutputStream;LNSString;[CZZ", "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor = { "PBEFileProcessor", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor;
}

@end

void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_init(LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor *new_LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor, init)
}

LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor *create_LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor, init)
}

void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_decryptFileWithNSString_withCharArray_(NSString *inputFileName, IOSCharArray *passPhrase) {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_initialize();
  JavaIoInputStream *in = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(inputFileName));
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_decryptFileWithJavaIoInputStream_withCharArray_(in, passPhrase);
  [in close];
}

void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_decryptFileWithJavaIoInputStream_withCharArray_(JavaIoInputStream *inArg, IOSCharArray *passPhrase) {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_initialize();
  inArg = LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(inArg);
  LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *pgpF = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(inArg);
  LibOrgBouncycastleOpenpgpPGPEncryptedDataList *enc;
  id o = [pgpF nextObject];
  if ([o isKindOfClass:[LibOrgBouncycastleOpenpgpPGPEncryptedDataList class]]) {
    enc = (LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) o;
  }
  else {
    enc = (LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) cast_chk([pgpF nextObject], [LibOrgBouncycastleOpenpgpPGPEncryptedDataList class]);
  }
  LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *pbe = (LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *) cast_chk([((LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) nil_chk(enc)) getWithInt:0], [LibOrgBouncycastleOpenpgpPGPPBEEncryptedData class]);
  JavaIoInputStream *clear = [((LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *) nil_chk(pbe)) getDataStreamWithLibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEDataDecryptorFactoryBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEDataDecryptorFactoryBuilder_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_([((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPDigestCalculatorProviderBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPDigestCalculatorProviderBuilder_init() setProviderWithNSString:@"BC"])) build]) setProviderWithNSString:@"BC"])) buildWithCharArray:passPhrase]];
  LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(clear);
  o = [pgpFact nextObject];
  if ([o isKindOfClass:[LibOrgBouncycastleOpenpgpPGPCompressedData class]]) {
    LibOrgBouncycastleOpenpgpPGPCompressedData *cData = (LibOrgBouncycastleOpenpgpPGPCompressedData *) o;
    pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_([((LibOrgBouncycastleOpenpgpPGPCompressedData *) nil_chk(cData)) getDataStream]);
    o = [pgpFact nextObject];
  }
  LibOrgBouncycastleOpenpgpPGPLiteralData *ld = (LibOrgBouncycastleOpenpgpPGPLiteralData *) cast_chk(o, [LibOrgBouncycastleOpenpgpPGPLiteralData class]);
  JavaIoInputStream *unc = [((LibOrgBouncycastleOpenpgpPGPLiteralData *) nil_chk(ld)) getInputStream];
  JavaIoOutputStream *fOut = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_([ld getFileName]));
  LibOrgBouncycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(unc, fOut);
  [fOut close];
  if ([pbe isIntegrityProtected]) {
    if (![pbe verify]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"message failed integrity check"];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"message integrity check passed"];
    }
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"no message integrity check"];
  }
}

void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithNSString_withNSString_withCharArray_withBoolean_withBoolean_(NSString *outputFileName, NSString *inputFileName, IOSCharArray *passPhrase, jboolean armor, jboolean withIntegrityCheck) {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_initialize();
  JavaIoOutputStream *out = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(outputFileName));
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithJavaIoOutputStream_withNSString_withCharArray_withBoolean_withBoolean_(out, inputFileName, passPhrase, armor, withIntegrityCheck);
  [out close];
}

void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithJavaIoOutputStream_withNSString_withCharArray_withBoolean_withBoolean_(JavaIoOutputStream *outArg, NSString *fileName, IOSCharArray *passPhrase, jboolean armor, jboolean withIntegrityCheck) {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_initialize();
  if (armor) {
    outArg = new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(outArg);
  }
  @try {
    IOSByteArray *compressedData = LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_compressFileWithNSString_withInt_(fileName, LibOrgBouncycastleBcpgCompressionAlgorithmTags_ZIP);
    LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *encGen = new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_([((LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *) nil_chk([((LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_initWithInt_(LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAST5) setWithIntegrityPacketWithBoolean:withIntegrityCheck])) setSecureRandomWithJavaSecuritySecureRandom:new_JavaSecuritySecureRandom_init()])) setProviderWithNSString:@"BC"]);
    [encGen addMethodWithLibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator:[new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_(passPhrase) setProviderWithNSString:@"BC"]];
    JavaIoOutputStream *encOut = [encGen openWithJavaIoOutputStream:outArg withLong:((IOSByteArray *) nil_chk(compressedData))->size_];
    [((JavaIoOutputStream *) nil_chk(encOut)) writeWithByteArray:compressedData];
    [encOut close];
    if (armor) {
      [((JavaIoOutputStream *) nil_chk(outArg)) close];
    }
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
    if ([e getUnderlyingException] != nil) {
      [((JavaLangException *) nil_chk([e getUnderlyingException])) printStackTrace];
    }
  }
}

void LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_initialize();
  JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_LibOrgBouncycastleJceProviderBouncyCastleProvider_init());
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) isEqual:@"-e"]) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-a"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-ai"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-ia"]) {
      LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithNSString_withNSString_withCharArray_withBoolean_withBoolean_(JreStrcat("$$", IOSObjectArray_Get(args, 2), @".asc"), IOSObjectArray_Get(args, 2), [((NSString *) nil_chk(IOSObjectArray_Get(args, 3))) java_toCharArray], true, ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) java_indexOf:'i'] > 0));
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-i"]) {
      LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithNSString_withNSString_withCharArray_withBoolean_withBoolean_(JreStrcat("$$", IOSObjectArray_Get(args, 2), @".bpg"), IOSObjectArray_Get(args, 2), [((NSString *) nil_chk(IOSObjectArray_Get(args, 3))) java_toCharArray], false, true);
    }
    else {
      LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_encryptFileWithNSString_withNSString_withCharArray_withBoolean_withBoolean_(JreStrcat("$$", IOSObjectArray_Get(args, 1), @".bpg"), IOSObjectArray_Get(args, 1), [((NSString *) nil_chk(IOSObjectArray_Get(args, 2))) java_toCharArray], false, false);
    }
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-d"]) {
    LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor_decryptFileWithNSString_withCharArray_(IOSObjectArray_Get(args, 1), [((NSString *) nil_chk(IOSObjectArray_Get(args, 2))) java_toCharArray]);
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: PBEFileProcessor -e [-ai]|-d file passPhrase"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesPBEFileProcessor)
