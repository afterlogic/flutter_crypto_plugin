//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/test/TestFailedException.java
//

#include "J2ObjC_source.h"
#include "TestFailedException.h"
#include "TestResult.h"
#include "java/lang/RuntimeException.h"

@interface LibOrgBouncycastleUtilTestTestFailedException () {
 @public
  id<LibOrgBouncycastleUtilTestTestResult> _result_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleUtilTestTestFailedException, _result_, id<LibOrgBouncycastleUtilTestTestResult>)

@implementation LibOrgBouncycastleUtilTestTestFailedException

- (instancetype)initWithLibOrgBouncycastleUtilTestTestResult:(id<LibOrgBouncycastleUtilTestTestResult>)result {
  LibOrgBouncycastleUtilTestTestFailedException_initWithLibOrgBouncycastleUtilTestTestResult_(self, result);
  return self;
}

- (id<LibOrgBouncycastleUtilTestTestResult>)getResult {
  return _result_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilTestTestResult;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleUtilTestTestResult:);
  methods[1].selector = @selector(getResult);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_result_", "LLibOrgBouncycastleUtilTestTestResult;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleUtilTestTestResult;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilTestTestFailedException = { "TestFailedException", "lib.org.bouncycastle.util.test", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilTestTestFailedException;
}

@end

void LibOrgBouncycastleUtilTestTestFailedException_initWithLibOrgBouncycastleUtilTestTestResult_(LibOrgBouncycastleUtilTestTestFailedException *self, id<LibOrgBouncycastleUtilTestTestResult> result) {
  JavaLangRuntimeException_init(self);
  self->_result_ = result;
}

LibOrgBouncycastleUtilTestTestFailedException *new_LibOrgBouncycastleUtilTestTestFailedException_initWithLibOrgBouncycastleUtilTestTestResult_(id<LibOrgBouncycastleUtilTestTestResult> result) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilTestTestFailedException, initWithLibOrgBouncycastleUtilTestTestResult_, result)
}

LibOrgBouncycastleUtilTestTestFailedException *create_LibOrgBouncycastleUtilTestTestFailedException_initWithLibOrgBouncycastleUtilTestTestResult_(id<LibOrgBouncycastleUtilTestTestResult> result) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilTestTestFailedException, initWithLibOrgBouncycastleUtilTestTestResult_, result)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilTestTestFailedException)
