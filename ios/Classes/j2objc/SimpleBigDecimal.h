//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/SimpleBigDecimal.java
//

#ifndef SimpleBigDecimal_H
#define SimpleBigDecimal_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaMathBigInteger;

@interface LibOrgBouncycastleMathEcSimpleBigDecimal : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)bigInt
                                             withInt:(jint)scale_;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)addWithJavaMathBigInteger:(JavaMathBigInteger *)b;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)addWithLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)b;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)adjustScaleWithInt:(jint)newScale;

- (jint)compareToWithJavaMathBigInteger:(JavaMathBigInteger *)val;

- (jint)compareToWithLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)val;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)divideWithJavaMathBigInteger:(JavaMathBigInteger *)b;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)divideWithLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)b;

- (jboolean)isEqual:(id)o;

- (JavaMathBigInteger *)floor;

+ (LibOrgBouncycastleMathEcSimpleBigDecimal *)getInstanceWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                                                        withInt:(jint)scale_;

- (jint)getScale;

- (NSUInteger)hash;

- (jint)intValue;

- (jlong)longValue;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)b;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)multiplyWithLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)b;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)negate;

- (JavaMathBigInteger *)round;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)shiftLeftWithInt:(jint)n;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)subtractWithJavaMathBigInteger:(JavaMathBigInteger *)b;

- (LibOrgBouncycastleMathEcSimpleBigDecimal *)subtractWithLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)b;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcSimpleBigDecimal)

FOUNDATION_EXPORT LibOrgBouncycastleMathEcSimpleBigDecimal *LibOrgBouncycastleMathEcSimpleBigDecimal_getInstanceWithJavaMathBigInteger_withInt_(JavaMathBigInteger *value, jint scale_);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcSimpleBigDecimal_initWithJavaMathBigInteger_withInt_(LibOrgBouncycastleMathEcSimpleBigDecimal *self, JavaMathBigInteger *bigInt, jint scale_);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcSimpleBigDecimal *new_LibOrgBouncycastleMathEcSimpleBigDecimal_initWithJavaMathBigInteger_withInt_(JavaMathBigInteger *bigInt, jint scale_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcSimpleBigDecimal *create_LibOrgBouncycastleMathEcSimpleBigDecimal_initWithJavaMathBigInteger_withInt_(JavaMathBigInteger *bigInt, jint scale_);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcSimpleBigDecimal)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SimpleBigDecimal_H
