//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/GeneralSubtree.java
//

#ifndef GeneralSubtree_H
#define GeneralSubtree_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1X509GeneralName;

@interface LibOrgBouncycastleAsn1X509GeneralSubtree : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)base;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)base
                                                 withJavaMathBigInteger:(JavaMathBigInteger *)minimum
                                                 withJavaMathBigInteger:(JavaMathBigInteger *)maximum;

- (LibOrgBouncycastleAsn1X509GeneralName *)getBase;

+ (LibOrgBouncycastleAsn1X509GeneralSubtree *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)o
                                                                                        withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1X509GeneralSubtree *)getInstanceWithId:(id)obj;

- (JavaMathBigInteger *)getMaximum;

- (JavaMathBigInteger *)getMinimum;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleAsn1X509GeneralSubtree)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509GeneralSubtree_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X509GeneralSubtree *self, LibOrgBouncycastleAsn1X509GeneralName *base, JavaMathBigInteger *minimum, JavaMathBigInteger *maximum);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralSubtree *new_LibOrgBouncycastleAsn1X509GeneralSubtree_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X509GeneralName *base, JavaMathBigInteger *minimum, JavaMathBigInteger *maximum) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralSubtree *create_LibOrgBouncycastleAsn1X509GeneralSubtree_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X509GeneralName *base, JavaMathBigInteger *minimum, JavaMathBigInteger *maximum);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509GeneralSubtree_initWithLibOrgBouncycastleAsn1X509GeneralName_(LibOrgBouncycastleAsn1X509GeneralSubtree *self, LibOrgBouncycastleAsn1X509GeneralName *base);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralSubtree *new_LibOrgBouncycastleAsn1X509GeneralSubtree_initWithLibOrgBouncycastleAsn1X509GeneralName_(LibOrgBouncycastleAsn1X509GeneralName *base) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralSubtree *create_LibOrgBouncycastleAsn1X509GeneralSubtree_initWithLibOrgBouncycastleAsn1X509GeneralName_(LibOrgBouncycastleAsn1X509GeneralName *base);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralSubtree *LibOrgBouncycastleAsn1X509GeneralSubtree_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *o, jboolean explicit_);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralSubtree *LibOrgBouncycastleAsn1X509GeneralSubtree_getInstanceWithId_(id obj);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509GeneralSubtree)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // GeneralSubtree_H
