//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPEncryptedDataGenerator.java
//

#include "BCPGOutputStream.h"
#include "ContainedPacket.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PBEKeyEncryptionMethodGenerator.h"
#include "PGPDataEncryptor.h"
#include "PGPDataEncryptorBuilder.h"
#include "PGPDigestCalculator.h"
#include "PGPEncryptedDataGenerator.h"
#include "PGPException.h"
#include "PGPKeyEncryptionMethodGenerator.h"
#include "PGPUtil.h"
#include "PacketTags.h"
#include "TeeOutputStream.h"
#include "WrappedGeneratorStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator () {
 @public
  LibOrgBouncycastleBcpgBCPGOutputStream *pOut_;
  JavaIoOutputStream *cOut_;
  jboolean oldFormat_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalc_;
  JavaIoOutputStream *genOut_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder> dataEncryptorBuilder_;
  id<JavaUtilList> methods_;
  jint defAlgorithm_;
  JavaSecuritySecureRandom *rand_;
}

- (void)addCheckSumWithByteArray:(IOSByteArray *)sessionInfo;

- (IOSByteArray *)createSessionInfoWithInt:(jint)algorithm
                             withByteArray:(IOSByteArray *)keyBytes;

- (JavaIoOutputStream *)openWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                          withLong:(jlong)length
                                     withByteArray:(IOSByteArray *)buffer;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, pOut_, LibOrgBouncycastleBcpgBCPGOutputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, cOut_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, digestCalc_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, genOut_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, dataEncryptorBuilder_, id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, methods_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, rand_, JavaSecuritySecureRandom *)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_addCheckSumWithByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *self, IOSByteArray *sessionInfo);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_createSessionInfoWithInt_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *self, jint algorithm, IOSByteArray *keyBytes);

__attribute__((unused)) static JavaIoOutputStream *LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_openWithJavaIoOutputStream_withLong_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *self, JavaIoOutputStream *outArg, jlong length, IOSByteArray *buffer);

@interface LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream : LibOrgBouncycastleBcpgBCPGOutputStream

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *)outer$
                                                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                                   withInt:(jint)symmetricKeyEnc
                                                             withByteArray:(IOSByteArray *)buffer;

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *)outer$
                                                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                                   withInt:(jint)symmetricKeyEnc
                                                                  withLong:(jlong)length
                                                               withBoolean:(jboolean)oldFormat;

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *)outer$
                                                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                                   withInt:(jint)symEncIntegrityPro
                                                                  withLong:(jlong)length;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *self, LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, IOSByteArray *buffer);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, IOSByteArray *buffer) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, IOSByteArray *buffer);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *self, LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, jlong length, jboolean oldFormat);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, jlong length, jboolean oldFormat) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, jlong length, jboolean oldFormat);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *self, LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symEncIntegrityPro, jlong length);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symEncIntegrityPro, jlong length) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symEncIntegrityPro, jlong length);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream)

@implementation LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator

+ (jint)S2K_SHA1 {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA1;
}

+ (jint)S2K_SHA224 {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA224;
}

+ (jint)S2K_SHA256 {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA256;
}

+ (jint)S2K_SHA384 {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA384;
}

+ (jint)S2K_SHA512 {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA512;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder:(id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>)encryptorBuilder {
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_(self, encryptorBuilder);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder:(id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>)encryptorBuilder
                                                                     withBoolean:(jboolean)oldFormat {
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_withBoolean_(self, encryptorBuilder, oldFormat);
  return self;
}

- (void)addMethodWithLibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator:(LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *)method {
  [((id<JavaUtilList>) nil_chk(methods_)) addWithId:method];
}

- (void)addCheckSumWithByteArray:(IOSByteArray *)sessionInfo {
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_addCheckSumWithByteArray_(self, sessionInfo);
}

- (IOSByteArray *)createSessionInfoWithInt:(jint)algorithm
                             withByteArray:(IOSByteArray *)keyBytes {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_createSessionInfoWithInt_withByteArray_(self, algorithm, keyBytes);
}

- (JavaIoOutputStream *)openWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                          withLong:(jlong)length
                                     withByteArray:(IOSByteArray *)buffer {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_openWithJavaIoOutputStream_withLong_withByteArray_(self, outArg, length, buffer);
}

- (JavaIoOutputStream *)openWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                          withLong:(jlong)length {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_openWithJavaIoOutputStream_withLong_withByteArray_(self, outArg, length, nil);
}

- (JavaIoOutputStream *)openWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                     withByteArray:(IOSByteArray *)buffer {
  return LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_openWithJavaIoOutputStream_withLong_withByteArray_(self, outArg, 0, buffer);
}

- (void)close {
  if (cOut_ != nil) {
    if (digestCalc_ != nil) {
      LibOrgBouncycastleBcpgBCPGOutputStream *bOut = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_withInt_withLong_(genOut_, LibOrgBouncycastleBcpgPacketTags_MOD_DETECTION_CODE, 20);
      [bOut flush];
      IOSByteArray *dig = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(digestCalc_)) getDigest];
      [((JavaIoOutputStream *) nil_chk(cOut_)) writeWithByteArray:dig];
    }
    [((JavaIoOutputStream *) nil_chk(cOut_)) close];
    cOut_ = nil;
    pOut_ = nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x2, 8, 9, 10, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, 8, 11, 12, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, 8, 13, 12, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder:withBoolean:);
  methods[2].selector = @selector(addMethodWithLibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator:);
  methods[3].selector = @selector(addCheckSumWithByteArray:);
  methods[4].selector = @selector(createSessionInfoWithInt:withByteArray:);
  methods[5].selector = @selector(openWithJavaIoOutputStream:withLong:withByteArray:);
  methods[6].selector = @selector(openWithJavaIoOutputStream:withLong:);
  methods[7].selector = @selector(openWithJavaIoOutputStream:withByteArray:);
  methods[8].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "S2K_SHA1", "I", .constantValue.asInt = LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA1, 0x19, -1, -1, -1, -1 },
    { "S2K_SHA224", "I", .constantValue.asInt = LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA224, 0x19, -1, -1, -1, -1 },
    { "S2K_SHA256", "I", .constantValue.asInt = LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA256, 0x19, -1, -1, -1, -1 },
    { "S2K_SHA384", "I", .constantValue.asInt = LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA384, 0x19, -1, -1, -1, -1 },
    { "S2K_SHA512", "I", .constantValue.asInt = LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_S2K_SHA512, 0x19, -1, -1, -1, -1 },
    { "pOut_", "LLibOrgBouncycastleBcpgBCPGOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cOut_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oldFormat_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digestCalc_", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "genOut_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dataEncryptorBuilder_", "LLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "methods_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rand_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder;", "LLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder;Z", "addMethod", "LLibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator;", "addCheckSum", "[B", "createSessionInfo", "I[B", "open", "LJavaIoOutputStream;J[B", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;LJavaLangIllegalStateException;", "LJavaIoOutputStream;J", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoOutputStream;[B", "LJavaIoIOException;", "LLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator = { "PGPEncryptedDataGenerator", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 9, 14, -1, 15, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator;
}

@end

void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *self, id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder> encryptorBuilder) {
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_withBoolean_(self, encryptorBuilder, false);
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_(id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder> encryptorBuilder) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_, encryptorBuilder)
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_(id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder> encryptorBuilder) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_, encryptorBuilder)
}

void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_withBoolean_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *self, id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder> encryptorBuilder, jboolean oldFormat) {
  NSObject_init(self);
  self->oldFormat_ = false;
  self->methods_ = new_JavaUtilArrayList_init();
  self->dataEncryptorBuilder_ = encryptorBuilder;
  self->oldFormat_ = oldFormat;
  self->defAlgorithm_ = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>) nil_chk(self->dataEncryptorBuilder_)) getAlgorithm];
  self->rand_ = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>) nil_chk(self->dataEncryptorBuilder_)) getSecureRandom];
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_withBoolean_(id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder> encryptorBuilder, jboolean oldFormat) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_withBoolean_, encryptorBuilder, oldFormat)
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_withBoolean_(id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder> encryptorBuilder, jboolean oldFormat) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator, initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_withBoolean_, encryptorBuilder, oldFormat)
}

void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_addCheckSumWithByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *self, IOSByteArray *sessionInfo) {
  jint check = 0;
  for (jint i = 1; i != ((IOSByteArray *) nil_chk(sessionInfo))->size_ - 2; i++) {
    check += IOSByteArray_Get(sessionInfo, i) & (jint) 0xff;
  }
  *IOSByteArray_GetRef(sessionInfo, sessionInfo->size_ - 2) = (jbyte) (JreRShift32(check, 8));
  *IOSByteArray_GetRef(sessionInfo, sessionInfo->size_ - 1) = (jbyte) (check);
}

IOSByteArray *LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_createSessionInfoWithInt_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *self, jint algorithm, IOSByteArray *keyBytes) {
  IOSByteArray *sessionInfo = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(keyBytes))->size_ + 3];
  *IOSByteArray_GetRef(sessionInfo, 0) = (jbyte) algorithm;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keyBytes, 0, sessionInfo, 1, keyBytes->size_);
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_addCheckSumWithByteArray_(self, sessionInfo);
  return sessionInfo;
}

JavaIoOutputStream *LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_openWithJavaIoOutputStream_withLong_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *self, JavaIoOutputStream *outArg, jlong length, IOSByteArray *buffer) {
  if (self->cOut_ != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"generator already in open state");
  }
  if ([((id<JavaUtilList>) nil_chk(self->methods_)) size] == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"no encryption methods specified");
  }
  IOSByteArray *key = nil;
  self->pOut_ = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_(outArg);
  self->defAlgorithm_ = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>) nil_chk(self->dataEncryptorBuilder_)) getAlgorithm];
  self->rand_ = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>) nil_chk(self->dataEncryptorBuilder_)) getSecureRandom];
  if ([((id<JavaUtilList>) nil_chk(self->methods_)) size] == 1) {
    if ([[((id<JavaUtilList>) nil_chk(self->methods_)) getWithInt:0] isKindOfClass:[LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator class]]) {
      LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator *m = (LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator *) cast_chk([((id<JavaUtilList>) nil_chk(self->methods_)) getWithInt:0], [LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator class]);
      key = [((LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator *) nil_chk(m)) getKeyWithInt:[((id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>) nil_chk(self->dataEncryptorBuilder_)) getAlgorithm]];
      [((LibOrgBouncycastleBcpgBCPGOutputStream *) nil_chk(self->pOut_)) writePacketWithLibOrgBouncycastleBcpgContainedPacket:[((LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *) nil_chk(((LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *) cast_chk([((id<JavaUtilList>) nil_chk(self->methods_)) getWithInt:0], [LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator class])))) generateWithInt:self->defAlgorithm_ withByteArray:nil]];
    }
    else {
      key = LibOrgBouncycastleOpenpgpPGPUtil_makeRandomKeyWithInt_withJavaSecuritySecureRandom_(self->defAlgorithm_, self->rand_);
      IOSByteArray *sessionInfo = LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_createSessionInfoWithInt_withByteArray_(self, self->defAlgorithm_, key);
      LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *m = (LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *) cast_chk([((id<JavaUtilList>) nil_chk(self->methods_)) getWithInt:0], [LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator class]);
      [((LibOrgBouncycastleBcpgBCPGOutputStream *) nil_chk(self->pOut_)) writePacketWithLibOrgBouncycastleBcpgContainedPacket:[((LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *) nil_chk(m)) generateWithInt:self->defAlgorithm_ withByteArray:sessionInfo]];
    }
  }
  else {
    key = LibOrgBouncycastleOpenpgpPGPUtil_makeRandomKeyWithInt_withJavaSecuritySecureRandom_(self->defAlgorithm_, self->rand_);
    IOSByteArray *sessionInfo = LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_createSessionInfoWithInt_withByteArray_(self, self->defAlgorithm_, key);
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(self->methods_)) size]; i++) {
      LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *m = (LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *) cast_chk([((id<JavaUtilList>) nil_chk(self->methods_)) getWithInt:i], [LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator class]);
      [((LibOrgBouncycastleBcpgBCPGOutputStream *) nil_chk(self->pOut_)) writePacketWithLibOrgBouncycastleBcpgContainedPacket:[((LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator *) nil_chk(m)) generateWithInt:self->defAlgorithm_ withByteArray:sessionInfo]];
    }
  }
  @try {
    id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptor> dataEncryptor = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder>) nil_chk(self->dataEncryptorBuilder_)) buildWithByteArray:key];
    self->digestCalc_ = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptor>) nil_chk(dataEncryptor)) getIntegrityCalculator];
    if (buffer == nil) {
      if (self->digestCalc_ != nil) {
        self->pOut_ = new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_(self, outArg, LibOrgBouncycastleBcpgPacketTags_SYM_ENC_INTEGRITY_PRO, length + [dataEncryptor getBlockSize] + 2 + 1 + 22);
        [self->pOut_ writeWithInt:1];
      }
      else {
        self->pOut_ = new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_(self, outArg, LibOrgBouncycastleBcpgPacketTags_SYMMETRIC_KEY_ENC, length + [dataEncryptor getBlockSize] + 2, self->oldFormat_);
      }
    }
    else {
      if (self->digestCalc_ != nil) {
        self->pOut_ = new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(self, outArg, LibOrgBouncycastleBcpgPacketTags_SYM_ENC_INTEGRITY_PRO, buffer);
        [self->pOut_ writeWithInt:1];
      }
      else {
        self->pOut_ = new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(self, outArg, LibOrgBouncycastleBcpgPacketTags_SYMMETRIC_KEY_ENC, buffer);
      }
    }
    self->genOut_ = self->cOut_ = [dataEncryptor getOutputStreamWithJavaIoOutputStream:self->pOut_];
    if (self->digestCalc_ != nil) {
      self->genOut_ = new_LibOrgBouncycastleUtilIoTeeOutputStream_initWithJavaIoOutputStream_withJavaIoOutputStream_([self->digestCalc_ getOutputStream], self->cOut_);
    }
    IOSByteArray *inLineIv = [IOSByteArray newArrayWithLength:[dataEncryptor getBlockSize] + 2];
    [((JavaSecuritySecureRandom *) nil_chk(self->rand_)) nextBytesWithByteArray:inLineIv];
    *IOSByteArray_GetRef(inLineIv, inLineIv->size_ - 1) = IOSByteArray_Get(inLineIv, inLineIv->size_ - 3);
    *IOSByteArray_GetRef(inLineIv, inLineIv->size_ - 2) = IOSByteArray_Get(inLineIv, inLineIv->size_ - 4);
    [((JavaIoOutputStream *) nil_chk(self->genOut_)) writeWithByteArray:inLineIv];
    return new_LibOrgBouncycastleOpenpgpWrappedGeneratorStream_initWithJavaIoOutputStream_withLibOrgBouncycastleOpenpgpStreamGenerator_(self->genOut_, self);
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"Exception creating cipher", e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator)

@implementation LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *)outer$
                                                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                                   withInt:(jint)symmetricKeyEnc
                                                             withByteArray:(IOSByteArray *)buffer {
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(self, outer$, outArg, symmetricKeyEnc, buffer);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *)outer$
                                                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                                   withInt:(jint)symmetricKeyEnc
                                                                  withLong:(jlong)length
                                                               withBoolean:(jboolean)oldFormat {
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_(self, outer$, outArg, symmetricKeyEnc, length, oldFormat);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *)outer$
                                                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                                   withInt:(jint)symEncIntegrityPro
                                                                  withLong:(jlong)length {
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_(self, outer$, outArg, symEncIntegrityPro, length);
  return self;
}

- (void)close {
  [self finish];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:withJavaIoOutputStream:withInt:withByteArray:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:withJavaIoOutputStream:withInt:withLong:withBoolean:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator:withJavaIoOutputStream:withInt:withLong:);
  methods[3].selector = @selector(close);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoOutputStream;I[B", "LJavaIoIOException;", "LJavaIoOutputStream;IJZ", "LJavaIoOutputStream;IJ", "LLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream = { "ClosableBCPGOutputStream", "lib.org.bouncycastle.openpgp", ptrTable, methods, NULL, 7, 0x2, 4, 0, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream;
}

@end

void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *self, LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, IOSByteArray *buffer) {
  LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_withInt_withByteArray_(self, outArg, symmetricKeyEnc, buffer);
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, IOSByteArray *buffer) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream, initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_, outer$, outArg, symmetricKeyEnc, buffer)
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, IOSByteArray *buffer) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream, initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withByteArray_, outer$, outArg, symmetricKeyEnc, buffer)
}

void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *self, LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, jlong length, jboolean oldFormat) {
  LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_withInt_withLong_withBoolean_(self, outArg, symmetricKeyEnc, length, oldFormat);
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, jlong length, jboolean oldFormat) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream, initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_, outer$, outArg, symmetricKeyEnc, length, oldFormat)
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symmetricKeyEnc, jlong length, jboolean oldFormat) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream, initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_withBoolean_, outer$, outArg, symmetricKeyEnc, length, oldFormat)
}

void LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *self, LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symEncIntegrityPro, jlong length) {
  LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_withInt_withLong_(self, outArg, symEncIntegrityPro, length);
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symEncIntegrityPro, jlong length) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream, initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_, outer$, outArg, symEncIntegrityPro, length)
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *outer$, JavaIoOutputStream *outArg, jint symEncIntegrityPro, jlong length) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream, initWithLibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_withJavaIoOutputStream_withInt_withLong_, outer$, outArg, symEncIntegrityPro, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_ClosableBCPGOutputStream)
