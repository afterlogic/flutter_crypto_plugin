//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DTLSRecordLayer.java
//

#ifndef DTLSRecordLayer_H
#define DTLSRecordLayer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DatagramTransport.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoTlsProtocolVersion;
@protocol LibOrgBouncycastleCryptoTlsDTLSHandshakeRetransmit;
@protocol LibOrgBouncycastleCryptoTlsTlsCipher;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsPeer;

@interface LibOrgBouncycastleCryptoTlsDTLSRecordLayer : NSObject < LibOrgBouncycastleCryptoTlsDatagramTransport >

#pragma mark Public

- (void)close;

- (jint)getReceiveLimit;

- (jint)getSendLimit;

- (jint)receiveWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)off
                     withInt:(jint)len
                     withInt:(jint)waitMillis;

- (void)sendWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsDatagramTransport:(id<LibOrgBouncycastleCryptoTlsDatagramTransport>)transport
                                     withLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                        withLibOrgBouncycastleCryptoTlsTlsPeer:(id<LibOrgBouncycastleCryptoTlsTlsPeer>)peer
                                                                     withShort:(jshort)contentType;

- (void)failWithShort:(jshort)alertDescription;

- (void)failed;

- (jint)getReadEpoch;

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getReadVersion;

- (void)handshakeSuccessfulWithLibOrgBouncycastleCryptoTlsDTLSHandshakeRetransmit:(id<LibOrgBouncycastleCryptoTlsDTLSHandshakeRetransmit>)retransmit;

- (void)initPendingEpochWithLibOrgBouncycastleCryptoTlsTlsCipher:(id<LibOrgBouncycastleCryptoTlsTlsCipher>)pendingCipher OBJC_METHOD_FAMILY_NONE;

- (void)resetWriteEpoch;

- (void)setPlaintextLimitWithInt:(jint)plaintextLimit;

- (void)setReadVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)readVersion;

- (void)setWriteVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)writeVersion;

- (void)warnWithShort:(jshort)alertDescription
         withNSString:(NSString *)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDTLSRecordLayer)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDTLSRecordLayer_initWithLibOrgBouncycastleCryptoTlsDatagramTransport_withLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsTlsPeer_withShort_(LibOrgBouncycastleCryptoTlsDTLSRecordLayer *self, id<LibOrgBouncycastleCryptoTlsDatagramTransport> transport, id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoTlsTlsPeer> peer, jshort contentType);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDTLSRecordLayer *new_LibOrgBouncycastleCryptoTlsDTLSRecordLayer_initWithLibOrgBouncycastleCryptoTlsDatagramTransport_withLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsTlsPeer_withShort_(id<LibOrgBouncycastleCryptoTlsDatagramTransport> transport, id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoTlsTlsPeer> peer, jshort contentType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDTLSRecordLayer *create_LibOrgBouncycastleCryptoTlsDTLSRecordLayer_initWithLibOrgBouncycastleCryptoTlsDatagramTransport_withLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsTlsPeer_withShort_(id<LibOrgBouncycastleCryptoTlsDatagramTransport> transport, id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoTlsTlsPeer> peer, jshort contentType);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDTLSRecordLayer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DTLSRecordLayer_H
