//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/GOST3413CipherUtil.java
//

#include "Arrays.h"
#include "GOST3413CipherUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"

@implementation LibOrgBouncycastleCryptoModesGOST3413CipherUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoModesGOST3413CipherUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)MSBWithByteArray:(IOSByteArray *)from
                           withInt:(jint)size {
  return LibOrgBouncycastleCryptoModesGOST3413CipherUtil_MSBWithByteArray_withInt_(from, size);
}

+ (IOSByteArray *)LSBWithByteArray:(IOSByteArray *)from
                           withInt:(jint)size {
  return LibOrgBouncycastleCryptoModesGOST3413CipherUtil_LSBWithByteArray_withInt_(from, size);
}

+ (IOSByteArray *)sumWithByteArray:(IOSByteArray *)inArg
                     withByteArray:(IOSByteArray *)gamma {
  return LibOrgBouncycastleCryptoModesGOST3413CipherUtil_sumWithByteArray_withByteArray_(inArg, gamma);
}

+ (IOSByteArray *)copyFromInputWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)size
                                     withInt:(jint)offset {
  return LibOrgBouncycastleCryptoModesGOST3413CipherUtil_copyFromInputWithByteArray_withInt_withInt_(input, size, offset);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(MSBWithByteArray:withInt:);
  methods[2].selector = @selector(LSBWithByteArray:withInt:);
  methods[3].selector = @selector(sumWithByteArray:withByteArray:);
  methods[4].selector = @selector(copyFromInputWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "MSB", "[BI", "LSB", "sum", "[B[B", "copyFromInput", "[BII" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesGOST3413CipherUtil = { "GOST3413CipherUtil", "lib.org.bouncycastle.crypto.modes", ptrTable, methods, NULL, 7, 0x0, 5, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesGOST3413CipherUtil;
}

@end

void LibOrgBouncycastleCryptoModesGOST3413CipherUtil_init(LibOrgBouncycastleCryptoModesGOST3413CipherUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoModesGOST3413CipherUtil *new_LibOrgBouncycastleCryptoModesGOST3413CipherUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesGOST3413CipherUtil, init)
}

LibOrgBouncycastleCryptoModesGOST3413CipherUtil *create_LibOrgBouncycastleCryptoModesGOST3413CipherUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesGOST3413CipherUtil, init)
}

IOSByteArray *LibOrgBouncycastleCryptoModesGOST3413CipherUtil_MSBWithByteArray_withInt_(IOSByteArray *from, jint size) {
  LibOrgBouncycastleCryptoModesGOST3413CipherUtil_initialize();
  return LibOrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(from, size);
}

IOSByteArray *LibOrgBouncycastleCryptoModesGOST3413CipherUtil_LSBWithByteArray_withInt_(IOSByteArray *from, jint size) {
  LibOrgBouncycastleCryptoModesGOST3413CipherUtil_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:size];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(from, ((IOSByteArray *) nil_chk(from))->size_ - size, result, 0, size);
  return result;
}

IOSByteArray *LibOrgBouncycastleCryptoModesGOST3413CipherUtil_sumWithByteArray_withByteArray_(IOSByteArray *inArg, IOSByteArray *gamma) {
  LibOrgBouncycastleCryptoModesGOST3413CipherUtil_initialize();
  IOSByteArray *out = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(inArg))->size_];
  for (jint i = 0; i < inArg->size_; i++) {
    *IOSByteArray_GetRef(out, i) = (jbyte) (IOSByteArray_Get(inArg, i) ^ IOSByteArray_Get(nil_chk(gamma), i));
  }
  return out;
}

IOSByteArray *LibOrgBouncycastleCryptoModesGOST3413CipherUtil_copyFromInputWithByteArray_withInt_withInt_(IOSByteArray *input, jint size, jint offset) {
  LibOrgBouncycastleCryptoModesGOST3413CipherUtil_initialize();
  if (((IOSByteArray *) nil_chk(input))->size_ < (size + offset)) {
    size = input->size_ - offset;
  }
  IOSByteArray *newIn = [IOSByteArray newArrayWithLength:size];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, offset, newIn, 0, size);
  return newIn;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesGOST3413CipherUtil)
