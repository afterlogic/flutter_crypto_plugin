//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSAUtil.java
//

#ifndef DSAUtil_H
#define DSAUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoParamsDSAParameters;
@protocol JavaSecurityInterfacesDSAParams;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;

@interface LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil : NSObject
@property (readonly, class) IOSObjectArray *dsaOids NS_SWIFT_NAME(dsaOids);

+ (IOSObjectArray *)dsaOids;

#pragma mark Public

- (instancetype __nonnull)init;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

+ (jboolean)isDsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)algOid;

#pragma mark Package-Private

+ (NSString *)generateKeyFingerprintWithJavaMathBigInteger:(JavaMathBigInteger *)y
                       withJavaSecurityInterfacesDSAParams:(id<JavaSecurityInterfacesDSAParams>)params;

+ (LibOrgBouncycastleCryptoParamsDSAParameters *)toDSAParametersWithJavaSecurityInterfacesDSAParams:(id<JavaSecurityInterfacesDSAParams>)spec;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil)

inline IOSObjectArray *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_get_dsaOids(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_dsaOids;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil, dsaOids, IOSObjectArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_init(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_init(void);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_isDsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDSAParameters *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_toDSAParametersWithJavaSecurityInterfacesDSAParams_(id<JavaSecurityInterfacesDSAParams> spec);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generateKeyFingerprintWithJavaMathBigInteger_withJavaSecurityInterfacesDSAParams_(JavaMathBigInteger *y, id<JavaSecurityInterfacesDSAParams> params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DSAUtil_H
