//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/jpake/JPAKERound1Payload.java
//

#include "Arrays.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JPAKERound1Payload.h"
#include "JPAKEUtil.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload () {
 @public
  NSString *participantId_;
  JavaMathBigInteger *gx1_;
  JavaMathBigInteger *gx2_;
  IOSObjectArray *knowledgeProofForX1_;
  IOSObjectArray *knowledgeProofForX2_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload, participantId_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload, gx1_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload, gx2_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload, knowledgeProofForX1_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload, knowledgeProofForX2_, IOSObjectArray *)

@implementation LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload

- (instancetype)initWithNSString:(NSString *)participantId
          withJavaMathBigInteger:(JavaMathBigInteger *)gx1
          withJavaMathBigInteger:(JavaMathBigInteger *)gx2
     withJavaMathBigIntegerArray:(IOSObjectArray *)knowledgeProofForX1
     withJavaMathBigIntegerArray:(IOSObjectArray *)knowledgeProofForX2 {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload_initWithNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(self, participantId, gx1, gx2, knowledgeProofForX1, knowledgeProofForX2);
  return self;
}

- (NSString *)getParticipantId {
  return participantId_;
}

- (JavaMathBigInteger *)getGx1 {
  return gx1_;
}

- (JavaMathBigInteger *)getGx2 {
  return gx2_;
}

- (IOSObjectArray *)getKnowledgeProofForX1 {
  return LibOrgBouncycastleUtilArrays_copyOfWithJavaMathBigIntegerArray_withInt_(knowledgeProofForX1_, ((IOSObjectArray *) nil_chk(knowledgeProofForX1_))->size_);
}

- (IOSObjectArray *)getKnowledgeProofForX2 {
  return LibOrgBouncycastleUtilArrays_copyOfWithJavaMathBigIntegerArray_withInt_(knowledgeProofForX2_, ((IOSObjectArray *) nil_chk(knowledgeProofForX2_))->size_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigIntegerArray:withJavaMathBigIntegerArray:);
  methods[1].selector = @selector(getParticipantId);
  methods[2].selector = @selector(getGx1);
  methods[3].selector = @selector(getGx2);
  methods[4].selector = @selector(getKnowledgeProofForX1);
  methods[5].selector = @selector(getKnowledgeProofForX2);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "participantId_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "gx1_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "gx2_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "knowledgeProofForX1_", "[LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "knowledgeProofForX2_", "[LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaMathBigInteger;LJavaMathBigInteger;[LJavaMathBigInteger;[LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload = { "JPAKERound1Payload", "lib.org.bouncycastle.crypto.agreement.jpake", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload;
}

@end

void LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload_initWithNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload *self, NSString *participantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, IOSObjectArray *knowledgeProofForX1, IOSObjectArray *knowledgeProofForX2) {
  NSObject_init(self);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(participantId, @"participantId");
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(gx1, @"gx1");
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(gx2, @"gx2");
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(knowledgeProofForX1, @"knowledgeProofForX1");
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(knowledgeProofForX2, @"knowledgeProofForX2");
  self->participantId_ = participantId;
  self->gx1_ = gx1;
  self->gx2_ = gx2;
  self->knowledgeProofForX1_ = LibOrgBouncycastleUtilArrays_copyOfWithJavaMathBigIntegerArray_withInt_(knowledgeProofForX1, ((IOSObjectArray *) nil_chk(knowledgeProofForX1))->size_);
  self->knowledgeProofForX2_ = LibOrgBouncycastleUtilArrays_copyOfWithJavaMathBigIntegerArray_withInt_(knowledgeProofForX2, ((IOSObjectArray *) nil_chk(knowledgeProofForX2))->size_);
}

LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload *new_LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload_initWithNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(NSString *participantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, IOSObjectArray *knowledgeProofForX1, IOSObjectArray *knowledgeProofForX2) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload, initWithNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_, participantId, gx1, gx2, knowledgeProofForX1, knowledgeProofForX2)
}

LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload *create_LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload_initWithNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(NSString *participantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, IOSObjectArray *knowledgeProofForX1, IOSObjectArray *knowledgeProofForX2) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload, initWithNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_, participantId, gx1, gx2, knowledgeProofForX1, knowledgeProofForX2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload)
