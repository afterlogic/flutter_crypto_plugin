//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/bc/SignatureCheck.java
//

#include "ASN1BitString.h"
#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "DERBitString.h"
#include "DERSequence.h"
#include "DERTaggedObject.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SignatureCheck.h"
#include "X509Certificate.h"

@interface LibOrgBouncycastleAsn1BcSignatureCheck () {
 @public
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signatureAlgorithm_;
  LibOrgBouncycastleAsn1ASN1Sequence *certificates_;
  LibOrgBouncycastleAsn1ASN1BitString *signatureValue_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1BcSignatureCheck, signatureAlgorithm_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1BcSignatureCheck, certificates_, LibOrgBouncycastleAsn1ASN1Sequence *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1BcSignatureCheck, signatureValue_, LibOrgBouncycastleAsn1ASN1BitString *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1BcSignatureCheck *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1BcSignatureCheck *new_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1BcSignatureCheck *create_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1BcSignatureCheck

- (instancetype)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)signatureAlgorithm
                                                        withByteArray:(IOSByteArray *)signature {
  LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(self, signatureAlgorithm, signature);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)signatureAlgorithm
                   withLibOrgBouncycastleAsn1X509X509CertificateArray:(IOSObjectArray *)certificates
                                                        withByteArray:(IOSByteArray *)signature {
  LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509X509CertificateArray_withByteArray_(self, signatureAlgorithm, certificates, signature);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

+ (LibOrgBouncycastleAsn1BcSignatureCheck *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1BcSignatureCheck_getInstanceWithId_(o);
}

- (LibOrgBouncycastleAsn1ASN1BitString *)getSignature {
  return new_LibOrgBouncycastleAsn1DERBitString_initWithByteArray_withInt_(LibOrgBouncycastleUtilArrays_cloneWithByteArray_([((LibOrgBouncycastleAsn1ASN1BitString *) nil_chk(signatureValue_)) getBytes]), [signatureValue_ getPadBits]);
}

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm {
  return signatureAlgorithm_;
}

- (IOSObjectArray *)getCertificates {
  if (certificates_ == nil) {
    return nil;
  }
  IOSObjectArray *certs = [IOSObjectArray newArrayWithLength:[certificates_ size] type:LibOrgBouncycastleAsn1X509X509Certificate_class_()];
  for (jint i = 0; i != certs->size_; i++) {
    (void) IOSObjectArray_Set(certs, i, LibOrgBouncycastleAsn1X509X509Certificate_getInstanceWithId_([certificates_ getObjectAtWithInt:i]));
  }
  return certs;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:signatureAlgorithm_];
  if (certificates_ != nil) {
    [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERTaggedObject_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(0, certificates_)];
  }
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:signatureValue_];
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1BcSignatureCheck;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1BitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleAsn1X509X509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withByteArray:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withLibOrgBouncycastleAsn1X509X509CertificateArray:withByteArray:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(getInstanceWithId:);
  methods[4].selector = @selector(getSignature);
  methods[5].selector = @selector(getSignatureAlgorithm);
  methods[6].selector = @selector(getCertificates);
  methods[7].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "signatureAlgorithm_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "certificates_", "LLibOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signatureValue_", "LLibOrgBouncycastleAsn1ASN1BitString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[B", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[LLibOrgBouncycastleAsn1X509X509Certificate;[B", "LLibOrgBouncycastleAsn1ASN1Sequence;", "getInstance", "LNSObject;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1BcSignatureCheck = { "SignatureCheck", "lib.org.bouncycastle.asn1.bc", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1BcSignatureCheck;
}

@end

void LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1BcSignatureCheck *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signatureAlgorithm, IOSByteArray *signature) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->signatureAlgorithm_ = signatureAlgorithm;
  self->certificates_ = nil;
  self->signatureValue_ = new_LibOrgBouncycastleAsn1DERBitString_initWithByteArray_(LibOrgBouncycastleUtilArrays_cloneWithByteArray_(signature));
}

LibOrgBouncycastleAsn1BcSignatureCheck *new_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signatureAlgorithm, IOSByteArray *signature) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1BcSignatureCheck, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_, signatureAlgorithm, signature)
}

LibOrgBouncycastleAsn1BcSignatureCheck *create_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signatureAlgorithm, IOSByteArray *signature) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1BcSignatureCheck, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_, signatureAlgorithm, signature)
}

void LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509X509CertificateArray_withByteArray_(LibOrgBouncycastleAsn1BcSignatureCheck *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signatureAlgorithm, IOSObjectArray *certificates, IOSByteArray *signature) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->signatureAlgorithm_ = signatureAlgorithm;
  self->certificates_ = new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableArray_(certificates);
  self->signatureValue_ = new_LibOrgBouncycastleAsn1DERBitString_initWithByteArray_(LibOrgBouncycastleUtilArrays_cloneWithByteArray_(signature));
}

LibOrgBouncycastleAsn1BcSignatureCheck *new_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509X509CertificateArray_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signatureAlgorithm, IOSObjectArray *certificates, IOSByteArray *signature) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1BcSignatureCheck, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509X509CertificateArray_withByteArray_, signatureAlgorithm, certificates, signature)
}

LibOrgBouncycastleAsn1BcSignatureCheck *create_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509X509CertificateArray_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signatureAlgorithm, IOSObjectArray *certificates, IOSByteArray *signature) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1BcSignatureCheck, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509X509CertificateArray_withByteArray_, signatureAlgorithm, certificates, signature)
}

void LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1BcSignatureCheck *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->signatureAlgorithm_ = LibOrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0]);
  jint index = 1;
  if ([[seq getObjectAtWithInt:1] isKindOfClass:[LibOrgBouncycastleAsn1ASN1TaggedObject class]]) {
    self->certificates_ = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithId_([seq getObjectAtWithInt:index++]))) getObject]);
  }
  else {
    self->certificates_ = nil;
  }
  self->signatureValue_ = LibOrgBouncycastleAsn1DERBitString_getInstanceWithId_([seq getObjectAtWithInt:index]);
}

LibOrgBouncycastleAsn1BcSignatureCheck *new_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1BcSignatureCheck, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1BcSignatureCheck *create_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1BcSignatureCheck, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1BcSignatureCheck *LibOrgBouncycastleAsn1BcSignatureCheck_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1BcSignatureCheck_initialize();
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1BcSignatureCheck class]]) {
    return (LibOrgBouncycastleAsn1BcSignatureCheck *) o;
  }
  else if (o != nil) {
    return new_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(o));
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1BcSignatureCheck)
