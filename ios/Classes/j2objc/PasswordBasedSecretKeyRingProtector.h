//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/key/protection/PasswordBasedSecretKeyRingProtector.java
//

#ifndef PasswordBasedSecretKeyRingProtector_H
#define PasswordBasedSecretKeyRingProtector_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "SecretKeyRingProtector.h"

@class JavaLangLong;
@class LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings;
@class LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor;
@class LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;
@protocol LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider;

@interface LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector : NSObject < LibComAfterlogicPgpKeyProtectionSecretKeyRingProtector > {
 @public
  LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *protectionSettings_;
  id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> passphraseProvider_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings:(LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *)settings
                            withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider:(id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider>)passphraseProvider;

- (LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)getDecryptorWithJavaLangLong:(JavaLangLong *)keyId;

- (LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)getEncryptorWithJavaLangLong:(JavaLangLong *)keyId;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector)

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector, protectionSettings_, LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector, passphraseProvider_, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider>)

FOUNDATION_EXPORT void LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector *self, LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *settings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> passphraseProvider);

FOUNDATION_EXPORT LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector *new_LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *settings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> passphraseProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector *create_LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *settings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> passphraseProvider);

J2OBJC_TYPE_LITERAL_HEADER(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PasswordBasedSecretKeyRingProtector_H
