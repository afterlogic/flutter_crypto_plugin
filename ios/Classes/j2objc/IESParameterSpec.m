//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/spec/IESParameterSpec.java
//

#include "Arrays.h"
#include "IESParameterSpec.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleJceSpecIESParameterSpec () {
 @public
  IOSByteArray *derivation_;
  IOSByteArray *encoding_;
  jint macKeySize_;
  jint cipherKeySize_;
  IOSByteArray *nonce_;
  jboolean usePointCompression_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecIESParameterSpec, derivation_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecIESParameterSpec, encoding_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecIESParameterSpec, nonce_, IOSByteArray *)

@implementation LibOrgBouncycastleJceSpecIESParameterSpec

- (instancetype)initWithByteArray:(IOSByteArray *)derivation
                    withByteArray:(IOSByteArray *)encoding
                          withInt:(jint)macKeySize {
  LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_(self, derivation, encoding, macKeySize);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)derivation
                    withByteArray:(IOSByteArray *)encoding
                          withInt:(jint)macKeySize
                          withInt:(jint)cipherKeySize
                    withByteArray:(IOSByteArray *)nonce {
  LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_(self, derivation, encoding, macKeySize, cipherKeySize, nonce);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)derivation
                    withByteArray:(IOSByteArray *)encoding
                          withInt:(jint)macKeySize
                          withInt:(jint)cipherKeySize
                    withByteArray:(IOSByteArray *)nonce
                      withBoolean:(jboolean)usePointCompression {
  LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(self, derivation, encoding, macKeySize, cipherKeySize, nonce, usePointCompression);
  return self;
}

- (IOSByteArray *)getDerivationV {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(derivation_);
}

- (IOSByteArray *)getEncodingV {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(encoding_);
}

- (jint)getMacKeySize {
  return macKeySize_;
}

- (jint)getCipherKeySize {
  return cipherKeySize_;
}

- (IOSByteArray *)getNonce {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(nonce_);
}

- (void)setPointCompressionWithBoolean:(jboolean)usePointCompression {
  self->usePointCompression_ = usePointCompression;
}

- (jboolean)getPointCompression {
  return usePointCompression_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withByteArray:withInt:);
  methods[1].selector = @selector(initWithByteArray:withByteArray:withInt:withInt:withByteArray:);
  methods[2].selector = @selector(initWithByteArray:withByteArray:withInt:withInt:withByteArray:withBoolean:);
  methods[3].selector = @selector(getDerivationV);
  methods[4].selector = @selector(getEncodingV);
  methods[5].selector = @selector(getMacKeySize);
  methods[6].selector = @selector(getCipherKeySize);
  methods[7].selector = @selector(getNonce);
  methods[8].selector = @selector(setPointCompressionWithBoolean:);
  methods[9].selector = @selector(getPointCompression);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "derivation_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macKeySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipherKeySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nonce_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "usePointCompression_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B[BI", "[B[BII[B", "[B[BII[BZ", "setPointCompression", "Z" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceSpecIESParameterSpec = { "IESParameterSpec", "lib.org.bouncycastle.jce.spec", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceSpecIESParameterSpec;
}

@end

void LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_(LibOrgBouncycastleJceSpecIESParameterSpec *self, IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize) {
  LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(self, derivation, encoding, macKeySize, -1, nil, false);
}

LibOrgBouncycastleJceSpecIESParameterSpec *new_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceSpecIESParameterSpec, initWithByteArray_withByteArray_withInt_, derivation, encoding, macKeySize)
}

LibOrgBouncycastleJceSpecIESParameterSpec *create_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceSpecIESParameterSpec, initWithByteArray_withByteArray_withInt_, derivation, encoding, macKeySize)
}

void LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_(LibOrgBouncycastleJceSpecIESParameterSpec *self, IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce) {
  LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(self, derivation, encoding, macKeySize, cipherKeySize, nonce, false);
}

LibOrgBouncycastleJceSpecIESParameterSpec *new_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceSpecIESParameterSpec, initWithByteArray_withByteArray_withInt_withInt_withByteArray_, derivation, encoding, macKeySize, cipherKeySize, nonce)
}

LibOrgBouncycastleJceSpecIESParameterSpec *create_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceSpecIESParameterSpec, initWithByteArray_withByteArray_withInt_withInt_withByteArray_, derivation, encoding, macKeySize, cipherKeySize, nonce)
}

void LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(LibOrgBouncycastleJceSpecIESParameterSpec *self, IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce, jboolean usePointCompression) {
  NSObject_init(self);
  if (derivation != nil) {
    self->derivation_ = [IOSByteArray newArrayWithLength:derivation->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(derivation, 0, self->derivation_, 0, derivation->size_);
  }
  else {
    self->derivation_ = nil;
  }
  if (encoding != nil) {
    self->encoding_ = [IOSByteArray newArrayWithLength:encoding->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(encoding, 0, self->encoding_, 0, encoding->size_);
  }
  else {
    self->encoding_ = nil;
  }
  self->macKeySize_ = macKeySize;
  self->cipherKeySize_ = cipherKeySize;
  self->nonce_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(nonce);
  self->usePointCompression_ = usePointCompression;
}

LibOrgBouncycastleJceSpecIESParameterSpec *new_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce, jboolean usePointCompression) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceSpecIESParameterSpec, initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_, derivation, encoding, macKeySize, cipherKeySize, nonce, usePointCompression)
}

LibOrgBouncycastleJceSpecIESParameterSpec *create_LibOrgBouncycastleJceSpecIESParameterSpec_initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize, jint cipherKeySize, IOSByteArray *nonce, jboolean usePointCompression) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceSpecIESParameterSpec, initWithByteArray_withByteArray_withInt_withInt_withByteArray_withBoolean_, derivation, encoding, macKeySize, cipherKeySize, nonce, usePointCompression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceSpecIESParameterSpec)
