//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/ParametersWithSalt.java
//

#ifndef ParametersWithSalt_H
#define ParametersWithSalt_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CipherParameters.h"
#include "J2ObjC_header.h"

@class IOSByteArray;

@interface LibOrgBouncycastleCryptoParamsParametersWithSalt : NSObject < LibOrgBouncycastleCryptoCipherParameters >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters
                                                             withByteArray:(IOSByteArray *)salt;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters
                                                             withByteArray:(IOSByteArray *)salt
                                                                   withInt:(jint)saltOff
                                                                   withInt:(jint)saltLen;

- (id<LibOrgBouncycastleCryptoCipherParameters>)getParameters;

- (IOSByteArray *)getSalt;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsParametersWithSalt)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsParametersWithSalt_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(LibOrgBouncycastleCryptoParamsParametersWithSalt *self, id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *salt);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsParametersWithSalt *new_LibOrgBouncycastleCryptoParamsParametersWithSalt_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *salt) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsParametersWithSalt *create_LibOrgBouncycastleCryptoParamsParametersWithSalt_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *salt);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsParametersWithSalt_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_withInt_withInt_(LibOrgBouncycastleCryptoParamsParametersWithSalt *self, id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *salt, jint saltOff, jint saltLen);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsParametersWithSalt *new_LibOrgBouncycastleCryptoParamsParametersWithSalt_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_withInt_withInt_(id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *salt, jint saltOff, jint saltLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsParametersWithSalt *create_LibOrgBouncycastleCryptoParamsParametersWithSalt_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_withInt_withInt_(id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *salt, jint saltOff, jint saltLen);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsParametersWithSalt)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ParametersWithSalt_H
