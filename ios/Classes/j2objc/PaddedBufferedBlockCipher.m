//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/paddings/PaddedBufferedBlockCipher.java
//

#include "BlockCipher.h"
#include "BlockCipherPadding.h"
#include "BufferedBlockCipher.h"
#include "CipherParameters.h"
#include "DataLengthException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OutputLengthException.h"
#include "PKCS7Padding.h"
#include "PaddedBufferedBlockCipher.h"
#include "ParametersWithRandom.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@implementation LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
     withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding:(id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>)padding {
  LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self, cipher, padding);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  self->forEncryption_ = forEncryption;
  [self reset];
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *p = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) params;
    [((id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) init__WithJavaSecuritySecureRandom:[((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getRandom]];
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:[p getParameters]];
  }
  else {
    [((id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) init__WithJavaSecuritySecureRandom:nil];
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:params];
  }
}

- (jint)getOutputSizeWithInt:(jint)len {
  jint total = len + bufOff_;
  jint leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_;
  if (leftOver == 0) {
    if (forEncryption_) {
      return total + buf_->size_;
    }
    return total;
  }
  return total - leftOver + buf_->size_;
}

- (jint)getUpdateOutputSizeWithInt:(jint)len {
  jint total = len + bufOff_;
  jint leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_;
  if (leftOver == 0) {
    return JavaLangMath_maxWithInt_withInt_(0, total - buf_->size_);
  }
  return total - leftOver;
}

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  jint resultLen = 0;
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    resultLen = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
  }
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  return resultLen;
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  jint blockSize = [self getBlockSize];
  jint length = [self getUpdateOutputSizeWithInt:len];
  if (length > 0) {
    if ((outOff + length) > ((IOSByteArray *) nil_chk(outArg))->size_) {
      @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
    }
  }
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    resultLen += [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > ((IOSByteArray *) nil_chk(buf_))->size_) {
      resultLen += [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff + resultLen];
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
  return resultLen;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  jint blockSize = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  jint resultLen = 0;
  if (forEncryption_) {
    if (bufOff_ == blockSize) {
      if ((outOff + 2 * blockSize) > ((IOSByteArray *) nil_chk(outArg))->size_) {
        [self reset];
        @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
      }
      resultLen = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
      bufOff_ = 0;
    }
    [((id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) addPaddingWithByteArray:buf_ withInt:bufOff_];
    resultLen += [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff + resultLen];
    [self reset];
  }
  else {
    if (bufOff_ == blockSize) {
      resultLen = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:buf_ withInt:0];
      bufOff_ = 0;
    }
    else {
      [self reset];
      @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"last block incomplete in decryption");
    }
    @try {
      resultLen -= [((id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) padCountWithByteArray:buf_];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, outArg, outOff, resultLen);
    }
    @finally {
      [self reset];
    }
  }
  return resultLen;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getOutputSizeWithInt:);
  methods[4].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[5].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[6].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(doFinalWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "padding_", "LLibOrgBouncycastleCryptoPaddingsBlockCipherPadding;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;LLibOrgBouncycastleCryptoPaddingsBlockCipherPadding;", "LLibOrgBouncycastleCryptoBlockCipher;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "getOutputSize", "I", "getUpdateOutputSize", "processByte", "B[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "processBytes", "[BII[BI", "doFinal", "[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;LLibOrgBouncycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher = { "PaddedBufferedBlockCipher", "lib.org.bouncycastle.crypto.paddings", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher;
}

@end

void LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  LibOrgBouncycastleCryptoBufferedBlockCipher_init(self);
  self->cipher_ = cipher;
  self->padding_ = padding;
  self->buf_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->bufOff_ = 0;
}

LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}

LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *create_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}

void LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self, cipher, new_LibOrgBouncycastleCryptoPaddingsPKCS7Padding_init());
}

LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *create_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher)
