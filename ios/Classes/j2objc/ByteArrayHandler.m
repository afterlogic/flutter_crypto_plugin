//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/ByteArrayHandler.java
//

#include "ArmoredOutputStream.h"
#include "BouncyCastleProvider.h"
#include "ByteArrayHandler.h"
#include "CompressionAlgorithmTags.h"
#include "Hex.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaPGPDigestCalculatorProviderBuilder.h"
#include "JcaPGPObjectFactory.h"
#include "JcePBEDataDecryptorFactoryBuilder.h"
#include "JcePBEKeyEncryptionMethodGenerator.h"
#include "JcePGPDataEncryptorBuilder.h"
#include "PBEDataDecryptorFactory.h"
#include "PGPCompressedData.h"
#include "PGPCompressedDataGenerator.h"
#include "PGPDigestCalculatorProvider.h"
#include "PGPEncryptedDataGenerator.h"
#include "PGPEncryptedDataList.h"
#include "PGPLiteralData.h"
#include "PGPLiteralDataGenerator.h"
#include "PGPPBEEncryptedData.h"
#include "PGPUtil.h"
#include "Streams.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "java/security/Security.h"
#include "java/util/Date.h"

@interface LibOrgBouncycastleOpenpgpExamplesByteArrayHandler ()

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)clearData
                           withNSString:(NSString *)fileName
                                withInt:(jint)algorithm;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_compressWithByteArray_withNSString_withInt_(IOSByteArray *clearData, NSString *fileName, jint algorithm);

@implementation LibOrgBouncycastleOpenpgpExamplesByteArrayHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)encrypted
                         withCharArray:(IOSCharArray *)passPhrase {
  return LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_decryptWithByteArray_withCharArray_(encrypted, passPhrase);
}

+ (IOSByteArray *)encryptWithByteArray:(IOSByteArray *)clearData
                         withCharArray:(IOSCharArray *)passPhrase
                          withNSString:(NSString *)fileName
                               withInt:(jint)algorithm
                           withBoolean:(jboolean)armor {
  return LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_encryptWithByteArray_withCharArray_withNSString_withInt_withBoolean_(clearData, passPhrase, fileName, algorithm, armor);
}

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)clearData
                           withNSString:(NSString *)fileName
                                withInt:(jint)algorithm {
  return LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_compressWithByteArray_withNSString_withInt_(clearData, fileName, algorithm);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(decryptWithByteArray:withCharArray:);
  methods[2].selector = @selector(encryptWithByteArray:withCharArray:withNSString:withInt:withBoolean:);
  methods[3].selector = @selector(compressWithByteArray:withNSString:withInt:);
  methods[4].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "decrypt", "[B[C", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;LJavaSecurityNoSuchProviderException;", "encrypt", "[B[CLNSString;IZ", "compress", "[BLNSString;I", "LJavaIoIOException;", "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesByteArrayHandler = { "ByteArrayHandler", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesByteArrayHandler;
}

@end

void LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_init(LibOrgBouncycastleOpenpgpExamplesByteArrayHandler *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesByteArrayHandler *new_LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesByteArrayHandler, init)
}

LibOrgBouncycastleOpenpgpExamplesByteArrayHandler *create_LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesByteArrayHandler, init)
}

IOSByteArray *LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_decryptWithByteArray_withCharArray_(IOSByteArray *encrypted, IOSCharArray *passPhrase) {
  LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_initialize();
  JavaIoInputStream *in = new_JavaIoByteArrayInputStream_initWithByteArray_(encrypted);
  in = LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(in);
  LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *pgpF = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(in);
  LibOrgBouncycastleOpenpgpPGPEncryptedDataList *enc;
  id o = [pgpF nextObject];
  if ([o isKindOfClass:[LibOrgBouncycastleOpenpgpPGPEncryptedDataList class]]) {
    enc = (LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) o;
  }
  else {
    enc = (LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) cast_chk([pgpF nextObject], [LibOrgBouncycastleOpenpgpPGPEncryptedDataList class]);
  }
  LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *pbe = (LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *) cast_chk([((LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) nil_chk(enc)) getWithInt:0], [LibOrgBouncycastleOpenpgpPGPPBEEncryptedData class]);
  JavaIoInputStream *clear = [((LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *) nil_chk(pbe)) getDataStreamWithLibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEDataDecryptorFactoryBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEDataDecryptorFactoryBuilder_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_([((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPDigestCalculatorProviderBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPDigestCalculatorProviderBuilder_init() setProviderWithNSString:@"BC"])) build]) setProviderWithNSString:@"BC"])) buildWithCharArray:passPhrase]];
  LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(clear);
  LibOrgBouncycastleOpenpgpPGPCompressedData *cData = (LibOrgBouncycastleOpenpgpPGPCompressedData *) cast_chk([pgpFact nextObject], [LibOrgBouncycastleOpenpgpPGPCompressedData class]);
  pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_([((LibOrgBouncycastleOpenpgpPGPCompressedData *) nil_chk(cData)) getDataStream]);
  LibOrgBouncycastleOpenpgpPGPLiteralData *ld = (LibOrgBouncycastleOpenpgpPGPLiteralData *) cast_chk([pgpFact nextObject], [LibOrgBouncycastleOpenpgpPGPLiteralData class]);
  return LibOrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_([((LibOrgBouncycastleOpenpgpPGPLiteralData *) nil_chk(ld)) getInputStream]);
}

IOSByteArray *LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_encryptWithByteArray_withCharArray_withNSString_withInt_withBoolean_(IOSByteArray *clearData, IOSCharArray *passPhrase, NSString *fileName, jint algorithm, jboolean armor) {
  LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_initialize();
  if (fileName == nil) {
    fileName = LibOrgBouncycastleOpenpgpPGPLiteralData_CONSOLE;
  }
  IOSByteArray *compressedData = LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_compressWithByteArray_withNSString_withInt_(clearData, fileName, LibOrgBouncycastleBcpgCompressionAlgorithmTags_ZIP);
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  JavaIoOutputStream *out = bOut;
  if (armor) {
    out = new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(out);
  }
  LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *encGen = new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_([((LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_initWithInt_(algorithm) setSecureRandomWithJavaSecuritySecureRandom:new_JavaSecuritySecureRandom_init()])) setProviderWithNSString:@"BC"]);
  [encGen addMethodWithLibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator:[new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBEKeyEncryptionMethodGenerator_initWithCharArray_(passPhrase) setProviderWithNSString:@"BC"]];
  JavaIoOutputStream *encOut = [encGen openWithJavaIoOutputStream:out withLong:((IOSByteArray *) nil_chk(compressedData))->size_];
  [((JavaIoOutputStream *) nil_chk(encOut)) writeWithByteArray:compressedData];
  [encOut close];
  if (armor) {
    [out close];
  }
  return [bOut toByteArray];
}

IOSByteArray *LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_compressWithByteArray_withNSString_withInt_(IOSByteArray *clearData, NSString *fileName, jint algorithm) {
  LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_initialize();
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  LibOrgBouncycastleOpenpgpPGPCompressedDataGenerator *comData = new_LibOrgBouncycastleOpenpgpPGPCompressedDataGenerator_initWithInt_(algorithm);
  JavaIoOutputStream *cos = [comData openWithJavaIoOutputStream:bOut];
  LibOrgBouncycastleOpenpgpPGPLiteralDataGenerator *lData = new_LibOrgBouncycastleOpenpgpPGPLiteralDataGenerator_init();
  JavaIoOutputStream *pOut = [lData openWithJavaIoOutputStream:cos withChar:LibOrgBouncycastleOpenpgpPGPLiteralData_BINARY withNSString:fileName withLong:((IOSByteArray *) nil_chk(clearData))->size_ withJavaUtilDate:new_JavaUtilDate_init()];
  [((JavaIoOutputStream *) nil_chk(pOut)) writeWithByteArray:clearData];
  [pOut close];
  [comData close];
  return [bOut toByteArray];
}

void LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_initialize();
  JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_LibOrgBouncycastleJceProviderBouncyCastleProvider_init());
  NSString *passPhrase = @"Dick Beck";
  IOSCharArray *passArray = [passPhrase java_toCharArray];
  IOSByteArray *original = [@"Hello world" java_getBytes];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Starting PGP test"];
  IOSByteArray *encrypted = LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_encryptWithByteArray_withCharArray_withNSString_withInt_withBoolean_(original, passArray, @"iway", LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAST5, true);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"\nencrypted data = '", [NSString java_stringWithBytes:encrypted], '\'')];
  IOSByteArray *decrypted = LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_decryptWithByteArray_withCharArray_(encrypted, passArray);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"\ndecrypted data = '", [NSString java_stringWithBytes:decrypted], '\'')];
  encrypted = LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_encryptWithByteArray_withCharArray_withNSString_withInt_withBoolean_(original, passArray, @"iway", LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256, false);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"\nencrypted data = '", [NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_(encrypted)], '\'')];
  decrypted = LibOrgBouncycastleOpenpgpExamplesByteArrayHandler_decryptWithByteArray_withCharArray_(encrypted, passArray);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"\ndecrypted data = '", [NSString java_stringWithBytes:decrypted], '\'')];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesByteArrayHandler)
