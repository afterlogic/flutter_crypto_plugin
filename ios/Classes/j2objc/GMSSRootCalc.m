//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/gmss/GMSSRootCalc.java
//

#include "Arrays.h"
#include "Digest.h"
#include "GMSSDigestProvider.h"
#include "GMSSRootCalc.h"
#include "GMSSUtils.h"
#include "Hex.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "Treehash.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Enumeration.h"
#include "java/util/Vector.h"

@interface LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc () {
 @public
  jint heightOfTree_;
  jint mdLength_;
  IOSObjectArray *treehash_;
  IOSObjectArray *retain__;
  IOSByteArray *root_;
  IOSObjectArray *AuthPath_;
  jint K_;
  JavaUtilVector *tailStack_;
  JavaUtilVector *heightOfNodes_;
  id<LibOrgBouncycastleCryptoDigest> messDigestTree_;
  id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider_;
  IOSIntArray *index_;
  jboolean isInitialized_;
  jboolean isFinished_;
  jint indexForNextSeed_;
  jint heightOfNextSeed_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, treehash_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, retain__, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, root_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, AuthPath_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, tailStack_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, heightOfNodes_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, messDigestTree_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, digestProvider_, id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, index_, IOSIntArray *)

@implementation LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc

- (instancetype)initWithInt:(jint)heightOfTree
                    withInt:(jint)K
withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider:(id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>)digestProvider {
  LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc_initWithInt_withInt_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(self, heightOfTree, K, digestProvider);
  return self;
}

- (void)initialize__WithJavaUtilVector:(JavaUtilVector *)sharedStack {
  self->treehash_ = [IOSObjectArray newArrayWithLength:self->heightOfTree_ - self->K_ type:LibOrgBouncycastlePqcCryptoGmssTreehash_class_()];
  for (jint i = 0; i < self->heightOfTree_ - self->K_; i++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(self->treehash_), i, new_LibOrgBouncycastlePqcCryptoGmssTreehash_initWithJavaUtilVector_withInt_withLibOrgBouncycastleCryptoDigest_(sharedStack, i, [((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(self->digestProvider_)) get]));
  }
  self->index_ = [IOSIntArray newArrayWithLength:heightOfTree_];
  self->AuthPath_ = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ heightOfTree_, mdLength_ }];
  self->root_ = [IOSByteArray newArrayWithLength:mdLength_];
  self->tailStack_ = new_JavaUtilVector_init();
  self->heightOfNodes_ = new_JavaUtilVector_init();
  self->isInitialized_ = true;
  self->isFinished_ = false;
  for (jint i = 0; i < heightOfTree_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->index_), i) = -1;
  }
  self->retain__ = [IOSObjectArray newArrayWithLength:self->K_ - 1 type:JavaUtilVector_class_()];
  for (jint i = 0; i < K_ - 1; i++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(self->retain__), i, new_JavaUtilVector_init());
  }
  self->indexForNextSeed_ = 3;
  self->heightOfNextSeed_ = 0;
}

- (void)updateWithByteArray:(IOSByteArray *)seed
              withByteArray:(IOSByteArray *)leaf {
  if (self->heightOfNextSeed_ < (self->heightOfTree_ - self->K_) && self->indexForNextSeed_ - 2 == IOSIntArray_Get(nil_chk(index_), 0)) {
    [self initializeTreehashSeedWithByteArray:seed withInt:self->heightOfNextSeed_];
    self->heightOfNextSeed_++;
    self->indexForNextSeed_ *= 2;
  }
  [self updateWithByteArray:leaf];
}

- (void)updateWithByteArray:(IOSByteArray *)leaf {
  if (isFinished_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"Too much updates for Tree!!"];
    return;
  }
  if (!isInitialized_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"GMSSRootCalc not initialized!"];
    return;
  }
  (*IOSIntArray_GetRef(nil_chk(index_), 0))++;
  if (IOSIntArray_Get(index_, 0) == 1) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(leaf, 0, IOSObjectArray_Get(nil_chk(AuthPath_), 0), 0, mdLength_);
  }
  else if (IOSIntArray_Get(index_, 0) == 3) {
    if (heightOfTree_ > K_) {
      [((LibOrgBouncycastlePqcCryptoGmssTreehash *) nil_chk(IOSObjectArray_Get(nil_chk(treehash_), 0))) setFirstNodeWithByteArray:leaf];
    }
  }
  if ((IOSIntArray_Get(nil_chk(index_), 0) - 3) % 2 == 0 && IOSIntArray_Get(index_, 0) >= 3) {
    if (heightOfTree_ == K_) {
      [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(retain__), 0))) insertElementAtWithId:leaf withInt:0];
    }
  }
  if (IOSIntArray_Get(nil_chk(index_), 0) == 0) {
    [((JavaUtilVector *) nil_chk(tailStack_)) addElementWithId:leaf];
    [((JavaUtilVector *) nil_chk(heightOfNodes_)) addElementWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(0)];
  }
  else {
    IOSByteArray *help = [IOSByteArray newArrayWithLength:mdLength_];
    IOSByteArray *toBeHashed = [IOSByteArray newArrayWithLength:JreLShift32(mdLength_, 1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(leaf, 0, help, 0, mdLength_);
    jint helpHeight = 0;
    while ([((JavaUtilVector *) nil_chk(tailStack_)) size] > 0 && helpHeight == [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([((JavaUtilVector *) nil_chk(heightOfNodes_)) lastElement], [JavaLangInteger class])))) intValue]) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaUtilVector *) nil_chk(tailStack_)) lastElement], 0, toBeHashed, 0, mdLength_);
      [((JavaUtilVector *) nil_chk(tailStack_)) removeElementAtWithInt:[tailStack_ size] - 1];
      [((JavaUtilVector *) nil_chk(heightOfNodes_)) removeElementAtWithInt:[heightOfNodes_ size] - 1];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(help, 0, toBeHashed, mdLength_, mdLength_);
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigestTree_)) updateWithByteArray:toBeHashed withInt:0 withInt:toBeHashed->size_];
      help = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigestTree_)) getDigestSize]];
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigestTree_)) doFinalWithByteArray:help withInt:0];
      helpHeight++;
      if (helpHeight < heightOfTree_) {
        (*IOSIntArray_GetRef(nil_chk(index_), helpHeight))++;
        if (IOSIntArray_Get(index_, helpHeight) == 1) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(help, 0, IOSObjectArray_Get(nil_chk(AuthPath_), helpHeight), 0, mdLength_);
        }
        if (helpHeight >= heightOfTree_ - K_) {
          if (helpHeight == 0) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"M\ufffd\ufffd\ufffdP"];
          }
          if ((IOSIntArray_Get(nil_chk(index_), helpHeight) - 3) % 2 == 0 && IOSIntArray_Get(index_, helpHeight) >= 3) {
            [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(retain__), helpHeight - (heightOfTree_ - K_)))) insertElementAtWithId:help withInt:0];
          }
        }
        else {
          if (IOSIntArray_Get(nil_chk(index_), helpHeight) == 3) {
            [((LibOrgBouncycastlePqcCryptoGmssTreehash *) nil_chk(IOSObjectArray_Get(nil_chk(treehash_), helpHeight))) setFirstNodeWithByteArray:help];
          }
        }
      }
    }
    [((JavaUtilVector *) nil_chk(tailStack_)) addElementWithId:help];
    [((JavaUtilVector *) nil_chk(heightOfNodes_)) addElementWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(helpHeight)];
    if (helpHeight == heightOfTree_) {
      isFinished_ = true;
      isInitialized_ = false;
      root_ = (IOSByteArray *) cast_chk([((JavaUtilVector *) nil_chk(tailStack_)) lastElement], [IOSByteArray class]);
    }
  }
}

- (void)initializeTreehashSeedWithByteArray:(IOSByteArray *)seed
                                    withInt:(jint)index {
  [((LibOrgBouncycastlePqcCryptoGmssTreehash *) nil_chk(IOSObjectArray_Get(nil_chk(treehash_), index))) initializeSeedWithByteArray:seed];
}

- (jboolean)wasInitialized {
  return isInitialized_;
}

- (jboolean)wasFinished {
  return isFinished_;
}

- (IOSObjectArray *)getAuthPath {
  return LibOrgBouncycastlePqcCryptoGmssGMSSUtils_cloneWithByteArray2_(AuthPath_);
}

- (IOSObjectArray *)getTreehash {
  return LibOrgBouncycastlePqcCryptoGmssGMSSUtils_cloneWithLibOrgBouncycastlePqcCryptoGmssTreehashArray_(treehash_);
}

- (IOSObjectArray *)getRetain {
  return LibOrgBouncycastlePqcCryptoGmssGMSSUtils_cloneWithJavaUtilVectorArray_(retain__);
}

- (IOSByteArray *)getRoot {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(root_);
}

- (JavaUtilVector *)getStack {
  JavaUtilVector *copy_ = new_JavaUtilVector_init();
  for (id<JavaUtilEnumeration> en = [((JavaUtilVector *) nil_chk(tailStack_)) elements]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    [copy_ addElementWithId:[en nextElement]];
  }
  return copy_;
}

- (IOSObjectArray *)getStatByte {
  jint tailLength;
  if (tailStack_ == nil) {
    tailLength = 0;
  }
  else {
    tailLength = [tailStack_ size];
  }
  IOSObjectArray *statByte = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ 1 + heightOfTree_ + tailLength, 64 }];
  (void) IOSObjectArray_Set(statByte, 0, root_);
  for (jint i = 0; i < heightOfTree_; i++) {
    (void) IOSObjectArray_Set(statByte, 1 + i, IOSObjectArray_Get(nil_chk(AuthPath_), i));
  }
  for (jint i = 0; i < tailLength; i++) {
    (void) IOSObjectArray_Set(statByte, 1 + heightOfTree_ + i, (IOSByteArray *) cast_chk([((JavaUtilVector *) nil_chk(tailStack_)) elementAtWithInt:i], [IOSByteArray class]));
  }
  return statByte;
}

- (IOSIntArray *)getStatInt {
  jint tailLength;
  if (tailStack_ == nil) {
    tailLength = 0;
  }
  else {
    tailLength = [tailStack_ size];
  }
  IOSIntArray *statInt = [IOSIntArray newArrayWithLength:8 + heightOfTree_ + tailLength];
  *IOSIntArray_GetRef(statInt, 0) = heightOfTree_;
  *IOSIntArray_GetRef(statInt, 1) = mdLength_;
  *IOSIntArray_GetRef(statInt, 2) = K_;
  *IOSIntArray_GetRef(statInt, 3) = indexForNextSeed_;
  *IOSIntArray_GetRef(statInt, 4) = heightOfNextSeed_;
  if (isFinished_) {
    *IOSIntArray_GetRef(statInt, 5) = 1;
  }
  else {
    *IOSIntArray_GetRef(statInt, 5) = 0;
  }
  if (isInitialized_) {
    *IOSIntArray_GetRef(statInt, 6) = 1;
  }
  else {
    *IOSIntArray_GetRef(statInt, 6) = 0;
  }
  *IOSIntArray_GetRef(statInt, 7) = tailLength;
  for (jint i = 0; i < heightOfTree_; i++) {
    *IOSIntArray_GetRef(statInt, 8 + i) = IOSIntArray_Get(nil_chk(index_), i);
  }
  for (jint i = 0; i < tailLength; i++) {
    *IOSIntArray_GetRef(statInt, 8 + heightOfTree_ + i) = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([((JavaUtilVector *) nil_chk(heightOfNodes_)) elementAtWithInt:i], [JavaLangInteger class])))) intValue];
  }
  return statInt;
}

- (NSString *)description {
  NSString *out = @"";
  jint tailLength;
  if (tailStack_ == nil) {
    tailLength = 0;
  }
  else {
    tailLength = [tailStack_ size];
  }
  for (jint i = 0; i < 8 + heightOfTree_ + tailLength; i++) {
    out = JreStrcat("$IC", out, IOSIntArray_Get(nil_chk([self getStatInt]), i), ' ');
  }
  for (jint i = 0; i < 1 + heightOfTree_ + tailLength; i++) {
    out = JreStrcat("$$C", out, [NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_(IOSObjectArray_Get(nil_chk([self getStatByte]), i))], ' ');
  }
  out = JreStrcat("$$I", out, @"  ", [((id<LibOrgBouncycastleCryptoDigest>) nil_chk([((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(digestProvider_)) get])) getDigestSize]);
  return out;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastlePqcCryptoGmssTreehash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaUtilVector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider:);
  methods[1].selector = @selector(initialize__WithJavaUtilVector:);
  methods[2].selector = @selector(updateWithByteArray:withByteArray:);
  methods[3].selector = @selector(updateWithByteArray:);
  methods[4].selector = @selector(initializeTreehashSeedWithByteArray:withInt:);
  methods[5].selector = @selector(wasInitialized);
  methods[6].selector = @selector(wasFinished);
  methods[7].selector = @selector(getAuthPath);
  methods[8].selector = @selector(getTreehash);
  methods[9].selector = @selector(getRetain);
  methods[10].selector = @selector(getRoot);
  methods[11].selector = @selector(getStack);
  methods[12].selector = @selector(getStatByte);
  methods[13].selector = @selector(getStatInt);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "heightOfTree_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mdLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treehash_", "[LLibOrgBouncycastlePqcCryptoGmssTreehash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "retain__", "[LJavaUtilVector;", .constantValue.asLong = 0, 0x2, 9, -1, -1, -1 },
    { "root_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "AuthPath_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "K_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tailStack_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "heightOfNodes_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "messDigestTree_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digestProvider_", "LLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "index_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isInitialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isFinished_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indexForNextSeed_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "heightOfNextSeed_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider;", "initialize", "LJavaUtilVector;", "update", "[B[B", "[B", "initializeTreehashSeed", "[BI", "toString", "retain" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc = { "GMSSRootCalc", "lib.org.bouncycastle.pqc.crypto.gmss", ptrTable, methods, fields, 7, 0x1, 15, 16, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc;
}

@end

void LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc_initWithInt_withInt_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *self, jint heightOfTree, jint K, id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider) {
  NSObject_init(self);
  self->heightOfTree_ = heightOfTree;
  self->digestProvider_ = digestProvider;
  self->messDigestTree_ = [((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(digestProvider)) get];
  self->mdLength_ = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->messDigestTree_)) getDigestSize];
  self->K_ = K;
  self->index_ = [IOSIntArray newArrayWithLength:heightOfTree];
  self->AuthPath_ = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ heightOfTree, self->mdLength_ }];
  self->root_ = [IOSByteArray newArrayWithLength:self->mdLength_];
  self->retain__ = [IOSObjectArray newArrayWithLength:self->K_ - 1 type:JavaUtilVector_class_()];
  for (jint i = 0; i < K - 1; i++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(self->retain__), i, new_JavaUtilVector_init());
  }
}

LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *new_LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc_initWithInt_withInt_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(jint heightOfTree, jint K, id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, initWithInt_withInt_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_, heightOfTree, K, digestProvider)
}

LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *create_LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc_initWithInt_withInt_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(jint heightOfTree, jint K, id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc, initWithInt_withInt_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_, heightOfTree, K, digestProvider)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc)
