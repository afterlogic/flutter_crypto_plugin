//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPSecretKeyRingCollection.java
//

#include "BCPGOutputStream.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFingerPrintCalculator.h"
#include "PGPException.h"
#include "PGPObjectFactory.h"
#include "PGPPublicKey.h"
#include "PGPSecretKey.h"
#include "PGPSecretKeyRing.h"
#include "PGPSecretKeyRingCollection.h"
#include "Strings.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@interface LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection () {
 @public
  id<JavaUtilMap> secretRings_;
  id<JavaUtilList> order_;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)secretRings
                   withJavaUtilList:(id<JavaUtilList>)order;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, secretRings_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, order_, id<JavaUtilList>)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *self, id<JavaUtilMap> secretRings, id<JavaUtilList> order);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(id<JavaUtilMap> secretRings, id<JavaUtilList> order) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(id<JavaUtilMap> secretRings, id<JavaUtilList> order);

@implementation LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)secretRings
                   withJavaUtilList:(id<JavaUtilList>)order {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(self, secretRings, order);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)encoding
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, encoding, fingerPrintCalculator);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, inArg, fingerPrintCalculator);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilCollection_(self, collection);
  return self;
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(order_)) size];
}

- (id<JavaUtilIterator>)getKeyRings {
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(secretRings_)) values])) iterator];
}

- (id<JavaUtilIterator>)getKeyRingsWithNSString:(NSString *)userID {
  return [self getKeyRingsWithNSString:userID withBoolean:false withBoolean:false];
}

- (id<JavaUtilIterator>)getKeyRingsWithNSString:(NSString *)userID
                                    withBoolean:(jboolean)matchPartial {
  return [self getKeyRingsWithNSString:userID withBoolean:matchPartial withBoolean:false];
}

- (id<JavaUtilIterator>)getKeyRingsWithNSString:(NSString *)userID
                                    withBoolean:(jboolean)matchPartial
                                    withBoolean:(jboolean)ignoreCase {
  id<JavaUtilIterator> it = [self getKeyRings];
  id<JavaUtilList> rings = new_JavaUtilArrayList_init();
  if (ignoreCase) {
    userID = LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(userID);
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secRing = (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]);
    id<JavaUtilIterator> uIt = [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secRing)) getSecretKey])) getUserIDs];
    while ([((id<JavaUtilIterator>) nil_chk(uIt)) hasNext]) {
      NSString *next = (NSString *) cast_chk([uIt next], [NSString class]);
      if (ignoreCase) {
        next = LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(next);
      }
      if (matchPartial) {
        if ([((NSString *) nil_chk(next)) java_indexOfString:userID] > -1) {
          [rings addWithId:secRing];
        }
      }
      else {
        if ([((NSString *) nil_chk(next)) isEqual:userID]) {
          [rings addWithId:secRing];
        }
      }
    }
  }
  return [rings iterator];
}

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)getSecretKeyWithLong:(jlong)keyID {
  id<JavaUtilIterator> it = [self getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secRing = (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]);
    LibOrgBouncycastleOpenpgpPGPSecretKey *sec = [((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secRing)) getSecretKeyWithLong:keyID];
    if (sec != nil) {
      return sec;
    }
  }
  return nil;
}

- (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)getSecretKeyRingWithLong:(jlong)keyID {
  JavaLangLong *id_ = new_JavaLangLong_initWithLong_(keyID);
  if ([((id<JavaUtilMap>) nil_chk(secretRings_)) containsKeyWithId:id_]) {
    return (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) cast_chk([((id<JavaUtilMap>) nil_chk(secretRings_)) getWithId:id_], [LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]);
  }
  id<JavaUtilIterator> it = [self getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretRing = (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]);
    LibOrgBouncycastleOpenpgpPGPSecretKey *secret = [((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secretRing)) getSecretKeyWithLong:keyID];
    if (secret != nil) {
      return secretRing;
    }
  }
  return nil;
}

- (jboolean)containsWithLong:(jlong)keyID {
  return [self getSecretKeyWithLong:keyID] != nil;
}

- (IOSByteArray *)getEncoded {
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [self encodeWithJavaIoOutputStream:bOut];
  return [bOut toByteArray];
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream {
  LibOrgBouncycastleBcpgBCPGOutputStream *out;
  if ([outStream isKindOfClass:[LibOrgBouncycastleBcpgBCPGOutputStream class]]) {
    out = (LibOrgBouncycastleBcpgBCPGOutputStream *) outStream;
  }
  else {
    out = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_(outStream);
  }
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(order_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSecretKeyRing *sr = (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) cast_chk([((id<JavaUtilMap>) nil_chk(secretRings_)) getWithId:[it next]], [LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]);
    [((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(sr)) encodeWithJavaIoOutputStream:out];
  }
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *)addSecretKeyRingWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection:(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *)ringCollection
                                                                                   withLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secretKeyRing {
  return LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_addSecretKeyRingWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(ringCollection, secretKeyRing);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *)removeSecretKeyRingWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection:(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *)ringCollection
                                                                                      withLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secretKeyRing {
  return LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_removeSecretKeyRingWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(ringCollection, secretKeyRing);
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(secretRings_)) values])) iterator];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 2, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 7, 8, 9, 10, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 7, 11, 9, 12, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 7, 13, 9, 14, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x1, 15, 16, 9, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", 0x1, 17, 16, 9, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 16, 9, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 19, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection;", 0x9, 24, 23, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilMap:withJavaUtilList:);
  methods[1].selector = @selector(initWithByteArray:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[2].selector = @selector(initWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[3].selector = @selector(initWithJavaUtilCollection:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(getKeyRings);
  methods[6].selector = @selector(getKeyRingsWithNSString:);
  methods[7].selector = @selector(getKeyRingsWithNSString:withBoolean:);
  methods[8].selector = @selector(getKeyRingsWithNSString:withBoolean:withBoolean:);
  methods[9].selector = @selector(getSecretKeyWithLong:);
  methods[10].selector = @selector(getSecretKeyRingWithLong:);
  methods[11].selector = @selector(containsWithLong:);
  methods[12].selector = @selector(getEncoded);
  methods[13].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[14].selector = @selector(addSecretKeyRingWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection:withLibOrgBouncycastleOpenpgpPGPSecretKeyRing:);
  methods[15].selector = @selector(removeSecretKeyRingWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection:withLibOrgBouncycastleOpenpgpPGPSecretKeyRing:);
  methods[16].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "secretRings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "order_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;LJavaUtilList;", "[BLLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LJavaUtilCollection;", "(Ljava/util/Collection<Llib/org/bouncycastle/openpgp/PGPSecretKeyRing;>;)V", "()Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPSecretKeyRing;>;", "getKeyRings", "LNSString;", "LLibOrgBouncycastleOpenpgpPGPException;", "(Ljava/lang/String;)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPSecretKeyRing;>;", "LNSString;Z", "(Ljava/lang/String;Z)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPSecretKeyRing;>;", "LNSString;ZZ", "(Ljava/lang/String;ZZ)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPSecretKeyRing;>;", "getSecretKey", "J", "getSecretKeyRing", "contains", "LJavaIoIOException;", "encode", "LJavaIoOutputStream;", "addSecretKeyRing", "LLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection;LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", "removeSecretKeyRing", "Ljava/lang/Object;Llib/org/bouncycastle/util/Iterable<Llib/org/bouncycastle/openpgp/PGPSecretKeyRing;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection = { "PGPSecretKeyRingCollection", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 17, 2, -1, -1, -1, 25, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection;
}

@end

void LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *self, id<JavaUtilMap> secretRings, id<JavaUtilList> order) {
  NSObject_init(self);
  self->secretRings_ = new_JavaUtilHashMap_init();
  self->order_ = new_JavaUtilArrayList_init();
  self->secretRings_ = secretRings;
  self->order_ = order;
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(id<JavaUtilMap> secretRings, id<JavaUtilList> order) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, initWithJavaUtilMap_withJavaUtilList_, secretRings, order)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(id<JavaUtilMap> secretRings, id<JavaUtilList> order) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, initWithJavaUtilMap_withJavaUtilList_, secretRings, order)
}

void LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *self, IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, new_JavaIoByteArrayInputStream_initWithByteArray_(encoding), fingerPrintCalculator);
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, encoding, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, encoding, fingerPrintCalculator)
}

void LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *self, JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  NSObject_init(self);
  self->secretRings_ = new_JavaUtilHashMap_init();
  self->order_ = new_JavaUtilArrayList_init();
  LibOrgBouncycastleOpenpgpPGPObjectFactory *pgpFact = new_LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(inArg, fingerPrintCalculator);
  id obj;
  while ((obj = [pgpFact nextObject]) != nil) {
    if (!([obj isKindOfClass:[LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]])) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$$", [[nil_chk(obj) java_getClass] getName], @" found where PGPSecretKeyRing expected"));
    }
    LibOrgBouncycastleOpenpgpPGPSecretKeyRing *pgpSecret = (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) cast_chk(obj, [LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]);
    JavaLangLong *key = new_JavaLangLong_initWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(pgpSecret)) getPublicKey])) getKeyID]);
    (void) [((id<JavaUtilMap>) nil_chk(self->secretRings_)) putWithId:key withId:pgpSecret];
    [((id<JavaUtilList>) nil_chk(self->order_)) addWithId:key];
  }
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, inArg, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, inArg, fingerPrintCalculator)
}

void LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilCollection_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *self, id<JavaUtilCollection> collection) {
  NSObject_init(self);
  self->secretRings_ = new_JavaUtilHashMap_init();
  self->order_ = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSecretKeyRing *pgpSecret = (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]);
    JavaLangLong *key = new_JavaLangLong_initWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(pgpSecret)) getPublicKey])) getKeyID]);
    (void) [((id<JavaUtilMap>) nil_chk(self->secretRings_)) putWithId:key withId:pgpSecret];
    [((id<JavaUtilList>) nil_chk(self->order_)) addWithId:key];
  }
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, initWithJavaUtilCollection_, collection)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection, initWithJavaUtilCollection_, collection)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_addSecretKeyRingWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *ringCollection, LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeyRing) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initialize();
  JavaLangLong *key = new_JavaLangLong_initWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secretKeyRing)) getPublicKey])) getKeyID]);
  if ([((id<JavaUtilMap>) nil_chk(((LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *) nil_chk(ringCollection))->secretRings_)) containsKeyWithId:key]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Collection already contains a key with a keyID for the passed in ring.");
  }
  id<JavaUtilMap> newSecretRings = new_JavaUtilHashMap_initWithJavaUtilMap_(ringCollection->secretRings_);
  id<JavaUtilList> newOrder = new_JavaUtilArrayList_initWithJavaUtilCollection_(ringCollection->order_);
  (void) [newSecretRings putWithId:key withId:secretKeyRing];
  [newOrder addWithId:key];
  return new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(newSecretRings, newOrder);
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_removeSecretKeyRingWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *ringCollection, LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeyRing) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initialize();
  JavaLangLong *key = new_JavaLangLong_initWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secretKeyRing)) getPublicKey])) getKeyID]);
  if (![((id<JavaUtilMap>) nil_chk(((LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *) nil_chk(ringCollection))->secretRings_)) containsKeyWithId:key]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Collection does not contain a key with a keyID for the passed in ring.");
  }
  id<JavaUtilMap> newSecretRings = new_JavaUtilHashMap_initWithJavaUtilMap_(ringCollection->secretRings_);
  id<JavaUtilList> newOrder = new_JavaUtilArrayList_initWithJavaUtilCollection_(ringCollection->order_);
  (void) [newSecretRings removeWithId:key];
  for (jint i = 0; i < [newOrder size]; i++) {
    JavaLangLong *r = (JavaLangLong *) cast_chk([newOrder getWithInt:i], [JavaLangLong class]);
    if ([((JavaLangLong *) nil_chk(r)) longLongValue] == [key longLongValue]) {
      (void) [newOrder removeWithInt:i];
      break;
    }
  }
  return new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(newSecretRings, newOrder);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection)
