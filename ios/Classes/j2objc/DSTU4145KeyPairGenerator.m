//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/DSTU4145KeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "DSTU4145KeyPairGenerator.h"
#include "ECDomainParameters.h"
#include "ECKeyPairGenerator.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [super generateKeyPair];
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *pub = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *priv = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([pair getPrivate], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
  pub = new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(pub)) getQ])) negate], [pub getParameters]);
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pub, priv);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator = { "DSTU4145KeyPairGenerator", "lib.org.bouncycastle.crypto.generators", NULL, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator;
}

@end

void LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator_init(LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator *self) {
  LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(self);
}

LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator *new_LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator, init)
}

LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator *create_LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator)
