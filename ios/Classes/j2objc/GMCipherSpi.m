//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ec/GMCipherSpi.java
//

#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BCJcaJceHelper.h"
#include "BadBlockException.h"
#include "Blake2bDigest.h"
#include "Blake2sDigest.h"
#include "CryptoServicesRegistrar.h"
#include "ECCurve.h"
#include "ECKey.h"
#include "ECParameterSpec.h"
#include "ECUtils.h"
#include "GMCipherSpi.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "JcajceUtilECUtil.h"
#include "MD5Digest.h"
#include "ParametersWithRandom.h"
#include "RIPEMD160Digest.h"
#include "SHA1Digest.h"
#include "SHA224Digest.h"
#include "SHA256Digest.h"
#include "SHA384Digest.h"
#include "SHA512Digest.h"
#include "SM2Engine.h"
#include "Strings.h"
#include "WhirlpoolDigest.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/CipherSpi.h"
#include "javax/crypto/NoSuchPaddingException.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
  LibOrgBouncycastleCryptoEnginesSM2Engine *engine_;
  jint state_;
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *buffer_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *key_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi, engine_, LibOrgBouncycastleCryptoEnginesSM2Engine *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi, buffer_, LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi, key_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi, random_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi

- (instancetype)initWithLibOrgBouncycastleCryptoEnginesSM2Engine:(LibOrgBouncycastleCryptoEnginesSM2Engine *)engine {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, engine);
  return self;
}

- (jint)engineGetBlockSize {
  return 0;
}

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  if ([LibOrgBouncycastleJceInterfacesECKey_class_() isInstance:key]) {
    return [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([((id<LibOrgBouncycastleJceInterfacesECKey>) nil_chk(((id<LibOrgBouncycastleJceInterfacesECKey>) cast_check(key, LibOrgBouncycastleJceInterfacesECKey_class_())))) getParameters])) getCurve])) getFieldSize];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not an EC key");
  }
}

- (IOSByteArray *)engineGetIV {
  return nil;
}

- (JavaSecurityAlgorithmParameters *)engineGetParameters {
  return nil;
}

- (void)engineSetModeWithNSString:(NSString *)mode {
  NSString *modeName = LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_(mode);
  if (![((NSString *) nil_chk(modeName)) isEqual:@"NONE"]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"can't support mode ", mode));
  }
}

- (jint)engineGetOutputSizeWithInt:(jint)inputLen {
  if (state_ == JavaxCryptoCipher_ENCRYPT_MODE || state_ == JavaxCryptoCipher_WRAP_MODE) {
    return [((LibOrgBouncycastleCryptoEnginesSM2Engine *) nil_chk(engine_)) getOutputSizeWithInt:inputLen];
  }
  else if (state_ == JavaxCryptoCipher_DECRYPT_MODE || state_ == JavaxCryptoCipher_UNWRAP_MODE) {
    return [((LibOrgBouncycastleCryptoEnginesSM2Engine *) nil_chk(engine_)) getOutputSizeWithInt:inputLen];
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher not initialised");
  }
}

- (void)engineSetPaddingWithNSString:(NSString *)padding {
  NSString *paddingName = LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_(padding);
  if (![((NSString *) nil_chk(paddingName)) isEqual:@"NOPADDING"]) {
    @throw new_JavaxCryptoNoSuchPaddingException_initWithNSString_(@"padding not available with IESCipher");
  }
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  id<JavaSecuritySpecAlgorithmParameterSpec> paramSpec = nil;
  if (params != nil) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"cannot recognise parameters: ", [[params java_getClass] getName]));
  }
  [self engineInitWithInt:opmode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:paramSpec withJavaSecuritySecureRandom:random];
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)engineSpec
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (opmode == JavaxCryptoCipher_ENCRYPT_MODE || opmode == JavaxCryptoCipher_WRAP_MODE) {
    if ([JavaSecurityPublicKey_class_() isInstance:key]) {
      self->key_ = LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_()));
    }
    else {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"must be passed public EC key for encryption");
    }
  }
  else if (opmode == JavaxCryptoCipher_DECRYPT_MODE || opmode == JavaxCryptoCipher_UNWRAP_MODE) {
    if ([JavaSecurityPrivateKey_class_() isInstance:key]) {
      self->key_ = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_()));
    }
    else {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"must be passed private EC key for decryption");
    }
  }
  else {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"must be passed EC key");
  }
  if (random != nil) {
    self->random_ = random;
  }
  else {
    self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  }
  self->state_ = opmode;
  [((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) reset];
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    [self engineInitWithInt:opmode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:nil withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"cannot handle supplied parameter spec: ", [e getMessage]));
  }
}

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen {
  [((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) writeWithByteArray:input withInt:inputOffset withInt:inputLen];
  return nil;
}

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset {
  [((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) writeWithByteArray:input withInt:inputOffset withInt:inputLen];
  return 0;
}

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen {
  if (inputLen != 0) {
    [((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) writeWithByteArray:input withInt:inputOffset withInt:inputLen];
  }
  @try {
    if (state_ == JavaxCryptoCipher_ENCRYPT_MODE || state_ == JavaxCryptoCipher_WRAP_MODE) {
      @try {
        [((LibOrgBouncycastleCryptoEnginesSM2Engine *) nil_chk(engine_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(key_, random_)];
        return [((LibOrgBouncycastleCryptoEnginesSM2Engine *) nil_chk(engine_)) processBlockWithByteArray:[((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) getBuf] withInt:0 withInt:[((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) size]];
      }
      @catch (JavaLangException *e) {
        @throw new_LibOrgBouncycastleJcajceProviderUtilBadBlockException_initWithNSString_withJavaLangThrowable_(@"unable to process block", e);
      }
    }
    else if (state_ == JavaxCryptoCipher_DECRYPT_MODE || state_ == JavaxCryptoCipher_UNWRAP_MODE) {
      @try {
        [((LibOrgBouncycastleCryptoEnginesSM2Engine *) nil_chk(engine_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:key_];
        return [((LibOrgBouncycastleCryptoEnginesSM2Engine *) nil_chk(engine_)) processBlockWithByteArray:[((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) getBuf] withInt:0 withInt:[((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) size]];
      }
      @catch (JavaLangException *e) {
        @throw new_LibOrgBouncycastleJcajceProviderUtilBadBlockException_initWithNSString_withJavaLangThrowable_(@"unable to process block", e);
      }
    }
    else {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher not initialised");
    }
  }
  @finally {
    [((LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *) nil_chk(buffer_)) erase];
  }
}

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLength
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset {
  IOSByteArray *buf = [self engineDoFinalWithByteArray:input withInt:inputOffset withInt:inputLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, output, outputOffset, ((IOSByteArray *) nil_chk(buf))->size_);
  return buf->size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 13, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 15, 16, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 19, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 20, 18, 21, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 19, 22, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoEnginesSM2Engine:);
  methods[1].selector = @selector(engineGetBlockSize);
  methods[2].selector = @selector(engineGetKeySizeWithJavaSecurityKey:);
  methods[3].selector = @selector(engineGetIV);
  methods[4].selector = @selector(engineGetParameters);
  methods[5].selector = @selector(engineSetModeWithNSString:);
  methods[6].selector = @selector(engineGetOutputSizeWithInt:);
  methods[7].selector = @selector(engineSetPaddingWithNSString:);
  methods[8].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecurityAlgorithmParameters:withJavaSecuritySecureRandom:);
  methods[9].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[10].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[11].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[12].selector = @selector(engineUpdateWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[13].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:);
  methods[14].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "engine_", "LLibOrgBouncycastleCryptoEnginesSM2Engine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "state_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoEnginesSM2Engine;", "engineGetKeySize", "LJavaSecurityKey;", "engineSetMode", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;", "engineGetOutputSize", "I", "engineSetPadding", "LJavaxCryptoNoSuchPaddingException;", "engineInit", "ILJavaSecurityKey;LJavaSecurityAlgorithmParameters;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "ILJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;LJavaSecurityInvalidKeyException;", "ILJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "engineUpdate", "[BII", "[BII[BI", "engineDoFinal", "LJavaxCryptoIllegalBlockSizeException;LJavaxCryptoBadPaddingException;", "LJavaxCryptoShortBufferException;LJavaxCryptoIllegalBlockSizeException;LJavaxCryptoBadPaddingException;", "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512;LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi = { "GMCipherSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x1, 15, 6, -1, 23, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi *self, LibOrgBouncycastleCryptoEnginesSM2Engine *engine) {
  JavaxCryptoCipherSpi_init(self);
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->state_ = -1;
  self->buffer_ = new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream_init();
  self->engine_ = engine;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(LibOrgBouncycastleCryptoEnginesSM2Engine *engine) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi, initWithLibOrgBouncycastleCryptoEnginesSM2Engine_, engine)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(LibOrgBouncycastleCryptoEnginesSM2Engine *engine) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi, initWithLibOrgBouncycastleCryptoEnginesSM2Engine_, engine)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2 = { "SM2", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_init());
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b = { "SM2withBlake2b", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(512)));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2b)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s = { "SM2withBlake2s", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsBlake2sDigest_initWithInt_(256)));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withBlake2s)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool = { "SM2withWhirlpool", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsWhirlpoolDigest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withWhirlpool)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5 = { "SM2withMD5", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsMD5Digest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withMD5)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD = { "SM2withRMD", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsRIPEMD160Digest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withRMD)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1 = { "SM2withSha1", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha1)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224 = { "SM2withSha224", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA224Digest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha224)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256 = { "SM2withSha256", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha256)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384 = { "SM2withSha384", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA384Digest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha384)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512 = { "SM2withSha512", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_initWithLibOrgBouncycastleCryptoEnginesSM2Engine_(self, new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_SM2withSha512)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)getBuf {
  return buf_;
}

- (void)erase {
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(self->buf_, (jbyte) 0);
  [self reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBuf);
  methods[2].selector = @selector(erase);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream = { "ErasableOutputStream", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x1c, 3, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *self) {
  JavaIoByteArrayOutputStream_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMCipherSpi_ErasableOutputStream)
