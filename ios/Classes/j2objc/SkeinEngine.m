//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/SkeinEngine.java
//

#include "Arrays.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "Memoable.h"
#include "OutputLengthException.h"
#include "SkeinEngine.h"
#include "SkeinParameters.h"
#include "ThreefishEngine.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"

@class LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI;

@interface LibOrgBouncycastleCryptoDigestsSkeinEngine () {
 @public
  jint outputSizeBytes_;
  IOSLongArray *initialState_;
  IOSByteArray *key_;
  IOSObjectArray *preMessageParameters_;
  IOSObjectArray *postMessageParameters_;
  LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *ubi_;
  IOSByteArray *singleByte_;
}

+ (void)initialStateWithInt:(jint)blockSize
                    withInt:(jint)outputSize
              withLongArray:(IOSLongArray *)state OBJC_METHOD_FAMILY_NONE;

+ (JavaLangInteger *)variantIdentifierWithInt:(jint)blockSizeBytes
                                      withInt:(jint)outputSizeBytes;

- (void)copyInWithLibOrgBouncycastleCryptoDigestsSkeinEngine:(LibOrgBouncycastleCryptoDigestsSkeinEngine *)engine OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)cloneWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:(IOSObjectArray *)data
                         withLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:(IOSObjectArray *)existing;

- (void)initParamsWithJavaUtilHashtable:(JavaUtilHashtable *)parameters OBJC_METHOD_FAMILY_NONE;

+ (void)sortWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:(IOSObjectArray *)params;

- (void)createInitialState;

- (void)ubiCompleteWithInt:(jint)type
             withByteArray:(IOSByteArray *)value;

- (void)ubiInitWithInt:(jint)type;

- (void)ubiFinal;

- (void)checkInitialised;

- (void)outputWithLong:(jlong)outputSequence
         withByteArray:(IOSByteArray *)outArg
               withInt:(jint)outOff
               withInt:(jint)outputBytes;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine, initialState_, IOSLongArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine, key_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine, preMessageParameters_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine, postMessageParameters_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine, ubi_, LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine, singleByte_, IOSByteArray *)

inline jint LibOrgBouncycastleCryptoDigestsSkeinEngine_get_PARAM_TYPE_KEY(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_KEY 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine, PARAM_TYPE_KEY, jint)

inline jint LibOrgBouncycastleCryptoDigestsSkeinEngine_get_PARAM_TYPE_CONFIG(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_CONFIG 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine, PARAM_TYPE_CONFIG, jint)

inline jint LibOrgBouncycastleCryptoDigestsSkeinEngine_get_PARAM_TYPE_MESSAGE(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_MESSAGE 48
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine, PARAM_TYPE_MESSAGE, jint)

inline jint LibOrgBouncycastleCryptoDigestsSkeinEngine_get_PARAM_TYPE_OUTPUT(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_OUTPUT 63
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine, PARAM_TYPE_OUTPUT, jint)

inline JavaUtilHashtable *LibOrgBouncycastleCryptoDigestsSkeinEngine_get_INITIAL_STATES(void);
static JavaUtilHashtable *LibOrgBouncycastleCryptoDigestsSkeinEngine_INITIAL_STATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoDigestsSkeinEngine, INITIAL_STATES, JavaUtilHashtable *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(jint blockSize, jint outputSize, IOSLongArray *state);

__attribute__((unused)) static JavaLangInteger *LibOrgBouncycastleCryptoDigestsSkeinEngine_variantIdentifierWithInt_withInt_(jint blockSizeBytes, jint outputSizeBytes);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_copyInWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, LibOrgBouncycastleCryptoDigestsSkeinEngine *engine);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleCryptoDigestsSkeinEngine_cloneWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_withLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(IOSObjectArray *data, IOSObjectArray *existing);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_initParamsWithJavaUtilHashtable_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, JavaUtilHashtable *parameters);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_sortWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(IOSObjectArray *params);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_createInitialState(LibOrgBouncycastleCryptoDigestsSkeinEngine *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiCompleteWithInt_withByteArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, jint type, IOSByteArray *value);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiInitWithInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, jint type);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiFinal(LibOrgBouncycastleCryptoDigestsSkeinEngine *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_checkInitialised(LibOrgBouncycastleCryptoDigestsSkeinEngine *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_outputWithLong_withByteArray_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, jlong outputSequence, IOSByteArray *outArg, jint outOff, jint outputBytes);

@interface LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration : NSObject {
 @public
  IOSByteArray *bytes_;
}

- (instancetype)initWithLong:(jlong)outputSizeBits;

- (IOSByteArray *)getBytes;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration, bytes_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration_initWithLong_(LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration *self, jlong outputSizeBits);

__attribute__((unused)) static LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration_initWithLong_(jlong outputSizeBits) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration_initWithLong_(jlong outputSizeBits);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration)

@interface LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter () {
 @public
  jint type_;
  IOSByteArray *value_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter, value_, IOSByteArray *)

@interface LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak : NSObject {
 @public
  IOSLongArray *tweak_;
  jboolean extendedPosition_;
}

- (instancetype)init;

- (void)resetWithLibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak:(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *)tweak;

- (void)reset;

- (void)setTypeWithInt:(jint)type;

- (jint)getType;

- (void)setFirstWithBoolean:(jboolean)first;

- (jboolean)isFirst;

- (void)setFinalWithBoolean:(jboolean)last;

- (jboolean)isFinal;

- (void)advancePositionWithInt:(jint)advance;

- (IOSLongArray *)getWords;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak, tweak_, IOSLongArray *)

inline jlong LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_get_LOW_RANGE(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_LOW_RANGE 9223372034707292160LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak, LOW_RANGE, jlong)

inline jlong LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_get_T1_FINAL(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FINAL ((jlong) 0x8000000000000000LL)
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak, T1_FINAL, jlong)

inline jlong LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_get_T1_FIRST(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FIRST 4611686018427387904LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak, T1_FIRST, jlong)

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_init(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak)

@interface LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI : NSObject {
 @public
  LibOrgBouncycastleCryptoDigestsSkeinEngine *this$0_;
  LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *tweak_;
  IOSByteArray *currentBlock_;
  jint currentOffset_;
  IOSLongArray *message_;
}

- (instancetype)initWithLibOrgBouncycastleCryptoDigestsSkeinEngine:(LibOrgBouncycastleCryptoDigestsSkeinEngine *)outer$
                                                           withInt:(jint)blockSize;

- (void)resetWithLibOrgBouncycastleCryptoDigestsSkeinEngine_UBI:(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *)ubi;

- (void)resetWithInt:(jint)type;

- (void)updateWithByteArray:(IOSByteArray *)value
                    withInt:(jint)offset
                    withInt:(jint)len
              withLongArray:(IOSLongArray *)output;

- (void)processBlockWithLongArray:(IOSLongArray *)output;

- (void)doFinalWithLongArray:(IOSLongArray *)output;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI, tweak_, LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI, currentBlock_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI, message_, IOSLongArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *self, LibOrgBouncycastleCryptoDigestsSkeinEngine *outer$, jint blockSize);

__attribute__((unused)) static LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *outer$, jint blockSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *outer$, jint blockSize);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_processBlockWithLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *self, IOSLongArray *output);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoDigestsSkeinEngine)

@implementation LibOrgBouncycastleCryptoDigestsSkeinEngine

+ (jint)SKEIN_256 {
  return LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_256;
}

+ (jint)SKEIN_512 {
  return LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_512;
}

+ (jint)SKEIN_1024 {
  return LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_1024;
}

+ (void)initialStateWithInt:(jint)blockSize
                    withInt:(jint)outputSize
              withLongArray:(IOSLongArray *)state {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(blockSize, outputSize, state);
}

+ (JavaLangInteger *)variantIdentifierWithInt:(jint)blockSizeBytes
                                      withInt:(jint)outputSizeBytes {
  return LibOrgBouncycastleCryptoDigestsSkeinEngine_variantIdentifierWithInt_withInt_(blockSizeBytes, outputSizeBytes);
}

- (instancetype)initWithInt:(jint)blockSizeBits
                    withInt:(jint)outputSizeBits {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(self, blockSizeBits, outputSizeBits);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoDigestsSkeinEngine:(LibOrgBouncycastleCryptoDigestsSkeinEngine *)engine {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(self, engine);
  return self;
}

- (void)copyInWithLibOrgBouncycastleCryptoDigestsSkeinEngine:(LibOrgBouncycastleCryptoDigestsSkeinEngine *)engine {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_copyInWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(self, engine);
}

+ (IOSObjectArray *)cloneWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:(IOSObjectArray *)data
                         withLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:(IOSObjectArray *)existing {
  return LibOrgBouncycastleCryptoDigestsSkeinEngine_cloneWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_withLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(data, existing);
}

- (id<LibOrgBouncycastleUtilMemoable>)copy__ {
  return new_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(self);
}

- (void)resetWithLibOrgBouncycastleUtilMemoable:(id<LibOrgBouncycastleUtilMemoable>)other {
  LibOrgBouncycastleCryptoDigestsSkeinEngine *s = (LibOrgBouncycastleCryptoDigestsSkeinEngine *) cast_chk(other, [LibOrgBouncycastleCryptoDigestsSkeinEngine class]);
  if (([self getBlockSize] != [((LibOrgBouncycastleCryptoDigestsSkeinEngine *) nil_chk(s)) getBlockSize]) || (outputSizeBytes_ != s->outputSizeBytes_)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incompatible parameters in provided SkeinEngine.");
  }
  LibOrgBouncycastleCryptoDigestsSkeinEngine_copyInWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(self, s);
}

- (jint)getOutputSize {
  return outputSizeBytes_;
}

- (jint)getBlockSize {
  return [((LibOrgBouncycastleCryptoEnginesThreefishEngine *) nil_chk(threefish_)) getBlockSize];
}

- (void)init__WithLibOrgBouncycastleCryptoParamsSkeinParameters:(LibOrgBouncycastleCryptoParamsSkeinParameters *)params {
  self->chain_ = nil;
  self->key_ = nil;
  self->preMessageParameters_ = nil;
  self->postMessageParameters_ = nil;
  if (params != nil) {
    IOSByteArray *key = [params getKey];
    if (((IOSByteArray *) nil_chk(key))->size_ < 16) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Skein key must be at least 128 bits.");
    }
    LibOrgBouncycastleCryptoDigestsSkeinEngine_initParamsWithJavaUtilHashtable_(self, [params getParameters]);
  }
  LibOrgBouncycastleCryptoDigestsSkeinEngine_createInitialState(self);
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiInitWithInt_(self, LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_MESSAGE);
}

- (void)initParamsWithJavaUtilHashtable:(JavaUtilHashtable *)parameters {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initParamsWithJavaUtilHashtable_(self, parameters);
}

+ (void)sortWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:(IOSObjectArray *)params {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_sortWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(params);
}

- (void)createInitialState {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_createInitialState(self);
}

- (void)reset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(initialState_, 0, chain_, 0, ((IOSLongArray *) nil_chk(chain_))->size_);
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiInitWithInt_(self, LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_MESSAGE);
}

- (void)ubiCompleteWithInt:(jint)type
             withByteArray:(IOSByteArray *)value {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiCompleteWithInt_withByteArray_(self, type, value);
}

- (void)ubiInitWithInt:(jint)type {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiInitWithInt_(self, type);
}

- (void)ubiFinal {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiFinal(self);
}

- (void)checkInitialised {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_checkInitialised(self);
}

- (void)updateWithByte:(jbyte)inArg {
  *IOSByteArray_GetRef(nil_chk(singleByte_), 0) = inArg;
  [self updateWithByteArray:singleByte_ withInt:0 withInt:1];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_checkInitialised(self);
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *) nil_chk(ubi_)) updateWithByteArray:inArg withInt:inOff withInt:len withLongArray:chain_];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_checkInitialised(self);
  if (((IOSByteArray *) nil_chk(outArg))->size_ < (outOff + outputSizeBytes_)) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"Output buffer is too short to hold output");
  }
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiFinal(self);
  if (postMessageParameters_ != nil) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(postMessageParameters_))->size_; i++) {
      LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *param = IOSObjectArray_Get(postMessageParameters_, i);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiCompleteWithInt_withByteArray_(self, [((LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *) nil_chk(param)) getType], [param getValue]);
    }
  }
  jint blockSize = [self getBlockSize];
  jint blocksRequired = ((outputSizeBytes_ + blockSize - 1) / blockSize);
  for (jint i = 0; i < blocksRequired; i++) {
    jint toWrite = JavaLangMath_minWithInt_withInt_(blockSize, outputSizeBytes_ - (i * blockSize));
    LibOrgBouncycastleCryptoDigestsSkeinEngine_outputWithLong_withByteArray_withInt_withInt_(self, i, outArg, outOff + (i * blockSize), toWrite);
  }
  [self reset];
  return outputSizeBytes_;
}

- (void)outputWithLong:(jlong)outputSequence
         withByteArray:(IOSByteArray *)outArg
               withInt:(jint)outOff
               withInt:(jint)outputBytes {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_outputWithLong_withByteArray_withInt_withInt_(self, outputSequence, outArg, outOff, outputBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter;", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilMemoable;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initialStateWithInt:withInt:withLongArray:);
  methods[1].selector = @selector(variantIdentifierWithInt:withInt:);
  methods[2].selector = @selector(initWithInt:withInt:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleCryptoDigestsSkeinEngine:);
  methods[4].selector = @selector(copyInWithLibOrgBouncycastleCryptoDigestsSkeinEngine:);
  methods[5].selector = @selector(cloneWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:withLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:);
  methods[6].selector = @selector(copy__);
  methods[7].selector = @selector(resetWithLibOrgBouncycastleUtilMemoable:);
  methods[8].selector = @selector(getOutputSize);
  methods[9].selector = @selector(getBlockSize);
  methods[10].selector = @selector(init__WithLibOrgBouncycastleCryptoParamsSkeinParameters:);
  methods[11].selector = @selector(initParamsWithJavaUtilHashtable:);
  methods[12].selector = @selector(sortWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray:);
  methods[13].selector = @selector(createInitialState);
  methods[14].selector = @selector(reset);
  methods[15].selector = @selector(ubiCompleteWithInt:withByteArray:);
  methods[16].selector = @selector(ubiInitWithInt:);
  methods[17].selector = @selector(ubiFinal);
  methods[18].selector = @selector(checkInitialised);
  methods[19].selector = @selector(updateWithByte:);
  methods[20].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[21].selector = @selector(doFinalWithByteArray:withInt:);
  methods[22].selector = @selector(outputWithLong:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SKEIN_256", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_256, 0x19, -1, -1, -1, -1 },
    { "SKEIN_512", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_512, 0x19, -1, -1, -1, -1 },
    { "SKEIN_1024", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_1024, 0x19, -1, -1, -1, -1 },
    { "PARAM_TYPE_KEY", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_KEY, 0x1a, -1, -1, -1, -1 },
    { "PARAM_TYPE_CONFIG", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_CONFIG, 0x1a, -1, -1, -1, -1 },
    { "PARAM_TYPE_MESSAGE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_MESSAGE, 0x1a, -1, -1, -1, -1 },
    { "PARAM_TYPE_OUTPUT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_OUTPUT, 0x1a, -1, -1, -1, -1 },
    { "INITIAL_STATES", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "threefish_", "LLibOrgBouncycastleCryptoEnginesThreefishEngine;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "outputSizeBytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "chain_", "[J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialState_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preMessageParameters_", "[LLibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postMessageParameters_", "[LLibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ubi_", "LLibOrgBouncycastleCryptoDigestsSkeinEngine_UBI;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "singleByte_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialState", "II[J", "variantIdentifier", "II", "LLibOrgBouncycastleCryptoDigestsSkeinEngine;", "copyIn", "clone", "[LLibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter;[LLibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter;", "copy", "reset", "LLibOrgBouncycastleUtilMemoable;", "init", "LLibOrgBouncycastleCryptoParamsSkeinParameters;", "initParams", "LJavaUtilHashtable;", "sort", "[LLibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter;", "ubiComplete", "I[B", "ubiInit", "I", "update", "B", "[BII", "doFinal", "[BI", "output", "J[BII", &LibOrgBouncycastleCryptoDigestsSkeinEngine_INITIAL_STATES, "LLibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration;LLibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter;LLibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak;LLibOrgBouncycastleCryptoDigestsSkeinEngine_UBI;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsSkeinEngine = { "SkeinEngine", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 23, 17, -1, 29, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsSkeinEngine;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoDigestsSkeinEngine class]) {
    LibOrgBouncycastleCryptoDigestsSkeinEngine_INITIAL_STATES = new_JavaUtilHashtable_init();
    {
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_256, 128, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0xe1111906964d7260LL, (jlong) 0x883daaa77c8d811cLL, (jlong) 0x10080df491960f7aLL, (jlong) 0xccf7dde5b45bc1c2LL } count:4]);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_256, 160, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0x1420231472825e98LL, (jlong) 0x2ac4e9a25a77e590LL, (jlong) 0xd47a58568838d63eLL, (jlong) 0x2dd2e4968586ab7dLL } count:4]);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_256, 224, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0xc6098a8c9ae5ea0bLL, (jlong) 0x876d568608c5191cLL, (jlong) 0x99cb88d7d7f53884LL, (jlong) 0x384bddb1aeddb5deLL } count:4]);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_256, 256, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0xfc9da860d048b449LL, (jlong) 0x2fca66479fa7d833LL, (jlong) 0xb33bc3896656840fLL, (jlong) 0x6a54e920fde8da69LL } count:4]);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_512, 128, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0xa8bc7bf36fbf9f52LL, (jlong) 0x1e9872cebd1af0aaLL, (jlong) 0x309b1790b32190d3LL, (jlong) 0xbcfbb8543f94805cLL, (jlong) 0x0da61bcd6e31b11bLL, (jlong) 0x1a18ebead46a32e3LL, (jlong) 0xa2cc5b18ce84aa82LL, (jlong) 0x6982ab289d46982dLL } count:8]);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_512, 160, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0x28b81a2ae013bd91LL, (jlong) 0xc2f11668b5bdf78fLL, (jlong) 0x1760d8f3f6a56f12LL, (jlong) 0x4fb747588239904fLL, (jlong) 0x21ede07f7eaf5056LL, (jlong) 0xd908922e63ed70b8LL, (jlong) 0xb8ec76ffeccb52faLL, (jlong) 0x01a47bb8a3f27a6eLL } count:8]);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_512, 224, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0xccd0616248677224LL, (jlong) 0xcba65cf3a92339efLL, (jlong) 0x8ccd69d652ff4b64LL, (jlong) 0x398aed7b3ab890b4LL, (jlong) 0x0f59d1b1457d2bd0LL, (jlong) 0x6776fe6575d4eb3dLL, (jlong) 0x99fbc70e997413e9LL, (jlong) 0x9e2cfccfe1c41ef7LL } count:8]);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_512, 384, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0xa3f6c6bf3a75ef5fLL, (jlong) 0xb0fef9ccfd84faa4LL, (jlong) 0x9d77dd663d770cfeLL, (jlong) 0xd798cbf3b468fddaLL, (jlong) 0x1bc4a6668a0e4465LL, (jlong) 0x7ed7d434e5807407LL, (jlong) 0x548fc1acd4ec44d6LL, (jlong) 0x266e17546aa18ff8LL } count:8]);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_512, 512, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0x4903adff749c51ceLL, (jlong) 0x0d95de399746df03LL, (jlong) 0x8fd1934127c79bceLL, (jlong) 0x9a255629ff352cb1LL, (jlong) 0x5db62599df6ca7b0LL, (jlong) 0xeabe394ca9d5c3f4LL, (jlong) 0x991112c71a75b523LL, (jlong) 0xae18a40b660fcc33LL } count:8]);
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoDigestsSkeinEngine)
  }
}

@end

void LibOrgBouncycastleCryptoDigestsSkeinEngine_initialStateWithInt_withInt_withLongArray_(jint blockSize, jint outputSize, IOSLongArray *state) {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoDigestsSkeinEngine_INITIAL_STATES)) putWithId:LibOrgBouncycastleCryptoDigestsSkeinEngine_variantIdentifierWithInt_withInt_(blockSize / 8, outputSize / 8) withId:state];
}

JavaLangInteger *LibOrgBouncycastleCryptoDigestsSkeinEngine_variantIdentifierWithInt_withInt_(jint blockSizeBytes, jint outputSizeBytes) {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initialize();
  return LibOrgBouncycastleUtilIntegers_valueOfWithInt_((JreLShift32(outputSizeBytes, 16)) | blockSizeBytes);
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, jint blockSizeBits, jint outputSizeBits) {
  NSObject_init(self);
  self->singleByte_ = [IOSByteArray newArrayWithLength:1];
  if (outputSizeBits % 8 != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Output size must be a multiple of 8 bits. :", outputSizeBits));
  }
  self->outputSizeBytes_ = outputSizeBits / 8;
  self->threefish_ = new_LibOrgBouncycastleCryptoEnginesThreefishEngine_initWithInt_(blockSizeBits);
  self->ubi_ = new_LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_(self, [self->threefish_ getBlockSize]);
}

LibOrgBouncycastleCryptoDigestsSkeinEngine *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(jint blockSizeBits, jint outputSizeBits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine, initWithInt_withInt_, blockSizeBits, outputSizeBits)
}

LibOrgBouncycastleCryptoDigestsSkeinEngine *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(jint blockSizeBits, jint outputSizeBits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine, initWithInt_withInt_, blockSizeBits, outputSizeBits)
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, LibOrgBouncycastleCryptoDigestsSkeinEngine *engine) {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(self, [((LibOrgBouncycastleCryptoDigestsSkeinEngine *) nil_chk(engine)) getBlockSize] * 8, [engine getOutputSize] * 8);
  LibOrgBouncycastleCryptoDigestsSkeinEngine_copyInWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(self, engine);
}

LibOrgBouncycastleCryptoDigestsSkeinEngine *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(LibOrgBouncycastleCryptoDigestsSkeinEngine *engine) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine, initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_, engine)
}

LibOrgBouncycastleCryptoDigestsSkeinEngine *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(LibOrgBouncycastleCryptoDigestsSkeinEngine *engine) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine, initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_, engine)
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_copyInWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, LibOrgBouncycastleCryptoDigestsSkeinEngine *engine) {
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *) nil_chk(self->ubi_)) resetWithLibOrgBouncycastleCryptoDigestsSkeinEngine_UBI:((LibOrgBouncycastleCryptoDigestsSkeinEngine *) nil_chk(engine))->ubi_];
  self->chain_ = LibOrgBouncycastleUtilArrays_cloneWithLongArray_withLongArray_(engine->chain_, self->chain_);
  self->initialState_ = LibOrgBouncycastleUtilArrays_cloneWithLongArray_withLongArray_(engine->initialState_, self->initialState_);
  self->key_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_withByteArray_(engine->key_, self->key_);
  self->preMessageParameters_ = LibOrgBouncycastleCryptoDigestsSkeinEngine_cloneWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_withLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(engine->preMessageParameters_, self->preMessageParameters_);
  self->postMessageParameters_ = LibOrgBouncycastleCryptoDigestsSkeinEngine_cloneWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_withLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(engine->postMessageParameters_, self->postMessageParameters_);
}

IOSObjectArray *LibOrgBouncycastleCryptoDigestsSkeinEngine_cloneWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_withLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(IOSObjectArray *data, IOSObjectArray *existing) {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initialize();
  if (data == nil) {
    return nil;
  }
  if ((existing == nil) || (((IOSObjectArray *) nil_chk(existing))->size_ != data->size_)) {
    existing = [IOSObjectArray newArrayWithLength:data->size_ type:LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_class_()];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, existing, 0, ((IOSObjectArray *) nil_chk(existing))->size_);
  return existing;
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_initParamsWithJavaUtilHashtable_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, JavaUtilHashtable *parameters) {
  id<JavaUtilEnumeration> keys = [((JavaUtilHashtable *) nil_chk(parameters)) keys];
  JavaUtilVector *pre = new_JavaUtilVector_init();
  JavaUtilVector *post = new_JavaUtilVector_init();
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    JavaLangInteger *type = (JavaLangInteger *) cast_chk([keys nextElement], [JavaLangInteger class]);
    IOSByteArray *value = (IOSByteArray *) cast_chk([parameters getWithId:type], [IOSByteArray class]);
    if ([((JavaLangInteger *) nil_chk(type)) intValue] == LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_KEY) {
      self->key_ = value;
    }
    else if ([type intValue] < LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_MESSAGE) {
      [pre addElementWithId:new_LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_([type intValue], value)];
    }
    else {
      [post addElementWithId:new_LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_([type intValue], value)];
    }
  }
  self->preMessageParameters_ = [IOSObjectArray newArrayWithLength:[pre size] type:LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_class_()];
  [pre copyIntoWithNSObjectArray:self->preMessageParameters_];
  LibOrgBouncycastleCryptoDigestsSkeinEngine_sortWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(self->preMessageParameters_);
  self->postMessageParameters_ = [IOSObjectArray newArrayWithLength:[post size] type:LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_class_()];
  [post copyIntoWithNSObjectArray:self->postMessageParameters_];
  LibOrgBouncycastleCryptoDigestsSkeinEngine_sortWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(self->postMessageParameters_);
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_sortWithLibOrgBouncycastleCryptoDigestsSkeinEngine_ParameterArray_(IOSObjectArray *params) {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_initialize();
  if (params == nil) {
    return;
  }
  for (jint i = 1; i < params->size_; i++) {
    LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *param = IOSObjectArray_Get(params, i);
    jint hole = i;
    while (hole > 0 && [((LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *) nil_chk(param)) getType] < [((LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *) nil_chk(IOSObjectArray_Get(params, hole - 1))) getType]) {
      (void) IOSObjectArray_Set(params, hole, IOSObjectArray_Get(params, hole - 1));
      hole = hole - 1;
    }
    (void) IOSObjectArray_Set(params, hole, param);
  }
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_createInitialState(LibOrgBouncycastleCryptoDigestsSkeinEngine *self) {
  IOSLongArray *precalc = (IOSLongArray *) cast_chk([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoDigestsSkeinEngine_INITIAL_STATES)) getWithId:LibOrgBouncycastleCryptoDigestsSkeinEngine_variantIdentifierWithInt_withInt_([self getBlockSize], [self getOutputSize])], [IOSLongArray class]);
  if ((self->key_ == nil) && (precalc != nil)) {
    self->chain_ = LibOrgBouncycastleUtilArrays_cloneWithLongArray_(precalc);
  }
  else {
    self->chain_ = [IOSLongArray newArrayWithLength:[self getBlockSize] / 8];
    if (self->key_ != nil) {
      LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiCompleteWithInt_withByteArray_(self, LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY, self->key_);
    }
    LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiCompleteWithInt_withByteArray_(self, LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_CONFIG, [new_LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration_initWithLong_(self->outputSizeBytes_ * 8) getBytes]);
  }
  if (self->preMessageParameters_ != nil) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->preMessageParameters_))->size_; i++) {
      LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *param = IOSObjectArray_Get(self->preMessageParameters_, i);
      LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiCompleteWithInt_withByteArray_(self, [((LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *) nil_chk(param)) getType], [param getValue]);
    }
  }
  self->initialState_ = LibOrgBouncycastleUtilArrays_cloneWithLongArray_(self->chain_);
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiCompleteWithInt_withByteArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, jint type, IOSByteArray *value) {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiInitWithInt_(self, type);
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *) nil_chk(self->ubi_)) updateWithByteArray:value withInt:0 withInt:((IOSByteArray *) nil_chk(value))->size_ withLongArray:self->chain_];
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiFinal(self);
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiInitWithInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, jint type) {
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *) nil_chk(self->ubi_)) resetWithInt:type];
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiFinal(LibOrgBouncycastleCryptoDigestsSkeinEngine *self) {
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *) nil_chk(self->ubi_)) doFinalWithLongArray:self->chain_];
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_checkInitialised(LibOrgBouncycastleCryptoDigestsSkeinEngine *self) {
  if (self->ubi_ == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Skein engine is not initialised.");
  }
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_outputWithLong_withByteArray_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, jlong outputSequence, IOSByteArray *outArg, jint outOff, jint outputBytes) {
  IOSByteArray *currentBytes = [IOSByteArray newArrayWithLength:8];
  LibOrgBouncycastleCryptoEnginesThreefishEngine_wordToBytesWithLong_withByteArray_withInt_(outputSequence, currentBytes, 0);
  IOSLongArray *outputWords = [IOSLongArray newArrayWithLength:((IOSLongArray *) nil_chk(self->chain_))->size_];
  LibOrgBouncycastleCryptoDigestsSkeinEngine_ubiInitWithInt_(self, LibOrgBouncycastleCryptoDigestsSkeinEngine_PARAM_TYPE_OUTPUT);
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *) nil_chk(self->ubi_)) updateWithByteArray:currentBytes withInt:0 withInt:currentBytes->size_ withLongArray:outputWords];
  [self->ubi_ doFinalWithLongArray:outputWords];
  jint wordsRequired = ((outputBytes + 8 - 1) / 8);
  for (jint i = 0; i < wordsRequired; i++) {
    jint toWrite = JavaLangMath_minWithInt_withInt_(8, outputBytes - (i * 8));
    if (toWrite == 8) {
      LibOrgBouncycastleCryptoEnginesThreefishEngine_wordToBytesWithLong_withByteArray_withInt_(IOSLongArray_Get(outputWords, i), outArg, outOff + (i * 8));
    }
    else {
      LibOrgBouncycastleCryptoEnginesThreefishEngine_wordToBytesWithLong_withByteArray_withInt_(IOSLongArray_Get(outputWords, i), currentBytes, 0);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(currentBytes, 0, outArg, outOff + (i * 8), toWrite);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsSkeinEngine)

@implementation LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration

- (instancetype)initWithLong:(jlong)outputSizeBits {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration_initWithLong_(self, outputSizeBits);
  return self;
}

- (IOSByteArray *)getBytes {
  return bytes_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(getBytes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "LLibOrgBouncycastleCryptoDigestsSkeinEngine;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration = { "Configuration", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration;
}

@end

void LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration_initWithLong_(LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration *self, jlong outputSizeBits) {
  NSObject_init(self);
  self->bytes_ = [IOSByteArray newArrayWithLength:32];
  *IOSByteArray_GetRef(self->bytes_, 0) = (jbyte) 'S';
  *IOSByteArray_GetRef(self->bytes_, 1) = (jbyte) 'H';
  *IOSByteArray_GetRef(self->bytes_, 2) = (jbyte) 'A';
  *IOSByteArray_GetRef(self->bytes_, 3) = (jbyte) '3';
  *IOSByteArray_GetRef(self->bytes_, 4) = 1;
  *IOSByteArray_GetRef(self->bytes_, 5) = 0;
  LibOrgBouncycastleCryptoEnginesThreefishEngine_wordToBytesWithLong_withByteArray_withInt_(outputSizeBits, self->bytes_, 8);
}

LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration_initWithLong_(jlong outputSizeBits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration, initWithLong_, outputSizeBits)
}

LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration_initWithLong_(jlong outputSizeBits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration, initWithLong_, outputSizeBits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsSkeinEngine_Configuration)

@implementation LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter

- (instancetype)initWithInt:(jint)type
              withByteArray:(IOSByteArray *)value {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_(self, type, value);
  return self;
}

- (jint)getType {
  return type_;
}

- (IOSByteArray *)getValue {
  return value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withByteArray:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(getValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "value_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[B", "LLibOrgBouncycastleCryptoDigestsSkeinEngine;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter = { "Parameter", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x9, 3, 2, 1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter;
}

@end

void LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *self, jint type, IOSByteArray *value) {
  NSObject_init(self);
  self->type_ = type;
  self->value_ = value;
}

LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_(jint type, IOSByteArray *value) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter, initWithInt_withByteArray_, type, value)
}

LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_(jint type, IOSByteArray *value) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter, initWithInt_withByteArray_, type, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter)

@implementation LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)resetWithLibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak:(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *)tweak {
  self->tweak_ = LibOrgBouncycastleUtilArrays_cloneWithLongArray_withLongArray_(((LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *) nil_chk(tweak))->tweak_, self->tweak_);
  self->extendedPosition_ = tweak->extendedPosition_;
}

- (void)reset {
  *IOSLongArray_GetRef(nil_chk(tweak_), 0) = 0;
  *IOSLongArray_GetRef(tweak_, 1) = 0;
  extendedPosition_ = false;
  [self setFirstWithBoolean:true];
}

- (void)setTypeWithInt:(jint)type {
  *IOSLongArray_GetRef(nil_chk(tweak_), 1) = (IOSLongArray_Get(tweak_, 1) & (jlong) 0xFFFFFFC000000000LL) | (JreLShift64((type & (jlong) 0x3FLL), 56));
}

- (jint)getType {
  return (jint) ((JreURShift64(IOSLongArray_Get(nil_chk(tweak_), 1), 56)) & (jlong) 0x3FLL);
}

- (void)setFirstWithBoolean:(jboolean)first {
  if (first) {
    *IOSLongArray_GetRef(nil_chk(tweak_), 1) |= LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FIRST;
  }
  else {
    *IOSLongArray_GetRef(nil_chk(tweak_), 1) &= ~LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FIRST;
  }
}

- (jboolean)isFirst {
  return ((IOSLongArray_Get(nil_chk(tweak_), 1) & LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FIRST) != 0);
}

- (void)setFinalWithBoolean:(jboolean)last {
  if (last) {
    *IOSLongArray_GetRef(nil_chk(tweak_), 1) |= LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FINAL;
  }
  else {
    *IOSLongArray_GetRef(nil_chk(tweak_), 1) &= ~LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FINAL;
  }
}

- (jboolean)isFinal {
  return ((IOSLongArray_Get(nil_chk(tweak_), 1) & LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FINAL) != 0);
}

- (void)advancePositionWithInt:(jint)advance {
  if (extendedPosition_) {
    IOSLongArray *parts = [IOSLongArray newArrayWithLength:3];
    *IOSLongArray_GetRef(parts, 0) = IOSLongArray_Get(nil_chk(tweak_), 0) & (jlong) 0xFFFFFFFFLL;
    *IOSLongArray_GetRef(parts, 1) = (JreURShift64(IOSLongArray_Get(tweak_, 0), 32)) & (jlong) 0xFFFFFFFFLL;
    *IOSLongArray_GetRef(parts, 2) = IOSLongArray_Get(tweak_, 1) & (jlong) 0xFFFFFFFFLL;
    jlong carry = advance;
    for (jint i = 0; i < parts->size_; i++) {
      carry += IOSLongArray_Get(parts, i);
      *IOSLongArray_GetRef(parts, i) = carry;
      JreURShiftAssignLong(&carry, 32);
    }
    *IOSLongArray_GetRef(tweak_, 0) = (JreLShift64((IOSLongArray_Get(parts, 1) & (jlong) 0xFFFFFFFFLL), 32)) | (IOSLongArray_Get(parts, 0) & (jlong) 0xFFFFFFFFLL);
    *IOSLongArray_GetRef(tweak_, 1) = (IOSLongArray_Get(tweak_, 1) & (jlong) 0xFFFFFFFF00000000LL) | (IOSLongArray_Get(parts, 2) & (jlong) 0xFFFFFFFFLL);
  }
  else {
    jlong position = IOSLongArray_Get(nil_chk(tweak_), 0);
    position += advance;
    *IOSLongArray_GetRef(tweak_, 0) = position;
    if (position > LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_LOW_RANGE) {
      extendedPosition_ = true;
    }
  }
}

- (IOSLongArray *)getWords {
  return tweak_;
}

- (NSString *)description {
  return JreStrcat("I$Z$Z", [self getType], @" first: ", [self isFirst], @", final: ", [self isFinal]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "[J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(resetWithLibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(setTypeWithInt:);
  methods[4].selector = @selector(getType);
  methods[5].selector = @selector(setFirstWithBoolean:);
  methods[6].selector = @selector(isFirst);
  methods[7].selector = @selector(setFinalWithBoolean:);
  methods[8].selector = @selector(isFinal);
  methods[9].selector = @selector(advancePositionWithInt:);
  methods[10].selector = @selector(getWords);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOW_RANGE", "J", .constantValue.asLong = LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_LOW_RANGE, 0x1a, -1, -1, -1, -1 },
    { "T1_FINAL", "J", .constantValue.asLong = LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FINAL, 0x1a, -1, -1, -1, -1 },
    { "T1_FIRST", "J", .constantValue.asLong = LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_T1_FIRST, 0x1a, -1, -1, -1, -1 },
    { "tweak_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extendedPosition_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "reset", "LLibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak;", "setType", "I", "setFirst", "Z", "setFinal", "advancePosition", "toString", "LLibOrgBouncycastleCryptoDigestsSkeinEngine;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak = { "UbiTweak", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0xa, 12, 5, 9, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak;
}

@end

void LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_init(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *self) {
  NSObject_init(self);
  self->tweak_ = [IOSLongArray newArrayWithLength:2];
  [self reset];
}

LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak, init)
}

LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak)

@implementation LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI

- (instancetype)initWithLibOrgBouncycastleCryptoDigestsSkeinEngine:(LibOrgBouncycastleCryptoDigestsSkeinEngine *)outer$
                                                           withInt:(jint)blockSize {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_(self, outer$, blockSize);
  return self;
}

- (void)resetWithLibOrgBouncycastleCryptoDigestsSkeinEngine_UBI:(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *)ubi {
  currentBlock_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_withByteArray_(((LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *) nil_chk(ubi))->currentBlock_, currentBlock_);
  currentOffset_ = ubi->currentOffset_;
  message_ = LibOrgBouncycastleUtilArrays_cloneWithLongArray_withLongArray_(ubi->message_, self->message_);
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *) nil_chk(tweak_)) resetWithLibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak:ubi->tweak_];
}

- (void)resetWithInt:(jint)type {
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *) nil_chk(tweak_)) reset];
  [tweak_ setTypeWithInt:type];
  currentOffset_ = 0;
}

- (void)updateWithByteArray:(IOSByteArray *)value
                    withInt:(jint)offset
                    withInt:(jint)len
              withLongArray:(IOSLongArray *)output {
  jint copied = 0;
  while (len > copied) {
    if (currentOffset_ == ((IOSByteArray *) nil_chk(currentBlock_))->size_) {
      LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_processBlockWithLongArray_(self, output);
      [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *) nil_chk(tweak_)) setFirstWithBoolean:false];
      currentOffset_ = 0;
    }
    jint toCopy = JavaLangMath_minWithInt_withInt_((len - copied), ((IOSByteArray *) nil_chk(currentBlock_))->size_ - currentOffset_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(value, offset + copied, currentBlock_, currentOffset_, toCopy);
    copied += toCopy;
    currentOffset_ += toCopy;
    [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *) nil_chk(tweak_)) advancePositionWithInt:toCopy];
  }
}

- (void)processBlockWithLongArray:(IOSLongArray *)output {
  LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_processBlockWithLongArray_(self, output);
}

- (void)doFinalWithLongArray:(IOSLongArray *)output {
  for (jint i = currentOffset_; i < ((IOSByteArray *) nil_chk(currentBlock_))->size_; i++) {
    *IOSByteArray_GetRef(currentBlock_, i) = 0;
  }
  [((LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *) nil_chk(tweak_)) setFinalWithBoolean:true];
  LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_processBlockWithLongArray_(self, output);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigestsSkeinEngine:withInt:);
  methods[1].selector = @selector(resetWithLibOrgBouncycastleCryptoDigestsSkeinEngine_UBI:);
  methods[2].selector = @selector(resetWithInt:);
  methods[3].selector = @selector(updateWithByteArray:withInt:withInt:withLongArray:);
  methods[4].selector = @selector(processBlockWithLongArray:);
  methods[5].selector = @selector(doFinalWithLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleCryptoDigestsSkeinEngine;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tweak_", "LLibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentBlock_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "message_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "reset", "LLibOrgBouncycastleCryptoDigestsSkeinEngine_UBI;", "update", "[BII[J", "processBlock", "[J", "doFinal", "LLibOrgBouncycastleCryptoDigestsSkeinEngine;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI = { "UBI", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x2, 6, 5, 8, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI;
}

@end

void LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *self, LibOrgBouncycastleCryptoDigestsSkeinEngine *outer$, jint blockSize) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->tweak_ = new_LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak_init();
  self->currentBlock_ = [IOSByteArray newArrayWithLength:blockSize];
  self->message_ = [IOSLongArray newArrayWithLength:self->currentBlock_->size_ / 8];
}

LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *outer$, jint blockSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI, initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_, outer$, blockSize)
}

LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *outer$, jint blockSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI, initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_withInt_, outer$, blockSize)
}

void LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI_processBlockWithLongArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI *self, IOSLongArray *output) {
  [((LibOrgBouncycastleCryptoEnginesThreefishEngine *) nil_chk(self->this$0_->threefish_)) init__WithBoolean:true withLongArray:self->this$0_->chain_ withLongArray:[((LibOrgBouncycastleCryptoDigestsSkeinEngine_UbiTweak *) nil_chk(self->tweak_)) getWords]];
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(self->message_))->size_; i++) {
    *IOSLongArray_GetRef(self->message_, i) = LibOrgBouncycastleCryptoEnginesThreefishEngine_bytesToWordWithByteArray_withInt_(self->currentBlock_, i * 8);
  }
  [self->this$0_->threefish_ processBlockWithLongArray:self->message_ withLongArray:output];
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(output))->size_; i++) {
    *IOSLongArray_GetRef(output, i) ^= IOSLongArray_Get(nil_chk(self->message_), i);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsSkeinEngine_UBI)
