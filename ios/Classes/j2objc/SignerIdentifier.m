//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cms/SignerIdentifier.java
//

#include "ASN1Encodable.h"
#include "ASN1Object.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1TaggedObject.h"
#include "Asn1CmsIssuerAndSerialNumber.h"
#include "DERTaggedObject.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "SignerIdentifier.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleAsn1CmsSignerIdentifier () {
 @public
  id<LibOrgBouncycastleAsn1ASN1Encodable> id__;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmsSignerIdentifier, id__, id<LibOrgBouncycastleAsn1ASN1Encodable>)

@implementation LibOrgBouncycastleAsn1CmsSignerIdentifier

- (instancetype)initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber:(LibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber *)id_ {
  LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber_(self, id_);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1OctetString:(LibOrgBouncycastleAsn1ASN1OctetString *)id_ {
  LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1OctetString_(self, id_);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Primitive:(LibOrgBouncycastleAsn1ASN1Primitive *)id_ {
  LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1Primitive_(self, id_);
  return self;
}

+ (LibOrgBouncycastleAsn1CmsSignerIdentifier *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1CmsSignerIdentifier_getInstanceWithId_(o);
}

- (jboolean)isTagged {
  return ([id__ isKindOfClass:[LibOrgBouncycastleAsn1ASN1TaggedObject class]]);
}

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getId {
  if ([id__ isKindOfClass:[LibOrgBouncycastleAsn1ASN1TaggedObject class]]) {
    return LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_((LibOrgBouncycastleAsn1ASN1TaggedObject *) id__, false);
  }
  return id__;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return [((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(id__)) toASN1Primitive];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CmsSignerIdentifier;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Encodable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1OctetString:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Primitive:);
  methods[3].selector = @selector(getInstanceWithId:);
  methods[4].selector = @selector(isTagged);
  methods[5].selector = @selector(getId);
  methods[6].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "LLibOrgBouncycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x2, 5, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber;", "LLibOrgBouncycastleAsn1ASN1OctetString;", "LLibOrgBouncycastleAsn1ASN1Primitive;", "getInstance", "LNSObject;", "id" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1CmsSignerIdentifier = { "SignerIdentifier", "lib.org.bouncycastle.asn1.cms", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1CmsSignerIdentifier;
}

@end

void LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber_(LibOrgBouncycastleAsn1CmsSignerIdentifier *self, LibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber *id_) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->id__ = id_;
}

LibOrgBouncycastleAsn1CmsSignerIdentifier *new_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber_(LibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber *id_) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmsSignerIdentifier, initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber_, id_)
}

LibOrgBouncycastleAsn1CmsSignerIdentifier *create_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber_(LibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber *id_) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmsSignerIdentifier, initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber_, id_)
}

void LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1CmsSignerIdentifier *self, LibOrgBouncycastleAsn1ASN1OctetString *id_) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->id__ = new_LibOrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(false, 0, id_);
}

LibOrgBouncycastleAsn1CmsSignerIdentifier *new_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1ASN1OctetString *id_) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmsSignerIdentifier, initWithLibOrgBouncycastleAsn1ASN1OctetString_, id_)
}

LibOrgBouncycastleAsn1CmsSignerIdentifier *create_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1ASN1OctetString *id_) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmsSignerIdentifier, initWithLibOrgBouncycastleAsn1ASN1OctetString_, id_)
}

void LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1Primitive_(LibOrgBouncycastleAsn1CmsSignerIdentifier *self, LibOrgBouncycastleAsn1ASN1Primitive *id_) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->id__ = id_;
}

LibOrgBouncycastleAsn1CmsSignerIdentifier *new_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1Primitive_(LibOrgBouncycastleAsn1ASN1Primitive *id_) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmsSignerIdentifier, initWithLibOrgBouncycastleAsn1ASN1Primitive_, id_)
}

LibOrgBouncycastleAsn1CmsSignerIdentifier *create_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1Primitive_(LibOrgBouncycastleAsn1ASN1Primitive *id_) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmsSignerIdentifier, initWithLibOrgBouncycastleAsn1ASN1Primitive_, id_)
}

LibOrgBouncycastleAsn1CmsSignerIdentifier *LibOrgBouncycastleAsn1CmsSignerIdentifier_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1CmsSignerIdentifier_initialize();
  if (o == nil || [o isKindOfClass:[LibOrgBouncycastleAsn1CmsSignerIdentifier class]]) {
    return (LibOrgBouncycastleAsn1CmsSignerIdentifier *) cast_chk(o, [LibOrgBouncycastleAsn1CmsSignerIdentifier class]);
  }
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber class]]) {
    return new_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber_((LibOrgBouncycastleAsn1CmsAsn1CmsIssuerAndSerialNumber *) o);
  }
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1ASN1OctetString class]]) {
    return new_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1OctetString_((LibOrgBouncycastleAsn1ASN1OctetString *) o);
  }
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1ASN1Primitive class]]) {
    return new_LibOrgBouncycastleAsn1CmsSignerIdentifier_initWithLibOrgBouncycastleAsn1ASN1Primitive_((LibOrgBouncycastleAsn1ASN1Primitive *) o);
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal object in SignerIdentifier: ", [[o java_getClass] getName]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1CmsSignerIdentifier)
