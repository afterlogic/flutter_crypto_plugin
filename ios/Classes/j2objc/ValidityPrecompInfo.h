//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/ValidityPrecompInfo.java
//

#ifndef ValidityPrecompInfo_H
#define ValidityPrecompInfo_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PreCompInfo.h"

@interface LibOrgBouncycastleMathEcValidityPrecompInfo : NSObject < LibOrgBouncycastleMathEcPreCompInfo >
@property (readonly, copy, class) NSString *PRECOMP_NAME NS_SWIFT_NAME(PRECOMP_NAME);

+ (NSString *)PRECOMP_NAME;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (jboolean)hasCurveEquationPassed;

- (jboolean)hasFailed;

- (jboolean)hasOrderPassed;

- (void)reportCurveEquationPassed;

- (void)reportFailed;

- (void)reportOrderPassed;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcValidityPrecompInfo)

inline NSString *LibOrgBouncycastleMathEcValidityPrecompInfo_get_PRECOMP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleMathEcValidityPrecompInfo_PRECOMP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcValidityPrecompInfo, PRECOMP_NAME, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcValidityPrecompInfo_init(LibOrgBouncycastleMathEcValidityPrecompInfo *self);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcValidityPrecompInfo *new_LibOrgBouncycastleMathEcValidityPrecompInfo_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcValidityPrecompInfo *create_LibOrgBouncycastleMathEcValidityPrecompInfo_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcValidityPrecompInfo)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ValidityPrecompInfo_H
