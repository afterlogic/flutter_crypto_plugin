//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/util/CipherSpiExt.java
//

#ifndef CipherSpiExt_H
#define CipherSpiExt_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "javax/crypto/CipherSpi.h"

@class IOSByteArray;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

@interface LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt : JavaxCryptoCipherSpi {
 @public
  jint opMode_;
}
@property (readonly, class) jint ENCRYPT_MODE NS_SWIFT_NAME(ENCRYPT_MODE);
@property (readonly, class) jint DECRYPT_MODE NS_SWIFT_NAME(DECRYPT_MODE);

+ (jint)ENCRYPT_MODE;

+ (jint)DECRYPT_MODE;

#pragma mark Public

- (instancetype __nonnull)init;

- (IOSByteArray *)doFinal;

- (IOSByteArray *)doFinalWithByteArray:(IOSByteArray *)input;

- (IOSByteArray *)doFinalWithByteArray:(IOSByteArray *)input
                               withInt:(jint)inOff
                               withInt:(jint)inLen;

- (jint)doFinalWithByteArray:(IOSByteArray *)input
                     withInt:(jint)inOff
                     withInt:(jint)inLen
               withByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff;

- (jint)getBlockSize;

- (IOSByteArray *)getIV;

- (jint)getKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (NSString *)getName;

- (jint)getOutputSizeWithInt:(jint)inputLen;

- (id<JavaSecuritySpecAlgorithmParameterSpec>)getParameters;

- (void)initDecryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)cipherParams OBJC_METHOD_FAMILY_NONE;

- (void)initEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)cipherParams
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)updateWithByteArray:(IOSByteArray *)input;

- (IOSByteArray *)updateWithByteArray:(IOSByteArray *)input
                              withInt:(jint)inOff
                              withInt:(jint)inLen;

- (jint)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)inLen
              withByteArray:(IOSByteArray *)output
                    withInt:(jint)outOff;

#pragma mark Protected

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inOff
                                     withInt:(jint)inLen;

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inOff
                           withInt:(jint)inLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outOff;

- (jint)engineGetBlockSize;

- (IOSByteArray *)engineGetIV;

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (jint)engineGetOutputSizeWithInt:(jint)inLen;

- (JavaSecurityAlgorithmParameters *)engineGetParameters;

- (void)engineInitWithInt:(jint)opMode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)algParams
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opMode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)javaRand;

- (void)engineInitWithInt:(jint)opMode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineSetModeWithNSString:(NSString *)modeName;

- (void)engineSetPaddingWithNSString:(NSString *)paddingName;

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen;

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                          withInt:(jint)inLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outOff;

- (void)setModeWithNSString:(NSString *)mode;

- (void)setPaddingWithNSString:(NSString *)padding;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt)

inline jint LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_get_ENCRYPT_MODE(void);
#define LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_ENCRYPT_MODE 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt, ENCRYPT_MODE, jint)

inline jint LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_get_DECRYPT_MODE(void);
#define LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_DECRYPT_MODE 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt, DECRYPT_MODE, jint)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_init(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt *self);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CipherSpiExt_H
