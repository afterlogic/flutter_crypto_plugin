//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/StandardDSAEncoding.java
//

#ifndef StandardDSAEncoding_H
#define StandardDSAEncoding_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DSAEncoding.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1EncodableVector;
@class LibOrgBouncycastleAsn1ASN1Sequence;

@interface LibOrgBouncycastleCryptoSignersStandardDSAEncoding : NSObject < LibOrgBouncycastleCryptoSignersDSAEncoding >
@property (readonly, class) LibOrgBouncycastleCryptoSignersStandardDSAEncoding *INSTANCE NS_SWIFT_NAME(INSTANCE);

+ (LibOrgBouncycastleCryptoSignersStandardDSAEncoding *)INSTANCE;

#pragma mark Public

- (instancetype __nonnull)init;

- (IOSObjectArray *)decodeWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                   withByteArray:(IOSByteArray *)encoding;

- (IOSByteArray *)encodeWithJavaMathBigInteger:(JavaMathBigInteger *)n
                        withJavaMathBigInteger:(JavaMathBigInteger *)r
                        withJavaMathBigInteger:(JavaMathBigInteger *)s;

#pragma mark Protected

- (JavaMathBigInteger *)checkValueWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                  withJavaMathBigInteger:(JavaMathBigInteger *)x;

- (JavaMathBigInteger *)decodeValueWithJavaMathBigInteger:(JavaMathBigInteger *)n
                   withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)s
                                                  withInt:(jint)pos;

- (void)encodeValueWithJavaMathBigInteger:(JavaMathBigInteger *)n
withLibOrgBouncycastleAsn1ASN1EncodableVector:(LibOrgBouncycastleAsn1ASN1EncodableVector *)v
                   withJavaMathBigInteger:(JavaMathBigInteger *)x;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoSignersStandardDSAEncoding)

inline LibOrgBouncycastleCryptoSignersStandardDSAEncoding *LibOrgBouncycastleCryptoSignersStandardDSAEncoding_get_INSTANCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersStandardDSAEncoding *LibOrgBouncycastleCryptoSignersStandardDSAEncoding_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoSignersStandardDSAEncoding, INSTANCE, LibOrgBouncycastleCryptoSignersStandardDSAEncoding *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersStandardDSAEncoding_init(LibOrgBouncycastleCryptoSignersStandardDSAEncoding *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersStandardDSAEncoding *new_LibOrgBouncycastleCryptoSignersStandardDSAEncoding_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersStandardDSAEncoding *create_LibOrgBouncycastleCryptoSignersStandardDSAEncoding_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoSignersStandardDSAEncoding)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // StandardDSAEncoding_H
