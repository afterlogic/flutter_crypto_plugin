//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/BDS.java
//

#include "ASN1ObjectIdentifier.h"
#include "BDS.h"
#include "BDSTreeHash.h"
#include "Digest.h"
#include "DigestUtil.h"
#include "HashTreeAddress.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LTreeAddress.h"
#include "OTSHashAddress.h"
#include "WOTSPlus.h"
#include "WOTSPlusParameters.h"
#include "WOTSPlusPublicKeyParameters.h"
#include "XMSSAddress.h"
#include "XMSSNode.h"
#include "XMSSNodeUtil.h"
#include "XMSSParameters.h"
#include "XMSSUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Stack.h"
#include "java/util/TreeMap.h"

@interface LibOrgBouncycastlePqcCryptoXmssBDS () {
 @public
  LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  jint treeHeight_;
  id<JavaUtilList> treeHashInstances_;
  jint k_;
  LibOrgBouncycastlePqcCryptoXmssXMSSNode *root_;
  id<JavaUtilList> authenticationPath_;
  id<JavaUtilMap> retain__;
  JavaUtilStack *stack_;
  id<JavaUtilMap> keep_;
  jint index_;
  jboolean used_;
}

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus:(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                                                        withInt:(jint)treeHeight
                                                        withInt:(jint)k;

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssBDS:(LibOrgBouncycastlePqcCryptoXmssBDS *)last
                                             withByteArray:(IOSByteArray *)publicSeed
                                             withByteArray:(IOSByteArray *)secretKeySeed
         withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssBDS:(LibOrgBouncycastlePqcCryptoXmssBDS *)last
                        withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

- (void)initialize__WithByteArray:(IOSByteArray *)publicSeed
                    withByteArray:(IOSByteArray *)secretSeed
withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress OBJC_METHOD_FAMILY_NONE;

- (void)nextAuthenticationPathWithByteArray:(IOSByteArray *)publicSeed
                              withByteArray:(IOSByteArray *)secretSeed
withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

- (LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *)getBDSTreeHashInstanceForUpdate;

- (void)validate;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssBDS, wotsPlus_, LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssBDS, treeHashInstances_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssBDS, root_, LibOrgBouncycastlePqcCryptoXmssXMSSNode *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssBDS, authenticationPath_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssBDS, retain__, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssBDS, stack_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssBDS, keep_, id<JavaUtilMap>)

inline jlong LibOrgBouncycastlePqcCryptoXmssBDS_get_serialVersionUID(void);
#define LibOrgBouncycastlePqcCryptoXmssBDS_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoXmssBDS, serialVersionUID, jlong)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint treeHeight, jint k);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint treeHeight, jint k) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint treeHeight, jint k);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssBDS *last, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *last, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *last, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssBDS *last, id<LibOrgBouncycastleCryptoDigest> digest);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssBDS *last, id<LibOrgBouncycastleCryptoDigest> digest) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssBDS *last, id<LibOrgBouncycastleCryptoDigest> digest);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoXmssBDS_initialize__WithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *self, IOSByteArray *publicSeed, IOSByteArray *secretSeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoXmssBDS_nextAuthenticationPathWithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *self, IOSByteArray *publicSeed, IOSByteArray *secretSeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *LibOrgBouncycastlePqcCryptoXmssBDS_getBDSTreeHashInstanceForUpdate(LibOrgBouncycastlePqcCryptoXmssBDS *self);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoXmssBDS_validate(LibOrgBouncycastlePqcCryptoXmssBDS *self);

@implementation LibOrgBouncycastlePqcCryptoXmssBDS

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                              withInt:(jint)index {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_(self, params, index);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                        withByteArray:(IOSByteArray *)publicSeed
                                                        withByteArray:(IOSByteArray *)secretKeySeed
                    withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, params, publicSeed, secretKeySeed, otsHashAddress);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                        withByteArray:(IOSByteArray *)publicSeed
                                                        withByteArray:(IOSByteArray *)secretKeySeed
                    withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress
                                                              withInt:(jint)index {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(self, params, publicSeed, secretKeySeed, otsHashAddress, index);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus:(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                                                        withInt:(jint)treeHeight
                                                        withInt:(jint)k {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(self, wotsPlus, treeHeight, k);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssBDS:(LibOrgBouncycastlePqcCryptoXmssBDS *)last
                                             withByteArray:(IOSByteArray *)publicSeed
                                             withByteArray:(IOSByteArray *)secretKeySeed
         withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, last, publicSeed, secretKeySeed, otsHashAddress);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssBDS:(LibOrgBouncycastlePqcCryptoXmssBDS *)last
                        withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_(self, last, digest);
  return self;
}

- (LibOrgBouncycastlePqcCryptoXmssBDS *)getNextStateWithByteArray:(IOSByteArray *)publicSeed
                                                    withByteArray:(IOSByteArray *)secretKeySeed
                withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  return new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, publicSeed, secretKeySeed, otsHashAddress);
}

- (void)initialize__WithByteArray:(IOSByteArray *)publicSeed
                    withByteArray:(IOSByteArray *)secretSeed
withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  LibOrgBouncycastlePqcCryptoXmssBDS_initialize__WithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, publicSeed, secretSeed, otsHashAddress);
}

- (void)nextAuthenticationPathWithByteArray:(IOSByteArray *)publicSeed
                              withByteArray:(IOSByteArray *)secretSeed
withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  LibOrgBouncycastlePqcCryptoXmssBDS_nextAuthenticationPathWithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, publicSeed, secretSeed, otsHashAddress);
}

- (jboolean)isUsed {
  return used_;
}

- (LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *)getBDSTreeHashInstanceForUpdate {
  return LibOrgBouncycastlePqcCryptoXmssBDS_getBDSTreeHashInstanceForUpdate(self);
}

- (void)validate {
  LibOrgBouncycastlePqcCryptoXmssBDS_validate(self);
}

- (jint)getTreeHeight {
  return treeHeight_;
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSNode *)getRoot {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(root_)) java_clone];
}

- (id<JavaUtilList>)getAuthenticationPath {
  id<JavaUtilList> authenticationPath = new_JavaUtilArrayList_init();
  for (LibOrgBouncycastlePqcCryptoXmssXMSSNode * __strong node in nil_chk(self->authenticationPath_)) {
    [authenticationPath addWithId:[((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) java_clone]];
  }
  return authenticationPath;
}

- (jint)getIndex {
  return index_;
}

- (LibOrgBouncycastlePqcCryptoXmssBDS *)withWOTSDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)digestName {
  return new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_(self, LibOrgBouncycastlePqcCryptoXmssDigestUtil_getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(digestName));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssBDS;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssBDSTreeHash;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSNode;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, -1, 10, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssBDS;", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:withInt:);
  methods[1].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:withByteArray:withByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[2].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:withByteArray:withByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:withInt:);
  methods[3].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus:withInt:withInt:);
  methods[4].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssBDS:withByteArray:withByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[5].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssBDS:withLibOrgBouncycastleCryptoDigest:);
  methods[6].selector = @selector(getNextStateWithByteArray:withByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[7].selector = @selector(initialize__WithByteArray:withByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[8].selector = @selector(nextAuthenticationPathWithByteArray:withByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[9].selector = @selector(isUsed);
  methods[10].selector = @selector(getBDSTreeHashInstanceForUpdate);
  methods[11].selector = @selector(validate);
  methods[12].selector = @selector(getTreeHeight);
  methods[13].selector = @selector(getRoot);
  methods[14].selector = @selector(getAuthenticationPath);
  methods[15].selector = @selector(getIndex);
  methods[16].selector = @selector(withWOTSDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastlePqcCryptoXmssBDS_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "wotsPlus_", "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "treeHeight_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "treeHashInstances_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "root_", "LLibOrgBouncycastlePqcCryptoXmssXMSSNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authenticationPath_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 14, -1 },
    { "retain__", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, 15, -1, 16, -1 },
    { "stack_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "keep_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "used_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;I", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;[B[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;[B[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;I", "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;II", "LLibOrgBouncycastlePqcCryptoXmssBDS;[B[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "LLibOrgBouncycastlePqcCryptoXmssBDS;LLibOrgBouncycastleCryptoDigest;", "getNextState", "[B[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "initialize", "nextAuthenticationPath", "()Ljava/util/List<Llib/org/bouncycastle/pqc/crypto/xmss/XMSSNode;>;", "withWOTSDigest", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "Ljava/util/List<Llib/org/bouncycastle/pqc/crypto/xmss/BDSTreeHash;>;", "Ljava/util/List<Llib/org/bouncycastle/pqc/crypto/xmss/XMSSNode;>;", "retain", "Ljava/util/Map<Ljava/lang/Integer;Ljava/util/LinkedList<Llib/org/bouncycastle/pqc/crypto/xmss/XMSSNode;>;>;", "Ljava/util/Stack<Llib/org/bouncycastle/pqc/crypto/xmss/XMSSNode;>;", "Ljava/util/Map<Ljava/lang/Integer;Llib/org/bouncycastle/pqc/crypto/xmss/XMSSNode;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssBDS = { "BDS", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 17, 12, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssBDS;
}

@end

void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, jint index) {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(self, [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params)) getWOTSPlus], [params getHeight], [params getK]);
  self->index_ = index;
  self->used_ = true;
}

LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, jint index) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_, params, index)
}

LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, jint index) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_, params, index)
}

void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(self, [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params)) getWOTSPlus], [params getHeight], [params getK]);
  LibOrgBouncycastlePqcCryptoXmssBDS_initialize__WithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, publicSeed, secretKeySeed, otsHashAddress);
}

LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_, params, publicSeed, secretKeySeed, otsHashAddress)
}

LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_, params, publicSeed, secretKeySeed, otsHashAddress)
}

void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint index) {
  LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(self, [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params)) getWOTSPlus], [params getHeight], [params getK]);
  LibOrgBouncycastlePqcCryptoXmssBDS_initialize__WithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, publicSeed, secretKeySeed, otsHashAddress);
  while (self->index_ < index) {
    LibOrgBouncycastlePqcCryptoXmssBDS_nextAuthenticationPathWithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, publicSeed, secretKeySeed, otsHashAddress);
    self->used_ = false;
  }
}

LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint index) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_, params, publicSeed, secretKeySeed, otsHashAddress, index)
}

LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint index) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_, params, publicSeed, secretKeySeed, otsHashAddress, index)
}

void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint treeHeight, jint k) {
  NSObject_init(self);
  self->wotsPlus_ = wotsPlus;
  self->treeHeight_ = treeHeight;
  self->k_ = k;
  if (k > treeHeight || k < 2 || ((treeHeight - k) % 2) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"illegal value for BDS parameter k");
  }
  self->authenticationPath_ = new_JavaUtilArrayList_init();
  self->retain__ = new_JavaUtilTreeMap_init();
  self->stack_ = new_JavaUtilStack_init();
  self->treeHashInstances_ = new_JavaUtilArrayList_init();
  for (jint height = 0; height < (treeHeight - k); height++) {
    [self->treeHashInstances_ addWithId:new_LibOrgBouncycastlePqcCryptoXmssBDSTreeHash_initWithInt_(height)];
  }
  self->keep_ = new_JavaUtilTreeMap_init();
  self->index_ = 0;
  self->used_ = false;
}

LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint treeHeight, jint k) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_, wotsPlus, treeHeight, k)
}

LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint treeHeight, jint k) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withInt_, wotsPlus, treeHeight, k)
}

void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssBDS *last, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  NSObject_init(self);
  self->wotsPlus_ = ((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk(last))->wotsPlus_;
  self->treeHeight_ = last->treeHeight_;
  self->k_ = last->k_;
  self->root_ = last->root_;
  self->authenticationPath_ = new_JavaUtilArrayList_init();
  [self->authenticationPath_ addAllWithJavaUtilCollection:last->authenticationPath_];
  self->retain__ = last->retain__;
  self->stack_ = new_JavaUtilStack_init();
  [self->stack_ addAllWithJavaUtilCollection:last->stack_];
  self->treeHashInstances_ = last->treeHashInstances_;
  self->keep_ = new_JavaUtilTreeMap_initWithJavaUtilMap_(last->keep_);
  self->index_ = last->index_;
  LibOrgBouncycastlePqcCryptoXmssBDS_nextAuthenticationPathWithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, publicSeed, secretKeySeed, otsHashAddress);
  last->used_ = true;
}

LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *last, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_, last, publicSeed, secretKeySeed, otsHashAddress)
}

LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *last, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssBDS_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_, last, publicSeed, secretKeySeed, otsHashAddress)
}

void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssBDS *last, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->wotsPlus_ = new_LibOrgBouncycastlePqcCryptoXmssWOTSPlus_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(new_LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_initWithLibOrgBouncycastleCryptoDigest_(digest));
  self->treeHeight_ = ((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk(last))->treeHeight_;
  self->k_ = last->k_;
  self->root_ = last->root_;
  self->authenticationPath_ = new_JavaUtilArrayList_init();
  [self->authenticationPath_ addAllWithJavaUtilCollection:last->authenticationPath_];
  self->retain__ = last->retain__;
  self->stack_ = new_JavaUtilStack_init();
  [self->stack_ addAllWithJavaUtilCollection:last->stack_];
  self->treeHashInstances_ = last->treeHashInstances_;
  self->keep_ = new_JavaUtilTreeMap_initWithJavaUtilMap_(last->keep_);
  self->index_ = last->index_;
  self->used_ = last->used_;
  LibOrgBouncycastlePqcCryptoXmssBDS_validate(self);
}

LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssBDS *last, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_, last, digest)
}

LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssBDS *last, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssBDS, initWithLibOrgBouncycastlePqcCryptoXmssBDS_withLibOrgBouncycastleCryptoDigest_, last, digest)
}

void LibOrgBouncycastlePqcCryptoXmssBDS_initialize__WithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *self, IOSByteArray *publicSeed, IOSByteArray *secretSeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  LibOrgBouncycastlePqcCryptoXmssLTreeAddress *lTreeAddress = (LibOrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) build], [LibOrgBouncycastlePqcCryptoXmssLTreeAddress class]);
  LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
  for (jint indexLeaf = 0; indexLeaf < (JreLShift32(1, self->treeHeight_)); indexLeaf++) {
    otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:indexLeaf])) withChainAddressWithInt:[otsHashAddress getChainAddress]])) withHashAddressWithInt:[otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) importKeysWithByteArray:[self->wotsPlus_ getWOTSPlusSecretKeyWithByteArray:secretSeed withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:publicSeed];
    LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *wotsPlusPublicKey = [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) getPublicKeyWithLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
    lTreeAddress = (LibOrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssLTreeAddress *) nil_chk(lTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[lTreeAddress getTreeAddress]])) withLTreeAddressWithInt:indexLeaf])) withTreeHeightWithInt:[lTreeAddress getTreeHeight]])) withTreeIndexWithInt:[lTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[lTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssLTreeAddress class]);
    LibOrgBouncycastlePqcCryptoXmssXMSSNode *node = LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withLibOrgBouncycastlePqcCryptoXmssLTreeAddress_(self->wotsPlus_, wotsPlusPublicKey, lTreeAddress);
    hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeIndexWithInt:indexLeaf])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    while (![((JavaUtilStack *) nil_chk(self->stack_)) isEmpty] && [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk([((JavaUtilStack *) nil_chk(self->stack_)) peek])) getHeight] == [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight]) {
      jint indexOnHeight = indexLeaf / (JreLShift32(1, [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight]));
      if (indexOnHeight == 1) {
        [((id<JavaUtilList>) nil_chk(self->authenticationPath_)) addWithId:[node java_clone]];
      }
      if (indexOnHeight == 3 && [node getHeight] < (self->treeHeight_ - self->k_)) {
        [((LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *) nil_chk([((id<JavaUtilList>) nil_chk(self->treeHashInstances_)) getWithInt:[node getHeight]])) setNodeWithLibOrgBouncycastlePqcCryptoXmssXMSSNode:[node java_clone]];
      }
      if (indexOnHeight >= 3 && (indexOnHeight & 1) == 1 && [node getHeight] >= (self->treeHeight_ - self->k_) && [node getHeight] <= (self->treeHeight_ - 2)) {
        if ([((id<JavaUtilMap>) nil_chk(self->retain__)) getWithId:JavaLangInteger_valueOfWithInt_([node getHeight])] == nil) {
          JavaUtilLinkedList *queue = new_JavaUtilLinkedList_init();
          [queue addWithId:[node java_clone]];
          (void) [((id<JavaUtilMap>) nil_chk(self->retain__)) putWithId:JavaLangInteger_valueOfWithInt_([node getHeight]) withId:queue];
        }
        else {
          [((JavaUtilLinkedList *) nil_chk([((id<JavaUtilMap>) nil_chk(self->retain__)) getWithId:JavaLangInteger_valueOfWithInt_([node getHeight])])) addWithId:[node java_clone]];
        }
      }
      hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:([hashTreeAddress getTreeIndex] - 1) / 2])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
      node = LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSAddress_(self->wotsPlus_, [((JavaUtilStack *) nil_chk(self->stack_)) pop], node, hashTreeAddress);
      node = new_LibOrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight] + 1, [node getValue]);
      hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight] + 1])) withTreeIndexWithInt:[hashTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    }
    (void) [((JavaUtilStack *) nil_chk(self->stack_)) pushWithId:node];
  }
  self->root_ = [((JavaUtilStack *) nil_chk(self->stack_)) pop];
}

void LibOrgBouncycastlePqcCryptoXmssBDS_nextAuthenticationPathWithByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *self, IOSByteArray *publicSeed, IOSByteArray *secretSeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  if (self->used_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"index already used");
  }
  if (self->index_ > ((JreLShift32(1, self->treeHeight_)) - 2)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"index out of bounds");
  }
  jint tau = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_calculateTauWithInt_withInt_(self->index_, self->treeHeight_);
  if (((JreRShift32(self->index_, (tau + 1))) & 1) == 0 && (tau < (self->treeHeight_ - 1))) {
    (void) [((id<JavaUtilMap>) nil_chk(self->keep_)) putWithId:JavaLangInteger_valueOfWithInt_(tau) withId:[((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk([((id<JavaUtilList>) nil_chk(self->authenticationPath_)) getWithInt:tau])) java_clone]];
  }
  LibOrgBouncycastlePqcCryptoXmssLTreeAddress *lTreeAddress = (LibOrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) build], [LibOrgBouncycastlePqcCryptoXmssLTreeAddress class]);
  LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
  if (tau == 0) {
    otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:self->index_])) withChainAddressWithInt:[otsHashAddress getChainAddress]])) withHashAddressWithInt:[otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) importKeysWithByteArray:[self->wotsPlus_ getWOTSPlusSecretKeyWithByteArray:secretSeed withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:publicSeed];
    LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *wotsPlusPublicKey = [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) getPublicKeyWithLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
    lTreeAddress = (LibOrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssLTreeAddress *) nil_chk(lTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[lTreeAddress getTreeAddress]])) withLTreeAddressWithInt:self->index_])) withTreeHeightWithInt:[lTreeAddress getTreeHeight]])) withTreeIndexWithInt:[lTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[lTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssLTreeAddress class]);
    LibOrgBouncycastlePqcCryptoXmssXMSSNode *node = LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withLibOrgBouncycastlePqcCryptoXmssLTreeAddress_(self->wotsPlus_, wotsPlusPublicKey, lTreeAddress);
    (void) [((id<JavaUtilList>) nil_chk(self->authenticationPath_)) setWithInt:0 withId:node];
  }
  else {
    hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:tau - 1])) withTreeIndexWithInt:JreRShift32(self->index_, tau)])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) importKeysWithByteArray:[self->wotsPlus_ getWOTSPlusSecretKeyWithByteArray:secretSeed withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:publicSeed];
    LibOrgBouncycastlePqcCryptoXmssXMSSNode *node = LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSAddress_(self->wotsPlus_, [((id<JavaUtilList>) nil_chk(self->authenticationPath_)) getWithInt:tau - 1], [((id<JavaUtilMap>) nil_chk(self->keep_)) getWithId:JavaLangInteger_valueOfWithInt_(tau - 1)], hashTreeAddress);
    node = new_LibOrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight] + 1, [node getValue]);
    (void) [((id<JavaUtilList>) nil_chk(self->authenticationPath_)) setWithInt:tau withId:node];
    (void) [((id<JavaUtilMap>) nil_chk(self->keep_)) removeWithId:JavaLangInteger_valueOfWithInt_(tau - 1)];
    for (jint height = 0; height < tau; height++) {
      if (height < (self->treeHeight_ - self->k_)) {
        (void) [((id<JavaUtilList>) nil_chk(self->authenticationPath_)) setWithInt:height withId:[((LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *) nil_chk([((id<JavaUtilList>) nil_chk(self->treeHashInstances_)) getWithInt:height])) getTailNode]];
      }
      else {
        (void) [((id<JavaUtilList>) nil_chk(self->authenticationPath_)) setWithInt:height withId:[((JavaUtilLinkedList *) nil_chk([((id<JavaUtilMap>) nil_chk(self->retain__)) getWithId:JavaLangInteger_valueOfWithInt_(height)])) removeFirst]];
      }
    }
    jint minHeight = JavaLangMath_minWithInt_withInt_(tau, self->treeHeight_ - self->k_);
    for (jint height = 0; height < minHeight; height++) {
      jint startIndex = self->index_ + 1 + (3 * (JreLShift32(1, height)));
      if (startIndex < (JreLShift32(1, self->treeHeight_))) {
        [((LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *) nil_chk([((id<JavaUtilList>) nil_chk(self->treeHashInstances_)) getWithInt:height])) initialize__WithInt:startIndex];
      }
    }
  }
  for (jint i = 0; i < JreRShift32((self->treeHeight_ - self->k_), 1); i++) {
    LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *treeHash = LibOrgBouncycastlePqcCryptoXmssBDS_getBDSTreeHashInstanceForUpdate(self);
    if (treeHash != nil) {
      [treeHash updateWithJavaUtilStack:self->stack_ withLibOrgBouncycastlePqcCryptoXmssWOTSPlus:self->wotsPlus_ withByteArray:publicSeed withByteArray:secretSeed withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
    }
  }
  self->index_++;
}

LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *LibOrgBouncycastlePqcCryptoXmssBDS_getBDSTreeHashInstanceForUpdate(LibOrgBouncycastlePqcCryptoXmssBDS *self) {
  LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *ret = nil;
  for (LibOrgBouncycastlePqcCryptoXmssBDSTreeHash * __strong treeHash in nil_chk(self->treeHashInstances_)) {
    if ([((LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *) nil_chk(treeHash)) isFinished] || ![treeHash isInitialized]) {
      continue;
    }
    if (ret == nil) {
      ret = treeHash;
      continue;
    }
    if ([treeHash getHeight] < [ret getHeight]) {
      ret = treeHash;
      continue;
    }
    if ([treeHash getHeight] == [ret getHeight]) {
      if ([treeHash getIndexLeaf] < [ret getIndexLeaf]) {
        ret = treeHash;
      }
    }
  }
  return ret;
}

void LibOrgBouncycastlePqcCryptoXmssBDS_validate(LibOrgBouncycastlePqcCryptoXmssBDS *self) {
  if (self->authenticationPath_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"authenticationPath == null");
  }
  if (self->retain__ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"retain == null");
  }
  if (self->stack_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"stack == null");
  }
  if (self->treeHashInstances_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"treeHashInstances == null");
  }
  if (self->keep_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"keep == null");
  }
  if (!LibOrgBouncycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_(self->treeHeight_, self->index_)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"index in BDS state out of bounds");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssBDS)
