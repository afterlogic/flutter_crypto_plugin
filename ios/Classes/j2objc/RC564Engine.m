//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/RC564Engine.java
//

#include "CipherParameters.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RC564Engine.h"
#include "RC5Parameters.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleCryptoEnginesRC564Engine () {
 @public
  jint _noRounds_;
  IOSLongArray *_S_;
  jboolean forEncryption_;
}

- (void)setKeyWithByteArray:(IOSByteArray *)key;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jlong)rotateLeftWithLong:(jlong)x
                   withLong:(jlong)y;

- (jlong)rotateRightWithLong:(jlong)x
                    withLong:(jlong)y;

- (jlong)bytesToWordWithByteArray:(IOSByteArray *)src
                          withInt:(jint)srcOff;

- (void)wordToBytesWithLong:(jlong)word
              withByteArray:(IOSByteArray *)dst
                    withInt:(jint)dstOff;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRC564Engine, _S_, IOSLongArray *)

inline jint LibOrgBouncycastleCryptoEnginesRC564Engine_get_wordSize(void);
#define LibOrgBouncycastleCryptoEnginesRC564Engine_wordSize 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesRC564Engine, wordSize, jint)

inline jint LibOrgBouncycastleCryptoEnginesRC564Engine_get_bytesPerWord(void);
#define LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesRC564Engine, bytesPerWord, jint)

inline jlong LibOrgBouncycastleCryptoEnginesRC564Engine_get_P64(void);
#define LibOrgBouncycastleCryptoEnginesRC564Engine_P64 -5196783011329398165LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesRC564Engine, P64, jlong)

inline jlong LibOrgBouncycastleCryptoEnginesRC564Engine_get_Q64(void);
#define LibOrgBouncycastleCryptoEnginesRC564Engine_Q64 -7046029254386353131LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesRC564Engine, Q64, jlong)

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesRC564Engine_setKeyWithByteArray_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, IOSByteArray *key);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoEnginesRC564Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoEnginesRC564Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoEnginesRC564Engine_rotateLeftWithLong_withLong_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, jlong x, jlong y);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoEnginesRC564Engine_rotateRightWithLong_withLong_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, jlong x, jlong y);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoEnginesRC564Engine_bytesToWordWithByteArray_withInt_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, IOSByteArray *src, jint srcOff);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesRC564Engine_wordToBytesWithLong_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, jlong word, IOSByteArray *dst, jint dstOff);

@implementation LibOrgBouncycastleCryptoEnginesRC564Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesRC564Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"RC5-64";
}

- (jint)getBlockSize {
  return 2 * LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[LibOrgBouncycastleCryptoParamsRC5Parameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to RC564 init - ", [[((id<LibOrgBouncycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
  LibOrgBouncycastleCryptoParamsRC5Parameters *p = (LibOrgBouncycastleCryptoParamsRC5Parameters *) cast_chk(params, [LibOrgBouncycastleCryptoParamsRC5Parameters class]);
  self->forEncryption_ = forEncryption;
  _noRounds_ = [((LibOrgBouncycastleCryptoParamsRC5Parameters *) nil_chk(p)) getRounds];
  LibOrgBouncycastleCryptoEnginesRC564Engine_setKeyWithByteArray_(self, [p getKey]);
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return (forEncryption_) ? LibOrgBouncycastleCryptoEnginesRC564Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : LibOrgBouncycastleCryptoEnginesRC564Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)reset {
}

- (void)setKeyWithByteArray:(IOSByteArray *)key {
  LibOrgBouncycastleCryptoEnginesRC564Engine_setKeyWithByteArray_(self, key);
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return LibOrgBouncycastleCryptoEnginesRC564Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return LibOrgBouncycastleCryptoEnginesRC564Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jlong)rotateLeftWithLong:(jlong)x
                   withLong:(jlong)y {
  return LibOrgBouncycastleCryptoEnginesRC564Engine_rotateLeftWithLong_withLong_(self, x, y);
}

- (jlong)rotateRightWithLong:(jlong)x
                    withLong:(jlong)y {
  return LibOrgBouncycastleCryptoEnginesRC564Engine_rotateRightWithLong_withLong_(self, x, y);
}

- (jlong)bytesToWordWithByteArray:(IOSByteArray *)src
                          withInt:(jint)srcOff {
  return LibOrgBouncycastleCryptoEnginesRC564Engine_bytesToWordWithByteArray_withInt_(self, src, srcOff);
}

- (void)wordToBytesWithLong:(jlong)word
              withByteArray:(IOSByteArray *)dst
                    withInt:(jint)dstOff {
  LibOrgBouncycastleCryptoEnginesRC564Engine_wordToBytesWithLong_withByteArray_withInt_(self, word, dst, dstOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(getBlockSize);
  methods[3].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(setKeyWithByteArray:);
  methods[7].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(rotateLeftWithLong:withLong:);
  methods[10].selector = @selector(rotateRightWithLong:withLong:);
  methods[11].selector = @selector(bytesToWordWithByteArray:withInt:);
  methods[12].selector = @selector(wordToBytesWithLong:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wordSize", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesRC564Engine_wordSize, 0x1a, -1, -1, -1, -1 },
    { "bytesPerWord", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord, 0x1a, -1, -1, -1, -1 },
    { "_noRounds_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_S_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "P64", "J", .constantValue.asLong = LibOrgBouncycastleCryptoEnginesRC564Engine_P64, 0x1a, -1, -1, -1, -1 },
    { "Q64", "J", .constantValue.asLong = LibOrgBouncycastleCryptoEnginesRC564Engine_Q64, 0x1a, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "setKey", "[B", "encryptBlock", "decryptBlock", "rotateLeft", "JJ", "rotateRight", "bytesToWord", "[BI", "wordToBytes", "J[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesRC564Engine = { "RC564Engine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 13, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesRC564Engine;
}

@end

void LibOrgBouncycastleCryptoEnginesRC564Engine_init(LibOrgBouncycastleCryptoEnginesRC564Engine *self) {
  NSObject_init(self);
  self->_noRounds_ = 12;
  self->_S_ = nil;
}

LibOrgBouncycastleCryptoEnginesRC564Engine *new_LibOrgBouncycastleCryptoEnginesRC564Engine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesRC564Engine, init)
}

LibOrgBouncycastleCryptoEnginesRC564Engine *create_LibOrgBouncycastleCryptoEnginesRC564Engine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesRC564Engine, init)
}

void LibOrgBouncycastleCryptoEnginesRC564Engine_setKeyWithByteArray_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, IOSByteArray *key) {
  IOSLongArray *L = [IOSLongArray newArrayWithLength:(((IOSByteArray *) nil_chk(key))->size_ + (LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord - 1)) / LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord];
  for (jint i = 0; i != key->size_; i++) {
    *IOSLongArray_GetRef(L, i / LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord) += JreLShift64((jlong) (IOSByteArray_Get(key, i) & (jint) 0xff), (8 * (i % LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord)));
  }
  self->_S_ = [IOSLongArray newArrayWithLength:2 * (self->_noRounds_ + 1)];
  *IOSLongArray_GetRef(self->_S_, 0) = LibOrgBouncycastleCryptoEnginesRC564Engine_P64;
  for (jint i = 1; i < self->_S_->size_; i++) {
    *IOSLongArray_GetRef(self->_S_, i) = (IOSLongArray_Get(self->_S_, i - 1) + LibOrgBouncycastleCryptoEnginesRC564Engine_Q64);
  }
  jint iter;
  if (L->size_ > self->_S_->size_) {
    iter = 3 * L->size_;
  }
  else {
    iter = 3 * self->_S_->size_;
  }
  jlong A = 0;
  jlong B = 0;
  jint i = 0;
  jint j = 0;
  for (jint k = 0; k < iter; k++) {
    A = *IOSLongArray_GetRef(self->_S_, i) = LibOrgBouncycastleCryptoEnginesRC564Engine_rotateLeftWithLong_withLong_(self, IOSLongArray_Get(self->_S_, i) + A + B, 3);
    B = *IOSLongArray_GetRef(L, j) = LibOrgBouncycastleCryptoEnginesRC564Engine_rotateLeftWithLong_withLong_(self, IOSLongArray_Get(L, j) + A + B, A + B);
    i = (i + 1) % ((IOSLongArray *) nil_chk(self->_S_))->size_;
    j = (j + 1) % L->size_;
  }
}

jint LibOrgBouncycastleCryptoEnginesRC564Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jlong A = LibOrgBouncycastleCryptoEnginesRC564Engine_bytesToWordWithByteArray_withInt_(self, inArg, inOff) + IOSLongArray_Get(nil_chk(self->_S_), 0);
  jlong B = LibOrgBouncycastleCryptoEnginesRC564Engine_bytesToWordWithByteArray_withInt_(self, inArg, inOff + LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord) + IOSLongArray_Get(nil_chk(self->_S_), 1);
  for (jint i = 1; i <= self->_noRounds_; i++) {
    A = LibOrgBouncycastleCryptoEnginesRC564Engine_rotateLeftWithLong_withLong_(self, A ^ B, B) + IOSLongArray_Get(nil_chk(self->_S_), 2 * i);
    B = LibOrgBouncycastleCryptoEnginesRC564Engine_rotateLeftWithLong_withLong_(self, B ^ A, A) + IOSLongArray_Get(nil_chk(self->_S_), 2 * i + 1);
  }
  LibOrgBouncycastleCryptoEnginesRC564Engine_wordToBytesWithLong_withByteArray_withInt_(self, A, outArg, outOff);
  LibOrgBouncycastleCryptoEnginesRC564Engine_wordToBytesWithLong_withByteArray_withInt_(self, B, outArg, outOff + LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord);
  return 2 * LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord;
}

jint LibOrgBouncycastleCryptoEnginesRC564Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jlong A = LibOrgBouncycastleCryptoEnginesRC564Engine_bytesToWordWithByteArray_withInt_(self, inArg, inOff);
  jlong B = LibOrgBouncycastleCryptoEnginesRC564Engine_bytesToWordWithByteArray_withInt_(self, inArg, inOff + LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord);
  for (jint i = self->_noRounds_; i >= 1; i--) {
    B = LibOrgBouncycastleCryptoEnginesRC564Engine_rotateRightWithLong_withLong_(self, B - IOSLongArray_Get(nil_chk(self->_S_), 2 * i + 1), A) ^ A;
    A = LibOrgBouncycastleCryptoEnginesRC564Engine_rotateRightWithLong_withLong_(self, A - IOSLongArray_Get(nil_chk(self->_S_), 2 * i), B) ^ B;
  }
  LibOrgBouncycastleCryptoEnginesRC564Engine_wordToBytesWithLong_withByteArray_withInt_(self, A - IOSLongArray_Get(nil_chk(self->_S_), 0), outArg, outOff);
  LibOrgBouncycastleCryptoEnginesRC564Engine_wordToBytesWithLong_withByteArray_withInt_(self, B - IOSLongArray_Get(nil_chk(self->_S_), 1), outArg, outOff + LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord);
  return 2 * LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord;
}

jlong LibOrgBouncycastleCryptoEnginesRC564Engine_rotateLeftWithLong_withLong_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, jlong x, jlong y) {
  return ((JreLShift64(x, (y & (LibOrgBouncycastleCryptoEnginesRC564Engine_wordSize - 1)))) | (JreURShift64(x, (LibOrgBouncycastleCryptoEnginesRC564Engine_wordSize - (y & (LibOrgBouncycastleCryptoEnginesRC564Engine_wordSize - 1))))));
}

jlong LibOrgBouncycastleCryptoEnginesRC564Engine_rotateRightWithLong_withLong_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, jlong x, jlong y) {
  return ((JreURShift64(x, (y & (LibOrgBouncycastleCryptoEnginesRC564Engine_wordSize - 1)))) | (JreLShift64(x, (LibOrgBouncycastleCryptoEnginesRC564Engine_wordSize - (y & (LibOrgBouncycastleCryptoEnginesRC564Engine_wordSize - 1))))));
}

jlong LibOrgBouncycastleCryptoEnginesRC564Engine_bytesToWordWithByteArray_withInt_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, IOSByteArray *src, jint srcOff) {
  jlong word = 0;
  for (jint i = LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord - 1; i >= 0; i--) {
    word = (JreLShift64(word, 8)) + (IOSByteArray_Get(nil_chk(src), i + srcOff) & (jint) 0xff);
  }
  return word;
}

void LibOrgBouncycastleCryptoEnginesRC564Engine_wordToBytesWithLong_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesRC564Engine *self, jlong word, IOSByteArray *dst, jint dstOff) {
  for (jint i = 0; i < LibOrgBouncycastleCryptoEnginesRC564Engine_bytesPerWord; i++) {
    *IOSByteArray_GetRef(nil_chk(dst), i + dstOff) = (jbyte) word;
    JreURShiftAssignLong(&word, 8);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesRC564Engine)
