//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/SPHINCS.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricAlgorithmProvider.h"
#include "AsymmetricKeyInfoConverter.h"
#include "ConfigurableProvider.h"
#include "J2ObjC_source.h"
#include "PQCObjectIdentifiers.h"
#include "SPHINCS.h"
#include "Sphincs256KeyFactorySpi.h"

inline NSString *LibOrgBouncycastlePqcJcajceProviderSPHINCS_get_PREFIX(void);
static NSString *LibOrgBouncycastlePqcJcajceProviderSPHINCS_PREFIX = @"lib.org.bouncycastle.pqc.jcajce.provider.sphincs.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcJcajceProviderSPHINCS, PREFIX, NSString *)

@implementation LibOrgBouncycastlePqcJcajceProviderSPHINCS

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderSPHINCS_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &LibOrgBouncycastlePqcJcajceProviderSPHINCS_PREFIX, "LLibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderSPHINCS = { "SPHINCS", "lib.org.bouncycastle.pqc.jcajce.provider", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, 1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderSPHINCS;
}

@end

void LibOrgBouncycastlePqcJcajceProviderSPHINCS_init(LibOrgBouncycastlePqcJcajceProviderSPHINCS *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcJcajceProviderSPHINCS *new_LibOrgBouncycastlePqcJcajceProviderSPHINCS_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderSPHINCS, init)
}

LibOrgBouncycastlePqcJcajceProviderSPHINCS *create_LibOrgBouncycastlePqcJcajceProviderSPHINCS_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderSPHINCS, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderSPHINCS)

@implementation LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"KeyFactory.SPHINCS256" withNSString:JreStrcat("$$", LibOrgBouncycastlePqcJcajceProviderSPHINCS_PREFIX, @"Sphincs256KeyFactorySpi")];
  [provider addAlgorithmWithNSString:@"KeyPairGenerator.SPHINCS256" withNSString:JreStrcat("$$", LibOrgBouncycastlePqcJcajceProviderSPHINCS_PREFIX, @"Sphincs256KeyPairGeneratorSpi")];
  [self addSignatureAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA512" withNSString:@"SPHINCS256" withNSString:JreStrcat("$$", LibOrgBouncycastlePqcJcajceProviderSPHINCS_PREFIX, @"PqcJcajceSphincsSignatureSpi$withSha512") withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastlePqcAsn1PQCObjectIdentifiers, sphincs256_with_SHA512)];
  [self addSignatureAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA3-512" withNSString:@"SPHINCS256" withNSString:JreStrcat("$$", LibOrgBouncycastlePqcJcajceProviderSPHINCS_PREFIX, @"PqcJcajceSphincsSignatureSpi$withSha3_512") withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastlePqcAsn1PQCObjectIdentifiers, sphincs256_with_SHA3_512)];
  id<LibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter> keyFact = new_LibOrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyFactorySpi_init();
  [self registerOidWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastlePqcAsn1PQCObjectIdentifiers, sphincs256) withNSString:@"SPHINCS256" withLibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter:keyFact];
  [self registerOidAlgorithmParametersWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastlePqcAsn1PQCObjectIdentifiers, sphincs256) withNSString:@"SPHINCS256"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", "LLibOrgBouncycastlePqcJcajceProviderSPHINCS;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings = { "Mappings", "lib.org.bouncycastle.pqc.jcajce.provider", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings;
}

@end

void LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings_init(LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAsymmetricAlgorithmProvider_init(self);
}

LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings *new_LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings, init)
}

LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings *create_LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderSPHINCS_Mappings)
