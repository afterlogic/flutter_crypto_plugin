//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cryptlib/CryptlibObjectIdentifiers.java
//

#ifndef CryptlibObjectIdentifiers_H
#define CryptlibObjectIdentifiers_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;

@interface LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers : NSObject
@property (readonly, class) LibOrgBouncycastleAsn1ASN1ObjectIdentifier *cryptlib NS_SWIFT_NAME(cryptlib);
@property (readonly, class) LibOrgBouncycastleAsn1ASN1ObjectIdentifier *ecc NS_SWIFT_NAME(ecc);
@property (readonly, class) LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curvey25519 NS_SWIFT_NAME(curvey25519);

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)cryptlib;

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)ecc;

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)curvey25519;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers)

inline LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_get_cryptlib(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_cryptlib;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers, cryptlib, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)

inline LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_get_ecc(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_ecc;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers, ecc, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)

inline LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_get_curvey25519(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_curvey25519;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers, curvey25519, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_init(LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers *self);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers *new_LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers *create_LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CryptlibObjectIdentifiers_H
