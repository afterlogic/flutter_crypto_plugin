//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial.java
//

#ifndef DenseTernaryPolynomial_H
#define DenseTernaryPolynomial_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "IntegerPolynomial.h"
#include "J2ObjC_header.h"
#include "TernaryPolynomial.h"

@class IOSIntArray;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;

@interface LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial : LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial < LibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial >

#pragma mark Public

- (instancetype __nonnull)initWithIntArray:(IOSIntArray *)coeffs;

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)intPoly;

+ (LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                                                 withInt:(jint)numOnes
                                                                                 withInt:(jint)numNegOnes
                                                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (IOSIntArray *)getNegOnes;

- (IOSIntArray *)getOnes;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                       withInt:(jint)modulus;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)N;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, jint N);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(jint N) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(jint N);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, IOSIntArray *coeffs);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withJavaSecuritySecureRandom_(jint N, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DenseTernaryPolynomial_H
