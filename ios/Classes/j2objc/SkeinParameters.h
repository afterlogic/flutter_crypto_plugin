//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/SkeinParameters.java
//

#ifndef SkeinParameters_H
#define SkeinParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CipherParameters.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaUtilDate;
@class JavaUtilHashtable;
@class JavaUtilLocale;

@interface LibOrgBouncycastleCryptoParamsSkeinParameters : NSObject < LibOrgBouncycastleCryptoCipherParameters >
@property (readonly, class) jint PARAM_TYPE_KEY NS_SWIFT_NAME(PARAM_TYPE_KEY);
@property (readonly, class) jint PARAM_TYPE_CONFIG NS_SWIFT_NAME(PARAM_TYPE_CONFIG);
@property (readonly, class) jint PARAM_TYPE_PERSONALISATION NS_SWIFT_NAME(PARAM_TYPE_PERSONALISATION);
@property (readonly, class) jint PARAM_TYPE_PUBLIC_KEY NS_SWIFT_NAME(PARAM_TYPE_PUBLIC_KEY);
@property (readonly, class) jint PARAM_TYPE_KEY_IDENTIFIER NS_SWIFT_NAME(PARAM_TYPE_KEY_IDENTIFIER);
@property (readonly, class) jint PARAM_TYPE_NONCE NS_SWIFT_NAME(PARAM_TYPE_NONCE);
@property (readonly, class) jint PARAM_TYPE_MESSAGE NS_SWIFT_NAME(PARAM_TYPE_MESSAGE);
@property (readonly, class) jint PARAM_TYPE_OUTPUT NS_SWIFT_NAME(PARAM_TYPE_OUTPUT);

+ (jint)PARAM_TYPE_KEY;

+ (jint)PARAM_TYPE_CONFIG;

+ (jint)PARAM_TYPE_PERSONALISATION;

+ (jint)PARAM_TYPE_PUBLIC_KEY;

+ (jint)PARAM_TYPE_KEY_IDENTIFIER;

+ (jint)PARAM_TYPE_NONCE;

+ (jint)PARAM_TYPE_MESSAGE;

+ (jint)PARAM_TYPE_OUTPUT;

#pragma mark Public

- (instancetype __nonnull)init;

- (IOSByteArray *)getKey;

- (IOSByteArray *)getKeyIdentifier;

- (IOSByteArray *)getNonce;

- (JavaUtilHashtable *)getParameters;

- (IOSByteArray *)getPersonalisation;

- (IOSByteArray *)getPublicKey;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsSkeinParameters)

inline jint LibOrgBouncycastleCryptoParamsSkeinParameters_get_PARAM_TYPE_KEY(void);
#define LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsSkeinParameters, PARAM_TYPE_KEY, jint)

inline jint LibOrgBouncycastleCryptoParamsSkeinParameters_get_PARAM_TYPE_CONFIG(void);
#define LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_CONFIG 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsSkeinParameters, PARAM_TYPE_CONFIG, jint)

inline jint LibOrgBouncycastleCryptoParamsSkeinParameters_get_PARAM_TYPE_PERSONALISATION(void);
#define LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PERSONALISATION 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsSkeinParameters, PARAM_TYPE_PERSONALISATION, jint)

inline jint LibOrgBouncycastleCryptoParamsSkeinParameters_get_PARAM_TYPE_PUBLIC_KEY(void);
#define LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PUBLIC_KEY 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsSkeinParameters, PARAM_TYPE_PUBLIC_KEY, jint)

inline jint LibOrgBouncycastleCryptoParamsSkeinParameters_get_PARAM_TYPE_KEY_IDENTIFIER(void);
#define LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY_IDENTIFIER 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsSkeinParameters, PARAM_TYPE_KEY_IDENTIFIER, jint)

inline jint LibOrgBouncycastleCryptoParamsSkeinParameters_get_PARAM_TYPE_NONCE(void);
#define LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_NONCE 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsSkeinParameters, PARAM_TYPE_NONCE, jint)

inline jint LibOrgBouncycastleCryptoParamsSkeinParameters_get_PARAM_TYPE_MESSAGE(void);
#define LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_MESSAGE 48
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsSkeinParameters, PARAM_TYPE_MESSAGE, jint)

inline jint LibOrgBouncycastleCryptoParamsSkeinParameters_get_PARAM_TYPE_OUTPUT(void);
#define LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_OUTPUT 63
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsSkeinParameters, PARAM_TYPE_OUTPUT, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsSkeinParameters_init(LibOrgBouncycastleCryptoParamsSkeinParameters *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSkeinParameters *new_LibOrgBouncycastleCryptoParamsSkeinParameters_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSkeinParameters *create_LibOrgBouncycastleCryptoParamsSkeinParameters_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsSkeinParameters)

@interface LibOrgBouncycastleCryptoParamsSkeinParameters_Builder : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaUtilHashtable:(JavaUtilHashtable *)paramsMap;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsSkeinParameters:(LibOrgBouncycastleCryptoParamsSkeinParameters *)params;

- (LibOrgBouncycastleCryptoParamsSkeinParameters *)build;

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setWithInt:(jint)type
                                                        withByteArray:(IOSByteArray *)value;

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setKeyWithByteArray:(IOSByteArray *)key;

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setKeyIdentifierWithByteArray:(IOSByteArray *)keyIdentifier;

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setNonceWithByteArray:(IOSByteArray *)nonce;

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setPersonalisationWithByteArray:(IOSByteArray *)personalisation;

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setPersonalisationWithJavaUtilDate:(JavaUtilDate *)date
                                                                           withJavaUtilLocale:(JavaUtilLocale *)dateLocale
                                                                                 withNSString:(NSString *)emailAddress
                                                                                 withNSString:(NSString *)distinguisher;

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setPersonalisationWithJavaUtilDate:(JavaUtilDate *)date
                                                                                 withNSString:(NSString *)emailAddress
                                                                                 withNSString:(NSString *)distinguisher;

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setPublicKeyWithByteArray:(IOSByteArray *)publicKey;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_init(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *new_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *create_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithJavaUtilHashtable_(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *self, JavaUtilHashtable *paramsMap);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *new_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithJavaUtilHashtable_(JavaUtilHashtable *paramsMap) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *create_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithJavaUtilHashtable_(JavaUtilHashtable *paramsMap);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithLibOrgBouncycastleCryptoParamsSkeinParameters_(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *self, LibOrgBouncycastleCryptoParamsSkeinParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *new_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithLibOrgBouncycastleCryptoParamsSkeinParameters_(LibOrgBouncycastleCryptoParamsSkeinParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *create_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithLibOrgBouncycastleCryptoParamsSkeinParameters_(LibOrgBouncycastleCryptoParamsSkeinParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SkeinParameters_H
