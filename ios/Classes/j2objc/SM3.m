//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/SM3.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCMessageDigest.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestAlgorithmProvider.h"
#include "GMObjectIdentifiers.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "SM3.h"
#include "SM3Digest.h"

@interface LibOrgBouncycastleJcajceProviderDigestSM3 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderDigestSM3_init(LibOrgBouncycastleJcajceProviderDigestSM3 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSM3 *new_LibOrgBouncycastleJcajceProviderDigestSM3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSM3 *create_LibOrgBouncycastleJcajceProviderDigestSM3_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderDigestSM3_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderDigestSM3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSM3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSM3_Digest;LLibOrgBouncycastleJcajceProviderDigestSM3_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSM3 = { "SM3", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSM3;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSM3_init(LibOrgBouncycastleJcajceProviderDigestSM3 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSM3 *new_LibOrgBouncycastleJcajceProviderDigestSM3_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSM3, init)
}

LibOrgBouncycastleJcajceProviderDigestSM3 *create_LibOrgBouncycastleJcajceProviderDigestSM3_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSM3, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSM3)

@implementation LibOrgBouncycastleJcajceProviderDigestSM3_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSM3_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestSM3_Digest *d = (LibOrgBouncycastleJcajceProviderDigestSM3_Digest *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestSM3_Digest class]);
  ((LibOrgBouncycastleJcajceProviderDigestSM3_Digest *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsSM3Digest_initWithLibOrgBouncycastleCryptoDigestsSM3Digest_((LibOrgBouncycastleCryptoDigestsSM3Digest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsSM3Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestSM3;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSM3_Digest = { "Digest", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSM3_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestSM3_Digest_init(LibOrgBouncycastleJcajceProviderDigestSM3_Digest *self) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsSM3Digest_init());
}

LibOrgBouncycastleJcajceProviderDigestSM3_Digest *new_LibOrgBouncycastleJcajceProviderDigestSM3_Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSM3_Digest, init)
}

LibOrgBouncycastleJcajceProviderDigestSM3_Digest *create_LibOrgBouncycastleJcajceProviderDigestSM3_Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSM3_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSM3_Digest)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderDigestSM3_Mappings)

@implementation LibOrgBouncycastleJcajceProviderDigestSM3_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.SM3" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SM3" withNSString:@"SM3"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.1.2.156.197.1.401" withNSString:@"SM3"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1GmGMObjectIdentifiers, sm3)) withNSString:@"SM3"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderDigestSM3;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSM3_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSM3_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderDigestSM3_Mappings class]) {
    LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderDigestSM3_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderDigestSM3_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_init(LibOrgBouncycastleJcajceProviderDigestSM3_Mappings *self) {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSM3_Mappings *new_LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSM3_Mappings, init)
}

LibOrgBouncycastleJcajceProviderDigestSM3_Mappings *create_LibOrgBouncycastleJcajceProviderDigestSM3_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSM3_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSM3_Mappings)
