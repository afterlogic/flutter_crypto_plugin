//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/SimpleLookupTable.java
//

#ifndef SimpleLookupTable_H
#define SimpleLookupTable_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ECLookupTable.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class LibOrgBouncycastleMathEcECPoint;

@interface LibOrgBouncycastleMathEcSimpleLookupTable : NSObject < LibOrgBouncycastleMathEcECLookupTable >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                               withInt:(jint)off
                                                               withInt:(jint)len;

- (jint)getSize;

- (LibOrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcSimpleLookupTable)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcSimpleLookupTable_initWithLibOrgBouncycastleMathEcECPointArray_withInt_withInt_(LibOrgBouncycastleMathEcSimpleLookupTable *self, IOSObjectArray *points, jint off, jint len);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcSimpleLookupTable *new_LibOrgBouncycastleMathEcSimpleLookupTable_initWithLibOrgBouncycastleMathEcECPointArray_withInt_withInt_(IOSObjectArray *points, jint off, jint len) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcSimpleLookupTable *create_LibOrgBouncycastleMathEcSimpleLookupTable_initWithLibOrgBouncycastleMathEcECPointArray_withInt_withInt_(IOSObjectArray *points, jint off, jint len);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcSimpleLookupTable)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SimpleLookupTable_H
