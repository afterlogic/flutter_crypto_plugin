//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPPublicKeyRing.java
//

#ifndef PGPPublicKeyRing_H
#define PGPPublicKeyRing_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "Iterable.h"
#include "J2ObjC_header.h"
#include "PGPKeyRing.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class LibOrgBouncycastleBcpgBCPGInputStream;
@class LibOrgBouncycastleOpenpgpPGPPublicKey;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilSpliterator;
@protocol LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;

@interface LibOrgBouncycastleOpenpgpPGPPublicKeyRing : LibOrgBouncycastleOpenpgpPGPKeyRing < LibOrgBouncycastleUtilIterable > {
 @public
  id<JavaUtilList> keys_;
}

#pragma mark Public

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)encoding
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)pubKeys;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream
                         withBoolean:(jboolean)forTransfer;

- (IOSByteArray *)getEncoded;

- (IOSByteArray *)getEncodedWithBoolean:(jboolean)forTransfer;

- (id<JavaUtilIterator>)getKeysWithSignaturesByWithLong:(jlong)keyID;

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKey;

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithByteArray:(IOSByteArray *)fingerprint;

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithLong:(jlong)keyID;

- (id<JavaUtilIterator>)getPublicKeys;

+ (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)insertPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)pubRing
                                                                  withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey;

- (id<JavaUtilIterator>)iterator;

+ (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)removePublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)pubRing
                                                                  withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey;

#pragma mark Package-Private

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)readSubkeyWithLibOrgBouncycastleBcpgBCPGInputStream:(LibOrgBouncycastleBcpgBCPGInputStream *)inArg
                                 withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPPublicKeyRing)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKeyRing, keys_, id<JavaUtilList>)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *self, IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKeyRing *new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKeyRing *create_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *self, id<JavaUtilList> pubKeys);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKeyRing *new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaUtilList_(id<JavaUtilList> pubKeys) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKeyRing *create_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaUtilList_(id<JavaUtilList> pubKeys);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *self, JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKeyRing *new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKeyRing *create_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKeyRing *LibOrgBouncycastleOpenpgpPGPPublicKeyRing_insertPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pubRing, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKeyRing *LibOrgBouncycastleOpenpgpPGPPublicKeyRing_removePublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pubRing, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKeyRing_readSubkeyWithLibOrgBouncycastleBcpgBCPGInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgBCPGInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPPublicKeyRing)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PGPPublicKeyRing_H
