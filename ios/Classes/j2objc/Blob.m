//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/Blob.java
//

#include "Blob.h"
#include "BlobType.h"
#include "BlobVerifier.h"
#include "CertificateBlob.h"
#include "FirstBlob.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyBoxByteBuffer.h"
#include "KeyFingerPrintCalculator.h"
#include "PublicKeyRingBlob.h"
#include "java/lang/IllegalArgumentException.h"

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleGpgKeyboxBlob)

IOSByteArray *LibOrgBouncycastleGpgKeyboxBlob_magicBytes;

@implementation LibOrgBouncycastleGpgKeyboxBlob

+ (IOSByteArray *)magicBytes {
  return LibOrgBouncycastleGpgKeyboxBlob_magicBytes;
}

- (instancetype)initWithInt:(jint)base
                   withLong:(jlong)length
withLibOrgBouncycastleGpgKeyboxBlobType:(LibOrgBouncycastleGpgKeyboxBlobType *)type
                    withInt:(jint)version_ {
  LibOrgBouncycastleGpgKeyboxBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_(self, base, length, type, version_);
  return self;
}

+ (LibOrgBouncycastleGpgKeyboxBlob *)getInstanceWithId:(id)source
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)keyFingerPrintCalculator
           withLibOrgBouncycastleGpgKeyboxBlobVerifier:(id<LibOrgBouncycastleGpgKeyboxBlobVerifier>)blobVerifier {
  return LibOrgBouncycastleGpgKeyboxBlob_getInstanceWithId_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(source, keyFingerPrintCalculator, blobVerifier);
}

- (LibOrgBouncycastleGpgKeyboxBlobType *)getType {
  return type_;
}

- (jint)getVersion {
  return version__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleGpgKeyboxBlob;", 0x8, 1, 2, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleGpgKeyboxBlobType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLong:withLibOrgBouncycastleGpgKeyboxBlobType:withInt:);
  methods[1].selector = @selector(getInstanceWithId:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:withLibOrgBouncycastleGpgKeyboxBlobVerifier:);
  methods[2].selector = @selector(getType);
  methods[3].selector = @selector(getVersion);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "magicBytes", "[B", .constantValue.asLong = 0, 0x1c, -1, 4, -1, -1 },
    { "base_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "length_", "J", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "type_", "LLibOrgBouncycastleGpgKeyboxBlobType;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x14, 5, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLLibOrgBouncycastleGpgKeyboxBlobType;I", "getInstance", "LNSObject;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;LLibOrgBouncycastleGpgKeyboxBlobVerifier;", "LJavaIoIOException;", &LibOrgBouncycastleGpgKeyboxBlob_magicBytes, "version" };
  static const J2ObjcClassInfo _LibOrgBouncycastleGpgKeyboxBlob = { "Blob", "lib.org.bouncycastle.gpg.keybox", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleGpgKeyboxBlob;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleGpgKeyboxBlob class]) {
    LibOrgBouncycastleGpgKeyboxBlob_magicBytes = [@"KBXf" java_getBytes];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleGpgKeyboxBlob)
  }
}

@end

void LibOrgBouncycastleGpgKeyboxBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_(LibOrgBouncycastleGpgKeyboxBlob *self, jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_) {
  NSObject_init(self);
  self->base_ = base;
  self->length_ = length;
  self->type_ = type;
  self->version__ = version_;
}

LibOrgBouncycastleGpgKeyboxBlob *new_LibOrgBouncycastleGpgKeyboxBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleGpgKeyboxBlob, initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_, base, length, type, version_)
}

LibOrgBouncycastleGpgKeyboxBlob *create_LibOrgBouncycastleGpgKeyboxBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleGpgKeyboxBlob, initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_, base, length, type, version_)
}

LibOrgBouncycastleGpgKeyboxBlob *LibOrgBouncycastleGpgKeyboxBlob_getInstanceWithId_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(id source, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> keyFingerPrintCalculator, id<LibOrgBouncycastleGpgKeyboxBlobVerifier> blobVerifier) {
  LibOrgBouncycastleGpgKeyboxBlob_initialize();
  if (source == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot take get instance of null");
  }
  LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *buffer = LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_wrapWithId_(source);
  if (![((LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *) nil_chk(buffer)) hasRemaining]) {
    return nil;
  }
  jint base = [buffer position];
  jlong len = [buffer u32];
  LibOrgBouncycastleGpgKeyboxBlobType *type = LibOrgBouncycastleGpgKeyboxBlobType_fromByteWithInt_([buffer u8]);
  jint version_ = [buffer u8];
  switch ([type ordinal]) {
    case LibOrgBouncycastleGpgKeyboxBlobType_Enum_EMPTY_BLOB:
    break;
    case LibOrgBouncycastleGpgKeyboxBlobType_Enum_FIRST_BLOB:
    return LibOrgBouncycastleGpgKeyboxFirstBlob_parseContentWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_(base, len, type, version_, buffer);
    case LibOrgBouncycastleGpgKeyboxBlobType_Enum_X509_BLOB:
    return LibOrgBouncycastleGpgKeyboxCertificateBlob_parseContentWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(base, len, type, version_, buffer, blobVerifier);
    case LibOrgBouncycastleGpgKeyboxBlobType_Enum_OPEN_PGP_BLOB:
    return LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_parseContentWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(base, len, type, version_, buffer, keyFingerPrintCalculator, blobVerifier);
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleGpgKeyboxBlob)
