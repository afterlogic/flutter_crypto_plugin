//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/rsa/BCRSAPrivateCrtKey.java
//

#ifndef BCRSAPrivateCrtKey_H
#define BCRSAPrivateCrtKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BCRSAPrivateKey.h"
#include "J2ObjC_header.h"
#include "java/security/interfaces/RSAPrivateCrtKey.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecuritySpecRSAPrivateCrtKeySpec;
@class JavaSecuritySpecRSAPrivateKeySpec;
@class LibOrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class LibOrgBouncycastleAsn1PkcsRSAPrivateKey;
@class LibOrgBouncycastleCryptoParamsRSAKeyParameters;
@class LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters;
@protocol JavaSecurityInterfacesRSAPrivateKey;

@interface LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey : LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateKey < JavaSecurityInterfacesRSAPrivateCrtKey >
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (JavaMathBigInteger *)getCrtCoefficient;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (JavaMathBigInteger *)getPrimeExponentP;

- (JavaMathBigInteger *)getPrimeExponentQ;

- (JavaMathBigInteger *)getPrimeP;

- (JavaMathBigInteger *)getPrimeQ;

- (JavaMathBigInteger *)getPublicExponent;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)info;

- (instancetype __nonnull)initWithJavaSecurityInterfacesRSAPrivateCrtKey:(id<JavaSecurityInterfacesRSAPrivateCrtKey>)key;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters:(LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *)key;

- (instancetype __nonnull)initWithJavaSecuritySpecRSAPrivateCrtKeySpec:(JavaSecuritySpecRSAPrivateCrtKeySpec *)spec;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey:(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *)key;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaSecurityInterfacesRSAPrivateKey:(id<JavaSecurityInterfacesRSAPrivateKey>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaSecuritySpecRSAPrivateKeySpec:(JavaSecuritySpecRSAPrivateKeySpec *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsRSAKeyParameters:(LibOrgBouncycastleCryptoParamsRSAKeyParameters *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey)

inline jlong LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_get_serialVersionUID(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_serialVersionUID 7834723820638524718LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, serialVersionUID, jlong)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *key);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_(LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_(LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *key);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecuritySpecRSAPrivateCrtKeySpec_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, JavaSecuritySpecRSAPrivateCrtKeySpec *spec);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecuritySpecRSAPrivateCrtKeySpec_(JavaSecuritySpecRSAPrivateCrtKeySpec *spec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecuritySpecRSAPrivateCrtKeySpec_(JavaSecuritySpecRSAPrivateCrtKeySpec *spec);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecurityInterfacesRSAPrivateCrtKey_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, id<JavaSecurityInterfacesRSAPrivateCrtKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecurityInterfacesRSAPrivateCrtKey_(id<JavaSecurityInterfacesRSAPrivateCrtKey> key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecurityInterfacesRSAPrivateCrtKey_(id<JavaSecurityInterfacesRSAPrivateCrtKey> key);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, LibOrgBouncycastleAsn1PkcsRSAPrivateKey *key);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *key);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BCRSAPrivateCrtKey_H
