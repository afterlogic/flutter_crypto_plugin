//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/io/InvalidCipherTextIOException.java
//

#ifndef InvalidCipherTextIOException_H
#define InvalidCipherTextIOException_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CipherIOException.h"
#include "J2ObjC_header.h"

@class JavaLangThrowable;

@interface LibOrgBouncycastleCryptoIoInvalidCipherTextIOException : LibOrgBouncycastleCryptoIoCipherIOException

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoIoInvalidCipherTextIOException)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(LibOrgBouncycastleCryptoIoInvalidCipherTextIOException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoInvalidCipherTextIOException *new_LibOrgBouncycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoInvalidCipherTextIOException *create_LibOrgBouncycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoIoInvalidCipherTextIOException)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // InvalidCipherTextIOException_H
