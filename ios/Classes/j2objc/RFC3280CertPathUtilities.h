//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/RFC3280CertPathUtilities.java
//

#ifndef RFC3280CertPathUtilities_H
#define RFC3280CertPathUtilities_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaSecurityCertCertPath;
@class JavaSecurityCertX509CRL;
@class JavaSecurityCertX509Certificate;
@class JavaUtilDate;
@class LibOrgBouncycastleAsn1X500X500Name;
@class LibOrgBouncycastleAsn1X509DistributionPoint;
@class LibOrgBouncycastleJcajcePKIXExtendedParameters;
@class LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator;
@class LibOrgBouncycastleJceProviderJceProviderCertStatus;
@class LibOrgBouncycastleJceProviderPKIXPolicyNode;
@class LibOrgBouncycastleJceProviderReasonsMask;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol LibOrgBouncycastleJcajceUtilJcaJceHelper;

@interface LibOrgBouncycastleJceProviderRFC3280CertPathUtilities : NSObject
@property (readonly, copy, class) NSString *CERTIFICATE_POLICIES NS_SWIFT_NAME(CERTIFICATE_POLICIES);
@property (readonly, copy, class) NSString *POLICY_MAPPINGS NS_SWIFT_NAME(POLICY_MAPPINGS);
@property (readonly, copy, class) NSString *INHIBIT_ANY_POLICY NS_SWIFT_NAME(INHIBIT_ANY_POLICY);
@property (readonly, copy, class) NSString *ISSUING_DISTRIBUTION_POINT NS_SWIFT_NAME(ISSUING_DISTRIBUTION_POINT);
@property (readonly, copy, class) NSString *FRESHEST_CRL NS_SWIFT_NAME(FRESHEST_CRL);
@property (readonly, copy, class) NSString *DELTA_CRL_INDICATOR NS_SWIFT_NAME(DELTA_CRL_INDICATOR);
@property (readonly, copy, class) NSString *POLICY_CONSTRAINTS NS_SWIFT_NAME(POLICY_CONSTRAINTS);
@property (readonly, copy, class) NSString *BASIC_CONSTRAINTS NS_SWIFT_NAME(BASIC_CONSTRAINTS);
@property (readonly, copy, class) NSString *CRL_DISTRIBUTION_POINTS NS_SWIFT_NAME(CRL_DISTRIBUTION_POINTS);
@property (readonly, copy, class) NSString *SUBJECT_ALTERNATIVE_NAME NS_SWIFT_NAME(SUBJECT_ALTERNATIVE_NAME);
@property (readonly, copy, class) NSString *NAME_CONSTRAINTS NS_SWIFT_NAME(NAME_CONSTRAINTS);
@property (readonly, copy, class) NSString *AUTHORITY_KEY_IDENTIFIER NS_SWIFT_NAME(AUTHORITY_KEY_IDENTIFIER);
@property (readonly, copy, class) NSString *KEY_USAGE NS_SWIFT_NAME(KEY_USAGE);
@property (readonly, copy, class) NSString *CRL_NUMBER NS_SWIFT_NAME(CRL_NUMBER);
@property (readonly, copy, class) NSString *ANY_POLICY NS_SWIFT_NAME(ANY_POLICY);
@property (readonly, class) jint KEY_CERT_SIGN NS_SWIFT_NAME(KEY_CERT_SIGN);
@property (readonly, class) jint CRL_SIGN NS_SWIFT_NAME(CRL_SIGN);
@property (readonly, class) IOSObjectArray *crlReasons NS_SWIFT_NAME(crlReasons);

+ (NSString *)CERTIFICATE_POLICIES;

+ (NSString *)POLICY_MAPPINGS;

+ (NSString *)INHIBIT_ANY_POLICY;

+ (NSString *)ISSUING_DISTRIBUTION_POINT;

+ (NSString *)FRESHEST_CRL;

+ (NSString *)DELTA_CRL_INDICATOR;

+ (NSString *)POLICY_CONSTRAINTS;

+ (NSString *)BASIC_CONSTRAINTS;

+ (NSString *)CRL_DISTRIBUTION_POINTS;

+ (NSString *)SUBJECT_ALTERNATIVE_NAME;

+ (NSString *)NAME_CONSTRAINTS;

+ (NSString *)AUTHORITY_KEY_IDENTIFIER;

+ (NSString *)KEY_USAGE;

+ (NSString *)CRL_NUMBER;

+ (NSString *)ANY_POLICY;

+ (jint)KEY_CERT_SIGN;

+ (jint)CRL_SIGN;

+ (IOSObjectArray *)crlReasons;

#pragma mark Protected

+ (void)checkCRLsWithLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                   withJavaUtilDate:(JavaUtilDate *)validDate
                                withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
                                          withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                                   withJavaUtilList:(id<JavaUtilList>)certPathCerts
                       withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper;

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)prepareCertBWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                  withInt:(jint)index
                                                                    withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                                  withInt:(jint)policyMapping;

+ (void)prepareNextCertAWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index;

+ (void)prepareNextCertGWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator:(LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *)nameConstraintValidator;

+ (jint)prepareNextCertH1WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)explicitPolicy;

+ (jint)prepareNextCertH2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)policyMapping;

+ (jint)prepareNextCertH3WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)inhibitAnyPolicy;

+ (jint)prepareNextCertI1WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)explicitPolicy;

+ (jint)prepareNextCertI2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)policyMapping;

+ (jint)prepareNextCertJWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)inhibitAnyPolicy;

+ (void)prepareNextCertKWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index;

+ (jint)prepareNextCertLWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)maxPathLength;

+ (jint)prepareNextCertMWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)maxPathLength;

+ (void)prepareNextCertNWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index;

+ (void)prepareNextCertOWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                     withJavaUtilSet:(id<JavaUtilSet>)criticalExtensions
                                    withJavaUtilList:(id<JavaUtilList>)pathCheckers;

+ (void)processCertAWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                         withInt:(jint)index
                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                     withBoolean:(jboolean)verificationAlreadyPerformed
          withLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)workingIssuerName
             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
    withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper;

+ (void)processCertBCWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                          withInt:(jint)index
withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator:(LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *)nameConstraintValidator;

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)processCertDWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                  withInt:(jint)index
                                                                          withJavaUtilSet:(id<JavaUtilSet>)acceptablePolicies
                                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                    withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                                                  withInt:(jint)inhibitAnyPolicy;

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)processCertEWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                  withInt:(jint)index
                                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree;

+ (void)processCertFWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                         withInt:(jint)index
 withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                         withInt:(jint)explicitPolicy;

+ (id<JavaUtilSet>)processCRLA1iWithJavaUtilDate:(JavaUtilDate *)currentDate
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                     withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

+ (IOSObjectArray *)processCRLA1iiWithJavaUtilDate:(JavaUtilDate *)currentDate
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
               withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                       withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

+ (void)processCRLB1WithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
                                                             withId:(id)cert
                                        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

+ (void)processCRLB2WithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
                                                             withId:(id)cert
                                        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

+ (void)processCRLCWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)deltaCRL
                   withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completeCRL
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams;

+ (LibOrgBouncycastleJceProviderReasonsMask *)processCRLDWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                     withLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp;

+ (id<JavaUtilSet>)processCRLFWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                                   withId:(id)cert
                      withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)defaultCRLSignCert
                                withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)defaultCRLSignKey
       withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                         withJavaUtilList:(id<JavaUtilList>)certPathCerts
             withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper;

+ (id<JavaSecurityPublicKey>)processCRLGWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                                    withJavaUtilSet:(id<JavaUtilSet>)keys;

+ (JavaSecurityCertX509CRL *)processCRLHWithJavaUtilSet:(id<JavaUtilSet>)deltacrls
                              withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

+ (void)processCRLIWithJavaUtilDate:(JavaUtilDate *)validDate
        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)deltacrl
                             withId:(id)cert
withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams;

+ (void)processCRLJWithJavaUtilDate:(JavaUtilDate *)validDate
        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completecrl
                             withId:(id)cert
withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus;

+ (jint)wrapupCertAWithInt:(jint)explicitPolicy
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

+ (jint)wrapupCertBWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                        withInt:(jint)index
                                        withInt:(jint)explicitPolicy;

+ (void)wrapupCertFWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                        withInt:(jint)index
                               withJavaUtilList:(id<JavaUtilList>)pathCheckers
                                withJavaUtilSet:(id<JavaUtilSet>)criticalExtensions;

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)wrapupCertGWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                      withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                                                         withJavaUtilSet:(id<JavaUtilSet>)userInitialPolicySet
                                                                                 withInt:(jint)index
                                                                   withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                         withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                         withJavaUtilSet:(id<JavaUtilSet>)acceptablePolicies;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_CERTIFICATE_POLICIES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CERTIFICATE_POLICIES, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_POLICY_MAPPINGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, POLICY_MAPPINGS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_INHIBIT_ANY_POLICY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, INHIBIT_ANY_POLICY, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_ISSUING_DISTRIBUTION_POINT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_FRESHEST_CRL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, FRESHEST_CRL, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_DELTA_CRL_INDICATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_POLICY_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, POLICY_CONSTRAINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_BASIC_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, BASIC_CONSTRAINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_CRL_DISTRIBUTION_POINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CRL_DISTRIBUTION_POINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_SUBJECT_ALTERNATIVE_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, SUBJECT_ALTERNATIVE_NAME, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_NAME_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, NAME_CONSTRAINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_AUTHORITY_KEY_IDENTIFIER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, AUTHORITY_KEY_IDENTIFIER, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_KEY_USAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, KEY_USAGE, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_CRL_NUMBER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CRL_NUMBER, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_ANY_POLICY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, ANY_POLICY, NSString *)

inline jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_KEY_CERT_SIGN(void);
#define LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_CERT_SIGN 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, KEY_CERT_SIGN, jint)

inline jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_CRL_SIGN(void);
#define LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_SIGN 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CRL_SIGN, jint)

inline IOSObjectArray *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_crlReasons(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_crlReasons;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, crlReasons, IOSObjectArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_init(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderRFC3280CertPathUtilities *new_LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderRFC3280CertPathUtilities *create_LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id cert, JavaSecurityCertX509CRL *crl);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id cert, JavaSecurityCertX509CRL *crl);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderReasonsMask *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withLibOrgBouncycastleAsn1X509DistributionPoint_(JavaSecurityCertX509CRL *crl, LibOrgBouncycastleAsn1X509DistributionPoint *dp);

FOUNDATION_EXPORT id<JavaUtilSet> LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(JavaSecurityCertX509CRL *crl, id cert, JavaSecurityCertX509Certificate *defaultCRLSignCert, id<JavaSecurityPublicKey> defaultCRLSignKey, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(JavaSecurityCertX509CRL *crl, id<JavaUtilSet> keys);

FOUNDATION_EXPORT JavaSecurityCertX509CRL *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(id<JavaUtilSet> deltacrls, id<JavaSecurityPublicKey> key);

FOUNDATION_EXPORT id<JavaUtilSet> LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLA1iWithJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(JavaUtilDate *currentDate, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaSecurityCertX509CRL *crl);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLA1iiWithJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(JavaUtilDate *currentDate, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaSecurityCertX509CRL *crl);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(JavaSecurityCertX509CRL *deltaCRL, JavaSecurityCertX509CRL *completeCRL, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *deltacrl, id cert, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *completecrl, id cert, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareCertBWithJavaSecurityCertCertPath_withInt_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withInt_(JavaSecurityCertCertPath *certPath, jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, jint policyMapping);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertAWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertFWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withInt_(JavaSecurityCertCertPath *certPath, jint index, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, jint explicitPolicy);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertEWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(JavaSecurityCertCertPath *certPath, jint index, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertBCWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_(JavaSecurityCertCertPath *certPath, jint index, LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *nameConstraintValidator);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertDWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withInt_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilSet> acceptablePolicies, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, jint inhibitAnyPolicy);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertAWithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withInt_withJavaSecurityPublicKey_withBoolean_withLibOrgBouncycastleAsn1X500X500Name_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(JavaSecurityCertCertPath *certPath, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, jint index, id<JavaSecurityPublicKey> workingPublicKey, jboolean verificationAlreadyPerformed, LibOrgBouncycastleAsn1X500X500Name *workingIssuerName, JavaSecurityCertX509Certificate *sign, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI1WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI2WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint policyMapping);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertGWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_(JavaSecurityCertCertPath *certPath, jint index, LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *nameConstraintValidator);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLsWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *sign, id<JavaSecurityPublicKey> workingPublicKey, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertJWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint inhibitAnyPolicy);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertKWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertLWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint maxPathLength);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertMWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint maxPathLength);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertNWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertOWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withJavaUtilList_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilSet> criticalExtensions, id<JavaUtilList> pathCheckers);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH1WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH2WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint policyMapping);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH3WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint inhibitAnyPolicy);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertAWithInt_withJavaSecurityCertX509Certificate_(jint explicitPolicy, JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertBWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertFWithJavaSecurityCertCertPath_withInt_withJavaUtilList_withJavaUtilSet_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilList> pathCheckers, id<JavaUtilSet> criticalExtensions);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertGWithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilSet_withInt_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilSet_(JavaSecurityCertCertPath *certPath, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, id<JavaUtilSet> userInitialPolicySet, jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, id<JavaUtilSet> acceptablePolicies);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // RFC3280CertPathUtilities_H
