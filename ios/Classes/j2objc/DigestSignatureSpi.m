//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/rsa/DigestSignatureSpi.java
//

#include "ASN1Encoding.h"
#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "AsymmetricBlockCipher.h"
#include "CipherParameters.h"
#include "DERNull.h"
#include "Digest.h"
#include "DigestFactory.h"
#include "DigestInfo.h"
#include "DigestSignatureSpi.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MD2Digest.h"
#include "MD4Digest.h"
#include "NISTObjectIdentifiers.h"
#include "NullDigest.h"
#include "OIWObjectIdentifiers.h"
#include "PKCS1Encoding.h"
#include "PKCSObjectIdentifiers.h"
#include "RIPEMD128Digest.h"
#include "RIPEMD160Digest.h"
#include "RIPEMD256Digest.h"
#include "RSABlindedEngine.h"
#include "RSAKeyParameters.h"
#include "RSAUtil.h"
#include "TeleTrusTObjectIdentifiers.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Exception.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SignatureException.h"
#include "java/security/SignatureSpi.h"
#include "java/security/interfaces/RSAPrivateKey.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId_;
}

- (NSString *)getTypeWithId:(id)o;

- (IOSByteArray *)derEncodeWithByteArray:(IOSByteArray *)hash_;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi, cipher_, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi, algId_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

__attribute__((unused)) static NSString *LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_getTypeWithId_(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *self, id o);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_derEncodeWithByteArray_(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *self, IOSByteArray *hash_);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
     withLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, digest, cipher);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)objId
                                withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                 withLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, objId, digest, cipher);
  return self;
}

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  if (!([JavaSecurityInterfacesRSAPublicKey_class_() isInstance:publicKey])) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$", @"Supplied key (", LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_getTypeWithId_(self, publicKey), @") is not a RSAPublicKey instance"));
  }
  id<LibOrgBouncycastleCryptoCipherParameters> param = LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_generatePublicKeyParameterWithJavaSecurityInterfacesRSAPublicKey_((id<JavaSecurityInterfacesRSAPublicKey>) cast_check(publicKey, JavaSecurityInterfacesRSAPublicKey_class_()));
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param];
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey {
  if (!([JavaSecurityInterfacesRSAPrivateKey_class_() isInstance:privateKey])) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$", @"Supplied key (", LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_getTypeWithId_(self, privateKey), @") is not a RSAPrivateKey instance"));
  }
  id<LibOrgBouncycastleCryptoCipherParameters> param = LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_generatePrivateKeyParameterWithJavaSecurityInterfacesRSAPrivateKey_((id<JavaSecurityInterfacesRSAPrivateKey>) cast_check(privateKey, JavaSecurityInterfacesRSAPrivateKey_class_()));
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param];
}

- (NSString *)getTypeWithId:(id)o {
  return LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_getTypeWithId_(self, o);
}

- (void)engineUpdateWithByte:(jbyte)b {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:b withInt:off withInt:len];
}

- (IOSByteArray *)engineSign {
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  @try {
    IOSByteArray *bytes = LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_derEncodeWithByteArray_(self, hash_);
    return [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:bytes withInt:0 withInt:((IOSByteArray *) nil_chk(bytes))->size_];
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"key too small for signature type");
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_([e description]);
  }
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes {
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  IOSByteArray *sig;
  IOSByteArray *expected;
  @try {
    sig = [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:sigBytes withInt:0 withInt:((IOSByteArray *) nil_chk(sigBytes))->size_];
    expected = LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_derEncodeWithByteArray_(self, hash_);
  }
  @catch (JavaLangException *e) {
    return false;
  }
  if (((IOSByteArray *) nil_chk(sig))->size_ == ((IOSByteArray *) nil_chk(expected))->size_) {
    return LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(sig, expected);
  }
  else if (sig->size_ == expected->size_ - 2) {
    *IOSByteArray_GetRef(expected, 1) -= 2;
    *IOSByteArray_GetRef(expected, 3) -= 2;
    jint sigOffset = 4 + IOSByteArray_Get(expected, 3);
    jint expectedOffset = sigOffset + 2;
    jint nonEqual = 0;
    for (jint i = 0; i < expected->size_ - expectedOffset; i++) {
      nonEqual |= (IOSByteArray_Get(sig, sigOffset + i) ^ IOSByteArray_Get(expected, expectedOffset + i));
    }
    for (jint i = 0; i < sigOffset; i++) {
      nonEqual |= (IOSByteArray_Get(sig, i) ^ IOSByteArray_Get(expected, i));
    }
    return nonEqual == 0;
  }
  else {
    LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(expected, expected);
    return false;
  }
}

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)param {
  return nil;
}

- (JavaSecurityAlgorithmParameters *)engineGetParameters {
  return nil;
}

- (IOSByteArray *)derEncodeWithByteArray:(IOSByteArray *)hash_ {
  return LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_derEncodeWithByteArray_(self, hash_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 12, 11, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 11, -1, -1, -1 },
    { NULL, "Z", 0x4, 13, 14, 11, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 20, 14, 21, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleCryptoAsymmetricBlockCipher:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleCryptoAsymmetricBlockCipher:);
  methods[2].selector = @selector(engineInitVerifyWithJavaSecurityPublicKey:);
  methods[3].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:);
  methods[4].selector = @selector(getTypeWithId:);
  methods[5].selector = @selector(engineUpdateWithByte:);
  methods[6].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(engineSign);
  methods[8].selector = @selector(engineVerifyWithByteArray:);
  methods[9].selector = @selector(engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[10].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[11].selector = @selector(engineGetParameterWithNSString:);
  methods[12].selector = @selector(engineGetParameters);
  methods[13].selector = @selector(derEncodeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoAsymmetricBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "algId_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleCryptoAsymmetricBlockCipher;", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleCryptoAsymmetricBlockCipher;", "engineInitVerify", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "engineInitSign", "LJavaSecurityPrivateKey;", "getType", "LNSObject;", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "[B", "engineSetParameter", "LJavaSecuritySpecAlgorithmParameterSpec;", "LNSString;LNSObject;", "engineGetParameter", "LNSString;", "derEncode", "LJavaIoIOException;", "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256;LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi = { "DigestSignatureSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, fields, 7, 0x1, 14, 3, -1, 22, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *self, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  JavaSecuritySignatureSpi_init(self);
  self->digest_ = digest;
  self->cipher_ = cipher;
  self->algId_ = nil;
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi, initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_, digest, cipher)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi, initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_, digest, cipher)
}

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *objId, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  JavaSecuritySignatureSpi_init(self);
  self->digest_ = digest;
  self->cipher_ = cipher;
  self->algId_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(objId, JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *objId, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi, initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_, objId, digest, cipher)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *objId, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi, initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_, objId, digest, cipher)
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_getTypeWithId_(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *self, id o) {
  if (o == nil) {
    return nil;
  }
  return [[o java_getClass] getName];
}

IOSByteArray *LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_derEncodeWithByteArray_(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi *self, IOSByteArray *hash_) {
  if (self->algId_ == nil) {
    return hash_;
  }
  LibOrgBouncycastleAsn1X509DigestInfo *dInfo = new_LibOrgBouncycastleAsn1X509DigestInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(self->algId_, hash_);
  return [dInfo getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1 = { "SHA1", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, idSHA1), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA1)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224 = { "SHA224", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha224), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA224)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256 = { "SHA256", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA256)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384 = { "SHA384", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha384), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA384)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512 = { "SHA512", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224 = { "SHA512_224", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512_224), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512_224(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_224)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256 = { "SHA512_256", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512_256), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512_256(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA512_256)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224 = { "SHA3_224", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha3_224), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA3_224(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_224)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256 = { "SHA3_256", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha3_256), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA3_256(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_256)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384 = { "SHA3_384", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha3_384), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA3_384(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_384)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512 = { "SHA3_512", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha3_512), LibOrgBouncycastleCryptoUtilDigestFactory_createSHA3_512(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_SHA3_512)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2 = { "MD2", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, md2), new_LibOrgBouncycastleCryptoDigestsMD2Digest_init(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD2)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4 = { "MD4", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, md4), new_LibOrgBouncycastleCryptoDigestsMD4Digest_init(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD4)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5 = { "MD5", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, md5), LibOrgBouncycastleCryptoUtilDigestFactory_createMD5(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_MD5)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160 = { "RIPEMD160", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd160), new_LibOrgBouncycastleCryptoDigestsRIPEMD160Digest_init(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD160)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128 = { "RIPEMD128", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd128), new_LibOrgBouncycastleCryptoDigestsRIPEMD128Digest_init(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD128)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256 = { "RIPEMD256", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, JreLoadStatic(LibOrgBouncycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd256), new_LibOrgBouncycastleCryptoDigestsRIPEMD256Digest_init(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256 *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256 *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_RIPEMD256)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA = { "noneRSA", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, new_LibOrgBouncycastleCryptoDigestsNullDigest_init(), new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaDigestSignatureSpi_noneRSA)
