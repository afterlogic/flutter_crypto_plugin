//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/G3413CBCBlockCipher.java
//

#include "Arrays.h"
#include "BlockCipher.h"
#include "CipherParameters.h"
#include "G3413CBCBlockCipher.h"
#include "GOST3413CipherUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithIV.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoModesG3413CBCBlockCipher () {
 @public
  jint m_;
  jint blockSize_;
  IOSByteArray *R_;
  IOSByteArray *R_init_;
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_;
  jboolean initialized_;
  jboolean forEncryption_;
}

- (void)initArrays OBJC_METHOD_FAMILY_NONE;

- (void)setupDefaultParams;

- (jint)encryptWithByteArray:(IOSByteArray *)inArg
                     withInt:(jint)inOff
               withByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (jint)decryptWithByteArray:(IOSByteArray *)inArg
                     withInt:(jint)inOff
               withByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (void)generateRWithByteArray:(IOSByteArray *)C;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher, R_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher, R_init_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher, cipher_, id<LibOrgBouncycastleCryptoBlockCipher>)

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initArrays(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_setupDefaultParams(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_encryptWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_decryptWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_generateRWithByteArray_(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self, IOSByteArray *C);

@implementation LibOrgBouncycastleCryptoModesG3413CBCBlockCipher

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  self->forEncryption_ = forEncryption;
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithIV *ivParam = (LibOrgBouncycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    if (((IOSByteArray *) nil_chk(iv))->size_ < blockSize_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Parameter m must blockSize <= m");
    }
    self->m_ = iv->size_;
    LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initArrays(self);
    R_init_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(iv);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R_init_, 0, R_, 0, ((IOSByteArray *) nil_chk(R_init_))->size_);
    if ([ivParam getParameters] != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:[ivParam getParameters]];
    }
  }
  else {
    LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_setupDefaultParams(self);
    LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initArrays(self);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R_init_, 0, R_, 0, ((IOSByteArray *) nil_chk(R_init_))->size_);
    if (params != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:params];
    }
  }
  initialized_ = true;
}

- (void)initArrays {
  LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initArrays(self);
}

- (void)setupDefaultParams {
  LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_setupDefaultParams(self);
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getAlgorithmName], @"/CBC");
}

- (jint)getBlockSize {
  return blockSize_;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return (forEncryption_) ? LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_encryptWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_decryptWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)encryptWithByteArray:(IOSByteArray *)inArg
                     withInt:(jint)inOff
               withByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  return LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_encryptWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)decryptWithByteArray:(IOSByteArray *)inArg
                     withInt:(jint)inOff
               withByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  return LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_decryptWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)generateRWithByteArray:(IOSByteArray *)C {
  LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_generateRWithByteArray_(self, C);
}

- (void)reset {
  if (initialized_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R_init_, 0, R_, 0, ((IOSByteArray *) nil_chk(R_init_))->size_);
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(initArrays);
  methods[3].selector = @selector(setupDefaultParams);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getBlockSize);
  methods[6].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(encryptWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(decryptWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(generateRWithByteArray:);
  methods[10].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "R_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "R_init_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "encrypt", "decrypt", "generateR", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesG3413CBCBlockCipher = { "G3413CBCBlockCipher", "lib.org.bouncycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 11, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesG3413CBCBlockCipher;
}

@end

void LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  NSObject_init(self);
  self->initialized_ = false;
  self->blockSize_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  self->cipher_ = cipher;
}

LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *new_LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *create_LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

void LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_initArrays(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self) {
  self->R_ = [IOSByteArray newArrayWithLength:self->m_];
  self->R_init_ = [IOSByteArray newArrayWithLength:self->m_];
}

void LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_setupDefaultParams(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self) {
  self->m_ = self->blockSize_;
}

jint LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_encryptWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  IOSByteArray *msb = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_MSBWithByteArray_withInt_(self->R_, self->blockSize_);
  IOSByteArray *input = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_copyFromInputWithByteArray_withInt_withInt_(inArg, self->blockSize_, inOff);
  IOSByteArray *sum = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_sumWithByteArray_withByteArray_(input, msb);
  IOSByteArray *c = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(sum))->size_];
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:sum withInt:0 withByteArray:c withInt:0];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, outArg, outOff, c->size_);
  if (((IOSByteArray *) nil_chk(outArg))->size_ > (outOff + sum->size_)) {
    LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_generateRWithByteArray_(self, c);
  }
  return c->size_;
}

jint LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_decryptWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  IOSByteArray *msb = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_MSBWithByteArray_withInt_(self->R_, self->blockSize_);
  IOSByteArray *input = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_copyFromInputWithByteArray_withInt_withInt_(inArg, self->blockSize_, inOff);
  IOSByteArray *c = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(input))->size_];
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:input withInt:0 withByteArray:c withInt:0];
  IOSByteArray *sum = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_sumWithByteArray_withByteArray_(c, msb);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sum, 0, outArg, outOff, ((IOSByteArray *) nil_chk(sum))->size_);
  if (((IOSByteArray *) nil_chk(outArg))->size_ > (outOff + sum->size_)) {
    LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_generateRWithByteArray_(self, input);
  }
  return sum->size_;
}

void LibOrgBouncycastleCryptoModesG3413CBCBlockCipher_generateRWithByteArray_(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher *self, IOSByteArray *C) {
  IOSByteArray *buf = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_LSBWithByteArray_withInt_(self->R_, self->m_ - self->blockSize_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, self->R_, 0, ((IOSByteArray *) nil_chk(buf))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(C, 0, self->R_, buf->size_, self->m_ - buf->size_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesG3413CBCBlockCipher)
