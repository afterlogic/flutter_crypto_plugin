//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/HashFunctions.java
//

#ifndef HashFunctions_H
#define HashFunctions_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastlePqcCryptoSphincsHashFunctions : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)dig256;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)dig256
                              withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)dig512;

- (id<LibOrgBouncycastleCryptoDigest>)getMessageHash;

- (jint)hash_2n_nWithByteArray:(IOSByteArray *)outArg
                       withInt:(jint)outOff
                 withByteArray:(IOSByteArray *)inArg
                       withInt:(jint)inOff;

- (jint)hash_2n_n_maskWithByteArray:(IOSByteArray *)outArg
                            withInt:(jint)outOff
                      withByteArray:(IOSByteArray *)inArg
                            withInt:(jint)inOff
                      withByteArray:(IOSByteArray *)mask
                            withInt:(jint)maskOff;

- (jint)hash_n_nWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                withByteArray:(IOSByteArray *)inArg
                      withInt:(jint)inOff;

- (jint)hash_n_n_maskWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                     withByteArray:(IOSByteArray *)inArg
                           withInt:(jint)inOff
                     withByteArray:(IOSByteArray *)mask
                           withInt:(jint)maskOff;

- (jint)varlen_hashWithByteArray:(IOSByteArray *)outArg
                         withInt:(jint)outOff
                   withByteArray:(IOSByteArray *)inArg
                         withInt:(jint)inLen;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcCryptoSphincsHashFunctions)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsHashFunctions_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *self, id<LibOrgBouncycastleCryptoDigest> dig256);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsHashFunctions *new_LibOrgBouncycastlePqcCryptoSphincsHashFunctions_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> dig256) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsHashFunctions *create_LibOrgBouncycastlePqcCryptoSphincsHashFunctions_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> dig256);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsHashFunctions_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *self, id<LibOrgBouncycastleCryptoDigest> dig256, id<LibOrgBouncycastleCryptoDigest> dig512);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsHashFunctions *new_LibOrgBouncycastlePqcCryptoSphincsHashFunctions_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> dig256, id<LibOrgBouncycastleCryptoDigest> dig512) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsHashFunctions *create_LibOrgBouncycastlePqcCryptoSphincsHashFunctions_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> dig256, id<LibOrgBouncycastleCryptoDigest> dig512);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoSphincsHashFunctions)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // HashFunctions_H
