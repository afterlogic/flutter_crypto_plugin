//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/ECKeyUtil.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "BouncyCastleProvider.h"
#include "CryptoProObjectIdentifiers.h"
#include "DERBitString.h"
#include "ECCurve.h"
#include "ECKeyUtil.h"
#include "ECParameterSpec.h"
#include "ECPoint.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceUtilECUtil.h"
#include "PrivateKeyInfo.h"
#include "ProviderConfiguration.h"
#include "SubjectPublicKeyInfo.h"
#include "X962Parameters.h"
#include "X9ECParameters.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/security/KeyFactory.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/PrivateKey.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Security.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/X509EncodedKeySpec.h"

@interface LibOrgBouncycastleJceECKeyUtil_UnexpectedException : JavaLangRuntimeException {
 @public
  JavaLangThrowable *cause_UnexpectedException_;
}

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

- (JavaLangThrowable *)getCause;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceECKeyUtil_UnexpectedException)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceECKeyUtil_UnexpectedException, cause_UnexpectedException_, JavaLangThrowable *)

__attribute__((unused)) static void LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(LibOrgBouncycastleJceECKeyUtil_UnexpectedException *self, JavaLangThrowable *cause);

__attribute__((unused)) static LibOrgBouncycastleJceECKeyUtil_UnexpectedException *new_LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJceECKeyUtil_UnexpectedException *create_LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceECKeyUtil_UnexpectedException)

@implementation LibOrgBouncycastleJceECKeyUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceECKeyUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaSecurityPublicKey>)publicToExplicitParametersWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                                                                    withNSString:(NSString *)providerName {
  return LibOrgBouncycastleJceECKeyUtil_publicToExplicitParametersWithJavaSecurityPublicKey_withNSString_(key, providerName);
}

+ (id<JavaSecurityPublicKey>)publicToExplicitParametersWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                                                        withJavaSecurityProvider:(JavaSecurityProvider *)provider {
  return LibOrgBouncycastleJceECKeyUtil_publicToExplicitParametersWithJavaSecurityPublicKey_withJavaSecurityProvider_(key, provider);
}

+ (id<JavaSecurityPrivateKey>)privateToExplicitParametersWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                                       withNSString:(NSString *)providerName {
  return LibOrgBouncycastleJceECKeyUtil_privateToExplicitParametersWithJavaSecurityPrivateKey_withNSString_(key, providerName);
}

+ (id<JavaSecurityPrivateKey>)privateToExplicitParametersWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                           withJavaSecurityProvider:(JavaSecurityProvider *)provider {
  return LibOrgBouncycastleJceECKeyUtil_privateToExplicitParametersWithJavaSecurityPrivateKey_withJavaSecurityProvider_(key, provider);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x9, 0, 3, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x9, 5, 6, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x9, 5, 7, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(publicToExplicitParametersWithJavaSecurityPublicKey:withNSString:);
  methods[2].selector = @selector(publicToExplicitParametersWithJavaSecurityPublicKey:withJavaSecurityProvider:);
  methods[3].selector = @selector(privateToExplicitParametersWithJavaSecurityPrivateKey:withNSString:);
  methods[4].selector = @selector(privateToExplicitParametersWithJavaSecurityPrivateKey:withJavaSecurityProvider:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "publicToExplicitParameters", "LJavaSecurityPublicKey;LNSString;", "LJavaLangIllegalArgumentException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "LJavaSecurityPublicKey;LJavaSecurityProvider;", "LJavaLangIllegalArgumentException;LJavaSecurityNoSuchAlgorithmException;", "privateToExplicitParameters", "LJavaSecurityPrivateKey;LNSString;", "LJavaSecurityPrivateKey;LJavaSecurityProvider;", "LLibOrgBouncycastleJceECKeyUtil_UnexpectedException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceECKeyUtil = { "ECKeyUtil", "lib.org.bouncycastle.jce", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, 8, -1, -1, -1 };
  return &_LibOrgBouncycastleJceECKeyUtil;
}

@end

void LibOrgBouncycastleJceECKeyUtil_init(LibOrgBouncycastleJceECKeyUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJceECKeyUtil *new_LibOrgBouncycastleJceECKeyUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceECKeyUtil, init)
}

LibOrgBouncycastleJceECKeyUtil *create_LibOrgBouncycastleJceECKeyUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceECKeyUtil, init)
}

id<JavaSecurityPublicKey> LibOrgBouncycastleJceECKeyUtil_publicToExplicitParametersWithJavaSecurityPublicKey_withNSString_(id<JavaSecurityPublicKey> key, NSString *providerName) {
  LibOrgBouncycastleJceECKeyUtil_initialize();
  JavaSecurityProvider *provider = JavaSecuritySecurity_getProviderWithNSString_(providerName);
  if (provider == nil) {
    @throw new_JavaSecurityNoSuchProviderException_initWithNSString_(JreStrcat("$$", @"cannot find provider: ", providerName));
  }
  return LibOrgBouncycastleJceECKeyUtil_publicToExplicitParametersWithJavaSecurityPublicKey_withJavaSecurityProvider_(key, provider);
}

id<JavaSecurityPublicKey> LibOrgBouncycastleJceECKeyUtil_publicToExplicitParametersWithJavaSecurityPublicKey_withJavaSecurityProvider_(id<JavaSecurityPublicKey> key, JavaSecurityProvider *provider) {
  LibOrgBouncycastleJceECKeyUtil_initialize();
  @try {
    LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_([((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded]));
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithm])) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001)]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot convert GOST key to explicit parameters.");
    }
    else {
      LibOrgBouncycastleAsn1X9X962Parameters *params = LibOrgBouncycastleAsn1X9X962Parameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getAlgorithm])) getParameters]);
      LibOrgBouncycastleAsn1X9X9ECParameters *curveParams;
      if ([((LibOrgBouncycastleAsn1X9X962Parameters *) nil_chk(params)) isNamedCurve]) {
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([params getParameters]);
        curveParams = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
        curveParams = new_LibOrgBouncycastleAsn1X9X9ECParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(curveParams)) getCurve], [curveParams getG], [curveParams getN], [curveParams getH]);
      }
      else if ([params isImplicitlyCA]) {
        curveParams = new_LibOrgBouncycastleAsn1X9X9ECParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa])) getCurve], [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION) getEcImplicitlyCa])) getG], [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION) getEcImplicitlyCa])) getN], [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION) getEcImplicitlyCa])) getH]);
      }
      else {
        return key;
      }
      params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1X9X9ECParameters_(curveParams);
      info = new_LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey), params), [((LibOrgBouncycastleAsn1DERBitString *) nil_chk([info getPublicKeyData])) getBytes]);
      JavaSecurityKeyFactory *keyFact = JavaSecurityKeyFactory_getInstanceWithNSString_withJavaSecurityProvider_([key getAlgorithm], provider);
      return [((JavaSecurityKeyFactory *) nil_chk(keyFact)) generatePublicWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_([info getEncoded])];
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw e;
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(e);
  }
}

id<JavaSecurityPrivateKey> LibOrgBouncycastleJceECKeyUtil_privateToExplicitParametersWithJavaSecurityPrivateKey_withNSString_(id<JavaSecurityPrivateKey> key, NSString *providerName) {
  LibOrgBouncycastleJceECKeyUtil_initialize();
  JavaSecurityProvider *provider = JavaSecuritySecurity_getProviderWithNSString_(providerName);
  if (provider == nil) {
    @throw new_JavaSecurityNoSuchProviderException_initWithNSString_(JreStrcat("$$", @"cannot find provider: ", providerName));
  }
  return LibOrgBouncycastleJceECKeyUtil_privateToExplicitParametersWithJavaSecurityPrivateKey_withJavaSecurityProvider_(key, provider);
}

id<JavaSecurityPrivateKey> LibOrgBouncycastleJceECKeyUtil_privateToExplicitParametersWithJavaSecurityPrivateKey_withJavaSecurityProvider_(id<JavaSecurityPrivateKey> key, JavaSecurityProvider *provider) {
  LibOrgBouncycastleJceECKeyUtil_initialize();
  @try {
    LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info = LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_([((id<JavaSecurityPrivateKey>) nil_chk(key)) getEncoded]));
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(info)) getPrivateKeyAlgorithm])) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001)]) {
      @throw new_JavaIoUnsupportedEncodingException_initWithNSString_(@"cannot convert GOST key to explicit parameters.");
    }
    else {
      LibOrgBouncycastleAsn1X9X962Parameters *params = LibOrgBouncycastleAsn1X9X962Parameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getPrivateKeyAlgorithm])) getParameters]);
      LibOrgBouncycastleAsn1X9X9ECParameters *curveParams;
      if ([((LibOrgBouncycastleAsn1X9X962Parameters *) nil_chk(params)) isNamedCurve]) {
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([params getParameters]);
        curveParams = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
        curveParams = new_LibOrgBouncycastleAsn1X9X9ECParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(curveParams)) getCurve], [curveParams getG], [curveParams getN], [curveParams getH]);
      }
      else if ([params isImplicitlyCA]) {
        curveParams = new_LibOrgBouncycastleAsn1X9X9ECParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa])) getCurve], [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION) getEcImplicitlyCa])) getG], [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION) getEcImplicitlyCa])) getN], [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION) getEcImplicitlyCa])) getH]);
      }
      else {
        return key;
      }
      params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1X9X9ECParameters_(curveParams);
      info = new_LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey), params), [info parsePrivateKey]);
      JavaSecurityKeyFactory *keyFact = JavaSecurityKeyFactory_getInstanceWithNSString_withJavaSecurityProvider_([key getAlgorithm], provider);
      return [((JavaSecurityKeyFactory *) nil_chk(keyFact)) generatePrivateWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_([info getEncoded])];
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw e;
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceECKeyUtil)

@implementation LibOrgBouncycastleJceECKeyUtil_UnexpectedException

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause {
  LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(self, cause);
  return self;
}

- (JavaLangThrowable *)getCause {
  return cause_UnexpectedException_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangThrowable:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cause_UnexpectedException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangThrowable;", "cause", "LLibOrgBouncycastleJceECKeyUtil;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceECKeyUtil_UnexpectedException = { "UnexpectedException", "lib.org.bouncycastle.jce", ptrTable, methods, fields, 7, 0xa, 2, 1, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceECKeyUtil_UnexpectedException;
}

@end

void LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(LibOrgBouncycastleJceECKeyUtil_UnexpectedException *self, JavaLangThrowable *cause) {
  JavaLangRuntimeException_initWithNSString_(self, [((JavaLangThrowable *) nil_chk(cause)) description]);
  self->cause_UnexpectedException_ = cause;
}

LibOrgBouncycastleJceECKeyUtil_UnexpectedException *new_LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceECKeyUtil_UnexpectedException, initWithJavaLangThrowable_, cause)
}

LibOrgBouncycastleJceECKeyUtil_UnexpectedException *create_LibOrgBouncycastleJceECKeyUtil_UnexpectedException_initWithJavaLangThrowable_(JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceECKeyUtil_UnexpectedException, initWithJavaLangThrowable_, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceECKeyUtil_UnexpectedException)
