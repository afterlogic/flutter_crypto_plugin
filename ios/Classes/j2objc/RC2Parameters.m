//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/RC2Parameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "RC2Parameters.h"

@interface LibOrgBouncycastleCryptoParamsRC2Parameters () {
 @public
  jint bits_;
}

@end

@implementation LibOrgBouncycastleCryptoParamsRC2Parameters

- (instancetype)initWithByteArray:(IOSByteArray *)key {
  LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_(self, key);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)key
                          withInt:(jint)bits {
  LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(self, key, bits);
  return self;
}

- (jint)getEffectiveKeyBits {
  return bits_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:withInt:);
  methods[2].selector = @selector(getEffectiveKeyBits);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsRC2Parameters = { "RC2Parameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsRC2Parameters;
}

@end

void LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_(LibOrgBouncycastleCryptoParamsRC2Parameters *self, IOSByteArray *key) {
  LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(self, key, (((IOSByteArray *) nil_chk(key))->size_ > 128) ? 1024 : (key->size_ * 8));
}

LibOrgBouncycastleCryptoParamsRC2Parameters *new_LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_(IOSByteArray *key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsRC2Parameters, initWithByteArray_, key)
}

LibOrgBouncycastleCryptoParamsRC2Parameters *create_LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_(IOSByteArray *key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsRC2Parameters, initWithByteArray_, key)
}

void LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoParamsRC2Parameters *self, IOSByteArray *key, jint bits) {
  LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(self, key);
  self->bits_ = bits;
}

LibOrgBouncycastleCryptoParamsRC2Parameters *new_LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(IOSByteArray *key, jint bits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsRC2Parameters, initWithByteArray_withInt_, key, bits)
}

LibOrgBouncycastleCryptoParamsRC2Parameters *create_LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(IOSByteArray *key, jint bits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsRC2Parameters, initWithByteArray_withInt_, key, bits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsRC2Parameters)
