//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/PubringDump.java
//

#include "BouncyCastleProvider.h"
#include "Hex.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaKeyFingerprintCalculator.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPPublicKeyRingCollection.h"
#include "PGPUtil.h"
#include "PublicKeyAlgorithmTags.h"
#include "PubringDump.h"
#include "java/io/FileInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/security/Security.h"
#include "java/util/Iterator.h"

@implementation LibOrgBouncycastleOpenpgpExamplesPubringDump

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesPubringDump_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getAlgorithmWithInt:(jint)algId {
  return LibOrgBouncycastleOpenpgpExamplesPubringDump_getAlgorithmWithInt_(algId);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleOpenpgpExamplesPubringDump_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmWithInt:);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getAlgorithm", "I", "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesPubringDump = { "PubringDump", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesPubringDump;
}

@end

void LibOrgBouncycastleOpenpgpExamplesPubringDump_init(LibOrgBouncycastleOpenpgpExamplesPubringDump *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesPubringDump *new_LibOrgBouncycastleOpenpgpExamplesPubringDump_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesPubringDump, init)
}

LibOrgBouncycastleOpenpgpExamplesPubringDump *create_LibOrgBouncycastleOpenpgpExamplesPubringDump_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesPubringDump, init)
}

NSString *LibOrgBouncycastleOpenpgpExamplesPubringDump_getAlgorithmWithInt_(jint algId) {
  LibOrgBouncycastleOpenpgpExamplesPubringDump_initialize();
  switch (algId) {
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
    return @"RSA_GENERAL";
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT:
    return @"RSA_ENCRYPT";
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN:
    return @"RSA_SIGN";
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
    return @"ELGAMAL_ENCRYPT";
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
    return @"JcajceDSA";
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH:
    return @"ECDH";
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA:
    return @"ECDSA";
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
    return @"ELGAMAL_GENERAL";
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DIFFIE_HELLMAN:
    return @"DIFFIE_HELLMAN";
  }
  return @"unknown";
}

void LibOrgBouncycastleOpenpgpExamplesPubringDump_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleOpenpgpExamplesPubringDump_initialize();
  JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_LibOrgBouncycastleJceProviderBouncyCastleProvider_init());
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *pubRings = new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(nil_chk(args), 0))), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
  id<JavaUtilIterator> rIt = [pubRings getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(rIt)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pgpPub = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([rIt next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    @try {
      (void) [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(pgpPub)) getPublicKey];
    }
    @catch (JavaLangException *e) {
      [e printStackTrace];
      continue;
    }
    id<JavaUtilIterator> it = [pgpPub getPublicKeys];
    jboolean first = true;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      LibOrgBouncycastleOpenpgpPGPPublicKey *pgpKey = (LibOrgBouncycastleOpenpgpPGPPublicKey *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPPublicKey class]);
      if (first) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Key ID: ", JavaLangLong_toHexStringWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pgpKey)) getKeyID]))];
        first = false;
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Key ID: ", JavaLangLong_toHexStringWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pgpKey)) getKeyID]), @" (subkey)")];
      }
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"            Algorithm: ", LibOrgBouncycastleOpenpgpExamplesPubringDump_getAlgorithmWithInt_([pgpKey getAlgorithm]))];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"            Fingerprint: ", [NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_([pgpKey getFingerprint])])];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesPubringDump)
