//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSS.java
//

#include "Arrays.h"
#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BDS.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OTSHashAddress.h"
#include "WOTSPlus.h"
#include "WOTSPlusSignature.h"
#include "XMSS.h"
#include "XMSSKeyGenerationParameters.h"
#include "XMSSKeyPairGenerator.h"
#include "XMSSParameters.h"
#include "XMSSPrivateKeyParameters.h"
#include "XMSSPublicKeyParameters.h"
#include "XMSSSigner.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSS () {
 @public
  LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params_;
  LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  JavaSecuritySecureRandom *prng_;
  LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey_;
  LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *publicKey_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSS, params_, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSS, wotsPlus_, LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSS, prng_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSS, privateKey_, LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSS, publicKey_, LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *)

@implementation LibOrgBouncycastlePqcCryptoXmssXMSS

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng {
  LibOrgBouncycastlePqcCryptoXmssXMSS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(self, params, prng);
  return self;
}

- (void)generateKeys {
  LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *kpGen = new_LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init();
  [kpGen init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_([self getParams], prng_)];
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *kp = [kpGen generateKeyPair];
  privateKey_ = (LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPrivate], [LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters class]);
  publicKey_ = (LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) cast_chk([kp getPublic], [LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters class]);
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}

- (void)importStateWithLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)privateKey
                    withLibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *)publicKey {
  if (!LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey)) getRoot], [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey)) getRoot])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"root of private key and public key do not match");
  }
  if (!LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([privateKey getPublicSeed], [publicKey getPublicSeed])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"public seed of private key and public key do not match");
  }
  self->privateKey_ = privateKey;
  self->publicKey_ = publicKey;
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}

- (void)importStateWithByteArray:(IOSByteArray *)privateKey
                   withByteArray:(IOSByteArray *)publicKey {
  if (privateKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"privateKey == null");
  }
  if (publicKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *tmpPrivateKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withPrivateKeyWithByteArray:privateKey withLibOrgBouncycastlePqcCryptoXmssXMSSParameters:[self getParams]])) build];
  LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *tmpPublicKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withPublicKeyWithByteArray:publicKey])) build];
  if (!LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(tmpPrivateKey)) getRoot], [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(tmpPublicKey)) getRoot])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"root of private key and public key do not match");
  }
  if (!LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([tmpPrivateKey getPublicSeed], [tmpPublicKey getPublicSeed])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"public seed of private key and public key do not match");
  }
  self->privateKey_ = tmpPrivateKey;
  self->publicKey_ = tmpPublicKey;
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}

- (IOSByteArray *)signWithByteArray:(IOSByteArray *)message {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  LibOrgBouncycastlePqcCryptoXmssXMSSSigner *signer = new_LibOrgBouncycastlePqcCryptoXmssXMSSSigner_init();
  [signer init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:privateKey_];
  IOSByteArray *signature = [signer generateSignatureWithByteArray:message];
  privateKey_ = (LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) cast_chk([signer getUpdatedPrivateKey], [LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters class]);
  [self importStateWithLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters:privateKey_ withLibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters:publicKey_];
  return signature;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature
                           withByteArray:(IOSByteArray *)publicKey {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (signature == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (publicKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  LibOrgBouncycastlePqcCryptoXmssXMSSSigner *signer = new_LibOrgBouncycastlePqcCryptoXmssXMSSSigner_init();
  [signer init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_([self getParams]) withPublicKeyWithByteArray:publicKey])) build]];
  return [signer verifySignatureWithByteArray:message withByteArray:signature];
}

- (IOSByteArray *)exportPrivateKey {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) toByteArray];
}

- (IOSByteArray *)exportPublicKey {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) toByteArray];
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[wotsPlus_ getWOTSPlusSecretKeyWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed] withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:[self getPublicSeed]];
  return [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) signWithByteArray:messageDigest withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)getParams {
  return params_;
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)getWOTSPlus {
  return wotsPlus_;
}

- (IOSByteArray *)getRoot {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getRoot];
}

- (void)setRootWithByteArray:(IOSByteArray *)root {
  privateKey_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:[self getPublicSeed]])) withRootWithByteArray:root])) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDS:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
  publicKey_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withRootWithByteArray:root])) withPublicSeedWithByteArray:[self getPublicSeed]])) build];
}

- (jint)getIndex {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getIndex];
}

- (void)setIndexWithInt:(jint)index {
  privateKey_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed]])) withRootWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getRoot]])) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDS:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
}

- (IOSByteArray *)getPublicSeed {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed];
}

- (void)setPublicSeedWithByteArray:(IOSByteArray *)publicSeed {
  privateKey_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:publicSeed])) withRootWithByteArray:[self getRoot]])) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDS:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
  publicKey_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withRootWithByteArray:[self getRoot]])) withPublicSeedWithByteArray:publicSeed])) build];
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:publicSeed];
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)getPrivateKey {
  return privateKey_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(generateKeys);
  methods[2].selector = @selector(importStateWithLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters:withLibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters:);
  methods[3].selector = @selector(importStateWithByteArray:withByteArray:);
  methods[4].selector = @selector(signWithByteArray:);
  methods[5].selector = @selector(verifySignatureWithByteArray:withByteArray:withByteArray:);
  methods[6].selector = @selector(exportPrivateKey);
  methods[7].selector = @selector(exportPublicKey);
  methods[8].selector = @selector(wotsSignWithByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[9].selector = @selector(getParams);
  methods[10].selector = @selector(getWOTSPlus);
  methods[11].selector = @selector(getRoot);
  methods[12].selector = @selector(setRootWithByteArray:);
  methods[13].selector = @selector(getIndex);
  methods[14].selector = @selector(setIndexWithInt:);
  methods[15].selector = @selector(getPublicSeed);
  methods[16].selector = @selector(setPublicSeedWithByteArray:);
  methods[17].selector = @selector(getPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wotsPlus_", "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prng_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "LLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LLibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;LJavaSecuritySecureRandom;", "importState", "LLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;LLibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters;", "[B[B", "sign", "[B", "verifySignature", "[B[B[B", "LJavaTextParseException;", "wotsSign", "[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "setRoot", "setIndex", "I", "setPublicSeed" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSS = { "XMSS", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 18, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSS;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoXmssXMSS *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  NSObject_init(self);
  if (params == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"params == null");
  }
  self->params_ = params;
  self->wotsPlus_ = [params getWOTSPlus];
  self->prng_ = prng;
}

LibOrgBouncycastlePqcCryptoXmssXMSS *new_LibOrgBouncycastlePqcCryptoXmssXMSS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSS, initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_, params, prng)
}

LibOrgBouncycastlePqcCryptoXmssXMSS *create_LibOrgBouncycastlePqcCryptoXmssXMSS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSS, initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_, params, prng)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSS)
