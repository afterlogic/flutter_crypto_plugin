//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/HashUtils.java
//

#include "CSHAKEDigest.h"
#include "HashUtils.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SHAKEDigest.h"

@implementation LibOrgBouncycastlePqcCryptoQteslaHashUtils

+ (jint)SECURE_HASH_ALGORITHM_KECCAK_128_RATE {
  return LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE;
}

+ (jint)SECURE_HASH_ALGORITHM_KECCAK_256_RATE {
  return LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_256_RATE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)secureHashAlgorithmKECCAK128WithByteArray:(IOSByteArray *)output
                                          withInt:(jint)outputOffset
                                          withInt:(jint)outputLength
                                    withByteArray:(IOSByteArray *)input
                                          withInt:(jint)inputOffset
                                          withInt:(jint)inputLength {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(output, outputOffset, outputLength, input, inputOffset, inputLength);
}

+ (void)secureHashAlgorithmKECCAK256WithByteArray:(IOSByteArray *)output
                                          withInt:(jint)outputOffset
                                          withInt:(jint)outputLength
                                    withByteArray:(IOSByteArray *)input
                                          withInt:(jint)inputOffset
                                          withInt:(jint)inputLength {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(output, outputOffset, outputLength, input, inputOffset, inputLength);
}

+ (void)customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray:(IOSByteArray *)output
                                                            withInt:(jint)outputOffset
                                                            withInt:(jint)outputLength
                                                          withShort:(jshort)continuousTimeStochasticModelling
                                                      withByteArray:(IOSByteArray *)input
                                                            withInt:(jint)inputOffset
                                                            withInt:(jint)inputLength {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(output, outputOffset, outputLength, continuousTimeStochasticModelling, input, inputOffset, inputLength);
}

+ (void)customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray:(IOSByteArray *)output
                                                            withInt:(jint)outputOffset
                                                            withInt:(jint)outputLength
                                                          withShort:(jshort)continuousTimeStochasticModelling
                                                      withByteArray:(IOSByteArray *)input
                                                            withInt:(jint)inputOffset
                                                            withInt:(jint)inputLength {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(output, outputOffset, outputLength, continuousTimeStochasticModelling, input, inputOffset, inputLength);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(secureHashAlgorithmKECCAK128WithByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[2].selector = @selector(secureHashAlgorithmKECCAK256WithByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[3].selector = @selector(customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray:withInt:withInt:withShort:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray:withInt:withInt:withShort:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SECURE_HASH_ALGORITHM_KECCAK_128_RATE", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE, 0x19, -1, -1, -1, -1 },
    { "SECURE_HASH_ALGORITHM_KECCAK_256_RATE", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_256_RATE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "secureHashAlgorithmKECCAK128", "[BII[BII", "secureHashAlgorithmKECCAK256", "customizableSecureHashAlgorithmKECCAK128Simple", "[BIIS[BII", "customizableSecureHashAlgorithmKECCAK256Simple" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoQteslaHashUtils = { "HashUtils", "lib.org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoQteslaHashUtils;
}

@end

void LibOrgBouncycastlePqcCryptoQteslaHashUtils_init(LibOrgBouncycastlePqcCryptoQteslaHashUtils *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoQteslaHashUtils *new_LibOrgBouncycastlePqcCryptoQteslaHashUtils_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoQteslaHashUtils, init)
}

LibOrgBouncycastlePqcCryptoQteslaHashUtils *create_LibOrgBouncycastlePqcCryptoQteslaHashUtils_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoQteslaHashUtils, init)
}

void LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, IOSByteArray *input, jint inputOffset, jint inputLength) {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_initialize();
  LibOrgBouncycastleCryptoDigestsSHAKEDigest *dig = new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(128);
  [dig updateWithByteArray:input withInt:inputOffset withInt:inputLength];
  [dig doFinalWithByteArray:output withInt:outputOffset withInt:outputLength];
}

void LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, IOSByteArray *input, jint inputOffset, jint inputLength) {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_initialize();
  LibOrgBouncycastleCryptoDigestsSHAKEDigest *dig = new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  [dig updateWithByteArray:input withInt:inputOffset withInt:inputLength];
  [dig doFinalWithByteArray:output withInt:outputOffset withInt:outputLength];
}

void LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, jshort continuousTimeStochasticModelling, IOSByteArray *input, jint inputOffset, jint inputLength) {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_initialize();
  LibOrgBouncycastleCryptoDigestsCSHAKEDigest *dig = new_LibOrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(128, nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) continuousTimeStochasticModelling, (jbyte) (JreRShift32(continuousTimeStochasticModelling, 8)) } count:2]);
  [dig updateWithByteArray:input withInt:inputOffset withInt:inputLength];
  [dig doFinalWithByteArray:output withInt:outputOffset withInt:outputLength];
}

void LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, jshort continuousTimeStochasticModelling, IOSByteArray *input, jint inputOffset, jint inputLength) {
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_initialize();
  LibOrgBouncycastleCryptoDigestsCSHAKEDigest *dig = new_LibOrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(256, nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) continuousTimeStochasticModelling, (jbyte) (JreRShift32(continuousTimeStochasticModelling, 8)) } count:2]);
  [dig updateWithByteArray:input withInt:inputOffset withInt:inputLength];
  [dig doFinalWithByteArray:output withInt:outputOffset withInt:outputLength];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoQteslaHashUtils)
