//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/SHA256.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCMessageDigest.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestAlgorithmProvider.h"
#include "HMac.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NISTObjectIdentifiers.h"
#include "PBE.h"
#include "PBESecretKeyFactory.h"
#include "PKCSObjectIdentifiers.h"
#include "SHA256.h"
#include "SHA256Digest.h"

@interface LibOrgBouncycastleJcajceProviderDigestSHA256 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderDigestSHA256_init(LibOrgBouncycastleJcajceProviderDigestSHA256 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSHA256 *new_LibOrgBouncycastleJcajceProviderDigestSHA256_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSHA256 *create_LibOrgBouncycastleJcajceProviderDigestSHA256_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA256_Digest;LLibOrgBouncycastleJcajceProviderDigestSHA256_HashMac;LLibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory;LLibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator;LLibOrgBouncycastleJcajceProviderDigestSHA256_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA256 = { "SHA256", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA256;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA256_init(LibOrgBouncycastleJcajceProviderDigestSHA256 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSHA256 *new_LibOrgBouncycastleJcajceProviderDigestSHA256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA256 *create_LibOrgBouncycastleJcajceProviderDigestSHA256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA256)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA256_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA256_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestSHA256_Digest *d = (LibOrgBouncycastleJcajceProviderDigestSHA256_Digest *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestSHA256_Digest class]);
  ((LibOrgBouncycastleJcajceProviderDigestSHA256_Digest *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsSHA256Digest_initWithLibOrgBouncycastleCryptoDigestsSHA256Digest_((LibOrgBouncycastleCryptoDigestsSHA256Digest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsSHA256Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestSHA256;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA256_Digest = { "Digest", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA256_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA256_Digest_init(LibOrgBouncycastleJcajceProviderDigestSHA256_Digest *self) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA256_Digest *new_LibOrgBouncycastleJcajceProviderDigestSHA256_Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_Digest, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA256_Digest *create_LibOrgBouncycastleJcajceProviderDigestSHA256_Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA256_Digest)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA256;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac = { "HashMac", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac_init(LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init()));
}

LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac *new_LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac *create_LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA256_HashMac)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA256;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory = { "PBEWithMacKeyFactory", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory_init(LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(self, @"PBEwithHmacSHA256", nil, false, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_PKCS12, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_SHA256, 256, 0);
}

LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory *new_LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory *create_LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA256_PBEWithMacKeyFactory)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA256;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator = { "KeyGenerator", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator_init(LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACSHA256", 256, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator *new_LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator *create_LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA256_KeyGenerator)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.SHA-256" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SHA256" withNSString:@"SHA-256"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256)) withNSString:@"SHA-256"];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.PBEWITHHMACSHA256" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_PREFIX, @"$PBEWithMacKeyFactory")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.SecretKeyFactory.PBEWITHHMACSHA-256" withNSString:@"PBEWITHHMACSHA256"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.SecretKeyFactory.", JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256)) withNSString:@"PBEWITHHMACSHA256"];
  [provider addAlgorithmWithNSString:@"Mac.PBEWITHHMACSHA256" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_PREFIX, @"$HashMac")];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA256" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_PREFIX, @"$HashMac") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_PREFIX, @"$KeyGenerator")];
  [self addHMACAliasWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA256" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA256)];
  [self addHMACAliasWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA256" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderDigestSHA256;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings class]) {
    LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderDigestSHA256_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_init(LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings *self) {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings *new_LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings *create_LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA256_Mappings)
