//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/newhope/NHAgreement.java
//

#include "CipherParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NHAgreement.h"
#include "NHPrivateKeyParameters.h"
#include "NHPublicKeyParameters.h"
#include "NewHope.h"

@interface LibOrgBouncycastlePqcCryptoNewhopeNHAgreement () {
 @public
  LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters *privKey_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNewhopeNHAgreement, privKey_, LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters *)

@implementation LibOrgBouncycastlePqcCryptoNewhopeNHAgreement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoNewhopeNHAgreement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  privKey_ = (LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters class]);
}

- (IOSByteArray *)calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)otherPublicKey {
  LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *pubKey = (LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) cast_chk(otherPublicKey, [LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters class]);
  IOSByteArray *sharedValue = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoNewhopeNewHope_AGREEMENT_SIZE];
  LibOrgBouncycastlePqcCryptoNewhopeNewHope_sharedAWithByteArray_withShortArray_withByteArray_(sharedValue, ((LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters *) nil_chk(privKey_))->secData_, ((LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) nil_chk(pubKey))->pubData_);
  return sharedValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privKey_", "LLibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoCipherParameters;", "calculateAgreement" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNewhopeNHAgreement = { "NHAgreement", "lib.org.bouncycastle.pqc.crypto.newhope", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNewhopeNHAgreement;
}

@end

void LibOrgBouncycastlePqcCryptoNewhopeNHAgreement_init(LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *new_LibOrgBouncycastlePqcCryptoNewhopeNHAgreement_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNewhopeNHAgreement, init)
}

LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *create_LibOrgBouncycastlePqcCryptoNewhopeNHAgreement_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNewhopeNHAgreement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNewhopeNHAgreement)
