//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DTLSClientProtocol.java
//

#ifndef DTLSClientProtocol_H
#define DTLSClientProtocol_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DTLSProtocol.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaSecuritySecureRandom;
@class JavaUtilHashtable;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@class LibOrgBouncycastleCryptoTlsCertificateStatus;
@class LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;
@class LibOrgBouncycastleCryptoTlsDTLSRecordLayer;
@class LibOrgBouncycastleCryptoTlsDTLSTransport;
@class LibOrgBouncycastleCryptoTlsDigitallySigned;
@class LibOrgBouncycastleCryptoTlsProtocolVersion;
@class LibOrgBouncycastleCryptoTlsSessionParameters;
@class LibOrgBouncycastleCryptoTlsSessionParameters_Builder;
@class LibOrgBouncycastleCryptoTlsTlsClientContextImpl;
@protocol LibOrgBouncycastleCryptoTlsDatagramTransport;
@protocol LibOrgBouncycastleCryptoTlsTlsAuthentication;
@protocol LibOrgBouncycastleCryptoTlsTlsClient;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;
@protocol LibOrgBouncycastleCryptoTlsTlsSession;

@interface LibOrgBouncycastleCryptoTlsDTLSClientProtocol : LibOrgBouncycastleCryptoTlsDTLSProtocol

#pragma mark Public

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (LibOrgBouncycastleCryptoTlsDTLSTransport *)connectWithLibOrgBouncycastleCryptoTlsTlsClient:(id<LibOrgBouncycastleCryptoTlsTlsClient>)client
                                             withLibOrgBouncycastleCryptoTlsDatagramTransport:(id<LibOrgBouncycastleCryptoTlsDatagramTransport>)transport;

#pragma mark Protected

- (void)abortClientHandshakeWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                    withLibOrgBouncycastleCryptoTlsDTLSRecordLayer:(LibOrgBouncycastleCryptoTlsDTLSRecordLayer *)recordLayer
                                                                                         withShort:(jshort)alertDescription;

- (LibOrgBouncycastleCryptoTlsDTLSTransport *)clientHandshakeWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                     withLibOrgBouncycastleCryptoTlsDTLSRecordLayer:(LibOrgBouncycastleCryptoTlsDTLSRecordLayer *)recordLayer;

- (IOSByteArray *)generateCertificateVerifyWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                   withLibOrgBouncycastleCryptoTlsDigitallySigned:(LibOrgBouncycastleCryptoTlsDigitallySigned *)certificateVerify;

- (IOSByteArray *)generateClientHelloWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                   withLibOrgBouncycastleCryptoTlsTlsClient:(id<LibOrgBouncycastleCryptoTlsTlsClient>)client;

- (IOSByteArray *)generateClientKeyExchangeWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state;

- (void)invalidateSessionWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state;

+ (IOSByteArray *)patchClientHelloWithCookieWithByteArray:(IOSByteArray *)clientHelloBody
                                            withByteArray:(IOSByteArray *)cookie;

- (void)processCertificateRequestWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                          withByteArray:(IOSByteArray *)body;

- (void)processCertificateStatusWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                         withByteArray:(IOSByteArray *)body;

- (IOSByteArray *)processHelloVerifyRequestWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                                    withByteArray:(IOSByteArray *)body;

- (void)processNewSessionTicketWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                        withByteArray:(IOSByteArray *)body;

- (LibOrgBouncycastleCryptoTlsCertificate *)processServerCertificateWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                                                             withByteArray:(IOSByteArray *)body;

- (void)processServerHelloWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                   withByteArray:(IOSByteArray *)body;

- (void)processServerKeyExchangeWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                         withByteArray:(IOSByteArray *)body;

- (void)processServerSupplementalDataWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                              withByteArray:(IOSByteArray *)body;

- (void)reportServerVersionWithLibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                   withLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)server_version;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDTLSClientProtocol)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoTlsDTLSClientProtocol *self, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDTLSClientProtocol *new_LibOrgBouncycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDTLSClientProtocol *create_LibOrgBouncycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsDTLSClientProtocol_patchClientHelloWithCookieWithByteArray_withByteArray_(IOSByteArray *clientHelloBody, IOSByteArray *cookie);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol)

@interface LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState : NSObject {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsClient> client_;
  LibOrgBouncycastleCryptoTlsTlsClientContextImpl *clientContext_;
  id<LibOrgBouncycastleCryptoTlsTlsSession> tlsSession_;
  LibOrgBouncycastleCryptoTlsSessionParameters *sessionParameters_;
  LibOrgBouncycastleCryptoTlsSessionParameters_Builder *sessionParametersBuilder_;
  IOSIntArray *offeredCipherSuites_;
  JavaUtilHashtable *clientExtensions_;
  JavaUtilHashtable *serverExtensions_;
  IOSByteArray *selectedSessionID_;
  jboolean resumedSession_;
  jboolean secure_renegotiation_;
  jboolean allowCertificateStatus_;
  jboolean expectSessionTicket_;
  id<LibOrgBouncycastleCryptoTlsTlsKeyExchange> keyExchange_;
  id<LibOrgBouncycastleCryptoTlsTlsAuthentication> authentication_;
  LibOrgBouncycastleCryptoTlsCertificateStatus *certificateStatus_;
  LibOrgBouncycastleCryptoTlsCertificateRequest *certificateRequest_;
  id<LibOrgBouncycastleCryptoTlsTlsCredentials> clientCredentials_;
}

#pragma mark Protected

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, client_, id<LibOrgBouncycastleCryptoTlsTlsClient>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, clientContext_, LibOrgBouncycastleCryptoTlsTlsClientContextImpl *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, tlsSession_, id<LibOrgBouncycastleCryptoTlsTlsSession>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, sessionParameters_, LibOrgBouncycastleCryptoTlsSessionParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, sessionParametersBuilder_, LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, offeredCipherSuites_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, clientExtensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, serverExtensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, selectedSessionID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, keyExchange_, id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, authentication_, id<LibOrgBouncycastleCryptoTlsTlsAuthentication>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, certificateStatus_, LibOrgBouncycastleCryptoTlsCertificateStatus *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, certificateRequest_, LibOrgBouncycastleCryptoTlsCertificateRequest *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, clientCredentials_, id<LibOrgBouncycastleCryptoTlsTlsCredentials>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *new_LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *create_LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DTLSClientProtocol_H
