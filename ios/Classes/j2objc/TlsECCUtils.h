//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsECCUtils.java
//

#ifndef TlsECCUtils_H
#define TlsECCUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@class JavaUtilHashtable;
@class LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;
@class LibOrgBouncycastleCryptoParamsECDomainParameters;
@class LibOrgBouncycastleCryptoParamsECPrivateKeyParameters;
@class LibOrgBouncycastleCryptoParamsECPublicKeyParameters;
@class LibOrgBouncycastleMathEcECCurve;
@class LibOrgBouncycastleMathEcECFieldElement;
@class LibOrgBouncycastleMathEcECPoint;

@interface LibOrgBouncycastleCryptoTlsTlsECCUtils : NSObject
@property (readonly, class) JavaLangInteger *EXT_elliptic_curves NS_SWIFT_NAME(EXT_elliptic_curves);
@property (readonly, class) JavaLangInteger *EXT_ec_point_formats NS_SWIFT_NAME(EXT_ec_point_formats);

+ (JavaLangInteger *)EXT_elliptic_curves;

+ (JavaLangInteger *)EXT_ec_point_formats;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)addSupportedEllipticCurvesExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                    withIntArray:(IOSIntArray *)namedCurves;

+ (void)addSupportedPointFormatsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                withShortArray:(IOSShortArray *)ecPointFormats;

+ (jboolean)areOnSameCurveWithLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)a
                          withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)b;

+ (IOSByteArray *)calculateECDHBasicAgreementWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)publicKey
                                            withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)privateKey;

+ (jboolean)containsECCCipherSuitesWithIntArray:(IOSIntArray *)cipherSuites;

+ (IOSByteArray *)createSupportedEllipticCurvesExtensionWithIntArray:(IOSIntArray *)namedCurves;

+ (IOSByteArray *)createSupportedPointFormatsExtensionWithShortArray:(IOSShortArray *)ecPointFormats;

+ (JavaMathBigInteger *)deserializeECFieldElementWithInt:(jint)fieldSize
                                           withByteArray:(IOSByteArray *)encoding;

+ (LibOrgBouncycastleMathEcECPoint *)deserializeECPointWithShortArray:(IOSShortArray *)ecPointFormats
                                  withLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                                                        withByteArray:(IOSByteArray *)encoding;

+ (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)deserializeECPublicKeyWithShortArray:(IOSShortArray *)ecPointFormats
                                         withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)curve_params
                                                                                withByteArray:(IOSByteArray *)encoding;

+ (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateECKeyPairWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                              withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)ecParams;

+ (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                          withShortArray:(IOSShortArray *)ecPointFormats
                                                                    withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)ecParams
                                                                                                  withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (NSString *)getNameOfNamedCurveWithInt:(jint)namedCurve;

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)getParametersForNamedCurveWithInt:(jint)namedCurve;

+ (IOSIntArray *)getSupportedEllipticCurvesExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (IOSShortArray *)getSupportedPointFormatsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)hasAnySupportedNamedCurves;

+ (jboolean)isCompressionPreferredWithShortArray:(IOSShortArray *)ecPointFormats
                                       withShort:(jshort)compressionFormat;

+ (jboolean)isECCCipherSuiteWithInt:(jint)cipherSuite;

+ (jboolean)isSupportedNamedCurveWithInt:(jint)namedCurve;

+ (jint)readECExponentWithInt:(jint)fieldSize
        withJavaIoInputStream:(JavaIoInputStream *)input;

+ (JavaMathBigInteger *)readECFieldElementWithInt:(jint)fieldSize
                            withJavaIoInputStream:(JavaIoInputStream *)input;

+ (JavaMathBigInteger *)readECParameterWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)readECParametersWithIntArray:(IOSIntArray *)namedCurves
                                                                    withShortArray:(IOSShortArray *)ecPointFormats
                                                             withJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSIntArray *)readSupportedEllipticCurvesExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (IOSShortArray *)readSupportedPointFormatsExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (IOSByteArray *)serializeECFieldElementWithInt:(jint)fieldSize
                          withJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (IOSByteArray *)serializeECPointWithShortArray:(IOSShortArray *)ecPointFormats
             withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point;

+ (IOSByteArray *)serializeECPublicKeyWithShortArray:(IOSShortArray *)ecPointFormats
withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)keyParameters;

+ (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)validateECPublicKeyWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)key;

+ (void)writeECExponentWithInt:(jint)k
        withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeECFieldElementWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                                               withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeECFieldElementWithInt:(jint)fieldSize
            withJavaMathBigInteger:(JavaMathBigInteger *)x
            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeECParameterWithJavaMathBigInteger:(JavaMathBigInteger *)x
                        withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeECPointWithShortArray:(IOSShortArray *)ecPointFormats
withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point
            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeExplicitECParametersWithShortArray:(IOSShortArray *)ecPointFormats
withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)ecParameters
                         withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeNamedECParametersWithInt:(jint)namedCurve
               withJavaIoOutputStream:(JavaIoOutputStream *)output;

#pragma mark Package-Private

+ (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                            withIntArray:(IOSIntArray *)namedCurves
                                                                                                          withShortArray:(IOSShortArray *)ecPointFormats
                                                                                                  withJavaIoOutputStream:(JavaIoOutputStream *)output;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsECCUtils)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_get_EXT_elliptic_curves(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsECCUtils, EXT_elliptic_curves, JavaLangInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_get_EXT_ec_point_formats(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsECCUtils, EXT_ec_point_formats, JavaLangInteger *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_init(LibOrgBouncycastleCryptoTlsTlsECCUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsECCUtils *new_LibOrgBouncycastleCryptoTlsTlsECCUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsECCUtils *create_LibOrgBouncycastleCryptoTlsTlsECCUtils_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_addSupportedEllipticCurvesExtensionWithJavaUtilHashtable_withIntArray_(JavaUtilHashtable *extensions, IOSIntArray *namedCurves);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_(JavaUtilHashtable *extensions, IOSShortArray *ecPointFormats);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_getSupportedEllipticCurvesExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_createSupportedEllipticCurvesExtensionWithIntArray_(IOSIntArray *namedCurves);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_createSupportedPointFormatsExtensionWithShortArray_(IOSShortArray *ecPointFormats);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsTlsECCUtils_getNameOfNamedCurveWithInt_(jint namedCurve);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(jint namedCurve);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_hasAnySupportedNamedCurves(void);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_(IOSIntArray *cipherSuites);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(jint cipherSuite);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_areOnSameCurveWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParamsECDomainParameters *a, LibOrgBouncycastleCryptoParamsECDomainParameters *b);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(jint namedCurve);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(IOSShortArray *ecPointFormats, jshort compressionFormat);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECFieldElementWithInt_withJavaMathBigInteger_(jint fieldSize, JavaMathBigInteger *x);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_(IOSShortArray *ecPointFormats, LibOrgBouncycastleMathEcECPoint *point);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPublicKeyWithShortArray_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(IOSShortArray *ecPointFormats, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *keyParameters);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECFieldElementWithInt_withByteArray_(jint fieldSize, IOSByteArray *encoding);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withLibOrgBouncycastleMathEcECCurve_withByteArray_(IOSShortArray *ecPointFormats, LibOrgBouncycastleMathEcECCurve *curve, IOSByteArray *encoding);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECPublicKeyParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withByteArray_(IOSShortArray *ecPointFormats, LibOrgBouncycastleCryptoParamsECDomainParameters *curve_params, IOSByteArray *encoding);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_calculateECDHBasicAgreementWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *publicKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *privateKey);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *LibOrgBouncycastleCryptoTlsTlsECCUtils_generateECKeyPairWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsECDomainParameters_(JavaSecuritySecureRandom *random, LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, IOSShortArray *ecPointFormats, LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams, JavaIoOutputStream *output);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withIntArray_withShortArray_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, IOSIntArray *namedCurves, IOSShortArray *ecPointFormats, JavaIoOutputStream *output);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECPublicKeyParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *key);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(jint fieldSize, JavaIoInputStream *input);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(jint fieldSize, JavaIoInputStream *input);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParametersWithIntArray_withShortArray_withJavaIoInputStream_(IOSIntArray *namedCurves, IOSShortArray *ecPointFormats, JavaIoInputStream *input);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(jint k, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECFieldElementWithLibOrgBouncycastleMathEcECFieldElement_withJavaIoOutputStream_(LibOrgBouncycastleMathEcECFieldElement *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECFieldElementWithInt_withJavaMathBigInteger_withJavaIoOutputStream_(jint fieldSize, JavaMathBigInteger *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_(JavaMathBigInteger *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeExplicitECParametersWithShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(IOSShortArray *ecPointFormats, LibOrgBouncycastleCryptoParamsECDomainParameters *ecParameters, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_withJavaIoOutputStream_(IOSShortArray *ecPointFormats, LibOrgBouncycastleMathEcECPoint *point, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeNamedECParametersWithInt_withJavaIoOutputStream_(jint namedCurve, JavaIoOutputStream *output);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsECCUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsECCUtils_H
