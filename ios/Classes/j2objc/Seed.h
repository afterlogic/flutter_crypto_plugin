//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/Seed.java
//

#ifndef Seed_H
#define Seed_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastlePqcCryptoSphincsHashFunctions;
@class LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr;

@interface LibOrgBouncycastlePqcCryptoSphincsSeed : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (void)get_seedWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                      withByteArray:(IOSByteArray *)seed
                                                            withInt:(jint)seedOff
                                                      withByteArray:(IOSByteArray *)sk
                withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *)a;

+ (void)prgWithByteArray:(IOSByteArray *)r
                 withInt:(jint)rOff
                withLong:(jlong)rlen
           withByteArray:(IOSByteArray *)key
                 withInt:(jint)keyOff;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoSphincsSeed)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSeed_init(LibOrgBouncycastlePqcCryptoSphincsSeed *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSeed *new_LibOrgBouncycastlePqcCryptoSphincsSeed_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSeed *create_LibOrgBouncycastlePqcCryptoSphincsSeed_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSeed_get_seedWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *seed, jint seedOff, IOSByteArray *sk, LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *a);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(IOSByteArray *r, jint rOff, jlong rlen, IOSByteArray *key, jint keyOff);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoSphincsSeed)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Seed_H
