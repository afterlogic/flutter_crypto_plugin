//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SRPTlsClient.java
//

#include "AbstractTlsClient.h"
#include "AlertDescription.h"
#include "Arrays.h"
#include "CipherSuite.h"
#include "DefaultTlsCipherFactory.h"
#include "DefaultTlsSRPGroupVerifier.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyExchangeAlgorithm.h"
#include "SRPTlsClient.h"
#include "TlsAuthentication.h"
#include "TlsCipherFactory.h"
#include "TlsExtensionsUtils.h"
#include "TlsFatalAlert.h"
#include "TlsKeyExchange.h"
#include "TlsSRPGroupVerifier.h"
#include "TlsSRPKeyExchange.h"
#include "TlsSRPUtils.h"
#include "TlsUtils.h"
#include "java/lang/Integer.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"

@implementation LibOrgBouncycastleCryptoTlsSRPTlsClient

- (instancetype)initWithByteArray:(IOSByteArray *)identity
                    withByteArray:(IOSByteArray *)password {
  LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithByteArray_withByteArray_(self, identity, password);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                                                      withByteArray:(IOSByteArray *)identity
                                                      withByteArray:(IOSByteArray *)password {
  LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_(self, cipherFactory, identity, password);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                 withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier:(id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier>)groupVerifier
                                                      withByteArray:(IOSByteArray *)identity
                                                      withByteArray:(IOSByteArray *)password {
  LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(self, cipherFactory, groupVerifier, identity, password);
  return self;
}

- (jboolean)requireSRPServerExtension {
  return false;
}

- (IOSIntArray *)getCipherSuites {
  return [IOSIntArray newArrayWithInts:(jint[]){ LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA } count:1];
}

- (JavaUtilHashtable *)getClientExtensions {
  JavaUtilHashtable *clientExtensions = LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_([super getClientExtensions]);
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_addSRPExtensionWithJavaUtilHashtable_withByteArray_(clientExtensions, self->identity_);
  return clientExtensions;
}

- (void)processServerExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions {
  if (!LibOrgBouncycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(serverExtensions, JreLoadStatic(LibOrgBouncycastleCryptoTlsTlsSRPUtils, EXT_SRP), LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter)) {
    if ([self requireSRPServerExtension]) {
      @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  [super processServerExtensionsWithJavaUtilHashtable:serverExtensions];
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange {
  jint keyExchangeAlgorithm = LibOrgBouncycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(selectedCipherSuite_);
  switch (keyExchangeAlgorithm) {
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA:
    return [self createSRPKeyExchangeWithInt:keyExchangeAlgorithm];
    default:
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<LibOrgBouncycastleCryptoTlsTlsAuthentication>)getAuthentication {
  @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createSRPKeyExchangeWithInt:(jint)keyExchange {
  return new_LibOrgBouncycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(keyExchange, supportedSignatureAlgorithms_, groupVerifier_, identity_, password_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsAuthentication;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x4, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withByteArray:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:withByteArray:withByteArray:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier:withByteArray:withByteArray:);
  methods[3].selector = @selector(requireSRPServerExtension);
  methods[4].selector = @selector(getCipherSuites);
  methods[5].selector = @selector(getClientExtensions);
  methods[6].selector = @selector(processServerExtensionsWithJavaUtilHashtable:);
  methods[7].selector = @selector(getKeyExchange);
  methods[8].selector = @selector(getAuthentication);
  methods[9].selector = @selector(createSRPKeyExchangeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "groupVerifier_", "LLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "identity_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "password_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B[B", "LLibOrgBouncycastleCryptoTlsTlsCipherFactory;[B[B", "LLibOrgBouncycastleCryptoTlsTlsCipherFactory;LLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier;[B[B", "LJavaIoIOException;", "processServerExtensions", "LJavaUtilHashtable;", "createSRPKeyExchange", "I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsSRPTlsClient = { "SRPTlsClient", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsSRPTlsClient;
}

@end

void LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithByteArray_withByteArray_(LibOrgBouncycastleCryptoTlsSRPTlsClient *self, IOSByteArray *identity, IOSByteArray *password) {
  LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(self, new_LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory_init(), new_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(), identity, password);
}

LibOrgBouncycastleCryptoTlsSRPTlsClient *new_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithByteArray_withByteArray_(IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsSRPTlsClient, initWithByteArray_withByteArray_, identity, password)
}

LibOrgBouncycastleCryptoTlsSRPTlsClient *create_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithByteArray_withByteArray_(IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsSRPTlsClient, initWithByteArray_withByteArray_, identity, password)
}

void LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_(LibOrgBouncycastleCryptoTlsSRPTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, IOSByteArray *identity, IOSByteArray *password) {
  LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(self, cipherFactory, new_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(), identity, password);
}

LibOrgBouncycastleCryptoTlsSRPTlsClient *new_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsSRPTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_, cipherFactory, identity, password)
}

LibOrgBouncycastleCryptoTlsSRPTlsClient *create_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsSRPTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_, cipherFactory, identity, password)
}

void LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(LibOrgBouncycastleCryptoTlsSRPTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password) {
  LibOrgBouncycastleCryptoTlsAbstractTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  self->groupVerifier_ = groupVerifier;
  self->identity_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(identity);
  self->password_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(password);
}

LibOrgBouncycastleCryptoTlsSRPTlsClient *new_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsSRPTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_, cipherFactory, groupVerifier, identity, password)
}

LibOrgBouncycastleCryptoTlsSRPTlsClient *create_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsSRPTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_, cipherFactory, groupVerifier, identity, password)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsSRPTlsClient)
