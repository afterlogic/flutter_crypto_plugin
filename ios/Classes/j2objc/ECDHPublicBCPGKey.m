//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/ECDHPublicBCPGKey.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCPGInputStream.h"
#include "BCPGOutputStream.h"
#include "ECDHPublicBCPGKey.h"
#include "ECPoint.h"
#include "ECPublicBCPGKey.h"
#include "HashAlgorithmTags.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/lang/IllegalStateException.h"

@interface LibOrgBouncycastleBcpgECDHPublicBCPGKey () {
 @public
  jbyte reserved_;
  jbyte hashFunctionId_;
  jbyte symAlgorithmId_;
}

- (void)verifyHashAlgorithm;

- (void)verifySymmetricKeyAlgorithm;

@end

__attribute__((unused)) static void LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifyHashAlgorithm(LibOrgBouncycastleBcpgECDHPublicBCPGKey *self);

__attribute__((unused)) static void LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifySymmetricKeyAlgorithm(LibOrgBouncycastleBcpgECDHPublicBCPGKey *self);

@implementation LibOrgBouncycastleBcpgECDHPublicBCPGKey

- (instancetype)initWithLibOrgBouncycastleBcpgBCPGInputStream:(LibOrgBouncycastleBcpgBCPGInputStream *)inArg {
  LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(self, inArg);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                               withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point
                                                           withInt:(jint)hashAlgorithm
                                                           withInt:(jint)symmetricKeyAlgorithm {
  LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_withInt_withInt_(self, oid, point, hashAlgorithm, symmetricKeyAlgorithm);
  return self;
}

- (jbyte)getReserved {
  return reserved_;
}

- (jbyte)getHashAlgorithm {
  return hashFunctionId_;
}

- (jbyte)getSymmetricKeyAlgorithm {
  return symAlgorithmId_;
}

- (void)encodeWithLibOrgBouncycastleBcpgBCPGOutputStream:(LibOrgBouncycastleBcpgBCPGOutputStream *)outArg {
  [super encodeWithLibOrgBouncycastleBcpgBCPGOutputStream:outArg];
  [((LibOrgBouncycastleBcpgBCPGOutputStream *) nil_chk(outArg)) writeWithInt:(jint) 0x3];
  [outArg writeWithInt:reserved_];
  [outArg writeWithInt:hashFunctionId_];
  [outArg writeWithInt:symAlgorithmId_];
}

- (void)verifyHashAlgorithm {
  LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifyHashAlgorithm(self);
}

- (void)verifySymmetricKeyAlgorithm {
  LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifySymmetricKeyAlgorithm(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgBCPGInputStream:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withLibOrgBouncycastleMathEcECPoint:withInt:withInt:);
  methods[2].selector = @selector(getReserved);
  methods[3].selector = @selector(getHashAlgorithm);
  methods[4].selector = @selector(getSymmetricKeyAlgorithm);
  methods[5].selector = @selector(encodeWithLibOrgBouncycastleBcpgBCPGOutputStream:);
  methods[6].selector = @selector(verifyHashAlgorithm);
  methods[7].selector = @selector(verifySymmetricKeyAlgorithm);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reserved_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashFunctionId_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "symAlgorithmId_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleBcpgBCPGInputStream;", "LJavaIoIOException;", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;LLibOrgBouncycastleMathEcECPoint;II", "encode", "LLibOrgBouncycastleBcpgBCPGOutputStream;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgECDHPublicBCPGKey = { "ECDHPublicBCPGKey", "lib.org.bouncycastle.bcpg", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgECDHPublicBCPGKey;
}

@end

void LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgECDHPublicBCPGKey *self, LibOrgBouncycastleBcpgBCPGInputStream *inArg) {
  LibOrgBouncycastleBcpgECPublicBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(self, inArg);
  jint length = [((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(inArg)) read];
  IOSByteArray *kdfParameters = [IOSByteArray newArrayWithLength:length];
  if (kdfParameters->size_ != 3) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"kdf parameters size of 3 expected.");
  }
  [inArg readFullyWithByteArray:kdfParameters];
  self->reserved_ = IOSByteArray_Get(kdfParameters, 0);
  self->hashFunctionId_ = IOSByteArray_Get(kdfParameters, 1);
  self->symAlgorithmId_ = IOSByteArray_Get(kdfParameters, 2);
  LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifyHashAlgorithm(self);
  LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifySymmetricKeyAlgorithm(self);
}

LibOrgBouncycastleBcpgECDHPublicBCPGKey *new_LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *inArg) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgECDHPublicBCPGKey, initWithLibOrgBouncycastleBcpgBCPGInputStream_, inArg)
}

LibOrgBouncycastleBcpgECDHPublicBCPGKey *create_LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *inArg) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgECDHPublicBCPGKey, initWithLibOrgBouncycastleBcpgBCPGInputStream_, inArg)
}

void LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_withInt_withInt_(LibOrgBouncycastleBcpgECDHPublicBCPGKey *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, LibOrgBouncycastleMathEcECPoint *point, jint hashAlgorithm, jint symmetricKeyAlgorithm) {
  LibOrgBouncycastleBcpgECPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_(self, oid, point);
  self->reserved_ = 1;
  self->hashFunctionId_ = (jbyte) hashAlgorithm;
  self->symAlgorithmId_ = (jbyte) symmetricKeyAlgorithm;
  LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifyHashAlgorithm(self);
  LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifySymmetricKeyAlgorithm(self);
}

LibOrgBouncycastleBcpgECDHPublicBCPGKey *new_LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_withInt_withInt_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, LibOrgBouncycastleMathEcECPoint *point, jint hashAlgorithm, jint symmetricKeyAlgorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgECDHPublicBCPGKey, initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_withInt_withInt_, oid, point, hashAlgorithm, symmetricKeyAlgorithm)
}

LibOrgBouncycastleBcpgECDHPublicBCPGKey *create_LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_withInt_withInt_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, LibOrgBouncycastleMathEcECPoint *point, jint hashAlgorithm, jint symmetricKeyAlgorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgECDHPublicBCPGKey, initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_withInt_withInt_, oid, point, hashAlgorithm, symmetricKeyAlgorithm)
}

void LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifyHashAlgorithm(LibOrgBouncycastleBcpgECDHPublicBCPGKey *self) {
  switch (self->hashFunctionId_) {
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA256:
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA384:
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA512:
    break;
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Hash algorithm must be SHA-256 or stronger.");
  }
}

void LibOrgBouncycastleBcpgECDHPublicBCPGKey_verifySymmetricKeyAlgorithm(LibOrgBouncycastleBcpgECDHPublicBCPGKey *self) {
  switch (self->symAlgorithmId_) {
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_192:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256:
    break;
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Symmetric key algorithm must be AES-128 or stronger.");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgECDHPublicBCPGKey)
