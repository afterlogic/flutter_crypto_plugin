//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/prng/drbg/CryptoPrngDrbgUtils.java
//

#ifndef CryptoPrngDrbgUtils_H
#define CryptoPrngDrbgUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaUtilHashtable;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoMac;

@interface LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils : NSObject
@property (readonly, class) JavaUtilHashtable *maxSecurityStrengths NS_SWIFT_NAME(maxSecurityStrengths);

+ (JavaUtilHashtable *)maxSecurityStrengths;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (jint)getMaxSecurityStrengthWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)d;

+ (jint)getMaxSecurityStrengthWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)m;

+ (IOSByteArray *)hash_dfWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                              withByteArray:(IOSByteArray *)seedMaterial
                                                    withInt:(jint)seedLength;

+ (jboolean)isTooLargeWithByteArray:(IOSByteArray *)bytes
                            withInt:(jint)maxBytes;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils)

inline JavaUtilHashtable *LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_get_maxSecurityStrengths(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_maxSecurityStrengths;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils, maxSecurityStrengths, JavaUtilHashtable *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_init(LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils *new_LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils *create_LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_init(void);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_getMaxSecurityStrengthWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> d);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_getMaxSecurityStrengthWithLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoMac> m);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_hash_dfWithLibOrgBouncycastleCryptoDigest_withByteArray_withInt_(id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *seedMaterial, jint seedLength);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils_isTooLargeWithByteArray_withInt_(IOSByteArray *bytes, jint maxBytes);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoPrngDrbgCryptoPrngDrbgUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CryptoPrngDrbgUtils_H
