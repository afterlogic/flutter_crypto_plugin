//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/SICBlockCipher.java
//

#ifndef SICBlockCipher_H
#define SICBlockCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "SkippingStreamCipher.h"
#include "StreamBlockCipher.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoModesSICBlockCipher : LibOrgBouncycastleCryptoStreamBlockCipher < LibOrgBouncycastleCryptoSkippingStreamCipher >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)c;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (jlong)getPosition;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

- (jlong)seekToWithLong:(jlong)position;

- (jlong)skipWithLong:(jlong)numberOfBytes;

#pragma mark Protected

- (jbyte)calculateByteWithByte:(jbyte)inArg;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoModesSICBlockCipher)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoModesSICBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> c);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoModesSICBlockCipher *new_LibOrgBouncycastleCryptoModesSICBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoModesSICBlockCipher *create_LibOrgBouncycastleCryptoModesSICBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> c);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoModesSICBlockCipher)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SICBlockCipher_H
