//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/PSSSigner.java
//

#ifndef PSSSigner_H
#define PSSSigner_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Signer.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoAsymmetricBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastleCryptoSignersPSSSigner : NSObject < LibOrgBouncycastleCryptoSigner >
@property (readonly, class) jbyte TRAILER_IMPLICIT NS_SWIFT_NAME(TRAILER_IMPLICIT);

+ (jbyte)TRAILER_IMPLICIT;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                                  withByteArray:(IOSByteArray *)salt;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)contentDigest
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)mgfDigest
                                                                  withByteArray:(IOSByteArray *)salt;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)contentDigest
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)mgfDigest
                                                                  withByteArray:(IOSByteArray *)salt
                                                                       withByte:(jbyte)trailer;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)contentDigest
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)mgfDigest
                                                                        withInt:(jint)sLen;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)contentDigest
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)mgfDigest
                                                                        withInt:(jint)sLen
                                                                       withByte:(jbyte)trailer;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                                        withInt:(jint)sLen;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                             withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                                        withInt:(jint)sLen
                                                                       withByte:(jbyte)trailer;

- (IOSByteArray *)generateSignature;

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)b;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)off
                    withInt:(jint)len;

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoSignersPSSSigner)

inline jbyte LibOrgBouncycastleCryptoSignersPSSSigner_get_TRAILER_IMPLICIT(void);
#define LibOrgBouncycastleCryptoSignersPSSSigner_TRAILER_IMPLICIT -68
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoSignersPSSSigner, TRAILER_IMPLICIT, jbyte)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withInt_(LibOrgBouncycastleCryptoSignersPSSSigner *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, jint sLen);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *new_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, jint sLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *create_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, jint sLen);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_(LibOrgBouncycastleCryptoSignersPSSSigner *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, jint sLen);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *new_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, jint sLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *create_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, jint sLen);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withInt_withByte_(LibOrgBouncycastleCryptoSignersPSSSigner *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, jint sLen, jbyte trailer);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *new_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withInt_withByte_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, jint sLen, jbyte trailer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *create_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withInt_withByte_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, jint sLen, jbyte trailer);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withByte_(LibOrgBouncycastleCryptoSignersPSSSigner *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, jint sLen, jbyte trailer);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *new_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withByte_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, jint sLen, jbyte trailer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *create_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withByte_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, jint sLen, jbyte trailer);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withByteArray_(LibOrgBouncycastleCryptoSignersPSSSigner *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *salt);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *new_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withByteArray_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *salt) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *create_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withByteArray_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *salt);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withByteArray_(LibOrgBouncycastleCryptoSignersPSSSigner *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, IOSByteArray *salt);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *new_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withByteArray_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, IOSByteArray *salt) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *create_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withByteArray_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, IOSByteArray *salt);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withByteArray_withByte_(LibOrgBouncycastleCryptoSignersPSSSigner *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, IOSByteArray *salt, jbyte trailer);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *new_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withByteArray_withByte_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, IOSByteArray *salt, jbyte trailer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersPSSSigner *create_LibOrgBouncycastleCryptoSignersPSSSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withByteArray_withByte_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, id<LibOrgBouncycastleCryptoDigest> contentDigest, id<LibOrgBouncycastleCryptoDigest> mgfDigest, IOSByteArray *salt, jbyte trailer);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoSignersPSSSigner)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PSSSigner_H
