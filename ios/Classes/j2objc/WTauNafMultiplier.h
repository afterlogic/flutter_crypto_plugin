//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/WTauNafMultiplier.java
//

#ifndef WTauNafMultiplier_H
#define WTauNafMultiplier_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractECMultiplier.h"
#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class LibOrgBouncycastleMathEcECPoint;

@interface LibOrgBouncycastleMathEcWTauNafMultiplier : LibOrgBouncycastleMathEcAbstractECMultiplier
@property (readonly, copy, class) NSString *PRECOMP_NAME NS_SWIFT_NAME(PRECOMP_NAME);

+ (NSString *)PRECOMP_NAME;

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Protected

- (LibOrgBouncycastleMathEcECPoint *)multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)k;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcWTauNafMultiplier)

inline NSString *LibOrgBouncycastleMathEcWTauNafMultiplier_get_PRECOMP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleMathEcWTauNafMultiplier_PRECOMP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcWTauNafMultiplier, PRECOMP_NAME, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcWTauNafMultiplier_init(LibOrgBouncycastleMathEcWTauNafMultiplier *self);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcWTauNafMultiplier *new_LibOrgBouncycastleMathEcWTauNafMultiplier_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcWTauNafMultiplier *create_LibOrgBouncycastleMathEcWTauNafMultiplier_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcWTauNafMultiplier)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // WTauNafMultiplier_H
