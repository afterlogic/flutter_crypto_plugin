//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/PRFAlgorithm.java
//

#ifndef PRFAlgorithm_H
#define PRFAlgorithm_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsPRFAlgorithm : NSObject
@property (readonly, class) jint tls_prf_legacy NS_SWIFT_NAME(tls_prf_legacy);
@property (readonly, class) jint tls_prf_sha256 NS_SWIFT_NAME(tls_prf_sha256);
@property (readonly, class) jint tls_prf_sha384 NS_SWIFT_NAME(tls_prf_sha384);

+ (jint)tls_prf_legacy;

+ (jint)tls_prf_sha256;

+ (jint)tls_prf_sha384;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsPRFAlgorithm)

inline jint LibOrgBouncycastleCryptoTlsPRFAlgorithm_get_tls_prf_legacy(void);
#define LibOrgBouncycastleCryptoTlsPRFAlgorithm_tls_prf_legacy 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsPRFAlgorithm, tls_prf_legacy, jint)

inline jint LibOrgBouncycastleCryptoTlsPRFAlgorithm_get_tls_prf_sha256(void);
#define LibOrgBouncycastleCryptoTlsPRFAlgorithm_tls_prf_sha256 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsPRFAlgorithm, tls_prf_sha256, jint)

inline jint LibOrgBouncycastleCryptoTlsPRFAlgorithm_get_tls_prf_sha384(void);
#define LibOrgBouncycastleCryptoTlsPRFAlgorithm_tls_prf_sha384 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsPRFAlgorithm, tls_prf_sha384, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsPRFAlgorithm_init(LibOrgBouncycastleCryptoTlsPRFAlgorithm *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsPRFAlgorithm *new_LibOrgBouncycastleCryptoTlsPRFAlgorithm_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsPRFAlgorithm *create_LibOrgBouncycastleCryptoTlsPRFAlgorithm_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsPRFAlgorithm)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PRFAlgorithm_H
