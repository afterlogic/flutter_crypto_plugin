//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/DigestAlgorithmProvider.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmProvider.h"
#include "ConfigurableProvider.h"
#include "DigestAlgorithmProvider.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider
                                                                          withNSString:(NSString *)algorithm
                                                                          withNSString:(NSString *)algorithmClassName
                                                                          withNSString:(NSString *)keyGeneratorClassName {
  NSString *mainName = JreStrcat("$$", @"HMAC", algorithm);
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$$", @"Mac.", mainName) withNSString:algorithmClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.Mac.HMAC-", algorithm) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.Mac.HMAC/", algorithm) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"KeyGenerator.", mainName) withNSString:keyGeneratorClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.KeyGenerator.HMAC-", algorithm) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.KeyGenerator.HMAC/", algorithm) withNSString:mainName];
}

- (void)addHMACAliasWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider
                                                                      withNSString:(NSString *)algorithm
                                    withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  NSString *mainName = JreStrcat("$$", @"HMAC", algorithm);
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.Mac.", oid) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.KeyGenerator.", oid) withNSString:mainName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:withNSString:withNSString:withNSString:);
  methods[2].selector = @selector(addHMACAliasWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:withNSString:withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addHMACAlgorithm", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;LNSString;LNSString;LNSString;", "addHMACAlias", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;LNSString;LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider = { "DigestAlgorithmProvider", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x400, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider;
}

@end

void LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider)
