//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ElGamal.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricAlgorithmProvider.h"
#include "AsymmetricKeyInfoConverter.h"
#include "ConfigurableProvider.h"
#include "ElGamal.h"
#include "J2ObjC_source.h"
#include "JcajceElgamalKeyFactorySpi.h"
#include "OIWObjectIdentifiers.h"

inline NSString *LibOrgBouncycastleJcajceProviderAsymmetricElGamal_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX = @"lib.org.bouncycastle.jcajce.provider.asymmetric.elgamal.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricElGamal, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricElGamal

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricElGamal_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, "LLibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricElGamal = { "ElGamal", "lib.org.bouncycastle.jcajce.provider.asymmetric", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, 1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricElGamal;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricElGamal_init(LibOrgBouncycastleJcajceProviderAsymmetricElGamal *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricElGamal *new_LibOrgBouncycastleJcajceProviderAsymmetricElGamal_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElGamal, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricElGamal *create_LibOrgBouncycastleJcajceProviderAsymmetricElGamal_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElGamal, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricElGamal)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"AlgorithmParameterGenerator.ELGAMAL" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"ElgamalAlgorithmParameterGeneratorSpi")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameterGenerator.ElGamal" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"ElgamalAlgorithmParameterGeneratorSpi")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.ELGAMAL" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"ElgamalAlgorithmParametersSpi")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.ElGamal" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"ElgamalAlgorithmParametersSpi")];
  [provider addAlgorithmWithNSString:@"Cipher.ELGAMAL" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"CipherSpi$NoPadding")];
  [provider addAlgorithmWithNSString:@"Cipher.ElGamal" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"CipherSpi$NoPadding")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Cipher.ELGAMAL/ECB/PKCS1PADDING" withNSString:@"ELGAMAL/PKCS1"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Cipher.ELGAMAL/NONE/PKCS1PADDING" withNSString:@"ELGAMAL/PKCS1"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Cipher.ELGAMAL/NONE/NOPADDING" withNSString:@"ELGAMAL"];
  [provider addAlgorithmWithNSString:@"Cipher.ELGAMAL/PKCS1" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"CipherSpi$PKCS1v1_5Padding")];
  [provider addAlgorithmWithNSString:@"KeyFactory.ELGAMAL" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"JcajceElgamalKeyFactorySpi")];
  [provider addAlgorithmWithNSString:@"KeyFactory.ElGamal" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"JcajceElgamalKeyFactorySpi")];
  [provider addAlgorithmWithNSString:@"KeyPairGenerator.ELGAMAL" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"JcajceElgamalKeyPairGeneratorSpi")];
  [provider addAlgorithmWithNSString:@"KeyPairGenerator.ElGamal" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricElGamal_PREFIX, @"JcajceElgamalKeyPairGeneratorSpi")];
  id<LibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter> keyFact = new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi_init();
  [self registerOidWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm) withNSString:@"ELGAMAL" withLibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter:keyFact];
  [self registerOidAlgorithmParameterGeneratorWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm) withNSString:@"ELGAMAL"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", "LLibOrgBouncycastleJcajceProviderAsymmetricElGamal;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.asymmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings_init(LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAsymmetricAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings *new_LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings *create_LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricElGamal_Mappings)
