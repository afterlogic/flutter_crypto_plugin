//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/IESEngine.java
//

#ifndef IESEngine_H
#define IESEngine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoBufferedBlockCipher;
@class LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoParamsIESParameters;
@protocol LibOrgBouncycastleCryptoBasicAgreement;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoDerivationFunction;
@protocol LibOrgBouncycastleCryptoKeyParser;
@protocol LibOrgBouncycastleCryptoMac;

@interface LibOrgBouncycastleCryptoEnginesIESEngine : NSObject {
 @public
  id<LibOrgBouncycastleCryptoBasicAgreement> agree_;
  id<LibOrgBouncycastleCryptoDerivationFunction> kdf_;
  id<LibOrgBouncycastleCryptoMac> mac_;
  LibOrgBouncycastleCryptoBufferedBlockCipher *cipher_;
  IOSByteArray *macBuf_;
  jboolean forEncryption_;
  id<LibOrgBouncycastleCryptoCipherParameters> privParam_;
  id<LibOrgBouncycastleCryptoCipherParameters> pubParam_;
  LibOrgBouncycastleCryptoParamsIESParameters *param_;
  IOSByteArray *V_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBasicAgreement:(id<LibOrgBouncycastleCryptoBasicAgreement>)agree
                          withLibOrgBouncycastleCryptoDerivationFunction:(id<LibOrgBouncycastleCryptoDerivationFunction>)kdf
                                         withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBasicAgreement:(id<LibOrgBouncycastleCryptoBasicAgreement>)agree
                          withLibOrgBouncycastleCryptoDerivationFunction:(id<LibOrgBouncycastleCryptoDerivationFunction>)kdf
                                         withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                         withLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)cipher;

- (LibOrgBouncycastleCryptoBufferedBlockCipher *)getCipher;

- (id<LibOrgBouncycastleCryptoMac>)getMac;

- (void)init__WithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey
                          withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params
       withLibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator:(LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator *)ephemeralKeyPairGenerator OBJC_METHOD_FAMILY_NONE;

- (void)init__WithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey
                          withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params
                                 withLibOrgBouncycastleCryptoKeyParser:(id<LibOrgBouncycastleCryptoKeyParser>)publicKeyParser OBJC_METHOD_FAMILY_NONE;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)privParam
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)pubParam
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen;

#pragma mark Protected

- (IOSByteArray *)getLengthTagWithByteArray:(IOSByteArray *)p2;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEnginesIESEngine)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, agree_, id<LibOrgBouncycastleCryptoBasicAgreement>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, kdf_, id<LibOrgBouncycastleCryptoDerivationFunction>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, mac_, id<LibOrgBouncycastleCryptoMac>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, cipher_, LibOrgBouncycastleCryptoBufferedBlockCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, macBuf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, privParam_, id<LibOrgBouncycastleCryptoCipherParameters>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, pubParam_, id<LibOrgBouncycastleCryptoCipherParameters>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, param_, LibOrgBouncycastleCryptoParamsIESParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesIESEngine, V_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoEnginesIESEngine *self, id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesIESEngine *new_LibOrgBouncycastleCryptoEnginesIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesIESEngine *create_LibOrgBouncycastleCryptoEnginesIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_withLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoEnginesIESEngine *self, id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesIESEngine *new_LibOrgBouncycastleCryptoEnginesIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_withLibOrgBouncycastleCryptoBufferedBlockCipher_(id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesIESEngine *create_LibOrgBouncycastleCryptoEnginesIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_withLibOrgBouncycastleCryptoBufferedBlockCipher_(id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesIESEngine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // IESEngine_H
