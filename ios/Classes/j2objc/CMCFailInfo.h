//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmc/CMCFailInfo.java
//

#ifndef CMCFailInfo_H
#define CMCFailInfo_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;

@interface LibOrgBouncycastleAsn1CmcCMCFailInfo : LibOrgBouncycastleAsn1ASN1Object
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *badAlg NS_SWIFT_NAME(badAlg);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *badMessageCheck NS_SWIFT_NAME(badMessageCheck);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *badRequest NS_SWIFT_NAME(badRequest);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *badTime NS_SWIFT_NAME(badTime);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *badCertId NS_SWIFT_NAME(badCertId);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *unsupportedExt NS_SWIFT_NAME(unsupportedExt);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *mustArchiveKeys NS_SWIFT_NAME(mustArchiveKeys);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *badIdentity NS_SWIFT_NAME(badIdentity);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *popRequired NS_SWIFT_NAME(popRequired);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *popFailed NS_SWIFT_NAME(popFailed);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *noKeyReuse NS_SWIFT_NAME(noKeyReuse);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *internalCAError NS_SWIFT_NAME(internalCAError);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *tryLater NS_SWIFT_NAME(tryLater);
@property (readonly, class) LibOrgBouncycastleAsn1CmcCMCFailInfo *authDataFail NS_SWIFT_NAME(authDataFail);

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)badAlg;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)badMessageCheck;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)badRequest;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)badTime;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)badCertId;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)unsupportedExt;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)mustArchiveKeys;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)badIdentity;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)popRequired;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)popFailed;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)noKeyReuse;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)internalCAError;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)tryLater;

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)authDataFail;

#pragma mark Public

+ (LibOrgBouncycastleAsn1CmcCMCFailInfo *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleAsn1CmcCMCFailInfo)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_badAlg(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_badAlg;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, badAlg, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_badMessageCheck(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_badMessageCheck;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, badMessageCheck, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_badRequest(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_badRequest;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, badRequest, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_badTime(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_badTime;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, badTime, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_badCertId(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_badCertId;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, badCertId, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_unsupportedExt(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_unsupportedExt;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, unsupportedExt, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_mustArchiveKeys(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_mustArchiveKeys;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, mustArchiveKeys, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_badIdentity(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_badIdentity;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, badIdentity, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_popRequired(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_popRequired;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, popRequired, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_popFailed(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_popFailed;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, popFailed, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_noKeyReuse(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_noKeyReuse;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, noKeyReuse, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_internalCAError(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_internalCAError;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, internalCAError, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_tryLater(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_tryLater;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, tryLater, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

inline LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_get_authDataFail(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_authDataFail;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CmcCMCFailInfo, authDataFail, LibOrgBouncycastleAsn1CmcCMCFailInfo *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcCMCFailInfo *LibOrgBouncycastleAsn1CmcCMCFailInfo_getInstanceWithId_(id o);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmcCMCFailInfo)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CMCFailInfo_H
