//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPPublicKey.java
//

#ifndef PGPPublicKey_H
#define PGPPublicKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PublicKeyAlgorithmTags.h"

@class IOSByteArray;
@class JavaIoOutputStream;
@class JavaUtilDate;
@class LibOrgBouncycastleBcpgPublicKeyPacket;
@class LibOrgBouncycastleBcpgTrustPacket;
@class LibOrgBouncycastleOpenpgpPGPSignature;
@class LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;

@interface LibOrgBouncycastleOpenpgpPGPPublicKey : NSObject < LibOrgBouncycastleBcpgPublicKeyAlgorithmTags > {
 @public
  LibOrgBouncycastleBcpgPublicKeyPacket *publicPk_;
  LibOrgBouncycastleBcpgTrustPacket *trustPk_;
  id<JavaUtilList> keySigs_;
  id<JavaUtilList> ids_;
  id<JavaUtilList> idTrusts_;
  id<JavaUtilList> idSigs_;
  id<JavaUtilList> subSigs_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)publicKeyPacket
          withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                       withByteArray:(IOSByteArray *)rawID
                                                           withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                           withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                        withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *)userAttributes
                                                           withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                        withNSString:(NSString *)id_
                                                           withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream
                         withBoolean:(jboolean)forTransfer;

- (jint)getAlgorithm;

- (jint)getBitStrength;

- (JavaUtilDate *)getCreationTime;

- (IOSByteArray *)getEncoded;

- (IOSByteArray *)getEncodedWithBoolean:(jboolean)forTransfer;

- (IOSByteArray *)getFingerprint;

- (jlong)getKeyID;

- (id<JavaUtilIterator>)getKeySignatures;

- (LibOrgBouncycastleBcpgPublicKeyPacket *)getPublicKeyPacket;

- (id<JavaUtilIterator>)getRawUserIDs;

- (id<JavaUtilIterator>)getSignatures;

- (id<JavaUtilIterator>)getSignaturesForIDWithByteArray:(IOSByteArray *)rawID;

- (id<JavaUtilIterator>)getSignaturesForIDWithNSString:(NSString *)id_;

- (id<JavaUtilIterator>)getSignaturesForKeyIDWithLong:(jlong)keyID;

- (id<JavaUtilIterator>)getSignaturesForUserAttributeWithLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *)userAttributes;

- (id<JavaUtilIterator>)getSignaturesOfTypeWithInt:(jint)signatureType;

- (IOSByteArray *)getTrustData;

- (id<JavaUtilIterator>)getUserAttributes;

- (id<JavaUtilIterator>)getUserIDs;

- (jint)getValidDays;

- (jlong)getValidSeconds;

- (jint)getVersion;

- (jboolean)hasRevocation;

- (jboolean)isEncryptionKey;

- (jboolean)isMasterKey;

- (jboolean)isRevoked;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                          withByteArray:(IOSByteArray *)rawID;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                          withByteArray:(IOSByteArray *)id_
                                                              withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                              withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                           withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *)userAttributes;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                           withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *)userAttributes
                                                              withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                           withNSString:(NSString *)id_;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                           withNSString:(NSString *)id_
                                                              withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey;

- (instancetype __nonnull)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                  withLibOrgBouncycastleBcpgTrustPacket:(LibOrgBouncycastleBcpgTrustPacket *)trust
                                                       withJavaUtilList:(id<JavaUtilList>)subSigs;

- (instancetype __nonnull)initWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)publicPk
                                  withLibOrgBouncycastleBcpgTrustPacket:(LibOrgBouncycastleBcpgTrustPacket *)trustPk
                                                       withJavaUtilList:(id<JavaUtilList>)sigs
          withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

- (instancetype __nonnull)initWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)publicPk
                                  withLibOrgBouncycastleBcpgTrustPacket:(LibOrgBouncycastleBcpgTrustPacket *)trustPk
                                                       withJavaUtilList:(id<JavaUtilList>)keySigs
                                                       withJavaUtilList:(id<JavaUtilList>)ids
                                                       withJavaUtilList:(id<JavaUtilList>)idTrusts
                                                       withJavaUtilList:(id<JavaUtilList>)idSigs
          withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPPublicKey)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKey, publicPk_, LibOrgBouncycastleBcpgPublicKeyPacket *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKey, trustPk_, LibOrgBouncycastleBcpgTrustPacket *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKey, keySigs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKey, ids_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKey, idTrusts_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKey, idSigs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKey, subSigs_, id<JavaUtilList>)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleBcpgPublicKeyPacket *publicKeyPacket, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicKeyPacket, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicKeyPacket, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> sigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> sigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> sigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleBcpgTrustPacket *trust, id<JavaUtilList> subSigs);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleBcpgTrustPacket *trust, id<JavaUtilList> subSigs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleBcpgTrustPacket *trust, id<JavaUtilList> subSigs);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> keySigs, id<JavaUtilList> ids, id<JavaUtilList> idTrusts, id<JavaUtilList> idSigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> keySigs, id<JavaUtilList> ids, id<JavaUtilList> idTrusts, id<JavaUtilList> idSigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> keySigs, id<JavaUtilList> ids, id<JavaUtilList> idTrusts, id<JavaUtilList> idSigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, IOSByteArray *rawID, LibOrgBouncycastleOpenpgpPGPSignature *certification);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignature *certification);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *userAttributes, LibOrgBouncycastleOpenpgpPGPSignature *certification);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *userAttributes);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, NSString *id_);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, IOSByteArray *rawID);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, IOSByteArray *id_, LibOrgBouncycastleOpenpgpPGPSignature *certification);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignature *certification);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *userAttributes, LibOrgBouncycastleOpenpgpPGPSignature *certification);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPSignature *certification);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPSignature *certification);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPPublicKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PGPPublicKey_H
