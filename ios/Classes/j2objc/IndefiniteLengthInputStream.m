//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/IndefiniteLengthInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "IndefiniteLengthInputStream.h"
#include "J2ObjC_source.h"
#include "LimitedInputStream.h"
#include "java/io/EOFException.h"
#include "java/io/InputStream.h"

@interface LibOrgBouncycastleAsn1IndefiniteLengthInputStream () {
 @public
  jint _b1_;
  jint _b2_;
  jboolean _eofReached_;
  jboolean _eofOn00_;
}

- (jboolean)checkForEof;

@end

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(LibOrgBouncycastleAsn1IndefiniteLengthInputStream *self);

@implementation LibOrgBouncycastleAsn1IndefiniteLengthInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                  withInt:(jint)limit {
  LibOrgBouncycastleAsn1IndefiniteLengthInputStream_initWithJavaIoInputStream_withInt_(self, inArg, limit);
  return self;
}

- (void)setEofOn00WithBoolean:(jboolean)eofOn00 {
  _eofOn00_ = eofOn00;
  LibOrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(self);
}

- (jboolean)checkForEof {
  return LibOrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(self);
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  if (_eofOn00_ || len < 3) {
    return [super readWithByteArray:b withInt:off withInt:len];
  }
  if (_eofReached_) {
    return -1;
  }
  jint numRead = [((JavaIoInputStream *) nil_chk(_in_)) readWithByteArray:b withInt:off + 2 withInt:len - 2];
  if (numRead < 0) {
    @throw new_JavaIoEOFException_init();
  }
  *IOSByteArray_GetRef(nil_chk(b), off) = (jbyte) _b1_;
  *IOSByteArray_GetRef(b, off + 1) = (jbyte) _b2_;
  _b1_ = [_in_ read];
  _b2_ = [_in_ read];
  if (_b2_ < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return numRead + 2;
}

- (jint)read {
  if (LibOrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(self)) {
    return -1;
  }
  jint b = [((JavaIoInputStream *) nil_chk(_in_)) read];
  if (b < 0) {
    @throw new_JavaIoEOFException_init();
  }
  jint v = _b1_;
  _b1_ = _b2_;
  _b2_ = b;
  return v;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withInt:);
  methods[1].selector = @selector(setEofOn00WithBoolean:);
  methods[2].selector = @selector(checkForEof);
  methods[3].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(read);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_b1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_b2_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_eofReached_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_eofOn00_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;I", "LJavaIoIOException;", "setEofOn00", "Z", "read", "[BII" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1IndefiniteLengthInputStream = { "IndefiniteLengthInputStream", "lib.org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x0, 5, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1IndefiniteLengthInputStream;
}

@end

void LibOrgBouncycastleAsn1IndefiniteLengthInputStream_initWithJavaIoInputStream_withInt_(LibOrgBouncycastleAsn1IndefiniteLengthInputStream *self, JavaIoInputStream *inArg, jint limit) {
  LibOrgBouncycastleAsn1LimitedInputStream_initWithJavaIoInputStream_withInt_(self, inArg, limit);
  self->_eofReached_ = false;
  self->_eofOn00_ = true;
  self->_b1_ = [((JavaIoInputStream *) nil_chk(inArg)) read];
  self->_b2_ = [inArg read];
  if (self->_b2_ < 0) {
    @throw new_JavaIoEOFException_init();
  }
  LibOrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(self);
}

LibOrgBouncycastleAsn1IndefiniteLengthInputStream *new_LibOrgBouncycastleAsn1IndefiniteLengthInputStream_initWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint limit) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1IndefiniteLengthInputStream, initWithJavaIoInputStream_withInt_, inArg, limit)
}

LibOrgBouncycastleAsn1IndefiniteLengthInputStream *create_LibOrgBouncycastleAsn1IndefiniteLengthInputStream_initWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint limit) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1IndefiniteLengthInputStream, initWithJavaIoInputStream_withInt_, inArg, limit)
}

jboolean LibOrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(LibOrgBouncycastleAsn1IndefiniteLengthInputStream *self) {
  if (!self->_eofReached_ && self->_eofOn00_ && (self->_b1_ == (jint) 0x00 && self->_b2_ == (jint) 0x00)) {
    self->_eofReached_ = true;
    [self setParentEofDetectWithBoolean:true];
  }
  return self->_eofReached_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1IndefiniteLengthInputStream)
