//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SignatureAlgorithm.java
//

#ifndef SignatureAlgorithm_H
#define SignatureAlgorithm_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsSignatureAlgorithm : NSObject
@property (readonly, class) jshort anonymous NS_SWIFT_NAME(anonymous);
@property (readonly, class) jshort rsa NS_SWIFT_NAME(rsa);
@property (readonly, class) jshort dsa NS_SWIFT_NAME(dsa);
@property (readonly, class) jshort ecdsa NS_SWIFT_NAME(ecdsa);

+ (jshort)anonymous;

+ (jshort)rsa;

+ (jshort)dsa;

+ (jshort)ecdsa;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsSignatureAlgorithm)

inline jshort LibOrgBouncycastleCryptoTlsSignatureAlgorithm_get_anonymous(void);
#define LibOrgBouncycastleCryptoTlsSignatureAlgorithm_anonymous 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSignatureAlgorithm, anonymous, jshort)

inline jshort LibOrgBouncycastleCryptoTlsSignatureAlgorithm_get_rsa(void);
#define LibOrgBouncycastleCryptoTlsSignatureAlgorithm_rsa 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSignatureAlgorithm, rsa, jshort)

inline jshort LibOrgBouncycastleCryptoTlsSignatureAlgorithm_get_dsa(void);
#define LibOrgBouncycastleCryptoTlsSignatureAlgorithm_dsa 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSignatureAlgorithm, dsa, jshort)

inline jshort LibOrgBouncycastleCryptoTlsSignatureAlgorithm_get_ecdsa(void);
#define LibOrgBouncycastleCryptoTlsSignatureAlgorithm_ecdsa 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSignatureAlgorithm, ecdsa, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSignatureAlgorithm_init(LibOrgBouncycastleCryptoTlsSignatureAlgorithm *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSignatureAlgorithm *new_LibOrgBouncycastleCryptoTlsSignatureAlgorithm_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSignatureAlgorithm *create_LibOrgBouncycastleCryptoTlsSignatureAlgorithm_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsSignatureAlgorithm)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SignatureAlgorithm_H
