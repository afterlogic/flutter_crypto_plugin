//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/Tnaf.java
//

#ifndef Tnaf_H
#define Tnaf_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleMathEcECCurve_AbstractF2m;
@class LibOrgBouncycastleMathEcECFieldElement;
@class LibOrgBouncycastleMathEcECPoint_AbstractF2m;
@class LibOrgBouncycastleMathEcSimpleBigDecimal;
@class LibOrgBouncycastleMathEcZTauElement;

@interface LibOrgBouncycastleMathEcTnaf : NSObject
@property (readonly, class) jbyte WIDTH NS_SWIFT_NAME(WIDTH);
@property (readonly, class) jbyte POW_2_WIDTH NS_SWIFT_NAME(POW_2_WIDTH);
@property (readonly, class) IOSObjectArray *alpha0 NS_SWIFT_NAME(alpha0);
@property (readonly, class) IOSObjectArray *alpha0Tnaf NS_SWIFT_NAME(alpha0Tnaf);
@property (readonly, class) IOSObjectArray *alpha1 NS_SWIFT_NAME(alpha1);
@property (readonly, class) IOSObjectArray *alpha1Tnaf NS_SWIFT_NAME(alpha1Tnaf);

+ (jbyte)WIDTH;

+ (jbyte)POW_2_WIDTH;

+ (IOSObjectArray *)alpha0;

+ (IOSObjectArray *)alpha0Tnaf;

+ (IOSObjectArray *)alpha1;

+ (IOSObjectArray *)alpha1Tnaf;

#pragma mark Public

+ (LibOrgBouncycastleMathEcSimpleBigDecimal *)approximateDivisionByNWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                    withJavaMathBigInteger:(JavaMathBigInteger *)s
                                                                    withJavaMathBigInteger:(JavaMathBigInteger *)vm
                                                                                  withByte:(jbyte)a
                                                                                   withInt:(jint)m
                                                                                   withInt:(jint)c;

+ (IOSObjectArray *)getLucasWithByte:(jbyte)mu
                             withInt:(jint)k
                         withBoolean:(jboolean)doV;

+ (jbyte)getMuWithLibOrgBouncycastleMathEcECCurve_AbstractF2m:(LibOrgBouncycastleMathEcECCurve_AbstractF2m *)curve;

+ (jbyte)getMuWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)curveA;

+ (jbyte)getMuWithInt:(jint)curveA;

+ (IOSObjectArray *)getPreCompWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                     withByte:(jbyte)a;

+ (IOSObjectArray *)getSiWithLibOrgBouncycastleMathEcECCurve_AbstractF2m:(LibOrgBouncycastleMathEcECCurve_AbstractF2m *)curve;

+ (IOSObjectArray *)getSiWithInt:(jint)fieldSize
                         withInt:(jint)curveA
          withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

+ (JavaMathBigInteger *)getTwWithByte:(jbyte)mu
                              withInt:(jint)w;

+ (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyFromTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                                                   withByteArray:(IOSByteArray *)u;

+ (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyRTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                                       withJavaMathBigInteger:(JavaMathBigInteger *)k;

+ (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                     withLibOrgBouncycastleMathEcZTauElement:(LibOrgBouncycastleMathEcZTauElement *)lambda;

+ (LibOrgBouncycastleMathEcSimpleBigDecimal *)normWithByte:(jbyte)mu
              withLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)u
              withLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)v;

+ (JavaMathBigInteger *)normWithByte:(jbyte)mu
withLibOrgBouncycastleMathEcZTauElement:(LibOrgBouncycastleMathEcZTauElement *)lambda;

+ (LibOrgBouncycastleMathEcZTauElement *)partModReductionWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                        withInt:(jint)m
                                                                       withByte:(jbyte)a
                                                    withJavaMathBigIntegerArray:(IOSObjectArray *)s
                                                                       withByte:(jbyte)mu
                                                                       withByte:(jbyte)c;

+ (LibOrgBouncycastleMathEcZTauElement *)roundWithLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)lambda0
                                              withLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)lambda1
                                                                                  withByte:(jbyte)mu;

+ (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)tauWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p;

+ (IOSByteArray *)tauAdicNafWithByte:(jbyte)mu
withLibOrgBouncycastleMathEcZTauElement:(LibOrgBouncycastleMathEcZTauElement *)lambda;

+ (IOSByteArray *)tauAdicWNafWithByte:(jbyte)mu
withLibOrgBouncycastleMathEcZTauElement:(LibOrgBouncycastleMathEcZTauElement *)lambda
                             withByte:(jbyte)width
               withJavaMathBigInteger:(JavaMathBigInteger *)pow2w
               withJavaMathBigInteger:(JavaMathBigInteger *)tw
withLibOrgBouncycastleMathEcZTauElementArray:(IOSObjectArray *)alpha;

#pragma mark Protected

+ (jint)getShiftsForCofactorWithJavaMathBigInteger:(JavaMathBigInteger *)h;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleMathEcTnaf)

inline jbyte LibOrgBouncycastleMathEcTnaf_get_WIDTH(void);
#define LibOrgBouncycastleMathEcTnaf_WIDTH 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcTnaf, WIDTH, jbyte)

inline jbyte LibOrgBouncycastleMathEcTnaf_get_POW_2_WIDTH(void);
#define LibOrgBouncycastleMathEcTnaf_POW_2_WIDTH 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcTnaf, POW_2_WIDTH, jbyte)

inline IOSObjectArray *LibOrgBouncycastleMathEcTnaf_get_alpha0(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcTnaf_alpha0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcTnaf, alpha0, IOSObjectArray *)

inline IOSObjectArray *LibOrgBouncycastleMathEcTnaf_get_alpha0Tnaf(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcTnaf_alpha0Tnaf;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcTnaf, alpha0Tnaf, IOSObjectArray *)

inline IOSObjectArray *LibOrgBouncycastleMathEcTnaf_get_alpha1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcTnaf_alpha1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcTnaf, alpha1, IOSObjectArray *)

inline IOSObjectArray *LibOrgBouncycastleMathEcTnaf_get_alpha1Tnaf(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcTnaf_alpha1Tnaf;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcTnaf, alpha1Tnaf, IOSObjectArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcTnaf_init(LibOrgBouncycastleMathEcTnaf *self);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcTnaf *new_LibOrgBouncycastleMathEcTnaf_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcTnaf *create_LibOrgBouncycastleMathEcTnaf_init(void);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_normWithByte_withLibOrgBouncycastleMathEcZTauElement_(jbyte mu, LibOrgBouncycastleMathEcZTauElement *lambda);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcSimpleBigDecimal *LibOrgBouncycastleMathEcTnaf_normWithByte_withLibOrgBouncycastleMathEcSimpleBigDecimal_withLibOrgBouncycastleMathEcSimpleBigDecimal_(jbyte mu, LibOrgBouncycastleMathEcSimpleBigDecimal *u, LibOrgBouncycastleMathEcSimpleBigDecimal *v);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcZTauElement *LibOrgBouncycastleMathEcTnaf_roundWithLibOrgBouncycastleMathEcSimpleBigDecimal_withLibOrgBouncycastleMathEcSimpleBigDecimal_withByte_(LibOrgBouncycastleMathEcSimpleBigDecimal *lambda0, LibOrgBouncycastleMathEcSimpleBigDecimal *lambda1, jbyte mu);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcSimpleBigDecimal *LibOrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(JavaMathBigInteger *k, JavaMathBigInteger *s, JavaMathBigInteger *vm, jbyte a, jint m, jint c);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withLibOrgBouncycastleMathEcZTauElement_(jbyte mu, LibOrgBouncycastleMathEcZTauElement *lambda);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_AbstractF2m *LibOrgBouncycastleMathEcTnaf_tauWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p);

FOUNDATION_EXPORT jbyte LibOrgBouncycastleMathEcTnaf_getMuWithLibOrgBouncycastleMathEcECCurve_AbstractF2m_(LibOrgBouncycastleMathEcECCurve_AbstractF2m *curve);

FOUNDATION_EXPORT jbyte LibOrgBouncycastleMathEcTnaf_getMuWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECFieldElement *curveA);

FOUNDATION_EXPORT jbyte LibOrgBouncycastleMathEcTnaf_getMuWithInt_(jint curveA);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(jbyte mu, jint k, jboolean doV);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_getTwWithByte_withInt_(jbyte mu, jint w);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcTnaf_getSiWithLibOrgBouncycastleMathEcECCurve_AbstractF2m_(LibOrgBouncycastleMathEcECCurve_AbstractF2m *curve);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcTnaf_getSiWithInt_withInt_withJavaMathBigInteger_(jint fieldSize, jint curveA, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(JavaMathBigInteger *h);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcZTauElement *LibOrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(JavaMathBigInteger *k, jint m, jbyte a, IOSObjectArray *s, jbyte mu, jbyte c);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_AbstractF2m *LibOrgBouncycastleMathEcTnaf_multiplyRTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p, JavaMathBigInteger *k);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_AbstractF2m *LibOrgBouncycastleMathEcTnaf_multiplyTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withLibOrgBouncycastleMathEcZTauElement_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p, LibOrgBouncycastleMathEcZTauElement *lambda);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_AbstractF2m *LibOrgBouncycastleMathEcTnaf_multiplyFromTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p, IOSByteArray *u);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleMathEcTnaf_tauAdicWNafWithByte_withLibOrgBouncycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcZTauElementArray_(jbyte mu, LibOrgBouncycastleMathEcZTauElement *lambda, jbyte width, JavaMathBigInteger *pow2w, JavaMathBigInteger *tw, IOSObjectArray *alpha);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcTnaf_getPreCompWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p, jbyte a);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcTnaf)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Tnaf_H
