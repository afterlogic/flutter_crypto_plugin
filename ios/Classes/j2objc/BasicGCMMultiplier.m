//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/gcm/BasicGCMMultiplier.java
//

#include "BasicGCMMultiplier.h"
#include "GCMUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier () {
 @public
  IOSLongArray *H_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier, H_, IOSLongArray *)

@implementation LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithByteArray:(IOSByteArray *)H {
  self->H_ = LibOrgBouncycastleCryptoModesGcmGCMUtil_asLongsWithByteArray_(H);
}

- (void)multiplyHWithByteArray:(IOSByteArray *)x {
  IOSLongArray *t = LibOrgBouncycastleCryptoModesGcmGCMUtil_asLongsWithByteArray_(x);
  LibOrgBouncycastleCryptoModesGcmGCMUtil_multiplyWithLongArray_withLongArray_(t, H_);
  LibOrgBouncycastleCryptoModesGcmGCMUtil_asBytesWithLongArray_withByteArray_(t, x);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithByteArray:);
  methods[2].selector = @selector(multiplyHWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "H_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "[B", "multiplyH" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier = { "BasicGCMMultiplier", "lib.org.bouncycastle.crypto.modes.gcm", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier;
}

@end

void LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier_init(LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier *new_LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier, init)
}

LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier *create_LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesGcmBasicGCMMultiplier)
