//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsSigner.java
//

#include "J2ObjC_source.h"
#include "TlsSigner.h"

@interface LibOrgBouncycastleCryptoTlsTlsSigner : NSObject

@end

@implementation LibOrgBouncycastleCryptoTlsTlsSigner

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x401, 2, 5, 4, -1, -1, -1 },
    { NULL, "Z", 0x401, 6, 7, 4, -1, -1, -1 },
    { NULL, "Z", 0x401, 6, 8, 4, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x401, 9, 10, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x401, 9, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x401, 12, 10, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x401, 12, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 13, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init__WithLibOrgBouncycastleCryptoTlsTlsContext:);
  methods[1].selector = @selector(generateRawSignatureWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[2].selector = @selector(generateRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[3].selector = @selector(verifyRawSignatureWithByteArray:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[4].selector = @selector(verifyRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withByteArray:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[5].selector = @selector(createSignerWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[6].selector = @selector(createSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[7].selector = @selector(createVerifyerWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[8].selector = @selector(createVerifyerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[9].selector = @selector(isValidPublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoTlsTlsContext;", "generateRawSignature", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B", "LLibOrgBouncycastleCryptoCryptoException;", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B", "verifyRawSignature", "[BLLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;[BLLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B", "createSigner", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "createVerifyer", "isValidPublicKey" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsSigner = { "TlsSigner", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x609, 10, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsSigner;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsSigner)
