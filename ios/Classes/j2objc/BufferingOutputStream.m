//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/io/BufferingOutputStream.java
//

#include "Arrays.h"
#include "BufferingOutputStream.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/OutputStream.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleUtilIoBufferingOutputStream () {
 @public
  JavaIoOutputStream *other_;
  IOSByteArray *buf_;
  jint bufOff_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleUtilIoBufferingOutputStream, other_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleUtilIoBufferingOutputStream, buf_, IOSByteArray *)

@implementation LibOrgBouncycastleUtilIoBufferingOutputStream

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)other {
  LibOrgBouncycastleUtilIoBufferingOutputStream_initWithJavaIoOutputStream_(self, other);
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)other
                                   withInt:(jint)bufferSize {
  LibOrgBouncycastleUtilIoBufferingOutputStream_initWithJavaIoOutputStream_withInt_(self, other, bufferSize);
  return self;
}

- (void)writeWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)offset
                   withInt:(jint)len {
  if (len < ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, offset, buf_, bufOff_, len);
    bufOff_ += len;
  }
  else {
    jint gap = buf_->size_ - bufOff_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, offset, buf_, bufOff_, gap);
    bufOff_ += gap;
    [self flush];
    offset += gap;
    len -= gap;
    while (len >= buf_->size_) {
      [((JavaIoOutputStream *) nil_chk(other_)) writeWithByteArray:bytes withInt:offset withInt:buf_->size_];
      offset += buf_->size_;
      len -= buf_->size_;
    }
    if (len > 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, offset, buf_, bufOff_, len);
      bufOff_ += len;
    }
  }
}

- (void)writeWithInt:(jint)b {
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = (jbyte) b;
  if (bufOff_ == buf_->size_) {
    [self flush];
  }
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(other_)) writeWithByteArray:buf_ withInt:0 withInt:bufOff_];
  bufOff_ = 0;
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(buf_, (jbyte) 0);
}

- (void)close {
  [self flush];
  [((JavaIoOutputStream *) nil_chk(other_)) close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:);
  methods[1].selector = @selector(initWithJavaIoOutputStream:withInt:);
  methods[2].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(writeWithInt:);
  methods[4].selector = @selector(flush);
  methods[5].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "other_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;", "LJavaIoOutputStream;I", "write", "[BII", "LJavaIoIOException;", "I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilIoBufferingOutputStream = { "BufferingOutputStream", "lib.org.bouncycastle.util.io", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilIoBufferingOutputStream;
}

@end

void LibOrgBouncycastleUtilIoBufferingOutputStream_initWithJavaIoOutputStream_(LibOrgBouncycastleUtilIoBufferingOutputStream *self, JavaIoOutputStream *other) {
  JavaIoOutputStream_init(self);
  self->other_ = other;
  self->buf_ = [IOSByteArray newArrayWithLength:4096];
}

LibOrgBouncycastleUtilIoBufferingOutputStream *new_LibOrgBouncycastleUtilIoBufferingOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *other) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilIoBufferingOutputStream, initWithJavaIoOutputStream_, other)
}

LibOrgBouncycastleUtilIoBufferingOutputStream *create_LibOrgBouncycastleUtilIoBufferingOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *other) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilIoBufferingOutputStream, initWithJavaIoOutputStream_, other)
}

void LibOrgBouncycastleUtilIoBufferingOutputStream_initWithJavaIoOutputStream_withInt_(LibOrgBouncycastleUtilIoBufferingOutputStream *self, JavaIoOutputStream *other, jint bufferSize) {
  JavaIoOutputStream_init(self);
  self->other_ = other;
  self->buf_ = [IOSByteArray newArrayWithLength:bufferSize];
}

LibOrgBouncycastleUtilIoBufferingOutputStream *new_LibOrgBouncycastleUtilIoBufferingOutputStream_initWithJavaIoOutputStream_withInt_(JavaIoOutputStream *other, jint bufferSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilIoBufferingOutputStream, initWithJavaIoOutputStream_withInt_, other, bufferSize)
}

LibOrgBouncycastleUtilIoBufferingOutputStream *create_LibOrgBouncycastleUtilIoBufferingOutputStream_initWithJavaIoOutputStream_withInt_(JavaIoOutputStream *other, jint bufferSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilIoBufferingOutputStream, initWithJavaIoOutputStream_withInt_, other, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilIoBufferingOutputStream)
