//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcUtil.java
//

#ifndef BcUtil_H
#define BcUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1X9X9ECParameters;
@class LibOrgBouncycastleCryptoBufferedBlockCipher;
@class LibOrgBouncycastleMathEcECCurve;
@class LibOrgBouncycastleMathEcECPoint;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor;

@interface LibOrgBouncycastleOpenpgpOperatorBcBcUtil : NSObject

#pragma mark Public

+ (id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor>)createDataDecryptorWithBoolean:(jboolean)withIntegrityPacket
                                                withLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                                          withByteArray:(IOSByteArray *)key;

+ (LibOrgBouncycastleCryptoBufferedBlockCipher *)createSymmetricKeyWrapperWithBoolean:(jboolean)forEncryption
                                              withLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                                        withByteArray:(IOSByteArray *)key
                                                                        withByteArray:(IOSByteArray *)iv;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (LibOrgBouncycastleCryptoBufferedBlockCipher *)createStreamCipherWithBoolean:(jboolean)forEncryption
                                       withLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                                   withBoolean:(jboolean)withIntegrityPacket
                                                                 withByteArray:(IOSByteArray *)key;

+ (LibOrgBouncycastleMathEcECPoint *)decodePointWithJavaMathBigInteger:(JavaMathBigInteger *)encodedPoint
                                   withLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve;

+ (LibOrgBouncycastleAsn1X9X9ECParameters *)getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)curveOID;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcUtil)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpOperatorBcBcUtil_init(LibOrgBouncycastleOpenpgpOperatorBcBcUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorBcBcUtil *new_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorBcBcUtil *create_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_init(void);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoBufferedBlockCipher *LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createStreamCipherWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withBoolean_withByteArray_(jboolean forEncryption, id<LibOrgBouncycastleCryptoBlockCipher> engine, jboolean withIntegrityPacket, IOSByteArray *key);

FOUNDATION_EXPORT id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor> LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createDataDecryptorWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withByteArray_(jboolean withIntegrityPacket, id<LibOrgBouncycastleCryptoBlockCipher> engine, IOSByteArray *key);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoBufferedBlockCipher *LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createSymmetricKeyWrapperWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withByteArray_withByteArray_(jboolean forEncryption, id<LibOrgBouncycastleCryptoBlockCipher> engine, IOSByteArray *key, IOSByteArray *iv);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECParameters *LibOrgBouncycastleOpenpgpOperatorBcBcUtil_getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOID);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleOpenpgpOperatorBcBcUtil_decodePointWithJavaMathBigInteger_withLibOrgBouncycastleMathEcECCurve_(JavaMathBigInteger *encodedPoint, LibOrgBouncycastleMathEcECCurve *curve);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorBcBcUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BcUtil_H
