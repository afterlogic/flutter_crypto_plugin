//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/ZSignedDigitL2RMultiplier.java
//

#ifndef ZSignedDigitL2RMultiplier_H
#define ZSignedDigitL2RMultiplier_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractECMultiplier.h"
#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class LibOrgBouncycastleMathEcECPoint;

@interface LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier : LibOrgBouncycastleMathEcAbstractECMultiplier

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Protected

- (LibOrgBouncycastleMathEcECPoint *)multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)k;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier_init(LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier *self);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier *new_LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier *create_LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcZSignedDigitL2RMultiplier)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ZSignedDigitL2RMultiplier_H
