//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsSignerCredentials.java
//

#ifndef DefaultTlsSignerCredentials_H
#define DefaultTlsSignerCredentials_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsSignerCredentials.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsSigner;

@interface LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials : LibOrgBouncycastleCryptoTlsAbstractTlsSignerCredentials {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsContext> context_;
  LibOrgBouncycastleCryptoTlsCertificate *certificate_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey_;
  LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm_;
  id<LibOrgBouncycastleCryptoTlsTlsSigner> signer_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                             withLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)certificate
               withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                             withLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)certificate
               withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey
               withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAndHashAlgorithm;

- (IOSByteArray *)generateCertificateSignatureWithByteArray:(IOSByteArray *)hash_;

- (LibOrgBouncycastleCryptoTlsCertificate *)getCertificate;

- (LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)getSignatureAndHashAlgorithm;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials, context_, id<LibOrgBouncycastleCryptoTlsTlsContext>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials, certificate_, LibOrgBouncycastleCryptoTlsCertificate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials, privateKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials, signatureAndHashAlgorithm_, LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials, signer_, id<LibOrgBouncycastleCryptoTlsTlsSigner>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials *new_LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials *create_LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey, LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials *new_LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey, LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials *create_LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey, LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDefaultTlsSignerCredentials)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DefaultTlsSignerCredentials_H
