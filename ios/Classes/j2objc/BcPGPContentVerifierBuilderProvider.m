//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcPGPContentVerifierBuilderProvider.java
//

#include "AsymmetricKeyParameter.h"
#include "BcImplProvider.h"
#include "BcPGPContentVerifierBuilderProvider.h"
#include "BcPGPKeyConverter.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PGPContentVerifier.h"
#include "PGPContentVerifierBuilder.h"
#include "PGPPublicKey.h"
#include "Signer.h"
#include "SignerOutputStream.h"
#include "java/io/OutputStream.h"

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider () {
 @public
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *keyConverter_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider, keyConverter_, LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *)

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder : NSObject < LibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilder > {
 @public
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *this$0_;
  jint hashAlgorithm_;
  jint keyAlgorithm_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider:(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *)outer$
                                                                                       withInt:(jint)keyAlgorithm
                                                                                       withInt:(jint)hashAlgorithm;

- (id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier>)buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)publicKey;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *self, LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder)

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1 : NSObject < LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier > {
 @public
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *this$0_;
  LibOrgBouncycastleOpenpgpPGPPublicKey *val$publicKey_;
  id<LibOrgBouncycastleCryptoSigner> val$signer_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder:(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *)outer$
                                                                                 withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)capture$0
                                                                                        withLibOrgBouncycastleCryptoSigner:(id<LibOrgBouncycastleCryptoSigner>)capture$1;

- (jint)getHashAlgorithm;

- (jint)getKeyAlgorithm;

- (jlong)getKeyID;

- (jboolean)verifyWithByteArray:(IOSByteArray *)expected;

- (JavaIoOutputStream *)getOutputStream;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, id<LibOrgBouncycastleCryptoSigner> capture$1);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, id<LibOrgBouncycastleCryptoSigner> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, id<LibOrgBouncycastleCryptoSigner> capture$1);

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilder>)getWithInt:(jint)keyAlgorithm
                                                                     withInt:(jint)hashAlgorithm {
  return new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_(self, keyAlgorithm, hashAlgorithm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilder;", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyConverter_", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "II", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider = { "BcPGPContentVerifierBuilderProvider", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, 3, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_init(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *self) {
  NSObject_init(self);
  self->keyConverter_ = new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter_init();
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider, init)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider)

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider:(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *)outer$
                                                                                       withInt:(jint)keyAlgorithm
                                                                                       withInt:(jint)hashAlgorithm {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_(self, outer$, keyAlgorithm, hashAlgorithm);
  return self;
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier>)buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)publicKey {
  id<LibOrgBouncycastleCryptoSigner> signer = LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createSignerWithInt_withInt_(keyAlgorithm_, hashAlgorithm_);
  [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *) nil_chk(this$0_->keyConverter_)) getPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:publicKey]];
  return new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_(self, publicKey, signer);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPContentVerifier;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider:withInt:withInt:);
  methods[1].selector = @selector(buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "hashAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "build", "LLibOrgBouncycastleOpenpgpPGPPublicKey;", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder = { "BcPGPContentVerifierBuilder", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x2, 2, 3, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *self, LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->keyAlgorithm_ = keyAlgorithm;
  self->hashAlgorithm_ = hashAlgorithm;
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder, initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_, outer$, keyAlgorithm, hashAlgorithm)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder, initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_withInt_withInt_, outer$, keyAlgorithm, hashAlgorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder)

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder:(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *)outer$
                                                                                 withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)capture$0
                                                                                        withLibOrgBouncycastleCryptoSigner:(id<LibOrgBouncycastleCryptoSigner>)capture$1 {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_(self, outer$, capture$0, capture$1);
  return self;
}

- (jint)getHashAlgorithm {
  return this$0_->hashAlgorithm_;
}

- (jint)getKeyAlgorithm {
  return this$0_->keyAlgorithm_;
}

- (jlong)getKeyID {
  return [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(val$publicKey_)) getKeyID];
}

- (jboolean)verifyWithByteArray:(IOSByteArray *)expected {
  return [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(val$signer_)) verifySignatureWithByteArray:expected];
}

- (JavaIoOutputStream *)getOutputStream {
  return new_LibOrgBouncycastleOpenpgpOperatorBcSignerOutputStream_initWithLibOrgBouncycastleCryptoSigner_(val$signer_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder:withLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleCryptoSigner:);
  methods[1].selector = @selector(getHashAlgorithm);
  methods[2].selector = @selector(getKeyAlgorithm);
  methods[3].selector = @selector(getKeyID);
  methods[4].selector = @selector(verifyWithByteArray:);
  methods[5].selector = @selector(getOutputStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$publicKey_", "LLibOrgBouncycastleOpenpgpPGPPublicKey;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$signer_", "LLibOrgBouncycastleCryptoSigner;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "verify", "[B", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder;", "buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1 = { "", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x8010, 6, 3, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, id<LibOrgBouncycastleCryptoSigner> capture$1) {
  self->this$0_ = outer$;
  self->val$publicKey_ = capture$0;
  self->val$signer_ = capture$1;
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, id<LibOrgBouncycastleCryptoSigner> capture$1) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_, outer$, capture$0, capture$1)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, id<LibOrgBouncycastleCryptoSigner> capture$1) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_BcPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoSigner_, outer$, capture$0, capture$1)
}
