//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/tools/F2mSqrtOptimizer.java
//

#include "CustomNamedCurves.h"
#include "ECAlgorithms.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECNamedCurveTable.h"
#include "F2mSqrtOptimizer.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "X9ECParameters.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"

@interface LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer ()

+ (void)implPrintRootZWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9;

+ (JavaUtilArrayList *)enumToListWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)en;

@end

__attribute__((unused)) static void LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_implPrintRootZWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *x9);

__attribute__((unused)) static JavaUtilArrayList *LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_enumToListWithJavaUtilEnumeration_(id<JavaUtilEnumeration> en);

@implementation LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_mainWithNSStringArray_(args);
}

+ (void)printRootZWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9 {
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_printRootZWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

+ (void)implPrintRootZWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9 {
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_implPrintRootZWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

+ (JavaUtilArrayList *)enumToListWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)en {
  return LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_enumToListWithJavaUtilEnumeration_(en);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0xa, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(printRootZWithLibOrgBouncycastleAsn1X9X9ECParameters:);
  methods[3].selector = @selector(implPrintRootZWithLibOrgBouncycastleAsn1X9X9ECParameters:);
  methods[4].selector = @selector(enumToListWithJavaUtilEnumeration:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;", "printRootZ", "LLibOrgBouncycastleAsn1X9X9ECParameters;", "implPrintRootZ", "enumToList", "LJavaUtilEnumeration;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer = { "F2mSqrtOptimizer", "lib.org.bouncycastle.math.ec.tools", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer;
}

@end

void LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_init(LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer *self) {
  NSObject_init(self);
}

LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer *new_LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer, init)
}

LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer *create_LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer, init)
}

void LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_initialize();
  id<JavaUtilSortedSet> names = new_JavaUtilTreeSet_initWithJavaUtilCollection_(LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_enumToListWithJavaUtilEnumeration_(LibOrgBouncycastleAsn1X9ECNamedCurveTable_getNames()));
  [names addAllWithJavaUtilCollection:LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_enumToListWithJavaUtilEnumeration_(LibOrgBouncycastleCryptoEcCustomNamedCurves_getNames())];
  id<JavaUtilIterator> it = [names iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *name = (NSString *) cast_chk([it next], [NSString class]);
    LibOrgBouncycastleAsn1X9X9ECParameters *x9 = LibOrgBouncycastleCryptoEcCustomNamedCurves_getByNameWithNSString_(name);
    if (x9 == nil) {
      x9 = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(name);
    }
    if (x9 != nil && LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_([x9 getCurve])) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("$C", name, ':')];
      LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_implPrintRootZWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
    }
  }
}

void LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_printRootZWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *x9) {
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_initialize();
  if (!LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Sqrt optimization only defined over characteristic-2 fields");
  }
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_implPrintRootZWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

void LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_implPrintRootZWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *x9) {
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_initialize();
  LibOrgBouncycastleMathEcECFieldElement *z = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve])) fromBigIntegerWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
  LibOrgBouncycastleMathEcECFieldElement *rootZ = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(z)) sqrt];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[((NSString *) nil_chk([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(rootZ)) toBigInteger])) toStringWithInt:16])) uppercaseString]];
  if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([rootZ square])) isEqual:z]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Optimized-sqrt sanity check failed");
  }
}

JavaUtilArrayList *LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_enumToListWithJavaUtilEnumeration_(id<JavaUtilEnumeration> en) {
  LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer_initialize();
  JavaUtilArrayList *rv = new_JavaUtilArrayList_init();
  while ([((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]) {
    [rv addWithId:[en nextElement]];
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcToolsF2mSqrtOptimizer)
