//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/CramerShoupKeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "BigIntegers.h"
#include "CramerShoupKeyGenerationParameters.h"
#include "CramerShoupKeyPairGenerator.h"
#include "CramerShoupParameters.h"
#include "CramerShoupPrivateKeyParameters.h"
#include "CramerShoupPublicKeyParameters.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator () {
 @public
  LibOrgBouncycastleCryptoParamsCramerShoupKeyGenerationParameters *param_;
}

- (JavaMathBigInteger *)generateRandomElementWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *)generatePrivateKeyWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                          withLibOrgBouncycastleCryptoParamsCramerShoupParameters:(LibOrgBouncycastleCryptoParamsCramerShoupParameters *)csParams;

- (LibOrgBouncycastleCryptoParamsCramerShoupPublicKeyParameters *)calculatePublicKeyWithLibOrgBouncycastleCryptoParamsCramerShoupParameters:(LibOrgBouncycastleCryptoParamsCramerShoupParameters *)csParams
                                                                          withLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *)sk;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator, param_, LibOrgBouncycastleCryptoParamsCramerShoupKeyGenerationParameters *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator, ONE, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *self, JavaMathBigInteger *p, JavaSecuritySecureRandom *random);

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generatePrivateKeyWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsCramerShoupParameters_(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *self, JavaSecuritySecureRandom *random, LibOrgBouncycastleCryptoParamsCramerShoupParameters *csParams);

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsCramerShoupPublicKeyParameters *LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_calculatePublicKeyWithLibOrgBouncycastleCryptoParamsCramerShoupParameters_withLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters_(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *self, LibOrgBouncycastleCryptoParamsCramerShoupParameters *csParams, LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *sk);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator)

@implementation LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  self->param_ = (LibOrgBouncycastleCryptoParamsCramerShoupKeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsCramerShoupKeyGenerationParameters class]);
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  LibOrgBouncycastleCryptoParamsCramerShoupParameters *csParams = [((LibOrgBouncycastleCryptoParamsCramerShoupKeyGenerationParameters *) nil_chk(param_)) getParameters];
  LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *sk = LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generatePrivateKeyWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsCramerShoupParameters_(self, [((LibOrgBouncycastleCryptoParamsCramerShoupKeyGenerationParameters *) nil_chk(param_)) getRandom], csParams);
  LibOrgBouncycastleCryptoParamsCramerShoupPublicKeyParameters *pk = LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_calculatePublicKeyWithLibOrgBouncycastleCryptoParamsCramerShoupParameters_withLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters_(self, csParams, sk);
  [((LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *) nil_chk(sk)) setPkWithLibOrgBouncycastleCryptoParamsCramerShoupPublicKeyParameters:pk];
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pk, sk);
}

- (JavaMathBigInteger *)generateRandomElementWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, p, random);
}

- (LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *)generatePrivateKeyWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                          withLibOrgBouncycastleCryptoParamsCramerShoupParameters:(LibOrgBouncycastleCryptoParamsCramerShoupParameters *)csParams {
  return LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generatePrivateKeyWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsCramerShoupParameters_(self, random, csParams);
}

- (LibOrgBouncycastleCryptoParamsCramerShoupPublicKeyParameters *)calculatePublicKeyWithLibOrgBouncycastleCryptoParamsCramerShoupParameters:(LibOrgBouncycastleCryptoParamsCramerShoupParameters *)csParams
                                                                          withLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *)sk {
  return LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_calculatePublicKeyWithLibOrgBouncycastleCryptoParamsCramerShoupParameters_withLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters_(self, csParams, sk);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsCramerShoupPublicKeyParameters;", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(generateRandomElementWithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(generatePrivateKeyWithJavaSecuritySecureRandom:withLibOrgBouncycastleCryptoParamsCramerShoupParameters:);
  methods[5].selector = @selector(calculatePublicKeyWithLibOrgBouncycastleCryptoParamsCramerShoupParameters:withLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "param_", "LLibOrgBouncycastleCryptoParamsCramerShoupKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;", "generateRandomElement", "LJavaMathBigInteger;LJavaSecuritySecureRandom;", "generatePrivateKey", "LJavaSecuritySecureRandom;LLibOrgBouncycastleCryptoParamsCramerShoupParameters;", "calculatePublicKey", "LLibOrgBouncycastleCryptoParamsCramerShoupParameters;LLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters;", &LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_ONE };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator = { "CramerShoupKeyPairGenerator", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator class]) {
    LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator)
  }
}

@end

void LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_init(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *new_LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator, init)
}

LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *create_LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator, init)
}

JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *self, JavaMathBigInteger *p, JavaSecuritySecureRandom *random) {
  return LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_ONE, [((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_ONE], random);
}

LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generatePrivateKeyWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsCramerShoupParameters_(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *self, JavaSecuritySecureRandom *random, LibOrgBouncycastleCryptoParamsCramerShoupParameters *csParams) {
  JavaMathBigInteger *p = [((LibOrgBouncycastleCryptoParamsCramerShoupParameters *) nil_chk(csParams)) getP];
  LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *key = new_LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters_initWithLibOrgBouncycastleCryptoParamsCramerShoupParameters_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(csParams, LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, p, random), LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, p, random), LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, p, random), LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, p, random), LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, p, random));
  return key;
}

LibOrgBouncycastleCryptoParamsCramerShoupPublicKeyParameters *LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator_calculatePublicKeyWithLibOrgBouncycastleCryptoParamsCramerShoupParameters_withLibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters_(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator *self, LibOrgBouncycastleCryptoParamsCramerShoupParameters *csParams, LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *sk) {
  JavaMathBigInteger *g1 = [((LibOrgBouncycastleCryptoParamsCramerShoupParameters *) nil_chk(csParams)) getG1];
  JavaMathBigInteger *g2 = [csParams getG2];
  JavaMathBigInteger *p = [csParams getP];
  JavaMathBigInteger *c = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(g1)) modPowWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsCramerShoupPrivateKeyParameters *) nil_chk(sk)) getX1] withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(g2)) modPowWithJavaMathBigInteger:[sk getX2] withJavaMathBigInteger:p]];
  JavaMathBigInteger *d = [((JavaMathBigInteger *) nil_chk([g1 modPowWithJavaMathBigInteger:[sk getY1] withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:[g2 modPowWithJavaMathBigInteger:[sk getY2] withJavaMathBigInteger:p]];
  JavaMathBigInteger *h = [g1 modPowWithJavaMathBigInteger:[sk getZ] withJavaMathBigInteger:p];
  return new_LibOrgBouncycastleCryptoParamsCramerShoupPublicKeyParameters_initWithLibOrgBouncycastleCryptoParamsCramerShoupParameters_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(csParams, c, d, h);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsCramerShoupKeyPairGenerator)
