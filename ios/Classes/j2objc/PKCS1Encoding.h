//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/encodings/PKCS1Encoding.java
//

#ifndef PKCS1Encoding_H
#define PKCS1Encoding_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricBlockCipher.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoEncodingsPKCS1Encoding : NSObject < LibOrgBouncycastleCryptoAsymmetricBlockCipher >
@property (readonly, copy, class) NSString *STRICT_LENGTH_ENABLED_PROPERTY NS_SWIFT_NAME(STRICT_LENGTH_ENABLED_PROPERTY);
@property (readonly, copy, class) NSString *NOT_STRICT_LENGTH_ENABLED_PROPERTY NS_SWIFT_NAME(NOT_STRICT_LENGTH_ENABLED_PROPERTY);

+ (NSString *)STRICT_LENGTH_ENABLED_PROPERTY;

+ (NSString *)NOT_STRICT_LENGTH_ENABLED_PROPERTY;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                                                  withByteArray:(IOSByteArray *)fallback;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher
                                                                        withInt:(jint)pLen;

- (jint)getInputBlockSize;

- (jint)getOutputBlockSize;

- (id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)getUnderlyingCipher;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEncodingsPKCS1Encoding)

inline NSString *LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_get_STRICT_LENGTH_ENABLED_PROPERTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_STRICT_LENGTH_ENABLED_PROPERTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEncodingsPKCS1Encoding, STRICT_LENGTH_ENABLED_PROPERTY, NSString *)

inline NSString *LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_get_NOT_STRICT_LENGTH_ENABLED_PROPERTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_NOT_STRICT_LENGTH_ENABLED_PROPERTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEncodingsPKCS1Encoding, NOT_STRICT_LENGTH_ENABLED_PROPERTY, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *create_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withInt_(LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, jint pLen);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withInt_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, jint pLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *create_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withInt_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, jint pLen);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withByteArray_(LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, IOSByteArray *fallback);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withByteArray_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, IOSByteArray *fallback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *create_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withByteArray_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher, IOSByteArray *fallback);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEncodingsPKCS1Encoding)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PKCS1Encoding_H
