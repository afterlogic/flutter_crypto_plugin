//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/isismtt/ocsp/RequestedCertificate.java
//

#ifndef RequestedCertificate_H
#define RequestedCertificate_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1X509X509Certificate;

@interface LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >
@property (readonly, class) jint certificate NS_SWIFT_NAME(certificate);
@property (readonly, class) jint publicKeyCertificate NS_SWIFT_NAME(publicKeyCertificate);
@property (readonly, class) jint attributeCertificate NS_SWIFT_NAME(attributeCertificate);

+ (jint)certificate;

+ (jint)publicKeyCertificate;

+ (jint)attributeCertificate;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)type
                        withByteArray:(IOSByteArray *)certificateOctets;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509X509Certificate:(LibOrgBouncycastleAsn1X509X509Certificate *)certificate;

- (IOSByteArray *)getCertificateBytes;

+ (LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                                     withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *)getInstanceWithId:(id)obj;

- (jint)getType;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate)

inline jint LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_get_certificate(void);
#define LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_certificate -1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate, certificate, jint)

inline jint LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_get_publicKeyCertificate(void);
#define LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_publicKeyCertificate 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate, publicKeyCertificate, jint)

inline jint LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_get_attributeCertificate(void);
#define LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_attributeCertificate 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate, attributeCertificate, jint)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *self, LibOrgBouncycastleAsn1X509X509Certificate *certificate);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *new_LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509X509Certificate *certificate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *create_LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509X509Certificate *certificate);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_initWithInt_withByteArray_(LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *self, jint type, IOSByteArray *certificateOctets);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *new_LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_initWithInt_withByteArray_(jint type, IOSByteArray *certificateOctets) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate *create_LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate_initWithInt_withByteArray_(jint type, IOSByteArray *certificateOctets);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1IsismttOcspRequestedCertificate)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // RequestedCertificate_H
