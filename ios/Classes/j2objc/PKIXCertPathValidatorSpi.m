//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/PKIXCertPathValidatorSpi.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "AnnotatedException.h"
#include "BCJcaJceHelper.h"
#include "ExtCertPathValidatorException.h"
#include "ExtendedPKIXParameters.h"
#include "Extension.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "JcePKIXNameConstraintValidator.h"
#include "JceProviderCertPathValidatorUtilities.h"
#include "PKIXCertPathValidatorSpi.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "PKIXPolicyNode.h"
#include "PrincipalUtils.h"
#include "RFC3280CertPathUtilities.h"
#include "TBSCertificate.h"
#include "X500Name.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathParameters.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertPathValidatorResult.h"
#include "java/security/cert/CertPathValidatorSpi.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/PKIXCertPathChecker.h"
#include "java/security/cert/PKIXCertPathValidatorResult.h"
#include "java/security/cert/PKIXParameters.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)

@implementation LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaSecurityCertCertPathValidatorResult>)engineValidateWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                   withJavaSecurityCertCertPathParameters:(id<JavaSecurityCertCertPathParameters>)params {
  LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX;
  if ([params isKindOfClass:[JavaSecurityCertPKIXParameters class]]) {
    LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *paramsPKIXBldr = new_LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder_initWithJavaSecurityCertPKIXParameters_((JavaSecurityCertPKIXParameters *) params);
    if ([params isKindOfClass:[LibOrgBouncycastleX509ExtendedPKIXParameters class]]) {
      LibOrgBouncycastleX509ExtendedPKIXParameters *extPKIX = (LibOrgBouncycastleX509ExtendedPKIXParameters *) params;
      (void) [paramsPKIXBldr setUseDeltasEnabledWithBoolean:[((LibOrgBouncycastleX509ExtendedPKIXParameters *) nil_chk(extPKIX)) isUseDeltasEnabled]];
      (void) [paramsPKIXBldr setValidityModelWithInt:[extPKIX getValidityModel]];
    }
    paramsPKIX = [paramsPKIXBldr build];
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters class]]) {
    paramsPKIX = [((LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(((LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *) params))) getBaseParameters];
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleJcajcePKIXExtendedParameters class]]) {
    paramsPKIX = (LibOrgBouncycastleJcajcePKIXExtendedParameters *) params;
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$", @"Parameters must be a ", [JavaSecurityCertPKIXParameters_class_() getName], @" instance."));
  }
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getTrustAnchors] == nil) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"trustAnchors is null, this is not allowed for certification path validation.");
  }
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  jint n = [((id<JavaUtilList>) nil_chk(certs)) size];
  if ([certs isEmpty]) {
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Certification path is empty.", nil, certPath, -1);
  }
  id<JavaUtilSet> userInitialPolicySet = [paramsPKIX getInitialPolicies];
  JavaSecurityCertTrustAnchor *trust;
  @try {
    trust = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_((JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:[certs size] - 1], [JavaSecurityCertX509Certificate class]), [paramsPKIX getTrustAnchors], [paramsPKIX getSigProvider]);
    if (trust == nil) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Trust anchor for certification path not found.", nil, certPath, -1);
    }
    LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_checkCertificateWithJavaSecurityCertX509Certificate_([trust getTrustedCert]);
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], [e getUnderlyingException], certPath, [certs size] - 1);
  }
  paramsPKIX = [((LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *) nil_chk([new_LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder_initWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(paramsPKIX) setTrustAnchorWithJavaSecurityCertTrustAnchor:trust])) build];
  id<JavaUtilIterator> certIter;
  jint index = 0;
  jint i;
  IOSObjectArray *policyNodes = [IOSObjectArray newArrayWithLength:n + 1 type:JavaUtilArrayList_class_()];
  for (jint j = 0; j < policyNodes->size_; j++) {
    (void) IOSObjectArray_SetAndConsume(policyNodes, j, new_JavaUtilArrayList_init());
  }
  id<JavaUtilSet> policySet = new_JavaUtilHashSet_init();
  [policySet addWithId:LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY];
  LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), 0, policySet, nil, new_JavaUtilHashSet_init(), LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY, false);
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, 0))) addWithId:validPolicyTree];
  LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *nameConstraintValidator = new_LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_init();
  jint explicitPolicy;
  id<JavaUtilSet> acceptablePolicies = new_JavaUtilHashSet_init();
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isExplicitPolicyRequired]) {
    explicitPolicy = 0;
  }
  else {
    explicitPolicy = n + 1;
  }
  jint inhibitAnyPolicy;
  if ([paramsPKIX isAnyPolicyInhibited]) {
    inhibitAnyPolicy = 0;
  }
  else {
    inhibitAnyPolicy = n + 1;
  }
  jint policyMapping;
  if ([paramsPKIX isPolicyMappingInhibited]) {
    policyMapping = 0;
  }
  else {
    policyMapping = n + 1;
  }
  id<JavaSecurityPublicKey> workingPublicKey;
  LibOrgBouncycastleAsn1X500X500Name *workingIssuerName;
  JavaSecurityCertX509Certificate *sign = [((JavaSecurityCertTrustAnchor *) nil_chk(trust)) getTrustedCert];
  @try {
    if (sign != nil) {
      workingIssuerName = LibOrgBouncycastleJceProviderPrincipalUtils_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(sign);
      workingPublicKey = [sign getPublicKey];
    }
    else {
      workingIssuerName = LibOrgBouncycastleJceProviderPrincipalUtils_getCAWithJavaSecurityCertTrustAnchor_(trust);
      workingPublicKey = [trust getCAPublicKey];
    }
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subject of trust anchor could not be (re)encoded.", ex, certPath, -1);
  }
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *workingAlgId = nil;
  @try {
    workingAlgId = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(workingPublicKey);
  }
  @catch (JavaSecurityCertCertPathValidatorException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Algorithm identifier of public key of trust anchor could not be read.", e, certPath, -1);
  }
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *workingPublicKeyAlgorithm = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(workingAlgId)) getAlgorithm];
  id<LibOrgBouncycastleAsn1ASN1Encodable> workingPublicKeyParameters = [workingAlgId getParameters];
  jint maxPathLength = n;
  if ([paramsPKIX getTargetConstraints] != nil && ![((LibOrgBouncycastleJcajcePKIXCertStoreSelector *) nil_chk([paramsPKIX getTargetConstraints])) matchWithId:(JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:0], [JavaSecurityCertX509Certificate class])]) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Target certificate in certification path does not match targetConstraints.", nil, certPath, 0);
  }
  id<JavaUtilList> pathCheckers = [paramsPKIX getCertPathCheckers];
  certIter = [((id<JavaUtilList>) nil_chk(pathCheckers)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(certIter)) hasNext]) {
    [((JavaSecurityCertPKIXCertPathChecker *) nil_chk(((JavaSecurityCertPKIXCertPathChecker *) cast_chk([certIter next], [JavaSecurityCertPKIXCertPathChecker class])))) init__WithBoolean:false];
  }
  JavaSecurityCertX509Certificate *cert = nil;
  for (index = [certs size] - 1; index >= 0; index--) {
    i = n - index;
    cert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:index], [JavaSecurityCertX509Certificate class]);
    jboolean verificationAlreadyPerformed = index == [certs size] - 1;
    @try {
      LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_checkCertificateWithJavaSecurityCertX509Certificate_(cert);
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], [e getUnderlyingException], certPath, index);
    }
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertAWithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withInt_withJavaSecurityPublicKey_withBoolean_withLibOrgBouncycastleAsn1X500X500Name_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(certPath, paramsPKIX, index, workingPublicKey, verificationAlreadyPerformed, workingIssuerName, sign, helper_);
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertBCWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_(certPath, index, nameConstraintValidator);
    validPolicyTree = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertDWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withInt_(certPath, index, acceptablePolicies, validPolicyTree, policyNodes, inhibitAnyPolicy);
    validPolicyTree = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertEWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(certPath, index, validPolicyTree);
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertFWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withInt_(certPath, index, validPolicyTree, explicitPolicy);
    if (i != n) {
      if (cert != nil && [cert getVersion] == 1) {
        if ((i == 1) && [cert isEqual:[trust getTrustedCert]]) {
          continue;
        }
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Version 1 certificates can't be used as CA ones.", nil, certPath, index);
      }
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertAWithJavaSecurityCertCertPath_withInt_(certPath, index);
      validPolicyTree = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareCertBWithJavaSecurityCertCertPath_withInt_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withInt_(certPath, index, policyNodes, validPolicyTree, policyMapping);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertGWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_(certPath, index, nameConstraintValidator);
      explicitPolicy = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH1WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
      policyMapping = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH2WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, policyMapping);
      inhibitAnyPolicy = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH3WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, inhibitAnyPolicy);
      explicitPolicy = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI1WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
      policyMapping = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI2WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, policyMapping);
      inhibitAnyPolicy = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertJWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, inhibitAnyPolicy);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertKWithJavaSecurityCertCertPath_withInt_(certPath, index);
      maxPathLength = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertLWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, maxPathLength);
      maxPathLength = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertMWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, maxPathLength);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertNWithJavaSecurityCertCertPath_withInt_(certPath, index);
      id<JavaUtilSet> criticalExtensions = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs];
      if (criticalExtensions != nil) {
        criticalExtensions = new_JavaUtilHashSet_initWithJavaUtilCollection_(criticalExtensions);
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, KEY_USAGE)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CERTIFICATE_POLICIES)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, POLICY_MAPPINGS)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, INHIBIT_ANY_POLICY)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, POLICY_CONSTRAINTS)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, BASIC_CONSTRAINTS)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, SUBJECT_ALTERNATIVE_NAME)];
        [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, NAME_CONSTRAINTS)];
      }
      else {
        criticalExtensions = new_JavaUtilHashSet_init();
      }
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertOWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withJavaUtilList_(certPath, index, criticalExtensions, pathCheckers);
      sign = cert;
      workingIssuerName = LibOrgBouncycastleJceProviderPrincipalUtils_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(sign);
      @try {
        workingPublicKey = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withLibOrgBouncycastleJcajceUtilJcaJceHelper_([certPath getCertificates], index, helper_);
      }
      @catch (JavaSecurityCertCertPathValidatorException *e) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Next working key could not be retrieved.", e, certPath, index);
      }
      workingAlgId = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(workingPublicKey);
      workingPublicKeyAlgorithm = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(workingAlgId)) getAlgorithm];
      workingPublicKeyParameters = [workingAlgId getParameters];
    }
  }
  explicitPolicy = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertAWithInt_withJavaSecurityCertX509Certificate_(explicitPolicy, cert);
  explicitPolicy = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertBWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index + 1, explicitPolicy);
  id<JavaUtilSet> criticalExtensions = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs];
  if (criticalExtensions != nil) {
    criticalExtensions = new_JavaUtilHashSet_initWithJavaUtilCollection_(criticalExtensions);
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, KEY_USAGE)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CERTIFICATE_POLICIES)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, POLICY_MAPPINGS)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, INHIBIT_ANY_POLICY)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, POLICY_CONSTRAINTS)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, BASIC_CONSTRAINTS)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, SUBJECT_ALTERNATIVE_NAME)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, NAME_CONSTRAINTS)];
    [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CRL_DISTRIBUTION_POINTS)];
    [criticalExtensions removeWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, extendedKeyUsage))) getId]];
  }
  else {
    criticalExtensions = new_JavaUtilHashSet_init();
  }
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertFWithJavaSecurityCertCertPath_withInt_withJavaUtilList_withJavaUtilSet_(certPath, index + 1, pathCheckers, criticalExtensions);
  LibOrgBouncycastleJceProviderPKIXPolicyNode *intersection = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertGWithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilSet_withInt_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilSet_(certPath, paramsPKIX, userInitialPolicySet, index + 1, policyNodes, validPolicyTree, acceptablePolicies);
  if ((explicitPolicy > 0) || (intersection != nil)) {
    return new_JavaSecurityCertPKIXCertPathValidatorResult_initWithJavaSecurityCertTrustAnchor_withJavaSecurityCertPolicyNode_withJavaSecurityPublicKey_(trust, intersection, [cert getPublicKey]);
  }
  @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Path processing failed on policy.", nil, certPath, index);
}

+ (void)checkCertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_checkCertificateWithJavaSecurityCertX509Certificate_(cert);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathValidatorResult;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineValidateWithJavaSecurityCertCertPath:withJavaSecurityCertCertPathParameters:);
  methods[2].selector = @selector(checkCertificateWithJavaSecurityCertX509Certificate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineValidate", "LJavaSecurityCertCertPath;LJavaSecurityCertCertPathParameters;", "LJavaSecurityCertCertPathValidatorException;LJavaSecurityInvalidAlgorithmParameterException;", "checkCertificate", "LJavaSecurityCertX509Certificate;", "LLibOrgBouncycastleJceProviderAnnotatedException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi = { "PKIXCertPathValidatorSpi", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi;
}

@end

void LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_init(LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi *self) {
  JavaSecurityCertCertPathValidatorSpi_init(self);
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
}

LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi *new_LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi, init)
}

LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi *create_LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi, init)
}

void LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_checkCertificateWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_initialize();
  @try {
    (void) LibOrgBouncycastleAsn1X509TBSCertificate_getInstanceWithId_([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getTBSCertificate]);
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"unable to process TBSCertificate", e);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_([e getMessage]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi)
