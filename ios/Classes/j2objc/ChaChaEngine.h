//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/ChaChaEngine.java
//

#ifndef ChaChaEngine_H
#define ChaChaEngine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Salsa20Engine.h"

@class IOSByteArray;
@class IOSIntArray;

@interface LibOrgBouncycastleCryptoEnginesChaChaEngine : LibOrgBouncycastleCryptoEnginesSalsa20Engine

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)rounds;

+ (void)chachaCoreWithInt:(jint)rounds
             withIntArray:(IOSIntArray *)input
             withIntArray:(IOSIntArray *)x;

- (NSString *)getAlgorithmName;

#pragma mark Protected

- (void)advanceCounter;

- (void)advanceCounterWithLong:(jlong)diff;

- (void)generateKeyStreamWithByteArray:(IOSByteArray *)output;

- (jlong)getCounter;

- (void)resetCounter;

- (void)retreatCounter;

- (void)retreatCounterWithLong:(jlong)diff;

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEnginesChaChaEngine)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesChaChaEngine_init(LibOrgBouncycastleCryptoEnginesChaChaEngine *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesChaChaEngine *new_LibOrgBouncycastleCryptoEnginesChaChaEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesChaChaEngine *create_LibOrgBouncycastleCryptoEnginesChaChaEngine_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(LibOrgBouncycastleCryptoEnginesChaChaEngine *self, jint rounds);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesChaChaEngine *new_LibOrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(jint rounds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesChaChaEngine *create_LibOrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(jint rounds);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesChaChaEngine_chachaCoreWithInt_withIntArray_withIntArray_(jint rounds, IOSIntArray *input, IOSIntArray *x);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesChaChaEngine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ChaChaEngine_H
