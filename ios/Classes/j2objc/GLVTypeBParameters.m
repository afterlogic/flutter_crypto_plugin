//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/endo/GLVTypeBParameters.java
//

#include "GLVTypeBParameters.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleMathEcEndoGLVTypeBParameters ()

+ (void)checkVectorWithJavaMathBigIntegerArray:(IOSObjectArray *)v
                                  withNSString:(NSString *)name;

@end

__attribute__((unused)) static void LibOrgBouncycastleMathEcEndoGLVTypeBParameters_checkVectorWithJavaMathBigIntegerArray_withNSString_(IOSObjectArray *v, NSString *name);

@implementation LibOrgBouncycastleMathEcEndoGLVTypeBParameters

+ (void)checkVectorWithJavaMathBigIntegerArray:(IOSObjectArray *)v
                                  withNSString:(NSString *)name {
  LibOrgBouncycastleMathEcEndoGLVTypeBParameters_checkVectorWithJavaMathBigIntegerArray_withNSString_(v, name);
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)beta
                    withJavaMathBigInteger:(JavaMathBigInteger *)lambda
               withJavaMathBigIntegerArray:(IOSObjectArray *)v1
               withJavaMathBigIntegerArray:(IOSObjectArray *)v2
                    withJavaMathBigInteger:(JavaMathBigInteger *)g1
                    withJavaMathBigInteger:(JavaMathBigInteger *)g2
                                   withInt:(jint)bits {
  LibOrgBouncycastleMathEcEndoGLVTypeBParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(self, beta, lambda, v1, v2, g1, g2, bits);
  return self;
}

- (JavaMathBigInteger *)getBeta {
  return beta_;
}

- (JavaMathBigInteger *)getLambda {
  return lambda_;
}

- (IOSObjectArray *)getV1 {
  return [IOSObjectArray newArrayWithObjects:(id[]){ v1A_, v1B_ } count:2 type:JavaMathBigInteger_class_()];
}

- (JavaMathBigInteger *)getV1A {
  return v1A_;
}

- (JavaMathBigInteger *)getV1B {
  return v1B_;
}

- (IOSObjectArray *)getV2 {
  return [IOSObjectArray newArrayWithObjects:(id[]){ v2A_, v2B_ } count:2 type:JavaMathBigInteger_class_()];
}

- (JavaMathBigInteger *)getV2A {
  return v2A_;
}

- (JavaMathBigInteger *)getV2B {
  return v2B_;
}

- (JavaMathBigInteger *)getG1 {
  return g1_;
}

- (JavaMathBigInteger *)getG2 {
  return g2_;
}

- (jint)getBits {
  return bits_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(checkVectorWithJavaMathBigIntegerArray:withNSString:);
  methods[1].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigIntegerArray:withJavaMathBigIntegerArray:withJavaMathBigInteger:withJavaMathBigInteger:withInt:);
  methods[2].selector = @selector(getBeta);
  methods[3].selector = @selector(getLambda);
  methods[4].selector = @selector(getV1);
  methods[5].selector = @selector(getV1A);
  methods[6].selector = @selector(getV1B);
  methods[7].selector = @selector(getV2);
  methods[8].selector = @selector(getV2A);
  methods[9].selector = @selector(getV2B);
  methods[10].selector = @selector(getG1);
  methods[11].selector = @selector(getG2);
  methods[12].selector = @selector(getBits);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "beta_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "lambda_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "v1A_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "v1B_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "v2A_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "v2B_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "g1_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "g2_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "bits_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "checkVector", "[LJavaMathBigInteger;LNSString;", "LJavaMathBigInteger;LJavaMathBigInteger;[LJavaMathBigInteger;[LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcEndoGLVTypeBParameters = { "GLVTypeBParameters", "lib.org.bouncycastle.math.ec.endo", ptrTable, methods, fields, 7, 0x1, 13, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcEndoGLVTypeBParameters;
}

@end

void LibOrgBouncycastleMathEcEndoGLVTypeBParameters_checkVectorWithJavaMathBigIntegerArray_withNSString_(IOSObjectArray *v, NSString *name) {
  LibOrgBouncycastleMathEcEndoGLVTypeBParameters_initialize();
  if (v == nil || v->size_ != 2 || IOSObjectArray_Get(v, 0) == nil || IOSObjectArray_Get(v, 1) == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("C$$", '\'', name, @"' must consist of exactly 2 (non-null) values"));
  }
}

void LibOrgBouncycastleMathEcEndoGLVTypeBParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(LibOrgBouncycastleMathEcEndoGLVTypeBParameters *self, JavaMathBigInteger *beta, JavaMathBigInteger *lambda, IOSObjectArray *v1, IOSObjectArray *v2, JavaMathBigInteger *g1, JavaMathBigInteger *g2, jint bits) {
  NSObject_init(self);
  LibOrgBouncycastleMathEcEndoGLVTypeBParameters_checkVectorWithJavaMathBigIntegerArray_withNSString_(v1, @"v1");
  LibOrgBouncycastleMathEcEndoGLVTypeBParameters_checkVectorWithJavaMathBigIntegerArray_withNSString_(v2, @"v2");
  self->beta_ = beta;
  self->lambda_ = lambda;
  self->v1A_ = IOSObjectArray_Get(nil_chk(v1), 0);
  self->v1B_ = IOSObjectArray_Get(v1, 1);
  self->v2A_ = IOSObjectArray_Get(nil_chk(v2), 0);
  self->v2B_ = IOSObjectArray_Get(v2, 1);
  self->g1_ = g1;
  self->g2_ = g2;
  self->bits_ = bits;
}

LibOrgBouncycastleMathEcEndoGLVTypeBParameters *new_LibOrgBouncycastleMathEcEndoGLVTypeBParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *beta, JavaMathBigInteger *lambda, IOSObjectArray *v1, IOSObjectArray *v2, JavaMathBigInteger *g1, JavaMathBigInteger *g2, jint bits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcEndoGLVTypeBParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_withJavaMathBigInteger_withJavaMathBigInteger_withInt_, beta, lambda, v1, v2, g1, g2, bits)
}

LibOrgBouncycastleMathEcEndoGLVTypeBParameters *create_LibOrgBouncycastleMathEcEndoGLVTypeBParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *beta, JavaMathBigInteger *lambda, IOSObjectArray *v1, IOSObjectArray *v2, JavaMathBigInteger *g1, JavaMathBigInteger *g2, jint bits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcEndoGLVTypeBParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withJavaMathBigIntegerArray_withJavaMathBigInteger_withJavaMathBigInteger_withInt_, beta, lambda, v1, v2, g1, g2, bits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcEndoGLVTypeBParameters)
