//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DeferredHash.java
//

#ifndef DeferredHash_H
#define DeferredHash_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsHandshakeHash.h"

@class IOSByteArray;
@class JavaLangShort;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsDeferredHash : NSObject < LibOrgBouncycastleCryptoTlsTlsHandshakeHash > {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsContext> context_;
}
@property (readonly, class) jint BUFFERING_HASH_LIMIT NS_SWIFT_NAME(BUFFERING_HASH_LIMIT);

+ (jint)BUFFERING_HASH_LIMIT;

#pragma mark Public

- (jint)doFinalWithByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff;

- (id<LibOrgBouncycastleCryptoDigest>)forkPRFHash;

- (NSString *)getAlgorithmName;

- (jint)getDigestSize;

- (IOSByteArray *)getFinalHashWithShort:(jshort)hashAlgorithm;

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)notifyPRFDetermined;

- (void)reset;

- (void)sealHashAlgorithms;

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)stopTracking;

- (void)trackHashAlgorithmWithShort:(jshort)hashAlgorithm;

- (void)updateWithByte:(jbyte)input;

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)len;

#pragma mark Protected

- (void)checkStopBuffering;

- (void)checkTrackingHashWithJavaLangShort:(JavaLangShort *)hashAlgorithm;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDeferredHash)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDeferredHash, context_, id<LibOrgBouncycastleCryptoTlsTlsContext>)

inline jint LibOrgBouncycastleCryptoTlsDeferredHash_get_BUFFERING_HASH_LIMIT(void);
#define LibOrgBouncycastleCryptoTlsDeferredHash_BUFFERING_HASH_LIMIT 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsDeferredHash, BUFFERING_HASH_LIMIT, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDeferredHash_init(LibOrgBouncycastleCryptoTlsDeferredHash *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDeferredHash *new_LibOrgBouncycastleCryptoTlsDeferredHash_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDeferredHash *create_LibOrgBouncycastleCryptoTlsDeferredHash_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDeferredHash)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DeferredHash_H
