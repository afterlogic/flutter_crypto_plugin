//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/IES.java
//

#include "AsymmetricAlgorithmProvider.h"
#include "ConfigurableProvider.h"
#include "IES.h"
#include "J2ObjC_source.h"

inline NSString *LibOrgBouncycastleJcajceProviderAsymmetricIES_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderAsymmetricIES_PREFIX = @"lib.org.bouncycastle.jcajce.provider.asymmetric.ies.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricIES, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricIES

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricIES_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &LibOrgBouncycastleJcajceProviderAsymmetricIES_PREFIX, "LLibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricIES = { "IES", "lib.org.bouncycastle.jcajce.provider.asymmetric", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, 1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricIES;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricIES_init(LibOrgBouncycastleJcajceProviderAsymmetricIES *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricIES *new_LibOrgBouncycastleJcajceProviderAsymmetricIES_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricIES, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricIES *create_LibOrgBouncycastleJcajceProviderAsymmetricIES_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricIES, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricIES)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"AlgorithmParameters.IES" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricIES_PREFIX, @"IesAlgorithmParametersSpi")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.ECIES" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricIES_PREFIX, @"IesAlgorithmParametersSpi")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", "LLibOrgBouncycastleJcajceProviderAsymmetricIES;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.asymmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings_init(LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAsymmetricAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings *new_LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings *create_LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricIES_Mappings)
