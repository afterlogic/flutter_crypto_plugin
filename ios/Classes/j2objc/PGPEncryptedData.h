//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPEncryptedData.java
//

#ifndef PGPEncryptedData_H
#define PGPEncryptedData_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/InputStream.h"

@class IOSIntArray;
@class JavaIoInputStream;
@class LibOrgBouncycastleBcpgInputStreamPacket;
@class LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream;
@protocol LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;

@interface LibOrgBouncycastleOpenpgpPGPEncryptedData : NSObject < LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags > {
 @public
  LibOrgBouncycastleBcpgInputStreamPacket *encData_;
  JavaIoInputStream *encStream_;
  LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *truncStream_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> integrityCalculator_;
}

#pragma mark Public

- (JavaIoInputStream *)getInputStream;

- (jboolean)isIntegrityProtected;

- (jboolean)verify;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleBcpgInputStreamPacket:(LibOrgBouncycastleBcpgInputStreamPacket *)encData;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPEncryptedData)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedData, encData_, LibOrgBouncycastleBcpgInputStreamPacket *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedData, encStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedData, truncStream_, LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedData, integrityCalculator_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPEncryptedData_initWithLibOrgBouncycastleBcpgInputStreamPacket_(LibOrgBouncycastleOpenpgpPGPEncryptedData *self, LibOrgBouncycastleBcpgInputStreamPacket *encData);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPEncryptedData)

@interface LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream : JavaIoInputStream {
 @public
  IOSIntArray *lookAhead_;
  jint bufPtr_;
  JavaIoInputStream *in_;
}

#pragma mark Public

- (jint)read;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleOpenpgpPGPEncryptedData:(LibOrgBouncycastleOpenpgpPGPEncryptedData *)outer$
                                                      withJavaIoInputStream:(JavaIoInputStream *)inArg;

- (IOSIntArray *)getLookAhead;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream, lookAhead_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream, in_, JavaIoInputStream *)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *self, LibOrgBouncycastleOpenpgpPGPEncryptedData *outer$, JavaIoInputStream *inArg);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *new_LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPEncryptedData *outer$, JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream *create_LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPEncryptedData *outer$, JavaIoInputStream *inArg);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PGPEncryptedData_H
