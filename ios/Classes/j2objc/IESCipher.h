//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ec/IESCipher.java
//

#ifndef IESCipher_H
#define IESCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "javax/crypto/CipherSpi.h"

@class IOSByteArray;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoEnginesIESEngine;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoBlockCipher;

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher : JavaxCryptoCipherSpi

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoEnginesIESEngine:(LibOrgBouncycastleCryptoEnginesIESEngine *)engine;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoEnginesIESEngine:(LibOrgBouncycastleCryptoEnginesIESEngine *)engine
                                                                   withInt:(jint)ivLength;

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen;

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLength
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset;

- (jint)engineGetBlockSize;

- (IOSByteArray *)engineGetIV;

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (jint)engineGetOutputSizeWithInt:(jint)inputLen;

- (JavaSecurityAlgorithmParameters *)engineGetParameters;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)engineSpec
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineSetModeWithNSString:(NSString *)mode;

- (void)engineSetPaddingWithNSString:(NSString *)padding;

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen;

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_initWithLibOrgBouncycastleCryptoEnginesIESEngine_(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher *self, LibOrgBouncycastleCryptoEnginesIESEngine *engine);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher *new_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_initWithLibOrgBouncycastleCryptoEnginesIESEngine_(LibOrgBouncycastleCryptoEnginesIESEngine *engine) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher *create_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_initWithLibOrgBouncycastleCryptoEnginesIESEngine_(LibOrgBouncycastleCryptoEnginesIESEngine *engine);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_initWithLibOrgBouncycastleCryptoEnginesIESEngine_withInt_(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher *self, LibOrgBouncycastleCryptoEnginesIESEngine *engine, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher *new_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_initWithLibOrgBouncycastleCryptoEnginesIESEngine_withInt_(LibOrgBouncycastleCryptoEnginesIESEngine *engine, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher *create_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_initWithLibOrgBouncycastleCryptoEnginesIESEngine_withInt_(LibOrgBouncycastleCryptoEnginesIESEngine *engine, jint ivLength);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher)

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES : LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoEnginesIESEngine:(LibOrgBouncycastleCryptoEnginesIESEngine *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoEnginesIESEngine:(LibOrgBouncycastleCryptoEnginesIESEngine *)arg0
                                                                   withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES_init(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES *new_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES *create_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIES)

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher : LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                              withInt:(jint)ivLength;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoEnginesIESEngine:(LibOrgBouncycastleCryptoEnginesIESEngine *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoEnginesIESEngine:(LibOrgBouncycastleCryptoEnginesIESEngine *)arg0
                                                                   withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher *new_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher *create_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint ivLength);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher)

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC : LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0
                                                              withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC_init(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithDESedeCBC)

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC : LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0
                                                              withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC_init(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricEcIESCipher_ECIESwithAESCBC)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // IESCipher_H
