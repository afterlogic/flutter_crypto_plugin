//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DigitallySigned.java
//

#ifndef DigitallySigned_H
#define DigitallySigned_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsDigitallySigned : NSObject {
 @public
  LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *algorithm_;
  IOSByteArray *signature_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                         withByteArray:(IOSByteArray *)signature;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)getAlgorithm;

- (IOSByteArray *)getSignature;

+ (LibOrgBouncycastleCryptoTlsDigitallySigned *)parseWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                         withJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDigitallySigned)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDigitallySigned, algorithm_, LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDigitallySigned, signature_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDigitallySigned_initWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_withByteArray_(LibOrgBouncycastleCryptoTlsDigitallySigned *self, LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *algorithm, IOSByteArray *signature);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDigitallySigned *new_LibOrgBouncycastleCryptoTlsDigitallySigned_initWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_withByteArray_(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *algorithm, IOSByteArray *signature) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDigitallySigned *create_LibOrgBouncycastleCryptoTlsDigitallySigned_initWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_withByteArray_(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *algorithm, IOSByteArray *signature);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDigitallySigned *LibOrgBouncycastleCryptoTlsDigitallySigned_parseWithLibOrgBouncycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDigitallySigned)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DigitallySigned_H
