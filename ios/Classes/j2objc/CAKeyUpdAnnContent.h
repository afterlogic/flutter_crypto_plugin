//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/CAKeyUpdAnnContent.java
//

#ifndef CAKeyUpdAnnContent_H
#define CAKeyUpdAnnContent_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CmpCMPCertificate;

@interface LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmpCMPCertificate:(LibOrgBouncycastleAsn1CmpCMPCertificate *)oldWithNew
                              withLibOrgBouncycastleAsn1CmpCMPCertificate:(LibOrgBouncycastleAsn1CmpCMPCertificate *)newWithOld
                              withLibOrgBouncycastleAsn1CmpCMPCertificate:(LibOrgBouncycastleAsn1CmpCMPCertificate *)newWithNew;

+ (LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1CmpCMPCertificate *)getNewWithNew;

- (LibOrgBouncycastleAsn1CmpCMPCertificate *)getNewWithOld;

- (LibOrgBouncycastleAsn1CmpCMPCertificate *)getOldWithNew;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent *LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent_initWithLibOrgBouncycastleAsn1CmpCMPCertificate_withLibOrgBouncycastleAsn1CmpCMPCertificate_withLibOrgBouncycastleAsn1CmpCMPCertificate_(LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent *self, LibOrgBouncycastleAsn1CmpCMPCertificate *oldWithNew, LibOrgBouncycastleAsn1CmpCMPCertificate *newWithOld, LibOrgBouncycastleAsn1CmpCMPCertificate *newWithNew);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent *new_LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent_initWithLibOrgBouncycastleAsn1CmpCMPCertificate_withLibOrgBouncycastleAsn1CmpCMPCertificate_withLibOrgBouncycastleAsn1CmpCMPCertificate_(LibOrgBouncycastleAsn1CmpCMPCertificate *oldWithNew, LibOrgBouncycastleAsn1CmpCMPCertificate *newWithOld, LibOrgBouncycastleAsn1CmpCMPCertificate *newWithNew) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent *create_LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent_initWithLibOrgBouncycastleAsn1CmpCMPCertificate_withLibOrgBouncycastleAsn1CmpCMPCertificate_withLibOrgBouncycastleAsn1CmpCMPCertificate_(LibOrgBouncycastleAsn1CmpCMPCertificate *oldWithNew, LibOrgBouncycastleAsn1CmpCMPCertificate *newWithOld, LibOrgBouncycastleAsn1CmpCMPCertificate *newWithNew);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmpCAKeyUpdAnnContent)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CAKeyUpdAnnContent_H
