//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsServerProtocol.java
//

#ifndef TlsServerProtocol_H
#define TlsServerProtocol_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsProtocol.h"

@class IOSByteArray;
@class JavaIoByteArrayInputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoTlsAbstractTlsContext;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@class LibOrgBouncycastleCryptoTlsCertificateStatus;
@class LibOrgBouncycastleCryptoTlsNewSessionTicket;
@class LibOrgBouncycastleCryptoTlsTlsServerContextImpl;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsHandshakeHash;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;
@protocol LibOrgBouncycastleCryptoTlsTlsPeer;
@protocol LibOrgBouncycastleCryptoTlsTlsServer;

@interface LibOrgBouncycastleCryptoTlsTlsServerProtocol : LibOrgBouncycastleCryptoTlsTlsProtocol {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsServer> tlsServer_;
  LibOrgBouncycastleCryptoTlsTlsServerContextImpl *tlsServerContext_;
  id<LibOrgBouncycastleCryptoTlsTlsKeyExchange> keyExchange_;
  id<LibOrgBouncycastleCryptoTlsTlsCredentials> serverCredentials_;
  LibOrgBouncycastleCryptoTlsCertificateRequest *certificateRequest_;
  jshort clientCertificateType_;
  id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash> prepareFinishHash_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)input
                             withJavaIoOutputStream:(JavaIoOutputStream *)output
                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (void)acceptWithLibOrgBouncycastleCryptoTlsTlsServer:(id<LibOrgBouncycastleCryptoTlsTlsServer>)tlsServer;

#pragma mark Protected

- (void)cleanupHandshake;

- (jboolean)expectCertificateVerifyMessage;

- (id<LibOrgBouncycastleCryptoTlsTlsContext>)getContext;

- (id<LibOrgBouncycastleCryptoTlsTlsPeer>)getPeer;

- (void)handleAlertWarningMessageWithShort:(jshort)alertDescription;

- (void)handleHandshakeMessageWithShort:(jshort)type
         withJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)notifyClientCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)clientCertificate;

- (void)receiveCertificateMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)receiveCertificateVerifyMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)receiveClientHelloMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)receiveClientKeyExchangeMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)sendCertificateRequestMessageWithLibOrgBouncycastleCryptoTlsCertificateRequest:(LibOrgBouncycastleCryptoTlsCertificateRequest *)certificateRequest;

- (void)sendCertificateStatusMessageWithLibOrgBouncycastleCryptoTlsCertificateStatus:(LibOrgBouncycastleCryptoTlsCertificateStatus *)certificateStatus;

- (void)sendNewSessionTicketMessageWithLibOrgBouncycastleCryptoTlsNewSessionTicket:(LibOrgBouncycastleCryptoTlsNewSessionTicket *)newSessionTicket;

- (void)sendServerHelloDoneMessage;

- (void)sendServerHelloMessage;

- (void)sendServerKeyExchangeMessageWithByteArray:(IOSByteArray *)serverKeyExchange;

#pragma mark Package-Private

- (LibOrgBouncycastleCryptoTlsAbstractTlsContext *)getContextAdmin;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsServerProtocol)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsServerProtocol, tlsServer_, id<LibOrgBouncycastleCryptoTlsTlsServer>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsServerProtocol, tlsServerContext_, LibOrgBouncycastleCryptoTlsTlsServerContextImpl *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsServerProtocol, keyExchange_, id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsServerProtocol, serverCredentials_, id<LibOrgBouncycastleCryptoTlsTlsCredentials>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsServerProtocol, certificateRequest_, LibOrgBouncycastleCryptoTlsCertificateRequest *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsServerProtocol, prepareFinishHash_, id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoTlsTlsServerProtocol *self, JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsServerProtocol *new_LibOrgBouncycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsServerProtocol *create_LibOrgBouncycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoTlsTlsServerProtocol *self, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsServerProtocol *new_LibOrgBouncycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsServerProtocol *create_LibOrgBouncycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsServerProtocol)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsServerProtocol_H
