//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/URLAndHash.java
//

#ifndef URLAndHash_H
#define URLAndHash_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsURLAndHash : NSObject {
 @public
  NSString *url_;
  IOSByteArray *sha1Hash_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)url
                             withByteArray:(IOSByteArray *)sha1Hash;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)getSHA1Hash;

- (NSString *)getURL;

+ (LibOrgBouncycastleCryptoTlsURLAndHash *)parseWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                    withJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsURLAndHash)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsURLAndHash, url_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsURLAndHash, sha1Hash_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsURLAndHash_initWithNSString_withByteArray_(LibOrgBouncycastleCryptoTlsURLAndHash *self, NSString *url, IOSByteArray *sha1Hash);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsURLAndHash *new_LibOrgBouncycastleCryptoTlsURLAndHash_initWithNSString_withByteArray_(NSString *url, IOSByteArray *sha1Hash) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsURLAndHash *create_LibOrgBouncycastleCryptoTlsURLAndHash_initWithNSString_withByteArray_(NSString *url, IOSByteArray *sha1Hash);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsURLAndHash *LibOrgBouncycastleCryptoTlsURLAndHash_parseWithLibOrgBouncycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsURLAndHash)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // URLAndHash_H
