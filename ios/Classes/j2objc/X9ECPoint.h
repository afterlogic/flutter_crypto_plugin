//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x9/X9ECPoint.java
//

#ifndef X9ECPoint_H
#define X9ECPoint_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1OctetString;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleMathEcECCurve;
@class LibOrgBouncycastleMathEcECPoint;

@interface LibOrgBouncycastleAsn1X9X9ECPoint : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c
                        withLibOrgBouncycastleAsn1ASN1OctetString:(LibOrgBouncycastleAsn1ASN1OctetString *)s;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c
                                                    withByteArray:(IOSByteArray *)encoding;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                      withBoolean:(jboolean)compressed;

- (LibOrgBouncycastleMathEcECPoint *)getPoint;

- (IOSByteArray *)getPointEncoding;

- (jboolean)isPointCompressed;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X9X9ECPoint)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleAsn1X9X9ECPoint *self, LibOrgBouncycastleMathEcECPoint *p);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECPoint *new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECPoint *create_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *p);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_(LibOrgBouncycastleAsn1X9X9ECPoint *self, LibOrgBouncycastleMathEcECPoint *p, jboolean compressed);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECPoint *new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_(LibOrgBouncycastleMathEcECPoint *p, jboolean compressed) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECPoint *create_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_(LibOrgBouncycastleMathEcECPoint *p, jboolean compressed);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withByteArray_(LibOrgBouncycastleAsn1X9X9ECPoint *self, LibOrgBouncycastleMathEcECCurve *c, IOSByteArray *encoding);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECPoint *new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withByteArray_(LibOrgBouncycastleMathEcECCurve *c, IOSByteArray *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECPoint *create_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withByteArray_(LibOrgBouncycastleMathEcECCurve *c, IOSByteArray *encoding);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1X9X9ECPoint *self, LibOrgBouncycastleMathEcECCurve *c, LibOrgBouncycastleAsn1ASN1OctetString *s);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECPoint *new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleMathEcECCurve *c, LibOrgBouncycastleAsn1ASN1OctetString *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECPoint *create_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleMathEcECCurve *c, LibOrgBouncycastleAsn1ASN1OctetString *s);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X9X9ECPoint)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // X9ECPoint_H
