//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/encodings/ISO9796d1Encoding.java
//

#include "AsymmetricBlockCipher.h"
#include "CipherParameters.h"
#include "IOSPrimitiveArray.h"
#include "ISO9796d1Encoding.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "RSAKeyParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding () {
 @public
  id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> engine_;
  jboolean forEncryption_;
  jint bitSize_;
  jint padBits_;
  JavaMathBigInteger *modulus_;
}

- (IOSByteArray *)encodeBlockWithByteArray:(IOSByteArray *)inArg
                                   withInt:(jint)inOff
                                   withInt:(jint)inLen;

- (IOSByteArray *)decodeBlockWithByteArray:(IOSByteArray *)inArg
                                   withInt:(jint)inOff
                                   withInt:(jint)inLen;

+ (IOSByteArray *)convertOutputDecryptOnlyWithJavaMathBigInteger:(JavaMathBigInteger *)result;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding, engine_, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding, modulus_, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_get_SIXTEEN(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIXTEEN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding, SIXTEEN, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_get_SIX(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding, SIX, JavaMathBigInteger *)

inline IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_get_shadows(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_set_shadows(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding, shadows, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_get_inverse(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_set_inverse(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_inverse;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding, inverse, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_encodeBlockWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding *self, IOSByteArray *inArg, jint inOff, jint inLen);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_decodeBlockWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding *self, IOSByteArray *inArg, jint inOff, jint inLen);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_convertOutputDecryptOnlyWithJavaMathBigInteger_(JavaMathBigInteger *result);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding)

@implementation LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding

- (instancetype)initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)cipher {
  LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(self, cipher);
  return self;
}

- (id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)getUnderlyingCipher {
  return engine_;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  LibOrgBouncycastleCryptoParamsRSAKeyParameters *kParam = nil;
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
    kParam = (LibOrgBouncycastleCryptoParamsRSAKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [LibOrgBouncycastleCryptoParamsRSAKeyParameters class]);
  }
  else {
    kParam = (LibOrgBouncycastleCryptoParamsRSAKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsRSAKeyParameters class]);
  }
  [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:param];
  modulus_ = [((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(kParam)) getModulus];
  bitSize_ = [((JavaMathBigInteger *) nil_chk(modulus_)) bitLength];
  self->forEncryption_ = forEncryption;
}

- (jint)getInputBlockSize {
  jint baseBlockSize = [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) getInputBlockSize];
  if (forEncryption_) {
    return (baseBlockSize + 1) / 2;
  }
  else {
    return baseBlockSize;
  }
}

- (jint)getOutputBlockSize {
  jint baseBlockSize = [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) getOutputBlockSize];
  if (forEncryption_) {
    return baseBlockSize;
  }
  else {
    return (baseBlockSize + 1) / 2;
  }
}

- (void)setPadBitsWithInt:(jint)padBits {
  if (padBits > 7) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"padBits > 7");
  }
  self->padBits_ = padBits;
}

- (jint)getPadBits {
  return padBits_;
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  if (forEncryption_) {
    return LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_encodeBlockWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
  }
  else {
    return LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_decodeBlockWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
  }
}

- (IOSByteArray *)encodeBlockWithByteArray:(IOSByteArray *)inArg
                                   withInt:(jint)inOff
                                   withInt:(jint)inLen {
  return LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_encodeBlockWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
}

- (IOSByteArray *)decodeBlockWithByteArray:(IOSByteArray *)inArg
                                   withInt:(jint)inOff
                                   withInt:(jint)inLen {
  return LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_decodeBlockWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
}

+ (IOSByteArray *)convertOutputDecryptOnlyWithJavaMathBigInteger:(JavaMathBigInteger *)result {
  return LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_convertOutputDecryptOnlyWithJavaMathBigInteger_(result);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "[B", 0x2, 8, 6, 7, -1, -1, -1 },
    { NULL, "[B", 0x2, 9, 6, 7, -1, -1, -1 },
    { NULL, "[B", 0xa, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher:);
  methods[1].selector = @selector(getUnderlyingCipher);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getInputBlockSize);
  methods[4].selector = @selector(getOutputBlockSize);
  methods[5].selector = @selector(setPadBitsWithInt:);
  methods[6].selector = @selector(getPadBits);
  methods[7].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(encodeBlockWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(decodeBlockWithByteArray:withInt:withInt:);
  methods[10].selector = @selector(convertOutputDecryptOnlyWithJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SIXTEEN", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "SIX", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "shadows", "[B", .constantValue.asLong = 0, 0xa, -1, 14, -1, -1 },
    { "inverse", "[B", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "engine_", "LLibOrgBouncycastleCryptoAsymmetricBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modulus_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoAsymmetricBlockCipher;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "setPadBits", "I", "processBlock", "[BII", "LLibOrgBouncycastleCryptoInvalidCipherTextException;", "encodeBlock", "decodeBlock", "convertOutputDecryptOnly", "LJavaMathBigInteger;", &LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIXTEEN, &LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIX, &LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows, &LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_inverse };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding = { "ISO9796d1Encoding", "lib.org.bouncycastle.crypto.encodings", ptrTable, methods, fields, 7, 0x1, 11, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding class]) {
    LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIXTEEN = JavaMathBigInteger_valueOfWithLong_(16LL);
    LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIX = JavaMathBigInteger_valueOfWithLong_(6LL);
    LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0xe, (jint) 0x3, (jint) 0x5, (jint) 0x8, (jint) 0x9, (jint) 0x4, (jint) 0x2, (jint) 0xf, (jint) 0x0, (jint) 0xd, (jint) 0xb, (jint) 0x6, (jint) 0x7, (jint) 0xa, (jint) 0xc, (jint) 0x1 } count:16];
    LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_inverse = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x8, (jint) 0xf, (jint) 0x6, (jint) 0x1, (jint) 0x5, (jint) 0x2, (jint) 0xb, (jint) 0xc, (jint) 0x3, (jint) 0x4, (jint) 0xd, (jint) 0xa, (jint) 0xe, (jint) 0x9, (jint) 0x0, (jint) 0x7 } count:16];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding)
  }
}

@end

void LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding *self, id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  NSObject_init(self);
  self->padBits_ = 0;
  self->engine_ = cipher;
}

LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding *new_LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding, initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding *create_LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding, initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_, cipher)
}

IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_encodeBlockWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding *self, IOSByteArray *inArg, jint inOff, jint inLen) {
  IOSByteArray *block = [IOSByteArray newArrayWithLength:(self->bitSize_ + 7) / 8];
  jint r = self->padBits_ + 1;
  jint z = inLen;
  jint t = (self->bitSize_ + 13) / 16;
  for (jint i = 0; i < t; i += z) {
    if (i > t - z) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff + inLen - (t - i), block, block->size_ - t, t - i);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, block, block->size_ - (i + z), z);
    }
  }
  for (jint i = block->size_ - 2 * t; i != block->size_; i += 2) {
    jbyte val = IOSByteArray_Get(block, block->size_ - t + i / 2);
    *IOSByteArray_GetRef(block, i) = (jbyte) ((JreLShift32(IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows), JreURShift32((val & (jint) 0xff), 4)), 4)) | IOSByteArray_Get(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows, val & (jint) 0x0f));
    *IOSByteArray_GetRef(block, i + 1) = val;
  }
  *IOSByteArray_GetRef(block, block->size_ - 2 * z) ^= r;
  *IOSByteArray_GetRef(block, block->size_ - 1) = (jbyte) ((JreLShift32(IOSByteArray_Get(block, block->size_ - 1), 4)) | (jint) 0x06);
  jint maxBit = (8 - (self->bitSize_ - 1) % 8);
  jint offSet = 0;
  if (maxBit != 8) {
    *IOSByteArray_GetRef(block, 0) &= JreURShift32((jint) 0xff, maxBit);
    *IOSByteArray_GetRef(block, 0) |= JreURShift32((jint) 0x80, maxBit);
  }
  else {
    *IOSByteArray_GetRef(block, 0) = (jint) 0x00;
    *IOSByteArray_GetRef(block, 1) |= (jint) 0x80;
    offSet = 1;
  }
  return [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(self->engine_)) processBlockWithByteArray:block withInt:offSet withInt:block->size_ - offSet];
}

IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_decodeBlockWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding *self, IOSByteArray *inArg, jint inOff, jint inLen) {
  IOSByteArray *block = [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(self->engine_)) processBlockWithByteArray:inArg withInt:inOff withInt:inLen];
  jint r = 1;
  jint t = (self->bitSize_ + 13) / 16;
  JavaMathBigInteger *iS = new_JavaMathBigInteger_initWithInt_withByteArray_(1, block);
  JavaMathBigInteger *iR;
  if ([((JavaMathBigInteger *) nil_chk([iS modWithJavaMathBigInteger:LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIXTEEN])) isEqual:LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIX]) {
    iR = iS;
  }
  else if ([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(self->modulus_)) subtractWithJavaMathBigInteger:iS]))) modWithJavaMathBigInteger:LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIXTEEN])) isEqual:LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_SIX]) {
    iR = [((JavaMathBigInteger *) nil_chk(self->modulus_)) subtractWithJavaMathBigInteger:iS];
  }
  else {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"resulting integer iS or (modulus - iS) is not congruent to 6 mod 16");
  }
  block = LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_convertOutputDecryptOnlyWithJavaMathBigInteger_(iR);
  if ((IOSByteArray_Get(block, ((IOSByteArray *) nil_chk(block))->size_ - 1) & (jint) 0x0f) != (jint) 0x6) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"invalid forcing byte in block");
  }
  *IOSByteArray_GetRef(block, block->size_ - 1) = (jbyte) ((JreURShift32((IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xff), 4)) | (JreLShift32((IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_inverse), JreRShift32((IOSByteArray_Get(block, block->size_ - 2) & (jint) 0xff), 4))), 4)));
  *IOSByteArray_GetRef(block, 0) = (jbyte) ((JreLShift32(IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows), JreURShift32((IOSByteArray_Get(block, 1) & (jint) 0xff), 4)), 4)) | IOSByteArray_Get(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows, IOSByteArray_Get(block, 1) & (jint) 0x0f));
  jboolean boundaryFound = false;
  jint boundary = 0;
  for (jint i = block->size_ - 1; i >= block->size_ - 2 * t; i -= 2) {
    jint val = ((JreLShift32(IOSByteArray_Get(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows, JreURShift32((IOSByteArray_Get(block, i) & (jint) 0xff), 4)), 4)) | IOSByteArray_Get(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_shadows, IOSByteArray_Get(block, i) & (jint) 0x0f));
    if (((IOSByteArray_Get(block, i - 1) ^ val) & (jint) 0xff) != 0) {
      if (!boundaryFound) {
        boundaryFound = true;
        r = (IOSByteArray_Get(block, i - 1) ^ val) & (jint) 0xff;
        boundary = i - 1;
      }
      else {
        @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"invalid tsums in block");
      }
    }
  }
  *IOSByteArray_GetRef(block, boundary) = 0;
  IOSByteArray *nblock = [IOSByteArray newArrayWithLength:(block->size_ - boundary) / 2];
  for (jint i = 0; i < nblock->size_; i++) {
    *IOSByteArray_GetRef(nblock, i) = IOSByteArray_Get(block, 2 * i + boundary + 1);
  }
  self->padBits_ = r - 1;
  return nblock;
}

IOSByteArray *LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_convertOutputDecryptOnlyWithJavaMathBigInteger_(JavaMathBigInteger *result) {
  LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding_initialize();
  IOSByteArray *output = [((JavaMathBigInteger *) nil_chk(result)) toByteArray];
  if (IOSByteArray_Get(nil_chk(output), 0) == 0) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:output->size_ - 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, 1, tmp, 0, tmp->size_);
    return tmp;
  }
  return output;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEncodingsISO9796d1Encoding)
