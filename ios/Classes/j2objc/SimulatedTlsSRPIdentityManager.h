//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SimulatedTlsSRPIdentityManager.java
//

#ifndef SimulatedTlsSRPIdentityManager_H
#define SimulatedTlsSRPIdentityManager_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsSRPIdentityManager.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator;
@class LibOrgBouncycastleCryptoParamsSRP6GroupParameters;
@class LibOrgBouncycastleCryptoTlsTlsSRPLoginParameters;
@protocol LibOrgBouncycastleCryptoMac;

@interface LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager : NSObject < LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager > {
 @public
  LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group_;
  LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator_;
  id<LibOrgBouncycastleCryptoMac> mac_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)group
                      withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator:(LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *)verifierGenerator
                                                    withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac;

- (LibOrgBouncycastleCryptoTlsTlsSRPLoginParameters *)getLoginParametersWithByteArray:(IOSByteArray *)identity;

+ (LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *)getRFC5054DefaultWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)group
                                                                                                                        withByteArray:(IOSByteArray *)seedKey;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager, group_, LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager, verifierGenerator_, LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager, mac_, id<LibOrgBouncycastleCryptoMac>)

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_getRFC5054DefaultWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withByteArray_(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group, IOSByteArray *seedKey);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *self, LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group, LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<LibOrgBouncycastleCryptoMac> mac);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *new_LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group, LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<LibOrgBouncycastleCryptoMac> mac) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *create_LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group, LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<LibOrgBouncycastleCryptoMac> mac);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SimulatedTlsSRPIdentityManager_H
