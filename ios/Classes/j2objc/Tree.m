//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/Tree.java
//

#include "HashFunctions.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SPHINCS256Config.h"
#include "Seed.h"
#include "Tree.h"
#include "Wots.h"
#include "java/lang/System.h"

@implementation LibOrgBouncycastlePqcCryptoSphincsTree

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoSphincsTree_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)l_treeWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                    withByteArray:(IOSByteArray *)leaf
                                                          withInt:(jint)leafOff
                                                    withByteArray:(IOSByteArray *)wots_pk
                                                          withInt:(jint)pkOff
                                                    withByteArray:(IOSByteArray *)masks
                                                          withInt:(jint)masksOff {
  LibOrgBouncycastlePqcCryptoSphincsTree_l_treeWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, leaf, leafOff, wots_pk, pkOff, masks, masksOff);
}

+ (void)treehashWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                      withByteArray:(IOSByteArray *)node
                                                            withInt:(jint)nodeOff
                                                            withInt:(jint)height
                                                      withByteArray:(IOSByteArray *)sk
                withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *)leaf
                                                      withByteArray:(IOSByteArray *)masks
                                                            withInt:(jint)masksOff {
  LibOrgBouncycastlePqcCryptoSphincsTree_treehashWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(hs, node, nodeOff, height, sk, leaf, masks, masksOff);
}

+ (void)gen_leaf_wotsWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                           withByteArray:(IOSByteArray *)leaf
                                                                 withInt:(jint)leafOff
                                                           withByteArray:(IOSByteArray *)masks
                                                                 withInt:(jint)masksOff
                                                           withByteArray:(IOSByteArray *)sk
                     withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *)a {
  LibOrgBouncycastlePqcCryptoSphincsTree_gen_leaf_wotsWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, leaf, leafOff, masks, masksOff, sk, a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(l_treeWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  methods[2].selector = @selector(treehashWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withInt:withByteArray:withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:withByteArray:withInt:);
  methods[3].selector = @selector(gen_leaf_wotsWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withInt:withByteArray:withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "l_tree", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BI[BI", "treehash", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[BII[BLLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr;[BI", "gen_leaf_wots", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BI[BLLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr;", "LLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoSphincsTree = { "Tree", "lib.org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, NULL, 7, 0x0, 4, 0, -1, 6, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoSphincsTree;
}

@end

void LibOrgBouncycastlePqcCryptoSphincsTree_init(LibOrgBouncycastlePqcCryptoSphincsTree *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoSphincsTree *new_LibOrgBouncycastlePqcCryptoSphincsTree_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoSphincsTree, init)
}

LibOrgBouncycastlePqcCryptoSphincsTree *create_LibOrgBouncycastlePqcCryptoSphincsTree_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoSphincsTree, init)
}

void LibOrgBouncycastlePqcCryptoSphincsTree_l_treeWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *leaf, jint leafOff, IOSByteArray *wots_pk, jint pkOff, IOSByteArray *masks, jint masksOff) {
  LibOrgBouncycastlePqcCryptoSphincsTree_initialize();
  jint l = LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L;
  jint i;
  jint j = 0;
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L; i++) {
    for (j = 0; j < (JreURShift32(l, 1)); j++) {
      [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:wots_pk withInt:pkOff + j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:wots_pk withInt:pkOff + j * 2 * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:masksOff + i * 2 * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
    }
    if ((l & 1) != 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wots_pk, pkOff + (l - 1) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, wots_pk, pkOff + (JreURShift32(l, 1)) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
      l = (JreURShift32(l, 1)) + 1;
    }
    else {
      l = (JreURShift32(l, 1));
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wots_pk, pkOff, leaf, leafOff, LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
}

void LibOrgBouncycastlePqcCryptoSphincsTree_treehashWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *node, jint nodeOff, jint height, IOSByteArray *sk, LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *leaf, IOSByteArray *masks, jint masksOff) {
  LibOrgBouncycastlePqcCryptoSphincsTree_initialize();
  LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *a = new_LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(leaf);
  jint lastnode;
  jint i;
  IOSByteArray *stack = [IOSByteArray newArrayWithLength:(height + 1) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSIntArray *stacklevels = [IOSIntArray newArrayWithLength:height + 1];
  jint stackoffset = 0;
  lastnode = (jint) (a->subleaf_ + (JreLShift32(1, height)));
  for (; a->subleaf_ < lastnode; a->subleaf_++) {
    LibOrgBouncycastlePqcCryptoSphincsTree_gen_leaf_wotsWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, stack, stackoffset * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, masks, masksOff, sk, a);
    *IOSIntArray_GetRef(stacklevels, stackoffset) = 0;
    stackoffset++;
    while (stackoffset > 1 && IOSIntArray_Get(stacklevels, stackoffset - 1) == IOSIntArray_Get(stacklevels, stackoffset - 2)) {
      jint maskoffset = 2 * (IOSIntArray_Get(stacklevels, stackoffset - 1) + LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
      [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:stack withInt:(stackoffset - 2) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:stack withInt:(stackoffset - 2) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:masksOff + maskoffset];
      (*IOSIntArray_GetRef(stacklevels, stackoffset - 2))++;
      stackoffset--;
    }
  }
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    *IOSByteArray_GetRef(nil_chk(node), nodeOff + i) = IOSByteArray_Get(stack, i);
  }
}

void LibOrgBouncycastlePqcCryptoSphincsTree_gen_leaf_wotsWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *leaf, jint leafOff, IOSByteArray *masks, jint masksOff, IOSByteArray *sk, LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *a) {
  LibOrgBouncycastlePqcCryptoSphincsTree_initialize();
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES];
  IOSByteArray *pk = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  LibOrgBouncycastlePqcCryptoSphincsWots *w = new_LibOrgBouncycastlePqcCryptoSphincsWots_init();
  LibOrgBouncycastlePqcCryptoSphincsSeed_get_seedWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, 0, sk, a);
  [w wots_pkgenWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:hs withByteArray:pk withInt:0 withByteArray:seed withInt:0 withByteArray:masks withInt:masksOff];
  LibOrgBouncycastlePqcCryptoSphincsTree_l_treeWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, leaf, leafOff, pk, 0, masks, masksOff);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoSphincsTree)

@implementation LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *)leafaddr {
  LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(self, leafaddr);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "level_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subtree_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subleaf_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr;", "LLibOrgBouncycastlePqcCryptoSphincsTree;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr = { "leafaddr", "lib.org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x8, 2, 3, 1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr;
}

@end

void LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_init(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *new_LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr, init)
}

LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *create_LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr, init)
}

void LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *self, LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr) {
  NSObject_init(self);
  self->level_ = ((LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *) nil_chk(leafaddr))->level_;
  self->subtree_ = leafaddr->subtree_;
  self->subleaf_ = leafaddr->subleaf_;
}

LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *new_LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr, initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_, leafaddr)
}

LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *create_LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr, initWithLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_, leafaddr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr)
