//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/mceliece/McElieceFujisakiCipher.java
//

#include "ByteUtils.h"
#include "CipherParameters.h"
#include "Conversions.h"
#include "CryptoServicesRegistrar.h"
#include "Digest.h"
#include "DigestRandomGenerator.h"
#include "GF2Vector.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "McElieceCCA2KeyParameters.h"
#include "McElieceCCA2Primitives.h"
#include "McElieceCCA2PrivateKeyParameters.h"
#include "McElieceCCA2PublicKeyParameters.h"
#include "McElieceFujisakiCipher.h"
#include "ParametersWithRandom.h"
#include "PqcCryptoMcelieceUtils.h"
#include "SHA1Digest.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher () {
 @public
  id<LibOrgBouncycastleCryptoDigest> messDigest_;
  JavaSecuritySecureRandom *sr_;
  jint n_;
  jint k_;
  jint t_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, messDigest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, sr_, JavaSecuritySecureRandom *)

inline NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_get_DEFAULT_PRNG_NAME(void);
static NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_DEFAULT_PRNG_NAME = @"SHA1PRNG";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, DEFAULT_PRNG_NAME, NSString *)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey);

NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2.1";

@implementation LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher

+ (NSString *)OID {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_OID;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->sr_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk([rParam getParameters], [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
    else {
      self->sr_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
  }
  else {
    self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]);
    LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]));
  }
}

- (jint)getKeySizeWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)key {
  if ([key isKindOfClass:[LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]]) {
    return [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) key))) getN];
  }
  if ([key isKindOfClass:[LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]]) {
    return [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}

- (void)initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, pubKey);
}

- (void)initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, privKey);
}

- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  if (!forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *r = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(k_, sr_);
  IOSByteArray *rBytes = [r getEncoded];
  IOSByteArray *rm = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(rBytes, input);
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:rm withInt:0 withInt:((IOSByteArray *) nil_chk(rm))->size_];
  IOSByteArray *hrm = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:hrm withInt:0];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *z = LibOrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, hrm);
  IOSByteArray *c1 = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_encryptionPrimitiveWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]), r, z))) getEncoded];
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_LibOrgBouncycastleCryptoPrngDigestRandomGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
  [sr0 addSeedMaterialWithByteArray:rBytes];
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(input))->size_];
  [sr0 nextBytesWithByteArray:c2];
  for (jint i = 0; i < input->size_; i++) {
    *IOSByteArray_GetRef(c2, i) ^= IOSByteArray_Get(input, i);
  }
  return LibOrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c1, c2);
}

- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  if (forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  jint c1Len = JreRShift32((n_ + 7), 3);
  jint c2Len = ((IOSByteArray *) nil_chk(input))->size_ - c1Len;
  IOSObjectArray *c1c2 = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(input, c1Len);
  IOSByteArray *c1 = IOSObjectArray_Get(nil_chk(c1c2), 0);
  IOSByteArray *c2 = IOSObjectArray_Get(c1c2, 1);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *hrmVec = LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, c1);
  IOSObjectArray *decC1 = LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_decryptionPrimitiveWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]), hrmVec);
  IOSByteArray *rBytes = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(IOSObjectArray_Get(nil_chk(decC1), 0))) getEncoded];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *z = IOSObjectArray_Get(decC1, 1);
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_LibOrgBouncycastleCryptoPrngDigestRandomGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
  [sr0 addSeedMaterialWithByteArray:rBytes];
  IOSByteArray *mBytes = [IOSByteArray newArrayWithLength:c2Len];
  [sr0 nextBytesWithByteArray:mBytes];
  for (jint i = 0; i < c2Len; i++) {
    *IOSByteArray_GetRef(mBytes, i) ^= IOSByteArray_Get(nil_chk(c2), i);
  }
  IOSByteArray *rmBytes = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(rBytes, mBytes);
  IOSByteArray *hrm = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:rmBytes withInt:0 withInt:((IOSByteArray *) nil_chk(rmBytes))->size_];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:hrm withInt:0];
  hrmVec = LibOrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, hrm);
  if (![((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(hrmVec)) isEqual:z]) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  return mBytes;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 10, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:);
  methods[3].selector = @selector(initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:);
  methods[4].selector = @selector(initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:);
  methods[5].selector = @selector(messageEncryptWithByteArray:);
  methods[6].selector = @selector(messageDecryptWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "DEFAULT_PRNG_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "messDigest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "getKeySize", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", "LJavaLangIllegalArgumentException;", "initCipherEncrypt", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters;", "initCipherDecrypt", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters;", "messageEncrypt", "[B", "messageDecrypt", "LLibOrgBouncycastleCryptoInvalidCipherTextException;", &LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_OID, &LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_DEFAULT_PRNG_NAME };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher = { "McElieceFujisakiCipher", "lib.org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 7, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher;
}

@end

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, init)
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *create_LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, init)
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey) {
  self->sr_ = self->sr_ != nil ? self->sr_ : LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->messDigest_ = LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils_getDigestWithNSString_([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(pubKey)) getDigest]);
  self->n_ = [pubKey getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey) {
  self->messDigest_ = LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils_getDigestWithNSString_([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(privKey)) getDigest]);
  self->n_ = [privKey getN];
  self->t_ = [privKey getT];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher)
