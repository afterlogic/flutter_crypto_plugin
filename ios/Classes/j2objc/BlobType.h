//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/BlobType.java
//

#ifndef BlobType_H
#define BlobType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, LibOrgBouncycastleGpgKeyboxBlobType_Enum) {
  LibOrgBouncycastleGpgKeyboxBlobType_Enum_EMPTY_BLOB = 0,
  LibOrgBouncycastleGpgKeyboxBlobType_Enum_FIRST_BLOB = 1,
  LibOrgBouncycastleGpgKeyboxBlobType_Enum_OPEN_PGP_BLOB = 2,
  LibOrgBouncycastleGpgKeyboxBlobType_Enum_X509_BLOB = 3,
};

@interface LibOrgBouncycastleGpgKeyboxBlobType : JavaLangEnum

@property (readonly, class, nonnull) LibOrgBouncycastleGpgKeyboxBlobType *EMPTY_BLOB NS_SWIFT_NAME(EMPTY_BLOB);
@property (readonly, class, nonnull) LibOrgBouncycastleGpgKeyboxBlobType *FIRST_BLOB NS_SWIFT_NAME(FIRST_BLOB);
@property (readonly, class, nonnull) LibOrgBouncycastleGpgKeyboxBlobType *OPEN_PGP_BLOB NS_SWIFT_NAME(OPEN_PGP_BLOB);
@property (readonly, class, nonnull) LibOrgBouncycastleGpgKeyboxBlobType *X509_BLOB NS_SWIFT_NAME(X509_BLOB);
+ (LibOrgBouncycastleGpgKeyboxBlobType * __nonnull)EMPTY_BLOB;

+ (LibOrgBouncycastleGpgKeyboxBlobType * __nonnull)FIRST_BLOB;

+ (LibOrgBouncycastleGpgKeyboxBlobType * __nonnull)OPEN_PGP_BLOB;

+ (LibOrgBouncycastleGpgKeyboxBlobType * __nonnull)X509_BLOB;

#pragma mark Public

+ (LibOrgBouncycastleGpgKeyboxBlobType *)fromByteWithInt:(jint)byteVal;

- (jint)getByteValue;

+ (LibOrgBouncycastleGpgKeyboxBlobType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (LibOrgBouncycastleGpgKeyboxBlobType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleGpgKeyboxBlobType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT LibOrgBouncycastleGpgKeyboxBlobType *LibOrgBouncycastleGpgKeyboxBlobType_values_[];

inline LibOrgBouncycastleGpgKeyboxBlobType *LibOrgBouncycastleGpgKeyboxBlobType_get_EMPTY_BLOB(void);
J2OBJC_ENUM_CONSTANT(LibOrgBouncycastleGpgKeyboxBlobType, EMPTY_BLOB)

inline LibOrgBouncycastleGpgKeyboxBlobType *LibOrgBouncycastleGpgKeyboxBlobType_get_FIRST_BLOB(void);
J2OBJC_ENUM_CONSTANT(LibOrgBouncycastleGpgKeyboxBlobType, FIRST_BLOB)

inline LibOrgBouncycastleGpgKeyboxBlobType *LibOrgBouncycastleGpgKeyboxBlobType_get_OPEN_PGP_BLOB(void);
J2OBJC_ENUM_CONSTANT(LibOrgBouncycastleGpgKeyboxBlobType, OPEN_PGP_BLOB)

inline LibOrgBouncycastleGpgKeyboxBlobType *LibOrgBouncycastleGpgKeyboxBlobType_get_X509_BLOB(void);
J2OBJC_ENUM_CONSTANT(LibOrgBouncycastleGpgKeyboxBlobType, X509_BLOB)

FOUNDATION_EXPORT LibOrgBouncycastleGpgKeyboxBlobType *LibOrgBouncycastleGpgKeyboxBlobType_fromByteWithInt_(jint byteVal);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleGpgKeyboxBlobType_values(void);

FOUNDATION_EXPORT LibOrgBouncycastleGpgKeyboxBlobType *LibOrgBouncycastleGpgKeyboxBlobType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT LibOrgBouncycastleGpgKeyboxBlobType *LibOrgBouncycastleGpgKeyboxBlobType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleGpgKeyboxBlobType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BlobType_H
