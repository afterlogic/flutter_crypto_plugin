//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dsa/BCDSAPrivateKey.java
//

#ifndef BCDSAPrivateKey_H
#define BCDSAPrivateKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PKCS12BagAttributeCarrier.h"
#include "java/security/interfaces/DSAPrivateKey.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecuritySpecDSAPrivateKeySpec;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters;
@protocol JavaSecurityInterfacesDSAParams;
@protocol JavaUtilEnumeration;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey : NSObject < JavaSecurityInterfacesDSAPrivateKey, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)info;

- (jboolean)isEqual:(id)o;

- (NSString *)getAlgorithm;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

- (id<JavaUtilEnumeration>)getBagAttributeKeys;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (id<JavaSecurityInterfacesDSAParams>)getParams;

- (JavaMathBigInteger *)getX;

- (NSUInteger)hash;

- (void)setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                              withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)attribute;

- (NSString *)description;

#pragma mark Protected

- (instancetype __nonnull)init;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaSecurityInterfacesDSAPrivateKey:(id<JavaSecurityInterfacesDSAPrivateKey>)key;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *)params;

- (instancetype __nonnull)initWithJavaSecuritySpecDSAPrivateKeySpec:(JavaSecuritySpecDSAPrivateKeySpec *)spec;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_init(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithJavaSecurityInterfacesDSAPrivateKey_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *self, id<JavaSecurityInterfacesDSAPrivateKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithJavaSecurityInterfacesDSAPrivateKey_(id<JavaSecurityInterfacesDSAPrivateKey> key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithJavaSecurityInterfacesDSAPrivateKey_(id<JavaSecurityInterfacesDSAPrivateKey> key);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithJavaSecuritySpecDSAPrivateKeySpec_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *self, JavaSecuritySpecDSAPrivateKeySpec *spec);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithJavaSecuritySpecDSAPrivateKeySpec_(JavaSecuritySpecDSAPrivateKeySpec *spec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithJavaSecuritySpecDSAPrivateKeySpec_(JavaSecuritySpecDSAPrivateKeySpec *spec);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *self, LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithLibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *self, LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithLibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithLibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BCDSAPrivateKey_H
