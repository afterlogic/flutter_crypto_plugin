//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/Poly1305.java
//

#ifndef Poly1305_H
#define Poly1305_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Mac.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoMacsPoly1305 : NSObject < LibOrgBouncycastleCryptoMac >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoMacsPoly1305)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsPoly1305_init(LibOrgBouncycastleCryptoMacsPoly1305 *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsPoly1305 *new_LibOrgBouncycastleCryptoMacsPoly1305_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsPoly1305 *create_LibOrgBouncycastleCryptoMacsPoly1305_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsPoly1305_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoMacsPoly1305 *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsPoly1305 *new_LibOrgBouncycastleCryptoMacsPoly1305_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsPoly1305 *create_LibOrgBouncycastleCryptoMacsPoly1305_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoMacsPoly1305)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Poly1305_H
