//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/G3413CFBBlockCipher.java
//

#include "Arrays.h"
#include "BlockCipher.h"
#include "CipherParameters.h"
#include "G3413CFBBlockCipher.h"
#include "GOST3413CipherUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithIV.h"
#include "StreamBlockCipher.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoModesG3413CFBBlockCipher () {
 @public
  jint s_;
  jint m_;
  jint blockSize_;
  IOSByteArray *R_;
  IOSByteArray *R_init_;
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_G3413CFBBlockCipher_;
  jboolean forEncryption_;
  jboolean initialized_;
  IOSByteArray *gamma_;
  IOSByteArray *inBuf_;
  jint byteCount_;
}

- (void)initArrays OBJC_METHOD_FAMILY_NONE;

- (void)setupDefaultParams;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, R_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, R_init_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, cipher_G3413CFBBlockCipher_, id<LibOrgBouncycastleCryptoBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, gamma_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, inBuf_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initArrays(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_setupDefaultParams(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *self);

@implementation LibOrgBouncycastleCryptoModesG3413CFBBlockCipher

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                    withInt:(jint)bitBlockSize {
  LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, bitBlockSize);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  self->forEncryption_ = forEncryption;
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithIV *ivParam = (LibOrgBouncycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    if (((IOSByteArray *) nil_chk(iv))->size_ < blockSize_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Parameter m must blockSize <= m");
    }
    m_ = iv->size_;
    LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initArrays(self);
    R_init_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(iv);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R_init_, 0, R_, 0, ((IOSByteArray *) nil_chk(R_init_))->size_);
    if ([ivParam getParameters] != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CFBBlockCipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:[ivParam getParameters]];
    }
  }
  else {
    LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_setupDefaultParams(self);
    LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initArrays(self);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R_init_, 0, R_, 0, ((IOSByteArray *) nil_chk(R_init_))->size_);
    if (params != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CFBBlockCipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:params];
    }
  }
  initialized_ = true;
}

- (void)initArrays {
  LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initArrays(self);
}

- (void)setupDefaultParams {
  LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_setupDefaultParams(self);
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$I", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CFBBlockCipher_)) getAlgorithmName], @"/CFB", (blockSize_ * 8));
}

- (jint)getBlockSize {
  return s_;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:[self getBlockSize] withByteArray:outArg withInt:outOff];
  return [self getBlockSize];
}

- (jbyte)calculateByteWithByte:(jbyte)inArg {
  if (byteCount_ == 0) {
    gamma_ = [self createGamma];
  }
  jbyte rv = (jbyte) (IOSByteArray_Get(nil_chk(gamma_), byteCount_) ^ inArg);
  *IOSByteArray_GetRef(nil_chk(inBuf_), byteCount_++) = (forEncryption_) ? rv : inArg;
  if (byteCount_ == [self getBlockSize]) {
    byteCount_ = 0;
    [self generateRWithByteArray:inBuf_];
  }
  return rv;
}

- (IOSByteArray *)createGamma {
  IOSByteArray *msb = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_MSBWithByteArray_withInt_(R_, blockSize_);
  IOSByteArray *encryptedMsb = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(msb))->size_];
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CFBBlockCipher_)) processBlockWithByteArray:msb withInt:0 withByteArray:encryptedMsb withInt:0];
  return LibOrgBouncycastleCryptoModesGOST3413CipherUtil_MSBWithByteArray_withInt_(encryptedMsb, s_);
}

- (void)generateRWithByteArray:(IOSByteArray *)C {
  IOSByteArray *buf = LibOrgBouncycastleCryptoModesGOST3413CipherUtil_LSBWithByteArray_withInt_(R_, m_ - s_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, R_, 0, ((IOSByteArray *) nil_chk(buf))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(C, 0, R_, buf->size_, m_ - buf->size_);
}

- (void)reset {
  byteCount_ = 0;
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(inBuf_);
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(gamma_);
  if (initialized_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R_init_, 0, R_, 0, ((IOSByteArray *) nil_chk(R_init_))->size_);
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CFBBlockCipher_)) reset];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "B", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withInt:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(initArrays);
  methods[4].selector = @selector(setupDefaultParams);
  methods[5].selector = @selector(getAlgorithmName);
  methods[6].selector = @selector(getBlockSize);
  methods[7].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(calculateByteWithByte:);
  methods[9].selector = @selector(createGamma);
  methods[10].selector = @selector(generateRWithByteArray:);
  methods[11].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "R_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "R_init_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_G3413CFBBlockCipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, 12, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gamma_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inBuf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "byteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "LLibOrgBouncycastleCryptoBlockCipher;I", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "calculateByte", "B", "generateR", "[B", "cipher" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesG3413CFBBlockCipher = { "G3413CFBBlockCipher", "lib.org.bouncycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 12, 11, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesG3413CFBBlockCipher;
}

@end

void LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8);
}

LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *new_LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *create_LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

void LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  LibOrgBouncycastleCryptoStreamBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  self->initialized_ = false;
  if (bitBlockSize < 0 || bitBlockSize > [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Parameter bitBlockSize must be in range 0 < bitBlockSize <= ", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8));
  }
  self->blockSize_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  self->cipher_G3413CFBBlockCipher_ = cipher;
  self->s_ = bitBlockSize / 8;
  self->inBuf_ = [IOSByteArray newArrayWithLength:[self getBlockSize]];
}

LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *new_LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, bitBlockSize)
}

LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *create_LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, bitBlockSize)
}

void LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_initArrays(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *self) {
  self->R_ = [IOSByteArray newArrayWithLength:self->m_];
  self->R_init_ = [IOSByteArray newArrayWithLength:self->m_];
}

void LibOrgBouncycastleCryptoModesG3413CFBBlockCipher_setupDefaultParams(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher *self) {
  self->m_ = 2 * self->blockSize_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesG3413CFBBlockCipher)
