//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/BaseStreamCipher.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCPBEKey.h"
#include "BaseStreamCipher.h"
#include "BaseWrapCipher.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "DataLengthException.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "PBE.h"
#include "PKCS12Key.h"
#include "PKCS12KeyWithParameters.h"
#include "ParametersWithIV.h"
#include "StreamCipher.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/Key.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/NoSuchPaddingException.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/ShortBufferException.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"
#include "javax/crypto/spec/RC2ParameterSpec.h"
#include "javax/crypto/spec/RC5ParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher () {
 @public
  IOSObjectArray *availableSpecs_BaseStreamCipher_;
  id<LibOrgBouncycastleCryptoStreamCipher> cipher_;
  jint keySizeInBits_;
  jint digest_;
  LibOrgBouncycastleCryptoParamsParametersWithIV *ivParam_;
  jint ivLength_;
  JavaxCryptoSpecPBEParameterSpec *pbeSpec_;
  NSString *pbeAlgorithm_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, availableSpecs_BaseStreamCipher_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, cipher_, id<LibOrgBouncycastleCryptoStreamCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, ivParam_, LibOrgBouncycastleCryptoParamsParametersWithIV *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, pbeSpec_, JavaxCryptoSpecPBEParameterSpec *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, pbeAlgorithm_, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher

- (instancetype)initWithLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)engine
                                                     withInt:(jint)ivLength {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(self, engine, ivLength);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)engine
                                                     withInt:(jint)ivLength
                                                     withInt:(jint)keySizeInBits
                                                     withInt:(jint)digest {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_(self, engine, ivLength, keySizeInBits, digest);
  return self;
}

- (jint)engineGetBlockSize {
  return 0;
}

- (IOSByteArray *)engineGetIV {
  return (ivParam_ != nil) ? [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam_)) getIV] : nil;
}

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  return ((IOSByteArray *) nil_chk([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]))->size_ * 8;
}

- (jint)engineGetOutputSizeWithInt:(jint)inputLen {
  return inputLen;
}

- (JavaSecurityAlgorithmParameters *)engineGetParameters {
  if (engineParams_ == nil) {
    if (pbeSpec_ != nil) {
      @try {
        JavaSecurityAlgorithmParameters *engineParams = [self createParametersInstanceWithNSString:pbeAlgorithm_];
        [((JavaSecurityAlgorithmParameters *) nil_chk(engineParams)) init__WithJavaSecuritySpecAlgorithmParameterSpec:pbeSpec_];
        return engineParams;
      }
      @catch (JavaLangException *e) {
        return nil;
      }
    }
    else if (ivParam_ != nil) {
      NSString *name = [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) getAlgorithmName];
      if ([((NSString *) nil_chk(name)) java_indexOf:'/'] >= 0) {
        name = [name java_substring:0 endIndex:[name java_indexOf:'/']];
      }
      if ([((NSString *) nil_chk(name)) java_hasPrefix:@"ChaCha7539"]) {
        name = @"ChaCha7539";
      }
      else if ([name java_hasPrefix:@"Grain"]) {
        name = @"Grainv1";
      }
      else if ([name java_hasPrefix:@"HC"]) {
        jint endIndex = [name java_indexOf:'-'];
        name = JreStrcat("$$", [name java_substring:0 endIndex:endIndex], [name java_substring:endIndex + 1]);
      }
      @try {
        engineParams_ = [self createParametersInstanceWithNSString:name];
        [((JavaSecurityAlgorithmParameters *) nil_chk(engineParams_)) init__WithJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam_)) getIV])];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaLangRuntimeException_initWithNSString_([e description]);
      }
    }
  }
  return engineParams_;
}

- (void)engineSetModeWithNSString:(NSString *)mode {
  if (!([((NSString *) nil_chk(mode)) java_equalsIgnoreCase:@"ECB"] || [mode isEqual:@"NONE"])) {
    @throw new_JavaSecurityNoSuchAlgorithmException_initWithNSString_(JreStrcat("$$", @"can't support mode ", mode));
  }
}

- (void)engineSetPaddingWithNSString:(NSString *)padding {
  if (![((NSString *) nil_chk(padding)) java_equalsIgnoreCase:@"NoPadding"]) {
    @throw new_JavaxCryptoNoSuchPaddingException_initWithNSString_(JreStrcat("$$$", @"Padding ", padding, @" unknown."));
  }
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  self->pbeSpec_ = nil;
  self->pbeAlgorithm_ = nil;
  self->engineParams_ = nil;
  if (!([JavaxCryptoSecretKey_class_() isInstance:key])) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$", @"Key for algorithm ", [((id<JavaSecurityKey>) nil_chk(key)) getAlgorithm], @" not suitable for symmetric enryption."));
  }
  if ([key isKindOfClass:[LibOrgBouncycastleJcajcePKCS12Key class]]) {
    LibOrgBouncycastleJcajcePKCS12Key *k = (LibOrgBouncycastleJcajcePKCS12Key *) key;
    pbeSpec_ = (JavaxCryptoSpecPBEParameterSpec *) cast_chk(params, [JavaxCryptoSpecPBEParameterSpec class]);
    if ([k isKindOfClass:[LibOrgBouncycastleJcajcePKCS12KeyWithParameters class]] && pbeSpec_ == nil) {
      pbeSpec_ = new_JavaxCryptoSpecPBEParameterSpec_initWithByteArray_withInt_([((LibOrgBouncycastleJcajcePKCS12KeyWithParameters *) nil_chk(((LibOrgBouncycastleJcajcePKCS12KeyWithParameters *) cast_chk(k, [LibOrgBouncycastleJcajcePKCS12KeyWithParameters class])))) getSalt], [((LibOrgBouncycastleJcajcePKCS12KeyWithParameters *) nil_chk(((LibOrgBouncycastleJcajcePKCS12KeyWithParameters *) cast_chk(k, [LibOrgBouncycastleJcajcePKCS12KeyWithParameters class])))) getIterationCount]);
    }
    param = LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_Util_makePBEParametersWithByteArray_withInt_withInt_withInt_withInt_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_([((LibOrgBouncycastleJcajcePKCS12Key *) nil_chk(k)) getEncoded], LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_PKCS12, digest_, keySizeInBits_, ivLength_ * 8, pbeSpec_, [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) getAlgorithmName]);
  }
  else if ([key isKindOfClass:[LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey class]]) {
    LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *k = (LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *) key;
    if ([((LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *) nil_chk(k)) getOID] != nil) {
      pbeAlgorithm_ = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([k getOID])) getId];
    }
    else {
      pbeAlgorithm_ = [k getAlgorithm];
    }
    if ([k getParam] != nil) {
      param = [k getParam];
      pbeSpec_ = new_JavaxCryptoSpecPBEParameterSpec_initWithByteArray_withInt_([k getSalt], [k getIterationCount]);
    }
    else if ([params isKindOfClass:[JavaxCryptoSpecPBEParameterSpec class]]) {
      param = LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_Util_makePBEParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_(k, params, [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) getAlgorithmName]);
      pbeSpec_ = (JavaxCryptoSpecPBEParameterSpec *) params;
    }
    else {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"PBE requires PBE parameters to be set.");
    }
    if ([k getIvSize] != 0) {
      ivParam_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
    }
  }
  else if (params == nil) {
    if (digest_ > 0) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Algorithm requires a PBE key");
    }
    param = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]);
  }
  else if ([params isKindOfClass:[JavaxCryptoSpecIvParameterSpec class]]) {
    param = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]), [((JavaxCryptoSpecIvParameterSpec *) params) getIV]);
    ivParam_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"unknown parameter type.");
  }
  if ((ivLength_ != 0) && !([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]])) {
    JavaSecuritySecureRandom *ivRandom = random;
    if (ivRandom == nil) {
      ivRandom = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
    }
    if ((opmode == JavaxCryptoCipher_ENCRYPT_MODE) || (opmode == JavaxCryptoCipher_WRAP_MODE)) {
      IOSByteArray *iv = [IOSByteArray newArrayWithLength:ivLength_];
      [((JavaSecuritySecureRandom *) nil_chk(ivRandom)) nextBytesWithByteArray:iv];
      param = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(param, iv);
      ivParam_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
    }
    else {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"no IV set when one expected");
    }
  }
  @try {
    switch (opmode) {
      case JavaxCryptoCipher_ENCRYPT_MODE:
      case JavaxCryptoCipher_WRAP_MODE:
      [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param];
      break;
      case JavaxCryptoCipher_DECRYPT_MODE:
      case JavaxCryptoCipher_UNWRAP_MODE:
      [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param];
      break;
      default:
      @throw new_JavaSecurityInvalidParameterException_initWithNSString_(JreStrcat("$I$", @"unknown opmode ", opmode, @" passed"));
    }
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e getMessage]);
  }
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  id<JavaSecuritySpecAlgorithmParameterSpec> paramSpec = nil;
  if (params != nil) {
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(availableSpecs_BaseStreamCipher_))->size_; i++) {
      @try {
        paramSpec = [params getParameterSpecWithIOSClass:IOSObjectArray_Get(availableSpecs_BaseStreamCipher_, i)];
        break;
      }
      @catch (JavaLangException *e) {
        continue;
      }
    }
    if (paramSpec == nil) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"can't handle parameter ", [params description]));
    }
  }
  [self engineInitWithInt:opmode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:paramSpec withJavaSecuritySecureRandom:random];
  engineParams_ = params;
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    [self engineInitWithInt:opmode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:nil withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e getMessage]);
  }
}

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen {
  IOSByteArray *out = [IOSByteArray newArrayWithLength:inputLen];
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) processBytesWithByteArray:input withInt:inputOffset withInt:inputLen withByteArray:out withInt:0];
  return out;
}

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset {
  if (outputOffset + inputLen > ((IOSByteArray *) nil_chk(output))->size_) {
    @throw new_JavaxCryptoShortBufferException_initWithNSString_(@"output buffer too short for input.");
  }
  @try {
    [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) processBytesWithByteArray:input withInt:inputOffset withInt:inputLen withByteArray:output withInt:outputOffset];
    return inputLen;
  }
  @catch (LibOrgBouncycastleCryptoDataLengthException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_([e getMessage]);
  }
}

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen {
  if (inputLen != 0) {
    IOSByteArray *out = [self engineUpdateWithByteArray:input withInt:inputOffset withInt:inputLen];
    [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) reset];
    return out;
  }
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) reset];
  return [IOSByteArray newArrayWithLength:0];
}

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset {
  if (outputOffset + inputLen > ((IOSByteArray *) nil_chk(output))->size_) {
    @throw new_JavaxCryptoShortBufferException_initWithNSString_(@"output buffer too short for input.");
  }
  if (inputLen != 0) {
    [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) processBytesWithByteArray:input withInt:inputOffset withInt:inputLen withByteArray:output withInt:outputOffset];
  }
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher_)) reset];
  return inputLen;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 7, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 14, 13, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 15, 16, -1, -1, -1 },
    { NULL, "[B", 0x4, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 17, 19, 20, -1, -1, -1 },
    { NULL, "[B", 0x4, 21, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 21, 19, 20, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoStreamCipher:withInt:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoStreamCipher:withInt:withInt:withInt:);
  methods[2].selector = @selector(engineGetBlockSize);
  methods[3].selector = @selector(engineGetIV);
  methods[4].selector = @selector(engineGetKeySizeWithJavaSecurityKey:);
  methods[5].selector = @selector(engineGetOutputSizeWithInt:);
  methods[6].selector = @selector(engineGetParameters);
  methods[7].selector = @selector(engineSetModeWithNSString:);
  methods[8].selector = @selector(engineSetPaddingWithNSString:);
  methods[9].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[10].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecurityAlgorithmParameters:withJavaSecuritySecureRandom:);
  methods[11].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[12].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(engineUpdateWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[14].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:);
  methods[15].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "availableSpecs_BaseStreamCipher_", "[LIOSClass;", .constantValue.asLong = 0, 0x2, 22, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoStreamCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySizeInBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digest_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ivParam_", "LLibOrgBouncycastleCryptoParamsParametersWithIV;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ivLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pbeSpec_", "LJavaxCryptoSpecPBEParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pbeAlgorithm_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoStreamCipher;I", "LLibOrgBouncycastleCryptoStreamCipher;III", "engineGetKeySize", "LJavaSecurityKey;", "engineGetOutputSize", "I", "engineSetMode", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;", "engineSetPadding", "LJavaxCryptoNoSuchPaddingException;", "engineInit", "ILJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "ILJavaSecurityKey;LJavaSecurityAlgorithmParameters;LJavaSecuritySecureRandom;", "ILJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "engineUpdate", "[BII", "[BII[BI", "LJavaxCryptoShortBufferException;", "engineDoFinal", "availableSpecs" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher = { "BaseStreamCipher", "lib.org.bouncycastle.jcajce.provider.symmetric.util", ptrTable, methods, fields, 7, 0x1, 16, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *self, id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_(self, engine, ivLength, -1, -1);
}

LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, initWithLibOrgBouncycastleCryptoStreamCipher_withInt_, engine, ivLength)
}

LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, initWithLibOrgBouncycastleCryptoStreamCipher_withInt_, engine, ivLength)
}

void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *self, id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength, jint keySizeInBits, jint digest) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_init(self);
  self->availableSpecs_BaseStreamCipher_ = [IOSObjectArray newArrayWithObjects:(id[]){ JavaxCryptoSpecRC2ParameterSpec_class_(), JavaxCryptoSpecRC5ParameterSpec_class_(), JavaxCryptoSpecIvParameterSpec_class_(), JavaxCryptoSpecPBEParameterSpec_class_() } count:4 type:IOSClass_class_()];
  self->ivLength_ = 0;
  self->pbeSpec_ = nil;
  self->pbeAlgorithm_ = nil;
  self->cipher_ = engine;
  self->ivLength_ = ivLength;
  self->keySizeInBits_ = keySizeInBits;
  self->digest_ = digest;
}

LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength, jint keySizeInBits, jint digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_, engine, ivLength, keySizeInBits, digest)
}

LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength, jint keySizeInBits, jint digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher, initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_, engine, ivLength, keySizeInBits, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher)
