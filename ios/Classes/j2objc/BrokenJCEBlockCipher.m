//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/BrokenJCEBlockCipher.java
//

#include "BCPBEKey.h"
#include "BlockCipher.h"
#include "BouncyCastleProvider.h"
#include "BrokenJCEBlockCipher.h"
#include "BrokenPBE.h"
#include "BufferedBlockCipher.h"
#include "CBCBlockCipher.h"
#include "CFBBlockCipher.h"
#include "CTSBlockCipher.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "DESEngine.h"
#include "DESedeEngine.h"
#include "DataLengthException.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OFBBlockCipher.h"
#include "PaddedBufferedBlockCipher.h"
#include "ParametersWithIV.h"
#include "RC2Parameters.h"
#include "RC5Parameters.h"
#include "Strings.h"
#include "TwofishEngine.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/KeyFactory.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/IllegalBlockSizeException.h"
#include "javax/crypto/NoSuchPaddingException.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"
#include "javax/crypto/spec/RC2ParameterSpec.h"
#include "javax/crypto/spec/RC5ParameterSpec.h"
#include "javax/crypto/spec/SecretKeySpec.h"

@interface LibOrgBouncycastleJceProviderBrokenJCEBlockCipher () {
 @public
  IOSObjectArray *availableSpecs_;
  LibOrgBouncycastleCryptoBufferedBlockCipher *cipher_;
  LibOrgBouncycastleCryptoParamsParametersWithIV *ivParam_;
  jint pbeType_;
  jint pbeHash_;
  jint pbeKeySize_;
  jint pbeIvSize_;
  jint ivLength_;
  JavaSecurityAlgorithmParameters *engineParams_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher, availableSpecs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher, cipher_, LibOrgBouncycastleCryptoBufferedBlockCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher, ivParam_, LibOrgBouncycastleCryptoParamsParametersWithIV *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher, engineParams_, JavaSecurityAlgorithmParameters *)

@implementation LibOrgBouncycastleJceProviderBrokenJCEBlockCipher

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, engine);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                    withInt:(jint)pbeType
                                                    withInt:(jint)pbeHash
                                                    withInt:(jint)pbeKeySize
                                                    withInt:(jint)pbeIvSize {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(self, engine, pbeType, pbeHash, pbeKeySize, pbeIvSize);
  return self;
}

- (jint)engineGetBlockSize {
  return [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getBlockSize];
}

- (IOSByteArray *)engineGetIV {
  return (ivParam_ != nil) ? [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam_)) getIV] : nil;
}

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  return ((IOSByteArray *) nil_chk([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]))->size_;
}

- (jint)engineGetOutputSizeWithInt:(jint)inputLen {
  return [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getOutputSizeWithInt:inputLen];
}

- (JavaSecurityAlgorithmParameters *)engineGetParameters {
  if (engineParams_ == nil) {
    if (ivParam_ != nil) {
      NSString *name = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher])) getAlgorithmName];
      if ([((NSString *) nil_chk(name)) java_indexOf:'/'] >= 0) {
        name = [name java_substring:0 endIndex:[name java_indexOf:'/']];
      }
      @try {
        engineParams_ = JavaSecurityAlgorithmParameters_getInstanceWithNSString_withNSString_(name, LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
        [((JavaSecurityAlgorithmParameters *) nil_chk(engineParams_)) init__WithByteArray:[((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam_)) getIV]];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaLangRuntimeException_initWithNSString_([e description]);
      }
    }
  }
  return engineParams_;
}

- (void)engineSetModeWithNSString:(NSString *)mode {
  NSString *modeName = LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_(mode);
  if ([((NSString *) nil_chk(modeName)) isEqual:@"ECB"]) {
    ivLength_ = 0;
    cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher]);
  }
  else if ([modeName isEqual:@"CBC"]) {
    ivLength_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher])) getBlockSize];
    cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher]));
  }
  else if ([modeName java_hasPrefix:@"OFB"]) {
    ivLength_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher])) getBlockSize];
    if ([modeName java_length] != 3) {
      jint wordSize = JavaLangInteger_parseIntWithNSString_([modeName java_substring:3]);
      cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher], wordSize));
    }
    else {
      cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher], 8 * [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getBlockSize]));
    }
  }
  else if ([modeName java_hasPrefix:@"CFB"]) {
    ivLength_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher])) getBlockSize];
    if ([modeName java_length] != 3) {
      jint wordSize = JavaLangInteger_parseIntWithNSString_([modeName java_substring:3]);
      cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher], wordSize));
    }
    else {
      cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher], 8 * [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getBlockSize]));
    }
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"can't support mode ", mode));
  }
}

- (void)engineSetPaddingWithNSString:(NSString *)padding {
  NSString *paddingName = LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_(padding);
  if ([((NSString *) nil_chk(paddingName)) isEqual:@"NOPADDING"]) {
    cipher_ = new_LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher]);
  }
  else if ([paddingName isEqual:@"PKCS5PADDING"] || [paddingName isEqual:@"PKCS7PADDING"] || [paddingName isEqual:@"ISO10126PADDING"]) {
    cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher]);
  }
  else if ([paddingName isEqual:@"WITHCTS"]) {
    cipher_ = new_LibOrgBouncycastleCryptoModesCTSBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher]);
  }
  else {
    @throw new_JavaxCryptoNoSuchPaddingException_initWithNSString_(JreStrcat("$$$", @"Padding ", padding, @" unknown."));
  }
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  if ([key isKindOfClass:[LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey class]]) {
    param = LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withInt_withInt_withNSString_withInt_withInt_((LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *) key, params, pbeType_, pbeHash_, [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk([((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUnderlyingCipher])) getAlgorithmName], pbeKeySize_, pbeIvSize_);
    if (pbeIvSize_ != 0) {
      ivParam_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
    }
  }
  else if (params == nil) {
    param = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]);
  }
  else if ([params isKindOfClass:[JavaxCryptoSpecIvParameterSpec class]]) {
    if (ivLength_ != 0) {
      param = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]), [((JavaxCryptoSpecIvParameterSpec *) params) getIV]);
      ivParam_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
    }
    else {
      param = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]);
    }
  }
  else if ([params isKindOfClass:[JavaxCryptoSpecRC2ParameterSpec class]]) {
    JavaxCryptoSpecRC2ParameterSpec *rc2Param = (JavaxCryptoSpecRC2ParameterSpec *) params;
    param = new_LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded], [((JavaxCryptoSpecRC2ParameterSpec *) params) getEffectiveKeyBits]);
    if ([rc2Param getIV] != nil && ivLength_ != 0) {
      param = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(param, [rc2Param getIV]);
      ivParam_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
    }
  }
  else if ([params isKindOfClass:[JavaxCryptoSpecRC5ParameterSpec class]]) {
    JavaxCryptoSpecRC5ParameterSpec *rc5Param = (JavaxCryptoSpecRC5ParameterSpec *) params;
    param = new_LibOrgBouncycastleCryptoParamsRC5Parameters_initWithByteArray_withInt_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded], [((JavaxCryptoSpecRC5ParameterSpec *) params) getRounds]);
    if ([rc5Param getWordSize] != 32) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"can only accept RC5 word size 32 (at the moment...)");
    }
    if (([rc5Param getIV] != nil) && (ivLength_ != 0)) {
      param = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(param, [rc5Param getIV]);
      ivParam_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
    }
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"unknown parameter type.");
  }
  if ((ivLength_ != 0) && !([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]])) {
    if (random == nil) {
      random = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
    }
    if ((opmode == JavaxCryptoCipher_ENCRYPT_MODE) || (opmode == JavaxCryptoCipher_WRAP_MODE)) {
      IOSByteArray *iv = [IOSByteArray newArrayWithLength:ivLength_];
      [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:iv];
      param = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(param, iv);
      ivParam_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
    }
    else {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"no IV set when one expected");
    }
  }
  switch (opmode) {
    case JavaxCryptoCipher_ENCRYPT_MODE:
    case JavaxCryptoCipher_WRAP_MODE:
    [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param];
    break;
    case JavaxCryptoCipher_DECRYPT_MODE:
    case JavaxCryptoCipher_UNWRAP_MODE:
    [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param];
    break;
    default:
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"eeek!"];
  }
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  id<JavaSecuritySpecAlgorithmParameterSpec> paramSpec = nil;
  if (params != nil) {
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(availableSpecs_))->size_; i++) {
      @try {
        paramSpec = [params getParameterSpecWithIOSClass:IOSObjectArray_Get(availableSpecs_, i)];
        break;
      }
      @catch (JavaLangException *e) {
        continue;
      }
    }
    if (paramSpec == nil) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"can't handle parameter ", [params description]));
    }
  }
  engineParams_ = params;
  [self engineInitWithInt:opmode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:paramSpec withJavaSecuritySecureRandom:random];
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    [self engineInitWithInt:opmode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:nil withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_([e getMessage]);
  }
}

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen {
  jint length = [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) getUpdateOutputSizeWithInt:inputLen];
  if (length > 0) {
    IOSByteArray *out = [IOSByteArray newArrayWithLength:length];
    [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) processBytesWithByteArray:input withInt:inputOffset withInt:inputLen withByteArray:out withInt:0];
    return out;
  }
  [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) processBytesWithByteArray:input withInt:inputOffset withInt:inputLen withByteArray:nil withInt:0];
  return nil;
}

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset {
  return [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) processBytesWithByteArray:input withInt:inputOffset withInt:inputLen withByteArray:output withInt:outputOffset];
}

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen {
  jint len = 0;
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:[self engineGetOutputSizeWithInt:inputLen]];
  if (inputLen != 0) {
    len = [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) processBytesWithByteArray:input withInt:inputOffset withInt:inputLen withByteArray:tmp withInt:0];
  }
  @try {
    len += [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) doFinalWithByteArray:tmp withInt:len];
  }
  @catch (LibOrgBouncycastleCryptoDataLengthException *e) {
    @throw new_JavaxCryptoIllegalBlockSizeException_initWithNSString_([e getMessage]);
  }
  @catch (LibOrgBouncycastleCryptoInvalidCipherTextException *e) {
    @throw new_JavaxCryptoBadPaddingException_initWithNSString_([e getMessage]);
  }
  IOSByteArray *out = [IOSByteArray newArrayWithLength:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmp, 0, out, 0, len);
  return out;
}

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset {
  jint len = 0;
  if (inputLen != 0) {
    len = [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) processBytesWithByteArray:input withInt:inputOffset withInt:inputLen withByteArray:output withInt:outputOffset];
  }
  @try {
    return len + [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) doFinalWithByteArray:output withInt:outputOffset + len];
  }
  @catch (LibOrgBouncycastleCryptoDataLengthException *e) {
    @throw new_JavaxCryptoIllegalBlockSizeException_initWithNSString_([e getMessage]);
  }
  @catch (LibOrgBouncycastleCryptoInvalidCipherTextException *e) {
    @throw new_JavaxCryptoBadPaddingException_initWithNSString_([e getMessage]);
  }
}

- (IOSByteArray *)engineWrapWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  IOSByteArray *encoded = [((id<JavaSecurityKey>) nil_chk(key)) getEncoded];
  if (encoded == nil) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Cannot wrap key, null encoding.");
  }
  @try {
    return [self engineDoFinalWithByteArray:encoded withInt:0 withInt:encoded->size_];
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_JavaxCryptoIllegalBlockSizeException_initWithNSString_([e getMessage]);
  }
}

- (id<JavaSecurityKey>)engineUnwrapWithByteArray:(IOSByteArray *)wrappedKey
                                    withNSString:(NSString *)wrappedKeyAlgorithm
                                         withInt:(jint)wrappedKeyType {
  IOSByteArray *encoded = nil;
  @try {
    encoded = [self engineDoFinalWithByteArray:wrappedKey withInt:0 withInt:((IOSByteArray *) nil_chk(wrappedKey))->size_];
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e getMessage]);
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e2) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e2 getMessage]);
  }
  if (wrappedKeyType == JavaxCryptoCipher_SECRET_KEY) {
    return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(encoded, wrappedKeyAlgorithm);
  }
  else {
    @try {
      JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_withNSString_(wrappedKeyAlgorithm, LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
      if (wrappedKeyType == JavaxCryptoCipher_PUBLIC_KEY) {
        return [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePublicWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_(encoded)];
      }
      else if (wrappedKeyType == JavaxCryptoCipher_PRIVATE_KEY) {
        return [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePrivateWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_(encoded)];
      }
    }
    @catch (JavaSecurityNoSuchProviderException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"Unknown key type ", [e getMessage]));
    }
    @catch (JavaSecurityNoSuchAlgorithmException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"Unknown key type ", [e getMessage]));
    }
    @catch (JavaSecuritySpecInvalidKeySpecException *e2) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"Unknown key type ", [e2 getMessage]));
    }
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$I", @"Unknown key type ", wrappedKeyType));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 7, 9, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 13, 12, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 14, 15, -1, -1, -1 },
    { NULL, "[B", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 16, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 19, 17, 20, -1, -1, -1 },
    { NULL, "I", 0x4, 19, 18, 20, -1, -1, -1 },
    { NULL, "[B", 0x4, 21, 3, 22, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 23, 24, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(engineGetBlockSize);
  methods[3].selector = @selector(engineGetIV);
  methods[4].selector = @selector(engineGetKeySizeWithJavaSecurityKey:);
  methods[5].selector = @selector(engineGetOutputSizeWithInt:);
  methods[6].selector = @selector(engineGetParameters);
  methods[7].selector = @selector(engineSetModeWithNSString:);
  methods[8].selector = @selector(engineSetPaddingWithNSString:);
  methods[9].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[10].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecurityAlgorithmParameters:withJavaSecuritySecureRandom:);
  methods[11].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[12].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(engineUpdateWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[14].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:);
  methods[15].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[16].selector = @selector(engineWrapWithJavaSecurityKey:);
  methods[17].selector = @selector(engineUnwrapWithByteArray:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "availableSpecs_", "[LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoBufferedBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ivParam_", "LLibOrgBouncycastleCryptoParamsParametersWithIV;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pbeType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pbeHash_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pbeKeySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pbeIvSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ivLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "engineParams_", "LJavaSecurityAlgorithmParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "LLibOrgBouncycastleCryptoBlockCipher;IIII", "engineGetKeySize", "LJavaSecurityKey;", "engineGetOutputSize", "I", "engineSetMode", "LNSString;", "engineSetPadding", "LJavaxCryptoNoSuchPaddingException;", "engineInit", "ILJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "ILJavaSecurityKey;LJavaSecurityAlgorithmParameters;LJavaSecuritySecureRandom;", "ILJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "engineUpdate", "[BII", "[BII[BI", "engineDoFinal", "LJavaxCryptoIllegalBlockSizeException;LJavaxCryptoBadPaddingException;", "engineWrap", "LJavaxCryptoIllegalBlockSizeException;LJavaSecurityInvalidKeyException;", "engineUnwrap", "[BLNSString;I", "LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES;LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES;LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key;LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key;LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key;LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenJCEBlockCipher = { "BrokenJCEBlockCipher", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 18, 9, -1, 25, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher;
}

@end

void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> engine) {
  NSObject_init(self);
  self->availableSpecs_ = [IOSObjectArray newArrayWithObjects:(id[]){ JavaxCryptoSpecIvParameterSpec_class_(), JavaxCryptoSpecPBEParameterSpec_class_(), JavaxCryptoSpecRC2ParameterSpec_class_(), JavaxCryptoSpecRC5ParameterSpec_class_() } count:4 type:IOSClass_class_()];
  self->pbeType_ = LibOrgBouncycastleJceProviderBrokenPBE_PKCS12;
  self->pbeHash_ = LibOrgBouncycastleJceProviderBrokenPBE_SHA1;
  self->ivLength_ = 0;
  self->engineParams_ = nil;
  self->cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(engine);
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> engine) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, engine)
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> engine) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, engine)
}

void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> engine, jint pbeType, jint pbeHash, jint pbeKeySize, jint pbeIvSize) {
  NSObject_init(self);
  self->availableSpecs_ = [IOSObjectArray newArrayWithObjects:(id[]){ JavaxCryptoSpecIvParameterSpec_class_(), JavaxCryptoSpecPBEParameterSpec_class_(), JavaxCryptoSpecRC2ParameterSpec_class_(), JavaxCryptoSpecRC5ParameterSpec_class_() } count:4 type:IOSClass_class_()];
  self->pbeType_ = LibOrgBouncycastleJceProviderBrokenPBE_PKCS12;
  self->pbeHash_ = LibOrgBouncycastleJceProviderBrokenPBE_SHA1;
  self->ivLength_ = 0;
  self->engineParams_ = nil;
  self->cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(engine);
  self->pbeType_ = pbeType;
  self->pbeHash_ = pbeHash;
  self->pbeKeySize_ = pbeKeySize;
  self->pbeIvSize_ = pbeIvSize;
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jint pbeType, jint pbeHash, jint pbeKeySize, jint pbeIvSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_, engine, pbeType, pbeHash, pbeKeySize, pbeIvSize)
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jint pbeType, jint pbeHash, jint pbeKeySize, jint pbeIvSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_, engine, pbeType, pbeHash, pbeKeySize, pbeIvSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher)

@implementation LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES = { "BrokePBEWithMD5AndDES", "lib.org.bouncycastle.jce.provider", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES;
}

@end

void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES *self) {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESEngine_init()), LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S1, LibOrgBouncycastleJceProviderBrokenPBE_MD5, 64, 64);
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES, init)
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES)

@implementation LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES = { "BrokePBEWithSHA1AndDES", "lib.org.bouncycastle.jce.provider", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES;
}

@end

void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES *self) {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESEngine_init()), LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S1, LibOrgBouncycastleJceProviderBrokenPBE_SHA1, 64, 64);
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES, init)
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES)

@implementation LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key = { "BrokePBEWithSHAAndDES3Key", "lib.org.bouncycastle.jce.provider", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key;
}

@end

void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key *self) {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESedeEngine_init()), LibOrgBouncycastleJceProviderBrokenPBE_PKCS12, LibOrgBouncycastleJceProviderBrokenPBE_SHA1, 192, 64);
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key, init)
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key)

@implementation LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key = { "OldPBEWithSHAAndDES3Key", "lib.org.bouncycastle.jce.provider", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key;
}

@end

void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key *self) {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESedeEngine_init()), LibOrgBouncycastleJceProviderBrokenPBE_OLD_PKCS12, LibOrgBouncycastleJceProviderBrokenPBE_SHA1, 192, 64);
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key, init)
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key)

@implementation LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key = { "BrokePBEWithSHAAndDES2Key", "lib.org.bouncycastle.jce.provider", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key;
}

@end

void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key *self) {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESedeEngine_init()), LibOrgBouncycastleJceProviderBrokenPBE_PKCS12, LibOrgBouncycastleJceProviderBrokenPBE_SHA1, 128, 64);
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key, init)
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key)

@implementation LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJceProviderBrokenJCEBlockCipher;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish = { "OldPBEWithSHAAndTwofish", "lib.org.bouncycastle.jce.provider", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish;
}

@end

void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish *self) {
  LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesTwofishEngine_init()), LibOrgBouncycastleJceProviderBrokenPBE_OLD_PKCS12, LibOrgBouncycastleJceProviderBrokenPBE_SHA1, 256, 128);
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish, init)
}

LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish)
