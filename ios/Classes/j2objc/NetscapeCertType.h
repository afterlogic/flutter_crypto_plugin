//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/misc/NetscapeCertType.java
//

#ifndef NetscapeCertType_H
#define NetscapeCertType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DERBitString.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1MiscNetscapeCertType : LibOrgBouncycastleAsn1DERBitString
@property (readonly, class) jint sslClient NS_SWIFT_NAME(sslClient);
@property (readonly, class) jint sslServer NS_SWIFT_NAME(sslServer);
@property (readonly, class) jint smime NS_SWIFT_NAME(smime);
@property (readonly, class) jint objectSigning NS_SWIFT_NAME(objectSigning);
@property (readonly, class) jint reserved NS_SWIFT_NAME(reserved);
@property (readonly, class) jint sslCA NS_SWIFT_NAME(sslCA);
@property (readonly, class) jint smimeCA NS_SWIFT_NAME(smimeCA);
@property (readonly, class) jint objectSigningCA NS_SWIFT_NAME(objectSigningCA);

+ (jint)sslClient;

+ (jint)sslServer;

+ (jint)smime;

+ (jint)objectSigning;

+ (jint)reserved;

+ (jint)sslCA;

+ (jint)smimeCA;

+ (jint)objectSigningCA;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1DERBitString:(LibOrgBouncycastleAsn1DERBitString *)usage;

- (instancetype __nonnull)initWithInt:(jint)usage;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithByte:(jbyte)arg0
                               withInt:(jint)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)arg0
                                    withInt:(jint)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1MiscNetscapeCertType)

inline jint LibOrgBouncycastleAsn1MiscNetscapeCertType_get_sslClient(void);
#define LibOrgBouncycastleAsn1MiscNetscapeCertType_sslClient 128
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1MiscNetscapeCertType, sslClient, jint)

inline jint LibOrgBouncycastleAsn1MiscNetscapeCertType_get_sslServer(void);
#define LibOrgBouncycastleAsn1MiscNetscapeCertType_sslServer 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1MiscNetscapeCertType, sslServer, jint)

inline jint LibOrgBouncycastleAsn1MiscNetscapeCertType_get_smime(void);
#define LibOrgBouncycastleAsn1MiscNetscapeCertType_smime 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1MiscNetscapeCertType, smime, jint)

inline jint LibOrgBouncycastleAsn1MiscNetscapeCertType_get_objectSigning(void);
#define LibOrgBouncycastleAsn1MiscNetscapeCertType_objectSigning 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1MiscNetscapeCertType, objectSigning, jint)

inline jint LibOrgBouncycastleAsn1MiscNetscapeCertType_get_reserved(void);
#define LibOrgBouncycastleAsn1MiscNetscapeCertType_reserved 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1MiscNetscapeCertType, reserved, jint)

inline jint LibOrgBouncycastleAsn1MiscNetscapeCertType_get_sslCA(void);
#define LibOrgBouncycastleAsn1MiscNetscapeCertType_sslCA 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1MiscNetscapeCertType, sslCA, jint)

inline jint LibOrgBouncycastleAsn1MiscNetscapeCertType_get_smimeCA(void);
#define LibOrgBouncycastleAsn1MiscNetscapeCertType_smimeCA 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1MiscNetscapeCertType, smimeCA, jint)

inline jint LibOrgBouncycastleAsn1MiscNetscapeCertType_get_objectSigningCA(void);
#define LibOrgBouncycastleAsn1MiscNetscapeCertType_objectSigningCA 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1MiscNetscapeCertType, objectSigningCA, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1MiscNetscapeCertType_initWithInt_(LibOrgBouncycastleAsn1MiscNetscapeCertType *self, jint usage);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1MiscNetscapeCertType *new_LibOrgBouncycastleAsn1MiscNetscapeCertType_initWithInt_(jint usage) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1MiscNetscapeCertType *create_LibOrgBouncycastleAsn1MiscNetscapeCertType_initWithInt_(jint usage);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1MiscNetscapeCertType_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1MiscNetscapeCertType *self, LibOrgBouncycastleAsn1DERBitString *usage);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1MiscNetscapeCertType *new_LibOrgBouncycastleAsn1MiscNetscapeCertType_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1DERBitString *usage) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1MiscNetscapeCertType *create_LibOrgBouncycastleAsn1MiscNetscapeCertType_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1DERBitString *usage);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1MiscNetscapeCertType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // NetscapeCertType_H
