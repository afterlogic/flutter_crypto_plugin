//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsAEADCipher.java
//

#ifndef TlsAEADCipher_H
#define TlsAEADCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsCipher.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoModesAEADBlockCipher;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsTlsAEADCipher : NSObject < LibOrgBouncycastleCryptoTlsTlsCipher > {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsContext> context_;
  jint macSize_;
  jint record_iv_length_;
  id<LibOrgBouncycastleCryptoModesAEADBlockCipher> encryptCipher_;
  id<LibOrgBouncycastleCryptoModesAEADBlockCipher> decryptCipher_;
  IOSByteArray *encryptImplicitNonce_;
  IOSByteArray *decryptImplicitNonce_;
  jint nonceMode_;
}
@property (readonly, class) jint NONCE_RFC5288 NS_SWIFT_NAME(NONCE_RFC5288);
@property (readonly, class) jint NONCE_DRAFT_CHACHA20_POLY1305 NS_SWIFT_NAME(NONCE_DRAFT_CHACHA20_POLY1305);

+ (jint)NONCE_RFC5288;

+ (jint)NONCE_DRAFT_CHACHA20_POLY1305;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                       withLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)clientWriteCipher
                       withLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)serverWriteCipher
                                                                withInt:(jint)cipherKeySize
                                                                withInt:(jint)macSize;

- (IOSByteArray *)decodeCiphertextWithLong:(jlong)seqNo
                                 withShort:(jshort)type
                             withByteArray:(IOSByteArray *)ciphertext
                                   withInt:(jint)offset
                                   withInt:(jint)len;

- (IOSByteArray *)encodePlaintextWithLong:(jlong)seqNo
                                withShort:(jshort)type
                            withByteArray:(IOSByteArray *)plaintext
                                  withInt:(jint)offset
                                  withInt:(jint)len;

- (jint)getPlaintextLimitWithInt:(jint)ciphertextLimit;

#pragma mark Protected

- (IOSByteArray *)getAdditionalDataWithLong:(jlong)seqNo
                                  withShort:(jshort)type
                                    withInt:(jint)len;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                       withLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)clientWriteCipher
                       withLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)serverWriteCipher
                                                                withInt:(jint)cipherKeySize
                                                                withInt:(jint)macSize
                                                                withInt:(jint)nonceMode;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsAEADCipher)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsAEADCipher, context_, id<LibOrgBouncycastleCryptoTlsTlsContext>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsAEADCipher, encryptCipher_, id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsAEADCipher, decryptCipher_, id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsAEADCipher, encryptImplicitNonce_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsAEADCipher, decryptImplicitNonce_, IOSByteArray *)

inline jint LibOrgBouncycastleCryptoTlsTlsAEADCipher_get_NONCE_RFC5288(void);
#define LibOrgBouncycastleCryptoTlsTlsAEADCipher_NONCE_RFC5288 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsTlsAEADCipher, NONCE_RFC5288, jint)

inline jint LibOrgBouncycastleCryptoTlsTlsAEADCipher_get_NONCE_DRAFT_CHACHA20_POLY1305(void);
#define LibOrgBouncycastleCryptoTlsTlsAEADCipher_NONCE_DRAFT_CHACHA20_POLY1305 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsTlsAEADCipher, NONCE_DRAFT_CHACHA20_POLY1305, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsAEADCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_withInt_(LibOrgBouncycastleCryptoTlsTlsAEADCipher *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsAEADCipher *new_LibOrgBouncycastleCryptoTlsTlsAEADCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_withInt_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsAEADCipher *create_LibOrgBouncycastleCryptoTlsTlsAEADCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_withInt_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsAEADCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_withInt_withInt_(LibOrgBouncycastleCryptoTlsTlsAEADCipher *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize, jint nonceMode);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsAEADCipher *new_LibOrgBouncycastleCryptoTlsTlsAEADCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize, jint nonceMode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsAEADCipher *create_LibOrgBouncycastleCryptoTlsTlsAEADCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize, jint nonceMode);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsAEADCipher)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsAEADCipher_H
