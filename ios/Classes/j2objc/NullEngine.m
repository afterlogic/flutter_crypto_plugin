//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/NullEngine.java
//

#include "CipherParameters.h"
#include "DataLengthException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NullEngine.h"
#include "OutputLengthException.h"
#include "java/lang/IllegalStateException.h"

@interface LibOrgBouncycastleCryptoEnginesNullEngine () {
 @public
  jboolean initialised_;
  jint blockSize_;
}

@end

@implementation LibOrgBouncycastleCryptoEnginesNullEngine

+ (jint)DEFAULT_BLOCK_SIZE {
  return LibOrgBouncycastleCryptoEnginesNullEngine_DEFAULT_BLOCK_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesNullEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)blockSize {
  LibOrgBouncycastleCryptoEnginesNullEngine_initWithInt_(self, blockSize);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  self->initialised_ = true;
}

- (NSString *)getAlgorithmName {
  return @"Null";
}

- (jint)getBlockSize {
  return blockSize_;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (!initialised_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Null engine not initialised");
  }
  if ((inOff + blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + blockSize_) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  for (jint i = 0; i < blockSize_; ++i) {
    *IOSByteArray_GetRef(outArg, outOff + i) = IOSByteArray_Get(inArg, inOff + i);
  }
  return blockSize_;
}

- (void)reset {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_BLOCK_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesNullEngine_DEFAULT_BLOCK_SIZE, 0x1c, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesNullEngine = { "NullEngine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesNullEngine;
}

@end

void LibOrgBouncycastleCryptoEnginesNullEngine_init(LibOrgBouncycastleCryptoEnginesNullEngine *self) {
  LibOrgBouncycastleCryptoEnginesNullEngine_initWithInt_(self, LibOrgBouncycastleCryptoEnginesNullEngine_DEFAULT_BLOCK_SIZE);
}

LibOrgBouncycastleCryptoEnginesNullEngine *new_LibOrgBouncycastleCryptoEnginesNullEngine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesNullEngine, init)
}

LibOrgBouncycastleCryptoEnginesNullEngine *create_LibOrgBouncycastleCryptoEnginesNullEngine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesNullEngine, init)
}

void LibOrgBouncycastleCryptoEnginesNullEngine_initWithInt_(LibOrgBouncycastleCryptoEnginesNullEngine *self, jint blockSize) {
  NSObject_init(self);
  self->blockSize_ = blockSize;
}

LibOrgBouncycastleCryptoEnginesNullEngine *new_LibOrgBouncycastleCryptoEnginesNullEngine_initWithInt_(jint blockSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesNullEngine, initWithInt_, blockSize)
}

LibOrgBouncycastleCryptoEnginesNullEngine *create_LibOrgBouncycastleCryptoEnginesNullEngine_initWithInt_(jint blockSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesNullEngine, initWithInt_, blockSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesNullEngine)
