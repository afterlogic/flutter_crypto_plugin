//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/spec/TLSKeyMaterialSpec.java
//

#ifndef TLSKeyMaterialSpec_H
#define TLSKeyMaterialSpec_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/security/spec/KeySpec.h"

@class IOSByteArray;
@class IOSObjectArray;

@interface LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec : NSObject < JavaSecuritySpecKeySpec >
@property (readonly, copy, class) NSString *MASTER_SECRET NS_SWIFT_NAME(MASTER_SECRET);
@property (readonly, copy, class) NSString *KEY_EXPANSION NS_SWIFT_NAME(KEY_EXPANSION);

+ (NSString *)MASTER_SECRET;

+ (NSString *)KEY_EXPANSION;

#pragma mark Public

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)secret
                               withNSString:(NSString *)label
                                    withInt:(jint)length
                             withByteArray2:(IOSObjectArray *)seedMaterial;

- (NSString *)getLabel;

- (jint)getLength;

- (IOSByteArray *)getSecret;

- (IOSByteArray *)getSeed;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec)

inline NSString *LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_get_MASTER_SECRET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_MASTER_SECRET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec, MASTER_SECRET, NSString *)

inline NSString *LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_get_KEY_EXPANSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_KEY_EXPANSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec, KEY_EXPANSION, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_initWithByteArray_withNSString_withInt_withByteArray2_(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *self, IOSByteArray *secret, NSString *label, jint length, IOSObjectArray *seedMaterial);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *new_LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_initWithByteArray_withNSString_withInt_withByteArray2_(IOSByteArray *secret, NSString *label, jint length, IOSObjectArray *seedMaterial) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *create_LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_initWithByteArray_withNSString_withInt_withByteArray2_(IOSByteArray *secret, NSString *label, jint length, IOSObjectArray *seedMaterial);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TLSKeyMaterialSpec_H
