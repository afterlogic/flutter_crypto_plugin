//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/CertificatePair.java
//

#ifndef CertificatePair_H
#define CertificatePair_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1X509X509Certificate;

@interface LibOrgBouncycastleAsn1X509CertificatePair : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509X509Certificate:(LibOrgBouncycastleAsn1X509X509Certificate *)forward
                              withLibOrgBouncycastleAsn1X509X509Certificate:(LibOrgBouncycastleAsn1X509X509Certificate *)reverse;

- (LibOrgBouncycastleAsn1X509X509Certificate *)getForward;

+ (LibOrgBouncycastleAsn1X509CertificatePair *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1X509X509Certificate *)getReverse;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509CertificatePair)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePair *LibOrgBouncycastleAsn1X509CertificatePair_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509CertificatePair_initWithLibOrgBouncycastleAsn1X509X509Certificate_withLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509CertificatePair *self, LibOrgBouncycastleAsn1X509X509Certificate *forward, LibOrgBouncycastleAsn1X509X509Certificate *reverse);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePair *new_LibOrgBouncycastleAsn1X509CertificatePair_initWithLibOrgBouncycastleAsn1X509X509Certificate_withLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509X509Certificate *forward, LibOrgBouncycastleAsn1X509X509Certificate *reverse) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePair *create_LibOrgBouncycastleAsn1X509CertificatePair_initWithLibOrgBouncycastleAsn1X509X509Certificate_withLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509X509Certificate *forward, LibOrgBouncycastleAsn1X509X509Certificate *reverse);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509CertificatePair)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificatePair_H
