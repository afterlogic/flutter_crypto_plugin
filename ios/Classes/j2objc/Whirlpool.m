//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/Whirlpool.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCMessageDigest.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestAlgorithmProvider.h"
#include "HMac.h"
#include "IOSClass.h"
#include "ISOIECObjectIdentifiers.h"
#include "J2ObjC_source.h"
#include "Whirlpool.h"
#include "WhirlpoolDigest.h"

@interface LibOrgBouncycastleJcajceProviderDigestWhirlpool ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderDigestWhirlpool_init(LibOrgBouncycastleJcajceProviderDigestWhirlpool *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestWhirlpool *new_LibOrgBouncycastleJcajceProviderDigestWhirlpool_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestWhirlpool *create_LibOrgBouncycastleJcajceProviderDigestWhirlpool_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderDigestWhirlpool

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestWhirlpool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest;LLibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac;LLibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator;LLibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestWhirlpool = { "Whirlpool", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestWhirlpool;
}

@end

void LibOrgBouncycastleJcajceProviderDigestWhirlpool_init(LibOrgBouncycastleJcajceProviderDigestWhirlpool *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool *new_LibOrgBouncycastleJcajceProviderDigestWhirlpool_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool, init)
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool *create_LibOrgBouncycastleJcajceProviderDigestWhirlpool_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestWhirlpool)

@implementation LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest *d = (LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest class]);
  ((LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsWhirlpoolDigest_initWithLibOrgBouncycastleCryptoDigestsWhirlpoolDigest_((LibOrgBouncycastleCryptoDigestsWhirlpoolDigest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsWhirlpoolDigest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestWhirlpool;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest = { "Digest", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest_init(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest *self) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsWhirlpoolDigest_init());
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest *new_LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest, init)
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest *create_LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Digest)

@implementation LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestWhirlpool;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac = { "HashMac", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac;
}

@end

void LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac_init(LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsWhirlpoolDigest_init()));
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac *new_LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac, init)
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac *create_LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestWhirlpool_HashMac)

@implementation LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestWhirlpool;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator = { "KeyGenerator", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator;
}

@end

void LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator_init(LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACWHIRLPOOL", 512, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator *new_LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator, init)
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator *create_LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestWhirlpool_KeyGenerator)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings)

@implementation LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.WHIRLPOOL" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:@"MessageDigest" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1IsoISOIECObjectIdentifiers, whirlpool) withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_PREFIX, @"$Digest")];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"WHIRLPOOL" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_PREFIX, @"$HashMac") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_PREFIX, @"$KeyGenerator")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderDigestWhirlpool;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings class]) {
    LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderDigestWhirlpool_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_init(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings *self) {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings *new_LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings, init)
}

LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings *create_LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestWhirlpool_Mappings)
