//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/util/DefaultJcaJceHelper.java
//

#ifndef DefaultJcaJceHelper_H
#define DefaultJcaJceHelper_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "JcaJceHelper.h"

@class JavaSecurityAlgorithmParameterGenerator;
@class JavaSecurityAlgorithmParameters;
@class JavaSecurityCertCertificateFactory;
@class JavaSecurityKeyFactory;
@class JavaSecurityKeyPairGenerator;
@class JavaSecurityMessageDigest;
@class JavaSecuritySecureRandom;
@class JavaSecuritySignature;
@class JavaxCryptoCipher;
@class JavaxCryptoKeyAgreement;
@class JavaxCryptoKeyGenerator;
@class JavaxCryptoMac;
@class JavaxCryptoSecretKeyFactory;

@interface LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper : NSObject < LibOrgBouncycastleJcajceUtilJcaJceHelper >

#pragma mark Public

- (instancetype __nonnull)init;

- (JavaSecurityAlgorithmParameterGenerator *)createAlgorithmParameterGeneratorWithNSString:(NSString *)algorithm;

- (JavaSecurityAlgorithmParameters *)createAlgorithmParametersWithNSString:(NSString *)algorithm;

- (JavaSecurityCertCertificateFactory *)createCertificateFactoryWithNSString:(NSString *)algorithm;

- (JavaxCryptoCipher *)createCipherWithNSString:(NSString *)algorithm;

- (JavaSecurityMessageDigest *)createDigestWithNSString:(NSString *)algorithm;

- (JavaxCryptoKeyAgreement *)createKeyAgreementWithNSString:(NSString *)algorithm;

- (JavaSecurityKeyFactory *)createKeyFactoryWithNSString:(NSString *)algorithm;

- (JavaxCryptoKeyGenerator *)createKeyGeneratorWithNSString:(NSString *)algorithm;

- (JavaSecurityKeyPairGenerator *)createKeyPairGeneratorWithNSString:(NSString *)algorithm;

- (JavaxCryptoMac *)createMacWithNSString:(NSString *)algorithm;

- (JavaxCryptoSecretKeyFactory *)createSecretKeyFactoryWithNSString:(NSString *)algorithm;

- (JavaSecuritySecureRandom *)createSecureRandomWithNSString:(NSString *)algorithm;

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)algorithm;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init(LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper *new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper *create_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DefaultJcaJceHelper_H
