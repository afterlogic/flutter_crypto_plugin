//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/ECConstants.java
//

#ifndef ECConstants_H
#define ECConstants_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaMathBigInteger;

@protocol LibOrgBouncycastleMathEcECConstants < JavaObject >

@end

@interface LibOrgBouncycastleMathEcECConstants : NSObject
@property (readonly, class) JavaMathBigInteger *ZERO NS_SWIFT_NAME(ZERO);
@property (readonly, class) JavaMathBigInteger *ONE NS_SWIFT_NAME(ONE);
@property (readonly, class) JavaMathBigInteger *TWO NS_SWIFT_NAME(TWO);
@property (readonly, class) JavaMathBigInteger *THREE NS_SWIFT_NAME(THREE);
@property (readonly, class) JavaMathBigInteger *FOUR NS_SWIFT_NAME(FOUR);
@property (readonly, class) JavaMathBigInteger *EIGHT NS_SWIFT_NAME(EIGHT);

+ (JavaMathBigInteger *)ZERO;

+ (JavaMathBigInteger *)ONE;

+ (JavaMathBigInteger *)TWO;

+ (JavaMathBigInteger *)THREE;

+ (JavaMathBigInteger *)FOUR;

+ (JavaMathBigInteger *)EIGHT;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleMathEcECConstants)

inline JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcECConstants, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_get_ONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcECConstants, ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_get_TWO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcECConstants, TWO, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_get_THREE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_THREE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcECConstants, THREE, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_get_FOUR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_FOUR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcECConstants, FOUR, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_get_EIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathEcECConstants_EIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcECConstants, EIGHT, JavaMathBigInteger *)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcECConstants)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ECConstants_H
