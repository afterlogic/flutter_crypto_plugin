//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/AbstractECMultiplier.java
//

#ifndef AbstractECMultiplier_H
#define AbstractECMultiplier_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ECMultiplier.h"
#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class LibOrgBouncycastleMathEcECPoint;

@interface LibOrgBouncycastleMathEcAbstractECMultiplier : NSObject < LibOrgBouncycastleMathEcECMultiplier >

#pragma mark Public

- (instancetype __nonnull)init;

- (LibOrgBouncycastleMathEcECPoint *)multiplyWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)k;

#pragma mark Protected

- (LibOrgBouncycastleMathEcECPoint *)checkResultWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p;

- (LibOrgBouncycastleMathEcECPoint *)multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)k;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcAbstractECMultiplier)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcAbstractECMultiplier_init(LibOrgBouncycastleMathEcAbstractECMultiplier *self);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcAbstractECMultiplier)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // AbstractECMultiplier_H
