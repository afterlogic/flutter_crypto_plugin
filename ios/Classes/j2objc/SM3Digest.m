//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/SM3Digest.java
//

#include "GeneralDigest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Memoable.h"
#include "Pack.h"
#include "SM3Digest.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoDigestsSM3Digest () {
 @public
  IOSIntArray *V_;
  IOSIntArray *inwords_;
  jint xOff_;
  IOSIntArray *W_;
}

- (void)copyInWithLibOrgBouncycastleCryptoDigestsSM3Digest:(LibOrgBouncycastleCryptoDigestsSM3Digest *)t OBJC_METHOD_FAMILY_NONE;

- (jint)P0WithInt:(jint)x;

- (jint)P1WithInt:(jint)x;

- (jint)FF0WithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z;

- (jint)FF1WithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z;

- (jint)GG0WithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z;

- (jint)GG1WithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSM3Digest, V_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSM3Digest, inwords_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSM3Digest, W_, IOSIntArray *)

inline jint LibOrgBouncycastleCryptoDigestsSM3Digest_get_DIGEST_LENGTH(void);
#define LibOrgBouncycastleCryptoDigestsSM3Digest_DIGEST_LENGTH 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSM3Digest, DIGEST_LENGTH, jint)

inline jint LibOrgBouncycastleCryptoDigestsSM3Digest_get_BLOCK_SIZE(void);
#define LibOrgBouncycastleCryptoDigestsSM3Digest_BLOCK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSM3Digest, BLOCK_SIZE, jint)

inline IOSIntArray *LibOrgBouncycastleCryptoDigestsSM3Digest_get_T(void);
static IOSIntArray *LibOrgBouncycastleCryptoDigestsSM3Digest_T;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoDigestsSM3Digest, T, IOSIntArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsSM3Digest_copyInWithLibOrgBouncycastleCryptoDigestsSM3Digest_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, LibOrgBouncycastleCryptoDigestsSM3Digest *t);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoDigestsSM3Digest_P0WithInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoDigestsSM3Digest_P1WithInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoDigestsSM3Digest_FF0WithInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x, jint y, jint z);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoDigestsSM3Digest_FF1WithInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x, jint y, jint z);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoDigestsSM3Digest_GG0WithInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x, jint y, jint z);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoDigestsSM3Digest_GG1WithInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x, jint y, jint z);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoDigestsSM3Digest)

@implementation LibOrgBouncycastleCryptoDigestsSM3Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoDigestsSM3Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoDigestsSM3Digest:(LibOrgBouncycastleCryptoDigestsSM3Digest *)t {
  LibOrgBouncycastleCryptoDigestsSM3Digest_initWithLibOrgBouncycastleCryptoDigestsSM3Digest_(self, t);
  return self;
}

- (void)copyInWithLibOrgBouncycastleCryptoDigestsSM3Digest:(LibOrgBouncycastleCryptoDigestsSM3Digest *)t {
  LibOrgBouncycastleCryptoDigestsSM3Digest_copyInWithLibOrgBouncycastleCryptoDigestsSM3Digest_(self, t);
}

- (NSString *)getAlgorithmName {
  return @"SM3";
}

- (jint)getDigestSize {
  return LibOrgBouncycastleCryptoDigestsSM3Digest_DIGEST_LENGTH;
}

- (id<LibOrgBouncycastleUtilMemoable>)copy__ {
  return new_LibOrgBouncycastleCryptoDigestsSM3Digest_initWithLibOrgBouncycastleCryptoDigestsSM3Digest_(self);
}

- (void)resetWithLibOrgBouncycastleUtilMemoable:(id<LibOrgBouncycastleUtilMemoable>)other {
  LibOrgBouncycastleCryptoDigestsSM3Digest *d = (LibOrgBouncycastleCryptoDigestsSM3Digest *) cast_chk(other, [LibOrgBouncycastleCryptoDigestsSM3Digest class]);
  [super copyInWithLibOrgBouncycastleCryptoDigestsGeneralDigest:d];
  LibOrgBouncycastleCryptoDigestsSM3Digest_copyInWithLibOrgBouncycastleCryptoDigestsSM3Digest_(self, d);
}

- (void)reset {
  [super reset];
  *IOSIntArray_GetRef(nil_chk(self->V_), 0) = (jint) 0x7380166F;
  *IOSIntArray_GetRef(self->V_, 1) = (jint) 0x4914B2B9;
  *IOSIntArray_GetRef(self->V_, 2) = (jint) 0x172442D7;
  *IOSIntArray_GetRef(self->V_, 3) = (jint) 0xDA8A0600;
  *IOSIntArray_GetRef(self->V_, 4) = (jint) 0xA96F30BC;
  *IOSIntArray_GetRef(self->V_, 5) = (jint) 0x163138AA;
  *IOSIntArray_GetRef(self->V_, 6) = (jint) 0xE38DEE4D;
  *IOSIntArray_GetRef(self->V_, 7) = (jint) 0xB0FB0E4E;
  self->xOff_ = 0;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  [self finish];
  LibOrgBouncycastleUtilPack_intToBigEndianWithIntArray_withByteArray_withInt_(V_, outArg, outOff);
  [self reset];
  return LibOrgBouncycastleCryptoDigestsSM3Digest_DIGEST_LENGTH;
}

- (void)processWordWithByteArray:(IOSByteArray *)inArg
                         withInt:(jint)inOff {
  jint unseq$1 = inOff;
  jint unseq$2 = ++inOff;
  jint unseq$3 = ++inOff;
  jint n = ((JreLShift32((IOSByteArray_Get(nil_chk(inArg), unseq$1) & (jint) 0xff), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$2) & (jint) 0xff), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$3) & (jint) 0xff), 8)) | ((IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff)));
  *IOSIntArray_GetRef(nil_chk(self->inwords_), self->xOff_) = n;
  ++self->xOff_;
  if (self->xOff_ >= 16) {
    [self processBlock];
  }
}

- (void)processLengthWithLong:(jlong)bitLength {
  if (self->xOff_ > (LibOrgBouncycastleCryptoDigestsSM3Digest_BLOCK_SIZE - 2)) {
    *IOSIntArray_GetRef(nil_chk(self->inwords_), self->xOff_) = 0;
    ++self->xOff_;
    [self processBlock];
  }
  while (self->xOff_ < (LibOrgBouncycastleCryptoDigestsSM3Digest_BLOCK_SIZE - 2)) {
    *IOSIntArray_GetRef(nil_chk(self->inwords_), self->xOff_) = 0;
    ++self->xOff_;
  }
  *IOSIntArray_GetRef(nil_chk(self->inwords_), self->xOff_++) = (jint) (JreURShift64(bitLength, 32));
  *IOSIntArray_GetRef(self->inwords_, self->xOff_++) = (jint) (bitLength);
}

- (jint)P0WithInt:(jint)x {
  return LibOrgBouncycastleCryptoDigestsSM3Digest_P0WithInt_(self, x);
}

- (jint)P1WithInt:(jint)x {
  return LibOrgBouncycastleCryptoDigestsSM3Digest_P1WithInt_(self, x);
}

- (jint)FF0WithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z {
  return LibOrgBouncycastleCryptoDigestsSM3Digest_FF0WithInt_withInt_withInt_(self, x, y, z);
}

- (jint)FF1WithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z {
  return LibOrgBouncycastleCryptoDigestsSM3Digest_FF1WithInt_withInt_withInt_(self, x, y, z);
}

- (jint)GG0WithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z {
  return LibOrgBouncycastleCryptoDigestsSM3Digest_GG0WithInt_withInt_withInt_(self, x, y, z);
}

- (jint)GG1WithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z {
  return LibOrgBouncycastleCryptoDigestsSM3Digest_GG1WithInt_withInt_withInt_(self, x, y, z);
}

- (void)processBlock {
  for (jint j = 0; j < 16; ++j) {
    *IOSIntArray_GetRef(nil_chk(self->W_), j) = IOSIntArray_Get(nil_chk(self->inwords_), j);
  }
  for (jint j = 16; j < 68; ++j) {
    jint wj3 = IOSIntArray_Get(nil_chk(self->W_), j - 3);
    jint r15 = ((JreLShift32(wj3, 15)) | (JreURShift32(wj3, (32 - 15))));
    jint wj13 = IOSIntArray_Get(self->W_, j - 13);
    jint r7 = ((JreLShift32(wj13, 7)) | (JreURShift32(wj13, (32 - 7))));
    *IOSIntArray_GetRef(self->W_, j) = LibOrgBouncycastleCryptoDigestsSM3Digest_P1WithInt_(self, IOSIntArray_Get(self->W_, j - 16) ^ IOSIntArray_Get(self->W_, j - 9) ^ r15) ^ r7 ^ IOSIntArray_Get(nil_chk(self->W_), j - 6);
  }
  jint A = IOSIntArray_Get(nil_chk(self->V_), 0);
  jint B = IOSIntArray_Get(self->V_, 1);
  jint C = IOSIntArray_Get(self->V_, 2);
  jint D = IOSIntArray_Get(self->V_, 3);
  jint E = IOSIntArray_Get(self->V_, 4);
  jint F = IOSIntArray_Get(self->V_, 5);
  jint G = IOSIntArray_Get(self->V_, 6);
  jint H = IOSIntArray_Get(self->V_, 7);
  for (jint j = 0; j < 16; ++j) {
    jint a12 = ((JreLShift32(A, 12)) | (JreURShift32(A, (32 - 12))));
    jint s1_ = a12 + E + IOSIntArray_Get(nil_chk(LibOrgBouncycastleCryptoDigestsSM3Digest_T), j);
    jint SS1 = ((JreLShift32(s1_, 7)) | (JreURShift32(s1_, (32 - 7))));
    jint SS2 = SS1 ^ a12;
    jint Wj = IOSIntArray_Get(nil_chk(W_), j);
    jint W1j = Wj ^ IOSIntArray_Get(W_, j + 4);
    jint TT1 = LibOrgBouncycastleCryptoDigestsSM3Digest_FF0WithInt_withInt_withInt_(self, A, B, C) + D + SS2 + W1j;
    jint TT2 = LibOrgBouncycastleCryptoDigestsSM3Digest_GG0WithInt_withInt_withInt_(self, E, F, G) + H + SS1 + Wj;
    D = C;
    C = ((JreLShift32(B, 9)) | (JreURShift32(B, (32 - 9))));
    B = A;
    A = TT1;
    H = G;
    G = ((JreLShift32(F, 19)) | (JreURShift32(F, (32 - 19))));
    F = E;
    E = LibOrgBouncycastleCryptoDigestsSM3Digest_P0WithInt_(self, TT2);
  }
  for (jint j = 16; j < 64; ++j) {
    jint a12 = ((JreLShift32(A, 12)) | (JreURShift32(A, (32 - 12))));
    jint s1_ = a12 + E + IOSIntArray_Get(nil_chk(LibOrgBouncycastleCryptoDigestsSM3Digest_T), j);
    jint SS1 = ((JreLShift32(s1_, 7)) | (JreURShift32(s1_, (32 - 7))));
    jint SS2 = SS1 ^ a12;
    jint Wj = IOSIntArray_Get(nil_chk(W_), j);
    jint W1j = Wj ^ IOSIntArray_Get(W_, j + 4);
    jint TT1 = LibOrgBouncycastleCryptoDigestsSM3Digest_FF1WithInt_withInt_withInt_(self, A, B, C) + D + SS2 + W1j;
    jint TT2 = LibOrgBouncycastleCryptoDigestsSM3Digest_GG1WithInt_withInt_withInt_(self, E, F, G) + H + SS1 + Wj;
    D = C;
    C = ((JreLShift32(B, 9)) | (JreURShift32(B, (32 - 9))));
    B = A;
    A = TT1;
    H = G;
    G = ((JreLShift32(F, 19)) | (JreURShift32(F, (32 - 19))));
    F = E;
    E = LibOrgBouncycastleCryptoDigestsSM3Digest_P0WithInt_(self, TT2);
  }
  *IOSIntArray_GetRef(nil_chk(self->V_), 0) ^= A;
  *IOSIntArray_GetRef(self->V_, 1) ^= B;
  *IOSIntArray_GetRef(self->V_, 2) ^= C;
  *IOSIntArray_GetRef(self->V_, 3) ^= D;
  *IOSIntArray_GetRef(self->V_, 4) ^= E;
  *IOSIntArray_GetRef(self->V_, 5) ^= F;
  *IOSIntArray_GetRef(self->V_, 6) ^= G;
  *IOSIntArray_GetRef(self->V_, 7) ^= H;
  self->xOff_ = 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilMemoable;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 17, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoDigestsSM3Digest:);
  methods[2].selector = @selector(copyInWithLibOrgBouncycastleCryptoDigestsSM3Digest:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getDigestSize);
  methods[5].selector = @selector(copy__);
  methods[6].selector = @selector(resetWithLibOrgBouncycastleUtilMemoable:);
  methods[7].selector = @selector(reset);
  methods[8].selector = @selector(doFinalWithByteArray:withInt:);
  methods[9].selector = @selector(processWordWithByteArray:withInt:);
  methods[10].selector = @selector(processLengthWithLong:);
  methods[11].selector = @selector(P0WithInt:);
  methods[12].selector = @selector(P1WithInt:);
  methods[13].selector = @selector(FF0WithInt:withInt:withInt:);
  methods[14].selector = @selector(FF1WithInt:withInt:withInt:);
  methods[15].selector = @selector(GG0WithInt:withInt:withInt:);
  methods[16].selector = @selector(GG1WithInt:withInt:withInt:);
  methods[17].selector = @selector(processBlock);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DIGEST_LENGTH", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSM3Digest_DIGEST_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "BLOCK_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSM3Digest_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "V_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inwords_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "W_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "T", "[I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigestsSM3Digest;", "copyIn", "copy", "reset", "LLibOrgBouncycastleUtilMemoable;", "doFinal", "[BI", "processWord", "processLength", "J", "P0", "I", "P1", "FF0", "III", "FF1", "GG0", "GG1", &LibOrgBouncycastleCryptoDigestsSM3Digest_T };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsSM3Digest = { "SM3Digest", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 18, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsSM3Digest;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoDigestsSM3Digest class]) {
    LibOrgBouncycastleCryptoDigestsSM3Digest_T = [IOSIntArray newArrayWithLength:64];
    {
      for (jint i = 0; i < 16; ++i) {
        jint t = (jint) 0x79CC4519;
        *IOSIntArray_GetRef(LibOrgBouncycastleCryptoDigestsSM3Digest_T, i) = (JreLShift32(t, i)) | (JreURShift32(t, (32 - i)));
      }
      for (jint i = 16; i < 64; ++i) {
        jint n = i % 32;
        jint t = (jint) 0x7A879D8A;
        *IOSIntArray_GetRef(LibOrgBouncycastleCryptoDigestsSM3Digest_T, i) = (JreLShift32(t, n)) | (JreURShift32(t, (32 - n)));
      }
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoDigestsSM3Digest)
  }
}

@end

void LibOrgBouncycastleCryptoDigestsSM3Digest_init(LibOrgBouncycastleCryptoDigestsSM3Digest *self) {
  LibOrgBouncycastleCryptoDigestsGeneralDigest_init(self);
  self->V_ = [IOSIntArray newArrayWithLength:LibOrgBouncycastleCryptoDigestsSM3Digest_DIGEST_LENGTH / 4];
  self->inwords_ = [IOSIntArray newArrayWithLength:LibOrgBouncycastleCryptoDigestsSM3Digest_BLOCK_SIZE];
  self->W_ = [IOSIntArray newArrayWithLength:68];
  [self reset];
}

LibOrgBouncycastleCryptoDigestsSM3Digest *new_LibOrgBouncycastleCryptoDigestsSM3Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSM3Digest, init)
}

LibOrgBouncycastleCryptoDigestsSM3Digest *create_LibOrgBouncycastleCryptoDigestsSM3Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSM3Digest, init)
}

void LibOrgBouncycastleCryptoDigestsSM3Digest_initWithLibOrgBouncycastleCryptoDigestsSM3Digest_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, LibOrgBouncycastleCryptoDigestsSM3Digest *t) {
  LibOrgBouncycastleCryptoDigestsGeneralDigest_initWithLibOrgBouncycastleCryptoDigestsGeneralDigest_(self, t);
  self->V_ = [IOSIntArray newArrayWithLength:LibOrgBouncycastleCryptoDigestsSM3Digest_DIGEST_LENGTH / 4];
  self->inwords_ = [IOSIntArray newArrayWithLength:LibOrgBouncycastleCryptoDigestsSM3Digest_BLOCK_SIZE];
  self->W_ = [IOSIntArray newArrayWithLength:68];
  LibOrgBouncycastleCryptoDigestsSM3Digest_copyInWithLibOrgBouncycastleCryptoDigestsSM3Digest_(self, t);
}

LibOrgBouncycastleCryptoDigestsSM3Digest *new_LibOrgBouncycastleCryptoDigestsSM3Digest_initWithLibOrgBouncycastleCryptoDigestsSM3Digest_(LibOrgBouncycastleCryptoDigestsSM3Digest *t) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSM3Digest, initWithLibOrgBouncycastleCryptoDigestsSM3Digest_, t)
}

LibOrgBouncycastleCryptoDigestsSM3Digest *create_LibOrgBouncycastleCryptoDigestsSM3Digest_initWithLibOrgBouncycastleCryptoDigestsSM3Digest_(LibOrgBouncycastleCryptoDigestsSM3Digest *t) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSM3Digest, initWithLibOrgBouncycastleCryptoDigestsSM3Digest_, t)
}

void LibOrgBouncycastleCryptoDigestsSM3Digest_copyInWithLibOrgBouncycastleCryptoDigestsSM3Digest_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, LibOrgBouncycastleCryptoDigestsSM3Digest *t) {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((LibOrgBouncycastleCryptoDigestsSM3Digest *) nil_chk(t))->V_, 0, self->V_, 0, ((IOSIntArray *) nil_chk(self->V_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(t->inwords_, 0, self->inwords_, 0, ((IOSIntArray *) nil_chk(self->inwords_))->size_);
  self->xOff_ = t->xOff_;
}

jint LibOrgBouncycastleCryptoDigestsSM3Digest_P0WithInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x) {
  jint r9 = ((JreLShift32(x, 9)) | (JreURShift32(x, (32 - 9))));
  jint r17 = ((JreLShift32(x, 17)) | (JreURShift32(x, (32 - 17))));
  return (x ^ r9 ^ r17);
}

jint LibOrgBouncycastleCryptoDigestsSM3Digest_P1WithInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x) {
  jint r15 = ((JreLShift32(x, 15)) | (JreURShift32(x, (32 - 15))));
  jint r23 = ((JreLShift32(x, 23)) | (JreURShift32(x, (32 - 23))));
  return (x ^ r15 ^ r23);
}

jint LibOrgBouncycastleCryptoDigestsSM3Digest_FF0WithInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x, jint y, jint z) {
  return (x ^ y ^ z);
}

jint LibOrgBouncycastleCryptoDigestsSM3Digest_FF1WithInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x, jint y, jint z) {
  return ((x & y) | (x & z) | (y & z));
}

jint LibOrgBouncycastleCryptoDigestsSM3Digest_GG0WithInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x, jint y, jint z) {
  return (x ^ y ^ z);
}

jint LibOrgBouncycastleCryptoDigestsSM3Digest_GG1WithInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsSM3Digest *self, jint x, jint y, jint z) {
  return ((x & y) | ((~x) & z));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsSM3Digest)
