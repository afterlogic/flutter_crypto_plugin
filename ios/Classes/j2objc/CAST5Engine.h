//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/CAST5Engine.java
//

#ifndef CAST5Engine_H
#define CAST5Engine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BlockCipher.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoEnginesCAST5Engine : NSObject < LibOrgBouncycastleCryptoBlockCipher > {
 @public
  IOSIntArray *_Kr_;
  IOSIntArray *_Km_;
}
@property (readonly, class) jint MAX_ROUNDS NS_SWIFT_NAME(MAX_ROUNDS);
@property (readonly, class) jint RED_ROUNDS NS_SWIFT_NAME(RED_ROUNDS);
@property (readonly, class) jint BLOCK_SIZE NS_SWIFT_NAME(BLOCK_SIZE);

+ (jint)MAX_ROUNDS;

+ (jint)RED_ROUNDS;

+ (jint)BLOCK_SIZE;

#pragma mark Public

- (instancetype __nonnull)init;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (void)init__WithBoolean:(jboolean)encrypting
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

#pragma mark Protected

- (void)Bits32ToBytesWithInt:(jint)inArg
               withByteArray:(IOSByteArray *)b
                     withInt:(jint)offset;

- (void)Bits32ToIntsWithInt:(jint)inArg
               withIntArray:(IOSIntArray *)b
                    withInt:(jint)offset;

- (jint)BytesTo32bitsWithByteArray:(IOSByteArray *)b
                           withInt:(jint)i;

- (void)CAST_DecipherWithInt:(jint)L16
                     withInt:(jint)R16
                withIntArray:(IOSIntArray *)result;

- (void)CAST_EncipherWithInt:(jint)L0
                     withInt:(jint)R0
                withIntArray:(IOSIntArray *)result;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)src
                          withInt:(jint)srcIndex
                    withByteArray:(IOSByteArray *)dst
                          withInt:(jint)dstIndex;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)src
                          withInt:(jint)srcIndex
                    withByteArray:(IOSByteArray *)dst
                          withInt:(jint)dstIndex;

- (jint)F1WithInt:(jint)D
          withInt:(jint)Kmi
          withInt:(jint)Kri;

- (jint)F2WithInt:(jint)D
          withInt:(jint)Kmi
          withInt:(jint)Kri;

- (jint)F3WithInt:(jint)D
          withInt:(jint)Kmi
          withInt:(jint)Kri;

- (jint)IntsTo32bitsWithIntArray:(IOSIntArray *)b
                         withInt:(jint)i;

- (void)setKeyWithByteArray:(IOSByteArray *)key;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoEnginesCAST5Engine)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesCAST5Engine, _Kr_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesCAST5Engine, _Km_, IOSIntArray *)

inline jint LibOrgBouncycastleCryptoEnginesCAST5Engine_get_MAX_ROUNDS(void);
#define LibOrgBouncycastleCryptoEnginesCAST5Engine_MAX_ROUNDS 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesCAST5Engine, MAX_ROUNDS, jint)

inline jint LibOrgBouncycastleCryptoEnginesCAST5Engine_get_RED_ROUNDS(void);
#define LibOrgBouncycastleCryptoEnginesCAST5Engine_RED_ROUNDS 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesCAST5Engine, RED_ROUNDS, jint)

inline jint LibOrgBouncycastleCryptoEnginesCAST5Engine_get_BLOCK_SIZE(void);
#define LibOrgBouncycastleCryptoEnginesCAST5Engine_BLOCK_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesCAST5Engine, BLOCK_SIZE, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesCAST5Engine_init(LibOrgBouncycastleCryptoEnginesCAST5Engine *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesCAST5Engine *new_LibOrgBouncycastleCryptoEnginesCAST5Engine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesCAST5Engine *create_LibOrgBouncycastleCryptoEnginesCAST5Engine_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesCAST5Engine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CAST5Engine_H
