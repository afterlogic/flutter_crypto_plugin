//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/srp/SRP6Server.java
//

#ifndef SRP6Server_H
#define SRP6Server_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoParamsSRP6GroupParameters;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastleCryptoAgreementSrpSRP6Server : NSObject {
 @public
  JavaMathBigInteger *N_;
  JavaMathBigInteger *g_;
  JavaMathBigInteger *v_;
  JavaSecuritySecureRandom *random_;
  id<LibOrgBouncycastleCryptoDigest> digest_;
  JavaMathBigInteger *A_;
  JavaMathBigInteger *b_;
  JavaMathBigInteger *B_;
  JavaMathBigInteger *u_;
  JavaMathBigInteger *S_;
  JavaMathBigInteger *M1_;
  JavaMathBigInteger *M2_;
  JavaMathBigInteger *Key_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (JavaMathBigInteger *)calculateSecretWithJavaMathBigInteger:(JavaMathBigInteger *)clientA;

- (JavaMathBigInteger *)calculateServerEvidenceMessage;

- (JavaMathBigInteger *)calculateSessionKey;

- (JavaMathBigInteger *)generateServerCredentials;

- (void)init__WithJavaMathBigInteger:(JavaMathBigInteger *)N
              withJavaMathBigInteger:(JavaMathBigInteger *)g
              withJavaMathBigInteger:(JavaMathBigInteger *)v
  withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random OBJC_METHOD_FAMILY_NONE;

- (void)init__WithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)group
                                             withJavaMathBigInteger:(JavaMathBigInteger *)v
                                 withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random OBJC_METHOD_FAMILY_NONE;

- (jboolean)verifyClientEvidenceMessageWithJavaMathBigInteger:(JavaMathBigInteger *)clientM1;

#pragma mark Protected

- (JavaMathBigInteger *)selectPrivateValue;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoAgreementSrpSRP6Server)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, N_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, g_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, v_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, A_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, b_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, B_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, u_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, S_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, M1_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, M2_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server, Key_, JavaMathBigInteger *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoAgreementSrpSRP6Server_init(LibOrgBouncycastleCryptoAgreementSrpSRP6Server *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoAgreementSrpSRP6Server *new_LibOrgBouncycastleCryptoAgreementSrpSRP6Server_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoAgreementSrpSRP6Server *create_LibOrgBouncycastleCryptoAgreementSrpSRP6Server_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoAgreementSrpSRP6Server)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SRP6Server_H
