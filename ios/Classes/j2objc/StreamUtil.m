//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/StreamUtil.java
//

#include "ASN1InputStream.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LimitedInputStream.h"
#include "StreamUtil.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Runtime.h"
#include "java/nio/channels/FileChannel.h"

inline jlong LibOrgBouncycastleAsn1StreamUtil_get_MAX_MEMORY(void);
static jlong LibOrgBouncycastleAsn1StreamUtil_MAX_MEMORY;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(LibOrgBouncycastleAsn1StreamUtil, MAX_MEMORY, jlong)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleAsn1StreamUtil)

@implementation LibOrgBouncycastleAsn1StreamUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleAsn1StreamUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)findLimitWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return LibOrgBouncycastleAsn1StreamUtil_findLimitWithJavaIoInputStream_(inArg);
}

+ (jint)calculateBodyLengthWithInt:(jint)length {
  return LibOrgBouncycastleAsn1StreamUtil_calculateBodyLengthWithInt_(length);
}

+ (jint)calculateTagLengthWithInt:(jint)tagNo {
  return LibOrgBouncycastleAsn1StreamUtil_calculateTagLengthWithInt_(tagNo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 3, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(findLimitWithJavaIoInputStream:);
  methods[2].selector = @selector(calculateBodyLengthWithInt:);
  methods[3].selector = @selector(calculateTagLengthWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_MEMORY", "J", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "findLimit", "LJavaIoInputStream;", "calculateBodyLength", "I", "calculateTagLength", "LJavaIoIOException;", &LibOrgBouncycastleAsn1StreamUtil_MAX_MEMORY };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1StreamUtil = { "StreamUtil", "lib.org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x0, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1StreamUtil;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleAsn1StreamUtil class]) {
    LibOrgBouncycastleAsn1StreamUtil_MAX_MEMORY = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) maxMemory];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleAsn1StreamUtil)
  }
}

@end

void LibOrgBouncycastleAsn1StreamUtil_init(LibOrgBouncycastleAsn1StreamUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleAsn1StreamUtil *new_LibOrgBouncycastleAsn1StreamUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1StreamUtil, init)
}

LibOrgBouncycastleAsn1StreamUtil *create_LibOrgBouncycastleAsn1StreamUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1StreamUtil, init)
}

jint LibOrgBouncycastleAsn1StreamUtil_findLimitWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  LibOrgBouncycastleAsn1StreamUtil_initialize();
  if ([inArg isKindOfClass:[LibOrgBouncycastleAsn1LimitedInputStream class]]) {
    return [((LibOrgBouncycastleAsn1LimitedInputStream *) nil_chk(((LibOrgBouncycastleAsn1LimitedInputStream *) inArg))) getRemaining];
  }
  else if ([inArg isKindOfClass:[LibOrgBouncycastleAsn1ASN1InputStream class]]) {
    return [((LibOrgBouncycastleAsn1ASN1InputStream *) nil_chk(((LibOrgBouncycastleAsn1ASN1InputStream *) inArg))) getLimit];
  }
  else if ([inArg isKindOfClass:[JavaIoByteArrayInputStream class]]) {
    return [((JavaIoByteArrayInputStream *) nil_chk(((JavaIoByteArrayInputStream *) inArg))) available];
  }
  else if ([inArg isKindOfClass:[JavaIoFileInputStream class]]) {
    @try {
      JavaNioChannelsFileChannel *channel = [((JavaIoFileInputStream *) nil_chk(((JavaIoFileInputStream *) inArg))) getChannel];
      jlong size = (channel != nil) ? [((JavaNioChannelsFileChannel *) nil_chk(channel)) size] : JavaLangInteger_MAX_VALUE;
      if (size < JavaLangInteger_MAX_VALUE) {
        return (jint) size;
      }
    }
    @catch (JavaIoIOException *e) {
    }
  }
  if (LibOrgBouncycastleAsn1StreamUtil_MAX_MEMORY > JavaLangInteger_MAX_VALUE) {
    return JavaLangInteger_MAX_VALUE;
  }
  return (jint) LibOrgBouncycastleAsn1StreamUtil_MAX_MEMORY;
}

jint LibOrgBouncycastleAsn1StreamUtil_calculateBodyLengthWithInt_(jint length) {
  LibOrgBouncycastleAsn1StreamUtil_initialize();
  jint count = 1;
  if (length > 127) {
    jint size = 1;
    jint val = length;
    while ((JreURShiftAssignInt(&val, 8)) != 0) {
      size++;
    }
    for (jint i = (size - 1) * 8; i >= 0; i -= 8) {
      count++;
    }
  }
  return count;
}

jint LibOrgBouncycastleAsn1StreamUtil_calculateTagLengthWithInt_(jint tagNo) {
  LibOrgBouncycastleAsn1StreamUtil_initialize();
  jint length = 1;
  if (tagNo >= 31) {
    if (tagNo < 128) {
      length++;
    }
    else {
      IOSByteArray *stack = [IOSByteArray newArrayWithLength:5];
      jint pos = stack->size_;
      *IOSByteArray_GetRef(stack, --pos) = (jbyte) (tagNo & (jint) 0x7F);
      do {
        JreRShiftAssignInt(&tagNo, 7);
        *IOSByteArray_GetRef(stack, --pos) = (jbyte) ((tagNo & (jint) 0x7F) | (jint) 0x80);
      }
      while (tagNo > 127);
      length += stack->size_ - pos;
    }
  }
  return length;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1StreamUtil)
