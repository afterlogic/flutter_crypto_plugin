//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/RIPEMD128.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCMessageDigest.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestAlgorithmProvider.h"
#include "HMac.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "RIPEMD128.h"
#include "RIPEMD128Digest.h"
#include "TeleTrusTObjectIdentifiers.h"

@interface LibOrgBouncycastleJcajceProviderDigestRIPEMD128 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderDigestRIPEMD128_init(LibOrgBouncycastleJcajceProviderDigestRIPEMD128 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestRIPEMD128 *new_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestRIPEMD128 *create_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderDigestRIPEMD128

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestRIPEMD128_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest;LLibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac;LLibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator;LLibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestRIPEMD128 = { "RIPEMD128", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestRIPEMD128;
}

@end

void LibOrgBouncycastleJcajceProviderDigestRIPEMD128_init(LibOrgBouncycastleJcajceProviderDigestRIPEMD128 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128 *new_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128, init)
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128 *create_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestRIPEMD128)

@implementation LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest *d = (LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest class]);
  ((LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsRIPEMD128Digest_initWithLibOrgBouncycastleCryptoDigestsRIPEMD128Digest_((LibOrgBouncycastleCryptoDigestsRIPEMD128Digest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsRIPEMD128Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestRIPEMD128;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest = { "Digest", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest_init(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest *self) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsRIPEMD128Digest_init());
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest *new_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest, init)
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest *create_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Digest)

@implementation LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestRIPEMD128;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac = { "HashMac", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac;
}

@end

void LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac_init(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsRIPEMD128Digest_init()));
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac *new_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac, init)
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac *create_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_HashMac)

@implementation LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestRIPEMD128;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator = { "KeyGenerator", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator;
}

@end

void LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator_init(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACRIPEMD128", 128, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator *new_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator, init)
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator *create_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_KeyGenerator)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings)

@implementation LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.RIPEMD128" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd128)) withNSString:@"RIPEMD128"];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"RIPEMD128" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_PREFIX, @"$HashMac") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_PREFIX, @"$KeyGenerator")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderDigestRIPEMD128;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings class]) {
    LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderDigestRIPEMD128_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_init(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings *self) {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings *new_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings, init)
}

LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings *create_LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestRIPEMD128_Mappings)
