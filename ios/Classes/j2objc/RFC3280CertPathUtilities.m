//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/RFC3280CertPathUtilities.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1String.h"
#include "ASN1TaggedObject.h"
#include "AnnotatedException.h"
#include "Arrays.h"
#include "AttributeTypeAndValue.h"
#include "BCStyle.h"
#include "BasicConstraints.h"
#include "CRLDistPoint.h"
#include "CRLReason.h"
#include "DERSequence.h"
#include "DistributionPoint.h"
#include "DistributionPointName.h"
#include "ExtCertPathValidatorException.h"
#include "Extension.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "GeneralSubtree.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuingDistributionPoint.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "JcePKIXCRLUtil.h"
#include "JcePKIXNameConstraintValidator.h"
#include "JceProviderCertPathValidatorUtilities.h"
#include "JceProviderCertStatus.h"
#include "NameConstraints.h"
#include "PKIXCRLStore.h"
#include "PKIXCRLStoreSelector.h"
#include "PKIXCertPathBuilderSpi.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "PKIXNameConstraintValidatorException.h"
#include "PKIXPolicyNode.h"
#include "PolicyInformation.h"
#include "PrincipalUtils.h"
#include "RDN.h"
#include "RFC3280CertPathUtilities.h"
#include "ReasonFlags.h"
#include "ReasonsMask.h"
#include "X500Name.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathBuilderException.h"
#include "java/security/cert/CertPathBuilderResult.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/PKIXCertPathChecker.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLSelector.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/cert/X509Extension.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"

@interface LibOrgBouncycastleJceProviderRFC3280CertPathUtilities ()

+ (void)checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
             withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                            withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                               withJavaUtilDate:(JavaUtilDate *)validDate
                            withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)defaultCRLSignCert
                                      withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)defaultCRLSignKey
         withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus
                   withLibOrgBouncycastleJceProviderReasonsMask:(LibOrgBouncycastleJceProviderReasonsMask *)reasonMask
                                               withJavaUtilList:(id<JavaUtilList>)certPathCerts
                   withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper;

@end

inline LibOrgBouncycastleJceProviderJcePKIXCRLUtil *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_get_CRL_UTIL(void);
static LibOrgBouncycastleJceProviderJcePKIXCRLUtil *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_UTIL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CRL_UTIL, LibOrgBouncycastleJceProviderJcePKIXCRLUtil *)

__attribute__((unused)) static void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *defaultCRLSignCert, id<JavaSecurityPublicKey> defaultCRLSignKey, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus, LibOrgBouncycastleJceProviderReasonsMask *reasonMask, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities)

NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER;
NSString *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY = @"2.5.29.32.0";
IOSObjectArray *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_crlReasons;

@implementation LibOrgBouncycastleJceProviderRFC3280CertPathUtilities

+ (NSString *)CERTIFICATE_POLICIES {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES;
}

+ (NSString *)POLICY_MAPPINGS {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS;
}

+ (NSString *)INHIBIT_ANY_POLICY {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY;
}

+ (NSString *)ISSUING_DISTRIBUTION_POINT {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT;
}

+ (NSString *)FRESHEST_CRL {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL;
}

+ (NSString *)DELTA_CRL_INDICATOR {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR;
}

+ (NSString *)POLICY_CONSTRAINTS {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS;
}

+ (NSString *)BASIC_CONSTRAINTS {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS;
}

+ (NSString *)CRL_DISTRIBUTION_POINTS {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS;
}

+ (NSString *)SUBJECT_ALTERNATIVE_NAME {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME;
}

+ (NSString *)NAME_CONSTRAINTS {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS;
}

+ (NSString *)AUTHORITY_KEY_IDENTIFIER {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER;
}

+ (NSString *)KEY_USAGE {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE;
}

+ (NSString *)CRL_NUMBER {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER;
}

+ (NSString *)ANY_POLICY {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY;
}

+ (jint)KEY_CERT_SIGN {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_CERT_SIGN;
}

+ (jint)CRL_SIGN {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_SIGN;
}

+ (IOSObjectArray *)crlReasons {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_crlReasons;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)processCRLB2WithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
                                                             withId:(id)cert
                                        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, cert, crl);
}

+ (void)processCRLB1WithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
                                                             withId:(id)cert
                                        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, cert, crl);
}

+ (LibOrgBouncycastleJceProviderReasonsMask *)processCRLDWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                     withLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withLibOrgBouncycastleAsn1X509DistributionPoint_(crl, dp);
}

+ (id<JavaUtilSet>)processCRLFWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                                   withId:(id)cert
                      withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)defaultCRLSignCert
                                withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)defaultCRLSignKey
       withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                         withJavaUtilList:(id<JavaUtilList>)certPathCerts
             withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(crl, cert, defaultCRLSignCert, defaultCRLSignKey, paramsPKIX, certPathCerts, helper);
}

+ (id<JavaSecurityPublicKey>)processCRLGWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                                    withJavaUtilSet:(id<JavaUtilSet>)keys {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(crl, keys);
}

+ (JavaSecurityCertX509CRL *)processCRLHWithJavaUtilSet:(id<JavaUtilSet>)deltacrls
                              withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(deltacrls, key);
}

+ (id<JavaUtilSet>)processCRLA1iWithJavaUtilDate:(JavaUtilDate *)currentDate
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                     withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLA1iWithJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(currentDate, paramsPKIX, cert, crl);
}

+ (IOSObjectArray *)processCRLA1iiWithJavaUtilDate:(JavaUtilDate *)currentDate
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
               withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                       withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLA1iiWithJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(currentDate, paramsPKIX, cert, crl);
}

+ (void)processCRLCWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)deltaCRL
                   withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completeCRL
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(deltaCRL, completeCRL, pkixParams);
}

+ (void)processCRLIWithJavaUtilDate:(JavaUtilDate *)validDate
        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)deltacrl
                             withId:(id)cert
withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(validDate, deltacrl, cert, certStatus, pkixParams);
}

+ (void)processCRLJWithJavaUtilDate:(JavaUtilDate *)validDate
        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completecrl
                             withId:(id)cert
withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(validDate, completecrl, cert, certStatus);
}

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)prepareCertBWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                  withInt:(jint)index
                                                                    withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                                  withInt:(jint)policyMapping {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareCertBWithJavaSecurityCertCertPath_withInt_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withInt_(certPath, index, policyNodes, validPolicyTree, policyMapping);
}

+ (void)prepareNextCertAWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertAWithJavaSecurityCertCertPath_withInt_(certPath, index);
}

+ (void)processCertFWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                         withInt:(jint)index
 withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                         withInt:(jint)explicitPolicy {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertFWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withInt_(certPath, index, validPolicyTree, explicitPolicy);
}

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)processCertEWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                  withInt:(jint)index
                                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertEWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(certPath, index, validPolicyTree);
}

+ (void)processCertBCWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                          withInt:(jint)index
withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator:(LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *)nameConstraintValidator {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertBCWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_(certPath, index, nameConstraintValidator);
}

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)processCertDWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                  withInt:(jint)index
                                                                          withJavaUtilSet:(id<JavaUtilSet>)acceptablePolicies
                                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                    withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                                                  withInt:(jint)inhibitAnyPolicy {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertDWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withInt_(certPath, index, acceptablePolicies, validPolicyTree, policyNodes, inhibitAnyPolicy);
}

+ (void)processCertAWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                         withInt:(jint)index
                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                     withBoolean:(jboolean)verificationAlreadyPerformed
          withLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)workingIssuerName
             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
    withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertAWithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withInt_withJavaSecurityPublicKey_withBoolean_withLibOrgBouncycastleAsn1X500X500Name_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(certPath, paramsPKIX, index, workingPublicKey, verificationAlreadyPerformed, workingIssuerName, sign, helper);
}

+ (jint)prepareNextCertI1WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)explicitPolicy {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI1WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
}

+ (jint)prepareNextCertI2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)policyMapping {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI2WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, policyMapping);
}

+ (void)prepareNextCertGWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator:(LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *)nameConstraintValidator {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertGWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_(certPath, index, nameConstraintValidator);
}

+ (void)checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
             withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                            withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                               withJavaUtilDate:(JavaUtilDate *)validDate
                            withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)defaultCRLSignCert
                                      withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)defaultCRLSignKey
         withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus
                   withLibOrgBouncycastleJceProviderReasonsMask:(LibOrgBouncycastleJceProviderReasonsMask *)reasonMask
                                               withJavaUtilList:(id<JavaUtilList>)certPathCerts
                   withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(dp, paramsPKIX, cert, validDate, defaultCRLSignCert, defaultCRLSignKey, certStatus, reasonMask, certPathCerts, helper);
}

+ (void)checkCRLsWithLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                   withJavaUtilDate:(JavaUtilDate *)validDate
                                withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
                                          withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                                   withJavaUtilList:(id<JavaUtilList>)certPathCerts
                       withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLsWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(paramsPKIX, cert, validDate, sign, workingPublicKey, certPathCerts, helper);
}

+ (jint)prepareNextCertJWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)inhibitAnyPolicy {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertJWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, inhibitAnyPolicy);
}

+ (void)prepareNextCertKWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertKWithJavaSecurityCertCertPath_withInt_(certPath, index);
}

+ (jint)prepareNextCertLWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)maxPathLength {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertLWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, maxPathLength);
}

+ (jint)prepareNextCertMWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)maxPathLength {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertMWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, maxPathLength);
}

+ (void)prepareNextCertNWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertNWithJavaSecurityCertCertPath_withInt_(certPath, index);
}

+ (void)prepareNextCertOWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                     withJavaUtilSet:(id<JavaUtilSet>)criticalExtensions
                                    withJavaUtilList:(id<JavaUtilList>)pathCheckers {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertOWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withJavaUtilList_(certPath, index, criticalExtensions, pathCheckers);
}

+ (jint)prepareNextCertH1WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)explicitPolicy {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH1WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
}

+ (jint)prepareNextCertH2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)policyMapping {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH2WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, policyMapping);
}

+ (jint)prepareNextCertH3WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)inhibitAnyPolicy {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH3WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, inhibitAnyPolicy);
}

+ (jint)wrapupCertAWithInt:(jint)explicitPolicy
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertAWithInt_withJavaSecurityCertX509Certificate_(explicitPolicy, cert);
}

+ (jint)wrapupCertBWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                        withInt:(jint)index
                                        withInt:(jint)explicitPolicy {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertBWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
}

+ (void)wrapupCertFWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                        withInt:(jint)index
                               withJavaUtilList:(id<JavaUtilList>)pathCheckers
                                withJavaUtilSet:(id<JavaUtilSet>)criticalExtensions {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertFWithJavaSecurityCertCertPath_withInt_withJavaUtilList_withJavaUtilSet_(certPath, index, pathCheckers, criticalExtensions);
}

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)wrapupCertGWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                      withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                                                         withJavaUtilSet:(id<JavaUtilSet>)userInitialPolicySet
                                                                                 withInt:(jint)index
                                                                   withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                         withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                         withJavaUtilSet:(id<JavaUtilSet>)acceptablePolicies {
  return LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertGWithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilSet_withInt_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilSet_(certPath, paramsPKIX, userInitialPolicySet, index, policyNodes, validPolicyTree, acceptablePolicies);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 3, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderReasonsMask;", 0xc, 4, 5, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xc, 6, 7, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0xc, 8, 9, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRL;", 0xc, 10, 11, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xc, 12, 13, 2, -1, -1, -1 },
    { NULL, "[LJavaUtilSet;", 0xc, 14, 13, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 15, 16, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 17, 18, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 19, 20, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0xc, 21, 22, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 24, 25, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 26, 27, 23, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0xc, 28, 29, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 30, 31, 23, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0xc, 32, 33, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 34, 35, 36, -1, -1, -1 },
    { NULL, "I", 0xc, 37, 38, 23, -1, -1, -1 },
    { NULL, "I", 0xc, 39, 38, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 40, 31, 23, -1, -1, -1 },
    { NULL, "V", 0xa, 41, 42, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 43, 44, 2, -1, -1, -1 },
    { NULL, "I", 0xc, 45, 38, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 46, 25, 23, -1, -1, -1 },
    { NULL, "I", 0xc, 47, 38, 23, -1, -1, -1 },
    { NULL, "I", 0xc, 48, 38, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 49, 25, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 50, 51, 23, -1, -1, -1 },
    { NULL, "I", 0xc, 52, 38, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 53, 38, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 54, 38, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 55, 56, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 57, 38, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 58, 59, 23, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0xc, 60, 61, 23, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processCRLB2WithLibOrgBouncycastleAsn1X509DistributionPoint:withId:withJavaSecurityCertX509CRL:);
  methods[2].selector = @selector(processCRLB1WithLibOrgBouncycastleAsn1X509DistributionPoint:withId:withJavaSecurityCertX509CRL:);
  methods[3].selector = @selector(processCRLDWithJavaSecurityCertX509CRL:withLibOrgBouncycastleAsn1X509DistributionPoint:);
  methods[4].selector = @selector(processCRLFWithJavaSecurityCertX509CRL:withId:withJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaUtilList:withLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[5].selector = @selector(processCRLGWithJavaSecurityCertX509CRL:withJavaUtilSet:);
  methods[6].selector = @selector(processCRLHWithJavaUtilSet:withJavaSecurityPublicKey:);
  methods[7].selector = @selector(processCRLA1iWithJavaUtilDate:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaSecurityCertX509CRL:);
  methods[8].selector = @selector(processCRLA1iiWithJavaUtilDate:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaSecurityCertX509CRL:);
  methods[9].selector = @selector(processCRLCWithJavaSecurityCertX509CRL:withJavaSecurityCertX509CRL:withLibOrgBouncycastleJcajcePKIXExtendedParameters:);
  methods[10].selector = @selector(processCRLIWithJavaUtilDate:withJavaSecurityCertX509CRL:withId:withLibOrgBouncycastleJceProviderJceProviderCertStatus:withLibOrgBouncycastleJcajcePKIXExtendedParameters:);
  methods[11].selector = @selector(processCRLJWithJavaUtilDate:withJavaSecurityCertX509CRL:withId:withLibOrgBouncycastleJceProviderJceProviderCertStatus:);
  methods[12].selector = @selector(prepareCertBWithJavaSecurityCertCertPath:withInt:withJavaUtilListArray:withLibOrgBouncycastleJceProviderPKIXPolicyNode:withInt:);
  methods[13].selector = @selector(prepareNextCertAWithJavaSecurityCertCertPath:withInt:);
  methods[14].selector = @selector(processCertFWithJavaSecurityCertCertPath:withInt:withLibOrgBouncycastleJceProviderPKIXPolicyNode:withInt:);
  methods[15].selector = @selector(processCertEWithJavaSecurityCertCertPath:withInt:withLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[16].selector = @selector(processCertBCWithJavaSecurityCertCertPath:withInt:withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator:);
  methods[17].selector = @selector(processCertDWithJavaSecurityCertCertPath:withInt:withJavaUtilSet:withLibOrgBouncycastleJceProviderPKIXPolicyNode:withJavaUtilListArray:withInt:);
  methods[18].selector = @selector(processCertAWithJavaSecurityCertCertPath:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withInt:withJavaSecurityPublicKey:withBoolean:withLibOrgBouncycastleAsn1X500X500Name:withJavaSecurityCertX509Certificate:withLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[19].selector = @selector(prepareNextCertI1WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[20].selector = @selector(prepareNextCertI2WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[21].selector = @selector(prepareNextCertGWithJavaSecurityCertCertPath:withInt:withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator:);
  methods[22].selector = @selector(checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaUtilDate:withJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withLibOrgBouncycastleJceProviderJceProviderCertStatus:withLibOrgBouncycastleJceProviderReasonsMask:withJavaUtilList:withLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[23].selector = @selector(checkCRLsWithLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaUtilDate:withJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withJavaUtilList:withLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[24].selector = @selector(prepareNextCertJWithJavaSecurityCertCertPath:withInt:withInt:);
  methods[25].selector = @selector(prepareNextCertKWithJavaSecurityCertCertPath:withInt:);
  methods[26].selector = @selector(prepareNextCertLWithJavaSecurityCertCertPath:withInt:withInt:);
  methods[27].selector = @selector(prepareNextCertMWithJavaSecurityCertCertPath:withInt:withInt:);
  methods[28].selector = @selector(prepareNextCertNWithJavaSecurityCertCertPath:withInt:);
  methods[29].selector = @selector(prepareNextCertOWithJavaSecurityCertCertPath:withInt:withJavaUtilSet:withJavaUtilList:);
  methods[30].selector = @selector(prepareNextCertH1WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[31].selector = @selector(prepareNextCertH2WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[32].selector = @selector(prepareNextCertH3WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[33].selector = @selector(wrapupCertAWithInt:withJavaSecurityCertX509Certificate:);
  methods[34].selector = @selector(wrapupCertBWithJavaSecurityCertCertPath:withInt:withInt:);
  methods[35].selector = @selector(wrapupCertFWithJavaSecurityCertCertPath:withInt:withJavaUtilList:withJavaUtilSet:);
  methods[36].selector = @selector(wrapupCertGWithJavaSecurityCertCertPath:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaUtilSet:withInt:withJavaUtilListArray:withLibOrgBouncycastleJceProviderPKIXPolicyNode:withJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CRL_UTIL", "LLibOrgBouncycastleJceProviderJcePKIXCRLUtil;", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "CERTIFICATE_POLICIES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "POLICY_MAPPINGS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 64, -1, -1 },
    { "INHIBIT_ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "ISSUING_DISTRIBUTION_POINT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "FRESHEST_CRL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 67, -1, -1 },
    { "DELTA_CRL_INDICATOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 68, -1, -1 },
    { "POLICY_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 69, -1, -1 },
    { "BASIC_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 70, -1, -1 },
    { "CRL_DISTRIBUTION_POINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 71, -1, -1 },
    { "SUBJECT_ALTERNATIVE_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 72, -1, -1 },
    { "NAME_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 73, -1, -1 },
    { "AUTHORITY_KEY_IDENTIFIER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 74, -1, -1 },
    { "KEY_USAGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 75, -1, -1 },
    { "CRL_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 76, -1, -1 },
    { "ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 77, -1, -1 },
    { "KEY_CERT_SIGN", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_CERT_SIGN, 0x1c, -1, -1, -1, -1 },
    { "CRL_SIGN", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_SIGN, 0x1c, -1, -1, -1, -1 },
    { "crlReasons", "[LNSString;", .constantValue.asLong = 0, 0x1c, -1, 78, -1, -1 },
  };
  static const void *ptrTable[] = { "processCRLB2", "LLibOrgBouncycastleAsn1X509DistributionPoint;LNSObject;LJavaSecurityCertX509CRL;", "LLibOrgBouncycastleJceProviderAnnotatedException;", "processCRLB1", "processCRLD", "LJavaSecurityCertX509CRL;LLibOrgBouncycastleAsn1X509DistributionPoint;", "processCRLF", "LJavaSecurityCertX509CRL;LNSObject;LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaUtilList;LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "processCRLG", "LJavaSecurityCertX509CRL;LJavaUtilSet;", "processCRLH", "LJavaUtilSet;LJavaSecurityPublicKey;", "processCRLA1i", "LJavaUtilDate;LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaSecurityCertX509Certificate;LJavaSecurityCertX509CRL;", "processCRLA1ii", "processCRLC", "LJavaSecurityCertX509CRL;LJavaSecurityCertX509CRL;LLibOrgBouncycastleJcajcePKIXExtendedParameters;", "processCRLI", "LJavaUtilDate;LJavaSecurityCertX509CRL;LNSObject;LLibOrgBouncycastleJceProviderJceProviderCertStatus;LLibOrgBouncycastleJcajcePKIXExtendedParameters;", "processCRLJ", "LJavaUtilDate;LJavaSecurityCertX509CRL;LNSObject;LLibOrgBouncycastleJceProviderJceProviderCertStatus;", "prepareCertB", "LJavaSecurityCertCertPath;I[LJavaUtilList;LLibOrgBouncycastleJceProviderPKIXPolicyNode;I", "LJavaSecurityCertCertPathValidatorException;", "prepareNextCertA", "LJavaSecurityCertCertPath;I", "processCertF", "LJavaSecurityCertCertPath;ILLibOrgBouncycastleJceProviderPKIXPolicyNode;I", "processCertE", "LJavaSecurityCertCertPath;ILLibOrgBouncycastleJceProviderPKIXPolicyNode;", "processCertBC", "LJavaSecurityCertCertPath;ILLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator;", "processCertD", "LJavaSecurityCertCertPath;ILJavaUtilSet;LLibOrgBouncycastleJceProviderPKIXPolicyNode;[LJavaUtilList;I", "processCertA", "LJavaSecurityCertCertPath;LLibOrgBouncycastleJcajcePKIXExtendedParameters;ILJavaSecurityPublicKey;ZLLibOrgBouncycastleAsn1X500X500Name;LJavaSecurityCertX509Certificate;LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "LLibOrgBouncycastleJceExceptionExtCertPathValidatorException;", "prepareNextCertI1", "LJavaSecurityCertCertPath;II", "prepareNextCertI2", "prepareNextCertG", "checkCRL", "LLibOrgBouncycastleAsn1X509DistributionPoint;LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaSecurityCertX509Certificate;LJavaUtilDate;LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LLibOrgBouncycastleJceProviderJceProviderCertStatus;LLibOrgBouncycastleJceProviderReasonsMask;LJavaUtilList;LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "checkCRLs", "LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaSecurityCertX509Certificate;LJavaUtilDate;LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LJavaUtilList;LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "prepareNextCertJ", "prepareNextCertK", "prepareNextCertL", "prepareNextCertM", "prepareNextCertN", "prepareNextCertO", "LJavaSecurityCertCertPath;ILJavaUtilSet;LJavaUtilList;", "prepareNextCertH1", "prepareNextCertH2", "prepareNextCertH3", "wrapupCertA", "ILJavaSecurityCertX509Certificate;", "wrapupCertB", "wrapupCertF", "LJavaSecurityCertCertPath;ILJavaUtilList;LJavaUtilSet;", "wrapupCertG", "LJavaSecurityCertCertPath;LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaUtilSet;I[LJavaUtilList;LLibOrgBouncycastleJceProviderPKIXPolicyNode;LJavaUtilSet;", &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_UTIL, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY, &LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_crlReasons };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderRFC3280CertPathUtilities = { "RFC3280CertPathUtilities", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 37, 19, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderRFC3280CertPathUtilities;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJceProviderRFC3280CertPathUtilities class]) {
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_UTIL = new_LibOrgBouncycastleJceProviderJcePKIXCRLUtil_init();
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, certificatePolicies))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, policyMappings))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, inhibitAnyPolicy))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuingDistributionPoint))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, freshestCRL))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, deltaCRLIndicator))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, policyConstraints))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, basicConstraints))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, cRLDistributionPoints))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, subjectAlternativeName))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, nameConstraints))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, authorityKeyIdentifier))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, keyUsage))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, cRLNumber))) getId];
    LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_crlReasons = [IOSObjectArray newArrayWithObjects:(id[]){ @"unspecified", @"keyCompromise", @"cACompromise", @"affiliationChanged", @"superseded", @"cessationOfOperation", @"certificateHold", @"unknown", @"removeFromCRL", @"privilegeWithdrawn", @"aACompromise" } count:11 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities)
  }
}

@end

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_init(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJceProviderRFC3280CertPathUtilities *new_LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, init)
}

LibOrgBouncycastleJceProviderRFC3280CertPathUtilities *create_LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, init)
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id cert, JavaSecurityCertX509CRL *crl) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  LibOrgBouncycastleAsn1X509IssuingDistributionPoint *idp = nil;
  @try {
    idp = LibOrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuing distribution point extension could not be decoded.", e);
  }
  if (idp != nil) {
    if ([idp getDistributionPoint] != nil) {
      LibOrgBouncycastleAsn1X509DistributionPointName *dpName = [((LibOrgBouncycastleAsn1X509IssuingDistributionPoint *) nil_chk(LibOrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(idp))) getDistributionPoint];
      id<JavaUtilList> names = new_JavaUtilArrayList_init();
      if ([((LibOrgBouncycastleAsn1X509DistributionPointName *) nil_chk(dpName)) getType] == LibOrgBouncycastleAsn1X509DistributionPointName_FULL_NAME) {
        IOSObjectArray *genNames = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk(LibOrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([dpName getName]))) getNames];
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
          [names addWithId:IOSObjectArray_Get(genNames, j)];
        }
      }
      if ([dpName getType] == LibOrgBouncycastleAsn1X509DistributionPointName_NAME_RELATIVE_TO_CRL_ISSUER) {
        LibOrgBouncycastleAsn1ASN1EncodableVector *vec = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
        @try {
          id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl)))) getObjects];
          while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
            [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>) cast_check([e nextElement], LibOrgBouncycastleAsn1ASN1Encodable_class_())];
          }
        }
        @catch (JavaLangException *e) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Could not read CRL issuer.", e);
        }
        [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:[dpName getName]];
        [names addWithId:new_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_(new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(vec)))];
      }
      jboolean matches = false;
      if ([((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(dp)) getDistributionPoint] != nil) {
        dpName = [dp getDistributionPoint];
        IOSObjectArray *genNames = nil;
        if ([((LibOrgBouncycastleAsn1X509DistributionPointName *) nil_chk(dpName)) getType] == LibOrgBouncycastleAsn1X509DistributionPointName_FULL_NAME) {
          genNames = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk(LibOrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([dpName getName]))) getNames];
        }
        if ([dpName getType] == LibOrgBouncycastleAsn1X509DistributionPointName_NAME_RELATIVE_TO_CRL_ISSUER) {
          if ([dp getCRLIssuer] != nil) {
            genNames = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk([dp getCRLIssuer])) getNames];
          }
          else {
            genNames = [IOSObjectArray newArrayWithLength:1 type:LibOrgBouncycastleAsn1X509GeneralName_class_()];
            @try {
              (void) IOSObjectArray_SetAndConsume(genNames, 0, new_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) getEncoded])));
            }
            @catch (JavaLangException *e) {
              @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Could not read certificate issuer.", e);
            }
          }
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
            id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getName])) toASN1Primitive]))) getObjects];
            LibOrgBouncycastleAsn1ASN1EncodableVector *vec = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
            while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
              [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>) cast_check([e nextElement], LibOrgBouncycastleAsn1ASN1Encodable_class_())];
            }
            [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:[dpName getName]];
            (void) IOSObjectArray_SetAndConsume(genNames, j, new_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_(new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(vec))));
          }
        }
        if (genNames != nil) {
          for (jint j = 0; j < genNames->size_; j++) {
            if ([names containsWithId:IOSObjectArray_Get(genNames, j)]) {
              matches = true;
              break;
            }
          }
        }
        if (!matches) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");
        }
      }
      else {
        if ([dp getCRLIssuer] == nil) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Either the cRLIssuer or the distributionPoint field must be contained in DistributionPoint.");
        }
        IOSObjectArray *genNames = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk([dp getCRLIssuer])) getNames];
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
          if ([names containsWithId:IOSObjectArray_Get(genNames, j)]) {
            matches = true;
            break;
          }
        }
        if (!matches) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");
        }
      }
    }
    LibOrgBouncycastleAsn1X509BasicConstraints *bc = nil;
    @try {
      bc = LibOrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_((id<JavaSecurityCertX509Extension>) cast_check(cert, JavaSecurityCertX509Extension_class_()), LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS));
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Basic constraints extension could not be decoded.", e);
    }
    if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
      if ([idp onlyContainsUserCerts] && (bc != nil && [bc isCA])) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"CA Cert CRL only contains user certificates.");
      }
      if ([idp onlyContainsCACerts] && (bc == nil || ![bc isCA])) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"End CRL only contains CA certificates.");
      }
    }
    if ([idp onlyContainsAttributeCerts]) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"onlyContainsAttributeCerts boolean is asserted.");
    }
  }
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id cert, JavaSecurityCertX509CRL *crl) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  LibOrgBouncycastleAsn1ASN1Primitive *idp = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT);
  jboolean isIndirect = false;
  if (idp != nil) {
    if ([((LibOrgBouncycastleAsn1X509IssuingDistributionPoint *) nil_chk(LibOrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(idp))) isIndirectCRL]) {
      isIndirect = true;
    }
  }
  IOSByteArray *issuerBytes;
  @try {
    issuerBytes = [((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) getEncoded];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Exception encoding CRL issuer: ", [e getMessage]), e);
  }
  jboolean matchIssuer = false;
  if ([((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(dp)) getCRLIssuer] != nil) {
    IOSObjectArray *genNames = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk([dp getCRLIssuer])) getNames];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
      if ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getTagNo] == LibOrgBouncycastleAsn1X509GeneralName_directoryName) {
        @try {
          if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getName])) toASN1Primitive])) getEncoded], issuerBytes)) {
            matchIssuer = true;
          }
        }
        @catch (JavaIoIOException *e) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"CRL issuer information from distribution point cannot be decoded.", e);
        }
      }
    }
    if (matchIssuer && !isIndirect) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Distribution point contains cRLIssuer field but CRL is not indirect.");
    }
    if (!matchIssuer) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"CRL issuer of CRL does not match CRL issuer of distribution point.");
    }
  }
  else {
    if ([((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) isEqual:LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert)]) {
      matchIssuer = true;
    }
  }
  if (!matchIssuer) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Cannot find matching CRL issuer for certificate.");
  }
}

LibOrgBouncycastleJceProviderReasonsMask *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withLibOrgBouncycastleAsn1X509DistributionPoint_(JavaSecurityCertX509CRL *crl, LibOrgBouncycastleAsn1X509DistributionPoint *dp) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  LibOrgBouncycastleAsn1X509IssuingDistributionPoint *idp = nil;
  @try {
    idp = LibOrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuing distribution point extension could not be decoded.", e);
  }
  if (idp != nil && [idp getOnlySomeReasons] != nil && [((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(dp)) getReasons] != nil) {
    return [new_LibOrgBouncycastleJceProviderReasonsMask_initWithLibOrgBouncycastleAsn1X509ReasonFlags_([((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(dp)) getReasons]) intersectWithLibOrgBouncycastleJceProviderReasonsMask:new_LibOrgBouncycastleJceProviderReasonsMask_initWithLibOrgBouncycastleAsn1X509ReasonFlags_([idp getOnlySomeReasons])];
  }
  if ((idp == nil || [idp getOnlySomeReasons] == nil) && [((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(dp)) getReasons] == nil) {
    return JreLoadStatic(LibOrgBouncycastleJceProviderReasonsMask, allReasons);
  }
  return [([((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(dp)) getReasons] == nil ? JreLoadStatic(LibOrgBouncycastleJceProviderReasonsMask, allReasons) : new_LibOrgBouncycastleJceProviderReasonsMask_initWithLibOrgBouncycastleAsn1X509ReasonFlags_([dp getReasons])) intersectWithLibOrgBouncycastleJceProviderReasonsMask:idp == nil ? JreLoadStatic(LibOrgBouncycastleJceProviderReasonsMask, allReasons) : new_LibOrgBouncycastleJceProviderReasonsMask_initWithLibOrgBouncycastleAsn1X509ReasonFlags_([idp getOnlySomeReasons])];
}

id<JavaUtilSet> LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(JavaSecurityCertX509CRL *crl, id cert, JavaSecurityCertX509Certificate *defaultCRLSignCert, id<JavaSecurityPublicKey> defaultCRLSignKey, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  JavaSecurityCertX509CertSelector *certSelector = new_JavaSecurityCertX509CertSelector_init();
  @try {
    IOSByteArray *issuerPrincipal = [((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) getEncoded];
    [certSelector setSubjectWithByteArray:issuerPrincipal];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Subject criteria for certificate selector to find issuer certificate for CRL could not be set.", e);
  }
  LibOrgBouncycastleJcajcePKIXCertStoreSelector *selector = [new_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(certSelector) build];
  id<JavaUtilCollection> coll;
  @try {
    coll = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(selector, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getCertificateStores]);
    [((id<JavaUtilCollection>) nil_chk(coll)) addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(selector, [paramsPKIX getCertStores])];
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuer certificate for CRL cannot be searched.", e);
  }
  [((id<JavaUtilCollection>) nil_chk(coll)) addWithId:defaultCRLSignCert];
  id<JavaUtilIterator> cert_it = [coll iterator];
  id<JavaUtilList> validCerts = new_JavaUtilArrayList_init();
  id<JavaUtilList> validKeys = new_JavaUtilArrayList_init();
  while ([((id<JavaUtilIterator>) nil_chk(cert_it)) hasNext]) {
    JavaSecurityCertX509Certificate *signingCert = (JavaSecurityCertX509Certificate *) cast_chk([cert_it next], [JavaSecurityCertX509Certificate class]);
    if ([((JavaSecurityCertX509Certificate *) nil_chk(signingCert)) isEqual:defaultCRLSignCert]) {
      [validCerts addWithId:signingCert];
      [validKeys addWithId:defaultCRLSignKey];
      continue;
    }
    @try {
      LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi *builder = new_LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi_init();
      JavaSecurityCertX509CertSelector *tmpCertSelector = new_JavaSecurityCertX509CertSelector_init();
      [tmpCertSelector setCertificateWithJavaSecurityCertX509Certificate:signingCert];
      LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *paramsBuilder = [new_LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder_initWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(paramsPKIX) setTargetConstraintsWithLibOrgBouncycastleJcajcePKIXCertStoreSelector:[new_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(tmpCertSelector) build]];
      if ([((id<JavaUtilList>) nil_chk(certPathCerts)) containsWithId:signingCert]) {
        [((LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *) nil_chk(paramsBuilder)) setRevocationEnabledWithBoolean:false];
      }
      else {
        [((LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *) nil_chk(paramsBuilder)) setRevocationEnabledWithBoolean:true];
      }
      LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *extParams = [new_LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithLibOrgBouncycastleJcajcePKIXExtendedParameters_([paramsBuilder build]) build];
      id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk([((id<JavaSecurityCertCertPathBuilderResult>) nil_chk([builder engineBuildWithJavaSecurityCertCertPathParameters:extParams])) getCertPath])) getCertificates];
      [validCerts addWithId:signingCert];
      [validKeys addWithId:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(certs, 0, helper)];
    }
    @catch (JavaSecurityCertCertPathBuilderException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"CertPath for CRL signer failed to validate.", e);
    }
    @catch (JavaSecurityCertCertPathValidatorException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Public key of issuer certificate of CRL could not be retrieved.", e);
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_([e getMessage]);
    }
  }
  id<JavaUtilSet> checkKeys = new_JavaUtilHashSet_init();
  LibOrgBouncycastleJceProviderAnnotatedException *lastException = nil;
  for (jint i = 0; i < [validCerts size]; i++) {
    JavaSecurityCertX509Certificate *signCert = (JavaSecurityCertX509Certificate *) cast_chk([validCerts getWithInt:i], [JavaSecurityCertX509Certificate class]);
    IOSBooleanArray *keyusage = [((JavaSecurityCertX509Certificate *) nil_chk(signCert)) getKeyUsage];
    if (keyusage != nil && (keyusage->size_ < 7 || !IOSBooleanArray_Get(keyusage, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_SIGN))) {
      lastException = new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Issuer certificate key usage extension does not permit CRL signing.");
    }
    else {
      [checkKeys addWithId:[validKeys getWithInt:i]];
    }
  }
  if ([checkKeys isEmpty] && lastException == nil) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Cannot find a valid issuer certificate.");
  }
  if ([checkKeys isEmpty] && lastException != nil) {
    @throw lastException;
  }
  return checkKeys;
}

id<JavaSecurityPublicKey> LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(JavaSecurityCertX509CRL *crl, id<JavaUtilSet> keys) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  JavaLangException *lastException = nil;
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(keys)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaSecurityPublicKey> key = (id<JavaSecurityPublicKey>) cast_check([it next], JavaSecurityPublicKey_class_());
    @try {
      [((JavaSecurityCertX509CRL *) nil_chk(crl)) verifyWithJavaSecurityPublicKey:key];
      return key;
    }
    @catch (JavaLangException *e) {
      lastException = e;
    }
  }
  @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot verify CRL.", lastException);
}

JavaSecurityCertX509CRL *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(id<JavaUtilSet> deltacrls, id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  JavaLangException *lastException = nil;
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(deltacrls)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk([it next], [JavaSecurityCertX509CRL class]);
    @try {
      [((JavaSecurityCertX509CRL *) nil_chk(crl)) verifyWithJavaSecurityPublicKey:key];
      return crl;
    }
    @catch (JavaLangException *e) {
      lastException = e;
    }
  }
  if (lastException != nil) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot verify delta CRL.", lastException);
  }
  return nil;
}

id<JavaUtilSet> LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLA1iWithJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(JavaUtilDate *currentDate, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaSecurityCertX509CRL *crl) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilSet> set = new_JavaUtilHashSet_init();
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isUseDeltasEnabled]) {
    LibOrgBouncycastleAsn1X509CRLDistPoint *freshestCRL = nil;
    @try {
      freshestCRL = LibOrgBouncycastleAsn1X509CRLDistPoint_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL));
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Freshest CRL extension could not be decoded from certificate.", e);
    }
    if (freshestCRL == nil) {
      @try {
        freshestCRL = LibOrgBouncycastleAsn1X509CRLDistPoint_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL));
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Freshest CRL extension could not be decoded from CRL.", e);
      }
    }
    if (freshestCRL != nil) {
      id<JavaUtilList> crlStores = new_JavaUtilArrayList_init();
      [crlStores addAllWithJavaUtilCollection:[paramsPKIX getCRLStores]];
      @try {
        [crlStores addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint_withJavaUtilMap_(freshestCRL, [paramsPKIX getNamedCRLStoreMap])];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No new delta CRL locations could be added from Freshest CRL extension.", e);
      }
      @try {
        [set addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(currentDate, crl, [paramsPKIX getCertStores], crlStores)];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Exception obtaining delta CRLs.", e);
      }
    }
  }
  return set;
}

IOSObjectArray *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLA1iiWithJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(JavaUtilDate *currentDate, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaSecurityCertX509CRL *crl) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilSet> deltaSet = new_JavaUtilHashSet_init();
  JavaSecurityCertX509CRLSelector *crlselect = new_JavaSecurityCertX509CRLSelector_init();
  [crlselect setCertificateCheckingWithJavaSecurityCertX509Certificate:cert];
  @try {
    [crlselect addIssuerNameWithByteArray:[((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) getEncoded]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Cannot extract issuer from CRL.", e), e);
  }
  LibOrgBouncycastleJcajcePKIXCRLStoreSelector *extSelect = [((LibOrgBouncycastleJcajcePKIXCRLStoreSelector_Builder *) nil_chk([new_LibOrgBouncycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(crlselect) setCompleteCRLEnabledWithBoolean:true])) build];
  JavaUtilDate *validityDate = currentDate;
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getDate] != nil) {
    validityDate = [paramsPKIX getDate];
  }
  id<JavaUtilSet> completeSet = [((LibOrgBouncycastleJceProviderJcePKIXCRLUtil *) nil_chk(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_UTIL)) findCRLsWithLibOrgBouncycastleJcajcePKIXCRLStoreSelector:extSelect withJavaUtilDate:validityDate withJavaUtilList:[paramsPKIX getCertStores] withJavaUtilList:[paramsPKIX getCRLStores]];
  if ([paramsPKIX isUseDeltasEnabled]) {
    @try {
      [deltaSet addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(validityDate, crl, [paramsPKIX getCertStores], [paramsPKIX getCRLStores])];
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Exception obtaining delta CRLs.", e);
    }
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ completeSet, deltaSet } count:2 type:JavaUtilSet_class_()];
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(JavaSecurityCertX509CRL *deltaCRL, JavaSecurityCertX509CRL *completeCRL, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  if (deltaCRL == nil) {
    return;
  }
  LibOrgBouncycastleAsn1X509IssuingDistributionPoint *completeidp = nil;
  @try {
    completeidp = LibOrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(completeCRL, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuing distribution point extension could not be decoded.", e);
  }
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(pkixParams)) isUseDeltasEnabled]) {
    if (![((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(deltaCRL))) isEqual:LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(completeCRL)]) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Complete CRL issuer does not match delta CRL issuer.");
    }
    LibOrgBouncycastleAsn1X509IssuingDistributionPoint *deltaidp = nil;
    @try {
      deltaidp = LibOrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(deltaCRL, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT));
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuing distribution point extension from delta CRL could not be decoded.", e);
    }
    jboolean match = false;
    if (completeidp == nil) {
      if (deltaidp == nil) {
        match = true;
      }
    }
    else {
      if ([completeidp isEqual:deltaidp]) {
        match = true;
      }
    }
    if (!match) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Issuing distribution point extension from delta CRL and complete CRL does not match.");
    }
    LibOrgBouncycastleAsn1ASN1Primitive *completeKeyIdentifier = nil;
    @try {
      completeKeyIdentifier = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(completeCRL, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER);
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Authority key identifier extension could not be extracted from complete CRL.", e);
    }
    LibOrgBouncycastleAsn1ASN1Primitive *deltaKeyIdentifier = nil;
    @try {
      deltaKeyIdentifier = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(deltaCRL, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER);
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Authority key identifier extension could not be extracted from delta CRL.", e);
    }
    if (completeKeyIdentifier == nil) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"CRL authority key identifier is null.");
    }
    if (deltaKeyIdentifier == nil) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Delta CRL authority key identifier is null.");
    }
    if (![completeKeyIdentifier isEqual:deltaKeyIdentifier]) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Delta CRL authority key identifier does not match complete CRL authority key identifier.");
    }
  }
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *deltacrl, id cert, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(pkixParams)) isUseDeltasEnabled] && deltacrl != nil) {
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(validDate, deltacrl, cert, certStatus);
  }
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *completecrl, id cert, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  if ([((LibOrgBouncycastleJceProviderJceProviderCertStatus *) nil_chk(certStatus)) getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED) {
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(validDate, completecrl, cert, certStatus);
  }
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareCertBWithJavaSecurityCertCertPath_withInt_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withInt_(JavaSecurityCertCertPath *certPath, jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, jint policyMapping) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  jint n = [certs size];
  jint i = n - index;
  LibOrgBouncycastleAsn1ASN1Sequence *pm = nil;
  @try {
    pm = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS));
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *ex) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy mappings extension could not be decoded.", ex, certPath, index);
  }
  LibOrgBouncycastleJceProviderPKIXPolicyNode *_validPolicyTree = validPolicyTree;
  if (pm != nil) {
    LibOrgBouncycastleAsn1ASN1Sequence *mappings = pm;
    id<JavaUtilMap> m_idp = new_JavaUtilHashMap_init();
    id<JavaUtilSet> s_idp = new_JavaUtilHashSet_init();
    for (jint j = 0; j < [mappings size]; j++) {
      LibOrgBouncycastleAsn1ASN1Sequence *mapping = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([mappings getObjectAtWithInt:j], [LibOrgBouncycastleAsn1ASN1Sequence class]);
      NSString *id_p = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(mapping)) getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class])))) getId];
      NSString *sd_p = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([mapping getObjectAtWithInt:1], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class])))) getId];
      id<JavaUtilSet> tmp;
      if (![m_idp containsKeyWithId:id_p]) {
        tmp = new_JavaUtilHashSet_init();
        [tmp addWithId:sd_p];
        (void) [m_idp putWithId:id_p withId:tmp];
        [s_idp addWithId:id_p];
      }
      else {
        tmp = (id<JavaUtilSet>) cast_check([m_idp getWithId:id_p], JavaUtilSet_class_());
        [((id<JavaUtilSet>) nil_chk(tmp)) addWithId:sd_p];
      }
    }
    id<JavaUtilIterator> it_idp = [s_idp iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it_idp)) hasNext]) {
      NSString *id_p = (NSString *) cast_chk([it_idp next], [NSString class]);
      if (policyMapping > 0) {
        jboolean idp_found = false;
        id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
          if ([((NSString *) nil_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
            idp_found = true;
            node->expectedPolicies_ = (id<JavaUtilSet>) cast_check([m_idp getWithId:id_p], JavaUtilSet_class_());
            break;
          }
        }
        if (!idp_found) {
          nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) iterator];
          while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            if ([((NSString *) nil_chk(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy]]) {
              id<JavaUtilSet> pq = nil;
              LibOrgBouncycastleAsn1ASN1Sequence *policies = nil;
              @try {
                policies = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES), [LibOrgBouncycastleAsn1ASN1Sequence class]);
              }
              @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
                @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Certificate policies extension could not be decoded.", e, certPath, index);
              }
              id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(policies)) getObjects];
              while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
                LibOrgBouncycastleAsn1X509PolicyInformation *pinfo = nil;
                @try {
                  pinfo = LibOrgBouncycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
                }
                @catch (JavaLangException *ex) {
                  @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy information could not be decoded.", ex, certPath, index);
                }
                if ([LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509PolicyInformation *) nil_chk(pinfo)) getPolicyIdentifier])) getId]]) {
                  @try {
                    pq = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_([pinfo getPolicyQualifiers]);
                  }
                  @catch (JavaSecurityCertCertPathValidatorException *ex) {
                    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy qualifier info set could not be decoded.", ex, certPath, index);
                  }
                  break;
                }
              }
              jboolean ci = false;
              if ([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs] != nil) {
                ci = [((id<JavaUtilSet>) nil_chk([cert getCriticalExtensionOIDs])) containsWithId:LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES];
              }
              LibOrgBouncycastleJceProviderPKIXPolicyNode *p_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
              if ([LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) getValidPolicy]]) {
                LibOrgBouncycastleJceProviderPKIXPolicyNode *c_node = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), i, (id<JavaUtilSet>) cast_check([m_idp getWithId:id_p], JavaUtilSet_class_()), p_node, pq, id_p, ci);
                [p_node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:c_node];
                [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) addWithId:c_node];
              }
              break;
            }
          }
        }
      }
      else if (policyMapping <= 0) {
        id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
          if ([((NSString *) nil_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *p_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) removeChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:node];
            [nodes_i remove];
            for (jint k = (i - 1); k >= 0; k--) {
              id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, k);
              for (jint l = 0; l < [((id<JavaUtilList>) nil_chk(nodes)) size]; l++) {
                LibOrgBouncycastleJceProviderPKIXPolicyNode *node2 = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:l], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
                if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node2)) hasChildren]) {
                  _validPolicyTree = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(_validPolicyTree, policyNodes, node2);
                  if (_validPolicyTree == nil) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _validPolicyTree;
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertAWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleAsn1ASN1Sequence *pm = nil;
  @try {
    pm = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS));
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *ex) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy mappings extension could not be decoded.", ex, certPath, index);
  }
  if (pm != nil) {
    LibOrgBouncycastleAsn1ASN1Sequence *mappings = pm;
    for (jint j = 0; j < [mappings size]; j++) {
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *issuerDomainPolicy = nil;
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *subjectDomainPolicy = nil;
      @try {
        LibOrgBouncycastleAsn1ASN1Sequence *mapping = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([mappings getObjectAtWithInt:j]);
        issuerDomainPolicy = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(mapping)) getObjectAtWithInt:0]);
        subjectDomainPolicy = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([mapping getObjectAtWithInt:1]);
      }
      @catch (JavaLangException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy mappings extension contents could not be decoded.", e, certPath, index);
      }
      if ([((NSString *) nil_chk(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(issuerDomainPolicy)) getId]]) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"IssuerDomainPolicy is anyPolicy", nil, certPath, index);
      }
      if ([LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(subjectDomainPolicy)) getId]]) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"SubjectDomainPolicy is anyPolicy,", nil, certPath, index);
      }
    }
  }
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertFWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withInt_(JavaSecurityCertCertPath *certPath, jint index, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, jint explicitPolicy) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  if (explicitPolicy <= 0 && validPolicyTree == nil) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"No valid policy tree found when one expected.", nil, certPath, index);
  }
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertEWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(JavaSecurityCertCertPath *certPath, jint index, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleAsn1ASN1Sequence *certPolicies = nil;
  @try {
    certPolicies = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES));
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Could not read certificate policies extension from certificate.", e, certPath, index);
  }
  if (certPolicies == nil) {
    validPolicyTree = nil;
  }
  return validPolicyTree;
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertBCWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_(JavaSecurityCertCertPath *certPath, jint index, LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *nameConstraintValidator) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  jint n = [certs size];
  jint i = n - index;
  if (!(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert) && (i < n))) {
    LibOrgBouncycastleAsn1X500X500Name *principal = LibOrgBouncycastleJceProviderPrincipalUtils_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(cert);
    LibOrgBouncycastleAsn1ASN1Sequence *dns;
    @try {
      dns = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(principal)) getEncoded]);
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Exception extracting subject name when checking subtrees.", e, certPath, index);
    }
    @try {
      [((LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *) nil_chk(nameConstraintValidator)) checkPermittedDNWithLibOrgBouncycastleAsn1ASN1Sequence:dns];
      [nameConstraintValidator checkExcludedDNWithLibOrgBouncycastleAsn1ASN1Sequence:dns];
    }
    @catch (LibOrgBouncycastleJceProviderPKIXNameConstraintValidatorException *e) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subtree check for certificate subject failed.", e, certPath, index);
    }
    LibOrgBouncycastleAsn1X509GeneralNames *altName = nil;
    @try {
      altName = LibOrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME));
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subject alternative name extension could not be decoded.", e, certPath, index);
    }
    IOSObjectArray *emails = [((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_(dns))) getRDNsWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1X500StyleBCStyle, EmailAddress)];
    for (jint eI = 0; eI != ((IOSObjectArray *) nil_chk(emails))->size_; eI++) {
      NSString *email = [((id<LibOrgBouncycastleAsn1ASN1String>) nil_chk(((id<LibOrgBouncycastleAsn1ASN1String>) cast_check([((LibOrgBouncycastleAsn1X500AttributeTypeAndValue *) nil_chk([((LibOrgBouncycastleAsn1X500RDN *) nil_chk(IOSObjectArray_Get(emails, eI))) getFirst])) getValue], LibOrgBouncycastleAsn1ASN1String_class_())))) getString];
      LibOrgBouncycastleAsn1X509GeneralName *emailAsGeneralName = new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(LibOrgBouncycastleAsn1X509GeneralName_rfc822Name, email);
      @try {
        [nameConstraintValidator checkPermittedWithLibOrgBouncycastleAsn1X509GeneralName:emailAsGeneralName];
        [nameConstraintValidator checkExcludedWithLibOrgBouncycastleAsn1X509GeneralName:emailAsGeneralName];
      }
      @catch (LibOrgBouncycastleJceProviderPKIXNameConstraintValidatorException *ex) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subtree check for certificate subject alternative email failed.", ex, certPath, index);
      }
    }
    if (altName != nil) {
      IOSObjectArray *genNames = nil;
      @try {
        genNames = [altName getNames];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subject alternative name contents could not be decoded.", e, certPath, index);
      }
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
        @try {
          [nameConstraintValidator checkPermittedWithLibOrgBouncycastleAsn1X509GeneralName:IOSObjectArray_Get(genNames, j)];
          [nameConstraintValidator checkExcludedWithLibOrgBouncycastleAsn1X509GeneralName:IOSObjectArray_Get(genNames, j)];
        }
        @catch (LibOrgBouncycastleJceProviderPKIXNameConstraintValidatorException *e) {
          @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subtree check for certificate subject alternative name failed.", e, certPath, index);
        }
      }
    }
  }
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertDWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withInt_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilSet> acceptablePolicies, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, jint inhibitAnyPolicy) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  jint n = [certs size];
  jint i = n - index;
  LibOrgBouncycastleAsn1ASN1Sequence *certPolicies = nil;
  @try {
    certPolicies = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES));
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Could not read certificate policies extension from certificate.", e, certPath, index);
  }
  if (certPolicies != nil && validPolicyTree != nil) {
    id<JavaUtilEnumeration> e = [certPolicies getObjects];
    id<JavaUtilSet> pols = new_JavaUtilHashSet_init();
    while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      LibOrgBouncycastleAsn1X509PolicyInformation *pInfo = LibOrgBouncycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *pOid = [((LibOrgBouncycastleAsn1X509PolicyInformation *) nil_chk(pInfo)) getPolicyIdentifier];
      [pols addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(pOid)) getId]];
      if (![((NSString *) nil_chk(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[pOid getId]]) {
        id<JavaUtilSet> pq = nil;
        @try {
          pq = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_([pInfo getPolicyQualifiers]);
        }
        @catch (JavaSecurityCertCertPathValidatorException *ex) {
          @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy qualifier info set could not be build.", ex, certPath, index);
        }
        jboolean match = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(i, policyNodes, pOid, pq);
        if (!match) {
          LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(i, policyNodes, pOid, pq);
        }
      }
    }
    if ([((id<JavaUtilSet>) nil_chk(acceptablePolicies)) isEmpty] || [acceptablePolicies containsWithId:LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY]) {
      [acceptablePolicies clear];
      [acceptablePolicies addAllWithJavaUtilCollection:pols];
    }
    else {
      id<JavaUtilIterator> it = [acceptablePolicies iterator];
      id<JavaUtilSet> t1 = new_JavaUtilHashSet_init();
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        id o = [it next];
        if ([pols containsWithId:o]) {
          [t1 addWithId:o];
        }
      }
      [acceptablePolicies clear];
      [acceptablePolicies addAllWithJavaUtilCollection:t1];
    }
    if ((inhibitAnyPolicy > 0) || ((i < n) && LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert))) {
      e = [certPolicies getObjects];
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        LibOrgBouncycastleAsn1X509PolicyInformation *pInfo = LibOrgBouncycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
        if ([((NSString *) nil_chk(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509PolicyInformation *) nil_chk(pInfo)) getPolicyIdentifier])) getId]]) {
          id<JavaUtilSet> _apq = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_([pInfo getPolicyQualifiers]);
          id<JavaUtilList> _nodes = IOSObjectArray_Get(nil_chk(policyNodes), i - 1);
          for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodes)) size]; k++) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_nodes getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            id<JavaUtilIterator> _policySetIter = [((id<JavaUtilSet>) nil_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getExpectedPolicies])) iterator];
            while ([((id<JavaUtilIterator>) nil_chk(_policySetIter)) hasNext]) {
              id _tmp = [_policySetIter next];
              NSString *_policy;
              if ([_tmp isKindOfClass:[NSString class]]) {
                _policy = (NSString *) _tmp;
              }
              else if ([_tmp isKindOfClass:[LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]]) {
                _policy = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) _tmp))) getId];
              }
              else {
                continue;
              }
              jboolean _found = false;
              id<JavaUtilIterator> _childrenIter = [_node getChildren];
              while ([((id<JavaUtilIterator>) nil_chk(_childrenIter)) hasNext]) {
                LibOrgBouncycastleJceProviderPKIXPolicyNode *_child = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_childrenIter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
                if ([((NSString *) nil_chk(_policy)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_child)) getValidPolicy]]) {
                  _found = true;
                }
              }
              if (!_found) {
                id<JavaUtilSet> _newChildExpectedPolicies = new_JavaUtilHashSet_init();
                [_newChildExpectedPolicies addWithId:_policy];
                LibOrgBouncycastleJceProviderPKIXPolicyNode *_newChild = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), i, _newChildExpectedPolicies, _node, _apq, _policy, false);
                [_node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:_newChild];
                [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) addWithId:_newChild];
              }
            }
          }
          break;
        }
      }
    }
    LibOrgBouncycastleJceProviderPKIXPolicyNode *_validPolicyTree = validPolicyTree;
    for (jint j = (i - 1); j >= 0; j--) {
      id<JavaUtilList> nodes = IOSObjectArray_Get(nil_chk(policyNodes), j);
      for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
        LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
        if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
          _validPolicyTree = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(_validPolicyTree, policyNodes, node);
          if (_validPolicyTree == nil) {
            break;
          }
        }
      }
    }
    id<JavaUtilSet> criticalExtensionOids = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs];
    if (criticalExtensionOids != nil) {
      jboolean critical = [criticalExtensionOids containsWithId:LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES];
      id<JavaUtilList> nodes = IOSObjectArray_Get(nil_chk(policyNodes), i);
      for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(nodes)) size]; j++) {
        LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:j], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
        [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) setCriticalWithBoolean:critical];
      }
    }
    return _validPolicyTree;
  }
  return nil;
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCertAWithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withInt_withJavaSecurityPublicKey_withBoolean_withLibOrgBouncycastleAsn1X500X500Name_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(JavaSecurityCertCertPath *certPath, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, jint index, id<JavaSecurityPublicKey> workingPublicKey, jboolean verificationAlreadyPerformed, LibOrgBouncycastleAsn1X500X500Name *workingIssuerName, JavaSecurityCertX509Certificate *sign, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  if (!verificationAlreadyPerformed) {
    @try {
      LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, workingPublicKey, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getSigProvider]);
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Could not validate certificate signature.", e, certPath, index);
    }
  }
  @try {
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) checkValidityWithJavaUtilDate:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(paramsPKIX, certPath, index)];
  }
  @catch (JavaSecurityCertCertificateExpiredException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$$", @"Could not validate certificate: ", [e getMessage]), e, certPath, index);
  }
  @catch (JavaSecurityCertCertificateNotYetValidException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$$", @"Could not validate certificate: ", [e getMessage]), e, certPath, index);
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Could not validate time of certificate.", e, certPath, index);
  }
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isRevocationEnabled]) {
    @try {
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLsWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(paramsPKIX, cert, LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(paramsPKIX, certPath, index), sign, workingPublicKey, certs, helper);
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      JavaLangThrowable *cause = e;
      if (nil != [e getCause]) {
        cause = [e getCause];
      }
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], cause, certPath, index);
    }
  }
  if (![((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) isEqual:workingIssuerName]) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$@$@$", @"IssuerName(", LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert), @") does not match SubjectName(", workingIssuerName, @") of signing certificate."), nil, certPath, index);
  }
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI1WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleAsn1ASN1Sequence *pc = nil;
  @try {
    pc = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints extension cannot be decoded.", e, certPath, index);
  }
  jint tmpInt;
  if (pc != nil) {
    id<JavaUtilEnumeration> policyConstraints = [pc getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(policyConstraints)) hasMoreElements]) {
      @try {
        LibOrgBouncycastleAsn1ASN1TaggedObject *constraint = LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithId_([policyConstraints nextElement]);
        if ([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(constraint)) getTagNo] == 0) {
          tmpInt = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
          if (tmpInt < explicitPolicy) {
            return tmpInt;
          }
          break;
        }
      }
      @catch (JavaLangIllegalArgumentException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints extension contents cannot be decoded.", e, certPath, index);
      }
    }
  }
  return explicitPolicy;
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI2WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint policyMapping) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleAsn1ASN1Sequence *pc = nil;
  @try {
    pc = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints extension cannot be decoded.", e, certPath, index);
  }
  jint tmpInt;
  if (pc != nil) {
    id<JavaUtilEnumeration> policyConstraints = [pc getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(policyConstraints)) hasMoreElements]) {
      @try {
        LibOrgBouncycastleAsn1ASN1TaggedObject *constraint = LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithId_([policyConstraints nextElement]);
        if ([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(constraint)) getTagNo] == 1) {
          tmpInt = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
          if (tmpInt < policyMapping) {
            return tmpInt;
          }
          break;
        }
      }
      @catch (JavaLangIllegalArgumentException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints extension contents cannot be decoded.", e, certPath, index);
      }
    }
  }
  return policyMapping;
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertGWithJavaSecurityCertCertPath_withInt_withLibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_(JavaSecurityCertCertPath *certPath, jint index, LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *nameConstraintValidator) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleAsn1X509NameConstraints *nc = nil;
  @try {
    LibOrgBouncycastleAsn1ASN1Sequence *ncSeq = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS));
    if (ncSeq != nil) {
      nc = LibOrgBouncycastleAsn1X509NameConstraints_getInstanceWithId_(ncSeq);
    }
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Name constraints extension could not be decoded.", e, certPath, index);
  }
  if (nc != nil) {
    IOSObjectArray *permitted = [nc getPermittedSubtrees];
    if (permitted != nil) {
      @try {
        [((LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *) nil_chk(nameConstraintValidator)) intersectPermittedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtreeArray:permitted];
      }
      @catch (JavaLangException *ex) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Permitted subtrees cannot be build from name constraints extension.", ex, certPath, index);
      }
    }
    IOSObjectArray *excluded = [nc getExcludedSubtrees];
    if (excluded != nil) {
      for (jint i = 0; i != excluded->size_; i++) @try {
        [((LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *) nil_chk(nameConstraintValidator)) addExcludedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtree:IOSObjectArray_Get(excluded, i)];
      }
      @catch (JavaLangException *ex) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Excluded subtrees cannot be build from name constraints extension.", ex, certPath, index);
      }
    }
  }
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *defaultCRLSignCert, id<JavaSecurityPublicKey> defaultCRLSignKey, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus, LibOrgBouncycastleJceProviderReasonsMask *reasonMask, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  JavaUtilDate *currentDate = new_JavaUtilDate_initWithLong_(JavaLangSystem_currentTimeMillis());
  if ([((JavaUtilDate *) nil_chk(validDate)) getTime] > [currentDate getTime]) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Validation time is in future.");
  }
  id<JavaUtilSet> crls = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCompleteCRLsWithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(dp, cert, currentDate, paramsPKIX);
  jboolean validCrlFound = false;
  LibOrgBouncycastleJceProviderAnnotatedException *lastException = nil;
  id<JavaUtilIterator> crl_iter = [((id<JavaUtilSet>) nil_chk(crls)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(crl_iter)) hasNext] && [((LibOrgBouncycastleJceProviderJceProviderCertStatus *) nil_chk(certStatus)) getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED && ![((LibOrgBouncycastleJceProviderReasonsMask *) nil_chk(reasonMask)) isAllReasons]) {
    @try {
      JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk([crl_iter next], [JavaSecurityCertX509CRL class]);
      LibOrgBouncycastleJceProviderReasonsMask *interimReasonsMask = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withLibOrgBouncycastleAsn1X509DistributionPoint_(crl, dp);
      if (![((LibOrgBouncycastleJceProviderReasonsMask *) nil_chk(interimReasonsMask)) hasNewReasonsWithLibOrgBouncycastleJceProviderReasonsMask:reasonMask]) {
        continue;
      }
      id<JavaUtilSet> keys = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(crl, cert, defaultCRLSignCert, defaultCRLSignKey, paramsPKIX, certPathCerts, helper);
      id<JavaSecurityPublicKey> key = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(crl, keys);
      JavaSecurityCertX509CRL *deltaCRL = nil;
      JavaUtilDate *validityDate = currentDate;
      if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getDate] != nil) {
        validityDate = [paramsPKIX getDate];
      }
      if ([paramsPKIX isUseDeltasEnabled]) {
        id<JavaUtilSet> deltaCRLs = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(validityDate, crl, [paramsPKIX getCertStores], [paramsPKIX getCRLStores]);
        deltaCRL = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(deltaCRLs, key);
      }
      if ([paramsPKIX getValidityModel] != LibOrgBouncycastleJcajcePKIXExtendedParameters_CHAIN_VALIDITY_MODEL) {
        if ([((JavaUtilDate *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getNotAfter])) getTime] < [((JavaUtilDate *) nil_chk([((JavaSecurityCertX509CRL *) nil_chk(crl)) getThisUpdate])) getTime]) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"No valid CRL for current time found.");
        }
      }
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, cert, crl);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, cert, crl);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(deltaCRL, crl, paramsPKIX);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(validDate, deltaCRL, cert, certStatus, paramsPKIX);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(validDate, crl, cert, certStatus);
      if ([((LibOrgBouncycastleJceProviderJceProviderCertStatus *) nil_chk(certStatus)) getCertStatus] == LibOrgBouncycastleAsn1X509CRLReason_removeFromCRL) {
        [certStatus setCertStatusWithInt:LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED];
      }
      [((LibOrgBouncycastleJceProviderReasonsMask *) nil_chk(reasonMask)) addReasonsWithLibOrgBouncycastleJceProviderReasonsMask:interimReasonsMask];
      id<JavaUtilSet> criticalExtensions = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getCriticalExtensionOIDs];
      if (criticalExtensions != nil) {
        criticalExtensions = new_JavaUtilHashSet_initWithJavaUtilCollection_(criticalExtensions);
        [criticalExtensions removeWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
        [criticalExtensions removeWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, deltaCRLIndicator))) getId]];
        if (![criticalExtensions isEmpty]) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"CRL contains unsupported critical extensions.");
        }
      }
      if (deltaCRL != nil) {
        criticalExtensions = [deltaCRL getCriticalExtensionOIDs];
        if (criticalExtensions != nil) {
          criticalExtensions = new_JavaUtilHashSet_initWithJavaUtilCollection_(criticalExtensions);
          [criticalExtensions removeWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
          [criticalExtensions removeWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, deltaCRLIndicator))) getId]];
          if (![criticalExtensions isEmpty]) {
            @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Delta CRL contains unsupported critical extension.");
          }
        }
      }
      validCrlFound = true;
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      lastException = e;
    }
  }
  if (!validCrlFound) {
    @throw nil_chk(lastException);
  }
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLsWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *sign, id<JavaSecurityPublicKey> workingPublicKey, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  LibOrgBouncycastleJceProviderAnnotatedException *lastException = nil;
  LibOrgBouncycastleAsn1X509CRLDistPoint *crldp = nil;
  @try {
    crldp = LibOrgBouncycastleAsn1X509CRLDistPoint_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"CRL distribution point extension could not be read.", e);
  }
  LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *paramsBldr = new_LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder_initWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(paramsPKIX);
  @try {
    id<JavaUtilList> extras = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint_withJavaUtilMap_(crldp, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getNamedCRLStoreMap]);
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(extras)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      (void) [paramsBldr addCRLStoreWithLibOrgBouncycastleJcajcePKIXCRLStore:(id<LibOrgBouncycastleJcajcePKIXCRLStore>) cast_check([it next], LibOrgBouncycastleJcajcePKIXCRLStore_class_())];
    }
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No additional CRL locations could be decoded from CRL distribution point extension.", e);
  }
  LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus = new_LibOrgBouncycastleJceProviderJceProviderCertStatus_init();
  LibOrgBouncycastleJceProviderReasonsMask *reasonsMask = new_LibOrgBouncycastleJceProviderReasonsMask_init();
  LibOrgBouncycastleJcajcePKIXExtendedParameters *finalParams = [paramsBldr build];
  jboolean validCrlFound = false;
  if (crldp != nil) {
    IOSObjectArray *dps = nil;
    @try {
      dps = [crldp getDistributionPoints];
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Distribution points could not be read.", e);
    }
    if (dps != nil) {
      for (jint i = 0; i < dps->size_ && [certStatus getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED && ![reasonsMask isAllReasons]; i++) {
        @try {
          LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(IOSObjectArray_Get(dps, i), finalParams, cert, validDate, sign, workingPublicKey, certStatus, reasonsMask, certPathCerts, helper);
          validCrlFound = true;
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
          lastException = e;
        }
      }
    }
  }
  if ([certStatus getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED && ![reasonsMask isAllReasons]) {
    @try {
      LibOrgBouncycastleAsn1ASN1Primitive *issuer = nil;
      @try {
        issuer = [new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) getEncoded]) readObject];
      }
      @catch (JavaLangException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuer from certificate for CRL could not be reencoded.", e);
      }
      LibOrgBouncycastleAsn1X509DistributionPoint *dp = new_LibOrgBouncycastleAsn1X509DistributionPoint_initWithLibOrgBouncycastleAsn1X509DistributionPointName_withLibOrgBouncycastleAsn1X509ReasonFlags_withLibOrgBouncycastleAsn1X509GeneralNames_(new_LibOrgBouncycastleAsn1X509DistributionPointName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(0, new_LibOrgBouncycastleAsn1X509GeneralNames_initWithLibOrgBouncycastleAsn1X509GeneralName_(new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1X509GeneralName_directoryName, issuer))), nil, nil);
      LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIXClone = (LibOrgBouncycastleJcajcePKIXExtendedParameters *) cast_chk([paramsPKIX java_clone], [LibOrgBouncycastleJcajcePKIXExtendedParameters class]);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(dp, paramsPKIXClone, cert, validDate, sign, workingPublicKey, certStatus, reasonsMask, certPathCerts, helper);
      validCrlFound = true;
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      lastException = e;
    }
  }
  if (!validCrlFound) {
    if ([lastException isKindOfClass:[LibOrgBouncycastleJceProviderAnnotatedException class]]) {
      @throw nil_chk(lastException);
    }
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No valid CRL found.", lastException);
  }
  if ([certStatus getCertStatus] != LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED) {
    JavaTextSimpleDateFormat *df = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd HH:mm:ss Z");
    [df setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC")];
    NSString *message = JreStrcat("$$", @"Certificate revocation after ", [df formatWithJavaUtilDate:[certStatus getRevocationDate]]);
    (void) JreStrAppendStrong(&message, "$$", @", reason: ", IOSObjectArray_Get(nil_chk(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_crlReasons), [certStatus getCertStatus]));
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(message);
  }
  if (![reasonsMask isAllReasons] && [certStatus getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED) {
    [certStatus setCertStatusWithInt:LibOrgBouncycastleJceProviderJceProviderCertStatus_UNDETERMINED];
  }
  if ([certStatus getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNDETERMINED) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Certificate status could not be determined.");
  }
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertJWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint inhibitAnyPolicy) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleAsn1ASN1Integer *iap = nil;
  @try {
    iap = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Inhibit any-policy extension cannot be decoded.", e, certPath, index);
  }
  if (iap != nil) {
    jint _inhibitAnyPolicy = [((JavaMathBigInteger *) nil_chk([iap getValue])) intValue];
    if (_inhibitAnyPolicy < inhibitAnyPolicy) {
      return _inhibitAnyPolicy;
    }
  }
  return inhibitAnyPolicy;
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertKWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleAsn1X509BasicConstraints *bc = nil;
  @try {
    bc = LibOrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Basic constraints extension cannot be decoded.", e, certPath, index);
  }
  if (bc != nil) {
    if (!([bc isCA])) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Not a CA certificate");
    }
  }
  else {
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Intermediate certificate lacks BasicConstraints");
  }
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertLWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint maxPathLength) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  if (!LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
    if (maxPathLength <= 0) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Max path length not greater than zero", nil, certPath, index);
    }
    return maxPathLength - 1;
  }
  return maxPathLength;
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertMWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint maxPathLength) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleAsn1X509BasicConstraints *bc = nil;
  @try {
    bc = LibOrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS));
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Basic constraints extension cannot be decoded.", e, certPath, index);
  }
  if (bc != nil) {
    JavaMathBigInteger *_pathLengthConstraint = [bc getPathLenConstraint];
    if (_pathLengthConstraint != nil) {
      jint _plc = [_pathLengthConstraint intValue];
      if (_plc < maxPathLength) {
        return _plc;
      }
    }
  }
  return maxPathLength;
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertNWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  IOSBooleanArray *_usage = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getKeyUsage];
  if ((_usage != nil) && !IOSBooleanArray_Get(nil_chk(_usage), LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_KEY_CERT_SIGN)) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Issuer certificate keyusage extension is critical and does not permit key signing.", nil, certPath, index);
  }
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertOWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withJavaUtilList_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilSet> criticalExtensions, id<JavaUtilList> pathCheckers) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  id<JavaUtilIterator> tmpIter;
  tmpIter = [((id<JavaUtilList>) nil_chk(pathCheckers)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(tmpIter)) hasNext]) {
    @try {
      [((JavaSecurityCertPKIXCertPathChecker *) nil_chk(((JavaSecurityCertPKIXCertPathChecker *) cast_chk([tmpIter next], [JavaSecurityCertPKIXCertPathChecker class])))) checkWithJavaSecurityCertCertificate:cert withJavaUtilCollection:criticalExtensions];
    }
    @catch (JavaSecurityCertCertPathValidatorException *e) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], [e getCause], certPath, index);
    }
  }
  if (![((id<JavaUtilSet>) nil_chk(criticalExtensions)) isEmpty]) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$@", @"Certificate has unsupported critical extension: ", criticalExtensions), nil, certPath, index);
  }
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH1WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  if (!LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
    if (explicitPolicy != 0) {
      return explicitPolicy - 1;
    }
  }
  return explicitPolicy;
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH2WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint policyMapping) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  if (!LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
    if (policyMapping != 0) {
      return policyMapping - 1;
    }
  }
  return policyMapping;
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH3WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint inhibitAnyPolicy) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  if (!LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
    if (inhibitAnyPolicy != 0) {
      return inhibitAnyPolicy - 1;
    }
  }
  return inhibitAnyPolicy;
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertAWithInt_withJavaSecurityCertX509Certificate_(jint explicitPolicy, JavaSecurityCertX509Certificate *cert) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  if (!LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert) && (explicitPolicy != 0)) {
    explicitPolicy--;
  }
  return explicitPolicy;
}

jint LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertBWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  jint tmpInt;
  LibOrgBouncycastleAsn1ASN1Sequence *pc = nil;
  @try {
    pc = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS));
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints could not be decoded.", e, certPath, index);
  }
  if (pc != nil) {
    id<JavaUtilEnumeration> policyConstraints = [pc getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(policyConstraints)) hasMoreElements]) {
      LibOrgBouncycastleAsn1ASN1TaggedObject *constraint = (LibOrgBouncycastleAsn1ASN1TaggedObject *) cast_chk([policyConstraints nextElement], [LibOrgBouncycastleAsn1ASN1TaggedObject class]);
      switch ([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(constraint)) getTagNo]) {
        case 0:
        @try {
          tmpInt = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
        }
        @catch (JavaLangException *e) {
          @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints requireExplicitPolicy field could not be decoded.", e, certPath, index);
        }
        if (tmpInt == 0) {
          return 0;
        }
        break;
      }
    }
  }
  return explicitPolicy;
}

void LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertFWithJavaSecurityCertCertPath_withInt_withJavaUtilList_withJavaUtilSet_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilList> pathCheckers, id<JavaUtilSet> criticalExtensions) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  id<JavaUtilIterator> tmpIter;
  tmpIter = [((id<JavaUtilList>) nil_chk(pathCheckers)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(tmpIter)) hasNext]) {
    @try {
      [((JavaSecurityCertPKIXCertPathChecker *) nil_chk(((JavaSecurityCertPKIXCertPathChecker *) cast_chk([tmpIter next], [JavaSecurityCertPKIXCertPathChecker class])))) checkWithJavaSecurityCertCertificate:cert withJavaUtilCollection:criticalExtensions];
    }
    @catch (JavaSecurityCertCertPathValidatorException *e) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], e, certPath, index);
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Additional certificate path checker failed.", e, certPath, index);
    }
  }
  if (![((id<JavaUtilSet>) nil_chk(criticalExtensions)) isEmpty]) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$@", @"Certificate has unsupported critical extension: ", criticalExtensions), nil, certPath, index);
  }
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_wrapupCertGWithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilSet_withInt_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilSet_(JavaSecurityCertCertPath *certPath, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, id<JavaUtilSet> userInitialPolicySet, jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, id<JavaUtilSet> acceptablePolicies) {
  LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_initialize();
  jint n = [((id<JavaUtilList>) nil_chk([((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates])) size];
  LibOrgBouncycastleJceProviderPKIXPolicyNode *intersection;
  if (validPolicyTree == nil) {
    if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isExplicitPolicyRequired]) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Explicit policy requested but none available.", nil, certPath, index);
    }
    intersection = nil;
  }
  else if (LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(userInitialPolicySet)) {
    if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isExplicitPolicyRequired]) {
      if ([((id<JavaUtilSet>) nil_chk(acceptablePolicies)) isEmpty]) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Explicit policy requested but none available.", nil, certPath, index);
      }
      else {
        id<JavaUtilSet> _validPolicyNodeSet = new_JavaUtilHashSet_init();
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(policyNodes))->size_; j++) {
          id<JavaUtilList> _nodeDepth = IOSObjectArray_Get(policyNodes, j);
          for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodeDepth)) size]; k++) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_nodeDepth getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            if ([((NSString *) nil_chk(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
              id<JavaUtilIterator> _iter = [_node getChildren];
              while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
                [_validPolicyNodeSet addWithId:[_iter next]];
              }
            }
          }
        }
        id<JavaUtilIterator> _vpnsIter = [_validPolicyNodeSet iterator];
        while ([((id<JavaUtilIterator>) nil_chk(_vpnsIter)) hasNext]) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_vpnsIter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
          NSString *_validPolicy = [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy];
          if (![acceptablePolicies containsWithId:_validPolicy]) {
          }
        }
        if (validPolicyTree != nil) {
          for (jint j = (n - 1); j >= 0; j--) {
            id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, j);
            for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
              LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
              if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
                validPolicyTree = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, node);
              }
            }
          }
        }
      }
    }
    intersection = validPolicyTree;
  }
  else {
    id<JavaUtilSet> _validPolicyNodeSet = new_JavaUtilHashSet_init();
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(policyNodes))->size_; j++) {
      id<JavaUtilList> _nodeDepth = IOSObjectArray_Get(policyNodes, j);
      for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodeDepth)) size]; k++) {
        LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_nodeDepth getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
        if ([((NSString *) nil_chk(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
          id<JavaUtilIterator> _iter = [_node getChildren];
          while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *_c_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_iter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            if (![LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_c_node)) getValidPolicy]]) {
              [_validPolicyNodeSet addWithId:_c_node];
            }
          }
        }
      }
    }
    id<JavaUtilIterator> _vpnsIter = [_validPolicyNodeSet iterator];
    while ([((id<JavaUtilIterator>) nil_chk(_vpnsIter)) hasNext]) {
      LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_vpnsIter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
      NSString *_validPolicy = [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy];
      if (![((id<JavaUtilSet>) nil_chk(userInitialPolicySet)) containsWithId:_validPolicy]) {
        validPolicyTree = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, _node);
      }
    }
    if (validPolicyTree != nil) {
      for (jint j = (n - 1); j >= 0; j--) {
        id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, j);
        for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
          if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
            validPolicyTree = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, node);
          }
        }
      }
    }
    intersection = validPolicyTree;
  }
  return intersection;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities)
