//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPCompressedData.java
//

#include "BCPGInputStream.h"
#include "CBZip2InputStream.h"
#include "CompressedDataPacket.h"
#include "CompressionAlgorithmTags.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PGPCompressedData.h"
#include "PGPException.h"
#include "Packet.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/zip/Inflater.h"
#include "java/util/zip/InflaterInputStream.h"

@interface LibOrgBouncycastleOpenpgpPGPCompressedData_1 : JavaUtilZipInflaterInputStream {
 @public
  jboolean eof_;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)x0
                  withJavaUtilZipInflater:(JavaUtilZipInflater *)x1;

- (void)fill;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPCompressedData_1)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPCompressedData_1_initWithJavaIoInputStream_withJavaUtilZipInflater_(LibOrgBouncycastleOpenpgpPGPCompressedData_1 *self, JavaIoInputStream *x0, JavaUtilZipInflater *x1);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPCompressedData_1 *new_LibOrgBouncycastleOpenpgpPGPCompressedData_1_initWithJavaIoInputStream_withJavaUtilZipInflater_(JavaIoInputStream *x0, JavaUtilZipInflater *x1) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPCompressedData_1 *create_LibOrgBouncycastleOpenpgpPGPCompressedData_1_initWithJavaIoInputStream_withJavaUtilZipInflater_(JavaIoInputStream *x0, JavaUtilZipInflater *x1);

@interface LibOrgBouncycastleOpenpgpPGPCompressedData_2 : JavaUtilZipInflaterInputStream {
 @public
  jboolean eof_;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)x0;

- (void)fill;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPCompressedData_2)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPCompressedData_2_initWithJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPCompressedData_2 *self, JavaIoInputStream *x0);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPCompressedData_2 *new_LibOrgBouncycastleOpenpgpPGPCompressedData_2_initWithJavaIoInputStream_(JavaIoInputStream *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPCompressedData_2 *create_LibOrgBouncycastleOpenpgpPGPCompressedData_2_initWithJavaIoInputStream_(JavaIoInputStream *x0);

@implementation LibOrgBouncycastleOpenpgpPGPCompressedData

- (instancetype)initWithLibOrgBouncycastleBcpgBCPGInputStream:(LibOrgBouncycastleBcpgBCPGInputStream *)pIn {
  LibOrgBouncycastleOpenpgpPGPCompressedData_initWithLibOrgBouncycastleBcpgBCPGInputStream_(self, pIn);
  return self;
}

- (jint)getAlgorithm {
  return [((LibOrgBouncycastleBcpgCompressedDataPacket *) nil_chk(data_)) getAlgorithm];
}

- (JavaIoInputStream *)getInputStream {
  return [((LibOrgBouncycastleBcpgCompressedDataPacket *) nil_chk(data_)) getInputStream];
}

- (JavaIoInputStream *)getDataStream {
  if ([self getAlgorithm] == LibOrgBouncycastleBcpgCompressionAlgorithmTags_UNCOMPRESSED) {
    return [self getInputStream];
  }
  if ([self getAlgorithm] == LibOrgBouncycastleBcpgCompressionAlgorithmTags_ZIP) {
    return new_LibOrgBouncycastleOpenpgpPGPCompressedData_1_initWithJavaIoInputStream_withJavaUtilZipInflater_([self getInputStream], new_JavaUtilZipInflater_initWithBoolean_(true));
  }
  if ([self getAlgorithm] == LibOrgBouncycastleBcpgCompressionAlgorithmTags_ZLIB) {
    return new_LibOrgBouncycastleOpenpgpPGPCompressedData_2_initWithJavaIoInputStream_([self getInputStream]);
  }
  if ([self getAlgorithm] == LibOrgBouncycastleBcpgCompressionAlgorithmTags_BZIP2) {
    @try {
      return new_LibOrgBouncycastleApacheBzip2CBZip2InputStream_initWithJavaIoInputStream_([self getInputStream]);
    }
    @catch (JavaIoIOException *e) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$@", @"I/O problem with stream: ", e), e);
    }
  }
  @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"can't recognise compression algorithm: ", [self getAlgorithm]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgBCPGInputStream:);
  methods[1].selector = @selector(getAlgorithm);
  methods[2].selector = @selector(getInputStream);
  methods[3].selector = @selector(getDataStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "data_", "LLibOrgBouncycastleBcpgCompressedDataPacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleBcpgBCPGInputStream;", "LJavaIoIOException;", "LLibOrgBouncycastleOpenpgpPGPException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPCompressedData = { "PGPCompressedData", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPCompressedData;
}

@end

void LibOrgBouncycastleOpenpgpPGPCompressedData_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleOpenpgpPGPCompressedData *self, LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  NSObject_init(self);
  self->data_ = (LibOrgBouncycastleBcpgCompressedDataPacket *) cast_chk([((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(pIn)) readPacket], [LibOrgBouncycastleBcpgCompressedDataPacket class]);
}

LibOrgBouncycastleOpenpgpPGPCompressedData *new_LibOrgBouncycastleOpenpgpPGPCompressedData_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPCompressedData, initWithLibOrgBouncycastleBcpgBCPGInputStream_, pIn)
}

LibOrgBouncycastleOpenpgpPGPCompressedData *create_LibOrgBouncycastleOpenpgpPGPCompressedData_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPCompressedData, initWithLibOrgBouncycastleBcpgBCPGInputStream_, pIn)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPCompressedData)

@implementation LibOrgBouncycastleOpenpgpPGPCompressedData_1

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)x0
                  withJavaUtilZipInflater:(JavaUtilZipInflater *)x1 {
  LibOrgBouncycastleOpenpgpPGPCompressedData_1_initWithJavaIoInputStream_withJavaUtilZipInflater_(self, x0, x1);
  return self;
}

- (void)fill {
  if (eof_) {
    @throw new_JavaIoEOFException_initWithNSString_(@"Unexpected end of ZIP input stream");
  }
  len_ = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) readWithByteArray:buf_ withInt:0 withInt:((IOSByteArray *) nil_chk(buf_))->size_];
  if (len_ == -1) {
    *IOSByteArray_GetRef(nil_chk(buf_), 0) = 0;
    len_ = 1;
    eof_ = true;
  }
  [((JavaUtilZipInflater *) nil_chk(inf_)) setInputWithByteArray:buf_ withInt:0 withInt:len_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withJavaUtilZipInflater:);
  methods[1].selector = @selector(fill);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eof_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LJavaUtilZipInflater;", "LJavaIoIOException;", "LLibOrgBouncycastleOpenpgpPGPCompressedData;", "getDataStream" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPCompressedData_1 = { "", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPCompressedData_1;
}

@end

void LibOrgBouncycastleOpenpgpPGPCompressedData_1_initWithJavaIoInputStream_withJavaUtilZipInflater_(LibOrgBouncycastleOpenpgpPGPCompressedData_1 *self, JavaIoInputStream *x0, JavaUtilZipInflater *x1) {
  JavaUtilZipInflaterInputStream_initWithJavaIoInputStream_withJavaUtilZipInflater_(self, x0, x1);
  self->eof_ = false;
}

LibOrgBouncycastleOpenpgpPGPCompressedData_1 *new_LibOrgBouncycastleOpenpgpPGPCompressedData_1_initWithJavaIoInputStream_withJavaUtilZipInflater_(JavaIoInputStream *x0, JavaUtilZipInflater *x1) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPCompressedData_1, initWithJavaIoInputStream_withJavaUtilZipInflater_, x0, x1)
}

LibOrgBouncycastleOpenpgpPGPCompressedData_1 *create_LibOrgBouncycastleOpenpgpPGPCompressedData_1_initWithJavaIoInputStream_withJavaUtilZipInflater_(JavaIoInputStream *x0, JavaUtilZipInflater *x1) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPCompressedData_1, initWithJavaIoInputStream_withJavaUtilZipInflater_, x0, x1)
}

@implementation LibOrgBouncycastleOpenpgpPGPCompressedData_2

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)x0 {
  LibOrgBouncycastleOpenpgpPGPCompressedData_2_initWithJavaIoInputStream_(self, x0);
  return self;
}

- (void)fill {
  if (eof_) {
    @throw new_JavaIoEOFException_initWithNSString_(@"Unexpected end of ZIP input stream");
  }
  len_ = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) readWithByteArray:buf_ withInt:0 withInt:((IOSByteArray *) nil_chk(buf_))->size_];
  if (len_ == -1) {
    *IOSByteArray_GetRef(nil_chk(buf_), 0) = 0;
    len_ = 1;
    eof_ = true;
  }
  [((JavaUtilZipInflater *) nil_chk(inf_)) setInputWithByteArray:buf_ withInt:0 withInt:len_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(fill);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eof_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "LLibOrgBouncycastleOpenpgpPGPCompressedData;", "getDataStream" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPCompressedData_2 = { "", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPCompressedData_2;
}

@end

void LibOrgBouncycastleOpenpgpPGPCompressedData_2_initWithJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPCompressedData_2 *self, JavaIoInputStream *x0) {
  JavaUtilZipInflaterInputStream_initWithJavaIoInputStream_(self, x0);
  self->eof_ = false;
}

LibOrgBouncycastleOpenpgpPGPCompressedData_2 *new_LibOrgBouncycastleOpenpgpPGPCompressedData_2_initWithJavaIoInputStream_(JavaIoInputStream *x0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPCompressedData_2, initWithJavaIoInputStream_, x0)
}

LibOrgBouncycastleOpenpgpPGPCompressedData_2 *create_LibOrgBouncycastleOpenpgpPGPCompressedData_2_initWithJavaIoInputStream_(JavaIoInputStream *x0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPCompressedData_2, initWithJavaIoInputStream_, x0)
}
