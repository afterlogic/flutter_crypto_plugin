//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPSecretKeyRing.java
//

#include "Arrays.h"
#include "BCPGInputStream.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFingerPrintCalculator.h"
#include "PBESecretKeyDecryptor.h"
#include "PBESecretKeyEncryptor.h"
#include "PGPKeyRing.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPSecretKey.h"
#include "PGPSecretKeyRing.h"
#include "Packet.h"
#include "PacketTags.h"
#include "PublicKeyPacket.h"
#include "PublicSubkeyPacket.h"
#include "SecretKeyPacket.h"
#include "SecretSubkeyPacket.h"
#include "TrustPacket.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@interface LibOrgBouncycastleOpenpgpPGPSecretKeyRing ()

+ (id<JavaUtilList>)checkKeysWithJavaUtilList:(id<JavaUtilList>)keys;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)keys
                    withJavaUtilList:(id<JavaUtilList>)extraPubKeys;

@end

__attribute__((unused)) static id<JavaUtilList> LibOrgBouncycastleOpenpgpPGPSecretKeyRing_checkKeysWithJavaUtilList_(id<JavaUtilList> keys);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *self, id<JavaUtilList> keys, id<JavaUtilList> extraPubKeys);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPSecretKeyRing *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> keys, id<JavaUtilList> extraPubKeys) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPSecretKeyRing *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> keys, id<JavaUtilList> extraPubKeys);

@implementation LibOrgBouncycastleOpenpgpPGPSecretKeyRing

+ (id<JavaUtilList>)checkKeysWithJavaUtilList:(id<JavaUtilList>)keys {
  return LibOrgBouncycastleOpenpgpPGPSecretKeyRing_checkKeysWithJavaUtilList_(keys);
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)secKeys {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(self, secKeys);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)keys
                    withJavaUtilList:(id<JavaUtilList>)extraPubKeys {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(self, keys, extraPubKeys);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)encoding
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, encoding, fingerPrintCalculator);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, inArg, fingerPrintCalculator);
  return self;
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKey {
  return [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([((id<JavaUtilList>) nil_chk(keys_)) getWithInt:0], [LibOrgBouncycastleOpenpgpPGPSecretKey class])))) getPublicKey];
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithLong:(jlong)keyID {
  LibOrgBouncycastleOpenpgpPGPSecretKey *key = [self getSecretKeyWithLong:keyID];
  if (key != nil) {
    return [key getPublicKey];
  }
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(extraPubKeys_)) size]; i++) {
    LibOrgBouncycastleOpenpgpPGPPublicKey *k = (LibOrgBouncycastleOpenpgpPGPPublicKey *) cast_chk([((id<JavaUtilList>) nil_chk(keys_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPPublicKey class]);
    if (keyID == [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(k)) getKeyID]) {
      return k;
    }
  }
  return nil;
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithByteArray:(IOSByteArray *)fingerprint {
  LibOrgBouncycastleOpenpgpPGPSecretKey *key = [self getSecretKeyWithByteArray:fingerprint];
  if (key != nil) {
    return [key getPublicKey];
  }
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(extraPubKeys_)) size]; i++) {
    LibOrgBouncycastleOpenpgpPGPPublicKey *k = (LibOrgBouncycastleOpenpgpPGPPublicKey *) cast_chk([((id<JavaUtilList>) nil_chk(keys_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPPublicKey class]);
    if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(fingerprint, [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(k)) getFingerprint])) {
      return k;
    }
  }
  return nil;
}

- (id<JavaUtilIterator>)getKeysWithSignaturesByWithLong:(jlong)keyID {
  id<JavaUtilList> keysWithSigs = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> keyIt = [self getPublicKeys]; [((id<JavaUtilIterator>) nil_chk(keyIt)) hasNext]; ) {
    LibOrgBouncycastleOpenpgpPGPPublicKey *k = (LibOrgBouncycastleOpenpgpPGPPublicKey *) cast_chk([keyIt next], [LibOrgBouncycastleOpenpgpPGPPublicKey class]);
    id<JavaUtilIterator> sigIt = [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(k)) getSignaturesForKeyIDWithLong:keyID];
    if ([((id<JavaUtilIterator>) nil_chk(sigIt)) hasNext]) {
      [keysWithSigs addWithId:k];
    }
  }
  return [keysWithSigs iterator];
}

- (id<JavaUtilIterator>)getPublicKeys {
  id<JavaUtilList> pubKeys = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> it = [self getSecretKeys]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    LibOrgBouncycastleOpenpgpPGPPublicKey *key = [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSecretKey class])))) getPublicKey];
    [pubKeys addWithId:key];
  }
  [pubKeys addAllWithJavaUtilCollection:extraPubKeys_];
  return [((id<JavaUtilList>) nil_chk(JavaUtilCollections_unmodifiableListWithJavaUtilList_(pubKeys))) iterator];
}

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)getSecretKey {
  return ((LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([((id<JavaUtilList>) nil_chk(keys_)) getWithInt:0], [LibOrgBouncycastleOpenpgpPGPSecretKey class]));
}

- (id<JavaUtilIterator>)getSecretKeys {
  return [((id<JavaUtilList>) nil_chk(JavaUtilCollections_unmodifiableListWithJavaUtilList_(keys_))) iterator];
}

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)getSecretKeyWithLong:(jlong)keyID {
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(keys_)) size]; i++) {
    LibOrgBouncycastleOpenpgpPGPSecretKey *k = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([((id<JavaUtilList>) nil_chk(keys_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
    if (keyID == [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(k)) getKeyID]) {
      return k;
    }
  }
  return nil;
}

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)getSecretKeyWithByteArray:(IOSByteArray *)fingerprint {
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(keys_)) size]; i++) {
    LibOrgBouncycastleOpenpgpPGPSecretKey *k = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([((id<JavaUtilList>) nil_chk(keys_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
    if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(fingerprint, [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(k)) getPublicKey])) getFingerprint])) {
      return k;
    }
  }
  return nil;
}

- (id<JavaUtilIterator>)getExtraPublicKeys {
  return [((id<JavaUtilList>) nil_chk(extraPubKeys_)) iterator];
}

- (IOSByteArray *)getEncoded {
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [self encodeWithJavaIoOutputStream:bOut];
  return [bOut toByteArray];
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream {
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(keys_)) size]; i++) {
    LibOrgBouncycastleOpenpgpPGPSecretKey *k = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([((id<JavaUtilList>) nil_chk(keys_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
    [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(k)) encodeWithJavaIoOutputStream:outStream];
  }
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(extraPubKeys_)) size]; i++) {
    LibOrgBouncycastleOpenpgpPGPPublicKey *k = (LibOrgBouncycastleOpenpgpPGPPublicKey *) cast_chk([((id<JavaUtilList>) nil_chk(extraPubKeys_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPPublicKey class]);
    [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(k)) encodeWithJavaIoOutputStream:outStream];
  }
}

- (id<JavaUtilIterator>)iterator {
  return [self getSecretKeys];
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)replacePublicKeysWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secretRing
                                                                withLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)publicRing {
  return LibOrgBouncycastleOpenpgpPGPSecretKeyRing_replacePublicKeysWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(secretRing, publicRing);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)ring
                                                     withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)oldKeyDecryptor
                                                     withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)newKeyEncryptor {
  return LibOrgBouncycastleOpenpgpPGPSecretKeyRing_copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(ring, oldKeyDecryptor, newKeyEncryptor);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)insertSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secRing
                                                                  withLibOrgBouncycastleOpenpgpPGPSecretKey:(LibOrgBouncycastleOpenpgpPGPSecretKey *)secKey {
  return LibOrgBouncycastleOpenpgpPGPSecretKeyRing_insertSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKey_(secRing, secKey);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)removeSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secRing
                                                                  withLibOrgBouncycastleOpenpgpPGPSecretKey:(LibOrgBouncycastleOpenpgpPGPSecretKey *)secKey {
  return LibOrgBouncycastleOpenpgpPGPSecretKeyRing_removeSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKey_(secRing, secKey);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 4, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, 4, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 9, 7, -1, 10, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x1, 13, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x1, 13, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, 14, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", 0x9, 19, 20, 21, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", 0x9, 24, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(checkKeysWithJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(initWithJavaUtilList:withJavaUtilList:);
  methods[3].selector = @selector(initWithByteArray:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[4].selector = @selector(initWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[5].selector = @selector(getPublicKey);
  methods[6].selector = @selector(getPublicKeyWithLong:);
  methods[7].selector = @selector(getPublicKeyWithByteArray:);
  methods[8].selector = @selector(getKeysWithSignaturesByWithLong:);
  methods[9].selector = @selector(getPublicKeys);
  methods[10].selector = @selector(getSecretKey);
  methods[11].selector = @selector(getSecretKeys);
  methods[12].selector = @selector(getSecretKeyWithLong:);
  methods[13].selector = @selector(getSecretKeyWithByteArray:);
  methods[14].selector = @selector(getExtraPublicKeys);
  methods[15].selector = @selector(getEncoded);
  methods[16].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[17].selector = @selector(iterator);
  methods[18].selector = @selector(replacePublicKeysWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:withLibOrgBouncycastleOpenpgpPGPPublicKeyRing:);
  methods[19].selector = @selector(copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:);
  methods[20].selector = @selector(insertSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:withLibOrgBouncycastleOpenpgpPGPSecretKey:);
  methods[21].selector = @selector(removeSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:withLibOrgBouncycastleOpenpgpPGPSecretKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "extraPubKeys_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "checkKeys", "LJavaUtilList;", "LJavaUtilList;LJavaUtilList;", "[BLLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "getPublicKey", "J", "[B", "getKeysWithSignaturesBy", "(J)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPPublicKey;>;", "()Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPPublicKey;>;", "()Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPSecretKey;>;", "getSecretKey", "LJavaIoIOException;", "encode", "LJavaIoOutputStream;", "replacePublicKeys", "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", "copyWithNewPassword", "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", "LLibOrgBouncycastleOpenpgpPGPException;", "insertSecretKey", "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;LLibOrgBouncycastleOpenpgpPGPSecretKey;", "removeSecretKey", "Llib/org/bouncycastle/openpgp/PGPKeyRing;Llib/org/bouncycastle/util/Iterable<Llib/org/bouncycastle/openpgp/PGPSecretKey;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPSecretKeyRing = { "PGPSecretKeyRing", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 22, 2, -1, -1, -1, 25, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPSecretKeyRing;
}

@end

id<JavaUtilList> LibOrgBouncycastleOpenpgpPGPSecretKeyRing_checkKeysWithJavaUtilList_(id<JavaUtilList> keys) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initialize();
  id<JavaUtilList> rv = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(keys)) size]);
  for (jint i = 0; i != [keys size]; i++) {
    LibOrgBouncycastleOpenpgpPGPSecretKey *k = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([keys getWithInt:i], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
    if (i == 0) {
      if (![((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(k)) isMasterKey]) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"key 0 must be a master key");
      }
    }
    else {
      if ([((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(k)) isMasterKey]) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"key 0 can be only master key");
      }
    }
    [rv addWithId:k];
  }
  return rv;
}

void LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *self, id<JavaUtilList> secKeys) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(self, LibOrgBouncycastleOpenpgpPGPSecretKeyRing_checkKeysWithJavaUtilList_(secKeys), new_JavaUtilArrayList_init());
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(id<JavaUtilList> secKeys) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, initWithJavaUtilList_, secKeys)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(id<JavaUtilList> secKeys) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, initWithJavaUtilList_, secKeys)
}

void LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *self, id<JavaUtilList> keys, id<JavaUtilList> extraPubKeys) {
  LibOrgBouncycastleOpenpgpPGPKeyRing_init(self);
  self->keys_ = keys;
  self->extraPubKeys_ = extraPubKeys;
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> keys, id<JavaUtilList> extraPubKeys) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, initWithJavaUtilList_withJavaUtilList_, keys, extraPubKeys)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> keys, id<JavaUtilList> extraPubKeys) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, initWithJavaUtilList_withJavaUtilList_, keys, extraPubKeys)
}

void LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *self, IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, new_JavaIoByteArrayInputStream_initWithByteArray_(encoding), fingerPrintCalculator);
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, encoding, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, encoding, fingerPrintCalculator)
}

void LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *self, JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  LibOrgBouncycastleOpenpgpPGPKeyRing_init(self);
  self->keys_ = new_JavaUtilArrayList_init();
  self->extraPubKeys_ = new_JavaUtilArrayList_init();
  LibOrgBouncycastleBcpgBCPGInputStream *pIn = LibOrgBouncycastleOpenpgpPGPKeyRing_wrapWithJavaIoInputStream_(inArg);
  jint initialTag = [((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(pIn)) nextPacketTag];
  if (initialTag != LibOrgBouncycastleBcpgPacketTags_SECRET_KEY && initialTag != LibOrgBouncycastleBcpgPacketTags_SECRET_SUBKEY) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"secret key ring doesn't start with secret key tag: tag 0x", JavaLangInteger_toHexStringWithInt_(initialTag)));
  }
  LibOrgBouncycastleBcpgSecretKeyPacket *secret = (LibOrgBouncycastleBcpgSecretKeyPacket *) cast_chk([pIn readPacket], [LibOrgBouncycastleBcpgSecretKeyPacket class]);
  while ([pIn nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_EXPERIMENTAL_2) {
    (void) [pIn readPacket];
  }
  LibOrgBouncycastleBcpgTrustPacket *trust = LibOrgBouncycastleOpenpgpPGPKeyRing_readOptionalTrustPacketWithLibOrgBouncycastleBcpgBCPGInputStream_(pIn);
  id<JavaUtilList> keySigs = LibOrgBouncycastleOpenpgpPGPKeyRing_readSignaturesAndTrustWithLibOrgBouncycastleBcpgBCPGInputStream_(pIn);
  id<JavaUtilList> ids = new_JavaUtilArrayList_init();
  id<JavaUtilList> idTrusts = new_JavaUtilArrayList_init();
  id<JavaUtilList> idSigs = new_JavaUtilArrayList_init();
  LibOrgBouncycastleOpenpgpPGPKeyRing_readUserIDsWithLibOrgBouncycastleBcpgBCPGInputStream_withJavaUtilList_withJavaUtilList_withJavaUtilList_(pIn, ids, idTrusts, idSigs);
  [((id<JavaUtilList>) nil_chk(self->keys_)) addWithId:new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(secret, new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(secret)) getPublicKeyPacket], trust, keySigs, ids, idTrusts, idSigs, fingerPrintCalculator))];
  while ([pIn nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_SECRET_SUBKEY || [pIn nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_PUBLIC_SUBKEY) {
    if ([pIn nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_SECRET_SUBKEY) {
      LibOrgBouncycastleBcpgSecretSubkeyPacket *sub = (LibOrgBouncycastleBcpgSecretSubkeyPacket *) cast_chk([pIn readPacket], [LibOrgBouncycastleBcpgSecretSubkeyPacket class]);
      while ([pIn nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_EXPERIMENTAL_2) {
        (void) [pIn readPacket];
      }
      LibOrgBouncycastleBcpgTrustPacket *subTrust = LibOrgBouncycastleOpenpgpPGPKeyRing_readOptionalTrustPacketWithLibOrgBouncycastleBcpgBCPGInputStream_(pIn);
      id<JavaUtilList> sigList = LibOrgBouncycastleOpenpgpPGPKeyRing_readSignaturesAndTrustWithLibOrgBouncycastleBcpgBCPGInputStream_(pIn);
      [((id<JavaUtilList>) nil_chk(self->keys_)) addWithId:new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(sub, new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_([((LibOrgBouncycastleBcpgSecretSubkeyPacket *) nil_chk(sub)) getPublicKeyPacket], subTrust, sigList, fingerPrintCalculator))];
    }
    else {
      LibOrgBouncycastleBcpgPublicSubkeyPacket *sub = (LibOrgBouncycastleBcpgPublicSubkeyPacket *) cast_chk([pIn readPacket], [LibOrgBouncycastleBcpgPublicSubkeyPacket class]);
      LibOrgBouncycastleBcpgTrustPacket *subTrust = LibOrgBouncycastleOpenpgpPGPKeyRing_readOptionalTrustPacketWithLibOrgBouncycastleBcpgBCPGInputStream_(pIn);
      id<JavaUtilList> sigList = LibOrgBouncycastleOpenpgpPGPKeyRing_readSignaturesAndTrustWithLibOrgBouncycastleBcpgBCPGInputStream_(pIn);
      [((id<JavaUtilList>) nil_chk(self->extraPubKeys_)) addWithId:new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(sub, subTrust, sigList, fingerPrintCalculator)];
    }
  }
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, inArg, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, inArg, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *LibOrgBouncycastleOpenpgpPGPSecretKeyRing_replacePublicKeysWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretRing, LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicRing) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initialize();
  id<JavaUtilList> newList = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secretRing))->keys_)) size]);
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(secretRing->keys_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    LibOrgBouncycastleOpenpgpPGPSecretKey *sk = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
    LibOrgBouncycastleOpenpgpPGPPublicKey *pk = [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(publicRing)) getPublicKeyWithLong:[((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(sk)) getKeyID]];
    [newList addWithId:LibOrgBouncycastleOpenpgpPGPSecretKey_replacePublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_(sk, pk)];
  }
  return new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(newList);
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *LibOrgBouncycastleOpenpgpPGPSecretKeyRing_copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *ring, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *oldKeyDecryptor, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *newKeyEncryptor) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initialize();
  id<JavaUtilList> newKeys = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(ring))->keys_)) size]);
  for (id<JavaUtilIterator> keys = [ring getSecretKeys]; [((id<JavaUtilIterator>) nil_chk(keys)) hasNext]; ) {
    LibOrgBouncycastleOpenpgpPGPSecretKey *key = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([keys next], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
    if ([((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(key)) isPrivateKeyEmpty]) {
      [newKeys addWithId:key];
    }
    else {
      [newKeys addWithId:LibOrgBouncycastleOpenpgpPGPSecretKey_copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKey_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(key, oldKeyDecryptor, newKeyEncryptor)];
    }
  }
  return new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(newKeys, ring->extraPubKeys_);
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *LibOrgBouncycastleOpenpgpPGPSecretKeyRing_insertSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKey_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secRing, LibOrgBouncycastleOpenpgpPGPSecretKey *secKey) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initialize();
  id<JavaUtilList> keys = new_JavaUtilArrayList_initWithJavaUtilCollection_(((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secRing))->keys_);
  jboolean found = false;
  jboolean masterFound = false;
  for (jint i = 0; i != [keys size]; i++) {
    LibOrgBouncycastleOpenpgpPGPSecretKey *key = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([keys getWithInt:i], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
    if ([((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(key)) getKeyID] == [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(secKey)) getKeyID]) {
      found = true;
      (void) [keys setWithInt:i withId:secKey];
    }
    if ([key isMasterKey]) {
      masterFound = true;
    }
  }
  if (!found) {
    if ([((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(secKey)) isMasterKey]) {
      if (masterFound) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot add a master key to a ring that already has one");
      }
      [keys addWithInt:0 withId:secKey];
    }
    else {
      [keys addWithId:secKey];
    }
  }
  return new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(keys, secRing->extraPubKeys_);
}

LibOrgBouncycastleOpenpgpPGPSecretKeyRing *LibOrgBouncycastleOpenpgpPGPSecretKeyRing_removeSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKey_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secRing, LibOrgBouncycastleOpenpgpPGPSecretKey *secKey) {
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initialize();
  id<JavaUtilList> keys = new_JavaUtilArrayList_initWithJavaUtilCollection_(((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secRing))->keys_);
  jboolean found = false;
  for (jint i = 0; i < [keys size]; i++) {
    LibOrgBouncycastleOpenpgpPGPSecretKey *key = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([keys getWithInt:i], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
    if ([((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(key)) getKeyID] == [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(secKey)) getKeyID]) {
      found = true;
      (void) [keys removeWithInt:i];
    }
  }
  if (!found) {
    return nil;
  }
  return new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_withJavaUtilList_(keys, secRing->extraPubKeys_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPSecretKeyRing)
