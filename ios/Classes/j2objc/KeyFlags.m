//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/sig/KeyFlags.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFlags.h"
#include "SignatureSubpacket.h"
#include "SignatureSubpacketTags.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleBcpgSigKeyFlags ()

+ (IOSByteArray *)intToByteArrayWithInt:(jint)v;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleBcpgSigKeyFlags_intToByteArrayWithInt_(jint v);

@implementation LibOrgBouncycastleBcpgSigKeyFlags

+ (jint)CERTIFY_OTHER {
  return LibOrgBouncycastleBcpgSigKeyFlags_CERTIFY_OTHER;
}

+ (jint)SIGN_DATA {
  return LibOrgBouncycastleBcpgSigKeyFlags_SIGN_DATA;
}

+ (jint)ENCRYPT_COMMS {
  return LibOrgBouncycastleBcpgSigKeyFlags_ENCRYPT_COMMS;
}

+ (jint)ENCRYPT_STORAGE {
  return LibOrgBouncycastleBcpgSigKeyFlags_ENCRYPT_STORAGE;
}

+ (jint)SPLIT {
  return LibOrgBouncycastleBcpgSigKeyFlags_SPLIT;
}

+ (jint)AUTHENTICATION {
  return LibOrgBouncycastleBcpgSigKeyFlags_AUTHENTICATION;
}

+ (jint)SHARED {
  return LibOrgBouncycastleBcpgSigKeyFlags_SHARED;
}

+ (IOSByteArray *)intToByteArrayWithInt:(jint)v {
  return LibOrgBouncycastleBcpgSigKeyFlags_intToByteArrayWithInt_(v);
}

- (instancetype)initWithBoolean:(jboolean)critical
                    withBoolean:(jboolean)isLongLength
                  withByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withBoolean_withByteArray_(self, critical, isLongLength, data);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)critical
                        withInt:(jint)flags {
  LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withInt_(self, critical, flags);
  return self;
}

- (jint)getFlags {
  jint flags = 0;
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(data_))->size_; i++) {
    flags |= JreLShift32((IOSByteArray_Get(data_, i) & (jint) 0xff), (i * 8));
  }
  return flags;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(intToByteArrayWithInt:);
  methods[1].selector = @selector(initWithBoolean:withBoolean:withByteArray:);
  methods[2].selector = @selector(initWithBoolean:withInt:);
  methods[3].selector = @selector(getFlags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CERTIFY_OTHER", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigKeyFlags_CERTIFY_OTHER, 0x19, -1, -1, -1, -1 },
    { "SIGN_DATA", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigKeyFlags_SIGN_DATA, 0x19, -1, -1, -1, -1 },
    { "ENCRYPT_COMMS", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigKeyFlags_ENCRYPT_COMMS, 0x19, -1, -1, -1, -1 },
    { "ENCRYPT_STORAGE", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigKeyFlags_ENCRYPT_STORAGE, 0x19, -1, -1, -1, -1 },
    { "SPLIT", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigKeyFlags_SPLIT, 0x19, -1, -1, -1, -1 },
    { "AUTHENTICATION", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigKeyFlags_AUTHENTICATION, 0x19, -1, -1, -1, -1 },
    { "SHARED", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigKeyFlags_SHARED, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "intToByteArray", "I", "ZZ[B", "ZI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgSigKeyFlags = { "KeyFlags", "lib.org.bouncycastle.bcpg.sig", ptrTable, methods, fields, 7, 0x1, 4, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgSigKeyFlags;
}

@end

IOSByteArray *LibOrgBouncycastleBcpgSigKeyFlags_intToByteArrayWithInt_(jint v) {
  LibOrgBouncycastleBcpgSigKeyFlags_initialize();
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:4];
  jint size = 0;
  for (jint i = 0; i != 4; i++) {
    *IOSByteArray_GetRef(tmp, i) = (jbyte) (JreRShift32(v, (i * 8)));
    if (IOSByteArray_Get(tmp, i) != 0) {
      size = i;
    }
  }
  IOSByteArray *data = [IOSByteArray newArrayWithLength:size + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmp, 0, data, 0, data->size_);
  return data;
}

void LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withBoolean_withByteArray_(LibOrgBouncycastleBcpgSigKeyFlags *self, jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, LibOrgBouncycastleBcpgSignatureSubpacketTags_KEY_FLAGS, critical, isLongLength, data);
}

LibOrgBouncycastleBcpgSigKeyFlags *new_LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withBoolean_withByteArray_(jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSigKeyFlags, initWithBoolean_withBoolean_withByteArray_, critical, isLongLength, data)
}

LibOrgBouncycastleBcpgSigKeyFlags *create_LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withBoolean_withByteArray_(jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSigKeyFlags, initWithBoolean_withBoolean_withByteArray_, critical, isLongLength, data)
}

void LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withInt_(LibOrgBouncycastleBcpgSigKeyFlags *self, jboolean critical, jint flags) {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, LibOrgBouncycastleBcpgSignatureSubpacketTags_KEY_FLAGS, critical, false, LibOrgBouncycastleBcpgSigKeyFlags_intToByteArrayWithInt_(flags));
}

LibOrgBouncycastleBcpgSigKeyFlags *new_LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withInt_(jboolean critical, jint flags) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSigKeyFlags, initWithBoolean_withInt_, critical, flags)
}

LibOrgBouncycastleBcpgSigKeyFlags *create_LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withInt_(jboolean critical, jint flags) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSigKeyFlags, initWithBoolean_withInt_, critical, flags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgSigKeyFlags)
