//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/ec/ECPair.java
//

#include "ECPair.h"
#include "ECPoint.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoEcECPair () {
 @public
  LibOrgBouncycastleMathEcECPoint *x_;
  LibOrgBouncycastleMathEcECPoint *y_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEcECPair, x_, LibOrgBouncycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEcECPair, y_, LibOrgBouncycastleMathEcECPoint *)

@implementation LibOrgBouncycastleCryptoEcECPair

- (instancetype)initWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)x
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)y {
  LibOrgBouncycastleCryptoEcECPair_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(self, x, y);
  return self;
}

- (LibOrgBouncycastleMathEcECPoint *)getX {
  return x_;
}

- (LibOrgBouncycastleMathEcECPoint *)getY {
  return y_;
}

- (jboolean)equalsWithLibOrgBouncycastleCryptoEcECPair:(LibOrgBouncycastleCryptoEcECPair *)other {
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoEcECPair *) nil_chk(other)) getX])) equalsWithLibOrgBouncycastleMathEcECPoint:[self getX]] && [((LibOrgBouncycastleMathEcECPoint *) nil_chk([other getY])) equalsWithLibOrgBouncycastleMathEcECPoint:[self getY]];
}

- (jboolean)isEqual:(id)other {
  return [other isKindOfClass:[LibOrgBouncycastleCryptoEcECPair class]] ? [self equalsWithLibOrgBouncycastleCryptoEcECPair:(LibOrgBouncycastleCryptoEcECPair *) cast_chk(other, [LibOrgBouncycastleCryptoEcECPair class])] : false;
}

- (NSUInteger)hash {
  return ((jint) [((LibOrgBouncycastleMathEcECPoint *) nil_chk(x_)) hash]) + 37 * ((jint) [((LibOrgBouncycastleMathEcECPoint *) nil_chk(y_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECPoint:withLibOrgBouncycastleMathEcECPoint:);
  methods[1].selector = @selector(getX);
  methods[2].selector = @selector(getY);
  methods[3].selector = @selector(equalsWithLibOrgBouncycastleCryptoEcECPair:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "y_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleMathEcECPoint;LLibOrgBouncycastleMathEcECPoint;", "equals", "LLibOrgBouncycastleCryptoEcECPair;", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEcECPair = { "ECPair", "lib.org.bouncycastle.crypto.ec", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEcECPair;
}

@end

void LibOrgBouncycastleCryptoEcECPair_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleCryptoEcECPair *self, LibOrgBouncycastleMathEcECPoint *x, LibOrgBouncycastleMathEcECPoint *y) {
  NSObject_init(self);
  self->x_ = x;
  self->y_ = y;
}

LibOrgBouncycastleCryptoEcECPair *new_LibOrgBouncycastleCryptoEcECPair_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *x, LibOrgBouncycastleMathEcECPoint *y) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEcECPair, initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_, x, y)
}

LibOrgBouncycastleCryptoEcECPair *create_LibOrgBouncycastleCryptoEcECPair_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *x, LibOrgBouncycastleMathEcECPoint *y) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEcECPair, initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_, x, y)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEcECPair)
