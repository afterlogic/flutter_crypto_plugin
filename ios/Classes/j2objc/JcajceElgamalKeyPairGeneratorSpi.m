//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/elgamal/JcajceElgamalKeyPairGeneratorSpi.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BCElGamalPrivateKey.h"
#include "BCElGamalPublicKey.h"
#include "BouncyCastleProvider.h"
#include "CryptoServicesRegistrar.h"
#include "ElGamalKeyGenerationParameters.h"
#include "ElGamalKeyPairGenerator.h"
#include "ElGamalParameterSpec.h"
#include "ElGamalParameters.h"
#include "ElGamalParametersGenerator.h"
#include "ElGamalPrivateKeyParameters.h"
#include "ElGamalPublicKeyParameters.h"
#include "J2ObjC_source.h"
#include "JcajceElgamalKeyPairGeneratorSpi.h"
#include "ProviderConfiguration.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/spec/DHParameterSpec.h"

@implementation LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->strength_ = strength;
  self->random_ = random;
}

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (!([params isKindOfClass:[LibOrgBouncycastleJceSpecElGamalParameterSpec class]]) && !([params isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not a DHParameterSpec or an ElGamalParameterSpec");
  }
  if ([params isKindOfClass:[LibOrgBouncycastleJceSpecElGamalParameterSpec class]]) {
    LibOrgBouncycastleJceSpecElGamalParameterSpec *elParams = (LibOrgBouncycastleJceSpecElGamalParameterSpec *) params;
    param_ = new_LibOrgBouncycastleCryptoParamsElGamalKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsElGamalParameters_(random, new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk(elParams)) getP], [elParams getG]));
  }
  else {
    JavaxCryptoSpecDHParameterSpec *dhParams = (JavaxCryptoSpecDHParameterSpec *) cast_chk(params, [JavaxCryptoSpecDHParameterSpec class]);
    param_ = new_LibOrgBouncycastleCryptoParamsElGamalKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsElGamalParameters_(random, new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([((JavaxCryptoSpecDHParameterSpec *) nil_chk(dhParams)) getP], [dhParams getG], [dhParams getL]));
  }
  [((LibOrgBouncycastleCryptoGeneratorsElGamalKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param_];
  initialised_ = true;
}

- (JavaSecurityKeyPair *)generateKeyPair {
  if (!initialised_) {
    JavaxCryptoSpecDHParameterSpec *dhParams = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getDHDefaultParametersWithInt:strength_];
    if (dhParams != nil) {
      param_ = new_LibOrgBouncycastleCryptoParamsElGamalKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsElGamalParameters_(random_, new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([dhParams getP], [dhParams getG], [dhParams getL]));
    }
    else {
      LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator *pGen = new_LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator_init();
      [pGen init__WithInt:strength_ withInt:certainty_ withJavaSecuritySecureRandom:random_];
      param_ = new_LibOrgBouncycastleCryptoParamsElGamalKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsElGamalParameters_(random_, [pGen generateParameters]);
    }
    [((LibOrgBouncycastleCryptoGeneratorsElGamalKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((LibOrgBouncycastleCryptoGeneratorsElGamalKeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters *pub = (LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters class]);
  LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters *priv = (LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters *) cast_chk([pair getPrivate], [LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters class]);
  return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_(pub), new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPrivateKey_initWithLibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters_(priv));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "param_", "LLibOrgBouncycastleCryptoParamsElGamalKeyGenerationParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "engine_", "LLibOrgBouncycastleCryptoGeneratorsElGamalKeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "certainty_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi = { "JcajceElgamalKeyPairGeneratorSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.elgamal", ptrTable, methods, fields, 7, 0x1, 4, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi_init(LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self, @"ElGamal");
  self->engine_ = new_LibOrgBouncycastleCryptoGeneratorsElGamalKeyPairGenerator_init();
  self->strength_ = 1024;
  self->certainty_ = 20;
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyPairGeneratorSpi)
