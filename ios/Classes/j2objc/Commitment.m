//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/Commitment.java
//

#include "Commitment.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoCommitment () {
 @public
  IOSByteArray *secret_;
  IOSByteArray *commitment_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoCommitment, secret_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoCommitment, commitment_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoCommitment

- (instancetype)initWithByteArray:(IOSByteArray *)secret
                    withByteArray:(IOSByteArray *)commitment {
  LibOrgBouncycastleCryptoCommitment_initWithByteArray_withByteArray_(self, secret, commitment);
  return self;
}

- (IOSByteArray *)getSecret {
  return secret_;
}

- (IOSByteArray *)getCommitment {
  return commitment_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withByteArray:);
  methods[1].selector = @selector(getSecret);
  methods[2].selector = @selector(getCommitment);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "secret_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "commitment_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoCommitment = { "Commitment", "lib.org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoCommitment;
}

@end

void LibOrgBouncycastleCryptoCommitment_initWithByteArray_withByteArray_(LibOrgBouncycastleCryptoCommitment *self, IOSByteArray *secret, IOSByteArray *commitment) {
  NSObject_init(self);
  self->secret_ = secret;
  self->commitment_ = commitment;
}

LibOrgBouncycastleCryptoCommitment *new_LibOrgBouncycastleCryptoCommitment_initWithByteArray_withByteArray_(IOSByteArray *secret, IOSByteArray *commitment) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoCommitment, initWithByteArray_withByteArray_, secret, commitment)
}

LibOrgBouncycastleCryptoCommitment *create_LibOrgBouncycastleCryptoCommitment_initWithByteArray_withByteArray_(IOSByteArray *secret, IOSByteArray *commitment) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoCommitment, initWithByteArray_withByteArray_, secret, commitment)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoCommitment)
