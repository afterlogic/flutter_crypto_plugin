//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/JCEElGamalPrivateKey.java
//

#ifndef JCEElGamalPrivateKey_H
#define JCEElGamalPrivateKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ElGamalPrivateKey.h"
#include "J2ObjC_header.h"
#include "PKCS12BagAttributeCarrier.h"
#include "javax/crypto/interfaces/DHPrivateKey.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaxCryptoSpecDHParameterSpec;
@class JavaxCryptoSpecDHPrivateKeySpec;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters;
@class LibOrgBouncycastleJceSpecElGamalParameterSpec;
@class LibOrgBouncycastleJceSpecElGamalPrivateKeySpec;
@protocol JavaUtilEnumeration;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleJceProviderJCEElGamalPrivateKey : NSObject < LibOrgBouncycastleJceInterfacesElGamalPrivateKey, JavaxCryptoInterfacesDHPrivateKey, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier > {
 @public
  JavaMathBigInteger *x_;
  LibOrgBouncycastleJceSpecElGamalParameterSpec *elSpec_;
}
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

- (NSString *)getAlgorithm;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

- (id<JavaUtilEnumeration>)getBagAttributeKeys;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (LibOrgBouncycastleJceSpecElGamalParameterSpec *)getParameters;

- (JavaxCryptoSpecDHParameterSpec *)getParams;

- (JavaMathBigInteger *)getX;

- (void)setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                              withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)attribute;

#pragma mark Protected

- (instancetype __nonnull)init;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaxCryptoInterfacesDHPrivateKey:(id<JavaxCryptoInterfacesDHPrivateKey>)key;

- (instancetype __nonnull)initWithJavaxCryptoSpecDHPrivateKeySpec:(JavaxCryptoSpecDHPrivateKeySpec *)spec;

- (instancetype __nonnull)initWithLibOrgBouncycastleJceInterfacesElGamalPrivateKey:(id<LibOrgBouncycastleJceInterfacesElGamalPrivateKey>)key;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters *)params;

- (instancetype __nonnull)initWithLibOrgBouncycastleJceSpecElGamalPrivateKeySpec:(LibOrgBouncycastleJceSpecElGamalPrivateKeySpec *)spec;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)info;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey, x_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey, elSpec_, LibOrgBouncycastleJceSpecElGamalParameterSpec *)

inline jlong LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_get_serialVersionUID(void);
#define LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_serialVersionUID 4819350091141529678LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey, serialVersionUID, jlong)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_init(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *new_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *create_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleJceInterfacesElGamalPrivateKey_(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *self, id<LibOrgBouncycastleJceInterfacesElGamalPrivateKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *new_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleJceInterfacesElGamalPrivateKey_(id<LibOrgBouncycastleJceInterfacesElGamalPrivateKey> key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *create_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleJceInterfacesElGamalPrivateKey_(id<LibOrgBouncycastleJceInterfacesElGamalPrivateKey> key);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *self, id<JavaxCryptoInterfacesDHPrivateKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *new_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(id<JavaxCryptoInterfacesDHPrivateKey> key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *create_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(id<JavaxCryptoInterfacesDHPrivateKey> key);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleJceSpecElGamalPrivateKeySpec_(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *self, LibOrgBouncycastleJceSpecElGamalPrivateKeySpec *spec);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *new_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleJceSpecElGamalPrivateKeySpec_(LibOrgBouncycastleJceSpecElGamalPrivateKeySpec *spec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *create_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleJceSpecElGamalPrivateKeySpec_(LibOrgBouncycastleJceSpecElGamalPrivateKeySpec *spec);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *self, JavaxCryptoSpecDHPrivateKeySpec *spec);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *new_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(JavaxCryptoSpecDHPrivateKeySpec *spec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *create_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(JavaxCryptoSpecDHPrivateKeySpec *spec);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *self, LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *new_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *create_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters_(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *self, LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *new_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEElGamalPrivateKey *create_LibOrgBouncycastleJceProviderJCEElGamalPrivateKey_initWithLibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderJCEElGamalPrivateKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // JCEElGamalPrivateKey_H
