//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/SkeinDigest.java
//

#ifndef SkeinDigest_H
#define SkeinDigest_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ExtendedDigest.h"
#include "J2ObjC_header.h"
#include "Memoable.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoParamsSkeinParameters;

@interface LibOrgBouncycastleCryptoDigestsSkeinDigest : NSObject < LibOrgBouncycastleCryptoExtendedDigest, LibOrgBouncycastleUtilMemoable >
@property (readonly, class) jint SKEIN_256 NS_SWIFT_NAME(SKEIN_256);
@property (readonly, class) jint SKEIN_512 NS_SWIFT_NAME(SKEIN_512);
@property (readonly, class) jint SKEIN_1024 NS_SWIFT_NAME(SKEIN_1024);

+ (jint)SKEIN_256;

+ (jint)SKEIN_512;

+ (jint)SKEIN_1024;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)stateSizeBits
                              withInt:(jint)digestSizeBits;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigestsSkeinDigest:(LibOrgBouncycastleCryptoDigestsSkeinDigest *)digest;

- (id<LibOrgBouncycastleUtilMemoable>)copy__ OBJC_METHOD_FAMILY_NONE;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getByteLength;

- (jint)getDigestSize;

- (void)init__WithLibOrgBouncycastleCryptoParamsSkeinParameters:(LibOrgBouncycastleCryptoParamsSkeinParameters *)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)resetWithLibOrgBouncycastleUtilMemoable:(id<LibOrgBouncycastleUtilMemoable>)other;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoDigestsSkeinDigest)

inline jint LibOrgBouncycastleCryptoDigestsSkeinDigest_get_SKEIN_256(void);
#define LibOrgBouncycastleCryptoDigestsSkeinDigest_SKEIN_256 256
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinDigest, SKEIN_256, jint)

inline jint LibOrgBouncycastleCryptoDigestsSkeinDigest_get_SKEIN_512(void);
#define LibOrgBouncycastleCryptoDigestsSkeinDigest_SKEIN_512 512
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinDigest, SKEIN_512, jint)

inline jint LibOrgBouncycastleCryptoDigestsSkeinDigest_get_SKEIN_1024(void);
#define LibOrgBouncycastleCryptoDigestsSkeinDigest_SKEIN_1024 1024
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinDigest, SKEIN_1024, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoDigestsSkeinDigest_initWithInt_withInt_(LibOrgBouncycastleCryptoDigestsSkeinDigest *self, jint stateSizeBits, jint digestSizeBits);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinDigest *new_LibOrgBouncycastleCryptoDigestsSkeinDigest_initWithInt_withInt_(jint stateSizeBits, jint digestSizeBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinDigest *create_LibOrgBouncycastleCryptoDigestsSkeinDigest_initWithInt_withInt_(jint stateSizeBits, jint digestSizeBits);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoDigestsSkeinDigest_initWithLibOrgBouncycastleCryptoDigestsSkeinDigest_(LibOrgBouncycastleCryptoDigestsSkeinDigest *self, LibOrgBouncycastleCryptoDigestsSkeinDigest *digest);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinDigest *new_LibOrgBouncycastleCryptoDigestsSkeinDigest_initWithLibOrgBouncycastleCryptoDigestsSkeinDigest_(LibOrgBouncycastleCryptoDigestsSkeinDigest *digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinDigest *create_LibOrgBouncycastleCryptoDigestsSkeinDigest_initWithLibOrgBouncycastleCryptoDigestsSkeinDigest_(LibOrgBouncycastleCryptoDigestsSkeinDigest *digest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoDigestsSkeinDigest)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SkeinDigest_H
