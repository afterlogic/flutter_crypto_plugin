//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/OpenPgpOperatorPGPUtil.java
//

#ifndef OpenPgpOperatorPGPUtil_H
#define OpenPgpOperatorPGPUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "HashAlgorithmTags.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSCharArray;
@class LibOrgBouncycastleBcpgS2K;
@protocol LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;
@protocol LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider;

@interface LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil : NSObject < LibOrgBouncycastleBcpgHashAlgorithmTags >

#pragma mark Public

+ (IOSByteArray *)makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>)digCalcProvider
                                                                                                withInt:(jint)algorithm
                                                                          withLibOrgBouncycastleBcpgS2K:(LibOrgBouncycastleBcpgS2K *)s2k
                                                                                          withCharArray:(IOSCharArray *)passPhrase;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (IOSByteArray *)makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)digestCalculator
                                                                                        withInt:(jint)algorithm
                                                                  withLibOrgBouncycastleBcpgS2K:(LibOrgBouncycastleBcpgS2K *)s2k
                                                                                  withCharArray:(IOSCharArray *)passPhrase;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_init(LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil *new_LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil *create_LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_init(void);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalculator, jint algorithm, LibOrgBouncycastleBcpgS2K *s2k, IOSCharArray *passPhrase);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider> digCalcProvider, jint algorithm, LibOrgBouncycastleBcpgS2K *s2k, IOSCharArray *passPhrase);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OpenPgpOperatorPGPUtil_H
