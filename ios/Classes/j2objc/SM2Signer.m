//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/SM2Signer.java
//

#include "CipherParameters.h"
#include "CryptoException.h"
#include "CryptoServicesRegistrar.h"
#include "DSAEncoding.h"
#include "DSAKCalculator.h"
#include "Digest.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECKeyParameters.h"
#include "ECMultiplier.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "FixedPointCombMultiplier.h"
#include "Hex.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithID.h"
#include "ParametersWithRandom.h"
#include "RandomDSAKCalculator.h"
#include "SM2Signer.h"
#include "SM3Digest.h"
#include "StandardDSAEncoding.h"
#include "java/lang/Exception.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoSignersSM2Signer () {
 @public
  id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator_;
  LibOrgBouncycastleCryptoDigestsSM3Digest *digest_;
  id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding_;
  LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams_;
  LibOrgBouncycastleMathEcECPoint *pubPoint_;
  LibOrgBouncycastleCryptoParamsECKeyParameters *ecKey_;
  IOSByteArray *z_;
}

- (jboolean)verifySignatureWithJavaMathBigInteger:(JavaMathBigInteger *)r
                           withJavaMathBigInteger:(JavaMathBigInteger *)s;

- (IOSByteArray *)digestDoFinal;

- (IOSByteArray *)getZWithByteArray:(IOSByteArray *)userID;

- (void)addUserIDWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                      withByteArray:(IOSByteArray *)userID;

- (void)addFieldElementWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
               withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)v;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersSM2Signer, kCalculator_, id<LibOrgBouncycastleCryptoSignersDSAKCalculator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersSM2Signer, digest_, LibOrgBouncycastleCryptoDigestsSM3Digest *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersSM2Signer, encoding_, id<LibOrgBouncycastleCryptoSignersDSAEncoding>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersSM2Signer, ecParams_, LibOrgBouncycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersSM2Signer, pubPoint_, LibOrgBouncycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersSM2Signer, ecKey_, LibOrgBouncycastleCryptoParamsECKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersSM2Signer, z_, IOSByteArray *)

__attribute__((unused)) static jboolean LibOrgBouncycastleCryptoSignersSM2Signer_verifySignatureWithJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleCryptoSignersSM2Signer *self, JavaMathBigInteger *r, JavaMathBigInteger *s);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoSignersSM2Signer_digestDoFinal(LibOrgBouncycastleCryptoSignersSM2Signer *self);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoSignersSM2Signer_getZWithByteArray_(LibOrgBouncycastleCryptoSignersSM2Signer *self, IOSByteArray *userID);

__attribute__((unused)) static void LibOrgBouncycastleCryptoSignersSM2Signer_addUserIDWithLibOrgBouncycastleCryptoDigest_withByteArray_(LibOrgBouncycastleCryptoSignersSM2Signer *self, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *userID);

__attribute__((unused)) static void LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleCryptoSignersSM2Signer *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECFieldElement *v);

@implementation LibOrgBouncycastleCryptoSignersSM2Signer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoSignersSM2Signer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoSignersDSAEncoding:(id<LibOrgBouncycastleCryptoSignersDSAEncoding>)encoding {
  LibOrgBouncycastleCryptoSignersSM2Signer_initWithLibOrgBouncycastleCryptoSignersDSAEncoding_(self, encoding);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  id<LibOrgBouncycastleCryptoCipherParameters> baseParam;
  IOSByteArray *userID;
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithID class]]) {
    baseParam = [((LibOrgBouncycastleCryptoParamsParametersWithID *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithID *) param))) getParameters];
    userID = [((LibOrgBouncycastleCryptoParamsParametersWithID *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithID *) param))) getID];
  }
  else {
    baseParam = param;
    userID = LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_(@"31323334353637383132333435363738");
  }
  if (forSigning) {
    if ([baseParam isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) baseParam;
      ecKey_ = (LibOrgBouncycastleCryptoParamsECKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [LibOrgBouncycastleCryptoParamsECKeyParameters class]);
      ecParams_ = [((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(ecKey_)) getParameters];
      [((id<LibOrgBouncycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) init__WithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getN] withJavaSecuritySecureRandom:[rParam getRandom]];
    }
    else {
      ecKey_ = (LibOrgBouncycastleCryptoParamsECKeyParameters *) cast_chk(baseParam, [LibOrgBouncycastleCryptoParamsECKeyParameters class]);
      ecParams_ = [((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(ecKey_)) getParameters];
      [((id<LibOrgBouncycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) init__WithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getN] withJavaSecuritySecureRandom:LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom()];
    }
    pubPoint_ = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((id<LibOrgBouncycastleMathEcECMultiplier>) nil_chk([self createBasePointMultiplier])) multiplyWithLibOrgBouncycastleMathEcECPoint:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getG] withJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(ecKey_, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class])))) getD]])) normalize];
  }
  else {
    ecKey_ = (LibOrgBouncycastleCryptoParamsECKeyParameters *) cast_chk(baseParam, [LibOrgBouncycastleCryptoParamsECKeyParameters class]);
    ecParams_ = [((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(ecKey_)) getParameters];
    pubPoint_ = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(ecKey_, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class])))) getQ];
  }
  z_ = LibOrgBouncycastleCryptoSignersSM2Signer_getZWithByteArray_(self, userID);
  [((LibOrgBouncycastleCryptoDigestsSM3Digest *) nil_chk(digest_)) updateWithByteArray:z_ withInt:0 withInt:((IOSByteArray *) nil_chk(z_))->size_];
}

- (void)updateWithByte:(jbyte)b {
  [((LibOrgBouncycastleCryptoDigestsSM3Digest *) nil_chk(digest_)) updateWithByte:b];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)off
                    withInt:(jint)len {
  [((LibOrgBouncycastleCryptoDigestsSM3Digest *) nil_chk(digest_)) updateWithByteArray:inArg withInt:off withInt:len];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  @try {
    IOSObjectArray *rs = [((id<LibOrgBouncycastleCryptoSignersDSAEncoding>) nil_chk(encoding_)) decodeWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getN] withByteArray:signature];
    return LibOrgBouncycastleCryptoSignersSM2Signer_verifySignatureWithJavaMathBigInteger_withJavaMathBigInteger_(self, IOSObjectArray_Get(nil_chk(rs), 0), IOSObjectArray_Get(rs, 1));
  }
  @catch (JavaLangException *e) {
  }
  return false;
}

- (void)reset {
  [((LibOrgBouncycastleCryptoDigestsSM3Digest *) nil_chk(digest_)) reset];
  if (z_ != nil) {
    [digest_ updateWithByteArray:z_ withInt:0 withInt:z_->size_];
  }
}

- (IOSByteArray *)generateSignature {
  IOSByteArray *eHash = LibOrgBouncycastleCryptoSignersSM2Signer_digestDoFinal(self);
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getN];
  JavaMathBigInteger *e = [self calculateEWithByteArray:eHash];
  JavaMathBigInteger *d = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(ecKey_, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class])))) getD];
  JavaMathBigInteger *r;
  JavaMathBigInteger *s;
  id<LibOrgBouncycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  do {
    JavaMathBigInteger *k;
    do {
      k = [((id<LibOrgBouncycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) nextK];
      LibOrgBouncycastleMathEcECPoint *p = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((id<LibOrgBouncycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithLibOrgBouncycastleMathEcECPoint:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getG] withJavaMathBigInteger:k])) normalize];
      r = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(e)) addWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getAffineXCoord])) toBigInteger]])) modWithJavaMathBigInteger:n];
    }
    while ([((JavaMathBigInteger *) nil_chk(r)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)] || [((JavaMathBigInteger *) nil_chk([r addWithJavaMathBigInteger:k])) isEqual:n]);
    JavaMathBigInteger *dPlus1ModN = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(d)) addWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)])) modInverseWithJavaMathBigInteger:n];
    s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(k)) subtractWithJavaMathBigInteger:[r multiplyWithJavaMathBigInteger:d]])) modWithJavaMathBigInteger:n];
    s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(dPlus1ModN)) multiplyWithJavaMathBigInteger:s])) modWithJavaMathBigInteger:n];
  }
  while ([((JavaMathBigInteger *) nil_chk(s)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]);
  @try {
    return [((id<LibOrgBouncycastleCryptoSignersDSAEncoding>) nil_chk(encoding_)) encodeWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getN] withJavaMathBigInteger:r withJavaMathBigInteger:s];
  }
  @catch (JavaLangException *ex) {
    @throw new_LibOrgBouncycastleCryptoCryptoException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to encode signature: ", [ex getMessage]), ex);
  }
}

- (jboolean)verifySignatureWithJavaMathBigInteger:(JavaMathBigInteger *)r
                           withJavaMathBigInteger:(JavaMathBigInteger *)s {
  return LibOrgBouncycastleCryptoSignersSM2Signer_verifySignatureWithJavaMathBigInteger_withJavaMathBigInteger_(self, r, s);
}

- (IOSByteArray *)digestDoFinal {
  return LibOrgBouncycastleCryptoSignersSM2Signer_digestDoFinal(self);
}

- (IOSByteArray *)getZWithByteArray:(IOSByteArray *)userID {
  return LibOrgBouncycastleCryptoSignersSM2Signer_getZWithByteArray_(self, userID);
}

- (void)addUserIDWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                      withByteArray:(IOSByteArray *)userID {
  LibOrgBouncycastleCryptoSignersSM2Signer_addUserIDWithLibOrgBouncycastleCryptoDigest_withByteArray_(self, digest, userID);
}

- (void)addFieldElementWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
               withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)v {
  LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, v);
}

- (id<LibOrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_LibOrgBouncycastleMathEcFixedPointCombMultiplier_init();
}

- (JavaMathBigInteger *)calculateEWithByteArray:(IOSByteArray *)message {
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, message);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 15, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoSignersDSAEncoding:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(updateWithByte:);
  methods[4].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(verifySignatureWithByteArray:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(generateSignature);
  methods[8].selector = @selector(verifySignatureWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[9].selector = @selector(digestDoFinal);
  methods[10].selector = @selector(getZWithByteArray:);
  methods[11].selector = @selector(addUserIDWithLibOrgBouncycastleCryptoDigest:withByteArray:);
  methods[12].selector = @selector(addFieldElementWithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[13].selector = @selector(createBasePointMultiplier);
  methods[14].selector = @selector(calculateEWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "kCalculator_", "LLibOrgBouncycastleCryptoSignersDSAKCalculator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "digest_", "LLibOrgBouncycastleCryptoDigestsSM3Digest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encoding_", "LLibOrgBouncycastleCryptoSignersDSAEncoding;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ecParams_", "LLibOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pubPoint_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecKey_", "LLibOrgBouncycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "z_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoSignersDSAEncoding;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "update", "B", "[BII", "verifySignature", "[B", "LLibOrgBouncycastleCryptoCryptoException;", "LJavaMathBigInteger;LJavaMathBigInteger;", "getZ", "addUserID", "LLibOrgBouncycastleCryptoDigest;[B", "addFieldElement", "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleMathEcECFieldElement;", "calculateE" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoSignersSM2Signer = { "SM2Signer", "lib.org.bouncycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 15, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoSignersSM2Signer;
}

@end

void LibOrgBouncycastleCryptoSignersSM2Signer_init(LibOrgBouncycastleCryptoSignersSM2Signer *self) {
  LibOrgBouncycastleCryptoSignersSM2Signer_initWithLibOrgBouncycastleCryptoSignersDSAEncoding_(self, JreLoadStatic(LibOrgBouncycastleCryptoSignersStandardDSAEncoding, INSTANCE));
}

LibOrgBouncycastleCryptoSignersSM2Signer *new_LibOrgBouncycastleCryptoSignersSM2Signer_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersSM2Signer, init)
}

LibOrgBouncycastleCryptoSignersSM2Signer *create_LibOrgBouncycastleCryptoSignersSM2Signer_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersSM2Signer, init)
}

void LibOrgBouncycastleCryptoSignersSM2Signer_initWithLibOrgBouncycastleCryptoSignersDSAEncoding_(LibOrgBouncycastleCryptoSignersSM2Signer *self, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) {
  NSObject_init(self);
  self->kCalculator_ = new_LibOrgBouncycastleCryptoSignersRandomDSAKCalculator_init();
  self->digest_ = new_LibOrgBouncycastleCryptoDigestsSM3Digest_init();
  self->encoding_ = encoding;
}

LibOrgBouncycastleCryptoSignersSM2Signer *new_LibOrgBouncycastleCryptoSignersSM2Signer_initWithLibOrgBouncycastleCryptoSignersDSAEncoding_(id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersSM2Signer, initWithLibOrgBouncycastleCryptoSignersDSAEncoding_, encoding)
}

LibOrgBouncycastleCryptoSignersSM2Signer *create_LibOrgBouncycastleCryptoSignersSM2Signer_initWithLibOrgBouncycastleCryptoSignersDSAEncoding_(id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersSM2Signer, initWithLibOrgBouncycastleCryptoSignersDSAEncoding_, encoding)
}

jboolean LibOrgBouncycastleCryptoSignersSM2Signer_verifySignatureWithJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleCryptoSignersSM2Signer *self, JavaMathBigInteger *r, JavaMathBigInteger *s) {
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getN];
  if ([((JavaMathBigInteger *) nil_chk(r)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] < 0 || [r compareToWithId:n] >= 0) {
    return false;
  }
  if ([((JavaMathBigInteger *) nil_chk(s)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] < 0 || [s compareToWithId:n] >= 0) {
    return false;
  }
  IOSByteArray *eHash = LibOrgBouncycastleCryptoSignersSM2Signer_digestDoFinal(self);
  JavaMathBigInteger *e = [self calculateEWithByteArray:eHash];
  JavaMathBigInteger *t = [((JavaMathBigInteger *) nil_chk([r addWithJavaMathBigInteger:s])) modWithJavaMathBigInteger:n];
  if ([((JavaMathBigInteger *) nil_chk(t)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]) {
    return false;
  }
  LibOrgBouncycastleMathEcECPoint *q = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(self->ecKey_, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class])))) getQ];
  LibOrgBouncycastleMathEcECPoint *x1y1 = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG], s, q, t))) normalize];
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(x1y1)) isInfinity]) {
    return false;
  }
  JavaMathBigInteger *expectedR = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(e)) addWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([x1y1 getAffineXCoord])) toBigInteger]])) modWithJavaMathBigInteger:n];
  return [((JavaMathBigInteger *) nil_chk(expectedR)) isEqual:r];
}

IOSByteArray *LibOrgBouncycastleCryptoSignersSM2Signer_digestDoFinal(LibOrgBouncycastleCryptoSignersSM2Signer *self) {
  IOSByteArray *result = [IOSByteArray newArrayWithLength:[((LibOrgBouncycastleCryptoDigestsSM3Digest *) nil_chk(self->digest_)) getDigestSize]];
  [self->digest_ doFinalWithByteArray:result withInt:0];
  [self reset];
  return result;
}

IOSByteArray *LibOrgBouncycastleCryptoSignersSM2Signer_getZWithByteArray_(LibOrgBouncycastleCryptoSignersSM2Signer *self, IOSByteArray *userID) {
  [((LibOrgBouncycastleCryptoDigestsSM3Digest *) nil_chk(self->digest_)) reset];
  LibOrgBouncycastleCryptoSignersSM2Signer_addUserIDWithLibOrgBouncycastleCryptoDigest_withByteArray_(self, self->digest_, userID);
  LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getCurve])) getA]);
  LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getCurve])) getB]);
  LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG])) getAffineXCoord]);
  LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG])) getAffineYCoord]);
  LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->pubPoint_)) getAffineXCoord]);
  LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->pubPoint_)) getAffineYCoord]);
  IOSByteArray *result = [IOSByteArray newArrayWithLength:[self->digest_ getDigestSize]];
  [self->digest_ doFinalWithByteArray:result withInt:0];
  return result;
}

void LibOrgBouncycastleCryptoSignersSM2Signer_addUserIDWithLibOrgBouncycastleCryptoDigest_withByteArray_(LibOrgBouncycastleCryptoSignersSM2Signer *self, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *userID) {
  jint len = ((IOSByteArray *) nil_chk(userID))->size_ * 8;
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByte:(jbyte) ((JreRShift32(len, 8)) & (jint) 0xFF)];
  [digest updateWithByte:(jbyte) (len & (jint) 0xFF)];
  [digest updateWithByteArray:userID withInt:0 withInt:userID->size_];
}

void LibOrgBouncycastleCryptoSignersSM2Signer_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleCryptoSignersSM2Signer *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECFieldElement *v) {
  IOSByteArray *p = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(v)) getEncoded];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:p withInt:0 withInt:((IOSByteArray *) nil_chk(p))->size_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoSignersSM2Signer)
