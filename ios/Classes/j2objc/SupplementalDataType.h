//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SupplementalDataType.java
//

#ifndef SupplementalDataType_H
#define SupplementalDataType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsSupplementalDataType : NSObject
@property (readonly, class) jint user_mapping_data NS_SWIFT_NAME(user_mapping_data);

+ (jint)user_mapping_data;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsSupplementalDataType)

inline jint LibOrgBouncycastleCryptoTlsSupplementalDataType_get_user_mapping_data(void);
#define LibOrgBouncycastleCryptoTlsSupplementalDataType_user_mapping_data 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSupplementalDataType, user_mapping_data, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSupplementalDataType_init(LibOrgBouncycastleCryptoTlsSupplementalDataType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSupplementalDataType *new_LibOrgBouncycastleCryptoTlsSupplementalDataType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSupplementalDataType *create_LibOrgBouncycastleCryptoTlsSupplementalDataType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsSupplementalDataType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SupplementalDataType_H
