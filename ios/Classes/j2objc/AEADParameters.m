//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/AEADParameters.java
//

#include "AEADParameters.h"
#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"

@interface LibOrgBouncycastleCryptoParamsAEADParameters () {
 @public
  IOSByteArray *associatedText_;
  IOSByteArray *nonce_;
  LibOrgBouncycastleCryptoParamsKeyParameter *key_;
  jint macSize_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsAEADParameters, associatedText_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsAEADParameters, nonce_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsAEADParameters, key_, LibOrgBouncycastleCryptoParamsKeyParameter *)

@implementation LibOrgBouncycastleCryptoParamsAEADParameters

- (instancetype)initWithLibOrgBouncycastleCryptoParamsKeyParameter:(LibOrgBouncycastleCryptoParamsKeyParameter *)key
                                                           withInt:(jint)macSize
                                                     withByteArray:(IOSByteArray *)nonce {
  LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_(self, key, macSize, nonce);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsKeyParameter:(LibOrgBouncycastleCryptoParamsKeyParameter *)key
                                                           withInt:(jint)macSize
                                                     withByteArray:(IOSByteArray *)nonce
                                                     withByteArray:(IOSByteArray *)associatedText {
  LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(self, key, macSize, nonce, associatedText);
  return self;
}

- (LibOrgBouncycastleCryptoParamsKeyParameter *)getKey {
  return key_;
}

- (jint)getMacSize {
  return macSize_;
}

- (IOSByteArray *)getAssociatedText {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(associatedText_);
}

- (IOSByteArray *)getNonce {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(nonce_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsKeyParameter:withInt:withByteArray:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoParamsKeyParameter:withInt:withByteArray:withByteArray:);
  methods[2].selector = @selector(getKey);
  methods[3].selector = @selector(getMacSize);
  methods[4].selector = @selector(getAssociatedText);
  methods[5].selector = @selector(getNonce);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "associatedText_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nonce_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsKeyParameter;I[B", "LLibOrgBouncycastleCryptoParamsKeyParameter;I[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsAEADParameters = { "AEADParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsAEADParameters;
}

@end

void LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_(LibOrgBouncycastleCryptoParamsAEADParameters *self, LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce) {
  LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(self, key, macSize, nonce, nil);
}

LibOrgBouncycastleCryptoParamsAEADParameters *new_LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_(LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsAEADParameters, initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_, key, macSize, nonce)
}

LibOrgBouncycastleCryptoParamsAEADParameters *create_LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_(LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsAEADParameters, initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_, key, macSize, nonce)
}

void LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(LibOrgBouncycastleCryptoParamsAEADParameters *self, LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce, IOSByteArray *associatedText) {
  NSObject_init(self);
  self->key_ = key;
  self->nonce_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(nonce);
  self->macSize_ = macSize;
  self->associatedText_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(associatedText);
}

LibOrgBouncycastleCryptoParamsAEADParameters *new_LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce, IOSByteArray *associatedText) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsAEADParameters, initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_, key, macSize, nonce, associatedText)
}

LibOrgBouncycastleCryptoParamsAEADParameters *create_LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce, IOSByteArray *associatedText) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsAEADParameters, initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_, key, macSize, nonce, associatedText)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsAEADParameters)
