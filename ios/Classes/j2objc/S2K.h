//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/S2K.java
//

#ifndef S2K_H
#define S2K_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BCPGObject.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class LibOrgBouncycastleBcpgBCPGOutputStream;

@interface LibOrgBouncycastleBcpgS2K : LibOrgBouncycastleBcpgBCPGObject {
 @public
  jint type_;
  jint algorithm_;
  IOSByteArray *iv_;
  jint itCount_;
  jint protectionMode_;
}
@property (readonly, class) jint SIMPLE NS_SWIFT_NAME(SIMPLE);
@property (readonly, class) jint SALTED NS_SWIFT_NAME(SALTED);
@property (readonly, class) jint SALTED_AND_ITERATED NS_SWIFT_NAME(SALTED_AND_ITERATED);
@property (readonly, class) jint GNU_DUMMY_S2K NS_SWIFT_NAME(GNU_DUMMY_S2K);
@property (readonly, class) jint GNU_PROTECTION_MODE_NO_PRIVATE_KEY NS_SWIFT_NAME(GNU_PROTECTION_MODE_NO_PRIVATE_KEY);
@property (readonly, class) jint GNU_PROTECTION_MODE_DIVERT_TO_CARD NS_SWIFT_NAME(GNU_PROTECTION_MODE_DIVERT_TO_CARD);

+ (jint)SIMPLE;

+ (jint)SALTED;

+ (jint)SALTED_AND_ITERATED;

+ (jint)GNU_DUMMY_S2K;

+ (jint)GNU_PROTECTION_MODE_NO_PRIVATE_KEY;

+ (jint)GNU_PROTECTION_MODE_DIVERT_TO_CARD;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)algorithm;

- (instancetype __nonnull)initWithInt:(jint)algorithm
                        withByteArray:(IOSByteArray *)iv;

- (instancetype __nonnull)initWithInt:(jint)algorithm
                        withByteArray:(IOSByteArray *)iv
                              withInt:(jint)itCount;

- (void)encodeWithLibOrgBouncycastleBcpgBCPGOutputStream:(LibOrgBouncycastleBcpgBCPGOutputStream *)outArg;

- (jint)getHashAlgorithm;

- (jlong)getIterationCount;

- (IOSByteArray *)getIV;

- (jint)getProtectionMode;

- (jint)getType;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleBcpgS2K)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleBcpgS2K, iv_, IOSByteArray *)

inline jint LibOrgBouncycastleBcpgS2K_get_SIMPLE(void);
#define LibOrgBouncycastleBcpgS2K_SIMPLE 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleBcpgS2K, SIMPLE, jint)

inline jint LibOrgBouncycastleBcpgS2K_get_SALTED(void);
#define LibOrgBouncycastleBcpgS2K_SALTED 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleBcpgS2K, SALTED, jint)

inline jint LibOrgBouncycastleBcpgS2K_get_SALTED_AND_ITERATED(void);
#define LibOrgBouncycastleBcpgS2K_SALTED_AND_ITERATED 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleBcpgS2K, SALTED_AND_ITERATED, jint)

inline jint LibOrgBouncycastleBcpgS2K_get_GNU_DUMMY_S2K(void);
#define LibOrgBouncycastleBcpgS2K_GNU_DUMMY_S2K 101
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleBcpgS2K, GNU_DUMMY_S2K, jint)

inline jint LibOrgBouncycastleBcpgS2K_get_GNU_PROTECTION_MODE_NO_PRIVATE_KEY(void);
#define LibOrgBouncycastleBcpgS2K_GNU_PROTECTION_MODE_NO_PRIVATE_KEY 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleBcpgS2K, GNU_PROTECTION_MODE_NO_PRIVATE_KEY, jint)

inline jint LibOrgBouncycastleBcpgS2K_get_GNU_PROTECTION_MODE_DIVERT_TO_CARD(void);
#define LibOrgBouncycastleBcpgS2K_GNU_PROTECTION_MODE_DIVERT_TO_CARD 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleBcpgS2K, GNU_PROTECTION_MODE_DIVERT_TO_CARD, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleBcpgS2K_initWithJavaIoInputStream_(LibOrgBouncycastleBcpgS2K *self, JavaIoInputStream *inArg);

FOUNDATION_EXPORT LibOrgBouncycastleBcpgS2K *new_LibOrgBouncycastleBcpgS2K_initWithJavaIoInputStream_(JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleBcpgS2K *create_LibOrgBouncycastleBcpgS2K_initWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void LibOrgBouncycastleBcpgS2K_initWithInt_(LibOrgBouncycastleBcpgS2K *self, jint algorithm);

FOUNDATION_EXPORT LibOrgBouncycastleBcpgS2K *new_LibOrgBouncycastleBcpgS2K_initWithInt_(jint algorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleBcpgS2K *create_LibOrgBouncycastleBcpgS2K_initWithInt_(jint algorithm);

FOUNDATION_EXPORT void LibOrgBouncycastleBcpgS2K_initWithInt_withByteArray_(LibOrgBouncycastleBcpgS2K *self, jint algorithm, IOSByteArray *iv);

FOUNDATION_EXPORT LibOrgBouncycastleBcpgS2K *new_LibOrgBouncycastleBcpgS2K_initWithInt_withByteArray_(jint algorithm, IOSByteArray *iv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleBcpgS2K *create_LibOrgBouncycastleBcpgS2K_initWithInt_withByteArray_(jint algorithm, IOSByteArray *iv);

FOUNDATION_EXPORT void LibOrgBouncycastleBcpgS2K_initWithInt_withByteArray_withInt_(LibOrgBouncycastleBcpgS2K *self, jint algorithm, IOSByteArray *iv, jint itCount);

FOUNDATION_EXPORT LibOrgBouncycastleBcpgS2K *new_LibOrgBouncycastleBcpgS2K_initWithInt_withByteArray_withInt_(jint algorithm, IOSByteArray *iv, jint itCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleBcpgS2K *create_LibOrgBouncycastleBcpgS2K_initWithInt_withByteArray_withInt_(jint algorithm, IOSByteArray *iv, jint itCount);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleBcpgS2K)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // S2K_H
