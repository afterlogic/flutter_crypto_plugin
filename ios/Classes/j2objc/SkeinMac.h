//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/SkeinMac.java
//

#ifndef SkeinMac_H
#define SkeinMac_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Mac.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoMacsSkeinMac : NSObject < LibOrgBouncycastleCryptoMac >
@property (readonly, class) jint SKEIN_256 NS_SWIFT_NAME(SKEIN_256);
@property (readonly, class) jint SKEIN_512 NS_SWIFT_NAME(SKEIN_512);
@property (readonly, class) jint SKEIN_1024 NS_SWIFT_NAME(SKEIN_1024);

+ (jint)SKEIN_256;

+ (jint)SKEIN_512;

+ (jint)SKEIN_1024;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)stateSizeBits
                              withInt:(jint)digestSizeBits;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoMacsSkeinMac:(LibOrgBouncycastleCryptoMacsSkeinMac *)mac;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoMacsSkeinMac)

inline jint LibOrgBouncycastleCryptoMacsSkeinMac_get_SKEIN_256(void);
#define LibOrgBouncycastleCryptoMacsSkeinMac_SKEIN_256 256
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoMacsSkeinMac, SKEIN_256, jint)

inline jint LibOrgBouncycastleCryptoMacsSkeinMac_get_SKEIN_512(void);
#define LibOrgBouncycastleCryptoMacsSkeinMac_SKEIN_512 512
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoMacsSkeinMac, SKEIN_512, jint)

inline jint LibOrgBouncycastleCryptoMacsSkeinMac_get_SKEIN_1024(void);
#define LibOrgBouncycastleCryptoMacsSkeinMac_SKEIN_1024 1024
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoMacsSkeinMac, SKEIN_1024, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsSkeinMac_initWithInt_withInt_(LibOrgBouncycastleCryptoMacsSkeinMac *self, jint stateSizeBits, jint digestSizeBits);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsSkeinMac *new_LibOrgBouncycastleCryptoMacsSkeinMac_initWithInt_withInt_(jint stateSizeBits, jint digestSizeBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsSkeinMac *create_LibOrgBouncycastleCryptoMacsSkeinMac_initWithInt_withInt_(jint stateSizeBits, jint digestSizeBits);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsSkeinMac_initWithLibOrgBouncycastleCryptoMacsSkeinMac_(LibOrgBouncycastleCryptoMacsSkeinMac *self, LibOrgBouncycastleCryptoMacsSkeinMac *mac);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsSkeinMac *new_LibOrgBouncycastleCryptoMacsSkeinMac_initWithLibOrgBouncycastleCryptoMacsSkeinMac_(LibOrgBouncycastleCryptoMacsSkeinMac *mac) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsSkeinMac *create_LibOrgBouncycastleCryptoMacsSkeinMac_initWithLibOrgBouncycastleCryptoMacsSkeinMac_(LibOrgBouncycastleCryptoMacsSkeinMac *mac);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoMacsSkeinMac)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SkeinMac_H
