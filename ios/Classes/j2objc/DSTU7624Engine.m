//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/DSTU7624Engine.java
//

#include "Arrays.h"
#include "CipherParameters.h"
#include "DSTU7624Engine.h"
#include "DataLengthException.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OutputLengthException.h"
#include "Pack.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoEnginesDSTU7624Engine () {
 @public
  IOSLongArray *internalState_;
  IOSLongArray *workingKey_;
  IOSObjectArray *roundKeys_;
  jint wordsInBlock_;
  jint wordsInKey_;
  jint roundsAmount_;
  jboolean forEncryption_;
}

- (void)addRoundKeyWithInt:(jint)round;

- (void)subRoundKeyWithInt:(jint)round;

- (void)xorRoundKeyWithInt:(jint)round;

- (void)workingKeyExpandKTWithLongArray:(IOSLongArray *)workingKey
                          withLongArray:(IOSLongArray *)tempKeys;

- (void)workingKeyExpandEvenWithLongArray:(IOSLongArray *)workingKey
                            withLongArray:(IOSLongArray *)tempKey;

- (void)workingKeyExpandOdd;

- (void)decryptBlock_128WithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff
                        withByteArray:(IOSByteArray *)outArg
                              withInt:(jint)outOff;

- (void)encryptBlock_128WithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff
                        withByteArray:(IOSByteArray *)outArg
                              withInt:(jint)outOff;

- (void)subBytes;

- (void)invSubBytes;

- (void)shiftRows;

- (void)invShiftRows;

+ (jlong)mixColumnWithLong:(jlong)c;

- (void)mixColumns;

+ (jlong)mixColumnInvWithLong:(jlong)c;

- (void)mixColumnsInv;

+ (jlong)mulXWithLong:(jlong)n;

+ (jlong)mulX2WithLong:(jlong)n;

+ (jlong)rotateWithInt:(jint)n
              withLong:(jlong)x;

- (void)rotateLeftWithLongArray:(IOSLongArray *)x
                  withLongArray:(IOSLongArray *)z;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, internalState_, IOSLongArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, workingKey_, IOSLongArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, roundKeys_, IOSObjectArray *)

inline jint LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_ROUNDS_128(void);
#define LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_128 10
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, ROUNDS_128, jint)

inline jint LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_ROUNDS_256(void);
#define LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_256 14
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, ROUNDS_256, jint)

inline jint LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_ROUNDS_512(void);
#define LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_512 18
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, ROUNDS_512, jint)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_S0(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, S0, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_S1(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, S1, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_S2(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, S2, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_S3(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, S3, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_T0(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, T0, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_T1(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, T1, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_T2(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, T2, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_get_T3(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, T3, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_addRoundKeyWithInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, jint round);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subRoundKeyWithInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, jint round);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_xorRoundKeyWithInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, jint round);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandKTWithLongArray_withLongArray_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSLongArray *workingKey, IOSLongArray *tempKeys);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandEvenWithLongArray_withLongArray_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSLongArray *workingKey, IOSLongArray *tempKey);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandOdd(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_decryptBlock_128WithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_encryptBlock_128WithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_invSubBytes(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_invShiftRows(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnWithLong_(jlong c);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnInvWithLong_(jlong c);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnsInv(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(jlong n);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulX2WithLong_(jlong n);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(jint n, jlong x);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateLeftWithLongArray_withLongArray_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSLongArray *x, IOSLongArray *z);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoEnginesDSTU7624Engine)

@implementation LibOrgBouncycastleCryptoEnginesDSTU7624Engine

- (instancetype)initWithInt:(jint)blockBitLength {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initWithInt_(self, blockBitLength);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid parameter passed to DSTU7624Engine init");
  }
  self->forEncryption_ = forEncryption;
  IOSByteArray *keyBytes = [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk(params, [LibOrgBouncycastleCryptoParamsKeyParameter class])))) getKey];
  jint keyBitLength = JreLShift32(((IOSByteArray *) nil_chk(keyBytes))->size_, 3);
  jint blockBitLength = JreLShift32(wordsInBlock_, 6);
  if (keyBitLength != 128 && keyBitLength != 256 && keyBitLength != 512) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported key length: only 128/256/512 are allowed");
  }
  if (keyBitLength != blockBitLength && keyBitLength != (2 * blockBitLength)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Unsupported key length");
  }
  switch (keyBitLength) {
    case 128:
    roundsAmount_ = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_128;
    break;
    case 256:
    roundsAmount_ = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_256;
    break;
    case 512:
    roundsAmount_ = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_512;
    break;
  }
  wordsInKey_ = JreURShift32(keyBitLength, 6);
  roundKeys_ = [IOSObjectArray newArrayWithLength:roundsAmount_ + 1 type:IOSClass_longArray(1)];
  for (jint roundKeyIndex = 0; roundKeyIndex < roundKeys_->size_; roundKeyIndex++) {
    (void) IOSObjectArray_SetAndConsume(roundKeys_, roundKeyIndex, [IOSLongArray newArrayWithLength:wordsInBlock_]);
  }
  workingKey_ = [IOSLongArray newArrayWithLength:wordsInKey_];
  if (keyBytes->size_ != (JreURShift32(keyBitLength, 3))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid key parameter passed to DSTU7624Engine init");
  }
  LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_withLongArray_(keyBytes, 0, workingKey_);
  IOSLongArray *tempKeys = [IOSLongArray newArrayWithLength:wordsInBlock_];
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandKTWithLongArray_withLongArray_(self, workingKey_, tempKeys);
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandEvenWithLongArray_withLongArray_(self, workingKey_, tempKeys);
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandOdd(self);
}

- (NSString *)getAlgorithmName {
  return @"DSTU7624";
}

- (jint)getBlockSize {
  return JreLShift32(wordsInBlock_, 3);
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (workingKey_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DSTU7624Engine not initialised");
  }
  if (inOff + [self getBlockSize] > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"Input buffer too short");
  }
  if (outOff + [self getBlockSize] > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"Output buffer too short");
  }
  if (forEncryption_) {
    switch (wordsInBlock_) {
      case 2:
      {
        LibOrgBouncycastleCryptoEnginesDSTU7624Engine_encryptBlock_128WithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
        break;
      }
      default:
      {
        LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_withLongArray_(inArg, inOff, internalState_);
        LibOrgBouncycastleCryptoEnginesDSTU7624Engine_addRoundKeyWithInt_(self, 0);
        for (jint round = 0; ; ) {
          LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
          LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
          LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
          if (++round == roundsAmount_) {
            break;
          }
          LibOrgBouncycastleCryptoEnginesDSTU7624Engine_xorRoundKeyWithInt_(self, round);
        }
        LibOrgBouncycastleCryptoEnginesDSTU7624Engine_addRoundKeyWithInt_(self, roundsAmount_);
        LibOrgBouncycastleUtilPack_longToLittleEndianWithLongArray_withByteArray_withInt_(internalState_, outArg, outOff);
        break;
      }
    }
  }
  else {
    switch (wordsInBlock_) {
      case 2:
      {
        LibOrgBouncycastleCryptoEnginesDSTU7624Engine_decryptBlock_128WithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
        break;
      }
      default:
      {
        LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_withLongArray_(inArg, inOff, internalState_);
        LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subRoundKeyWithInt_(self, roundsAmount_);
        for (jint round = roundsAmount_; ; ) {
          LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnsInv(self);
          LibOrgBouncycastleCryptoEnginesDSTU7624Engine_invShiftRows(self);
          LibOrgBouncycastleCryptoEnginesDSTU7624Engine_invSubBytes(self);
          if (--round == 0) {
            break;
          }
          LibOrgBouncycastleCryptoEnginesDSTU7624Engine_xorRoundKeyWithInt_(self, round);
        }
        LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subRoundKeyWithInt_(self, 0);
        LibOrgBouncycastleUtilPack_longToLittleEndianWithLongArray_withByteArray_withInt_(internalState_, outArg, outOff);
        break;
      }
    }
  }
  return [self getBlockSize];
}

- (void)reset {
  LibOrgBouncycastleUtilArrays_fillWithLongArray_withLong_(internalState_, 0);
}

- (void)addRoundKeyWithInt:(jint)round {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_addRoundKeyWithInt_(self, round);
}

- (void)subRoundKeyWithInt:(jint)round {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subRoundKeyWithInt_(self, round);
}

- (void)xorRoundKeyWithInt:(jint)round {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_xorRoundKeyWithInt_(self, round);
}

- (void)workingKeyExpandKTWithLongArray:(IOSLongArray *)workingKey
                          withLongArray:(IOSLongArray *)tempKeys {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandKTWithLongArray_withLongArray_(self, workingKey, tempKeys);
}

- (void)workingKeyExpandEvenWithLongArray:(IOSLongArray *)workingKey
                            withLongArray:(IOSLongArray *)tempKey {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandEvenWithLongArray_withLongArray_(self, workingKey, tempKey);
}

- (void)workingKeyExpandOdd {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandOdd(self);
}

- (void)decryptBlock_128WithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff
                        withByteArray:(IOSByteArray *)outArg
                              withInt:(jint)outOff {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_decryptBlock_128WithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)encryptBlock_128WithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff
                        withByteArray:(IOSByteArray *)outArg
                              withInt:(jint)outOff {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_encryptBlock_128WithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)subBytes {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
}

- (void)invSubBytes {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_invSubBytes(self);
}

- (void)shiftRows {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
}

- (void)invShiftRows {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_invShiftRows(self);
}

+ (jlong)mixColumnWithLong:(jlong)c {
  return LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnWithLong_(c);
}

- (void)mixColumns {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
}

+ (jlong)mixColumnInvWithLong:(jlong)c {
  return LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnInvWithLong_(c);
}

- (void)mixColumnsInv {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnsInv(self);
}

+ (jlong)mulXWithLong:(jlong)n {
  return LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(n);
}

+ (jlong)mulX2WithLong:(jlong)n {
  return LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulX2WithLong_(n);
}

+ (jlong)rotateWithInt:(jint)n
              withLong:(jlong)x {
  return LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(n, x);
}

- (void)rotateLeftWithLongArray:(IOSLongArray *)x
                  withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateLeftWithLongArray_withLongArray_(self, x, z);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 18, 16, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 19, 16, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(addRoundKeyWithInt:);
  methods[7].selector = @selector(subRoundKeyWithInt:);
  methods[8].selector = @selector(xorRoundKeyWithInt:);
  methods[9].selector = @selector(workingKeyExpandKTWithLongArray:withLongArray:);
  methods[10].selector = @selector(workingKeyExpandEvenWithLongArray:withLongArray:);
  methods[11].selector = @selector(workingKeyExpandOdd);
  methods[12].selector = @selector(decryptBlock_128WithByteArray:withInt:withByteArray:withInt:);
  methods[13].selector = @selector(encryptBlock_128WithByteArray:withInt:withByteArray:withInt:);
  methods[14].selector = @selector(subBytes);
  methods[15].selector = @selector(invSubBytes);
  methods[16].selector = @selector(shiftRows);
  methods[17].selector = @selector(invShiftRows);
  methods[18].selector = @selector(mixColumnWithLong:);
  methods[19].selector = @selector(mixColumns);
  methods[20].selector = @selector(mixColumnInvWithLong:);
  methods[21].selector = @selector(mixColumnsInv);
  methods[22].selector = @selector(mulXWithLong:);
  methods[23].selector = @selector(mulX2WithLong:);
  methods[24].selector = @selector(rotateWithInt:withLong:);
  methods[25].selector = @selector(rotateLeftWithLongArray:withLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "internalState_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workingKey_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "roundKeys_", "[[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wordsInBlock_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wordsInKey_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ROUNDS_128", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_128, 0x1a, -1, -1, -1, -1 },
    { "ROUNDS_256", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_256, 0x1a, -1, -1, -1, -1 },
    { "ROUNDS_512", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_ROUNDS_512, 0x1a, -1, -1, -1, -1 },
    { "roundsAmount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "S0", "[B", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "S1", "[B", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "S2", "[B", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "S3", "[B", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "T0", "[B", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "T1", "[B", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "T2", "[B", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "T3", "[B", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LJavaLangIllegalArgumentException;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "addRoundKey", "subRoundKey", "xorRoundKey", "workingKeyExpandKT", "[J[J", "workingKeyExpandEven", "decryptBlock_128", "encryptBlock_128", "mixColumn", "J", "mixColumnInv", "mulX", "mulX2", "rotate", "IJ", "rotateLeft", &LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0, &LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1, &LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2, &LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3, &LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0, &LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1, &LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2, &LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3 };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesDSTU7624Engine = { "DSTU7624Engine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 26, 18, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesDSTU7624Engine;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoEnginesDSTU7624Engine class]) {
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xa8, (jbyte) (jint) 0x43, (jbyte) (jint) 0x5f, (jbyte) (jint) 0x06, (jbyte) (jint) 0x6b, (jbyte) (jint) 0x75, (jbyte) (jint) 0x6c, (jbyte) (jint) 0x59, (jbyte) (jint) 0x71, (jbyte) (jint) 0xdf, (jbyte) (jint) 0x87, (jbyte) (jint) 0x95, (jbyte) (jint) 0x17, (jbyte) (jint) 0xf0, (jbyte) (jint) 0xd8, (jbyte) (jint) 0x09, (jbyte) (jint) 0x6d, (jbyte) (jint) 0xf3, (jbyte) (jint) 0x1d, (jbyte) (jint) 0xcb, (jbyte) (jint) 0xc9, (jbyte) (jint) 0x4d, (jbyte) (jint) 0x2c, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x79, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x97, (jbyte) (jint) 0xfd, (jbyte) (jint) 0x6f, (jbyte) (jint) 0x4b, (jbyte) (jint) 0x45, (jbyte) (jint) 0x39, (jbyte) (jint) 0x3e, (jbyte) (jint) 0xdd, (jbyte) (jint) 0xa3, (jbyte) (jint) 0x4f, (jbyte) (jint) 0xb4, (jbyte) (jint) 0xb6, (jbyte) (jint) 0x9a, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xbf, (jbyte) (jint) 0x15, (jbyte) (jint) 0xe1, (jbyte) (jint) 0x49, (jbyte) (jint) 0xd2, (jbyte) (jint) 0x93, (jbyte) (jint) 0xc6, (jbyte) (jint) 0x92, (jbyte) (jint) 0x72, (jbyte) (jint) 0x9e, (jbyte) (jint) 0x61, (jbyte) (jint) 0xd1, (jbyte) (jint) 0x63, (jbyte) (jint) 0xfa, (jbyte) (jint) 0xee, (jbyte) (jint) 0xf4, (jbyte) (jint) 0x19, (jbyte) (jint) 0xd5, (jbyte) (jint) 0xad, (jbyte) (jint) 0x58, (jbyte) (jint) 0xa4, (jbyte) (jint) 0xbb, (jbyte) (jint) 0xa1, (jbyte) (jint) 0xdc, (jbyte) (jint) 0xf2, (jbyte) (jint) 0x83, (jbyte) (jint) 0x37, (jbyte) (jint) 0x42, (jbyte) (jint) 0xe4, (jbyte) (jint) 0x7a, (jbyte) (jint) 0x32, (jbyte) (jint) 0x9c, (jbyte) (jint) 0xcc, (jbyte) (jint) 0xab, (jbyte) (jint) 0x4a, (jbyte) (jint) 0x8f, (jbyte) (jint) 0x6e, (jbyte) (jint) 0x04, (jbyte) (jint) 0x27, (jbyte) (jint) 0x2e, (jbyte) (jint) 0xe7, (jbyte) (jint) 0xe2, (jbyte) (jint) 0x5a, (jbyte) (jint) 0x96, (jbyte) (jint) 0x16, (jbyte) (jint) 0x23, (jbyte) (jint) 0x2b, (jbyte) (jint) 0xc2, (jbyte) (jint) 0x65, (jbyte) (jint) 0x66, (jbyte) (jint) 0x0f, (jbyte) (jint) 0xbc, (jbyte) (jint) 0xa9, (jbyte) (jint) 0x47, (jbyte) (jint) 0x41, (jbyte) (jint) 0x34, (jbyte) (jint) 0x48, (jbyte) (jint) 0xfc, (jbyte) (jint) 0xb7, (jbyte) (jint) 0x6a, (jbyte) (jint) 0x88, (jbyte) (jint) 0xa5, (jbyte) (jint) 0x53, (jbyte) (jint) 0x86, (jbyte) (jint) 0xf9, (jbyte) (jint) 0x5b, (jbyte) (jint) 0xdb, (jbyte) (jint) 0x38, (jbyte) (jint) 0x7b, (jbyte) (jint) 0xc3, (jbyte) (jint) 0x1e, (jbyte) (jint) 0x22, (jbyte) (jint) 0x33, (jbyte) (jint) 0x24, (jbyte) (jint) 0x28, (jbyte) (jint) 0x36, (jbyte) (jint) 0xc7, (jbyte) (jint) 0xb2, (jbyte) (jint) 0x3b, (jbyte) (jint) 0x8e, (jbyte) (jint) 0x77, (jbyte) (jint) 0xba, (jbyte) (jint) 0xf5, (jbyte) (jint) 0x14, (jbyte) (jint) 0x9f, (jbyte) (jint) 0x08, (jbyte) (jint) 0x55, (jbyte) (jint) 0x9b, (jbyte) (jint) 0x4c, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x60, (jbyte) (jint) 0x5c, (jbyte) (jint) 0xda, (jbyte) (jint) 0x18, (jbyte) (jint) 0x46, (jbyte) (jint) 0xcd, (jbyte) (jint) 0x7d, (jbyte) (jint) 0x21, (jbyte) (jint) 0xb0, (jbyte) (jint) 0x3f, (jbyte) (jint) 0x1b, (jbyte) (jint) 0x89, (jbyte) (jint) 0xff, (jbyte) (jint) 0xeb, (jbyte) (jint) 0x84, (jbyte) (jint) 0x69, (jbyte) (jint) 0x3a, (jbyte) (jint) 0x9d, (jbyte) (jint) 0xd7, (jbyte) (jint) 0xd3, (jbyte) (jint) 0x70, (jbyte) (jint) 0x67, (jbyte) (jint) 0x40, (jbyte) (jint) 0xb5, (jbyte) (jint) 0xde, (jbyte) (jint) 0x5d, (jbyte) (jint) 0x30, (jbyte) (jint) 0x91, (jbyte) (jint) 0xb1, (jbyte) (jint) 0x78, (jbyte) (jint) 0x11, (jbyte) (jint) 0x01, (jbyte) (jint) 0xe5, (jbyte) (jint) 0x00, (jbyte) (jint) 0x68, (jbyte) (jint) 0x98, (jbyte) (jint) 0xa0, (jbyte) (jint) 0xc5, (jbyte) (jint) 0x02, (jbyte) (jint) 0xa6, (jbyte) (jint) 0x74, (jbyte) (jint) 0x2d, (jbyte) (jint) 0x0b, (jbyte) (jint) 0xa2, (jbyte) (jint) 0x76, (jbyte) (jint) 0xb3, (jbyte) (jint) 0xbe, (jbyte) (jint) 0xce, (jbyte) (jint) 0xbd, (jbyte) (jint) 0xae, (jbyte) (jint) 0xe9, (jbyte) (jint) 0x8a, (jbyte) (jint) 0x31, (jbyte) (jint) 0x1c, (jbyte) (jint) 0xec, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x99, (jbyte) (jint) 0x94, (jbyte) (jint) 0xaa, (jbyte) (jint) 0xf6, (jbyte) (jint) 0x26, (jbyte) (jint) 0x2f, (jbyte) (jint) 0xef, (jbyte) (jint) 0xe8, (jbyte) (jint) 0x8c, (jbyte) (jint) 0x35, (jbyte) (jint) 0x03, (jbyte) (jint) 0xd4, (jbyte) (jint) 0x7f, (jbyte) (jint) 0xfb, (jbyte) (jint) 0x05, (jbyte) (jint) 0xc1, (jbyte) (jint) 0x5e, (jbyte) (jint) 0x90, (jbyte) (jint) 0x20, (jbyte) (jint) 0x3d, (jbyte) (jint) 0x82, (jbyte) (jint) 0xf7, (jbyte) (jint) 0xea, (jbyte) (jint) 0x0a, (jbyte) (jint) 0x0d, (jbyte) (jint) 0x7e, (jbyte) (jint) 0xf8, (jbyte) (jint) 0x50, (jbyte) (jint) 0x1a, (jbyte) (jint) 0xc4, (jbyte) (jint) 0x07, (jbyte) (jint) 0x57, (jbyte) (jint) 0xb8, (jbyte) (jint) 0x3c, (jbyte) (jint) 0x62, (jbyte) (jint) 0xe3, (jbyte) (jint) 0xc8, (jbyte) (jint) 0xac, (jbyte) (jint) 0x52, (jbyte) (jint) 0x64, (jbyte) (jint) 0x10, (jbyte) (jint) 0xd0, (jbyte) (jint) 0xd9, (jbyte) (jint) 0x13, (jbyte) (jint) 0x0c, (jbyte) (jint) 0x12, (jbyte) (jint) 0x29, (jbyte) (jint) 0x51, (jbyte) (jint) 0xb9, (jbyte) (jint) 0xcf, (jbyte) (jint) 0xd6, (jbyte) (jint) 0x73, (jbyte) (jint) 0x8d, (jbyte) (jint) 0x81, (jbyte) (jint) 0x54, (jbyte) (jint) 0xc0, (jbyte) (jint) 0xed, (jbyte) (jint) 0x4e, (jbyte) (jint) 0x44, (jbyte) (jint) 0xa7, (jbyte) (jint) 0x2a, (jbyte) (jint) 0x85, (jbyte) (jint) 0x25, (jbyte) (jint) 0xe6, (jbyte) (jint) 0xca, (jbyte) (jint) 0x7c, (jbyte) (jint) 0x8b, (jbyte) (jint) 0x56, (jbyte) (jint) 0x80 } count:256];
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xce, (jbyte) (jint) 0xbb, (jbyte) (jint) 0xeb, (jbyte) (jint) 0x92, (jbyte) (jint) 0xea, (jbyte) (jint) 0xcb, (jbyte) (jint) 0x13, (jbyte) (jint) 0xc1, (jbyte) (jint) 0xe9, (jbyte) (jint) 0x3a, (jbyte) (jint) 0xd6, (jbyte) (jint) 0xb2, (jbyte) (jint) 0xd2, (jbyte) (jint) 0x90, (jbyte) (jint) 0x17, (jbyte) (jint) 0xf8, (jbyte) (jint) 0x42, (jbyte) (jint) 0x15, (jbyte) (jint) 0x56, (jbyte) (jint) 0xb4, (jbyte) (jint) 0x65, (jbyte) (jint) 0x1c, (jbyte) (jint) 0x88, (jbyte) (jint) 0x43, (jbyte) (jint) 0xc5, (jbyte) (jint) 0x5c, (jbyte) (jint) 0x36, (jbyte) (jint) 0xba, (jbyte) (jint) 0xf5, (jbyte) (jint) 0x57, (jbyte) (jint) 0x67, (jbyte) (jint) 0x8d, (jbyte) (jint) 0x31, (jbyte) (jint) 0xf6, (jbyte) (jint) 0x64, (jbyte) (jint) 0x58, (jbyte) (jint) 0x9e, (jbyte) (jint) 0xf4, (jbyte) (jint) 0x22, (jbyte) (jint) 0xaa, (jbyte) (jint) 0x75, (jbyte) (jint) 0x0f, (jbyte) (jint) 0x02, (jbyte) (jint) 0xb1, (jbyte) (jint) 0xdf, (jbyte) (jint) 0x6d, (jbyte) (jint) 0x73, (jbyte) (jint) 0x4d, (jbyte) (jint) 0x7c, (jbyte) (jint) 0x26, (jbyte) (jint) 0x2e, (jbyte) (jint) 0xf7, (jbyte) (jint) 0x08, (jbyte) (jint) 0x5d, (jbyte) (jint) 0x44, (jbyte) (jint) 0x3e, (jbyte) (jint) 0x9f, (jbyte) (jint) 0x14, (jbyte) (jint) 0xc8, (jbyte) (jint) 0xae, (jbyte) (jint) 0x54, (jbyte) (jint) 0x10, (jbyte) (jint) 0xd8, (jbyte) (jint) 0xbc, (jbyte) (jint) 0x1a, (jbyte) (jint) 0x6b, (jbyte) (jint) 0x69, (jbyte) (jint) 0xf3, (jbyte) (jint) 0xbd, (jbyte) (jint) 0x33, (jbyte) (jint) 0xab, (jbyte) (jint) 0xfa, (jbyte) (jint) 0xd1, (jbyte) (jint) 0x9b, (jbyte) (jint) 0x68, (jbyte) (jint) 0x4e, (jbyte) (jint) 0x16, (jbyte) (jint) 0x95, (jbyte) (jint) 0x91, (jbyte) (jint) 0xee, (jbyte) (jint) 0x4c, (jbyte) (jint) 0x63, (jbyte) (jint) 0x8e, (jbyte) (jint) 0x5b, (jbyte) (jint) 0xcc, (jbyte) (jint) 0x3c, (jbyte) (jint) 0x19, (jbyte) (jint) 0xa1, (jbyte) (jint) 0x81, (jbyte) (jint) 0x49, (jbyte) (jint) 0x7b, (jbyte) (jint) 0xd9, (jbyte) (jint) 0x6f, (jbyte) (jint) 0x37, (jbyte) (jint) 0x60, (jbyte) (jint) 0xca, (jbyte) (jint) 0xe7, (jbyte) (jint) 0x2b, (jbyte) (jint) 0x48, (jbyte) (jint) 0xfd, (jbyte) (jint) 0x96, (jbyte) (jint) 0x45, (jbyte) (jint) 0xfc, (jbyte) (jint) 0x41, (jbyte) (jint) 0x12, (jbyte) (jint) 0x0d, (jbyte) (jint) 0x79, (jbyte) (jint) 0xe5, (jbyte) (jint) 0x89, (jbyte) (jint) 0x8c, (jbyte) (jint) 0xe3, (jbyte) (jint) 0x20, (jbyte) (jint) 0x30, (jbyte) (jint) 0xdc, (jbyte) (jint) 0xb7, (jbyte) (jint) 0x6c, (jbyte) (jint) 0x4a, (jbyte) (jint) 0xb5, (jbyte) (jint) 0x3f, (jbyte) (jint) 0x97, (jbyte) (jint) 0xd4, (jbyte) (jint) 0x62, (jbyte) (jint) 0x2d, (jbyte) (jint) 0x06, (jbyte) (jint) 0xa4, (jbyte) (jint) 0xa5, (jbyte) (jint) 0x83, (jbyte) (jint) 0x5f, (jbyte) (jint) 0x2a, (jbyte) (jint) 0xda, (jbyte) (jint) 0xc9, (jbyte) (jint) 0x00, (jbyte) (jint) 0x7e, (jbyte) (jint) 0xa2, (jbyte) (jint) 0x55, (jbyte) (jint) 0xbf, (jbyte) (jint) 0x11, (jbyte) (jint) 0xd5, (jbyte) (jint) 0x9c, (jbyte) (jint) 0xcf, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x0a, (jbyte) (jint) 0x3d, (jbyte) (jint) 0x51, (jbyte) (jint) 0x7d, (jbyte) (jint) 0x93, (jbyte) (jint) 0x1b, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xc4, (jbyte) (jint) 0x47, (jbyte) (jint) 0x09, (jbyte) (jint) 0x86, (jbyte) (jint) 0x0b, (jbyte) (jint) 0x8f, (jbyte) (jint) 0x9d, (jbyte) (jint) 0x6a, (jbyte) (jint) 0x07, (jbyte) (jint) 0xb9, (jbyte) (jint) 0xb0, (jbyte) (jint) 0x98, (jbyte) (jint) 0x18, (jbyte) (jint) 0x32, (jbyte) (jint) 0x71, (jbyte) (jint) 0x4b, (jbyte) (jint) 0xef, (jbyte) (jint) 0x3b, (jbyte) (jint) 0x70, (jbyte) (jint) 0xa0, (jbyte) (jint) 0xe4, (jbyte) (jint) 0x40, (jbyte) (jint) 0xff, (jbyte) (jint) 0xc3, (jbyte) (jint) 0xa9, (jbyte) (jint) 0xe6, (jbyte) (jint) 0x78, (jbyte) (jint) 0xf9, (jbyte) (jint) 0x8b, (jbyte) (jint) 0x46, (jbyte) (jint) 0x80, (jbyte) (jint) 0x1e, (jbyte) (jint) 0x38, (jbyte) (jint) 0xe1, (jbyte) (jint) 0xb8, (jbyte) (jint) 0xa8, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x0c, (jbyte) (jint) 0x23, (jbyte) (jint) 0x76, (jbyte) (jint) 0x1d, (jbyte) (jint) 0x25, (jbyte) (jint) 0x24, (jbyte) (jint) 0x05, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x6e, (jbyte) (jint) 0x94, (jbyte) (jint) 0x28, (jbyte) (jint) 0x9a, (jbyte) (jint) 0x84, (jbyte) (jint) 0xe8, (jbyte) (jint) 0xa3, (jbyte) (jint) 0x4f, (jbyte) (jint) 0x77, (jbyte) (jint) 0xd3, (jbyte) (jint) 0x85, (jbyte) (jint) 0xe2, (jbyte) (jint) 0x52, (jbyte) (jint) 0xf2, (jbyte) (jint) 0x82, (jbyte) (jint) 0x50, (jbyte) (jint) 0x7a, (jbyte) (jint) 0x2f, (jbyte) (jint) 0x74, (jbyte) (jint) 0x53, (jbyte) (jint) 0xb3, (jbyte) (jint) 0x61, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x39, (jbyte) (jint) 0x35, (jbyte) (jint) 0xde, (jbyte) (jint) 0xcd, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x99, (jbyte) (jint) 0xac, (jbyte) (jint) 0xad, (jbyte) (jint) 0x72, (jbyte) (jint) 0x2c, (jbyte) (jint) 0xdd, (jbyte) (jint) 0xd0, (jbyte) (jint) 0x87, (jbyte) (jint) 0xbe, (jbyte) (jint) 0x5e, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xec, (jbyte) (jint) 0x04, (jbyte) (jint) 0xc6, (jbyte) (jint) 0x03, (jbyte) (jint) 0x34, (jbyte) (jint) 0xfb, (jbyte) (jint) 0xdb, (jbyte) (jint) 0x59, (jbyte) (jint) 0xb6, (jbyte) (jint) 0xc2, (jbyte) (jint) 0x01, (jbyte) (jint) 0xf0, (jbyte) (jint) 0x5a, (jbyte) (jint) 0xed, (jbyte) (jint) 0xa7, (jbyte) (jint) 0x66, (jbyte) (jint) 0x21, (jbyte) (jint) 0x7f, (jbyte) (jint) 0x8a, (jbyte) (jint) 0x27, (jbyte) (jint) 0xc7, (jbyte) (jint) 0xc0, (jbyte) (jint) 0x29, (jbyte) (jint) 0xd7 } count:256];
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x93, (jbyte) (jint) 0xd9, (jbyte) (jint) 0x9a, (jbyte) (jint) 0xb5, (jbyte) (jint) 0x98, (jbyte) (jint) 0x22, (jbyte) (jint) 0x45, (jbyte) (jint) 0xfc, (jbyte) (jint) 0xba, (jbyte) (jint) 0x6a, (jbyte) (jint) 0xdf, (jbyte) (jint) 0x02, (jbyte) (jint) 0x9f, (jbyte) (jint) 0xdc, (jbyte) (jint) 0x51, (jbyte) (jint) 0x59, (jbyte) (jint) 0x4a, (jbyte) (jint) 0x17, (jbyte) (jint) 0x2b, (jbyte) (jint) 0xc2, (jbyte) (jint) 0x94, (jbyte) (jint) 0xf4, (jbyte) (jint) 0xbb, (jbyte) (jint) 0xa3, (jbyte) (jint) 0x62, (jbyte) (jint) 0xe4, (jbyte) (jint) 0x71, (jbyte) (jint) 0xd4, (jbyte) (jint) 0xcd, (jbyte) (jint) 0x70, (jbyte) (jint) 0x16, (jbyte) (jint) 0xe1, (jbyte) (jint) 0x49, (jbyte) (jint) 0x3c, (jbyte) (jint) 0xc0, (jbyte) (jint) 0xd8, (jbyte) (jint) 0x5c, (jbyte) (jint) 0x9b, (jbyte) (jint) 0xad, (jbyte) (jint) 0x85, (jbyte) (jint) 0x53, (jbyte) (jint) 0xa1, (jbyte) (jint) 0x7a, (jbyte) (jint) 0xc8, (jbyte) (jint) 0x2d, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xd1, (jbyte) (jint) 0x72, (jbyte) (jint) 0xa6, (jbyte) (jint) 0x2c, (jbyte) (jint) 0xc4, (jbyte) (jint) 0xe3, (jbyte) (jint) 0x76, (jbyte) (jint) 0x78, (jbyte) (jint) 0xb7, (jbyte) (jint) 0xb4, (jbyte) (jint) 0x09, (jbyte) (jint) 0x3b, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x41, (jbyte) (jint) 0x4c, (jbyte) (jint) 0xde, (jbyte) (jint) 0xb2, (jbyte) (jint) 0x90, (jbyte) (jint) 0x25, (jbyte) (jint) 0xa5, (jbyte) (jint) 0xd7, (jbyte) (jint) 0x03, (jbyte) (jint) 0x11, (jbyte) (jint) 0x00, (jbyte) (jint) 0xc3, (jbyte) (jint) 0x2e, (jbyte) (jint) 0x92, (jbyte) (jint) 0xef, (jbyte) (jint) 0x4e, (jbyte) (jint) 0x12, (jbyte) (jint) 0x9d, (jbyte) (jint) 0x7d, (jbyte) (jint) 0xcb, (jbyte) (jint) 0x35, (jbyte) (jint) 0x10, (jbyte) (jint) 0xd5, (jbyte) (jint) 0x4f, (jbyte) (jint) 0x9e, (jbyte) (jint) 0x4d, (jbyte) (jint) 0xa9, (jbyte) (jint) 0x55, (jbyte) (jint) 0xc6, (jbyte) (jint) 0xd0, (jbyte) (jint) 0x7b, (jbyte) (jint) 0x18, (jbyte) (jint) 0x97, (jbyte) (jint) 0xd3, (jbyte) (jint) 0x36, (jbyte) (jint) 0xe6, (jbyte) (jint) 0x48, (jbyte) (jint) 0x56, (jbyte) (jint) 0x81, (jbyte) (jint) 0x8f, (jbyte) (jint) 0x77, (jbyte) (jint) 0xcc, (jbyte) (jint) 0x9c, (jbyte) (jint) 0xb9, (jbyte) (jint) 0xe2, (jbyte) (jint) 0xac, (jbyte) (jint) 0xb8, (jbyte) (jint) 0x2f, (jbyte) (jint) 0x15, (jbyte) (jint) 0xa4, (jbyte) (jint) 0x7c, (jbyte) (jint) 0xda, (jbyte) (jint) 0x38, (jbyte) (jint) 0x1e, (jbyte) (jint) 0x0b, (jbyte) (jint) 0x05, (jbyte) (jint) 0xd6, (jbyte) (jint) 0x14, (jbyte) (jint) 0x6e, (jbyte) (jint) 0x6c, (jbyte) (jint) 0x7e, (jbyte) (jint) 0x66, (jbyte) (jint) 0xfd, (jbyte) (jint) 0xb1, (jbyte) (jint) 0xe5, (jbyte) (jint) 0x60, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x5e, (jbyte) (jint) 0x33, (jbyte) (jint) 0x87, (jbyte) (jint) 0xc9, (jbyte) (jint) 0xf0, (jbyte) (jint) 0x5d, (jbyte) (jint) 0x6d, (jbyte) (jint) 0x3f, (jbyte) (jint) 0x88, (jbyte) (jint) 0x8d, (jbyte) (jint) 0xc7, (jbyte) (jint) 0xf7, (jbyte) (jint) 0x1d, (jbyte) (jint) 0xe9, (jbyte) (jint) 0xec, (jbyte) (jint) 0xed, (jbyte) (jint) 0x80, (jbyte) (jint) 0x29, (jbyte) (jint) 0x27, (jbyte) (jint) 0xcf, (jbyte) (jint) 0x99, (jbyte) (jint) 0xa8, (jbyte) (jint) 0x50, (jbyte) (jint) 0x0f, (jbyte) (jint) 0x37, (jbyte) (jint) 0x24, (jbyte) (jint) 0x28, (jbyte) (jint) 0x30, (jbyte) (jint) 0x95, (jbyte) (jint) 0xd2, (jbyte) (jint) 0x3e, (jbyte) (jint) 0x5b, (jbyte) (jint) 0x40, (jbyte) (jint) 0x83, (jbyte) (jint) 0xb3, (jbyte) (jint) 0x69, (jbyte) (jint) 0x57, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x07, (jbyte) (jint) 0x1c, (jbyte) (jint) 0x8a, (jbyte) (jint) 0xbc, (jbyte) (jint) 0x20, (jbyte) (jint) 0xeb, (jbyte) (jint) 0xce, (jbyte) (jint) 0x8e, (jbyte) (jint) 0xab, (jbyte) (jint) 0xee, (jbyte) (jint) 0x31, (jbyte) (jint) 0xa2, (jbyte) (jint) 0x73, (jbyte) (jint) 0xf9, (jbyte) (jint) 0xca, (jbyte) (jint) 0x3a, (jbyte) (jint) 0x1a, (jbyte) (jint) 0xfb, (jbyte) (jint) 0x0d, (jbyte) (jint) 0xc1, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfa, (jbyte) (jint) 0xf2, (jbyte) (jint) 0x6f, (jbyte) (jint) 0xbd, (jbyte) (jint) 0x96, (jbyte) (jint) 0xdd, (jbyte) (jint) 0x43, (jbyte) (jint) 0x52, (jbyte) (jint) 0xb6, (jbyte) (jint) 0x08, (jbyte) (jint) 0xf3, (jbyte) (jint) 0xae, (jbyte) (jint) 0xbe, (jbyte) (jint) 0x19, (jbyte) (jint) 0x89, (jbyte) (jint) 0x32, (jbyte) (jint) 0x26, (jbyte) (jint) 0xb0, (jbyte) (jint) 0xea, (jbyte) (jint) 0x4b, (jbyte) (jint) 0x64, (jbyte) (jint) 0x84, (jbyte) (jint) 0x82, (jbyte) (jint) 0x6b, (jbyte) (jint) 0xf5, (jbyte) (jint) 0x79, (jbyte) (jint) 0xbf, (jbyte) (jint) 0x01, (jbyte) (jint) 0x5f, (jbyte) (jint) 0x75, (jbyte) (jint) 0x63, (jbyte) (jint) 0x1b, (jbyte) (jint) 0x23, (jbyte) (jint) 0x3d, (jbyte) (jint) 0x68, (jbyte) (jint) 0x2a, (jbyte) (jint) 0x65, (jbyte) (jint) 0xe8, (jbyte) (jint) 0x91, (jbyte) (jint) 0xf6, (jbyte) (jint) 0xff, (jbyte) (jint) 0x13, (jbyte) (jint) 0x58, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x47, (jbyte) (jint) 0x0a, (jbyte) (jint) 0x7f, (jbyte) (jint) 0xc5, (jbyte) (jint) 0xa7, (jbyte) (jint) 0xe7, (jbyte) (jint) 0x61, (jbyte) (jint) 0x5a, (jbyte) (jint) 0x06, (jbyte) (jint) 0x46, (jbyte) (jint) 0x44, (jbyte) (jint) 0x42, (jbyte) (jint) 0x04, (jbyte) (jint) 0xa0, (jbyte) (jint) 0xdb, (jbyte) (jint) 0x39, (jbyte) (jint) 0x86, (jbyte) (jint) 0x54, (jbyte) (jint) 0xaa, (jbyte) (jint) 0x8c, (jbyte) (jint) 0x34, (jbyte) (jint) 0x21, (jbyte) (jint) 0x8b, (jbyte) (jint) 0xf8, (jbyte) (jint) 0x0c, (jbyte) (jint) 0x74, (jbyte) (jint) 0x67 } count:256];
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x68, (jbyte) (jint) 0x8d, (jbyte) (jint) 0xca, (jbyte) (jint) 0x4d, (jbyte) (jint) 0x73, (jbyte) (jint) 0x4b, (jbyte) (jint) 0x4e, (jbyte) (jint) 0x2a, (jbyte) (jint) 0xd4, (jbyte) (jint) 0x52, (jbyte) (jint) 0x26, (jbyte) (jint) 0xb3, (jbyte) (jint) 0x54, (jbyte) (jint) 0x1e, (jbyte) (jint) 0x19, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x22, (jbyte) (jint) 0x03, (jbyte) (jint) 0x46, (jbyte) (jint) 0x3d, (jbyte) (jint) 0x2d, (jbyte) (jint) 0x4a, (jbyte) (jint) 0x53, (jbyte) (jint) 0x83, (jbyte) (jint) 0x13, (jbyte) (jint) 0x8a, (jbyte) (jint) 0xb7, (jbyte) (jint) 0xd5, (jbyte) (jint) 0x25, (jbyte) (jint) 0x79, (jbyte) (jint) 0xf5, (jbyte) (jint) 0xbd, (jbyte) (jint) 0x58, (jbyte) (jint) 0x2f, (jbyte) (jint) 0x0d, (jbyte) (jint) 0x02, (jbyte) (jint) 0xed, (jbyte) (jint) 0x51, (jbyte) (jint) 0x9e, (jbyte) (jint) 0x11, (jbyte) (jint) 0xf2, (jbyte) (jint) 0x3e, (jbyte) (jint) 0x55, (jbyte) (jint) 0x5e, (jbyte) (jint) 0xd1, (jbyte) (jint) 0x16, (jbyte) (jint) 0x3c, (jbyte) (jint) 0x66, (jbyte) (jint) 0x70, (jbyte) (jint) 0x5d, (jbyte) (jint) 0xf3, (jbyte) (jint) 0x45, (jbyte) (jint) 0x40, (jbyte) (jint) 0xcc, (jbyte) (jint) 0xe8, (jbyte) (jint) 0x94, (jbyte) (jint) 0x56, (jbyte) (jint) 0x08, (jbyte) (jint) 0xce, (jbyte) (jint) 0x1a, (jbyte) (jint) 0x3a, (jbyte) (jint) 0xd2, (jbyte) (jint) 0xe1, (jbyte) (jint) 0xdf, (jbyte) (jint) 0xb5, (jbyte) (jint) 0x38, (jbyte) (jint) 0x6e, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xe5, (jbyte) (jint) 0xf4, (jbyte) (jint) 0xf9, (jbyte) (jint) 0x86, (jbyte) (jint) 0xe9, (jbyte) (jint) 0x4f, (jbyte) (jint) 0xd6, (jbyte) (jint) 0x85, (jbyte) (jint) 0x23, (jbyte) (jint) 0xcf, (jbyte) (jint) 0x32, (jbyte) (jint) 0x99, (jbyte) (jint) 0x31, (jbyte) (jint) 0x14, (jbyte) (jint) 0xae, (jbyte) (jint) 0xee, (jbyte) (jint) 0xc8, (jbyte) (jint) 0x48, (jbyte) (jint) 0xd3, (jbyte) (jint) 0x30, (jbyte) (jint) 0xa1, (jbyte) (jint) 0x92, (jbyte) (jint) 0x41, (jbyte) (jint) 0xb1, (jbyte) (jint) 0x18, (jbyte) (jint) 0xc4, (jbyte) (jint) 0x2c, (jbyte) (jint) 0x71, (jbyte) (jint) 0x72, (jbyte) (jint) 0x44, (jbyte) (jint) 0x15, (jbyte) (jint) 0xfd, (jbyte) (jint) 0x37, (jbyte) (jint) 0xbe, (jbyte) (jint) 0x5f, (jbyte) (jint) 0xaa, (jbyte) (jint) 0x9b, (jbyte) (jint) 0x88, (jbyte) (jint) 0xd8, (jbyte) (jint) 0xab, (jbyte) (jint) 0x89, (jbyte) (jint) 0x9c, (jbyte) (jint) 0xfa, (jbyte) (jint) 0x60, (jbyte) (jint) 0xea, (jbyte) (jint) 0xbc, (jbyte) (jint) 0x62, (jbyte) (jint) 0x0c, (jbyte) (jint) 0x24, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa8, (jbyte) (jint) 0xec, (jbyte) (jint) 0x67, (jbyte) (jint) 0x20, (jbyte) (jint) 0xdb, (jbyte) (jint) 0x7c, (jbyte) (jint) 0x28, (jbyte) (jint) 0xdd, (jbyte) (jint) 0xac, (jbyte) (jint) 0x5b, (jbyte) (jint) 0x34, (jbyte) (jint) 0x7e, (jbyte) (jint) 0x10, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x7b, (jbyte) (jint) 0x8f, (jbyte) (jint) 0x63, (jbyte) (jint) 0xa0, (jbyte) (jint) 0x05, (jbyte) (jint) 0x9a, (jbyte) (jint) 0x43, (jbyte) (jint) 0x77, (jbyte) (jint) 0x21, (jbyte) (jint) 0xbf, (jbyte) (jint) 0x27, (jbyte) (jint) 0x09, (jbyte) (jint) 0xc3, (jbyte) (jint) 0x9f, (jbyte) (jint) 0xb6, (jbyte) (jint) 0xd7, (jbyte) (jint) 0x29, (jbyte) (jint) 0xc2, (jbyte) (jint) 0xeb, (jbyte) (jint) 0xc0, (jbyte) (jint) 0xa4, (jbyte) (jint) 0x8b, (jbyte) (jint) 0x8c, (jbyte) (jint) 0x1d, (jbyte) (jint) 0xfb, (jbyte) (jint) 0xff, (jbyte) (jint) 0xc1, (jbyte) (jint) 0xb2, (jbyte) (jint) 0x97, (jbyte) (jint) 0x2e, (jbyte) (jint) 0xf8, (jbyte) (jint) 0x65, (jbyte) (jint) 0xf6, (jbyte) (jint) 0x75, (jbyte) (jint) 0x07, (jbyte) (jint) 0x04, (jbyte) (jint) 0x49, (jbyte) (jint) 0x33, (jbyte) (jint) 0xe4, (jbyte) (jint) 0xd9, (jbyte) (jint) 0xb9, (jbyte) (jint) 0xd0, (jbyte) (jint) 0x42, (jbyte) (jint) 0xc7, (jbyte) (jint) 0x6c, (jbyte) (jint) 0x90, (jbyte) (jint) 0x00, (jbyte) (jint) 0x8e, (jbyte) (jint) 0x6f, (jbyte) (jint) 0x50, (jbyte) (jint) 0x01, (jbyte) (jint) 0xc5, (jbyte) (jint) 0xda, (jbyte) (jint) 0x47, (jbyte) (jint) 0x3f, (jbyte) (jint) 0xcd, (jbyte) (jint) 0x69, (jbyte) (jint) 0xa2, (jbyte) (jint) 0xe2, (jbyte) (jint) 0x7a, (jbyte) (jint) 0xa7, (jbyte) (jint) 0xc6, (jbyte) (jint) 0x93, (jbyte) (jint) 0x0f, (jbyte) (jint) 0x0a, (jbyte) (jint) 0x06, (jbyte) (jint) 0xe6, (jbyte) (jint) 0x2b, (jbyte) (jint) 0x96, (jbyte) (jint) 0xa3, (jbyte) (jint) 0x1c, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x6a, (jbyte) (jint) 0x12, (jbyte) (jint) 0x84, (jbyte) (jint) 0x39, (jbyte) (jint) 0xe7, (jbyte) (jint) 0xb0, (jbyte) (jint) 0x82, (jbyte) (jint) 0xf7, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x9d, (jbyte) (jint) 0x87, (jbyte) (jint) 0x5c, (jbyte) (jint) 0x81, (jbyte) (jint) 0x35, (jbyte) (jint) 0xde, (jbyte) (jint) 0xb4, (jbyte) (jint) 0xa5, (jbyte) (jint) 0xfc, (jbyte) (jint) 0x80, (jbyte) (jint) 0xef, (jbyte) (jint) 0xcb, (jbyte) (jint) 0xbb, (jbyte) (jint) 0x6b, (jbyte) (jint) 0x76, (jbyte) (jint) 0xba, (jbyte) (jint) 0x5a, (jbyte) (jint) 0x7d, (jbyte) (jint) 0x78, (jbyte) (jint) 0x0b, (jbyte) (jint) 0x95, (jbyte) (jint) 0xe3, (jbyte) (jint) 0xad, (jbyte) (jint) 0x74, (jbyte) (jint) 0x98, (jbyte) (jint) 0x3b, (jbyte) (jint) 0x36, (jbyte) (jint) 0x64, (jbyte) (jint) 0x6d, (jbyte) (jint) 0xdc, (jbyte) (jint) 0xf0, (jbyte) (jint) 0x59, (jbyte) (jint) 0xa9, (jbyte) (jint) 0x4c, (jbyte) (jint) 0x17, (jbyte) (jint) 0x7f, (jbyte) (jint) 0x91, (jbyte) (jint) 0xb8, (jbyte) (jint) 0xc9, (jbyte) (jint) 0x57, (jbyte) (jint) 0x1b, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x61 } count:256];
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xa4, (jbyte) (jint) 0xa2, (jbyte) (jint) 0xa9, (jbyte) (jint) 0xc5, (jbyte) (jint) 0x4e, (jbyte) (jint) 0xc9, (jbyte) (jint) 0x03, (jbyte) (jint) 0xd9, (jbyte) (jint) 0x7e, (jbyte) (jint) 0x0f, (jbyte) (jint) 0xd2, (jbyte) (jint) 0xad, (jbyte) (jint) 0xe7, (jbyte) (jint) 0xd3, (jbyte) (jint) 0x27, (jbyte) (jint) 0x5b, (jbyte) (jint) 0xe3, (jbyte) (jint) 0xa1, (jbyte) (jint) 0xe8, (jbyte) (jint) 0xe6, (jbyte) (jint) 0x7c, (jbyte) (jint) 0x2a, (jbyte) (jint) 0x55, (jbyte) (jint) 0x0c, (jbyte) (jint) 0x86, (jbyte) (jint) 0x39, (jbyte) (jint) 0xd7, (jbyte) (jint) 0x8d, (jbyte) (jint) 0xb8, (jbyte) (jint) 0x12, (jbyte) (jint) 0x6f, (jbyte) (jint) 0x28, (jbyte) (jint) 0xcd, (jbyte) (jint) 0x8a, (jbyte) (jint) 0x70, (jbyte) (jint) 0x56, (jbyte) (jint) 0x72, (jbyte) (jint) 0xf9, (jbyte) (jint) 0xbf, (jbyte) (jint) 0x4f, (jbyte) (jint) 0x73, (jbyte) (jint) 0xe9, (jbyte) (jint) 0xf7, (jbyte) (jint) 0x57, (jbyte) (jint) 0x16, (jbyte) (jint) 0xac, (jbyte) (jint) 0x50, (jbyte) (jint) 0xc0, (jbyte) (jint) 0x9d, (jbyte) (jint) 0xb7, (jbyte) (jint) 0x47, (jbyte) (jint) 0x71, (jbyte) (jint) 0x60, (jbyte) (jint) 0xc4, (jbyte) (jint) 0x74, (jbyte) (jint) 0x43, (jbyte) (jint) 0x6c, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x93, (jbyte) (jint) 0x77, (jbyte) (jint) 0xdc, (jbyte) (jint) 0xce, (jbyte) (jint) 0x20, (jbyte) (jint) 0x8c, (jbyte) (jint) 0x99, (jbyte) (jint) 0x5f, (jbyte) (jint) 0x44, (jbyte) (jint) 0x01, (jbyte) (jint) 0xf5, (jbyte) (jint) 0x1e, (jbyte) (jint) 0x87, (jbyte) (jint) 0x5e, (jbyte) (jint) 0x61, (jbyte) (jint) 0x2c, (jbyte) (jint) 0x4b, (jbyte) (jint) 0x1d, (jbyte) (jint) 0x81, (jbyte) (jint) 0x15, (jbyte) (jint) 0xf4, (jbyte) (jint) 0x23, (jbyte) (jint) 0xd6, (jbyte) (jint) 0xea, (jbyte) (jint) 0xe1, (jbyte) (jint) 0x67, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x7f, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xda, (jbyte) (jint) 0x3c, (jbyte) (jint) 0x07, (jbyte) (jint) 0x53, (jbyte) (jint) 0x6a, (jbyte) (jint) 0x84, (jbyte) (jint) 0x9c, (jbyte) (jint) 0xcb, (jbyte) (jint) 0x02, (jbyte) (jint) 0x83, (jbyte) (jint) 0x33, (jbyte) (jint) 0xdd, (jbyte) (jint) 0x35, (jbyte) (jint) 0xe2, (jbyte) (jint) 0x59, (jbyte) (jint) 0x5a, (jbyte) (jint) 0x98, (jbyte) (jint) 0xa5, (jbyte) (jint) 0x92, (jbyte) (jint) 0x64, (jbyte) (jint) 0x04, (jbyte) (jint) 0x06, (jbyte) (jint) 0x10, (jbyte) (jint) 0x4d, (jbyte) (jint) 0x1c, (jbyte) (jint) 0x97, (jbyte) (jint) 0x08, (jbyte) (jint) 0x31, (jbyte) (jint) 0xee, (jbyte) (jint) 0xab, (jbyte) (jint) 0x05, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x79, (jbyte) (jint) 0xa0, (jbyte) (jint) 0x18, (jbyte) (jint) 0x46, (jbyte) (jint) 0x6d, (jbyte) (jint) 0xfc, (jbyte) (jint) 0x89, (jbyte) (jint) 0xd4, (jbyte) (jint) 0xc7, (jbyte) (jint) 0xff, (jbyte) (jint) 0xf0, (jbyte) (jint) 0xcf, (jbyte) (jint) 0x42, (jbyte) (jint) 0x91, (jbyte) (jint) 0xf8, (jbyte) (jint) 0x68, (jbyte) (jint) 0x0a, (jbyte) (jint) 0x65, (jbyte) (jint) 0x8e, (jbyte) (jint) 0xb6, (jbyte) (jint) 0xfd, (jbyte) (jint) 0xc3, (jbyte) (jint) 0xef, (jbyte) (jint) 0x78, (jbyte) (jint) 0x4c, (jbyte) (jint) 0xcc, (jbyte) (jint) 0x9e, (jbyte) (jint) 0x30, (jbyte) (jint) 0x2e, (jbyte) (jint) 0xbc, (jbyte) (jint) 0x0b, (jbyte) (jint) 0x54, (jbyte) (jint) 0x1a, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xbb, (jbyte) (jint) 0x26, (jbyte) (jint) 0x80, (jbyte) (jint) 0x48, (jbyte) (jint) 0x94, (jbyte) (jint) 0x32, (jbyte) (jint) 0x7d, (jbyte) (jint) 0xa7, (jbyte) (jint) 0x3f, (jbyte) (jint) 0xae, (jbyte) (jint) 0x22, (jbyte) (jint) 0x3d, (jbyte) (jint) 0x66, (jbyte) (jint) 0xaa, (jbyte) (jint) 0xf6, (jbyte) (jint) 0x00, (jbyte) (jint) 0x5d, (jbyte) (jint) 0xbd, (jbyte) (jint) 0x4a, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x3b, (jbyte) (jint) 0xb4, (jbyte) (jint) 0x17, (jbyte) (jint) 0x8b, (jbyte) (jint) 0x9f, (jbyte) (jint) 0x76, (jbyte) (jint) 0xb0, (jbyte) (jint) 0x24, (jbyte) (jint) 0x9a, (jbyte) (jint) 0x25, (jbyte) (jint) 0x63, (jbyte) (jint) 0xdb, (jbyte) (jint) 0xeb, (jbyte) (jint) 0x7a, (jbyte) (jint) 0x3e, (jbyte) (jint) 0x5c, (jbyte) (jint) 0xb3, (jbyte) (jint) 0xb1, (jbyte) (jint) 0x29, (jbyte) (jint) 0xf2, (jbyte) (jint) 0xca, (jbyte) (jint) 0x58, (jbyte) (jint) 0x6e, (jbyte) (jint) 0xd8, (jbyte) (jint) 0xa8, (jbyte) (jint) 0x2f, (jbyte) (jint) 0x75, (jbyte) (jint) 0xdf, (jbyte) (jint) 0x14, (jbyte) (jint) 0xfb, (jbyte) (jint) 0x13, (jbyte) (jint) 0x49, (jbyte) (jint) 0x88, (jbyte) (jint) 0xb2, (jbyte) (jint) 0xec, (jbyte) (jint) 0xe4, (jbyte) (jint) 0x34, (jbyte) (jint) 0x2d, (jbyte) (jint) 0x96, (jbyte) (jint) 0xc6, (jbyte) (jint) 0x3a, (jbyte) (jint) 0xed, (jbyte) (jint) 0x95, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xe5, (jbyte) (jint) 0x85, (jbyte) (jint) 0x6b, (jbyte) (jint) 0x40, (jbyte) (jint) 0x21, (jbyte) (jint) 0x9b, (jbyte) (jint) 0x09, (jbyte) (jint) 0x19, (jbyte) (jint) 0x2b, (jbyte) (jint) 0x52, (jbyte) (jint) 0xde, (jbyte) (jint) 0x45, (jbyte) (jint) 0xa3, (jbyte) (jint) 0xfa, (jbyte) (jint) 0x51, (jbyte) (jint) 0xc2, (jbyte) (jint) 0xb5, (jbyte) (jint) 0xd1, (jbyte) (jint) 0x90, (jbyte) (jint) 0xb9, (jbyte) (jint) 0xf3, (jbyte) (jint) 0x37, (jbyte) (jint) 0xc1, (jbyte) (jint) 0x0d, (jbyte) (jint) 0xba, (jbyte) (jint) 0x41, (jbyte) (jint) 0x11, (jbyte) (jint) 0x38, (jbyte) (jint) 0x7b, (jbyte) (jint) 0xbe, (jbyte) (jint) 0xd0, (jbyte) (jint) 0xd5, (jbyte) (jint) 0x69, (jbyte) (jint) 0x36, (jbyte) (jint) 0xc8, (jbyte) (jint) 0x62, (jbyte) (jint) 0x1b, (jbyte) (jint) 0x82, (jbyte) (jint) 0x8f } count:256];
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x83, (jbyte) (jint) 0xf2, (jbyte) (jint) 0x2a, (jbyte) (jint) 0xeb, (jbyte) (jint) 0xe9, (jbyte) (jint) 0xbf, (jbyte) (jint) 0x7b, (jbyte) (jint) 0x9c, (jbyte) (jint) 0x34, (jbyte) (jint) 0x96, (jbyte) (jint) 0x8d, (jbyte) (jint) 0x98, (jbyte) (jint) 0xb9, (jbyte) (jint) 0x69, (jbyte) (jint) 0x8c, (jbyte) (jint) 0x29, (jbyte) (jint) 0x3d, (jbyte) (jint) 0x88, (jbyte) (jint) 0x68, (jbyte) (jint) 0x06, (jbyte) (jint) 0x39, (jbyte) (jint) 0x11, (jbyte) (jint) 0x4c, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xa0, (jbyte) (jint) 0x56, (jbyte) (jint) 0x40, (jbyte) (jint) 0x92, (jbyte) (jint) 0x15, (jbyte) (jint) 0xbc, (jbyte) (jint) 0xb3, (jbyte) (jint) 0xdc, (jbyte) (jint) 0x6f, (jbyte) (jint) 0xf8, (jbyte) (jint) 0x26, (jbyte) (jint) 0xba, (jbyte) (jint) 0xbe, (jbyte) (jint) 0xbd, (jbyte) (jint) 0x31, (jbyte) (jint) 0xfb, (jbyte) (jint) 0xc3, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x80, (jbyte) (jint) 0x61, (jbyte) (jint) 0xe1, (jbyte) (jint) 0x7a, (jbyte) (jint) 0x32, (jbyte) (jint) 0xd2, (jbyte) (jint) 0x70, (jbyte) (jint) 0x20, (jbyte) (jint) 0xa1, (jbyte) (jint) 0x45, (jbyte) (jint) 0xec, (jbyte) (jint) 0xd9, (jbyte) (jint) 0x1a, (jbyte) (jint) 0x5d, (jbyte) (jint) 0xb4, (jbyte) (jint) 0xd8, (jbyte) (jint) 0x09, (jbyte) (jint) 0xa5, (jbyte) (jint) 0x55, (jbyte) (jint) 0x8e, (jbyte) (jint) 0x37, (jbyte) (jint) 0x76, (jbyte) (jint) 0xa9, (jbyte) (jint) 0x67, (jbyte) (jint) 0x10, (jbyte) (jint) 0x17, (jbyte) (jint) 0x36, (jbyte) (jint) 0x65, (jbyte) (jint) 0xb1, (jbyte) (jint) 0x95, (jbyte) (jint) 0x62, (jbyte) (jint) 0x59, (jbyte) (jint) 0x74, (jbyte) (jint) 0xa3, (jbyte) (jint) 0x50, (jbyte) (jint) 0x2f, (jbyte) (jint) 0x4b, (jbyte) (jint) 0xc8, (jbyte) (jint) 0xd0, (jbyte) (jint) 0x8f, (jbyte) (jint) 0xcd, (jbyte) (jint) 0xd4, (jbyte) (jint) 0x3c, (jbyte) (jint) 0x86, (jbyte) (jint) 0x12, (jbyte) (jint) 0x1d, (jbyte) (jint) 0x23, (jbyte) (jint) 0xef, (jbyte) (jint) 0xf4, (jbyte) (jint) 0x53, (jbyte) (jint) 0x19, (jbyte) (jint) 0x35, (jbyte) (jint) 0xe6, (jbyte) (jint) 0x7f, (jbyte) (jint) 0x5e, (jbyte) (jint) 0xd6, (jbyte) (jint) 0x79, (jbyte) (jint) 0x51, (jbyte) (jint) 0x22, (jbyte) (jint) 0x14, (jbyte) (jint) 0xf7, (jbyte) (jint) 0x1e, (jbyte) (jint) 0x4a, (jbyte) (jint) 0x42, (jbyte) (jint) 0x9b, (jbyte) (jint) 0x41, (jbyte) (jint) 0x73, (jbyte) (jint) 0x2d, (jbyte) (jint) 0xc1, (jbyte) (jint) 0x5c, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa2, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x2e, (jbyte) (jint) 0xd3, (jbyte) (jint) 0x28, (jbyte) (jint) 0xbb, (jbyte) (jint) 0xc9, (jbyte) (jint) 0xae, (jbyte) (jint) 0x6a, (jbyte) (jint) 0xd1, (jbyte) (jint) 0x5a, (jbyte) (jint) 0x30, (jbyte) (jint) 0x90, (jbyte) (jint) 0x84, (jbyte) (jint) 0xf9, (jbyte) (jint) 0xb2, (jbyte) (jint) 0x58, (jbyte) (jint) 0xcf, (jbyte) (jint) 0x7e, (jbyte) (jint) 0xc5, (jbyte) (jint) 0xcb, (jbyte) (jint) 0x97, (jbyte) (jint) 0xe4, (jbyte) (jint) 0x16, (jbyte) (jint) 0x6c, (jbyte) (jint) 0xfa, (jbyte) (jint) 0xb0, (jbyte) (jint) 0x6d, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x52, (jbyte) (jint) 0x99, (jbyte) (jint) 0x0d, (jbyte) (jint) 0x4e, (jbyte) (jint) 0x03, (jbyte) (jint) 0x91, (jbyte) (jint) 0xc2, (jbyte) (jint) 0x4d, (jbyte) (jint) 0x64, (jbyte) (jint) 0x77, (jbyte) (jint) 0x9f, (jbyte) (jint) 0xdd, (jbyte) (jint) 0xc4, (jbyte) (jint) 0x49, (jbyte) (jint) 0x8a, (jbyte) (jint) 0x9a, (jbyte) (jint) 0x24, (jbyte) (jint) 0x38, (jbyte) (jint) 0xa7, (jbyte) (jint) 0x57, (jbyte) (jint) 0x85, (jbyte) (jint) 0xc7, (jbyte) (jint) 0x7c, (jbyte) (jint) 0x7d, (jbyte) (jint) 0xe7, (jbyte) (jint) 0xf6, (jbyte) (jint) 0xb7, (jbyte) (jint) 0xac, (jbyte) (jint) 0x27, (jbyte) (jint) 0x46, (jbyte) (jint) 0xde, (jbyte) (jint) 0xdf, (jbyte) (jint) 0x3b, (jbyte) (jint) 0xd7, (jbyte) (jint) 0x9e, (jbyte) (jint) 0x2b, (jbyte) (jint) 0x0b, (jbyte) (jint) 0xd5, (jbyte) (jint) 0x13, (jbyte) (jint) 0x75, (jbyte) (jint) 0xf0, (jbyte) (jint) 0x72, (jbyte) (jint) 0xb6, (jbyte) (jint) 0x9d, (jbyte) (jint) 0x1b, (jbyte) (jint) 0x01, (jbyte) (jint) 0x3f, (jbyte) (jint) 0x44, (jbyte) (jint) 0xe5, (jbyte) (jint) 0x87, (jbyte) (jint) 0xfd, (jbyte) (jint) 0x07, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xab, (jbyte) (jint) 0x94, (jbyte) (jint) 0x18, (jbyte) (jint) 0xea, (jbyte) (jint) 0xfc, (jbyte) (jint) 0x3a, (jbyte) (jint) 0x82, (jbyte) (jint) 0x5f, (jbyte) (jint) 0x05, (jbyte) (jint) 0x54, (jbyte) (jint) 0xdb, (jbyte) (jint) 0x00, (jbyte) (jint) 0x8b, (jbyte) (jint) 0xe3, (jbyte) (jint) 0x48, (jbyte) (jint) 0x0c, (jbyte) (jint) 0xca, (jbyte) (jint) 0x78, (jbyte) (jint) 0x89, (jbyte) (jint) 0x0a, (jbyte) (jint) 0xff, (jbyte) (jint) 0x3e, (jbyte) (jint) 0x5b, (jbyte) (jint) 0x81, (jbyte) (jint) 0xee, (jbyte) (jint) 0x71, (jbyte) (jint) 0xe2, (jbyte) (jint) 0xda, (jbyte) (jint) 0x2c, (jbyte) (jint) 0xb8, (jbyte) (jint) 0xb5, (jbyte) (jint) 0xcc, (jbyte) (jint) 0x6e, (jbyte) (jint) 0xa8, (jbyte) (jint) 0x6b, (jbyte) (jint) 0xad, (jbyte) (jint) 0x60, (jbyte) (jint) 0xc6, (jbyte) (jint) 0x08, (jbyte) (jint) 0x04, (jbyte) (jint) 0x02, (jbyte) (jint) 0xe8, (jbyte) (jint) 0xf5, (jbyte) (jint) 0x4f, (jbyte) (jint) 0xa4, (jbyte) (jint) 0xf3, (jbyte) (jint) 0xc0, (jbyte) (jint) 0xce, (jbyte) (jint) 0x43, (jbyte) (jint) 0x25, (jbyte) (jint) 0x1c, (jbyte) (jint) 0x21, (jbyte) (jint) 0x33, (jbyte) (jint) 0x0f, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x47, (jbyte) (jint) 0xed, (jbyte) (jint) 0x66, (jbyte) (jint) 0x63, (jbyte) (jint) 0x93, (jbyte) (jint) 0xaa } count:256];
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x45, (jbyte) (jint) 0xd4, (jbyte) (jint) 0x0b, (jbyte) (jint) 0x43, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x72, (jbyte) (jint) 0xed, (jbyte) (jint) 0xa4, (jbyte) (jint) 0xc2, (jbyte) (jint) 0x38, (jbyte) (jint) 0xe6, (jbyte) (jint) 0x71, (jbyte) (jint) 0xfd, (jbyte) (jint) 0xb6, (jbyte) (jint) 0x3a, (jbyte) (jint) 0x95, (jbyte) (jint) 0x50, (jbyte) (jint) 0x44, (jbyte) (jint) 0x4b, (jbyte) (jint) 0xe2, (jbyte) (jint) 0x74, (jbyte) (jint) 0x6b, (jbyte) (jint) 0x1e, (jbyte) (jint) 0x11, (jbyte) (jint) 0x5a, (jbyte) (jint) 0xc6, (jbyte) (jint) 0xb4, (jbyte) (jint) 0xd8, (jbyte) (jint) 0xa5, (jbyte) (jint) 0x8a, (jbyte) (jint) 0x70, (jbyte) (jint) 0xa3, (jbyte) (jint) 0xa8, (jbyte) (jint) 0xfa, (jbyte) (jint) 0x05, (jbyte) (jint) 0xd9, (jbyte) (jint) 0x97, (jbyte) (jint) 0x40, (jbyte) (jint) 0xc9, (jbyte) (jint) 0x90, (jbyte) (jint) 0x98, (jbyte) (jint) 0x8f, (jbyte) (jint) 0xdc, (jbyte) (jint) 0x12, (jbyte) (jint) 0x31, (jbyte) (jint) 0x2c, (jbyte) (jint) 0x47, (jbyte) (jint) 0x6a, (jbyte) (jint) 0x99, (jbyte) (jint) 0xae, (jbyte) (jint) 0xc8, (jbyte) (jint) 0x7f, (jbyte) (jint) 0xf9, (jbyte) (jint) 0x4f, (jbyte) (jint) 0x5d, (jbyte) (jint) 0x96, (jbyte) (jint) 0x6f, (jbyte) (jint) 0xf4, (jbyte) (jint) 0xb3, (jbyte) (jint) 0x39, (jbyte) (jint) 0x21, (jbyte) (jint) 0xda, (jbyte) (jint) 0x9c, (jbyte) (jint) 0x85, (jbyte) (jint) 0x9e, (jbyte) (jint) 0x3b, (jbyte) (jint) 0xf0, (jbyte) (jint) 0xbf, (jbyte) (jint) 0xef, (jbyte) (jint) 0x06, (jbyte) (jint) 0xee, (jbyte) (jint) 0xe5, (jbyte) (jint) 0x5f, (jbyte) (jint) 0x20, (jbyte) (jint) 0x10, (jbyte) (jint) 0xcc, (jbyte) (jint) 0x3c, (jbyte) (jint) 0x54, (jbyte) (jint) 0x4a, (jbyte) (jint) 0x52, (jbyte) (jint) 0x94, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xc0, (jbyte) (jint) 0x28, (jbyte) (jint) 0xf6, (jbyte) (jint) 0x56, (jbyte) (jint) 0x60, (jbyte) (jint) 0xa2, (jbyte) (jint) 0xe3, (jbyte) (jint) 0x0f, (jbyte) (jint) 0xec, (jbyte) (jint) 0x9d, (jbyte) (jint) 0x24, (jbyte) (jint) 0x83, (jbyte) (jint) 0x7e, (jbyte) (jint) 0xd5, (jbyte) (jint) 0x7c, (jbyte) (jint) 0xeb, (jbyte) (jint) 0x18, (jbyte) (jint) 0xd7, (jbyte) (jint) 0xcd, (jbyte) (jint) 0xdd, (jbyte) (jint) 0x78, (jbyte) (jint) 0xff, (jbyte) (jint) 0xdb, (jbyte) (jint) 0xa1, (jbyte) (jint) 0x09, (jbyte) (jint) 0xd0, (jbyte) (jint) 0x76, (jbyte) (jint) 0x84, (jbyte) (jint) 0x75, (jbyte) (jint) 0xbb, (jbyte) (jint) 0x1d, (jbyte) (jint) 0x1a, (jbyte) (jint) 0x2f, (jbyte) (jint) 0xb0, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xd6, (jbyte) (jint) 0x34, (jbyte) (jint) 0x63, (jbyte) (jint) 0x35, (jbyte) (jint) 0xd2, (jbyte) (jint) 0x2a, (jbyte) (jint) 0x59, (jbyte) (jint) 0x6d, (jbyte) (jint) 0x4d, (jbyte) (jint) 0x77, (jbyte) (jint) 0xe7, (jbyte) (jint) 0x8e, (jbyte) (jint) 0x61, (jbyte) (jint) 0xcf, (jbyte) (jint) 0x9f, (jbyte) (jint) 0xce, (jbyte) (jint) 0x27, (jbyte) (jint) 0xf5, (jbyte) (jint) 0x80, (jbyte) (jint) 0x86, (jbyte) (jint) 0xc7, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xfb, (jbyte) (jint) 0xf8, (jbyte) (jint) 0x87, (jbyte) (jint) 0xab, (jbyte) (jint) 0x62, (jbyte) (jint) 0x3f, (jbyte) (jint) 0xdf, (jbyte) (jint) 0x48, (jbyte) (jint) 0x00, (jbyte) (jint) 0x14, (jbyte) (jint) 0x9a, (jbyte) (jint) 0xbd, (jbyte) (jint) 0x5b, (jbyte) (jint) 0x04, (jbyte) (jint) 0x92, (jbyte) (jint) 0x02, (jbyte) (jint) 0x25, (jbyte) (jint) 0x65, (jbyte) (jint) 0x4c, (jbyte) (jint) 0x53, (jbyte) (jint) 0x0c, (jbyte) (jint) 0xf2, (jbyte) (jint) 0x29, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x17, (jbyte) (jint) 0x6c, (jbyte) (jint) 0x41, (jbyte) (jint) 0x30, (jbyte) (jint) 0xe9, (jbyte) (jint) 0x93, (jbyte) (jint) 0x55, (jbyte) (jint) 0xf7, (jbyte) (jint) 0xac, (jbyte) (jint) 0x68, (jbyte) (jint) 0x26, (jbyte) (jint) 0xc4, (jbyte) (jint) 0x7d, (jbyte) (jint) 0xca, (jbyte) (jint) 0x7a, (jbyte) (jint) 0x3e, (jbyte) (jint) 0xa0, (jbyte) (jint) 0x37, (jbyte) (jint) 0x03, (jbyte) (jint) 0xc1, (jbyte) (jint) 0x36, (jbyte) (jint) 0x69, (jbyte) (jint) 0x66, (jbyte) (jint) 0x08, (jbyte) (jint) 0x16, (jbyte) (jint) 0xa7, (jbyte) (jint) 0xbc, (jbyte) (jint) 0xc5, (jbyte) (jint) 0xd3, (jbyte) (jint) 0x22, (jbyte) (jint) 0xb7, (jbyte) (jint) 0x13, (jbyte) (jint) 0x46, (jbyte) (jint) 0x32, (jbyte) (jint) 0xe8, (jbyte) (jint) 0x57, (jbyte) (jint) 0x88, (jbyte) (jint) 0x2b, (jbyte) (jint) 0x81, (jbyte) (jint) 0xb2, (jbyte) (jint) 0x4e, (jbyte) (jint) 0x64, (jbyte) (jint) 0x1c, (jbyte) (jint) 0xaa, (jbyte) (jint) 0x91, (jbyte) (jint) 0x58, (jbyte) (jint) 0x2e, (jbyte) (jint) 0x9b, (jbyte) (jint) 0x5c, (jbyte) (jint) 0x1b, (jbyte) (jint) 0x51, (jbyte) (jint) 0x73, (jbyte) (jint) 0x42, (jbyte) (jint) 0x23, (jbyte) (jint) 0x01, (jbyte) (jint) 0x6e, (jbyte) (jint) 0xf3, (jbyte) (jint) 0x0d, (jbyte) (jint) 0xbe, (jbyte) (jint) 0x3d, (jbyte) (jint) 0x0a, (jbyte) (jint) 0x2d, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x67, (jbyte) (jint) 0x33, (jbyte) (jint) 0x19, (jbyte) (jint) 0x7b, (jbyte) (jint) 0x5e, (jbyte) (jint) 0xea, (jbyte) (jint) 0xde, (jbyte) (jint) 0x8b, (jbyte) (jint) 0xcb, (jbyte) (jint) 0xa9, (jbyte) (jint) 0x8c, (jbyte) (jint) 0x8d, (jbyte) (jint) 0xad, (jbyte) (jint) 0x49, (jbyte) (jint) 0x82, (jbyte) (jint) 0xe4, (jbyte) (jint) 0xba, (jbyte) (jint) 0xc3, (jbyte) (jint) 0x15, (jbyte) (jint) 0xd1, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x89, (jbyte) (jint) 0xfc, (jbyte) (jint) 0xb1, (jbyte) (jint) 0xb9, (jbyte) (jint) 0xb5, (jbyte) (jint) 0x07, (jbyte) (jint) 0x79, (jbyte) (jint) 0xb8, (jbyte) (jint) 0xe1 } count:256];
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xb2, (jbyte) (jint) 0xb6, (jbyte) (jint) 0x23, (jbyte) (jint) 0x11, (jbyte) (jint) 0xa7, (jbyte) (jint) 0x88, (jbyte) (jint) 0xc5, (jbyte) (jint) 0xa6, (jbyte) (jint) 0x39, (jbyte) (jint) 0x8f, (jbyte) (jint) 0xc4, (jbyte) (jint) 0xe8, (jbyte) (jint) 0x73, (jbyte) (jint) 0x22, (jbyte) (jint) 0x43, (jbyte) (jint) 0xc3, (jbyte) (jint) 0x82, (jbyte) (jint) 0x27, (jbyte) (jint) 0xcd, (jbyte) (jint) 0x18, (jbyte) (jint) 0x51, (jbyte) (jint) 0x62, (jbyte) (jint) 0x2d, (jbyte) (jint) 0xf7, (jbyte) (jint) 0x5c, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x3b, (jbyte) (jint) 0xfd, (jbyte) (jint) 0xca, (jbyte) (jint) 0x9b, (jbyte) (jint) 0x0d, (jbyte) (jint) 0x0f, (jbyte) (jint) 0x79, (jbyte) (jint) 0x8c, (jbyte) (jint) 0x10, (jbyte) (jint) 0x4c, (jbyte) (jint) 0x74, (jbyte) (jint) 0x1c, (jbyte) (jint) 0x0a, (jbyte) (jint) 0x8e, (jbyte) (jint) 0x7c, (jbyte) (jint) 0x94, (jbyte) (jint) 0x07, (jbyte) (jint) 0xc7, (jbyte) (jint) 0x5e, (jbyte) (jint) 0x14, (jbyte) (jint) 0xa1, (jbyte) (jint) 0x21, (jbyte) (jint) 0x57, (jbyte) (jint) 0x50, (jbyte) (jint) 0x4e, (jbyte) (jint) 0xa9, (jbyte) (jint) 0x80, (jbyte) (jint) 0xd9, (jbyte) (jint) 0xef, (jbyte) (jint) 0x64, (jbyte) (jint) 0x41, (jbyte) (jint) 0xcf, (jbyte) (jint) 0x3c, (jbyte) (jint) 0xee, (jbyte) (jint) 0x2e, (jbyte) (jint) 0x13, (jbyte) (jint) 0x29, (jbyte) (jint) 0xba, (jbyte) (jint) 0x34, (jbyte) (jint) 0x5a, (jbyte) (jint) 0xae, (jbyte) (jint) 0x8a, (jbyte) (jint) 0x61, (jbyte) (jint) 0x33, (jbyte) (jint) 0x12, (jbyte) (jint) 0xb9, (jbyte) (jint) 0x55, (jbyte) (jint) 0xa8, (jbyte) (jint) 0x15, (jbyte) (jint) 0x05, (jbyte) (jint) 0xf6, (jbyte) (jint) 0x03, (jbyte) (jint) 0x06, (jbyte) (jint) 0x49, (jbyte) (jint) 0xb5, (jbyte) (jint) 0x25, (jbyte) (jint) 0x09, (jbyte) (jint) 0x16, (jbyte) (jint) 0x0c, (jbyte) (jint) 0x2a, (jbyte) (jint) 0x38, (jbyte) (jint) 0xfc, (jbyte) (jint) 0x20, (jbyte) (jint) 0xf4, (jbyte) (jint) 0xe5, (jbyte) (jint) 0x7f, (jbyte) (jint) 0xd7, (jbyte) (jint) 0x31, (jbyte) (jint) 0x2b, (jbyte) (jint) 0x66, (jbyte) (jint) 0x6f, (jbyte) (jint) 0xff, (jbyte) (jint) 0x72, (jbyte) (jint) 0x86, (jbyte) (jint) 0xf0, (jbyte) (jint) 0xa3, (jbyte) (jint) 0x2f, (jbyte) (jint) 0x78, (jbyte) (jint) 0x00, (jbyte) (jint) 0xbc, (jbyte) (jint) 0xcc, (jbyte) (jint) 0xe2, (jbyte) (jint) 0xb0, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x42, (jbyte) (jint) 0xb4, (jbyte) (jint) 0x30, (jbyte) (jint) 0x5f, (jbyte) (jint) 0x60, (jbyte) (jint) 0x04, (jbyte) (jint) 0xec, (jbyte) (jint) 0xa5, (jbyte) (jint) 0xe3, (jbyte) (jint) 0x8b, (jbyte) (jint) 0xe7, (jbyte) (jint) 0x1d, (jbyte) (jint) 0xbf, (jbyte) (jint) 0x84, (jbyte) (jint) 0x7b, (jbyte) (jint) 0xe6, (jbyte) (jint) 0x81, (jbyte) (jint) 0xf8, (jbyte) (jint) 0xde, (jbyte) (jint) 0xd8, (jbyte) (jint) 0xd2, (jbyte) (jint) 0x17, (jbyte) (jint) 0xce, (jbyte) (jint) 0x4b, (jbyte) (jint) 0x47, (jbyte) (jint) 0xd6, (jbyte) (jint) 0x69, (jbyte) (jint) 0x6c, (jbyte) (jint) 0x19, (jbyte) (jint) 0x99, (jbyte) (jint) 0x9a, (jbyte) (jint) 0x01, (jbyte) (jint) 0xb3, (jbyte) (jint) 0x85, (jbyte) (jint) 0xb1, (jbyte) (jint) 0xf9, (jbyte) (jint) 0x59, (jbyte) (jint) 0xc2, (jbyte) (jint) 0x37, (jbyte) (jint) 0xe9, (jbyte) (jint) 0xc8, (jbyte) (jint) 0xa0, (jbyte) (jint) 0xed, (jbyte) (jint) 0x4f, (jbyte) (jint) 0x89, (jbyte) (jint) 0x68, (jbyte) (jint) 0x6d, (jbyte) (jint) 0xd5, (jbyte) (jint) 0x26, (jbyte) (jint) 0x91, (jbyte) (jint) 0x87, (jbyte) (jint) 0x58, (jbyte) (jint) 0xbd, (jbyte) (jint) 0xc9, (jbyte) (jint) 0x98, (jbyte) (jint) 0xdc, (jbyte) (jint) 0x75, (jbyte) (jint) 0xc0, (jbyte) (jint) 0x76, (jbyte) (jint) 0xf5, (jbyte) (jint) 0x67, (jbyte) (jint) 0x6b, (jbyte) (jint) 0x7e, (jbyte) (jint) 0xeb, (jbyte) (jint) 0x52, (jbyte) (jint) 0xcb, (jbyte) (jint) 0xd1, (jbyte) (jint) 0x5b, (jbyte) (jint) 0x9f, (jbyte) (jint) 0x0b, (jbyte) (jint) 0xdb, (jbyte) (jint) 0x40, (jbyte) (jint) 0x92, (jbyte) (jint) 0x1a, (jbyte) (jint) 0xfa, (jbyte) (jint) 0xac, (jbyte) (jint) 0xe4, (jbyte) (jint) 0xe1, (jbyte) (jint) 0x71, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x65, (jbyte) (jint) 0x8d, (jbyte) (jint) 0x97, (jbyte) (jint) 0x9e, (jbyte) (jint) 0x95, (jbyte) (jint) 0x90, (jbyte) (jint) 0x5d, (jbyte) (jint) 0xb7, (jbyte) (jint) 0xc1, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x54, (jbyte) (jint) 0xfb, (jbyte) (jint) 0x02, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x35, (jbyte) (jint) 0xbb, (jbyte) (jint) 0x3a, (jbyte) (jint) 0x4d, (jbyte) (jint) 0xad, (jbyte) (jint) 0x2c, (jbyte) (jint) 0x3d, (jbyte) (jint) 0x56, (jbyte) (jint) 0x08, (jbyte) (jint) 0x1b, (jbyte) (jint) 0x4a, (jbyte) (jint) 0x93, (jbyte) (jint) 0x6a, (jbyte) (jint) 0xab, (jbyte) (jint) 0xb8, (jbyte) (jint) 0x7a, (jbyte) (jint) 0xf2, (jbyte) (jint) 0x7d, (jbyte) (jint) 0xda, (jbyte) (jint) 0x3f, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x3e, (jbyte) (jint) 0xbe, (jbyte) (jint) 0xea, (jbyte) (jint) 0xaa, (jbyte) (jint) 0x44, (jbyte) (jint) 0xc6, (jbyte) (jint) 0xd0, (jbyte) (jint) 0x36, (jbyte) (jint) 0x48, (jbyte) (jint) 0x70, (jbyte) (jint) 0x96, (jbyte) (jint) 0x77, (jbyte) (jint) 0x24, (jbyte) (jint) 0x53, (jbyte) (jint) 0xdf, (jbyte) (jint) 0xf3, (jbyte) (jint) 0x83, (jbyte) (jint) 0x28, (jbyte) (jint) 0x32, (jbyte) (jint) 0x45, (jbyte) (jint) 0x1e, (jbyte) (jint) 0xa4, (jbyte) (jint) 0xd3, (jbyte) (jint) 0xa2, (jbyte) (jint) 0x46, (jbyte) (jint) 0x6e, (jbyte) (jint) 0x9c, (jbyte) (jint) 0xdd, (jbyte) (jint) 0x63, (jbyte) (jint) 0xd4, (jbyte) (jint) 0x9d } count:256];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoEnginesDSTU7624Engine)
  }
}

@end

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initWithInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, jint blockBitLength) {
  NSObject_init(self);
  if (blockBitLength != 128 && blockBitLength != 256 && blockBitLength != 512) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported block length: only 128/256/512 are allowed");
  }
  self->wordsInBlock_ = JreURShift32(blockBitLength, 6);
  self->internalState_ = [IOSLongArray newArrayWithLength:self->wordsInBlock_];
}

LibOrgBouncycastleCryptoEnginesDSTU7624Engine *new_LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initWithInt_(jint blockBitLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, initWithInt_, blockBitLength)
}

LibOrgBouncycastleCryptoEnginesDSTU7624Engine *create_LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initWithInt_(jint blockBitLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesDSTU7624Engine, initWithInt_, blockBitLength)
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_addRoundKeyWithInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, jint round) {
  IOSLongArray *roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), round);
  for (jint i = 0; i < self->wordsInBlock_; ++i) {
    *IOSLongArray_GetRef(nil_chk(self->internalState_), i) += IOSLongArray_Get(nil_chk(roundKey), i);
  }
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subRoundKeyWithInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, jint round) {
  IOSLongArray *roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), round);
  for (jint i = 0; i < self->wordsInBlock_; ++i) {
    *IOSLongArray_GetRef(nil_chk(self->internalState_), i) -= IOSLongArray_Get(nil_chk(roundKey), i);
  }
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_xorRoundKeyWithInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, jint round) {
  IOSLongArray *roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), round);
  for (jint i = 0; i < self->wordsInBlock_; ++i) {
    *IOSLongArray_GetRef(nil_chk(self->internalState_), i) ^= IOSLongArray_Get(nil_chk(roundKey), i);
  }
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandKTWithLongArray_withLongArray_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSLongArray *workingKey, IOSLongArray *tempKeys) {
  IOSLongArray *k0 = [IOSLongArray newArrayWithLength:self->wordsInBlock_];
  IOSLongArray *k1 = [IOSLongArray newArrayWithLength:self->wordsInBlock_];
  self->internalState_ = [IOSLongArray newArrayWithLength:self->wordsInBlock_];
  *IOSLongArray_GetRef(self->internalState_, 0) += self->wordsInBlock_ + self->wordsInKey_ + 1;
  if (self->wordsInBlock_ == self->wordsInKey_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(workingKey, 0, k0, 0, k0->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(workingKey, 0, k1, 0, k1->size_);
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(workingKey, 0, k0, 0, self->wordsInBlock_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(workingKey, self->wordsInBlock_, k1, 0, self->wordsInBlock_);
  }
  for (jint wordIndex = 0; wordIndex < ((IOSLongArray *) nil_chk(self->internalState_))->size_; wordIndex++) {
    *IOSLongArray_GetRef(self->internalState_, wordIndex) += IOSLongArray_Get(k0, wordIndex);
  }
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
  for (jint wordIndex = 0; wordIndex < ((IOSLongArray *) nil_chk(self->internalState_))->size_; wordIndex++) {
    *IOSLongArray_GetRef(self->internalState_, wordIndex) ^= IOSLongArray_Get(k1, wordIndex);
  }
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
  for (jint wordIndex = 0; wordIndex < ((IOSLongArray *) nil_chk(self->internalState_))->size_; wordIndex++) {
    *IOSLongArray_GetRef(self->internalState_, wordIndex) += IOSLongArray_Get(k0, wordIndex);
  }
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->internalState_, 0, tempKeys, 0, self->wordsInBlock_);
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandEvenWithLongArray_withLongArray_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSLongArray *workingKey, IOSLongArray *tempKey) {
  IOSLongArray *initialData = [IOSLongArray newArrayWithLength:self->wordsInKey_];
  IOSLongArray *tempRoundKey = [IOSLongArray newArrayWithLength:self->wordsInBlock_];
  jint round = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(workingKey, 0, initialData, 0, self->wordsInKey_);
  jlong tmv = (jlong) 0x0001000100010001LL;
  while (true) {
    for (jint wordIndex = 0; wordIndex < self->wordsInBlock_; wordIndex++) {
      *IOSLongArray_GetRef(tempRoundKey, wordIndex) = IOSLongArray_Get(nil_chk(tempKey), wordIndex) + tmv;
    }
    for (jint wordIndex = 0; wordIndex < self->wordsInBlock_; wordIndex++) {
      *IOSLongArray_GetRef(nil_chk(self->internalState_), wordIndex) = IOSLongArray_Get(initialData, wordIndex) + IOSLongArray_Get(tempRoundKey, wordIndex);
    }
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
    for (jint wordIndex = 0; wordIndex < self->wordsInBlock_; wordIndex++) {
      *IOSLongArray_GetRef(nil_chk(self->internalState_), wordIndex) ^= IOSLongArray_Get(tempRoundKey, wordIndex);
    }
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
    for (jint wordIndex = 0; wordIndex < self->wordsInBlock_; wordIndex++) {
      *IOSLongArray_GetRef(nil_chk(self->internalState_), wordIndex) += IOSLongArray_Get(tempRoundKey, wordIndex);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->internalState_, 0, IOSObjectArray_Get(nil_chk(self->roundKeys_), round), 0, self->wordsInBlock_);
    if (self->roundsAmount_ == round) {
      break;
    }
    if (self->wordsInBlock_ != self->wordsInKey_) {
      round += 2;
      JreLShiftAssignLong(&tmv, 1);
      for (jint wordIndex = 0; wordIndex < self->wordsInBlock_; wordIndex++) {
        *IOSLongArray_GetRef(tempRoundKey, wordIndex) = IOSLongArray_Get(nil_chk(tempKey), wordIndex) + tmv;
      }
      for (jint wordIndex = 0; wordIndex < self->wordsInBlock_; wordIndex++) {
        *IOSLongArray_GetRef(nil_chk(self->internalState_), wordIndex) = IOSLongArray_Get(initialData, self->wordsInBlock_ + wordIndex) + IOSLongArray_Get(tempRoundKey, wordIndex);
      }
      LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
      LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
      LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
      for (jint wordIndex = 0; wordIndex < self->wordsInBlock_; wordIndex++) {
        *IOSLongArray_GetRef(nil_chk(self->internalState_), wordIndex) ^= IOSLongArray_Get(tempRoundKey, wordIndex);
      }
      LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(self);
      LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(self);
      LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(self);
      for (jint wordIndex = 0; wordIndex < self->wordsInBlock_; wordIndex++) {
        *IOSLongArray_GetRef(nil_chk(self->internalState_), wordIndex) += IOSLongArray_Get(tempRoundKey, wordIndex);
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->internalState_, 0, IOSObjectArray_Get(nil_chk(self->roundKeys_), round), 0, self->wordsInBlock_);
      if (self->roundsAmount_ == round) {
        break;
      }
    }
    round += 2;
    JreLShiftAssignLong(&tmv, 1);
    jlong temp = IOSLongArray_Get(initialData, 0);
    for (jint i = 1; i < initialData->size_; ++i) {
      *IOSLongArray_GetRef(initialData, i - 1) = IOSLongArray_Get(initialData, i);
    }
    *IOSLongArray_GetRef(initialData, initialData->size_ - 1) = temp;
  }
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_workingKeyExpandOdd(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self) {
  for (jint roundIndex = 1; roundIndex < self->roundsAmount_; roundIndex += 2) {
    LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateLeftWithLongArray_withLongArray_(self, IOSObjectArray_Get(nil_chk(self->roundKeys_), roundIndex - 1), IOSObjectArray_Get(self->roundKeys_, roundIndex));
  }
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_decryptBlock_128WithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jlong c0 = LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(inArg, inOff);
  jlong c1 = LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(inArg, inOff + 8);
  IOSLongArray *roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), self->roundsAmount_);
  c0 -= IOSLongArray_Get(nil_chk(roundKey), 0);
  c1 -= IOSLongArray_Get(roundKey, 1);
  for (jint round = self->roundsAmount_; ; ) {
    c0 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnInvWithLong_(c0);
    c1 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnInvWithLong_(c1);
    jint lo0 = (jint) c0;
    jint hi0 = (jint) (JreURShift64(c0, 32));
    jint lo1 = (jint) c1;
    jint hi1 = (jint) (JreURShift64(c1, 32));
    {
      jbyte t0 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0), lo0 & (jint) 0xFF);
      jbyte t1 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1), (JreURShift32(lo0, 8)) & (jint) 0xFF);
      jbyte t2 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2), (JreURShift32(lo0, 16)) & (jint) 0xFF);
      jbyte t3 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3), JreURShift32(lo0, 24));
      lo0 = (t0 & (jint) 0xFF) | (JreLShift32((t1 & (jint) 0xFF), 8)) | (JreLShift32((t2 & (jint) 0xFF), 16)) | (JreLShift32((jint) t3, 24));
      jbyte t4 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0, hi1 & (jint) 0xFF);
      jbyte t5 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1, (JreURShift32(hi1, 8)) & (jint) 0xFF);
      jbyte t6 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2, (JreURShift32(hi1, 16)) & (jint) 0xFF);
      jbyte t7 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3, JreURShift32(hi1, 24));
      hi1 = (t4 & (jint) 0xFF) | (JreLShift32((t5 & (jint) 0xFF), 8)) | (JreLShift32((t6 & (jint) 0xFF), 16)) | (JreLShift32((jint) t7, 24));
      c0 = (lo0 & (jlong) 0xFFFFFFFFLL) | (JreLShift64((jlong) hi1, 32));
    }
    {
      jbyte t0 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0, lo1 & (jint) 0xFF);
      jbyte t1 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1, (JreURShift32(lo1, 8)) & (jint) 0xFF);
      jbyte t2 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2, (JreURShift32(lo1, 16)) & (jint) 0xFF);
      jbyte t3 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3, JreURShift32(lo1, 24));
      lo1 = (t0 & (jint) 0xFF) | (JreLShift32((t1 & (jint) 0xFF), 8)) | (JreLShift32((t2 & (jint) 0xFF), 16)) | (JreLShift32((jint) t3, 24));
      jbyte t4 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0, hi0 & (jint) 0xFF);
      jbyte t5 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1, (JreURShift32(hi0, 8)) & (jint) 0xFF);
      jbyte t6 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2, (JreURShift32(hi0, 16)) & (jint) 0xFF);
      jbyte t7 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3, JreURShift32(hi0, 24));
      hi0 = (t4 & (jint) 0xFF) | (JreLShift32((t5 & (jint) 0xFF), 8)) | (JreLShift32((t6 & (jint) 0xFF), 16)) | (JreLShift32((jint) t7, 24));
      c1 = (lo1 & (jlong) 0xFFFFFFFFLL) | (JreLShift64((jlong) hi0, 32));
    }
    if (--round == 0) {
      break;
    }
    roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), round);
    c0 ^= IOSLongArray_Get(nil_chk(roundKey), 0);
    c1 ^= IOSLongArray_Get(roundKey, 1);
  }
  roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), 0);
  c0 -= IOSLongArray_Get(nil_chk(roundKey), 0);
  c1 -= IOSLongArray_Get(roundKey, 1);
  LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(c0, outArg, outOff);
  LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(c1, outArg, outOff + 8);
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_encryptBlock_128WithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jlong c0 = LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(inArg, inOff);
  jlong c1 = LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(inArg, inOff + 8);
  IOSLongArray *roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), 0);
  c0 += IOSLongArray_Get(nil_chk(roundKey), 0);
  c1 += IOSLongArray_Get(roundKey, 1);
  for (jint round = 0; ; ) {
    jint lo0 = (jint) c0;
    jint hi0 = (jint) (JreURShift64(c0, 32));
    jint lo1 = (jint) c1;
    jint hi1 = (jint) (JreURShift64(c1, 32));
    {
      jbyte t0 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0), lo0 & (jint) 0xFF);
      jbyte t1 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1), (JreURShift32(lo0, 8)) & (jint) 0xFF);
      jbyte t2 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2), (JreURShift32(lo0, 16)) & (jint) 0xFF);
      jbyte t3 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3), JreURShift32(lo0, 24));
      lo0 = (t0 & (jint) 0xFF) | (JreLShift32((t1 & (jint) 0xFF), 8)) | (JreLShift32((t2 & (jint) 0xFF), 16)) | (JreLShift32((jint) t3, 24));
      jbyte t4 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0, hi1 & (jint) 0xFF);
      jbyte t5 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1, (JreURShift32(hi1, 8)) & (jint) 0xFF);
      jbyte t6 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2, (JreURShift32(hi1, 16)) & (jint) 0xFF);
      jbyte t7 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3, JreURShift32(hi1, 24));
      hi1 = (t4 & (jint) 0xFF) | (JreLShift32((t5 & (jint) 0xFF), 8)) | (JreLShift32((t6 & (jint) 0xFF), 16)) | (JreLShift32((jint) t7, 24));
      c0 = (lo0 & (jlong) 0xFFFFFFFFLL) | (JreLShift64((jlong) hi1, 32));
    }
    {
      jbyte t0 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0, lo1 & (jint) 0xFF);
      jbyte t1 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1, (JreURShift32(lo1, 8)) & (jint) 0xFF);
      jbyte t2 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2, (JreURShift32(lo1, 16)) & (jint) 0xFF);
      jbyte t3 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3, JreURShift32(lo1, 24));
      lo1 = (t0 & (jint) 0xFF) | (JreLShift32((t1 & (jint) 0xFF), 8)) | (JreLShift32((t2 & (jint) 0xFF), 16)) | (JreLShift32((jint) t3, 24));
      jbyte t4 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0, hi0 & (jint) 0xFF);
      jbyte t5 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1, (JreURShift32(hi0, 8)) & (jint) 0xFF);
      jbyte t6 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2, (JreURShift32(hi0, 16)) & (jint) 0xFF);
      jbyte t7 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3, JreURShift32(hi0, 24));
      hi0 = (t4 & (jint) 0xFF) | (JreLShift32((t5 & (jint) 0xFF), 8)) | (JreLShift32((t6 & (jint) 0xFF), 16)) | (JreLShift32((jint) t7, 24));
      c1 = (lo1 & (jlong) 0xFFFFFFFFLL) | (JreLShift64((jlong) hi0, 32));
    }
    c0 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnWithLong_(c0);
    c1 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnWithLong_(c1);
    if (++round == self->roundsAmount_) {
      break;
    }
    roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), round);
    c0 ^= IOSLongArray_Get(nil_chk(roundKey), 0);
    c1 ^= IOSLongArray_Get(roundKey, 1);
  }
  roundKey = IOSObjectArray_Get(nil_chk(self->roundKeys_), self->roundsAmount_);
  c0 += IOSLongArray_Get(nil_chk(roundKey), 0);
  c1 += IOSLongArray_Get(roundKey, 1);
  LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(c0, outArg, outOff);
  LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(c1, outArg, outOff + 8);
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_subBytes(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self) {
  for (jint i = 0; i < self->wordsInBlock_; i++) {
    jlong u = IOSLongArray_Get(nil_chk(self->internalState_), i);
    jint lo = (jint) u;
    jint hi = (jint) (JreURShift64(u, 32));
    jbyte t0 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0), lo & (jint) 0xFF);
    jbyte t1 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1), (JreURShift32(lo, 8)) & (jint) 0xFF);
    jbyte t2 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2), (JreURShift32(lo, 16)) & (jint) 0xFF);
    jbyte t3 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3), JreURShift32(lo, 24));
    lo = (t0 & (jint) 0xFF) | (JreLShift32((t1 & (jint) 0xFF), 8)) | (JreLShift32((t2 & (jint) 0xFF), 16)) | (JreLShift32((jint) t3, 24));
    jbyte t4 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S0, hi & (jint) 0xFF);
    jbyte t5 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S1, (JreURShift32(hi, 8)) & (jint) 0xFF);
    jbyte t6 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S2, (JreURShift32(hi, 16)) & (jint) 0xFF);
    jbyte t7 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_S3, JreURShift32(hi, 24));
    hi = (t4 & (jint) 0xFF) | (JreLShift32((t5 & (jint) 0xFF), 8)) | (JreLShift32((t6 & (jint) 0xFF), 16)) | (JreLShift32((jint) t7, 24));
    *IOSLongArray_GetRef(self->internalState_, i) = (lo & (jlong) 0xFFFFFFFFLL) | (JreLShift64((jlong) hi, 32));
  }
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_invSubBytes(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self) {
  for (jint i = 0; i < self->wordsInBlock_; i++) {
    jlong u = IOSLongArray_Get(nil_chk(self->internalState_), i);
    jint lo = (jint) u;
    jint hi = (jint) (JreURShift64(u, 32));
    jbyte t0 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0), lo & (jint) 0xFF);
    jbyte t1 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1), (JreURShift32(lo, 8)) & (jint) 0xFF);
    jbyte t2 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2), (JreURShift32(lo, 16)) & (jint) 0xFF);
    jbyte t3 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3), JreURShift32(lo, 24));
    lo = (t0 & (jint) 0xFF) | (JreLShift32((t1 & (jint) 0xFF), 8)) | (JreLShift32((t2 & (jint) 0xFF), 16)) | (JreLShift32((jint) t3, 24));
    jbyte t4 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T0, hi & (jint) 0xFF);
    jbyte t5 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T1, (JreURShift32(hi, 8)) & (jint) 0xFF);
    jbyte t6 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T2, (JreURShift32(hi, 16)) & (jint) 0xFF);
    jbyte t7 = IOSByteArray_Get(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_T3, JreURShift32(hi, 24));
    hi = (t4 & (jint) 0xFF) | (JreLShift32((t5 & (jint) 0xFF), 8)) | (JreLShift32((t6 & (jint) 0xFF), 16)) | (JreLShift32((jint) t7, 24));
    *IOSLongArray_GetRef(self->internalState_, i) = (lo & (jlong) 0xFFFFFFFFLL) | (JreLShift64((jlong) hi, 32));
  }
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_shiftRows(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self) {
  switch (self->wordsInBlock_) {
    case 2:
    {
      jlong c0 = IOSLongArray_Get(nil_chk(self->internalState_), 0);
      jlong c1 = IOSLongArray_Get(self->internalState_, 1);
      jlong d;
      d = (c0 ^ c1) & (jlong) 0xFFFFFFFF00000000LL;
      c0 ^= d;
      c1 ^= d;
      *IOSLongArray_GetRef(self->internalState_, 0) = c0;
      *IOSLongArray_GetRef(self->internalState_, 1) = c1;
      break;
    }
    case 4:
    {
      jlong c0 = IOSLongArray_Get(nil_chk(self->internalState_), 0);
      jlong c1 = IOSLongArray_Get(self->internalState_, 1);
      jlong c2 = IOSLongArray_Get(self->internalState_, 2);
      jlong c3 = IOSLongArray_Get(self->internalState_, 3);
      jlong d;
      d = (c0 ^ c2) & (jlong) 0xFFFFFFFF00000000LL;
      c0 ^= d;
      c2 ^= d;
      d = (c1 ^ c3) & (jlong) 0x0000FFFFFFFF0000LL;
      c1 ^= d;
      c3 ^= d;
      d = (c0 ^ c1) & (jlong) 0xFFFF0000FFFF0000LL;
      c0 ^= d;
      c1 ^= d;
      d = (c2 ^ c3) & (jlong) 0xFFFF0000FFFF0000LL;
      c2 ^= d;
      c3 ^= d;
      *IOSLongArray_GetRef(self->internalState_, 0) = c0;
      *IOSLongArray_GetRef(self->internalState_, 1) = c1;
      *IOSLongArray_GetRef(self->internalState_, 2) = c2;
      *IOSLongArray_GetRef(self->internalState_, 3) = c3;
      break;
    }
    case 8:
    {
      jlong c0 = IOSLongArray_Get(nil_chk(self->internalState_), 0);
      jlong c1 = IOSLongArray_Get(self->internalState_, 1);
      jlong c2 = IOSLongArray_Get(self->internalState_, 2);
      jlong c3 = IOSLongArray_Get(self->internalState_, 3);
      jlong c4 = IOSLongArray_Get(self->internalState_, 4);
      jlong c5 = IOSLongArray_Get(self->internalState_, 5);
      jlong c6 = IOSLongArray_Get(self->internalState_, 6);
      jlong c7 = IOSLongArray_Get(self->internalState_, 7);
      jlong d;
      d = (c0 ^ c4) & (jlong) 0xFFFFFFFF00000000LL;
      c0 ^= d;
      c4 ^= d;
      d = (c1 ^ c5) & (jlong) 0x00FFFFFFFF000000LL;
      c1 ^= d;
      c5 ^= d;
      d = (c2 ^ c6) & (jlong) 0x0000FFFFFFFF0000LL;
      c2 ^= d;
      c6 ^= d;
      d = (c3 ^ c7) & (jlong) 0x000000FFFFFFFF00LL;
      c3 ^= d;
      c7 ^= d;
      d = (c0 ^ c2) & (jlong) 0xFFFF0000FFFF0000LL;
      c0 ^= d;
      c2 ^= d;
      d = (c1 ^ c3) & (jlong) 0x00FFFF0000FFFF00LL;
      c1 ^= d;
      c3 ^= d;
      d = (c4 ^ c6) & (jlong) 0xFFFF0000FFFF0000LL;
      c4 ^= d;
      c6 ^= d;
      d = (c5 ^ c7) & (jlong) 0x00FFFF0000FFFF00LL;
      c5 ^= d;
      c7 ^= d;
      d = (c0 ^ c1) & (jlong) 0xFF00FF00FF00FF00LL;
      c0 ^= d;
      c1 ^= d;
      d = (c2 ^ c3) & (jlong) 0xFF00FF00FF00FF00LL;
      c2 ^= d;
      c3 ^= d;
      d = (c4 ^ c5) & (jlong) 0xFF00FF00FF00FF00LL;
      c4 ^= d;
      c5 ^= d;
      d = (c6 ^ c7) & (jlong) 0xFF00FF00FF00FF00LL;
      c6 ^= d;
      c7 ^= d;
      *IOSLongArray_GetRef(self->internalState_, 0) = c0;
      *IOSLongArray_GetRef(self->internalState_, 1) = c1;
      *IOSLongArray_GetRef(self->internalState_, 2) = c2;
      *IOSLongArray_GetRef(self->internalState_, 3) = c3;
      *IOSLongArray_GetRef(self->internalState_, 4) = c4;
      *IOSLongArray_GetRef(self->internalState_, 5) = c5;
      *IOSLongArray_GetRef(self->internalState_, 6) = c6;
      *IOSLongArray_GetRef(self->internalState_, 7) = c7;
      break;
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported block length: only 128/256/512 are allowed");
    }
  }
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_invShiftRows(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self) {
  switch (self->wordsInBlock_) {
    case 2:
    {
      jlong c0 = IOSLongArray_Get(nil_chk(self->internalState_), 0);
      jlong c1 = IOSLongArray_Get(self->internalState_, 1);
      jlong d;
      d = (c0 ^ c1) & (jlong) 0xFFFFFFFF00000000LL;
      c0 ^= d;
      c1 ^= d;
      *IOSLongArray_GetRef(self->internalState_, 0) = c0;
      *IOSLongArray_GetRef(self->internalState_, 1) = c1;
      break;
    }
    case 4:
    {
      jlong c0 = IOSLongArray_Get(nil_chk(self->internalState_), 0);
      jlong c1 = IOSLongArray_Get(self->internalState_, 1);
      jlong c2 = IOSLongArray_Get(self->internalState_, 2);
      jlong c3 = IOSLongArray_Get(self->internalState_, 3);
      jlong d;
      d = (c0 ^ c1) & (jlong) 0xFFFF0000FFFF0000LL;
      c0 ^= d;
      c1 ^= d;
      d = (c2 ^ c3) & (jlong) 0xFFFF0000FFFF0000LL;
      c2 ^= d;
      c3 ^= d;
      d = (c0 ^ c2) & (jlong) 0xFFFFFFFF00000000LL;
      c0 ^= d;
      c2 ^= d;
      d = (c1 ^ c3) & (jlong) 0x0000FFFFFFFF0000LL;
      c1 ^= d;
      c3 ^= d;
      *IOSLongArray_GetRef(self->internalState_, 0) = c0;
      *IOSLongArray_GetRef(self->internalState_, 1) = c1;
      *IOSLongArray_GetRef(self->internalState_, 2) = c2;
      *IOSLongArray_GetRef(self->internalState_, 3) = c3;
      break;
    }
    case 8:
    {
      jlong c0 = IOSLongArray_Get(nil_chk(self->internalState_), 0);
      jlong c1 = IOSLongArray_Get(self->internalState_, 1);
      jlong c2 = IOSLongArray_Get(self->internalState_, 2);
      jlong c3 = IOSLongArray_Get(self->internalState_, 3);
      jlong c4 = IOSLongArray_Get(self->internalState_, 4);
      jlong c5 = IOSLongArray_Get(self->internalState_, 5);
      jlong c6 = IOSLongArray_Get(self->internalState_, 6);
      jlong c7 = IOSLongArray_Get(self->internalState_, 7);
      jlong d;
      d = (c0 ^ c1) & (jlong) 0xFF00FF00FF00FF00LL;
      c0 ^= d;
      c1 ^= d;
      d = (c2 ^ c3) & (jlong) 0xFF00FF00FF00FF00LL;
      c2 ^= d;
      c3 ^= d;
      d = (c4 ^ c5) & (jlong) 0xFF00FF00FF00FF00LL;
      c4 ^= d;
      c5 ^= d;
      d = (c6 ^ c7) & (jlong) 0xFF00FF00FF00FF00LL;
      c6 ^= d;
      c7 ^= d;
      d = (c0 ^ c2) & (jlong) 0xFFFF0000FFFF0000LL;
      c0 ^= d;
      c2 ^= d;
      d = (c1 ^ c3) & (jlong) 0x00FFFF0000FFFF00LL;
      c1 ^= d;
      c3 ^= d;
      d = (c4 ^ c6) & (jlong) 0xFFFF0000FFFF0000LL;
      c4 ^= d;
      c6 ^= d;
      d = (c5 ^ c7) & (jlong) 0x00FFFF0000FFFF00LL;
      c5 ^= d;
      c7 ^= d;
      d = (c0 ^ c4) & (jlong) 0xFFFFFFFF00000000LL;
      c0 ^= d;
      c4 ^= d;
      d = (c1 ^ c5) & (jlong) 0x00FFFFFFFF000000LL;
      c1 ^= d;
      c5 ^= d;
      d = (c2 ^ c6) & (jlong) 0x0000FFFFFFFF0000LL;
      c2 ^= d;
      c6 ^= d;
      d = (c3 ^ c7) & (jlong) 0x000000FFFFFFFF00LL;
      c3 ^= d;
      c7 ^= d;
      *IOSLongArray_GetRef(self->internalState_, 0) = c0;
      *IOSLongArray_GetRef(self->internalState_, 1) = c1;
      *IOSLongArray_GetRef(self->internalState_, 2) = c2;
      *IOSLongArray_GetRef(self->internalState_, 3) = c3;
      *IOSLongArray_GetRef(self->internalState_, 4) = c4;
      *IOSLongArray_GetRef(self->internalState_, 5) = c5;
      *IOSLongArray_GetRef(self->internalState_, 6) = c6;
      *IOSLongArray_GetRef(self->internalState_, 7) = c7;
      break;
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported block length: only 128/256/512 are allowed");
    }
  }
}

jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnWithLong_(jlong c) {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initialize();
  jlong x1 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(c);
  jlong u;
  jlong v;
  u = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(8, c) ^ c;
  u ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(16, u);
  u ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(48, c);
  v = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulX2WithLong_(u ^ c ^ x1);
  return u ^ LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(32, v) ^ LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(40, x1) ^ LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(48, x1);
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumns(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self) {
  for (jint col = 0; col < self->wordsInBlock_; ++col) {
    *IOSLongArray_GetRef(nil_chk(self->internalState_), col) = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnWithLong_(IOSLongArray_Get(self->internalState_, col));
  }
}

jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnInvWithLong_(jlong c) {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initialize();
  jlong u0 = c;
  u0 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(8, u0);
  u0 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(32, u0);
  u0 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(48, c);
  jlong t = u0 ^ c;
  jlong c48 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(48, c);
  jlong c56 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(56, c);
  jlong u7 = t ^ c56;
  jlong u6 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(56, t);
  u6 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(u7);
  jlong u5 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(16, t) ^ c;
  u5 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(40, LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(u6) ^ c);
  jlong u4 = t ^ c48;
  u4 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(u5);
  jlong u3 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(16, u0);
  u3 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(u4);
  jlong u2 = t ^ LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(24, c) ^ c48 ^ c56;
  u2 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(u3);
  jlong u1 = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(32, t) ^ c ^ c56;
  u1 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(u2);
  u0 ^= LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(40, u1));
  return u0;
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnsInv(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self) {
  for (jint col = 0; col < self->wordsInBlock_; ++col) {
    *IOSLongArray_GetRef(nil_chk(self->internalState_), col) = LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mixColumnInvWithLong_(IOSLongArray_Get(self->internalState_, col));
  }
}

jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulXWithLong_(jlong n) {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initialize();
  return (JreLShift64((n & (jlong) 0x7F7F7F7F7F7F7F7FLL), 1)) ^ ((JreURShift64((n & (jlong) 0x8080808080808080LL), 7)) * (jlong) 0x1DLL);
}

jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_mulX2WithLong_(jlong n) {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initialize();
  return (JreLShift64((n & (jlong) 0x3F3F3F3F3F3F3F3FLL), 2)) ^ ((JreURShift64((n & (jlong) 0x8080808080808080LL), 6)) * (jlong) 0x1DLL) ^ ((JreURShift64((n & (jlong) 0x4040404040404040LL), 6)) * (jlong) 0x1DLL);
}

jlong LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateWithInt_withLong_(jint n, jlong x) {
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initialize();
  return (JreURShift64(x, n)) | (JreLShift64(x, -n));
}

void LibOrgBouncycastleCryptoEnginesDSTU7624Engine_rotateLeftWithLongArray_withLongArray_(LibOrgBouncycastleCryptoEnginesDSTU7624Engine *self, IOSLongArray *x, IOSLongArray *z) {
  switch (self->wordsInBlock_) {
    case 2:
    {
      jlong x0 = IOSLongArray_Get(nil_chk(x), 0);
      jlong x1 = IOSLongArray_Get(x, 1);
      *IOSLongArray_GetRef(nil_chk(z), 0) = (JreURShift64(x0, 56)) | (JreLShift64(x1, 8));
      *IOSLongArray_GetRef(z, 1) = (JreURShift64(x1, 56)) | (JreLShift64(x0, 8));
      break;
    }
    case 4:
    {
      jlong x0 = IOSLongArray_Get(nil_chk(x), 0);
      jlong x1 = IOSLongArray_Get(x, 1);
      jlong x2 = IOSLongArray_Get(x, 2);
      jlong x3 = IOSLongArray_Get(x, 3);
      *IOSLongArray_GetRef(nil_chk(z), 0) = (JreURShift64(x1, 24)) | (JreLShift64(x2, 40));
      *IOSLongArray_GetRef(z, 1) = (JreURShift64(x2, 24)) | (JreLShift64(x3, 40));
      *IOSLongArray_GetRef(z, 2) = (JreURShift64(x3, 24)) | (JreLShift64(x0, 40));
      *IOSLongArray_GetRef(z, 3) = (JreURShift64(x0, 24)) | (JreLShift64(x1, 40));
      break;
    }
    case 8:
    {
      jlong x0 = IOSLongArray_Get(nil_chk(x), 0);
      jlong x1 = IOSLongArray_Get(x, 1);
      jlong x2 = IOSLongArray_Get(x, 2);
      jlong x3 = IOSLongArray_Get(x, 3);
      jlong x4 = IOSLongArray_Get(x, 4);
      jlong x5 = IOSLongArray_Get(x, 5);
      jlong x6 = IOSLongArray_Get(x, 6);
      jlong x7 = IOSLongArray_Get(x, 7);
      *IOSLongArray_GetRef(nil_chk(z), 0) = (JreURShift64(x2, 24)) | (JreLShift64(x3, 40));
      *IOSLongArray_GetRef(z, 1) = (JreURShift64(x3, 24)) | (JreLShift64(x4, 40));
      *IOSLongArray_GetRef(z, 2) = (JreURShift64(x4, 24)) | (JreLShift64(x5, 40));
      *IOSLongArray_GetRef(z, 3) = (JreURShift64(x5, 24)) | (JreLShift64(x6, 40));
      *IOSLongArray_GetRef(z, 4) = (JreURShift64(x6, 24)) | (JreLShift64(x7, 40));
      *IOSLongArray_GetRef(z, 5) = (JreURShift64(x7, 24)) | (JreLShift64(x0, 40));
      *IOSLongArray_GetRef(z, 6) = (JreURShift64(x0, 24)) | (JreLShift64(x1, 40));
      *IOSLongArray_GetRef(z, 7) = (JreURShift64(x1, 24)) | (JreLShift64(x2, 40));
      break;
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported block length: only 128/256/512 are allowed");
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesDSTU7624Engine)
