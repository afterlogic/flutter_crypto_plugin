//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/SignatureSubpacket.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SignatureSubpacket.h"
#include "java/io/OutputStream.h"

@implementation LibOrgBouncycastleBcpgSignatureSubpacket

- (instancetype)initWithInt:(jint)type
                withBoolean:(jboolean)critical
                withBoolean:(jboolean)isLongLength
              withByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, type, critical, isLongLength, data);
  return self;
}

- (jint)getType {
  return type_;
}

- (jboolean)isCritical {
  return critical_;
}

- (jboolean)isLongLength {
  return isLongLength_;
}

- (IOSByteArray *)getData {
  return data_;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  jint bodyLen = ((IOSByteArray *) nil_chk(data_))->size_ + 1;
  if (isLongLength_) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jint) 0xff];
    [outArg writeWithInt:(jbyte) (JreRShift32(bodyLen, 24))];
    [outArg writeWithInt:(jbyte) (JreRShift32(bodyLen, 16))];
    [outArg writeWithInt:(jbyte) (JreRShift32(bodyLen, 8))];
    [outArg writeWithInt:(jbyte) bodyLen];
  }
  else {
    if (bodyLen < 192) {
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) bodyLen];
    }
    else if (bodyLen <= 8383) {
      bodyLen -= 192;
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) (((JreRShift32(bodyLen, 8)) & (jint) 0xff) + 192)];
      [outArg writeWithInt:(jbyte) bodyLen];
    }
    else {
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jint) 0xff];
      [outArg writeWithInt:(jbyte) (JreRShift32(bodyLen, 24))];
      [outArg writeWithInt:(jbyte) (JreRShift32(bodyLen, 16))];
      [outArg writeWithInt:(jbyte) (JreRShift32(bodyLen, 8))];
      [outArg writeWithInt:(jbyte) bodyLen];
    }
  }
  if (critical_) {
    [outArg writeWithInt:(jint) 0x80 | type_];
  }
  else {
    [outArg writeWithInt:type_];
  }
  [outArg writeWithByteArray:data_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withBoolean:withBoolean:withByteArray:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(isCritical);
  methods[3].selector = @selector(isLongLength);
  methods[4].selector = @selector(getData);
  methods[5].selector = @selector(encodeWithJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "critical_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isLongLength_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IZZ[B", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgSignatureSubpacket = { "SignatureSubpacket", "lib.org.bouncycastle.bcpg", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgSignatureSubpacket;
}

@end

void LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(LibOrgBouncycastleBcpgSignatureSubpacket *self, jint type, jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  NSObject_init(self);
  self->type_ = type;
  self->critical_ = critical;
  self->isLongLength_ = isLongLength;
  self->data_ = data;
}

LibOrgBouncycastleBcpgSignatureSubpacket *new_LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(jint type, jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSignatureSubpacket, initWithInt_withBoolean_withBoolean_withByteArray_, type, critical, isLongLength, data)
}

LibOrgBouncycastleBcpgSignatureSubpacket *create_LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(jint type, jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSignatureSubpacket, initWithInt_withBoolean_withBoolean_withByteArray_, type, critical, isLongLength, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgSignatureSubpacket)
