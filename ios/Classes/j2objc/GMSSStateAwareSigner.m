//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/gmss/GMSSStateAwareSigner.java
//

#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "GMSSDigestProvider.h"
#include "GMSSPrivateKeyParameters.h"
#include "GMSSSigner.h"
#include "GMSSStateAwareSigner.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Memoable.h"
#include "ParametersWithRandom.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@interface LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner () {
 @public
  LibOrgBouncycastlePqcCryptoGmssGMSSSigner *gmssSigner_;
  LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters *key_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner, gmssSigner_, LibOrgBouncycastlePqcCryptoGmssGMSSSigner *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner, key_, LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters *)

@interface LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1 : NSObject < LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider > {
 @public
  id<LibOrgBouncycastleUtilMemoable> val$dig_;
}

- (instancetype)initWithLibOrgBouncycastleUtilMemoable:(id<LibOrgBouncycastleUtilMemoable>)capture$0;

- (id<LibOrgBouncycastleCryptoDigest>)get;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1_initWithLibOrgBouncycastleUtilMemoable_(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1 *self, id<LibOrgBouncycastleUtilMemoable> capture$0);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1 *new_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1_initWithLibOrgBouncycastleUtilMemoable_(id<LibOrgBouncycastleUtilMemoable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1 *create_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1_initWithLibOrgBouncycastleUtilMemoable_(id<LibOrgBouncycastleUtilMemoable> capture$0);

@implementation LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if (forSigning) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->key_ = (LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters class]);
    }
    else {
      self->key_ = (LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters class]);
    }
  }
  [((LibOrgBouncycastlePqcCryptoGmssGMSSSigner *) nil_chk(gmssSigner_)) init__WithBoolean:forSigning withLibOrgBouncycastleCryptoCipherParameters:param];
}

- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  if (key_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"signing key no longer usable");
  }
  IOSByteArray *sig = [((LibOrgBouncycastlePqcCryptoGmssGMSSSigner *) nil_chk(gmssSigner_)) generateSignatureWithByteArray:message];
  key_ = [((LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters *) nil_chk(key_)) nextKey];
  return sig;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  return [((LibOrgBouncycastlePqcCryptoGmssGMSSSigner *) nil_chk(gmssSigner_)) verifySignatureWithByteArray:message withByteArray:signature];
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getUpdatedPrivateKey {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *k = key_;
  key_ = nil;
  return k;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[4].selector = @selector(getUpdatedPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gmssSigner_", "LLibOrgBouncycastlePqcCryptoGmssGMSSSigner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner = { "GMSSStateAwareSigner", "lib.org.bouncycastle.pqc.crypto.gmss", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner;
}

@end

void LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  if (!([LibOrgBouncycastleUtilMemoable_class_() isInstance:digest])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"digest must implement Memoable");
  }
  id<LibOrgBouncycastleUtilMemoable> dig = [((id<LibOrgBouncycastleUtilMemoable>) nil_chk(((id<LibOrgBouncycastleUtilMemoable>) cast_check(digest, LibOrgBouncycastleUtilMemoable_class_())))) copy__];
  self->gmssSigner_ = new_LibOrgBouncycastlePqcCryptoGmssGMSSSigner_initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(new_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1_initWithLibOrgBouncycastleUtilMemoable_(dig));
}

LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner *new_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner *create_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner)

@implementation LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1

- (instancetype)initWithLibOrgBouncycastleUtilMemoable:(id<LibOrgBouncycastleUtilMemoable>)capture$0 {
  LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1_initWithLibOrgBouncycastleUtilMemoable_(self, capture$0);
  return self;
}

- (id<LibOrgBouncycastleCryptoDigest>)get {
  return (id<LibOrgBouncycastleCryptoDigest>) cast_check([((id<LibOrgBouncycastleUtilMemoable>) nil_chk(val$dig_)) copy__], LibOrgBouncycastleCryptoDigest_class_());
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleUtilMemoable:);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$dig_", "LLibOrgBouncycastleUtilMemoable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner;", "initWithLibOrgBouncycastleCryptoDigest:" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1 = { "", "lib.org.bouncycastle.pqc.crypto.gmss", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1;
}

@end

void LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1_initWithLibOrgBouncycastleUtilMemoable_(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1 *self, id<LibOrgBouncycastleUtilMemoable> capture$0) {
  self->val$dig_ = capture$0;
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1 *new_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1_initWithLibOrgBouncycastleUtilMemoable_(id<LibOrgBouncycastleUtilMemoable> capture$0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1, initWithLibOrgBouncycastleUtilMemoable_, capture$0)
}

LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1 *create_LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1_initWithLibOrgBouncycastleUtilMemoable_(id<LibOrgBouncycastleUtilMemoable> capture$0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoGmssGMSSStateAwareSigner_1, initWithLibOrgBouncycastleUtilMemoable_, capture$0)
}
