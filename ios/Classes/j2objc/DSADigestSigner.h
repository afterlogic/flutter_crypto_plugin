//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/DSADigestSigner.java
//

#ifndef DSADigestSigner_H
#define DSADigestSigner_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Signer.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoDSA;
@protocol LibOrgBouncycastleCryptoDSAExt;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoSignersDSAEncoding;

@interface LibOrgBouncycastleCryptoSignersDSADigestSigner : NSObject < LibOrgBouncycastleCryptoSigner >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDSA:(id<LibOrgBouncycastleCryptoDSA>)dsa
                           withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDSAExt:(id<LibOrgBouncycastleCryptoDSAExt>)dsa
                              withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                  withLibOrgBouncycastleCryptoSignersDSAEncoding:(id<LibOrgBouncycastleCryptoSignersDSAEncoding>)encoding;

- (IOSByteArray *)generateSignature;

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)input;

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)length;

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature;

#pragma mark Protected

- (JavaMathBigInteger *)getOrder;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoSignersDSADigestSigner)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoSignersDSADigestSigner *self, id<LibOrgBouncycastleCryptoDSA> dsa, id<LibOrgBouncycastleCryptoDigest> digest);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersDSADigestSigner *new_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDSA> dsa, id<LibOrgBouncycastleCryptoDigest> digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersDSADigestSigner *create_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDSA> dsa, id<LibOrgBouncycastleCryptoDigest> digest);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_(LibOrgBouncycastleCryptoSignersDSADigestSigner *self, id<LibOrgBouncycastleCryptoDSAExt> dsa, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersDSADigestSigner *new_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_(id<LibOrgBouncycastleCryptoDSAExt> dsa, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersDSADigestSigner *create_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_(id<LibOrgBouncycastleCryptoDSAExt> dsa, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoSignersDSADigestSigner)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DSADigestSigner_H
