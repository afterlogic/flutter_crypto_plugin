//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/HandshakeType.java
//

#ifndef HandshakeType_H
#define HandshakeType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsHandshakeType : NSObject
@property (readonly, class) jshort hello_request NS_SWIFT_NAME(hello_request);
@property (readonly, class) jshort client_hello NS_SWIFT_NAME(client_hello);
@property (readonly, class) jshort server_hello NS_SWIFT_NAME(server_hello);
@property (readonly, class) jshort certificate NS_SWIFT_NAME(certificate);
@property (readonly, class) jshort server_key_exchange NS_SWIFT_NAME(server_key_exchange);
@property (readonly, class) jshort certificate_request NS_SWIFT_NAME(certificate_request);
@property (readonly, class) jshort server_hello_done NS_SWIFT_NAME(server_hello_done);
@property (readonly, class) jshort certificate_verify NS_SWIFT_NAME(certificate_verify);
@property (readonly, class) jshort client_key_exchange NS_SWIFT_NAME(client_key_exchange);
@property (readonly, class) jshort finished NS_SWIFT_NAME(finished);
@property (readonly, class) jshort certificate_url NS_SWIFT_NAME(certificate_url);
@property (readonly, class) jshort certificate_status NS_SWIFT_NAME(certificate_status);
@property (readonly, class) jshort hello_verify_request NS_SWIFT_NAME(hello_verify_request);
@property (readonly, class) jshort supplemental_data NS_SWIFT_NAME(supplemental_data);
@property (readonly, class) jshort session_ticket NS_SWIFT_NAME(session_ticket);

+ (jshort)hello_request;

+ (jshort)client_hello;

+ (jshort)server_hello;

+ (jshort)certificate;

+ (jshort)server_key_exchange;

+ (jshort)certificate_request;

+ (jshort)server_hello_done;

+ (jshort)certificate_verify;

+ (jshort)client_key_exchange;

+ (jshort)finished;

+ (jshort)certificate_url;

+ (jshort)certificate_status;

+ (jshort)hello_verify_request;

+ (jshort)supplemental_data;

+ (jshort)session_ticket;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsHandshakeType)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_hello_request(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_hello_request 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, hello_request, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_client_hello(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_client_hello 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, client_hello, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_server_hello(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_server_hello 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, server_hello, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_certificate(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_certificate 11
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, certificate, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_server_key_exchange(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_server_key_exchange 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, server_key_exchange, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_certificate_request(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_certificate_request 13
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, certificate_request, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_server_hello_done(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_server_hello_done 14
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, server_hello_done, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_certificate_verify(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_certificate_verify 15
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, certificate_verify, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_client_key_exchange(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_client_key_exchange 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, client_key_exchange, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_finished(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_finished 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, finished, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_certificate_url(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_certificate_url 21
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, certificate_url, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_certificate_status(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_certificate_status 22
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, certificate_status, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_hello_verify_request(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_hello_verify_request 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, hello_verify_request, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_supplemental_data(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_supplemental_data 23
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, supplemental_data, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHandshakeType_get_session_ticket(void);
#define LibOrgBouncycastleCryptoTlsHandshakeType_session_ticket 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHandshakeType, session_ticket, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsHandshakeType_init(LibOrgBouncycastleCryptoTlsHandshakeType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsHandshakeType *new_LibOrgBouncycastleCryptoTlsHandshakeType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsHandshakeType *create_LibOrgBouncycastleCryptoTlsHandshakeType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsHandshakeType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // HandshakeType_H
