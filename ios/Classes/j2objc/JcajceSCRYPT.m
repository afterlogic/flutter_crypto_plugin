//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/JcajceSCRYPT.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmProvider.h"
#include "BCPBEKey.h"
#include "BaseSecretKeyFactory.h"
#include "CipherParameters.h"
#include "ConfigurableProvider.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceSCRYPT.h"
#include "KeyParameter.h"
#include "MiscObjectIdentifiers.h"
#include "PBE.h"
#include "PasswordConverter.h"
#include "SCrypt.h"
#include "ScryptKeySpec.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"
#include "javax/crypto/SecretKey.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_init(void);

@interface LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 () {
 @public
  jint scheme_;
}

@end

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2;LLibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8;LLibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT = { "JcajceSCRYPT", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT, init)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)scheme {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2_initWithNSString_withInt_(self, name, scheme);
  return self;
}

- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJcajceSpecScryptKeySpec class]]) {
    LibOrgBouncycastleJcajceSpecScryptKeySpec *pbeSpec = (LibOrgBouncycastleJcajceSpecScryptKeySpec *) keySpec;
    if ([((LibOrgBouncycastleJcajceSpecScryptKeySpec *) nil_chk(pbeSpec)) getSalt] == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Salt S must be provided.");
    }
    if ([pbeSpec getCostParameter] <= 1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cost parameter N must be > 1.");
    }
    if ([pbeSpec getKeyLength] <= 0) {
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$I", @"positive key length required: ", [pbeSpec getKeyLength]));
    }
    if (((IOSCharArray *) nil_chk([pbeSpec getPassword]))->size_ == 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"password empty");
    }
    id<LibOrgBouncycastleCryptoCipherParameters> param = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(LibOrgBouncycastleCryptoGeneratorsSCrypt_generateWithByteArray_withByteArray_withInt_withInt_withInt_withInt_([((LibOrgBouncycastleCryptoPasswordConverter *) nil_chk(JreLoadEnum(LibOrgBouncycastleCryptoPasswordConverter, UTF8))) convertWithCharArray:[pbeSpec getPassword]], [pbeSpec getSalt], [pbeSpec getCostParameter], [pbeSpec getBlockSize], [pbeSpec getParallelizationParameter], [pbeSpec getKeyLength] / 8));
    return new_LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withJavaSecuritySpecKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(self->algName_, pbeSpec, param);
  }
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Invalid KeySpec");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKey;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:);
  methods[1].selector = @selector(engineGenerateSecretWithJavaSecuritySpecKeySpec:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheme_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "engineGenerateSecret", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;", "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 = { "BasePBKDF2", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2_initWithNSString_withInt_(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 *self, NSString *name, jint scheme) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseSecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, name, JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt));
  self->scheme_ = scheme;
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2_initWithNSString_withInt_(NSString *name, jint scheme) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2, initWithNSString_withInt_, name, scheme)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2_initWithNSString_withInt_(NSString *name, jint scheme) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2, initWithNSString_withInt_, name, scheme)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8 = { "ScryptWithUTF8", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2_initWithNSString_withInt_(self, @"SCRYPT", LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_PKCS5S2_UTF8);
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8 *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8, init)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8 *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"SecretKeyFactory.SCRYPT" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_PREFIX, @"$ScryptWithUTF8")];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt) withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_PREFIX, @"$ScryptWithUTF8")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings)
