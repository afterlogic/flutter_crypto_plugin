//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/test/TestRandomBigInteger.java
//

#ifndef TestRandomBigInteger_H
#define TestRandomBigInteger_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "UtilTestFixedSecureRandom.h"

@class IOSByteArray;
@class IOSObjectArray;

@interface LibOrgBouncycastleUtilTestTestRandomBigInteger : LibOrgBouncycastleUtilTestUtilTestFixedSecureRandom

#pragma mark Public

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)encoding;

- (instancetype __nonnull)initWithInt:(jint)bitLength
                        withByteArray:(IOSByteArray *)encoding;

- (instancetype __nonnull)initWithNSString:(NSString *)encoding;

- (instancetype __nonnull)initWithNSString:(NSString *)encoding
                                   withInt:(jint)radix;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithByteArray2:(IOSObjectArray *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleUtilTestUtilTestFixedSecureRandom_SourceArray:(IOSObjectArray *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleUtilTestTestRandomBigInteger)

FOUNDATION_EXPORT void LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithNSString_(LibOrgBouncycastleUtilTestTestRandomBigInteger *self, NSString *encoding);

FOUNDATION_EXPORT LibOrgBouncycastleUtilTestTestRandomBigInteger *new_LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithNSString_(NSString *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilTestTestRandomBigInteger *create_LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithNSString_(NSString *encoding);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithNSString_withInt_(LibOrgBouncycastleUtilTestTestRandomBigInteger *self, NSString *encoding, jint radix);

FOUNDATION_EXPORT LibOrgBouncycastleUtilTestTestRandomBigInteger *new_LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithNSString_withInt_(NSString *encoding, jint radix) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilTestTestRandomBigInteger *create_LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithNSString_withInt_(NSString *encoding, jint radix);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithByteArray_(LibOrgBouncycastleUtilTestTestRandomBigInteger *self, IOSByteArray *encoding);

FOUNDATION_EXPORT LibOrgBouncycastleUtilTestTestRandomBigInteger *new_LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithByteArray_(IOSByteArray *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilTestTestRandomBigInteger *create_LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithByteArray_(IOSByteArray *encoding);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithInt_withByteArray_(LibOrgBouncycastleUtilTestTestRandomBigInteger *self, jint bitLength, IOSByteArray *encoding);

FOUNDATION_EXPORT LibOrgBouncycastleUtilTestTestRandomBigInteger *new_LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithInt_withByteArray_(jint bitLength, IOSByteArray *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilTestTestRandomBigInteger *create_LibOrgBouncycastleUtilTestTestRandomBigInteger_initWithInt_withByteArray_(jint bitLength, IOSByteArray *encoding);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilTestTestRandomBigInteger)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TestRandomBigInteger_H
