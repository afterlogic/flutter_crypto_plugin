//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPUserAttributeSubpacketVector.java
//

#include "IOSObjectArray.h"
#include "ImageAttribute.h"
#include "J2ObjC_source.h"
#include "PGPUserAttributeSubpacketVector.h"
#include "UserAttributeSubpacket.h"
#include "UserAttributeSubpacketTags.h"

@implementation LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector

- (instancetype)initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray:(IOSObjectArray *)packets {
  LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray_(self, packets);
  return self;
}

- (LibOrgBouncycastleBcpgUserAttributeSubpacket *)getSubpacketWithInt:(jint)type {
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(packets_))->size_; i++) {
    if ([((LibOrgBouncycastleBcpgUserAttributeSubpacket *) nil_chk(IOSObjectArray_Get(packets_, i))) getType] == type) {
      return IOSObjectArray_Get(nil_chk(packets_), i);
    }
  }
  return nil;
}

- (LibOrgBouncycastleBcpgAttrImageAttribute *)getImageAttribute {
  LibOrgBouncycastleBcpgUserAttributeSubpacket *p = [self getSubpacketWithInt:LibOrgBouncycastleBcpgUserAttributeSubpacketTags_IMAGE_ATTRIBUTE];
  if (p == nil) {
    return nil;
  }
  return (LibOrgBouncycastleBcpgAttrImageAttribute *) cast_chk(p, [LibOrgBouncycastleBcpgAttrImageAttribute class]);
}

- (IOSObjectArray *)toSubpacketArray {
  return packets_;
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if ([o isKindOfClass:[LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector class]]) {
    LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *other = (LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *) o;
    if (((IOSObjectArray *) nil_chk(((LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *) nil_chk(other))->packets_))->size_ != packets_->size_) {
      return false;
    }
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(packets_))->size_; i++) {
      if (![((LibOrgBouncycastleBcpgUserAttributeSubpacket *) nil_chk(IOSObjectArray_Get(other->packets_, i))) isEqual:IOSObjectArray_Get(packets_, i)]) {
        return false;
      }
    }
    return true;
  }
  return false;
}

- (NSUInteger)hash {
  jint code = 0;
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(packets_))->size_; i++) {
    code ^= ((jint) [((LibOrgBouncycastleBcpgUserAttributeSubpacket *) nil_chk(IOSObjectArray_Get(packets_, i))) hash]);
  }
  return code;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgUserAttributeSubpacket;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgAttrImageAttribute;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleBcpgUserAttributeSubpacket;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray:);
  methods[1].selector = @selector(getSubpacketWithInt:);
  methods[2].selector = @selector(getImageAttribute);
  methods[3].selector = @selector(toSubpacketArray);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "packets_", "[LLibOrgBouncycastleBcpgUserAttributeSubpacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LLibOrgBouncycastleBcpgUserAttributeSubpacket;", "getSubpacket", "I", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector = { "PGPUserAttributeSubpacketVector", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector;
}

@end

void LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray_(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *self, IOSObjectArray *packets) {
  NSObject_init(self);
  self->packets_ = packets;
}

LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *new_LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray_(IOSObjectArray *packets) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector, initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray_, packets)
}

LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *create_LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray_(IOSObjectArray *packets) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector, initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray_, packets)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector)
