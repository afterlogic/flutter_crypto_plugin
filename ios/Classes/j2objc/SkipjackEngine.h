//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/SkipjackEngine.java
//

#ifndef SkipjackEngine_H
#define SkipjackEngine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BlockCipher.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSShortArray;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoEnginesSkipjackEngine : NSObject < LibOrgBouncycastleCryptoBlockCipher >
@property (readonly, class) jint BLOCK_SIZE NS_SWIFT_NAME(BLOCK_SIZE);
@property (class) IOSShortArray *ftable NS_SWIFT_NAME(ftable);

+ (jint)BLOCK_SIZE;

+ (IOSShortArray *)ftable;

+ (void)setFtable:(IOSShortArray *)value;

#pragma mark Public

- (instancetype __nonnull)init;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (void)init__WithBoolean:(jboolean)encrypting
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoEnginesSkipjackEngine)

inline jint LibOrgBouncycastleCryptoEnginesSkipjackEngine_get_BLOCK_SIZE(void);
#define LibOrgBouncycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesSkipjackEngine, BLOCK_SIZE, jint)

inline IOSShortArray *LibOrgBouncycastleCryptoEnginesSkipjackEngine_get_ftable(void);
inline IOSShortArray *LibOrgBouncycastleCryptoEnginesSkipjackEngine_set_ftable(IOSShortArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleCryptoEnginesSkipjackEngine_ftable;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesSkipjackEngine, ftable, IOSShortArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesSkipjackEngine_init(LibOrgBouncycastleCryptoEnginesSkipjackEngine *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSkipjackEngine *new_LibOrgBouncycastleCryptoEnginesSkipjackEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSkipjackEngine *create_LibOrgBouncycastleCryptoEnginesSkipjackEngine_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesSkipjackEngine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SkipjackEngine_H
