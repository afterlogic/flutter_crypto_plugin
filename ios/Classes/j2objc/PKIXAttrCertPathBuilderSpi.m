//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/PKIXAttrCertPathBuilderSpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AnnotatedException.h"
#include "AttributeCertificateIssuer.h"
#include "BouncyCastleProvider.h"
#include "ExtCertPathBuilderException.h"
#include "ExtendedPKIXBuilderParameters.h"
#include "ExtendedPKIXParameters.h"
#include "Extension.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JceProviderCertPathValidatorUtilities.h"
#include "PKIXAttrCertPathBuilderSpi.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "Selector.h"
#include "Store.h"
#include "StoreException.h"
#include "X509AttributeCertStoreSelector.h"
#include "X509AttributeCertificate.h"
#include "X509CertStoreSelector.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/Principal.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathBuilderException.h"
#include "java/security/cert/CertPathBuilderResult.h"
#include "java/security/cert/CertPathBuilderSpi.h"
#include "java/security/cert/CertPathParameters.h"
#include "java/security/cert/CertPathValidator.h"
#include "java/security/cert/CertPathValidatorResult.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/PKIXBuilderParameters.h"
#include "java/security/cert/PKIXCertPathBuilderResult.h"
#include "java/security/cert/PKIXCertPathValidatorResult.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi () {
 @public
  JavaLangException *certPathException_;
}

- (id<JavaSecurityCertCertPathBuilderResult>)buildWithLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
                                                                 withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)tbvCert
                                           withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters:(LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *)pkixParams
                                                                                    withJavaUtilList:(id<JavaUtilList>)tbvPath;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi, certPathException_, JavaLangException *)

__attribute__((unused)) static id<JavaSecurityCertCertPathBuilderResult> LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithLibOrgBouncycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi *self, id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, JavaSecurityCertX509Certificate *tbvCert, LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *pkixParams, id<JavaUtilList> tbvPath);

@implementation LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaSecurityCertCertPathBuilderResult>)engineBuildWithJavaSecurityCertCertPathParameters:(id<JavaSecurityCertCertPathParameters>)params {
  if (!([params isKindOfClass:[JavaSecurityCertPKIXBuilderParameters class]]) && !([params isKindOfClass:[LibOrgBouncycastleX509ExtendedPKIXBuilderParameters class]]) && !([params isKindOfClass:[LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$$C", @"Parameters must be an instance of ", [JavaSecurityCertPKIXBuilderParameters_class_() getName], @" or ", [LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_class_() getName], '.'));
  }
  id<JavaUtilList> targetStores = new_JavaUtilArrayList_init();
  LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *paramsPKIX;
  if ([params isKindOfClass:[JavaSecurityCertPKIXBuilderParameters class]]) {
    LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_Builder *paramsPKIXBldr = new_LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithJavaSecurityCertPKIXBuilderParameters_((JavaSecurityCertPKIXBuilderParameters *) params);
    if ([params isKindOfClass:[LibOrgBouncycastleX509ExtendedPKIXParameters class]]) {
      LibOrgBouncycastleX509ExtendedPKIXBuilderParameters *extPKIX = (LibOrgBouncycastleX509ExtendedPKIXBuilderParameters *) cast_chk(params, [LibOrgBouncycastleX509ExtendedPKIXBuilderParameters class]);
      (void) [paramsPKIXBldr addExcludedCertsWithJavaUtilSet:[((LibOrgBouncycastleX509ExtendedPKIXBuilderParameters *) nil_chk(extPKIX)) getExcludedCerts]];
      (void) [paramsPKIXBldr setMaxPathLengthWithInt:[extPKIX getMaxPathLength]];
      targetStores = [extPKIX getStores];
    }
    paramsPKIX = [paramsPKIXBldr build];
  }
  else {
    paramsPKIX = (LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *) cast_chk(params, [LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters class]);
  }
  id<JavaUtilCollection> targets;
  id<JavaUtilIterator> targetIter;
  id<JavaUtilList> certPathList = new_JavaUtilArrayList_init();
  id<LibOrgBouncycastleX509X509AttributeCertificate> cert;
  id<LibOrgBouncycastleUtilSelector> certSelect = [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([((LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(paramsPKIX)) getBaseParameters])) getTargetConstraints];
  if (!([certSelect isKindOfClass:[LibOrgBouncycastleX509X509AttributeCertStoreSelector class]])) {
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(JreStrcat("$$$$$", @"TargetConstraints must be an instance of ", [LibOrgBouncycastleX509X509AttributeCertStoreSelector_class_() getName], @" for ", [[self java_getClass] getName], @" class."));
  }
  @try {
    targets = LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector_withJavaUtilList_((LibOrgBouncycastleX509X509AttributeCertStoreSelector *) cast_chk(certSelect, [LibOrgBouncycastleX509X509AttributeCertStoreSelector class]), targetStores);
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(@"Error finding target attribute certificate.", e);
  }
  if ([((id<JavaUtilCollection>) nil_chk(targets)) isEmpty]) {
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(@"No attribute certificate found matching targetContraints.");
  }
  id<JavaSecurityCertCertPathBuilderResult> result = nil;
  targetIter = [targets iterator];
  while ([((id<JavaUtilIterator>) nil_chk(targetIter)) hasNext] && result == nil) {
    cert = (id<LibOrgBouncycastleX509X509AttributeCertificate>) cast_check([targetIter next], LibOrgBouncycastleX509X509AttributeCertificate_class_());
    LibOrgBouncycastleX509X509CertStoreSelector *selector = new_LibOrgBouncycastleX509X509CertStoreSelector_init();
    IOSObjectArray *principals = [((LibOrgBouncycastleX509AttributeCertificateIssuer *) nil_chk([((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(cert)) getIssuer])) getPrincipals];
    id<JavaUtilSet> issuers = new_JavaUtilHashSet_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(principals))->size_; i++) {
      @try {
        if ([IOSObjectArray_Get(principals, i) isKindOfClass:[JavaxSecurityAuthX500X500Principal class]]) {
          [selector setSubjectWithByteArray:[((JavaxSecurityAuthX500X500Principal *) nil_chk(((JavaxSecurityAuthX500X500Principal *) cast_chk(IOSObjectArray_Get(principals, i), [JavaxSecurityAuthX500X500Principal class])))) getEncoded]];
        }
        LibOrgBouncycastleJcajcePKIXCertStoreSelector *certStoreSelector = [new_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(selector) build];
        [issuers addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certStoreSelector, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([paramsPKIX getBaseParameters])) getCertStores])];
        [issuers addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certStoreSelector, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([paramsPKIX getBaseParameters])) getCertificateStores])];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(@"Public key certificate for attribute certificate cannot be searched.", e);
      }
      @catch (JavaIoIOException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(@"cannot encode X500Principal.", e);
      }
    }
    if ([issuers isEmpty]) {
      @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(@"Public key certificate for attribute certificate cannot be found.");
    }
    id<JavaUtilIterator> it = [issuers iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && result == nil) {
      result = LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithLibOrgBouncycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(self, cert, (JavaSecurityCertX509Certificate *) cast_chk([it next], [JavaSecurityCertX509Certificate class]), paramsPKIX, certPathList);
    }
  }
  if (result == nil && certPathException_ != nil) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(@"Possible certificate chain could not be validated.", certPathException_);
  }
  if (result == nil && certPathException_ == nil) {
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(@"Unable to find certificate chain.");
  }
  return result;
}

- (id<JavaSecurityCertCertPathBuilderResult>)buildWithLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
                                                                 withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)tbvCert
                                           withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters:(LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *)pkixParams
                                                                                    withJavaUtilList:(id<JavaUtilList>)tbvPath {
  return LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithLibOrgBouncycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(self, attrCert, tbvCert, pkixParams, tbvPath);
}

+ (id<JavaUtilCollection>)findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector:(LibOrgBouncycastleX509X509AttributeCertStoreSelector *)certSelect
                                                                                  withJavaUtilList:(id<JavaUtilList>)certStores {
  return LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector_withJavaUtilList_(certSelect, certStores);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilderResult;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilderResult;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xc, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineBuildWithJavaSecurityCertCertPathParameters:);
  methods[2].selector = @selector(buildWithLibOrgBouncycastleX509X509AttributeCertificate:withJavaSecurityCertX509Certificate:withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters:withJavaUtilList:);
  methods[3].selector = @selector(findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certPathException_", "LJavaLangException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineBuild", "LJavaSecurityCertCertPathParameters;", "LJavaSecurityCertCertPathBuilderException;LJavaSecurityInvalidAlgorithmParameterException;", "build", "LLibOrgBouncycastleX509X509AttributeCertificate;LJavaSecurityCertX509Certificate;LLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters;LJavaUtilList;", "findCertificates", "LLibOrgBouncycastleX509X509AttributeCertStoreSelector;LJavaUtilList;", "LLibOrgBouncycastleJceProviderAnnotatedException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi = { "PKIXAttrCertPathBuilderSpi", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi;
}

@end

void LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_init(LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi *self) {
  JavaSecurityCertCertPathBuilderSpi_init(self);
}

LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi *new_LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi, init)
}

LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi *create_LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi, init)
}

id<JavaSecurityCertCertPathBuilderResult> LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithLibOrgBouncycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi *self, id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, JavaSecurityCertX509Certificate *tbvCert, LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *pkixParams, id<JavaUtilList> tbvPath) {
  if ([((id<JavaUtilList>) nil_chk(tbvPath)) containsWithId:tbvCert]) {
    return nil;
  }
  if ([((id<JavaUtilSet>) nil_chk([((LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(pkixParams)) getExcludedCerts])) containsWithId:tbvCert]) {
    return nil;
  }
  if ([pkixParams getMaxPathLength] != -1) {
    if ([tbvPath size] - 1 > [pkixParams getMaxPathLength]) {
      return nil;
    }
  }
  [tbvPath addWithId:tbvCert];
  JavaSecurityCertCertificateFactory *cFact;
  JavaSecurityCertCertPathValidator *validator;
  id<JavaSecurityCertCertPathBuilderResult> builderResult = nil;
  @try {
    cFact = JavaSecurityCertCertificateFactory_getInstanceWithNSString_withNSString_(@"X.509", LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
    validator = JavaSecurityCertCertPathValidator_getInstanceWithNSString_withNSString_(@"RFC3281", LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Exception creating support classes.");
  }
  @try {
    if (LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(tbvCert, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getTrustAnchors], [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getSigProvider])) {
      JavaSecurityCertCertPath *certPath;
      JavaSecurityCertPKIXCertPathValidatorResult *result;
      @try {
        certPath = [((JavaSecurityCertCertificateFactory *) nil_chk(cFact)) generateCertPathWithJavaUtilList:tbvPath];
      }
      @catch (JavaLangException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Certification path could not be constructed from certificate list.", e);
      }
      @try {
        result = (JavaSecurityCertPKIXCertPathValidatorResult *) cast_chk([((JavaSecurityCertCertPathValidator *) nil_chk(validator)) validateWithJavaSecurityCertCertPath:certPath withJavaSecurityCertCertPathParameters:pkixParams], [JavaSecurityCertPKIXCertPathValidatorResult class]);
      }
      @catch (JavaLangException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Certification path could not be validated.", e);
      }
      return new_JavaSecurityCertPKIXCertPathBuilderResult_initWithJavaSecurityCertCertPath_withJavaSecurityCertTrustAnchor_withJavaSecurityCertPolicyNode_withJavaSecurityPublicKey_(certPath, [((JavaSecurityCertPKIXCertPathValidatorResult *) nil_chk(result)) getTrustAnchor], [result getPolicyTree], [result getPublicKey]);
    }
    else {
      id<JavaUtilList> stores = new_JavaUtilArrayList_init();
      [stores addAllWithJavaUtilCollection:[((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getCertificateStores]];
      @try {
        [stores addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_([((JavaSecurityCertX509Certificate *) nil_chk(tbvCert)) getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuerAlternativeName))) getId]], [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getNamedCertificateStoreMap])];
      }
      @catch (JavaSecurityCertCertificateParsingException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No additional X.509 stores can be added from certificate locations.", e);
      }
      id<JavaUtilCollection> issuers = new_JavaUtilHashSet_init();
      @try {
        [issuers addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(tbvCert, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getCertStores], stores)];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot find issuer certificate for certificate in certification path.", e);
      }
      if ([issuers isEmpty]) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"No issuer certificate for certificate in certification path found.");
      }
      id<JavaUtilIterator> it = [issuers iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && builderResult == nil) {
        JavaSecurityCertX509Certificate *issuer = (JavaSecurityCertX509Certificate *) cast_chk([it next], [JavaSecurityCertX509Certificate class]);
        if ([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(issuer)) getIssuerX500Principal])) isEqual:[issuer getSubjectX500Principal]]) {
          continue;
        }
        builderResult = LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithLibOrgBouncycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(self, attrCert, issuer, pkixParams, tbvPath);
      }
    }
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    self->certPathException_ = new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No valid certification path could be build.", e);
  }
  if (builderResult == nil) {
    [tbvPath removeWithId:tbvCert];
  }
  return builderResult;
}

id<JavaUtilCollection> LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector_withJavaUtilList_(LibOrgBouncycastleX509X509AttributeCertStoreSelector *certSelect, id<JavaUtilList> certStores) {
  LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi_initialize();
  id<JavaUtilSet> certs = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(certStores)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id obj = [iter next];
    if ([LibOrgBouncycastleUtilStore_class_() isInstance:obj]) {
      id<LibOrgBouncycastleUtilStore> certStore = (id<LibOrgBouncycastleUtilStore>) cast_check(obj, LibOrgBouncycastleUtilStore_class_());
      @try {
        [certs addAllWithJavaUtilCollection:[((id<LibOrgBouncycastleUtilStore>) nil_chk(certStore)) getMatchesWithLibOrgBouncycastleUtilSelector:certSelect]];
      }
      @catch (LibOrgBouncycastleUtilStoreException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while picking certificates from X.509 store.", e);
      }
    }
  }
  return certs;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderPKIXAttrCertPathBuilderSpi)
