//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsRSASigner.java
//

#include "ASN1ObjectIdentifier.h"
#include "AbstractTlsSigner.h"
#include "AsymmetricBlockCipher.h"
#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "CombinedHash.h"
#include "Digest.h"
#include "GenericSigner.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NullDigest.h"
#include "PKCS1Encoding.h"
#include "ParametersWithRandom.h"
#include "RSABlindedEngine.h"
#include "RSADigestSigner.h"
#include "RSAKeyParameters.h"
#include "SignatureAlgorithm.h"
#include "SignatureAndHashAlgorithm.h"
#include "Signer.h"
#include "TlsContext.h"
#include "TlsRSASigner.h"
#include "TlsUtils.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"

@implementation LibOrgBouncycastleCryptoTlsTlsRSASigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsTlsRSASigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)generateRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                      withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey
                                                                                 withByteArray:(IOSByteArray *)hash_ {
  id<LibOrgBouncycastleCryptoSigner> signer = [self makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:true withBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(privateKey, [((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(self->context_)) getSecureRandom])];
  [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:0 withInt:((IOSByteArray *) nil_chk(hash_))->size_];
  return [signer generateSignature];
}

- (jboolean)verifyRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                         withByteArray:(IOSByteArray *)sigBytes
                              withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey
                                                                         withByteArray:(IOSByteArray *)hash_ {
  id<LibOrgBouncycastleCryptoSigner> signer = [self makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:true withBoolean:false withLibOrgBouncycastleCryptoCipherParameters:publicKey];
  [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:0 withInt:((IOSByteArray *) nil_chk(hash_))->size_];
  return [signer verifySignatureWithByteArray:sigBytes];
}

- (id<LibOrgBouncycastleCryptoSigner>)createSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                  withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey {
  return [self makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:false withBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(privateKey, [((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(self->context_)) getSecureRandom])];
}

- (id<LibOrgBouncycastleCryptoSigner>)createVerifyerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                    withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey {
  return [self makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:false withBoolean:false withLibOrgBouncycastleCryptoCipherParameters:publicKey];
}

- (jboolean)isValidPublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey {
  return [publicKey isKindOfClass:[LibOrgBouncycastleCryptoParamsRSAKeyParameters class]] && ![((LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(publicKey)) isPrivate];
}

- (id<LibOrgBouncycastleCryptoSigner>)makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                                             withBoolean:(jboolean)raw
                                                                                             withBoolean:(jboolean)forSigning
                                                            withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)cp {
  if ((algorithm != nil) != LibOrgBouncycastleCryptoTlsTlsUtils_isTLSv12WithLibOrgBouncycastleCryptoTlsTlsContext_(context_)) {
    @throw new_JavaLangIllegalStateException_init();
  }
  if (algorithm != nil && [algorithm getSignature] != LibOrgBouncycastleCryptoTlsSignatureAlgorithm_rsa) {
    @throw new_JavaLangIllegalStateException_init();
  }
  id<LibOrgBouncycastleCryptoDigest> d;
  if (raw) {
    d = new_LibOrgBouncycastleCryptoDigestsNullDigest_init();
  }
  else if (algorithm == nil) {
    d = new_LibOrgBouncycastleCryptoTlsCombinedHash_init();
  }
  else {
    d = LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_([algorithm getHash]);
  }
  id<LibOrgBouncycastleCryptoSigner> s;
  if (algorithm != nil) {
    s = new_LibOrgBouncycastleCryptoSignersRSADigestSigner_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(d, LibOrgBouncycastleCryptoTlsTlsUtils_getOIDForHashAlgorithmWithShort_([algorithm getHash]));
  }
  else {
    s = new_LibOrgBouncycastleCryptoSignersGenericSigner_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withLibOrgBouncycastleCryptoDigest_([self createRSAImpl], d);
  }
  [s init__WithBoolean:forSigning withLibOrgBouncycastleCryptoCipherParameters:cp];
  return s;
}

- (id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)createRSAImpl {
  return new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init());
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[2].selector = @selector(verifyRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withByteArray:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[3].selector = @selector(createSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[4].selector = @selector(createVerifyerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[5].selector = @selector(isValidPublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[6].selector = @selector(makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withBoolean:withBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[7].selector = @selector(createRSAImpl);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generateRawSignature", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B", "LLibOrgBouncycastleCryptoCryptoException;", "verifyRawSignature", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;[BLLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B", "createSigner", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "createVerifyer", "isValidPublicKey", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "makeSigner", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;ZZLLibOrgBouncycastleCryptoCipherParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsRSASigner = { "TlsRSASigner", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsRSASigner;
}

@end

void LibOrgBouncycastleCryptoTlsTlsRSASigner_init(LibOrgBouncycastleCryptoTlsTlsRSASigner *self) {
  LibOrgBouncycastleCryptoTlsAbstractTlsSigner_init(self);
}

LibOrgBouncycastleCryptoTlsTlsRSASigner *new_LibOrgBouncycastleCryptoTlsTlsRSASigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsRSASigner, init)
}

LibOrgBouncycastleCryptoTlsTlsRSASigner *create_LibOrgBouncycastleCryptoTlsTlsRSASigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsRSASigner, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsRSASigner)
