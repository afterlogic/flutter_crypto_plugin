//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsECDHKeyExchange.java
//

#ifndef TlsECDHKeyExchange_H
#define TlsECDHKeyExchange_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsKeyExchange.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoParamsECPrivateKeyParameters;
@class LibOrgBouncycastleCryptoParamsECPublicKeyParameters;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@protocol LibOrgBouncycastleCryptoTlsTlsAgreementCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsSigner;

@interface LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange : LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsSigner> tlsSigner_;
  IOSIntArray *namedCurves_;
  IOSShortArray *clientECPointFormats_;
  IOSShortArray *serverECPointFormats_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *serverPublicKey_;
  id<LibOrgBouncycastleCryptoTlsTlsAgreementCredentials> agreementCredentials_;
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ecAgreePrivateKey_;
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ecAgreePublicKey_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
                         withIntArray:(IOSIntArray *)namedCurves
                       withShortArray:(IOSShortArray *)clientECPointFormats
                       withShortArray:(IOSShortArray *)serverECPointFormats;

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)generatePremasterSecret;

- (IOSByteArray *)generateServerKeyExchange;

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)processClientCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)clientCertificate;

- (void)processClientCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (jboolean)requiresServerKeyExchange;

- (void)skipServerCredentials;

- (void)validateCertificateRequestWithLibOrgBouncycastleCryptoTlsCertificateRequest:(LibOrgBouncycastleCryptoTlsCertificateRequest *)certificateRequest;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0
                   withJavaUtilVector:(JavaUtilVector *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange, tlsSigner_, id<LibOrgBouncycastleCryptoTlsTlsSigner>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange, namedCurves_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange, clientECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange, serverECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange, serverPublicKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange, agreementCredentials_, id<LibOrgBouncycastleCryptoTlsTlsAgreementCredentials>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange, ecAgreePrivateKey_, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange, ecAgreePublicKey_, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsECDHKeyExchange_H
