//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/xmss/XMSSMTSignatureSpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricKeyParameter.h"
#include "BCXMSSMTPrivateKey.h"
#include "BCXMSSMTPublicKey.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NullDigest.h"
#include "ParametersWithRandom.h"
#include "PqcJcajceXmssDigestUtil.h"
#include "SHA256Digest.h"
#include "SHA512Digest.h"
#include "SHAKEDigest.h"
#include "XMSSMTPrivateKeyParameters.h"
#include "XMSSMTSignatureSpi.h"
#include "XMSSMTSigner.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@interface LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *signer_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi, signer_, LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi, treeDigest_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi, random_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi

- (instancetype)initWithNSString:(NSString *)algorithm {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_(self, algorithm);
  return self;
}

- (instancetype)initWithNSString:(NSString *)sigName
withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner:(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *)signer {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, sigName, digest, signer);
  return self;
}

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  if ([publicKey isKindOfClass:[LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPublicKey class]]) {
    id<LibOrgBouncycastleCryptoCipherParameters> param = [((LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPublicKey *) nil_chk(((LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPublicKey *) publicKey))) getKeyParams];
    treeDigest_ = nil;
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
    [((LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *) nil_chk(signer_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param];
  }
  else {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"unknown public key passed to XMSSMT");
  }
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  [self engineInitSignWithJavaSecurityPrivateKey:privateKey];
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey {
  if ([privateKey isKindOfClass:[LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPrivateKey class]]) {
    id<LibOrgBouncycastleCryptoCipherParameters> param = [((LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPrivateKey *) nil_chk(((LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPrivateKey *) privateKey))) getKeyParams];
    treeDigest_ = [((LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPrivateKey *) nil_chk(((LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPrivateKey *) privateKey))) getTreeDigestOID];
    if (random_ != nil) {
      param = new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(param, random_);
    }
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
    [((LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *) nil_chk(signer_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param];
  }
  else {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"unknown private key passed to XMSSMT");
  }
}

- (void)engineUpdateWithByte:(jbyte)b {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:b withInt:off withInt:len];
}

- (IOSByteArray *)engineSign {
  IOSByteArray *hash_ = LibOrgBouncycastlePqcJcajceProviderXmssPqcJcajceXmssDigestUtil_getDigestResultWithLibOrgBouncycastleCryptoDigest_(digest_);
  @try {
    IOSByteArray *sig = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *) nil_chk(signer_)) generateSignatureWithByteArray:hash_];
    return sig;
  }
  @catch (JavaLangException *e) {
    if ([e isKindOfClass:[JavaLangIllegalStateException class]]) {
      @throw new_JavaSecuritySignatureException_initWithNSString_([e getMessage]);
    }
    @throw new_JavaSecuritySignatureException_initWithNSString_([e description]);
  }
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes {
  IOSByteArray *hash_ = LibOrgBouncycastlePqcJcajceProviderXmssPqcJcajceXmssDigestUtil_getDigestResultWithLibOrgBouncycastleCryptoDigest_(digest_);
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *) nil_chk(signer_)) verifySignatureWithByteArray:hash_ withByteArray:sigBytes];
}

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)param {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (jboolean)isSigningCapable {
  return treeDigest_ != nil && [((LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *) nil_chk(signer_)) getUsagesRemaining] != 0;
}

- (id<JavaSecurityPrivateKey>)getUpdatedPrivateKey {
  if (treeDigest_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"signature object not in a signing state");
  }
  id<JavaSecurityPrivateKey> rKey = new_LibOrgBouncycastlePqcJcajceProviderXmssBCXMSSMTPrivateKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_(treeDigest_, (LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *) nil_chk(signer_)) getUpdatedPrivateKey], [LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters class]));
  treeDigest_ = nil;
  return rKey;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 7, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 11, 10, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 10, -1, -1, -1 },
    { NULL, "Z", 0x4, 12, 13, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 17, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner:);
  methods[2].selector = @selector(engineInitVerifyWithJavaSecurityPublicKey:);
  methods[3].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:);
  methods[5].selector = @selector(engineUpdateWithByte:);
  methods[6].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(engineSign);
  methods[8].selector = @selector(engineVerifyWithByteArray:);
  methods[9].selector = @selector(engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[10].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[11].selector = @selector(engineGetParameterWithNSString:);
  methods[12].selector = @selector(isSigningCapable);
  methods[13].selector = @selector(getUpdatedPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signer_", "LLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeDigest_", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner;", "engineInitVerify", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "engineInitSign", "LJavaSecurityPrivateKey;LJavaSecuritySecureRandom;", "LJavaSecurityPrivateKey;", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "[B", "engineSetParameter", "LJavaSecuritySpecAlgorithmParameterSpec;", "LNSString;LNSObject;", "engineGetParameter", "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256;LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128;LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512;LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256;LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash;LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash;LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash;LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi = { "XMSSMTSignatureSpi", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, fields, 7, 0x1, 14, 4, -1, 18, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi *self, NSString *algorithm) {
  JavaSecuritySignature_initWithNSString_(self, algorithm);
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_(NSString *algorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi, initWithNSString_, algorithm)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_(NSString *algorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi, initWithNSString_, algorithm)
}

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi *self, NSString *sigName, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *signer) {
  JavaSecuritySignature_initWithNSString_(self, sigName);
  self->digest_ = digest;
  self->signer_ = signer;
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(NSString *sigName, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *signer) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi, initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_, sigName, digest, signer)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(NSString *sigName, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *signer) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi, initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_, sigName, digest, signer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256 = { "withSha256", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256_init(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256 *self) {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, @"XMSSMT-SHA256", new_LibOrgBouncycastleCryptoDigestsNullDigest_init(), new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init());
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256 *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256, init)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256 *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128 = { "withShake128", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128_init(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128 *self) {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, @"XMSSMT-SHAKE128", new_LibOrgBouncycastleCryptoDigestsNullDigest_init(), new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init());
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128 *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128, init)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128 *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512 = { "withSha512", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512_init(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512 *self) {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, @"XMSSMT-SHA512", new_LibOrgBouncycastleCryptoDigestsNullDigest_init(), new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init());
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512 *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512, init)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512 *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256 = { "withShake256", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256_init(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256 *self) {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, @"XMSSMT-SHAKE256", new_LibOrgBouncycastleCryptoDigestsNullDigest_init(), new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init());
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256 *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256, init)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256 *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash = { "withSha256andPrehash", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash_init(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash *self) {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, @"SHA256withXMSSMT-SHA256", new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init(), new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init());
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash, init)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha256andPrehash)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash = { "withShake128andPrehash", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash_init(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash *self) {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, @"SHAKE128withXMSSMT-SHAKE128", new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(128), new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init());
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash, init)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake128andPrehash)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash = { "withSha512andPrehash", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash_init(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash *self) {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, @"SHA512withXMSSMT-SHA512", new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init(), new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init());
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash, init)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withSha512andPrehash)

@implementation LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash = { "withShake256andPrehash", "lib.org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash;
}

@end

void LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash_init(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash *self) {
  LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_initWithNSString_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_(self, @"SHAKE256withXMSSMT-SHAKE256", new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256), new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init());
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash *new_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash, init)
}

LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash *create_LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderXmssXMSSMTSignatureSpi_withShake256andPrehash)
