//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ess/OtherSigningCertificate.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "DERSequence.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OtherCertID.h"
#include "OtherSigningCertificate.h"
#include "PolicyInformation.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleAsn1EssOtherSigningCertificate ()

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

__attribute__((unused)) static void LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1EssOtherSigningCertificate *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1EssOtherSigningCertificate *new_LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1EssOtherSigningCertificate *create_LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1EssOtherSigningCertificate

+ (LibOrgBouncycastleAsn1EssOtherSigningCertificate *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1EssOtherSigningCertificate_getInstanceWithId_(o);
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1EssOtherCertID:(LibOrgBouncycastleAsn1EssOtherCertID *)otherCertID {
  LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1EssOtherCertID_(self, otherCertID);
  return self;
}

- (IOSObjectArray *)getCerts {
  IOSObjectArray *cs = [IOSObjectArray newArrayWithLength:[((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(certs_)) size] type:LibOrgBouncycastleAsn1EssOtherCertID_class_()];
  for (jint i = 0; i != [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(certs_)) size]; i++) {
    (void) IOSObjectArray_Set(cs, i, LibOrgBouncycastleAsn1EssOtherCertID_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(certs_)) getObjectAtWithInt:i]));
  }
  return cs;
}

- (IOSObjectArray *)getPolicies {
  if (policies_ == nil) {
    return nil;
  }
  IOSObjectArray *ps = [IOSObjectArray newArrayWithLength:[policies_ size] type:LibOrgBouncycastleAsn1X509PolicyInformation_class_()];
  for (jint i = 0; i != [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(policies_)) size]; i++) {
    (void) IOSObjectArray_Set(ps, i, LibOrgBouncycastleAsn1X509PolicyInformation_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(policies_)) getObjectAtWithInt:i]));
  }
  return ps;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:certs_];
  if (policies_ != nil) {
    [v addWithLibOrgBouncycastleAsn1ASN1Encodable:policies_];
  }
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1EssOtherSigningCertificate;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleAsn1EssOtherCertID;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleAsn1X509PolicyInformation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleAsn1EssOtherCertID:);
  methods[3].selector = @selector(getCerts);
  methods[4].selector = @selector(getPolicies);
  methods[5].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certs_", "LLibOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "policies_", "LLibOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LLibOrgBouncycastleAsn1ASN1Sequence;", "LLibOrgBouncycastleAsn1EssOtherCertID;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1EssOtherSigningCertificate = { "OtherSigningCertificate", "lib.org.bouncycastle.asn1.ess", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1EssOtherSigningCertificate;
}

@end

LibOrgBouncycastleAsn1EssOtherSigningCertificate *LibOrgBouncycastleAsn1EssOtherSigningCertificate_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1EssOtherSigningCertificate_initialize();
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1EssOtherSigningCertificate class]]) {
    return (LibOrgBouncycastleAsn1EssOtherSigningCertificate *) o;
  }
  else if (o != nil) {
    return new_LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(o));
  }
  return nil;
}

void LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1EssOtherSigningCertificate *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] < 1 || [seq size] > 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Bad sequence size: ", [seq size]));
  }
  self->certs_ = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([seq getObjectAtWithInt:0]);
  if ([seq size] > 1) {
    self->policies_ = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([seq getObjectAtWithInt:1]);
  }
}

LibOrgBouncycastleAsn1EssOtherSigningCertificate *new_LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EssOtherSigningCertificate, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1EssOtherSigningCertificate *create_LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EssOtherSigningCertificate, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

void LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1EssOtherCertID_(LibOrgBouncycastleAsn1EssOtherSigningCertificate *self, LibOrgBouncycastleAsn1EssOtherCertID *otherCertID) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->certs_ = new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1Encodable_(otherCertID);
}

LibOrgBouncycastleAsn1EssOtherSigningCertificate *new_LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1EssOtherCertID_(LibOrgBouncycastleAsn1EssOtherCertID *otherCertID) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EssOtherSigningCertificate, initWithLibOrgBouncycastleAsn1EssOtherCertID_, otherCertID)
}

LibOrgBouncycastleAsn1EssOtherSigningCertificate *create_LibOrgBouncycastleAsn1EssOtherSigningCertificate_initWithLibOrgBouncycastleAsn1EssOtherCertID_(LibOrgBouncycastleAsn1EssOtherCertID *otherCertID) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EssOtherSigningCertificate, initWithLibOrgBouncycastleAsn1EssOtherCertID_, otherCertID)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1EssOtherSigningCertificate)
