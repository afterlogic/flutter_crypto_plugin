//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/ElGamalParametersGenerator.java
//

#include "DHParametersHelper.h"
#include "ElGamalParameters.h"
#include "ElGamalParametersGenerator.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator () {
 @public
  jint size_;
  jint certainty_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator, random_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithInt:(jint)size
              withInt:(jint)certainty
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->size_ = size;
  self->certainty_ = certainty;
  self->random_ = random;
}

- (LibOrgBouncycastleCryptoParamsElGamalParameters *)generateParameters {
  IOSObjectArray *safePrimes = LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_generateSafePrimesWithInt_withInt_withJavaSecuritySecureRandom_(size_, certainty_, random_);
  JavaMathBigInteger *p = IOSObjectArray_Get(nil_chk(safePrimes), 0);
  JavaMathBigInteger *q = IOSObjectArray_Get(safePrimes, 1);
  JavaMathBigInteger *g = LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_selectGeneratorWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(p, q, random_);
  return new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_(p, g);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsElGamalParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithInt:withInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(generateParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certainty_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "IILJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator = { "ElGamalParametersGenerator", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator;
}

@end

void LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator_init(LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator *new_LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator, init)
}

LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator *create_LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsElGamalParametersGenerator)
