//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/TLSKDF.java
//

#include "AlgorithmProvider.h"
#include "Arrays.h"
#include "BaseSecretKeyFactory.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestFactory.h"
#include "HMac.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "Mac.h"
#include "SHA256Digest.h"
#include "SHA384Digest.h"
#include "SHA512Digest.h"
#include "Strings.h"
#include "TLSKDF.h"
#include "TLSKeyMaterialSpec.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/spec/SecretKeySpec.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricTLSKDF ()

+ (IOSByteArray *)PRF_legacyWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec:(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *)parameters;

+ (void)hmac_hashWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                                   withByteArray:(IOSByteArray *)secret
                                   withByteArray:(IOSByteArray *)seed
                                   withByteArray:(IOSByteArray *)outArg;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_PRF_legacyWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *parameters);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_hmac_hashWithLibOrgBouncycastleCryptoMac_withByteArray_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoMac> mac, IOSByteArray *secret, IOSByteArray *seed, IOSByteArray *outArg);

@interface LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12 () {
 @public
  id<LibOrgBouncycastleCryptoMac> prf_;
}

- (IOSByteArray *)PRFWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec:(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *)parameters
                                        withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)prf;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12, prf_, id<LibOrgBouncycastleCryptoMac>)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_PRFWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12 *self, LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *parameters, id<LibOrgBouncycastleCryptoMac> prf);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)PRF_legacyWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec:(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *)parameters {
  return LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_PRF_legacyWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_(parameters);
}

+ (void)hmac_hashWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                                   withByteArray:(IOSByteArray *)secret
                                   withByteArray:(IOSByteArray *)seed
                                   withByteArray:(IOSByteArray *)outArg {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_hmac_hashWithLibOrgBouncycastleCryptoMac_withByteArray_withByteArray_withByteArray_(mac, secret, seed, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(PRF_legacyWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec:);
  methods[2].selector = @selector(hmac_hashWithLibOrgBouncycastleCryptoMac:withByteArray:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "PRF_legacy", "LLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec;", "hmac_hash", "LLibOrgBouncycastleCryptoMac;[B[B[B", "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory;LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10;LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11;LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12;LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256;LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384;LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512;LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF = { "TLSKDF", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, 4, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_init(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF, init)
}

IOSByteArray *LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_PRF_legacyWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *parameters) {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_initialize();
  id<LibOrgBouncycastleCryptoMac> md5Hmac = new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createMD5());
  id<LibOrgBouncycastleCryptoMac> sha1HMac = new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1());
  IOSByteArray *label = LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_([((LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *) nil_chk(parameters)) getLabel]);
  IOSByteArray *labelSeed = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(label, [parameters getSeed]);
  IOSByteArray *secret = [parameters getSecret];
  jint s_half = (((IOSByteArray *) nil_chk(secret))->size_ + 1) / 2;
  IOSByteArray *s1 = [IOSByteArray newArrayWithLength:s_half];
  IOSByteArray *s2 = [IOSByteArray newArrayWithLength:s_half];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(secret, 0, s1, 0, s_half);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(secret, secret->size_ - s_half, s2, 0, s_half);
  jint size = [parameters getLength];
  IOSByteArray *b1 = [IOSByteArray newArrayWithLength:size];
  IOSByteArray *b2 = [IOSByteArray newArrayWithLength:size];
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_hmac_hashWithLibOrgBouncycastleCryptoMac_withByteArray_withByteArray_withByteArray_(md5Hmac, s1, labelSeed, b1);
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_hmac_hashWithLibOrgBouncycastleCryptoMac_withByteArray_withByteArray_withByteArray_(sha1HMac, s2, labelSeed, b2);
  for (jint i = 0; i < size; i++) {
    *IOSByteArray_GetRef(b1, i) ^= IOSByteArray_Get(b2, i);
  }
  return b1;
}

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_hmac_hashWithLibOrgBouncycastleCryptoMac_withByteArray_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoMac> mac, IOSByteArray *secret, IOSByteArray *seed, IOSByteArray *outArg) {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_initialize();
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac)) init__WithLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(secret)];
  IOSByteArray *a = seed;
  jint size = [mac getMacSize];
  jint iterations = (((IOSByteArray *) nil_chk(outArg))->size_ + size - 1) / size;
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:[mac getMacSize]];
  IOSByteArray *buf2 = [IOSByteArray newArrayWithLength:[mac getMacSize]];
  for (jint i = 0; i < iterations; i++) {
    [mac updateWithByteArray:a withInt:0 withInt:((IOSByteArray *) nil_chk(a))->size_];
    [mac doFinalWithByteArray:buf withInt:0];
    a = buf;
    [mac updateWithByteArray:a withInt:0 withInt:a->size_];
    [mac updateWithByteArray:seed withInt:0 withInt:((IOSByteArray *) nil_chk(seed))->size_];
    [mac doFinalWithByteArray:buf2 withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf2, 0, outArg, (size * i), JavaLangMath_minWithInt_withInt_(size, outArg->size_ - (size * i)));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory

- (instancetype)initWithNSString:(NSString *)algName {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory_initWithNSString_(self, algName);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory = { "TLSKeyMaterialFactory", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory_initWithNSString_(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory *self, NSString *algName) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseSecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, algName, nil);
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory_initWithNSString_(NSString *algName) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory, initWithNSString_, algName)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory_initWithNSString_(NSString *algName) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory, initWithNSString_, algName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec class]]) {
    return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_PRF_legacyWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_((LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *) keySpec), algName_);
  }
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Invalid KeySpec");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKey;", 0x4, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGenerateSecretWithJavaSecuritySpecKeySpec:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "engineGenerateSecret", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;", "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10 = { "TLS10", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x19, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10_init(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory_initWithNSString_(self, @"TLS10KDF");
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10 *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10 *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS10)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec class]]) {
    return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_PRF_legacyWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_((LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *) keySpec), algName_);
  }
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Invalid KeySpec");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKey;", 0x4, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGenerateSecretWithJavaSecuritySpecKeySpec:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "engineGenerateSecret", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;", "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11 = { "TLS11", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x19, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11_init(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory_initWithNSString_(self, @"TLS11KDF");
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11 *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11 *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS11)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12

- (instancetype)initWithNSString:(NSString *)algName
 withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)prf {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_initWithNSString_withLibOrgBouncycastleCryptoMac_(self, algName, prf);
  return self;
}

- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec class]]) {
    return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_PRFWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_withLibOrgBouncycastleCryptoMac_(self, (LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *) keySpec, prf_), algName_);
  }
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Invalid KeySpec");
}

- (IOSByteArray *)PRFWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec:(LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *)parameters
                                        withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)prf {
  return LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_PRFWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_withLibOrgBouncycastleCryptoMac_(self, parameters, prf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKey;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoMac:);
  methods[1].selector = @selector(engineGenerateSecretWithJavaSecuritySpecKeySpec:);
  methods[2].selector = @selector(PRFWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec:withLibOrgBouncycastleCryptoMac:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prf_", "LLibOrgBouncycastleCryptoMac;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LLibOrgBouncycastleCryptoMac;", "engineGenerateSecret", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;", "PRF", "LLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec;LLibOrgBouncycastleCryptoMac;", "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12 = { "TLS12", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 3, 1, 6, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_initWithNSString_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12 *self, NSString *algName, id<LibOrgBouncycastleCryptoMac> prf) {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLSKeyMaterialFactory_initWithNSString_(self, algName);
  self->prf_ = prf;
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12 *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_initWithNSString_withLibOrgBouncycastleCryptoMac_(NSString *algName, id<LibOrgBouncycastleCryptoMac> prf) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12, initWithNSString_withLibOrgBouncycastleCryptoMac_, algName, prf)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12 *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_initWithNSString_withLibOrgBouncycastleCryptoMac_(NSString *algName, id<LibOrgBouncycastleCryptoMac> prf) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12, initWithNSString_withLibOrgBouncycastleCryptoMac_, algName, prf)
}

IOSByteArray *LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_PRFWithLibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12 *self, LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *parameters, id<LibOrgBouncycastleCryptoMac> prf) {
  IOSByteArray *label = LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_([((LibOrgBouncycastleJcajceSpecTLSKeyMaterialSpec *) nil_chk(parameters)) getLabel]);
  IOSByteArray *labelSeed = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(label, [parameters getSeed]);
  IOSByteArray *secret = [parameters getSecret];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:[parameters getLength]];
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_hmac_hashWithLibOrgBouncycastleCryptoMac_withByteArray_withByteArray_withByteArray_(prf, secret, labelSeed, buf);
  return buf;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256 = { "TLS12withSHA256", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256_init(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_initWithNSString_withLibOrgBouncycastleCryptoMac_(self, @"TLS12withSHA256KDF", new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256 *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256 *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA256)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384 = { "TLS12withSHA384", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384_init(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_initWithNSString_withLibOrgBouncycastleCryptoMac_(self, @"TLS12withSHA384KDF", new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA384Digest_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384 *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384 *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA384)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512 = { "TLS12withSHA512", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512_init(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12_initWithNSString_withLibOrgBouncycastleCryptoMac_(self, @"TLS12withSHA512KDF", new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512 *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512 *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_TLS12withSHA512)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"SecretKeyFactory.TLS10KDF" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_PREFIX, @"$TLS10")];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.TLS11KDF" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_PREFIX, @"$TLS11")];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.TLS12WITHSHA256KDF" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_PREFIX, @"$TLS12withSHA256")];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.TLS12WITHSHA384KDF" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_PREFIX, @"$TLS12withSHA384")];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.TLS12WITHSHA512KDF" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_PREFIX, @"$TLS12withSHA512")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricTLSKDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTLSKDF_Mappings)
