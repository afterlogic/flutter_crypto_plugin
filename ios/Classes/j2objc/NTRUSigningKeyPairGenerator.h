//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator.java
//

#ifndef NTRUSigningKeyPairGenerator_H
#define NTRUSigningKeyPairGenerator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricCipherKeyPairGenerator.h"
#include "J2ObjC_header.h"
#include "NTRUSigningPrivateKeyParameters.h"

@class JavaIoInputStream;
@class LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;
@class LibOrgBouncycastleCryptoKeyGenerationParameters;
@class LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;
@class LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis;
@class LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;
@protocol LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;

@interface LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator : NSObject < LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator >

#pragma mark Public

- (instancetype __nonnull)init;

- (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *)generateBoundedBasis;

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair;

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPairSingleThread;

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_init(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator)

@interface LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis : LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis {
 @public
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F_;
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *)outer$
                                withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)f
                                withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)fPrime
                                withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)h
                                withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)F
                                withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)G
                       withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)params;

- (jboolean)isNormOk;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)arg0
withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)arg1
                                        withBoolean:(jboolean)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)arg0
                              withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)arg1
                              withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)arg2
                     withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis)

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis, F_, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis, G_, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *self, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // NTRUSigningKeyPairGenerator_H
