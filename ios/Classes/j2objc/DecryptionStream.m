//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/decryption_verification/DecryptionStream.java
//

#include "DecryptionStream.h"
#include "J2ObjC_source.h"
#include "OpenPgpMetadata.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalStateException.h"

@interface LibComAfterlogicPgpDecryption_verificationDecryptionStream () {
 @public
  JavaIoInputStream *inputStream_;
  LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *resultBuilder_;
  jboolean isClosed_;
}

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationDecryptionStream, inputStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationDecryptionStream, resultBuilder_, LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)

@implementation LibComAfterlogicPgpDecryption_verificationDecryptionStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)wrapped
withLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder:(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)resultBuilder {
  LibComAfterlogicPgpDecryption_verificationDecryptionStream_initWithJavaIoInputStream_withLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_(self, wrapped, resultBuilder);
  return self;
}

- (jint)read {
  return [((JavaIoInputStream *) nil_chk(inputStream_)) read];
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(inputStream_)) close];
  self->isClosed_ = true;
}

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata *)getResult {
  if (!isClosed_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DecryptionStream MUST be closed before the result can be accessed.");
  }
  return [((LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *) nil_chk(resultBuilder_)) build];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(getResult);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inputStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "resultBuilder_", "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isClosed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpDecryption_verificationDecryptionStream = { "DecryptionStream", "lib.com.afterlogic.pgp.decryption_verification", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpDecryption_verificationDecryptionStream;
}

@end

void LibComAfterlogicPgpDecryption_verificationDecryptionStream_initWithJavaIoInputStream_withLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_(LibComAfterlogicPgpDecryption_verificationDecryptionStream *self, JavaIoInputStream *wrapped, LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *resultBuilder) {
  JavaIoInputStream_init(self);
  self->isClosed_ = false;
  self->inputStream_ = wrapped;
  self->resultBuilder_ = resultBuilder;
}

LibComAfterlogicPgpDecryption_verificationDecryptionStream *new_LibComAfterlogicPgpDecryption_verificationDecryptionStream_initWithJavaIoInputStream_withLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_(JavaIoInputStream *wrapped, LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *resultBuilder) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpDecryption_verificationDecryptionStream, initWithJavaIoInputStream_withLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_, wrapped, resultBuilder)
}

LibComAfterlogicPgpDecryption_verificationDecryptionStream *create_LibComAfterlogicPgpDecryption_verificationDecryptionStream_initWithJavaIoInputStream_withLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_(JavaIoInputStream *wrapped, LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *resultBuilder) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpDecryption_verificationDecryptionStream, initWithJavaIoInputStream_withLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_, wrapped, resultBuilder)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpDecryption_verificationDecryptionStream)
