//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/kems/RSAKeyEncapsulation.java
//

#include "BigIntegers.h"
#include "CipherParameters.h"
#include "DerivationFunction.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KDFParameters.h"
#include "KeyParameter.h"
#include "RSAKeyEncapsulation.h"
#include "RSAKeyParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation () {
 @public
  id<LibOrgBouncycastleCryptoDerivationFunction> kdf_;
  JavaSecuritySecureRandom *rnd_;
  LibOrgBouncycastleCryptoParamsRSAKeyParameters *key_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation, kdf_, id<LibOrgBouncycastleCryptoDerivationFunction>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation, rnd_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation, key_, LibOrgBouncycastleCryptoParamsRSAKeyParameters *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_get_ZERO(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation, ONE, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation)

@implementation LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation

- (instancetype)initWithLibOrgBouncycastleCryptoDerivationFunction:(id<LibOrgBouncycastleCryptoDerivationFunction>)kdf
                                      withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rnd {
  LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_initWithLibOrgBouncycastleCryptoDerivationFunction_withJavaSecuritySecureRandom_(self, kdf, rnd);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)key {
  if (!([key isKindOfClass:[LibOrgBouncycastleCryptoParamsRSAKeyParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"RSA key required");
  }
  self->key_ = (LibOrgBouncycastleCryptoParamsRSAKeyParameters *) cast_chk(key, [LibOrgBouncycastleCryptoParamsRSAKeyParameters class]);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)encryptWithByteArray:(IOSByteArray *)outArg
                                                             withInt:(jint)outOff
                                                             withInt:(jint)keyLen {
  if ([((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Public key required for encryption");
  }
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getModulus];
  JavaMathBigInteger *e = [((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getExponent];
  JavaMathBigInteger *r = LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_ZERO, [((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_ONE], rnd_);
  JavaMathBigInteger *c = [((JavaMathBigInteger *) nil_chk(r)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:n];
  IOSByteArray *C = LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(([n bitLength] + 7) / 8, c);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(C, 0, outArg, outOff, ((IOSByteArray *) nil_chk(C))->size_);
  return [self generateKeyWithJavaMathBigInteger:n withJavaMathBigInteger:r withInt:keyLen];
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)encryptWithByteArray:(IOSByteArray *)outArg
                                                             withInt:(jint)keyLen {
  return [self encryptWithByteArray:outArg withInt:0 withInt:keyLen];
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)decryptWithByteArray:(IOSByteArray *)inArg
                                                             withInt:(jint)inOff
                                                             withInt:(jint)inLen
                                                             withInt:(jint)keyLen {
  if (![((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Private key required for decryption");
  }
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getModulus];
  JavaMathBigInteger *d = [((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getExponent];
  IOSByteArray *C = [IOSByteArray newArrayWithLength:inLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, C, 0, C->size_);
  JavaMathBigInteger *c = new_JavaMathBigInteger_initWithInt_withByteArray_(1, C);
  JavaMathBigInteger *r = [c modPowWithJavaMathBigInteger:d withJavaMathBigInteger:n];
  return [self generateKeyWithJavaMathBigInteger:n withJavaMathBigInteger:r withInt:keyLen];
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)decryptWithByteArray:(IOSByteArray *)inArg
                                                             withInt:(jint)keyLen {
  return [self decryptWithByteArray:inArg withInt:0 withInt:((IOSByteArray *) nil_chk(inArg))->size_ withInt:keyLen];
}

- (LibOrgBouncycastleCryptoParamsKeyParameter *)generateKeyWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                                           withJavaMathBigInteger:(JavaMathBigInteger *)r
                                                                          withInt:(jint)keyLen {
  IOSByteArray *R = LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(([((JavaMathBigInteger *) nil_chk(n)) bitLength] + 7) / 8, r);
  [((id<LibOrgBouncycastleCryptoDerivationFunction>) nil_chk(kdf_)) init__WithLibOrgBouncycastleCryptoDerivationParameters:new_LibOrgBouncycastleCryptoParamsKDFParameters_initWithByteArray_withByteArray_(R, nil)];
  IOSByteArray *K = [IOSByteArray newArrayWithLength:keyLen];
  [((id<LibOrgBouncycastleCryptoDerivationFunction>) nil_chk(kdf_)) generateBytesWithByteArray:K withInt:0 withInt:K->size_];
  return new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(K);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 7, 8, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsKeyParameter;", 0x4, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDerivationFunction:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(encryptWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(encryptWithByteArray:withInt:);
  methods[4].selector = @selector(decryptWithByteArray:withInt:withInt:withInt:);
  methods[5].selector = @selector(decryptWithByteArray:withInt:);
  methods[6].selector = @selector(generateKeyWithJavaMathBigInteger:withJavaMathBigInteger:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "kdf_", "LLibOrgBouncycastleCryptoDerivationFunction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rnd_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsRSAKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDerivationFunction;LJavaSecuritySecureRandom;", "init", "LLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "encrypt", "[BII", "[BI", "decrypt", "[BIII", "generateKey", "LJavaMathBigInteger;LJavaMathBigInteger;I", &LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_ZERO, &LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_ONE };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation = { "RSAKeyEncapsulation", "lib.org.bouncycastle.crypto.kems", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation class]) {
    LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation)
  }
}

@end

void LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_initWithLibOrgBouncycastleCryptoDerivationFunction_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation *self, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, JavaSecuritySecureRandom *rnd) {
  NSObject_init(self);
  self->kdf_ = kdf;
  self->rnd_ = rnd;
}

LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation *new_LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_initWithLibOrgBouncycastleCryptoDerivationFunction_withJavaSecuritySecureRandom_(id<LibOrgBouncycastleCryptoDerivationFunction> kdf, JavaSecuritySecureRandom *rnd) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation, initWithLibOrgBouncycastleCryptoDerivationFunction_withJavaSecuritySecureRandom_, kdf, rnd)
}

LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation *create_LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation_initWithLibOrgBouncycastleCryptoDerivationFunction_withJavaSecuritySecureRandom_(id<LibOrgBouncycastleCryptoDerivationFunction> kdf, JavaSecuritySecureRandom *rnd) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation, initWithLibOrgBouncycastleCryptoDerivationFunction_withJavaSecuritySecureRandom_, kdf, rnd)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoKemsRSAKeyEncapsulation)
