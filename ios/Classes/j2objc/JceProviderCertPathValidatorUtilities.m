//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/JceProviderCertPathValidatorUtilities.java
//

#include "ASN1Encodable.h"
#include "ASN1Enumerated.h"
#include "ASN1GeneralizedTime.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1OutputStream.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "AnnotatedException.h"
#include "AttributeCertificateIssuer.h"
#include "AuthorityKeyIdentifier.h"
#include "CRLDistPoint.h"
#include "CRLReason.h"
#include "DEROctetString.h"
#include "DistributionPoint.h"
#include "DistributionPointName.h"
#include "ExtCertPathValidatorException.h"
#include "Extension.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISISMTTObjectIdentifiers.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "JcePKIXCRLUtil.h"
#include "JceProviderCertPathValidatorUtilities.h"
#include "JceProviderCertStatus.h"
#include "PKIXCRLStore.h"
#include "PKIXCRLStoreSelector.h"
#include "PKIXCertStore.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedParameters.h"
#include "PKIXPolicyNode.h"
#include "PolicyInformation.h"
#include "PrincipalUtils.h"
#include "RFC3280CertPathUtilities.h"
#include "RFC4519Style.h"
#include "Store.h"
#include "StoreException.h"
#include "SubjectPublicKeyInfo.h"
#include "X500Name.h"
#include "X500NameStyle.h"
#include "X509AttributeCertificate.h"
#include "X509CRLObject.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/KeyFactory.h"
#include "java/security/Principal.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/CertStoreException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/PolicyQualifierInfo.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLEntry.h"
#include "java/security/cert/X509CRLSelector.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/cert/X509Extension.h"
#include "java/security/interfaces/DSAParams.h"
#include "java/security/interfaces/DSAPublicKey.h"
#include "java/security/spec/DSAPublicKeySpec.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities ()

+ (LibOrgBouncycastleAsn1ASN1Primitive *)getObjectWithNSString:(NSString *)oid
                                                 withByteArray:(IOSByteArray *)ext;

+ (void)removePolicyNodeRecurseWithJavaUtilListArray:(IOSObjectArray *)policyNodes
     withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_node;

+ (JavaMathBigInteger *)getSerialNumberWithId:(id)cert;

+ (jboolean)isDeltaCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

@end

__attribute__((unused)) static LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getObjectWithNSString_withByteArray_(NSString *oid, IOSByteArray *ext);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *_node);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(id cert);

__attribute__((unused)) static jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isDeltaCRLWithJavaSecurityCertX509CRL_(JavaSecurityCertX509CRL *crl);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities)

LibOrgBouncycastleJceProviderJcePKIXCRLUtil *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_UTIL;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_KEY_USAGE;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_FRESHEST_CRL;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER;
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY = @"2.5.29.32.0";
NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_NUMBER;
IOSObjectArray *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_crlReasons;

@implementation LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities

+ (LibOrgBouncycastleJceProviderJcePKIXCRLUtil *)CRL_UTIL {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_UTIL;
}

+ (NSString *)CERTIFICATE_POLICIES {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES;
}

+ (NSString *)BASIC_CONSTRAINTS {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS;
}

+ (NSString *)POLICY_MAPPINGS {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS;
}

+ (NSString *)SUBJECT_ALTERNATIVE_NAME {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME;
}

+ (NSString *)NAME_CONSTRAINTS {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS;
}

+ (NSString *)KEY_USAGE {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_KEY_USAGE;
}

+ (NSString *)INHIBIT_ANY_POLICY {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY;
}

+ (NSString *)ISSUING_DISTRIBUTION_POINT {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT;
}

+ (NSString *)DELTA_CRL_INDICATOR {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR;
}

+ (NSString *)POLICY_CONSTRAINTS {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS;
}

+ (NSString *)FRESHEST_CRL {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_FRESHEST_CRL;
}

+ (NSString *)CRL_DISTRIBUTION_POINTS {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS;
}

+ (NSString *)AUTHORITY_KEY_IDENTIFIER {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER;
}

+ (NSString *)ANY_POLICY {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY;
}

+ (NSString *)CRL_NUMBER {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_NUMBER;
}

+ (jint)KEY_CERT_SIGN {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_KEY_CERT_SIGN;
}

+ (jint)CRL_SIGN {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_SIGN;
}

+ (IOSObjectArray *)crlReasons {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_crlReasons;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaSecurityCertTrustAnchor *)findTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withJavaUtilSet:(id<JavaUtilSet>)trustAnchors {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_(cert, trustAnchors);
}

+ (JavaSecurityCertTrustAnchor *)findTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withJavaUtilSet:(id<JavaUtilSet>)trustAnchors
                                                                       withNSString:(NSString *)sigProvider {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(cert, trustAnchors, sigProvider);
}

+ (jboolean)isIssuerTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                   withJavaUtilSet:(id<JavaUtilSet>)trustAnchors
                                                      withNSString:(NSString *)sigProvider {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(cert, trustAnchors, sigProvider);
}

+ (id<JavaUtilList>)getAdditionalStoresFromAltNamesWithByteArray:(IOSByteArray *)issuerAlternativeName
                                                 withJavaUtilMap:(id<JavaUtilMap>)altNameCertStoreMap {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_(issuerAlternativeName, altNameCertStoreMap);
}

+ (JavaUtilDate *)getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(paramsPKIX);
}

+ (jboolean)isSelfIssuedWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert);
}

+ (LibOrgBouncycastleAsn1ASN1Primitive *)getExtensionValueWithJavaSecurityCertX509Extension:(id<JavaSecurityCertX509Extension>)ext
                                                                               withNSString:(NSString *)oid {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(ext, oid);
}

+ (LibOrgBouncycastleAsn1ASN1Primitive *)getObjectWithNSString:(NSString *)oid
                                                 withByteArray:(IOSByteArray *)ext {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getObjectWithNSString_withByteArray_(oid, ext);
}

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getAlgorithmIdentifierWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(key);
}

+ (id<JavaUtilSet>)getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)qualifiers {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_(qualifiers);
}

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                                           withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                                 withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_node {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, _node);
}

+ (void)removePolicyNodeRecurseWithJavaUtilListArray:(IOSObjectArray *)policyNodes
     withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_node {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(policyNodes, _node);
}

+ (jboolean)processCertD1iWithInt:(jint)index
            withJavaUtilListArray:(IOSObjectArray *)policyNodes
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)pOid
                  withJavaUtilSet:(id<JavaUtilSet>)pq {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(index, policyNodes, pOid, pq);
}

+ (void)processCertD1iiWithInt:(jint)index
         withJavaUtilListArray:(IOSObjectArray *)policyNodes
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)_poid
               withJavaUtilSet:(id<JavaUtilSet>)_pq {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(index, policyNodes, _poid, _pq);
}

+ (void)prepareNextCertB1WithInt:(jint)i
           withJavaUtilListArray:(IOSObjectArray *)policyNodes
                    withNSString:(NSString *)id_p
                 withJavaUtilMap:(id<JavaUtilMap>)m_idp
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(i, policyNodes, id_p, m_idp, cert);
}

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)prepareNextCertB2WithInt:(jint)i
                                                    withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                             withNSString:(NSString *)id_p
                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(i, policyNodes, id_p, validPolicyTree);
}

+ (jboolean)isAnyPolicyWithJavaUtilSet:(id<JavaUtilSet>)policySet {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(policySet);
}

+ (id<JavaUtilCollection>)findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector:(LibOrgBouncycastleJcajcePKIXCertStoreSelector *)certSelect
                                                                           withJavaUtilList:(id<JavaUtilList>)certStores {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, certStores);
}

+ (id<JavaUtilList>)getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint:(LibOrgBouncycastleAsn1X509CRLDistPoint *)crldp
                                                                                          withJavaUtilMap:(id<JavaUtilMap>)namedCRLStoreMap {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint_withJavaUtilMap_(crldp, namedCRLStoreMap);
}

+ (void)getCRLIssuersFromDistributionPointWithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
                                                                   withJavaUtilCollection:(id<JavaUtilCollection>)issuerPrincipals
                                                      withJavaSecurityCertX509CRLSelector:(JavaSecurityCertX509CRLSelector *)selector {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCRLIssuersFromDistributionPointWithLibOrgBouncycastleAsn1X509DistributionPoint_withJavaUtilCollection_withJavaSecurityCertX509CRLSelector_(dp, issuerPrincipals, selector);
}

+ (JavaMathBigInteger *)getSerialNumberWithId:(id)cert {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(cert);
}

+ (void)getCertStatusWithJavaUtilDate:(JavaUtilDate *)validDate
          withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                               withId:(id)cert
withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(validDate, crl, cert, certStatus);
}

+ (id<JavaUtilSet>)getDeltaCRLsWithJavaUtilDate:(JavaUtilDate *)validityDate
                    withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completeCRL
                               withJavaUtilList:(id<JavaUtilList>)certStores
                               withJavaUtilList:(id<JavaUtilList>)pkixCrlStores {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(validityDate, completeCRL, certStores, pkixCrlStores);
}

+ (jboolean)isDeltaCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isDeltaCRLWithJavaSecurityCertX509CRL_(crl);
}

+ (id<JavaUtilSet>)getCompleteCRLsWithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
                                                                           withId:(id)cert
                                                                 withJavaUtilDate:(JavaUtilDate *)currentDate
                               withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCompleteCRLsWithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(dp, cert, currentDate, paramsPKIX);
}

+ (JavaUtilDate *)getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                                                         withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                              withInt:(jint)index {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(paramsPKIX, certPath, index);
}

+ (id<JavaSecurityPublicKey>)getNextWorkingKeyWithJavaUtilList:(id<JavaUtilList>)certs
                                                       withInt:(jint)index
                  withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(certs, index, helper);
}

+ (id<JavaUtilCollection>)findIssuerCertsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                            withJavaUtilList:(id<JavaUtilList>)certStores
                                                            withJavaUtilList:(id<JavaUtilList>)pkixCertStores {
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(cert, certStores, pkixCertStores);
}

+ (void)verifyX509CertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey
                                                    withNSString:(NSString *)sigProvider {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, publicKey, sigProvider);
}

+ (void)checkCRLsNotEmptyWithJavaUtilSet:(id<JavaUtilSet>)crls
                                  withId:(id)cert {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_checkCRLsNotEmptyWithJavaUtilSet_withId_(crls, cert);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertTrustAnchor;", 0xc, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertTrustAnchor;", 0xc, 0, 3, 2, -1, -1, -1 },
    { NULL, "Z", 0x8, 4, 3, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 5, 6, 7, 8, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xc, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 11, 12, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0xc, 13, 14, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0xa, 15, 16, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0xc, 17, 18, 19, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1c, 20, 21, 19, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0xc, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 29, 30, 31, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0xc, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 34, 35, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xc, 36, 37, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 38, 39, 2, 40, -1, -1 },
    { NULL, "V", 0xc, 41, 42, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 45, 46, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xc, 47, 48, 2, 49, -1, -1 },
    { NULL, "Z", 0xa, 50, 51, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xc, 52, 53, 2, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xc, 54, 55, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0xc, 56, 57, 19, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x8, 58, 59, 2, 60, -1, -1 },
    { NULL, "V", 0xc, 61, 62, 63, -1, -1, -1 },
    { NULL, "V", 0x8, 64, 65, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(findTrustAnchorWithJavaSecurityCertX509Certificate:withJavaUtilSet:);
  methods[2].selector = @selector(findTrustAnchorWithJavaSecurityCertX509Certificate:withJavaUtilSet:withNSString:);
  methods[3].selector = @selector(isIssuerTrustAnchorWithJavaSecurityCertX509Certificate:withJavaUtilSet:withNSString:);
  methods[4].selector = @selector(getAdditionalStoresFromAltNamesWithByteArray:withJavaUtilMap:);
  methods[5].selector = @selector(getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters:);
  methods[6].selector = @selector(isSelfIssuedWithJavaSecurityCertX509Certificate:);
  methods[7].selector = @selector(getExtensionValueWithJavaSecurityCertX509Extension:withNSString:);
  methods[8].selector = @selector(getObjectWithNSString:withByteArray:);
  methods[9].selector = @selector(getAlgorithmIdentifierWithJavaSecurityPublicKey:);
  methods[10].selector = @selector(getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[11].selector = @selector(removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode:withJavaUtilListArray:withLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[12].selector = @selector(removePolicyNodeRecurseWithJavaUtilListArray:withLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[13].selector = @selector(processCertD1iWithInt:withJavaUtilListArray:withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withJavaUtilSet:);
  methods[14].selector = @selector(processCertD1iiWithInt:withJavaUtilListArray:withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withJavaUtilSet:);
  methods[15].selector = @selector(prepareNextCertB1WithInt:withJavaUtilListArray:withNSString:withJavaUtilMap:withJavaSecurityCertX509Certificate:);
  methods[16].selector = @selector(prepareNextCertB2WithInt:withJavaUtilListArray:withNSString:withLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[17].selector = @selector(isAnyPolicyWithJavaUtilSet:);
  methods[18].selector = @selector(findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector:withJavaUtilList:);
  methods[19].selector = @selector(getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint:withJavaUtilMap:);
  methods[20].selector = @selector(getCRLIssuersFromDistributionPointWithLibOrgBouncycastleAsn1X509DistributionPoint:withJavaUtilCollection:withJavaSecurityCertX509CRLSelector:);
  methods[21].selector = @selector(getSerialNumberWithId:);
  methods[22].selector = @selector(getCertStatusWithJavaUtilDate:withJavaSecurityCertX509CRL:withId:withLibOrgBouncycastleJceProviderJceProviderCertStatus:);
  methods[23].selector = @selector(getDeltaCRLsWithJavaUtilDate:withJavaSecurityCertX509CRL:withJavaUtilList:withJavaUtilList:);
  methods[24].selector = @selector(isDeltaCRLWithJavaSecurityCertX509CRL:);
  methods[25].selector = @selector(getCompleteCRLsWithLibOrgBouncycastleAsn1X509DistributionPoint:withId:withJavaUtilDate:withLibOrgBouncycastleJcajcePKIXExtendedParameters:);
  methods[26].selector = @selector(getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaSecurityCertCertPath:withInt:);
  methods[27].selector = @selector(getNextWorkingKeyWithJavaUtilList:withInt:withLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[28].selector = @selector(findIssuerCertsWithJavaSecurityCertX509Certificate:withJavaUtilList:withJavaUtilList:);
  methods[29].selector = @selector(verifyX509CertificateWithJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withNSString:);
  methods[30].selector = @selector(checkCRLsNotEmptyWithJavaUtilSet:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CRL_UTIL", "LLibOrgBouncycastleJceProviderJcePKIXCRLUtil;", .constantValue.asLong = 0, 0x1c, -1, 66, -1, -1 },
    { "CERTIFICATE_POLICIES", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 67, -1, -1 },
    { "BASIC_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 68, -1, -1 },
    { "POLICY_MAPPINGS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 69, -1, -1 },
    { "SUBJECT_ALTERNATIVE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 70, -1, -1 },
    { "NAME_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 71, -1, -1 },
    { "KEY_USAGE", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 72, -1, -1 },
    { "INHIBIT_ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 73, -1, -1 },
    { "ISSUING_DISTRIBUTION_POINT", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 74, -1, -1 },
    { "DELTA_CRL_INDICATOR", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 75, -1, -1 },
    { "POLICY_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 76, -1, -1 },
    { "FRESHEST_CRL", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 77, -1, -1 },
    { "CRL_DISTRIBUTION_POINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 78, -1, -1 },
    { "AUTHORITY_KEY_IDENTIFIER", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 79, -1, -1 },
    { "ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 80, -1, -1 },
    { "CRL_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 81, -1, -1 },
    { "KEY_CERT_SIGN", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_KEY_CERT_SIGN, 0x1c, -1, -1, -1, -1 },
    { "CRL_SIGN", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_SIGN, 0x1c, -1, -1, -1, -1 },
    { "crlReasons", "[LNSString;", .constantValue.asLong = 0, 0x1c, -1, 82, -1, -1 },
  };
  static const void *ptrTable[] = { "findTrustAnchor", "LJavaSecurityCertX509Certificate;LJavaUtilSet;", "LLibOrgBouncycastleJceProviderAnnotatedException;", "LJavaSecurityCertX509Certificate;LJavaUtilSet;LNSString;", "isIssuerTrustAnchor", "getAdditionalStoresFromAltNames", "[BLJavaUtilMap;", "LJavaSecurityCertCertificateParsingException;", "([BLjava/util/Map<Llib/org/bouncycastle/asn1/x509/GeneralName;Llib/org/bouncycastle/jcajce/PKIXCertStore;>;)Ljava/util/List<Llib/org/bouncycastle/jcajce/PKIXCertStore;>;", "getValidDate", "LLibOrgBouncycastleJcajcePKIXExtendedParameters;", "isSelfIssued", "LJavaSecurityCertX509Certificate;", "getExtensionValue", "LJavaSecurityCertX509Extension;LNSString;", "getObject", "LNSString;[B", "getAlgorithmIdentifier", "LJavaSecurityPublicKey;", "LJavaSecurityCertCertPathValidatorException;", "getQualifierSet", "LLibOrgBouncycastleAsn1ASN1Sequence;", "removePolicyNode", "LLibOrgBouncycastleJceProviderPKIXPolicyNode;[LJavaUtilList;LLibOrgBouncycastleJceProviderPKIXPolicyNode;", "removePolicyNodeRecurse", "[LJavaUtilList;LLibOrgBouncycastleJceProviderPKIXPolicyNode;", "processCertD1i", "I[LJavaUtilList;LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;LJavaUtilSet;", "processCertD1ii", "prepareNextCertB1", "I[LJavaUtilList;LNSString;LJavaUtilMap;LJavaSecurityCertX509Certificate;", "LLibOrgBouncycastleJceProviderAnnotatedException;LJavaSecurityCertCertPathValidatorException;", "prepareNextCertB2", "I[LJavaUtilList;LNSString;LLibOrgBouncycastleJceProviderPKIXPolicyNode;", "isAnyPolicy", "LJavaUtilSet;", "findCertificates", "LLibOrgBouncycastleJcajcePKIXCertStoreSelector;LJavaUtilList;", "getAdditionalStoresFromCRLDistributionPoint", "LLibOrgBouncycastleAsn1X509CRLDistPoint;LJavaUtilMap;", "(Llib/org/bouncycastle/asn1/x509/CRLDistPoint;Ljava/util/Map<Llib/org/bouncycastle/asn1/x509/GeneralName;Llib/org/bouncycastle/jcajce/PKIXCRLStore;>;)Ljava/util/List<Llib/org/bouncycastle/jcajce/PKIXCRLStore;>;", "getCRLIssuersFromDistributionPoint", "LLibOrgBouncycastleAsn1X509DistributionPoint;LJavaUtilCollection;LJavaSecurityCertX509CRLSelector;", "getSerialNumber", "LNSObject;", "getCertStatus", "LJavaUtilDate;LJavaSecurityCertX509CRL;LNSObject;LLibOrgBouncycastleJceProviderJceProviderCertStatus;", "getDeltaCRLs", "LJavaUtilDate;LJavaSecurityCertX509CRL;LJavaUtilList;LJavaUtilList;", "(Ljava/util/Date;Ljava/security/cert/X509CRL;Ljava/util/List<Ljava/security/cert/CertStore;>;Ljava/util/List<Llib/org/bouncycastle/jcajce/PKIXCRLStore;>;)Ljava/util/Set;", "isDeltaCRL", "LJavaSecurityCertX509CRL;", "getCompleteCRLs", "LLibOrgBouncycastleAsn1X509DistributionPoint;LNSObject;LJavaUtilDate;LLibOrgBouncycastleJcajcePKIXExtendedParameters;", "getValidCertDateFromValidityModel", "LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaSecurityCertCertPath;I", "getNextWorkingKey", "LJavaUtilList;ILLibOrgBouncycastleJcajceUtilJcaJceHelper;", "findIssuerCerts", "LJavaSecurityCertX509Certificate;LJavaUtilList;LJavaUtilList;", "(Ljava/security/cert/X509Certificate;Ljava/util/List<Ljava/security/cert/CertStore;>;Ljava/util/List<Llib/org/bouncycastle/jcajce/PKIXCertStore;>;)Ljava/util/Collection;", "verifyX509Certificate", "LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LNSString;", "LJavaSecurityGeneralSecurityException;", "checkCRLsNotEmpty", "LJavaUtilSet;LNSObject;", &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_UTIL, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_KEY_USAGE, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_FRESHEST_CRL, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_NUMBER, &LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_crlReasons };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities = { "JceProviderCertPathValidatorUtilities", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 31, 19, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities class]) {
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_UTIL = new_LibOrgBouncycastleJceProviderJcePKIXCRLUtil_init();
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, certificatePolicies))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, basicConstraints))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, policyMappings))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, subjectAlternativeName))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, nameConstraints))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_KEY_USAGE = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, keyUsage))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, inhibitAnyPolicy))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuingDistributionPoint))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, deltaCRLIndicator))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, policyConstraints))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_FRESHEST_CRL = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, freshestCRL))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, cRLDistributionPoints))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, authorityKeyIdentifier))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_NUMBER = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, cRLNumber))) getId];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_crlReasons = [IOSObjectArray newArrayWithObjects:(id[]){ @"unspecified", @"keyCompromise", @"cACompromise", @"affiliationChanged", @"superseded", @"cessationOfOperation", @"certificateHold", @"unknown", @"removeFromCRL", @"privilegeWithdrawn", @"aACompromise" } count:11 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities)
  }
}

@end

void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_init(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities *new_LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, init)
}

LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities *create_LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, init)
}

JavaSecurityCertTrustAnchor *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(cert, trustAnchors, nil);
}

JavaSecurityCertTrustAnchor *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors, NSString *sigProvider) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  JavaSecurityCertTrustAnchor *trust = nil;
  id<JavaSecurityPublicKey> trustPublicKey = nil;
  JavaLangException *invalidKeyEx = nil;
  JavaSecurityCertX509CertSelector *certSelectX509 = new_JavaSecurityCertX509CertSelector_init();
  LibOrgBouncycastleAsn1X500X500Name *certIssuer = LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert);
  @try {
    [certSelectX509 setSubjectWithByteArray:[((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(certIssuer)) getEncoded]];
  }
  @catch (JavaIoIOException *ex) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot set subject search criteria for trust anchor.", ex);
  }
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(trustAnchors)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && trust == nil) {
    trust = (JavaSecurityCertTrustAnchor *) cast_chk([iter next], [JavaSecurityCertTrustAnchor class]);
    if ([((JavaSecurityCertTrustAnchor *) nil_chk(trust)) getTrustedCert] != nil) {
      if ([certSelectX509 matchWithJavaSecurityCertCertificate:[trust getTrustedCert]]) {
        trustPublicKey = [((JavaSecurityCertX509Certificate *) nil_chk([trust getTrustedCert])) getPublicKey];
      }
      else {
        trust = nil;
      }
    }
    else if ([trust getCAName] != nil && [trust getCAPublicKey] != nil) {
      @try {
        LibOrgBouncycastleAsn1X500X500Name *caName = LibOrgBouncycastleJceProviderPrincipalUtils_getCAWithJavaSecurityCertTrustAnchor_(trust);
        if ([certIssuer isEqual:caName]) {
          trustPublicKey = [trust getCAPublicKey];
        }
        else {
          trust = nil;
        }
      }
      @catch (JavaLangIllegalArgumentException *ex) {
        trust = nil;
      }
    }
    else {
      trust = nil;
    }
    if (trustPublicKey != nil) {
      @try {
        LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, trustPublicKey, sigProvider);
      }
      @catch (JavaLangException *ex) {
        invalidKeyEx = ex;
        trust = nil;
        trustPublicKey = nil;
      }
    }
  }
  if (trust == nil && invalidKeyEx != nil) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"TrustAnchor found but certificate validation failed.", invalidKeyEx);
  }
  return trust;
}

jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors, NSString *sigProvider) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  @try {
    return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(cert, trustAnchors, sigProvider) != nil;
  }
  @catch (JavaLangException *e) {
    return false;
  }
}

id<JavaUtilList> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_(IOSByteArray *issuerAlternativeName, id<JavaUtilMap> altNameCertStoreMap) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  if (issuerAlternativeName != nil) {
    LibOrgBouncycastleAsn1X509GeneralNames *issuerAltName = LibOrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_(issuerAlternativeName))) getOctets]);
    IOSObjectArray *names = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk(issuerAltName)) getNames];
    id<JavaUtilList> stores = new_JavaUtilArrayList_init();
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(names))->size_; i++) {
      LibOrgBouncycastleAsn1X509GeneralName *altName = IOSObjectArray_Get(names, i);
      id<LibOrgBouncycastleJcajcePKIXCertStore> altStore = [((id<JavaUtilMap>) nil_chk(altNameCertStoreMap)) getWithId:altName];
      if (altStore != nil) {
        [stores addWithId:altStore];
      }
    }
    return stores;
  }
  else {
    return JreLoadStatic(JavaUtilCollections, EMPTY_LIST);
  }
}

JavaUtilDate *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  JavaUtilDate *validDate = [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getDate];
  if (validDate == nil) {
    validDate = new_JavaUtilDate_init();
  }
  return validDate;
}

jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  return [((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectDN])) isEqual:[cert getIssuerDN]];
}

LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(id<JavaSecurityCertX509Extension> ext, NSString *oid) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  IOSByteArray *bytes = [((id<JavaSecurityCertX509Extension>) nil_chk(ext)) getExtensionValueWithNSString:oid];
  if (bytes == nil) {
    return nil;
  }
  return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getObjectWithNSString_withByteArray_(oid, bytes);
}

LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getObjectWithNSString_withByteArray_(NSString *oid, IOSByteArray *ext) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  @try {
    LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(ext);
    LibOrgBouncycastleAsn1ASN1OctetString *octs = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([aIn readObject], [LibOrgBouncycastleAsn1ASN1OctetString class]);
    aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(octs)) getOctets]);
    return [aIn readObject];
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"exception processing extension ", oid), e);
  }
}

LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  @try {
    LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded]);
    LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([aIn readObject]);
    return [((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithm];
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Subject public key cannot be decoded.", e);
  }
}

id<JavaUtilSet> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *qualifiers) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  id<JavaUtilSet> pq = new_JavaUtilHashSet_init();
  if (qualifiers == nil) {
    return pq;
  }
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  LibOrgBouncycastleAsn1ASN1OutputStream *aOut = new_LibOrgBouncycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(bOut);
  id<JavaUtilEnumeration> e = [qualifiers getObjects];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    @try {
      [aOut writeObjectWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>) cast_check([e nextElement], LibOrgBouncycastleAsn1ASN1Encodable_class_())];
      [pq addWithId:new_JavaSecurityCertPolicyQualifierInfo_initWithByteArray_([bOut toByteArray])];
    }
    @catch (JavaIoIOException *ex) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Policy qualifier info cannot be decoded.", ex);
    }
    [bOut reset];
  }
  return pq;
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *_node) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  LibOrgBouncycastleJceProviderPKIXPolicyNode *_parent = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getParent], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
  if (validPolicyTree == nil) {
    return nil;
  }
  if (_parent == nil) {
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(policyNodes))->size_; j++) {
      (void) IOSObjectArray_SetAndConsume(policyNodes, j, new_JavaUtilArrayList_init());
    }
    return nil;
  }
  else {
    [_parent removeChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:_node];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(policyNodes, _node);
    return validPolicyTree;
  }
}

void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *_node) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getDepth]))) removeWithId:_node];
  if ([_node hasChildren]) {
    id<JavaUtilIterator> _iter = [_node getChildren];
    while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
      LibOrgBouncycastleJceProviderPKIXPolicyNode *_child = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_iter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
      LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(policyNodes, _child);
    }
  }
}

jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *pOid, id<JavaUtilSet> pq) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  id<JavaUtilList> policyNodeVec = IOSObjectArray_Get(nil_chk(policyNodes), index - 1);
  for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(policyNodeVec)) size]; j++) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([policyNodeVec getWithInt:j], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
    id<JavaUtilSet> expectedPolicies = [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getExpectedPolicies];
    if ([((id<JavaUtilSet>) nil_chk(expectedPolicies)) containsWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(pOid)) getId]]) {
      id<JavaUtilSet> childExpectedPolicies = new_JavaUtilHashSet_init();
      [childExpectedPolicies addWithId:[pOid getId]];
      LibOrgBouncycastleJceProviderPKIXPolicyNode *child = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), index, childExpectedPolicies, node, pq, [pOid getId], false);
      [node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:child];
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, index))) addWithId:child];
      return true;
    }
  }
  return false;
}

void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *_poid, id<JavaUtilSet> _pq) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  id<JavaUtilList> policyNodeVec = IOSObjectArray_Get(nil_chk(policyNodes), index - 1);
  for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(policyNodeVec)) size]; j++) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([policyNodeVec getWithInt:j], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
    if ([((NSString *) nil_chk(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
      id<JavaUtilSet> _childExpectedPolicies = new_JavaUtilHashSet_init();
      [_childExpectedPolicies addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(_poid)) getId]];
      LibOrgBouncycastleJceProviderPKIXPolicyNode *_child = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), index, _childExpectedPolicies, _node, _pq, [_poid getId], false);
      [_node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:_child];
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, index))) addWithId:_child];
      return;
    }
  }
}

void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(jint i, IOSObjectArray *policyNodes, NSString *id_p, id<JavaUtilMap> m_idp, JavaSecurityCertX509Certificate *cert) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  jboolean idp_found = false;
  id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
    if ([((NSString *) nil_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
      idp_found = true;
      node->expectedPolicies_ = (id<JavaUtilSet>) cast_check([((id<JavaUtilMap>) nil_chk(m_idp)) getWithId:id_p], JavaUtilSet_class_());
      break;
    }
  }
  if (!idp_found) {
    nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
      LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
      if ([((NSString *) nil_chk(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy]]) {
        id<JavaUtilSet> pq = nil;
        LibOrgBouncycastleAsn1ASN1Sequence *policies = nil;
        @try {
          policies = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES));
        }
        @catch (JavaLangException *e) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Certificate policies cannot be decoded.", e);
        }
        id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(policies)) getObjects];
        while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
          LibOrgBouncycastleAsn1X509PolicyInformation *pinfo = nil;
          @try {
            pinfo = LibOrgBouncycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
          }
          @catch (JavaLangException *ex) {
            @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Policy information cannot be decoded.", ex);
          }
          if ([LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509PolicyInformation *) nil_chk(pinfo)) getPolicyIdentifier])) getId]]) {
            @try {
              pq = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_([pinfo getPolicyQualifiers]);
            }
            @catch (JavaSecurityCertCertPathValidatorException *ex) {
              @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Policy qualifier info set could not be built.", ex);
            }
            break;
          }
        }
        jboolean ci = false;
        if ([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs] != nil) {
          ci = [((id<JavaUtilSet>) nil_chk([cert getCriticalExtensionOIDs])) containsWithId:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES];
        }
        LibOrgBouncycastleJceProviderPKIXPolicyNode *p_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
        if ([LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) getValidPolicy]]) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *c_node = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), i, (id<JavaUtilSet>) cast_check([((id<JavaUtilMap>) nil_chk(m_idp)) getWithId:id_p], JavaUtilSet_class_()), p_node, pq, id_p, ci);
          [p_node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:c_node];
          [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) addWithId:c_node];
        }
        break;
      }
    }
  }
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(jint i, IOSObjectArray *policyNodes, NSString *id_p, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
    if ([((NSString *) nil_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
      LibOrgBouncycastleJceProviderPKIXPolicyNode *p_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
      [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) removeChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:node];
      [nodes_i remove];
      for (jint k = (i - 1); k >= 0; k--) {
        id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, k);
        for (jint l = 0; l < [((id<JavaUtilList>) nil_chk(nodes)) size]; l++) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *node2 = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:l], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
          if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node2)) hasChildren]) {
            validPolicyTree = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, node2);
            if (validPolicyTree == nil) {
              break;
            }
          }
        }
      }
    }
  }
  return validPolicyTree;
}

jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(id<JavaUtilSet> policySet) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  return policySet == nil || [policySet containsWithId:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY] || [policySet isEmpty];
}

id<JavaUtilCollection> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(LibOrgBouncycastleJcajcePKIXCertStoreSelector *certSelect, id<JavaUtilList> certStores) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  id<JavaUtilSet> certs = new_JavaUtilLinkedHashSet_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(certStores)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id obj = [iter next];
    if ([LibOrgBouncycastleUtilStore_class_() isInstance:obj]) {
      id<LibOrgBouncycastleUtilStore> certStore = (id<LibOrgBouncycastleUtilStore>) cast_check(obj, LibOrgBouncycastleUtilStore_class_());
      @try {
        [certs addAllWithJavaUtilCollection:[((id<LibOrgBouncycastleUtilStore>) nil_chk(certStore)) getMatchesWithLibOrgBouncycastleUtilSelector:certSelect]];
      }
      @catch (LibOrgBouncycastleUtilStoreException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while picking certificates from X.509 store.", e);
      }
    }
    else {
      JavaSecurityCertCertStore *certStore = (JavaSecurityCertCertStore *) cast_chk(obj, [JavaSecurityCertCertStore class]);
      @try {
        [certs addAllWithJavaUtilCollection:LibOrgBouncycastleJcajcePKIXCertStoreSelector_getCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaSecurityCertCertStore_(certSelect, certStore)];
      }
      @catch (JavaSecurityCertCertStoreException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while picking certificates from certificate store.", e);
      }
    }
  }
  return certs;
}

id<JavaUtilList> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint_withJavaUtilMap_(LibOrgBouncycastleAsn1X509CRLDistPoint *crldp, id<JavaUtilMap> namedCRLStoreMap) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  if (crldp != nil) {
    IOSObjectArray *dps = nil;
    @try {
      dps = [crldp getDistributionPoints];
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Distribution points could not be read.", e);
    }
    id<JavaUtilList> stores = new_JavaUtilArrayList_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(dps))->size_; i++) {
      LibOrgBouncycastleAsn1X509DistributionPointName *dpn = [((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(IOSObjectArray_Get(dps, i))) getDistributionPoint];
      if (dpn != nil) {
        if ([dpn getType] == LibOrgBouncycastleAsn1X509DistributionPointName_FULL_NAME) {
          IOSObjectArray *genNames = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk(LibOrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([dpn getName]))) getNames];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
            id<LibOrgBouncycastleJcajcePKIXCRLStore> store = [((id<JavaUtilMap>) nil_chk(namedCRLStoreMap)) getWithId:IOSObjectArray_Get(genNames, j)];
            if (store != nil) {
              [stores addWithId:store];
            }
          }
        }
      }
    }
    return stores;
  }
  else {
    return JreLoadStatic(JavaUtilCollections, EMPTY_LIST);
  }
}

void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCRLIssuersFromDistributionPointWithLibOrgBouncycastleAsn1X509DistributionPoint_withJavaUtilCollection_withJavaSecurityCertX509CRLSelector_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id<JavaUtilCollection> issuerPrincipals, JavaSecurityCertX509CRLSelector *selector) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  id<JavaUtilList> issuers = new_JavaUtilArrayList_init();
  if ([((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(dp)) getCRLIssuer] != nil) {
    IOSObjectArray *genNames = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk([dp getCRLIssuer])) getNames];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
      if ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getTagNo] == LibOrgBouncycastleAsn1X509GeneralName_directoryName) {
        @try {
          [issuers addWithId:LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getName])) toASN1Primitive])) getEncoded])];
        }
        @catch (JavaIoIOException *e) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"CRL issuer information from distribution point cannot be decoded.", e);
        }
      }
    }
  }
  else {
    if ([dp getDistributionPoint] == nil) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"CRL issuer is omitted from distribution point but no distributionPoint field present.");
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(issuerPrincipals)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      [issuers addWithId:[it next]];
    }
  }
  id<JavaUtilIterator> it = [issuers iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    @try {
      [((JavaSecurityCertX509CRLSelector *) nil_chk(selector)) addIssuerNameWithByteArray:[((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(((LibOrgBouncycastleAsn1X500X500Name *) cast_chk([it next], [LibOrgBouncycastleAsn1X500X500Name class])))) getEncoded]];
    }
    @catch (JavaIoIOException *ex) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot decode CRL issuer information.", ex);
    }
  }
}

JavaMathBigInteger *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(id cert) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  return [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class])))) getSerialNumber];
}

void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *crl, id cert, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  JavaSecurityCertX509CRLEntry *crl_entry = nil;
  jboolean isIndirect;
  @try {
    isIndirect = LibOrgBouncycastleJceProviderX509CRLObject_isIndirectCRLWithJavaSecurityCertX509CRL_(crl);
  }
  @catch (JavaSecurityCertCRLException *exception) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Failed check for indirect CRL.", exception);
  }
  if (isIndirect) {
    crl_entry = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getRevokedCertificateWithJavaMathBigInteger:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(cert)];
    if (crl_entry == nil) {
      return;
    }
    JavaxSecurityAuthX500X500Principal *certificateIssuer = [crl_entry getCertificateIssuer];
    LibOrgBouncycastleAsn1X500X500Name *certIssuer;
    if (certificateIssuer == nil) {
      certIssuer = LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl);
    }
    else {
      certIssuer = LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_([certificateIssuer getEncoded]);
    }
    if (![((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) isEqual:certIssuer]) {
      return;
    }
  }
  else if (![((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) isEqual:LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl)]) {
    return;
  }
  else {
    crl_entry = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getRevokedCertificateWithJavaMathBigInteger:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(cert)];
    if (crl_entry == nil) {
      return;
    }
  }
  LibOrgBouncycastleAsn1ASN1Enumerated *reasonCode = nil;
  if ([crl_entry hasExtensions]) {
    @try {
      reasonCode = LibOrgBouncycastleAsn1ASN1Enumerated_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl_entry, [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, reasonCode))) getId]));
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Reason code CRL entry extension could not be decoded.", e);
    }
  }
  if (!([((JavaUtilDate *) nil_chk(validDate)) getTime] < [((JavaUtilDate *) nil_chk([crl_entry getRevocationDate])) getTime]) || reasonCode == nil || [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 0 || [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 1 || [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 2 || [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 8) {
    if (reasonCode != nil) {
      [((LibOrgBouncycastleJceProviderJceProviderCertStatus *) nil_chk(certStatus)) setCertStatusWithInt:[((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue]];
    }
    else {
      [((LibOrgBouncycastleJceProviderJceProviderCertStatus *) nil_chk(certStatus)) setCertStatusWithInt:LibOrgBouncycastleAsn1X509CRLReason_unspecified];
    }
    [certStatus setRevocationDateWithJavaUtilDate:[crl_entry getRevocationDate]];
  }
}

id<JavaUtilSet> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(JavaUtilDate *validityDate, JavaSecurityCertX509CRL *completeCRL, id<JavaUtilList> certStores, id<JavaUtilList> pkixCrlStores) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  JavaSecurityCertX509CRLSelector *baseDeltaSelect = new_JavaSecurityCertX509CRLSelector_init();
  @try {
    [baseDeltaSelect addIssuerNameWithByteArray:[((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(completeCRL))) getEncoded]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot extract issuer from CRL.", e);
  }
  JavaMathBigInteger *completeCRLNumber = nil;
  @try {
    LibOrgBouncycastleAsn1ASN1Primitive *derObject = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(completeCRL, LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_NUMBER);
    if (derObject != nil) {
      completeCRLNumber = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(derObject))) getPositiveValue];
    }
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"CRL number extension could not be extracted from CRL.", e);
  }
  IOSByteArray *idp = nil;
  @try {
    idp = [((JavaSecurityCertX509CRL *) nil_chk(completeCRL)) getExtensionValueWithNSString:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT];
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuing distribution point extension value could not be read.", e);
  }
  [baseDeltaSelect setMinCRLNumberWithJavaMathBigInteger:completeCRLNumber == nil ? nil : [completeCRLNumber addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(1)]];
  LibOrgBouncycastleJcajcePKIXCRLStoreSelector_Builder *selBuilder = new_LibOrgBouncycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(baseDeltaSelect);
  [selBuilder setIssuingDistributionPointWithByteArray:idp];
  [selBuilder setIssuingDistributionPointEnabledWithBoolean:true];
  [selBuilder setMaxBaseCRLNumberWithJavaMathBigInteger:completeCRLNumber];
  LibOrgBouncycastleJcajcePKIXCRLStoreSelector *deltaSelect = [selBuilder build];
  id<JavaUtilSet> temp = [((LibOrgBouncycastleJceProviderJcePKIXCRLUtil *) nil_chk(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_UTIL)) findCRLsWithLibOrgBouncycastleJcajcePKIXCRLStoreSelector:deltaSelect withJavaUtilDate:validityDate withJavaUtilList:certStores withJavaUtilList:pkixCrlStores];
  id<JavaUtilSet> result = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(temp)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk([it next], [JavaSecurityCertX509CRL class]);
    if (LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isDeltaCRLWithJavaSecurityCertX509CRL_(crl)) {
      [result addWithId:crl];
    }
  }
  return result;
}

jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isDeltaCRLWithJavaSecurityCertX509CRL_(JavaSecurityCertX509CRL *crl) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  id<JavaUtilSet> critical = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getCriticalExtensionOIDs];
  if (critical == nil) {
    return false;
  }
  return [critical containsWithId:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)];
}

id<JavaUtilSet> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCompleteCRLsWithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id cert, JavaUtilDate *currentDate, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  JavaSecurityCertX509CRLSelector *baseCrlSelect = new_JavaSecurityCertX509CRLSelector_init();
  @try {
    id<JavaUtilSet> issuers = new_JavaUtilHashSet_init();
    [issuers addWithId:LibOrgBouncycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert)];
    LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCRLIssuersFromDistributionPointWithLibOrgBouncycastleAsn1X509DistributionPoint_withJavaUtilCollection_withJavaSecurityCertX509CRLSelector_(dp, issuers, baseCrlSelect);
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Could not get issuer information from distribution point.", e);
  }
  if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
    [baseCrlSelect setCertificateCheckingWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *) cert];
  }
  LibOrgBouncycastleJcajcePKIXCRLStoreSelector *crlSelect = [((LibOrgBouncycastleJcajcePKIXCRLStoreSelector_Builder *) nil_chk([new_LibOrgBouncycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(baseCrlSelect) setCompleteCRLEnabledWithBoolean:true])) build];
  JavaUtilDate *validityDate = currentDate;
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getDate] != nil) {
    validityDate = [paramsPKIX getDate];
  }
  id<JavaUtilSet> crls = [((LibOrgBouncycastleJceProviderJcePKIXCRLUtil *) nil_chk(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_UTIL)) findCRLsWithLibOrgBouncycastleJcajcePKIXCRLStoreSelector:crlSelect withJavaUtilDate:validityDate withJavaUtilList:[paramsPKIX getCertStores] withJavaUtilList:[paramsPKIX getCRLStores]];
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_checkCRLsNotEmptyWithJavaUtilSet_withId_(crls, cert);
  return crls;
}

JavaUtilDate *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertCertPath *certPath, jint index) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getValidityModel] == LibOrgBouncycastleJcajcePKIXExtendedParameters_CHAIN_VALIDITY_MODEL) {
    if (index <= 0) {
      return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(paramsPKIX);
    }
    else {
      if (index - 1 == 0) {
        LibOrgBouncycastleAsn1ASN1GeneralizedTime *dateOfCertgen = nil;
        @try {
          IOSByteArray *extBytes = [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates])) getWithInt:index - 1], [JavaSecurityCertX509Certificate class])))) getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1IsismttISISMTTObjectIdentifiers, id_isismtt_at_dateOfCertGen))) getId]];
          if (extBytes != nil) {
            dateOfCertgen = LibOrgBouncycastleAsn1ASN1GeneralizedTime_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(extBytes));
          }
        }
        @catch (JavaIoIOException *e) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Date of cert gen extension could not be read.");
        }
        @catch (JavaLangIllegalArgumentException *e) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Date of cert gen extension could not be read.");
        }
        if (dateOfCertgen != nil) {
          @try {
            return [dateOfCertgen getDate];
          }
          @catch (JavaTextParseException *e) {
            @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Date from date of cert gen extension could not be parsed.", e);
          }
        }
        return [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([certPath getCertificates])) getWithInt:index - 1], [JavaSecurityCertX509Certificate class])))) getNotBefore];
      }
      else {
        return [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates])) getWithInt:index - 1], [JavaSecurityCertX509Certificate class])))) getNotBefore];
      }
    }
  }
  else {
    return LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(paramsPKIX);
  }
}

id<JavaSecurityPublicKey> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<JavaUtilList> certs, jint index, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  JavaSecurityCertCertificate *cert = (JavaSecurityCertCertificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertCertificate class]);
  id<JavaSecurityPublicKey> pubKey = [((JavaSecurityCertCertificate *) nil_chk(cert)) getPublicKey];
  if (!([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:pubKey])) {
    return pubKey;
  }
  id<JavaSecurityInterfacesDSAPublicKey> dsaPubKey = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pubKey, JavaSecurityInterfacesDSAPublicKey_class_());
  if ([((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(dsaPubKey)) getParams] != nil) {
    return dsaPubKey;
  }
  for (jint i = index + 1; i < [certs size]; i++) {
    JavaSecurityCertX509Certificate *parentCert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class]);
    pubKey = [((JavaSecurityCertX509Certificate *) nil_chk(parentCert)) getPublicKey];
    if (!([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:pubKey])) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"DSA parameters cannot be inherited from previous certificate.");
    }
    id<JavaSecurityInterfacesDSAPublicKey> prevDSAPubKey = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pubKey, JavaSecurityInterfacesDSAPublicKey_class_());
    if ([((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(prevDSAPubKey)) getParams] == nil) {
      continue;
    }
    id<JavaSecurityInterfacesDSAParams> dsaParams = [prevDSAPubKey getParams];
    JavaSecuritySpecDSAPublicKeySpec *dsaPubKeySpec = new_JavaSecuritySpecDSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([dsaPubKey getY], [((id<JavaSecurityInterfacesDSAParams>) nil_chk(dsaParams)) getP], [dsaParams getQ], [dsaParams getG]);
    @try {
      JavaSecurityKeyFactory *keyFactory = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper)) createKeyFactoryWithNSString:@"DSA"];
      return [((JavaSecurityKeyFactory *) nil_chk(keyFactory)) generatePublicWithJavaSecuritySpecKeySpec:dsaPubKeySpec];
    }
    @catch (JavaLangException *exception) {
      @throw new_JavaLangRuntimeException_initWithNSString_([exception getMessage]);
    }
  }
  @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"DSA parameters cannot be inherited from previous certificate.");
}

id<JavaUtilCollection> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(JavaSecurityCertX509Certificate *cert, id<JavaUtilList> certStores, id<JavaUtilList> pkixCertStores) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  JavaSecurityCertX509CertSelector *selector = new_JavaSecurityCertX509CertSelector_init();
  @try {
    [selector setSubjectWithByteArray:[((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509Certificate_(cert))) getEncoded]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Subject criteria for certificate selector to find issuer certificate could not be set.", e);
  }
  @try {
    IOSByteArray *akiExtensionValue = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getExtensionValueWithNSString:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER];
    if (akiExtensionValue != nil) {
      LibOrgBouncycastleAsn1ASN1OctetString *aki = LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_(akiExtensionValue);
      IOSByteArray *authorityKeyIdentifier = [((LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier *) nil_chk(LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(aki)) getOctets]))) getKeyIdentifier];
      if (authorityKeyIdentifier != nil) {
        [selector setSubjectKeyIdentifierWithByteArray:[new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(authorityKeyIdentifier) getEncoded]];
      }
    }
  }
  @catch (JavaLangException *e) {
  }
  LibOrgBouncycastleJcajcePKIXCertStoreSelector *certSelect = [new_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(selector) build];
  id<JavaUtilSet> certs = new_JavaUtilLinkedHashSet_init();
  id<JavaUtilIterator> iter;
  @try {
    id<JavaUtilList> matches = new_JavaUtilArrayList_init();
    [matches addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, certStores)];
    [matches addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, pkixCertStores)];
    iter = [matches iterator];
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuer certificate cannot be searched.", e);
  }
  JavaSecurityCertX509Certificate *issuer = nil;
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    issuer = (JavaSecurityCertX509Certificate *) cast_chk([iter next], [JavaSecurityCertX509Certificate class]);
    [certs addWithId:issuer];
  }
  return certs;
}

void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaSecurityPublicKey> publicKey, NSString *sigProvider) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  if (sigProvider == nil) {
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) verifyWithJavaSecurityPublicKey:publicKey];
  }
  else {
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) verifyWithJavaSecurityPublicKey:publicKey withNSString:sigProvider];
  }
}

void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_checkCRLsNotEmptyWithJavaUtilSet_withId_(id<JavaUtilSet> crls, id cert) {
  LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_initialize();
  if ([((id<JavaUtilSet>) nil_chk(crls)) isEmpty]) {
    if ([LibOrgBouncycastleX509X509AttributeCertificate_class_() isInstance:cert]) {
      id<LibOrgBouncycastleX509X509AttributeCertificate> aCert = (id<LibOrgBouncycastleX509X509AttributeCertificate>) cast_check(cert, LibOrgBouncycastleX509X509AttributeCertificate_class_());
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(JreStrcat("$@C", @"No CRLs found for issuer \"", IOSObjectArray_Get(nil_chk([((LibOrgBouncycastleX509AttributeCertificateIssuer *) nil_chk([((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(aCert)) getIssuer])) getPrincipals]), 0), '"'));
    }
    else {
      JavaSecurityCertX509Certificate *xCert = (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class]);
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(JreStrcat("$$C", @"No CRLs found for issuer \"", [((id<LibOrgBouncycastleAsn1X500X500NameStyle>) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X500StyleRFC4519Style, INSTANCE))) toStringWithLibOrgBouncycastleAsn1X500X500Name:LibOrgBouncycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509Certificate_(xCert)], '"'));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities)
