//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "Digest.h"
#include "HashFunctions.h"
#include "Horst.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "SPHINCS256Config.h"
#include "SPHINCS256KeyGenerationParameters.h"
#include "SPHINCS256KeyPairGenerator.h"
#include "SPHINCSPrivateKeyParameters.h"
#include "SPHINCSPublicKeyParameters.h"
#include "Tree.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator () {
 @public
  JavaSecuritySecureRandom *random_;
  id<LibOrgBouncycastleCryptoDigest> treeDigest_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, treeDigest_, id<LibOrgBouncycastleCryptoDigest>)

@implementation LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  random_ = [((LibOrgBouncycastleCryptoKeyGenerationParameters *) nil_chk(param)) getRandom];
  treeDigest_ = [((LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters class])) getTreeDigest];
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *a = new_LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_init();
  IOSByteArray *sk = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES];
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:sk];
  IOSByteArray *pk = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sk, LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES, pk, 0, LibOrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  a->level_ = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS - 1;
  a->subtree_ = 0;
  a->subleaf_ = 0;
  LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs = new_LibOrgBouncycastlePqcCryptoSphincsHashFunctions_initWithLibOrgBouncycastleCryptoDigest_(treeDigest_);
  LibOrgBouncycastlePqcCryptoSphincsTree_treehashWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(hs, pk, (LibOrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT, sk, a, pk, 0);
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_LibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_initWithByteArray_withNSString_(pk, [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(treeDigest_)) getAlgorithmName]), new_LibOrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_withNSString_(sk, [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(treeDigest_)) getAlgorithmName]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeDigest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator = { "SPHINCS256KeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *new_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *create_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator)
