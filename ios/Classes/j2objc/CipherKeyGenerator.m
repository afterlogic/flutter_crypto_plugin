//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/CipherKeyGenerator.java
//

#include "CipherKeyGenerator.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "java/security/SecureRandom.h"

@implementation LibOrgBouncycastleCryptoCipherKeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoCipherKeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  self->random_ = [((LibOrgBouncycastleCryptoKeyGenerationParameters *) nil_chk(param)) getRandom];
  self->strength_ = ([param getStrength] + 7) / 8;
}

- (IOSByteArray *)generateKey {
  IOSByteArray *key = [IOSByteArray newArrayWithLength:strength_];
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:key];
  return key;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoCipherKeyGenerator = { "CipherKeyGenerator", "lib.org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoCipherKeyGenerator;
}

@end

void LibOrgBouncycastleCryptoCipherKeyGenerator_init(LibOrgBouncycastleCryptoCipherKeyGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoCipherKeyGenerator *new_LibOrgBouncycastleCryptoCipherKeyGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoCipherKeyGenerator, init)
}

LibOrgBouncycastleCryptoCipherKeyGenerator *create_LibOrgBouncycastleCryptoCipherKeyGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoCipherKeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoCipherKeyGenerator)
