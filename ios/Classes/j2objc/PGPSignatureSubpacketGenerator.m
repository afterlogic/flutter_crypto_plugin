//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPSignatureSubpacketGenerator.java
//

#include "EmbeddedSignature.h"
#include "Exportable.h"
#include "Features.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuerKeyID.h"
#include "J2ObjC_source.h"
#include "KeyExpirationTime.h"
#include "KeyFlags.h"
#include "NotationData.h"
#include "PGPSignature.h"
#include "PGPSignatureSubpacketGenerator.h"
#include "PGPSignatureSubpacketVector.h"
#include "PreferredAlgorithms.h"
#include "PrimaryUserID.h"
#include "Revocable.h"
#include "RevocationKey.h"
#include "RevocationKeyTags.h"
#include "RevocationReason.h"
#include "SignatureCreationTime.h"
#include "SignatureExpirationTime.h"
#include "SignatureSubpacket.h"
#include "SignatureSubpacketTags.h"
#include "SignatureTarget.h"
#include "SignerUserID.h"
#include "TrustSignature.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"

@implementation LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setRevocableWithBoolean:(jboolean)isCritical
                    withBoolean:(jboolean)isRevocable {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigRevocable_initWithBoolean_withBoolean_(isCritical, isRevocable)];
}

- (void)setExportableWithBoolean:(jboolean)isCritical
                     withBoolean:(jboolean)isExportable {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_(isCritical, isExportable)];
}

- (void)setFeatureWithBoolean:(jboolean)isCritical
                     withByte:(jbyte)feature {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigFeatures_initWithBoolean_withByte_(isCritical, feature)];
}

- (void)setTrustWithBoolean:(jboolean)isCritical
                    withInt:(jint)depth
                    withInt:(jint)trustAmount {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withInt_withInt_(isCritical, depth, trustAmount)];
}

- (void)setKeyExpirationTimeWithBoolean:(jboolean)isCritical
                               withLong:(jlong)seconds {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigKeyExpirationTime_initWithBoolean_withLong_(isCritical, seconds)];
}

- (void)setSignatureExpirationTimeWithBoolean:(jboolean)isCritical
                                     withLong:(jlong)seconds {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigSignatureExpirationTime_initWithBoolean_withLong_(isCritical, seconds)];
}

- (void)setSignatureCreationTimeWithBoolean:(jboolean)isCritical
                           withJavaUtilDate:(JavaUtilDate *)date {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigSignatureCreationTime_initWithBoolean_withJavaUtilDate_(isCritical, date)];
}

- (void)setPreferredHashAlgorithmsWithBoolean:(jboolean)isCritical
                                 withIntArray:(IOSIntArray *)algorithms {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigPreferredAlgorithms_initWithInt_withBoolean_withIntArray_(LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_HASH_ALGS, isCritical, algorithms)];
}

- (void)setPreferredSymmetricAlgorithmsWithBoolean:(jboolean)isCritical
                                      withIntArray:(IOSIntArray *)algorithms {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigPreferredAlgorithms_initWithInt_withBoolean_withIntArray_(LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_SYM_ALGS, isCritical, algorithms)];
}

- (void)setPreferredCompressionAlgorithmsWithBoolean:(jboolean)isCritical
                                        withIntArray:(IOSIntArray *)algorithms {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigPreferredAlgorithms_initWithInt_withBoolean_withIntArray_(LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_COMP_ALGS, isCritical, algorithms)];
}

- (void)setKeyFlagsWithBoolean:(jboolean)isCritical
                       withInt:(jint)flags {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withInt_(isCritical, flags)];
}

- (void)setSignerUserIDWithBoolean:(jboolean)isCritical
                      withNSString:(NSString *)userID {
  if (userID == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"attempt to set null SignerUserID");
  }
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigSignerUserID_initWithBoolean_withNSString_(isCritical, userID)];
}

- (void)setSignerUserIDWithBoolean:(jboolean)isCritical
                     withByteArray:(IOSByteArray *)rawUserID {
  if (rawUserID == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"attempt to set null SignerUserID");
  }
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigSignerUserID_initWithBoolean_withBoolean_withByteArray_(isCritical, false, rawUserID)];
}

- (void)setEmbeddedSignatureWithBoolean:(jboolean)isCritical
withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)pgpSignature {
  IOSByteArray *sig = [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(pgpSignature)) getEncoded];
  IOSByteArray *data;
  if (((IOSByteArray *) nil_chk(sig))->size_ - 1 > 256) {
    data = [IOSByteArray newArrayWithLength:sig->size_ - 3];
  }
  else {
    data = [IOSByteArray newArrayWithLength:sig->size_ - 2];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sig, sig->size_ - data->size_, data, 0, data->size_);
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigEmbeddedSignature_initWithBoolean_withBoolean_withByteArray_(isCritical, false, data)];
}

- (void)setPrimaryUserIDWithBoolean:(jboolean)isCritical
                        withBoolean:(jboolean)isPrimaryUserID {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigPrimaryUserID_initWithBoolean_withBoolean_(isCritical, isPrimaryUserID)];
}

- (void)setNotationDataWithBoolean:(jboolean)isCritical
                       withBoolean:(jboolean)isHumanReadable
                      withNSString:(NSString *)notationName
                      withNSString:(NSString *)notationValue {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withNSString_withNSString_(isCritical, isHumanReadable, notationName, notationValue)];
}

- (void)setRevocationReasonWithBoolean:(jboolean)isCritical
                              withByte:(jbyte)reason
                          withNSString:(NSString *)description_ {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigRevocationReason_initWithBoolean_withByte_withNSString_(isCritical, reason, description_)];
}

- (void)setRevocationKeyWithBoolean:(jboolean)isCritical
                            withInt:(jint)keyAlgorithm
                      withByteArray:(IOSByteArray *)fingerprint {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigRevocationKey_initWithBoolean_withByte_withInt_withByteArray_(isCritical, LibOrgBouncycastleBcpgSigRevocationKeyTags_CLASS_DEFAULT, keyAlgorithm, fingerprint)];
}

- (void)setIssuerKeyIDWithBoolean:(jboolean)isCritical
                         withLong:(jlong)keyID {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigIssuerKeyID_initWithBoolean_withLong_(isCritical, keyID)];
}

- (void)setSignatureTargetWithBoolean:(jboolean)isCritical
                              withInt:(jint)publicKeyAlgorithm
                              withInt:(jint)hashAlgorithm
                        withByteArray:(IOSByteArray *)hashData {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:new_LibOrgBouncycastleBcpgSigSignatureTarget_initWithBoolean_withInt_withInt_withByteArray_(isCritical, publicKeyAlgorithm, hashAlgorithm, hashData)];
}

- (LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)generate {
  return new_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_initWithLibOrgBouncycastleBcpgSignatureSubpacketArray_((IOSObjectArray *) cast_check([((id<JavaUtilList>) nil_chk(list_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[list_ size] type:LibOrgBouncycastleBcpgSignatureSubpacket_class_()]], IOSClass_arrayType(LibOrgBouncycastleBcpgSignatureSubpacket_class_(), 1)));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, 23, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setRevocableWithBoolean:withBoolean:);
  methods[2].selector = @selector(setExportableWithBoolean:withBoolean:);
  methods[3].selector = @selector(setFeatureWithBoolean:withByte:);
  methods[4].selector = @selector(setTrustWithBoolean:withInt:withInt:);
  methods[5].selector = @selector(setKeyExpirationTimeWithBoolean:withLong:);
  methods[6].selector = @selector(setSignatureExpirationTimeWithBoolean:withLong:);
  methods[7].selector = @selector(setSignatureCreationTimeWithBoolean:withJavaUtilDate:);
  methods[8].selector = @selector(setPreferredHashAlgorithmsWithBoolean:withIntArray:);
  methods[9].selector = @selector(setPreferredSymmetricAlgorithmsWithBoolean:withIntArray:);
  methods[10].selector = @selector(setPreferredCompressionAlgorithmsWithBoolean:withIntArray:);
  methods[11].selector = @selector(setKeyFlagsWithBoolean:withInt:);
  methods[12].selector = @selector(setSignerUserIDWithBoolean:withNSString:);
  methods[13].selector = @selector(setSignerUserIDWithBoolean:withByteArray:);
  methods[14].selector = @selector(setEmbeddedSignatureWithBoolean:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[15].selector = @selector(setPrimaryUserIDWithBoolean:withBoolean:);
  methods[16].selector = @selector(setNotationDataWithBoolean:withBoolean:withNSString:withNSString:);
  methods[17].selector = @selector(setRevocationReasonWithBoolean:withByte:withNSString:);
  methods[18].selector = @selector(setRevocationKeyWithBoolean:withInt:withByteArray:);
  methods[19].selector = @selector(setIssuerKeyIDWithBoolean:withLong:);
  methods[20].selector = @selector(setSignatureTargetWithBoolean:withInt:withInt:withByteArray:);
  methods[21].selector = @selector(generate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setRevocable", "ZZ", "setExportable", "setFeature", "ZB", "setTrust", "ZII", "setKeyExpirationTime", "ZJ", "setSignatureExpirationTime", "setSignatureCreationTime", "ZLJavaUtilDate;", "setPreferredHashAlgorithms", "Z[I", "setPreferredSymmetricAlgorithms", "setPreferredCompressionAlgorithms", "setKeyFlags", "ZI", "setSignerUserID", "ZLNSString;", "Z[B", "setEmbeddedSignature", "ZLLibOrgBouncycastleOpenpgpPGPSignature;", "LJavaIoIOException;", "setPrimaryUserID", "setNotationData", "ZZLNSString;LNSString;", "setRevocationReason", "ZBLNSString;", "setRevocationKey", "ZI[B", "setIssuerKeyID", "setSignatureTarget", "ZII[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator = { "PGPSignatureSubpacketGenerator", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 22, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator;
}

@end

void LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator_init(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator *self) {
  NSObject_init(self);
  self->list_ = new_JavaUtilArrayList_init();
}

LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator *new_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator, init)
}

LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator *create_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator)
