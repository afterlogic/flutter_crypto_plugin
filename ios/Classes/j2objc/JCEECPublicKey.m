//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/JCEECPublicKey.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "BouncyCastleProvider.h"
#include "CryptoProObjectIdentifiers.h"
#include "DERBitString.h"
#include "DERNull.h"
#include "DEROctetString.h"
#include "EC5Util.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECGOST3410NamedCurveTable.h"
#include "ECGOST3410NamedCurves.h"
#include "ECNamedCurveParameterSpec.h"
#include "ECNamedCurveSpec.h"
#include "ECParameterSpec.h"
#include "ECPoint.h"
#include "ECPublicKeyParameters.h"
#include "ECPublicKeySpec.h"
#include "GOST3410PublicKeyAlgParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JCEECPublicKey.h"
#include "JcajceUtilECUtil.h"
#include "JcajceUtilKeyUtil.h"
#include "ProviderConfiguration.h"
#include "Strings.h"
#include "SubjectPublicKeyInfo.h"
#include "X962Parameters.h"
#include "X9ECParameters.h"
#include "X9ECPoint.h"
#include "X9IntegerConverter.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/ECPublicKeySpec.h"
#include "java/security/spec/EllipticCurve.h"

@interface LibOrgBouncycastleJceProviderJCEECPublicKey () {
 @public
  NSString *algorithm_;
  LibOrgBouncycastleMathEcECPoint *q_;
  JavaSecuritySpecECParameterSpec *ecSpec_;
  jboolean withCompression_;
  LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *gostParams_;
}

- (JavaSecuritySpecECParameterSpec *)createSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                            withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)dp;

- (void)populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info;

- (void)extractBytesWithByteArray:(IOSByteArray *)encKey
                          withInt:(jint)offSet
           withJavaMathBigInteger:(JavaMathBigInteger *)bI;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEECPublicKey, algorithm_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEECPublicKey, q_, LibOrgBouncycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEECPublicKey, ecSpec_, JavaSecuritySpecECParameterSpec *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEECPublicKey, gostParams_, LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *)

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *LibOrgBouncycastleJceProviderJCEECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, JavaSecuritySpecEllipticCurve *ellipticCurve, LibOrgBouncycastleCryptoParamsECDomainParameters *dp);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJCEECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJCEECPublicKey_extractBytesWithByteArray_withInt_withJavaMathBigInteger_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, IOSByteArray *encKey, jint offSet, JavaMathBigInteger *bI);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJCEECPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJCEECPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, JavaIoObjectOutputStream *outArg);

@implementation LibOrgBouncycastleJceProviderJCEECPublicKey

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleJceProviderJCEECPublicKey:(LibOrgBouncycastleJceProviderJCEECPublicKey *)key {
  LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleJceProviderJCEECPublicKey_(self, algorithm, key);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withJavaSecuritySpecECPublicKeySpec:(JavaSecuritySpecECPublicKeySpec *)spec {
  LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_(self, algorithm, spec);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleJceSpecECPublicKeySpec:(LibOrgBouncycastleJceSpecECPublicKeySpec *)spec {
  LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_(self, algorithm, spec);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)params
withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)spec {
  LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_(self, algorithm, params, spec);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)params
withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec {
  LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_(self, algorithm, params, spec);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)params {
  LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(self, algorithm, params);
  return self;
}

- (JavaSecuritySpecECParameterSpec *)createSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                            withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)dp {
  return LibOrgBouncycastleJceProviderJCEECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
}

- (instancetype)initWithJavaSecurityInterfacesECPublicKey:(id<JavaSecurityInterfacesECPublicKey>)key {
  LibOrgBouncycastleJceProviderJCEECPublicKey_initWithJavaSecurityInterfacesECPublicKey_(self, key);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info {
  LibOrgBouncycastleJceProviderJCEECPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
  return self;
}

- (void)populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info {
  LibOrgBouncycastleJceProviderJCEECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
}

- (NSString *)getAlgorithm {
  return algorithm_;
}

- (NSString *)getFormat {
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  id<LibOrgBouncycastleAsn1ASN1Encodable> params;
  LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info;
  if ([((NSString *) nil_chk(algorithm_)) isEqual:@"ECGOST3410"]) {
    if (gostParams_ != nil) {
      params = gostParams_;
    }
    else {
      if ([ecSpec_ isKindOfClass:[LibOrgBouncycastleJceSpecECNamedCurveSpec class]]) {
        params = new_LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1CryptoproECGOST3410NamedCurves_getOIDWithNSString_([((LibOrgBouncycastleJceSpecECNamedCurveSpec *) nil_chk(((LibOrgBouncycastleJceSpecECNamedCurveSpec *) ecSpec_))) getName]), JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3411_94_CryptoProParamSet));
      }
      else {
        LibOrgBouncycastleMathEcECCurve *curve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getCurve]);
        LibOrgBouncycastleAsn1X9X9ECParameters *ecP = new_LibOrgBouncycastleAsn1X9X9ECParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curve, LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECCurve_withJavaSecuritySpecECPoint_withBoolean_(curve, [((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getGenerator], withCompression_), [((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getOrder], JavaMathBigInteger_valueOfWithLong_([((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getCofactor]), [((JavaSecuritySpecEllipticCurve *) nil_chk([((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getCurve])) getSeed]);
        params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1X9X9ECParameters_(ecP);
      }
    }
    JavaMathBigInteger *bX = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->q_)) getAffineXCoord])) toBigInteger];
    JavaMathBigInteger *bY = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->q_)) getAffineYCoord])) toBigInteger];
    IOSByteArray *encKey = [IOSByteArray newArrayWithLength:64];
    LibOrgBouncycastleJceProviderJCEECPublicKey_extractBytesWithByteArray_withInt_withJavaMathBigInteger_(self, encKey, 0, bX);
    LibOrgBouncycastleJceProviderJCEECPublicKey_extractBytesWithByteArray_withInt_withJavaMathBigInteger_(self, encKey, 32, bY);
    @try {
      info = new_LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001), params), new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(encKey));
    }
    @catch (JavaIoIOException *e) {
      return nil;
    }
  }
  else {
    if ([ecSpec_ isKindOfClass:[LibOrgBouncycastleJceSpecECNamedCurveSpec class]]) {
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithNSString_([((LibOrgBouncycastleJceSpecECNamedCurveSpec *) nil_chk(((LibOrgBouncycastleJceSpecECNamedCurveSpec *) ecSpec_))) getName]);
      if (curveOid == nil) {
        curveOid = new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_([((LibOrgBouncycastleJceSpecECNamedCurveSpec *) nil_chk(((LibOrgBouncycastleJceSpecECNamedCurveSpec *) ecSpec_))) getName]);
      }
      params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOid);
    }
    else if (ecSpec_ == nil) {
      params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1ASN1Null_(JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
    }
    else {
      LibOrgBouncycastleMathEcECCurve *curve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([ecSpec_ getCurve]);
      LibOrgBouncycastleAsn1X9X9ECParameters *ecP = new_LibOrgBouncycastleAsn1X9X9ECParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curve, LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECCurve_withJavaSecuritySpecECPoint_withBoolean_(curve, [((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getGenerator], withCompression_), [((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getOrder], JavaMathBigInteger_valueOfWithLong_([((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getCofactor]), [((JavaSecuritySpecEllipticCurve *) nil_chk([((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getCurve])) getSeed]);
      params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1X9X9ECParameters_(ecP);
    }
    LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self engineGetQ])) getCurve];
    LibOrgBouncycastleAsn1ASN1OctetString *p = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECPoint_([((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) createPointWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([self getQ])) getAffineXCoord])) toBigInteger] withJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([self getQ])) getAffineYCoord])) toBigInteger] withBoolean:withCompression_]) toASN1Primitive], [LibOrgBouncycastleAsn1ASN1OctetString class]);
    info = new_LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey), params), [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(p)) getOctets]);
  }
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilKeyUtil_getEncodedSubjectPublicKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(info);
}

- (void)extractBytesWithByteArray:(IOSByteArray *)encKey
                          withInt:(jint)offSet
           withJavaMathBigInteger:(JavaMathBigInteger *)bI {
  LibOrgBouncycastleJceProviderJCEECPublicKey_extractBytesWithByteArray_withInt_withJavaMathBigInteger_(self, encKey, offSet, bI);
}

- (JavaSecuritySpecECParameterSpec *)getParams {
  return ecSpec_;
}

- (LibOrgBouncycastleJceSpecECParameterSpec *)getParameters {
  if (ecSpec_ == nil) {
    return nil;
  }
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec_, withCompression_);
}

- (JavaSecuritySpecECPoint *)getW {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECPoint_(q_);
}

- (LibOrgBouncycastleMathEcECPoint *)getQ {
  if (ecSpec_ == nil) {
    return [((LibOrgBouncycastleMathEcECPoint *) nil_chk(q_)) getDetachedPoint];
  }
  return q_;
}

- (LibOrgBouncycastleMathEcECPoint *)engineGetQ {
  return q_;
}

- (LibOrgBouncycastleJceSpecECParameterSpec *)engineGetSpec {
  if (ecSpec_ != nil) {
    return LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec_, withCompression_);
  }
  return [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = LibOrgBouncycastleUtilStrings_lineSeparator();
  (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"EC Public Key"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            X: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->q_)) getAffineXCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Y: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->q_)) getAffineYCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  return [buf description];
}

- (void)setPointFormatWithNSString:(NSString *)style {
  withCompression_ = !([@"UNCOMPRESSED" java_equalsIgnoreCase:style]);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[LibOrgBouncycastleJceProviderJCEECPublicKey class]])) {
    return false;
  }
  LibOrgBouncycastleJceProviderJCEECPublicKey *other = (LibOrgBouncycastleJceProviderJCEECPublicKey *) cast_chk(o, [LibOrgBouncycastleJceProviderJCEECPublicKey class]);
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self engineGetQ])) equalsWithLibOrgBouncycastleMathEcECPoint:[((LibOrgBouncycastleJceProviderJCEECPublicKey *) nil_chk(other)) engineGetQ]] && ([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([self engineGetSpec])) isEqual:[other engineGetSpec]]);
}

- (NSUInteger)hash {
  return ((jint) [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self engineGetQ])) hash]) ^ ((jint) [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([self engineGetSpec])) hash]);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  LibOrgBouncycastleJceProviderJCEECPublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  LibOrgBouncycastleJceProviderJCEECPublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceSpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceSpecECParameterSpec;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, 21, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, 24, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLibOrgBouncycastleJceProviderJCEECPublicKey:);
  methods[1].selector = @selector(initWithNSString:withJavaSecuritySpecECPublicKeySpec:);
  methods[2].selector = @selector(initWithNSString:withLibOrgBouncycastleJceSpecECPublicKeySpec:);
  methods[3].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:withJavaSecuritySpecECParameterSpec:);
  methods[4].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:withLibOrgBouncycastleJceSpecECParameterSpec:);
  methods[5].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:);
  methods[6].selector = @selector(createSpecWithJavaSecuritySpecEllipticCurve:withLibOrgBouncycastleCryptoParamsECDomainParameters:);
  methods[7].selector = @selector(initWithJavaSecurityInterfacesECPublicKey:);
  methods[8].selector = @selector(initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[9].selector = @selector(populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[10].selector = @selector(getAlgorithm);
  methods[11].selector = @selector(getFormat);
  methods[12].selector = @selector(getEncoded);
  methods[13].selector = @selector(extractBytesWithByteArray:withInt:withJavaMathBigInteger:);
  methods[14].selector = @selector(getParams);
  methods[15].selector = @selector(getParameters);
  methods[16].selector = @selector(getW);
  methods[17].selector = @selector(getQ);
  methods[18].selector = @selector(engineGetQ);
  methods[19].selector = @selector(engineGetSpec);
  methods[20].selector = @selector(description);
  methods[21].selector = @selector(setPointFormatWithNSString:);
  methods[22].selector = @selector(isEqual:);
  methods[23].selector = @selector(hash);
  methods[24].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[25].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "algorithm_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "q_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecSpec_", "LJavaSecuritySpecECParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "withCompression_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gostParams_", "LLibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LLibOrgBouncycastleJceProviderJCEECPublicKey;", "LNSString;LJavaSecuritySpecECPublicKeySpec;", "LNSString;LLibOrgBouncycastleJceSpecECPublicKeySpec;", "LNSString;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;LJavaSecuritySpecECParameterSpec;", "LNSString;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;LLibOrgBouncycastleJceSpecECParameterSpec;", "LNSString;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", "createSpec", "LJavaSecuritySpecEllipticCurve;LLibOrgBouncycastleCryptoParamsECDomainParameters;", "LJavaSecurityInterfacesECPublicKey;", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "populateFromPubKeyInfo", "extractBytes", "[BILJavaMathBigInteger;", "toString", "setPointFormat", "LNSString;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderJCEECPublicKey = { "JCEECPublicKey", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 26, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderJCEECPublicKey;
}

@end

void LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleJceProviderJCEECPublicKey_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, NSString *algorithm, LibOrgBouncycastleJceProviderJCEECPublicKey *key) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->q_ = ((LibOrgBouncycastleJceProviderJCEECPublicKey *) nil_chk(key))->q_;
  self->ecSpec_ = key->ecSpec_;
  self->withCompression_ = key->withCompression_;
  self->gostParams_ = key->gostParams_;
}

LibOrgBouncycastleJceProviderJCEECPublicKey *new_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleJceProviderJCEECPublicKey_(NSString *algorithm, LibOrgBouncycastleJceProviderJCEECPublicKey *key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleJceProviderJCEECPublicKey_, algorithm, key)
}

LibOrgBouncycastleJceProviderJCEECPublicKey *create_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleJceProviderJCEECPublicKey_(NSString *algorithm, LibOrgBouncycastleJceProviderJCEECPublicKey *key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleJceProviderJCEECPublicKey_, algorithm, key)
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->ecSpec_ = [((JavaSecuritySpecECPublicKeySpec *) nil_chk(spec)) getParams];
  self->q_ = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_(self->ecSpec_, [spec getW], false);
}

LibOrgBouncycastleJceProviderJCEECPublicKey *new_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_(NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withJavaSecuritySpecECPublicKeySpec_, algorithm, spec)
}

LibOrgBouncycastleJceProviderJCEECPublicKey *create_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_(NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withJavaSecuritySpecECPublicKeySpec_, algorithm, spec)
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, NSString *algorithm, LibOrgBouncycastleJceSpecECPublicKeySpec *spec) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->q_ = [((LibOrgBouncycastleJceSpecECPublicKeySpec *) nil_chk(spec)) getQ];
  if ([spec getParams] != nil) {
    LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([spec getParams])) getCurve];
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_(curve, [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([spec getParams])) getSeed]);
    self->ecSpec_ = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(ellipticCurve, [spec getParams]);
  }
  else {
    if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->q_)) getCurve] == nil) {
      LibOrgBouncycastleJceSpecECParameterSpec *s = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      self->q_ = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve])) createPointWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->q_)) getAffineXCoord])) toBigInteger] withJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->q_)) getAffineYCoord])) toBigInteger] withBoolean:false];
    }
    self->ecSpec_ = nil;
  }
}

LibOrgBouncycastleJceProviderJCEECPublicKey *new_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_(NSString *algorithm, LibOrgBouncycastleJceSpecECPublicKeySpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_, algorithm, spec)
}

LibOrgBouncycastleJceProviderJCEECPublicKey *create_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_(NSString *algorithm, LibOrgBouncycastleJceSpecECPublicKeySpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_, algorithm, spec)
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  LibOrgBouncycastleCryptoParamsECDomainParameters *dp = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getParameters];
  self->algorithm_ = algorithm;
  self->q_ = [params getQ];
  if (spec == nil) {
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getCurve], [dp getSeed]);
    self->ecSpec_ = LibOrgBouncycastleJceProviderJCEECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
  }
  else {
    self->ecSpec_ = spec;
  }
}

LibOrgBouncycastleJceProviderJCEECPublicKey *new_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_, algorithm, params, spec)
}

LibOrgBouncycastleJceProviderJCEECPublicKey *create_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_, algorithm, params, spec)
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, LibOrgBouncycastleJceSpecECParameterSpec *spec) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  LibOrgBouncycastleCryptoParamsECDomainParameters *dp = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getParameters];
  self->algorithm_ = algorithm;
  self->q_ = [params getQ];
  if (spec == nil) {
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getCurve], [dp getSeed]);
    self->ecSpec_ = LibOrgBouncycastleJceProviderJCEECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
  }
  else {
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([spec getCurve], [spec getSeed]);
    self->ecSpec_ = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(ellipticCurve, spec);
  }
}

LibOrgBouncycastleJceProviderJCEECPublicKey *new_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, LibOrgBouncycastleJceSpecECParameterSpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_, algorithm, params, spec)
}

LibOrgBouncycastleJceProviderJCEECPublicKey *create_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, LibOrgBouncycastleJceSpecECParameterSpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_, algorithm, params, spec)
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->q_ = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getQ];
  self->ecSpec_ = nil;
}

LibOrgBouncycastleJceProviderJCEECPublicKey *new_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_, algorithm, params)
}

LibOrgBouncycastleJceProviderJCEECPublicKey *create_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_, algorithm, params)
}

JavaSecuritySpecECParameterSpec *LibOrgBouncycastleJceProviderJCEECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, JavaSecuritySpecEllipticCurve *ellipticCurve, LibOrgBouncycastleCryptoParamsECDomainParameters *dp) {
  return new_JavaSecuritySpecECParameterSpec_initWithJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withInt_(ellipticCurve, LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECPoint_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getG]), [dp getN], [((JavaMathBigInteger *) nil_chk([dp getH])) intValue]);
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_initWithJavaSecurityInterfacesECPublicKey_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, id<JavaSecurityInterfacesECPublicKey> key) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = [((id<JavaSecurityInterfacesECPublicKey>) nil_chk(key)) getAlgorithm];
  self->ecSpec_ = [key getParams];
  self->q_ = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_(self->ecSpec_, [key getW], false);
}

LibOrgBouncycastleJceProviderJCEECPublicKey *new_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithJavaSecurityInterfacesECPublicKey_(id<JavaSecurityInterfacesECPublicKey> key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithJavaSecurityInterfacesECPublicKey_, key)
}

LibOrgBouncycastleJceProviderJCEECPublicKey *create_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithJavaSecurityInterfacesECPublicKey_(id<JavaSecurityInterfacesECPublicKey> key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithJavaSecurityInterfacesECPublicKey_, key)
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  LibOrgBouncycastleJceProviderJCEECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
}

LibOrgBouncycastleJceProviderJCEECPublicKey *new_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, info)
}

LibOrgBouncycastleJceProviderJCEECPublicKey *create_LibOrgBouncycastleJceProviderJCEECPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEECPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, info)
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithmId])) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001)]) {
    LibOrgBouncycastleAsn1DERBitString *bits = [info getPublicKeyData];
    LibOrgBouncycastleAsn1ASN1OctetString *key;
    self->algorithm_ = @"ECGOST3410";
    @try {
      key = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_([((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bits)) getBytes]), [LibOrgBouncycastleAsn1ASN1OctetString class]);
    }
    @catch (JavaIoIOException *ex) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
    }
    IOSByteArray *keyEnc = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(key)) getOctets];
    IOSByteArray *x9Encoding = [IOSByteArray newArrayWithLength:65];
    *IOSByteArray_GetRef(x9Encoding, 0) = (jint) 0x04;
    for (jint i = 1; i <= 32; ++i) {
      *IOSByteArray_GetRef(x9Encoding, i) = IOSByteArray_Get(nil_chk(keyEnc), 32 - i);
      *IOSByteArray_GetRef(x9Encoding, i + 32) = IOSByteArray_Get(keyEnc, 64 - i);
    }
    self->gostParams_ = new_LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters_initWithLibOrgBouncycastleAsn1ASN1Sequence_((LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getAlgorithmId])) getParameters], [LibOrgBouncycastleAsn1ASN1Sequence class]));
    LibOrgBouncycastleJceSpecECNamedCurveParameterSpec *spec = LibOrgBouncycastleJceECGOST3410NamedCurveTable_getParameterSpecWithNSString_(LibOrgBouncycastleAsn1CryptoproECGOST3410NamedCurves_getNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([self->gostParams_ getPublicKeyParamSet]));
    LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleJceSpecECNamedCurveParameterSpec *) nil_chk(spec)) getCurve];
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_(curve, [spec getSeed]);
    self->q_ = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) decodePointWithByteArray:x9Encoding];
    self->ecSpec_ = new_LibOrgBouncycastleJceSpecECNamedCurveSpec_initWithNSString_withJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleAsn1CryptoproECGOST3410NamedCurves_getNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *) nil_chk(self->gostParams_)) getPublicKeyParamSet]), ellipticCurve, LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECPoint_([spec getG]), [spec getN], [spec getH]);
  }
  else {
    LibOrgBouncycastleAsn1X9X962Parameters *params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1ASN1Primitive_((LibOrgBouncycastleAsn1ASN1Primitive *) cast_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getAlgorithmId])) getParameters], [LibOrgBouncycastleAsn1ASN1Primitive class]));
    LibOrgBouncycastleMathEcECCurve *curve;
    JavaSecuritySpecEllipticCurve *ellipticCurve;
    if ([params isNamedCurve]) {
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([params getParameters], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
      LibOrgBouncycastleAsn1X9X9ECParameters *ecP = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
      curve = [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecP)) getCurve];
      ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_(curve, [ecP getSeed]);
      self->ecSpec_ = new_LibOrgBouncycastleJceSpecECNamedCurveSpec_initWithNSString_withJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getCurveNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid), ellipticCurve, LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECPoint_([ecP getG]), [ecP getN], [ecP getH]);
    }
    else if ([params isImplicitlyCA]) {
      self->ecSpec_ = nil;
      curve = [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa])) getCurve];
    }
    else {
      LibOrgBouncycastleAsn1X9X9ECParameters *ecP = LibOrgBouncycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
      curve = [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecP)) getCurve];
      ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_(curve, [ecP getSeed]);
      self->ecSpec_ = new_JavaSecuritySpecECParameterSpec_initWithJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withInt_(ellipticCurve, LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECPoint_([ecP getG]), [ecP getN], [((JavaMathBigInteger *) nil_chk([ecP getH])) intValue]);
    }
    LibOrgBouncycastleAsn1DERBitString *bits = [info getPublicKeyData];
    IOSByteArray *data = [((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bits)) getBytes];
    LibOrgBouncycastleAsn1ASN1OctetString *key = new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(data);
    if (IOSByteArray_Get(nil_chk(data), 0) == (jint) 0x04 && IOSByteArray_Get(data, 1) == data->size_ - 2 && (IOSByteArray_Get(data, 2) == (jint) 0x02 || IOSByteArray_Get(data, 2) == (jint) 0x03)) {
      jint qLength = [new_LibOrgBouncycastleAsn1X9X9IntegerConverter_init() getByteLengthWithLibOrgBouncycastleMathEcECCurve:curve];
      if (qLength >= data->size_ - 3) {
        @try {
          key = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(data), [LibOrgBouncycastleAsn1ASN1OctetString class]);
        }
        @catch (JavaIoIOException *ex) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
        }
      }
    }
    LibOrgBouncycastleAsn1X9X9ECPoint *derQ = new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleAsn1ASN1OctetString_(curve, key);
    self->q_ = [derQ getPoint];
  }
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_extractBytesWithByteArray_withInt_withJavaMathBigInteger_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, IOSByteArray *encKey, jint offSet, JavaMathBigInteger *bI) {
  IOSByteArray *val = [((JavaMathBigInteger *) nil_chk(bI)) toByteArray];
  if (((IOSByteArray *) nil_chk(val))->size_ < 32) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:32];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(val, 0, tmp, tmp->size_ - val->size_, val->size_);
    val = tmp;
  }
  for (jint i = 0; i != 32; i++) {
    *IOSByteArray_GetRef(nil_chk(encKey), offSet + i) = IOSByteArray_Get(val, val->size_ - 1 - i);
  }
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, JavaIoObjectInputStream *inArg) {
  IOSByteArray *enc = (IOSByteArray *) cast_chk([((JavaIoObjectInputStream *) nil_chk(inArg)) readObject], [IOSByteArray class]);
  LibOrgBouncycastleJceProviderJCEECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(enc)));
  self->algorithm_ = (NSString *) cast_chk([inArg readObject], [NSString class]);
  self->withCompression_ = [inArg readBoolean];
}

void LibOrgBouncycastleJceProviderJCEECPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJceProviderJCEECPublicKey *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeObjectWithId:[self getEncoded]];
  [outArg writeObjectWithId:self->algorithm_];
  [outArg writeBooleanWithBoolean:self->withCompression_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderJCEECPublicKey)
