//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ExporterLabel.java
//

#include "ExporterLabel.h"
#include "J2ObjC_source.h"

NSString *LibOrgBouncycastleCryptoTlsExporterLabel_client_finished = @"client finished";
NSString *LibOrgBouncycastleCryptoTlsExporterLabel_server_finished = @"server finished";
NSString *LibOrgBouncycastleCryptoTlsExporterLabel_master_secret = @"master secret";
NSString *LibOrgBouncycastleCryptoTlsExporterLabel_key_expansion = @"key expansion";
NSString *LibOrgBouncycastleCryptoTlsExporterLabel_client_EAP_encryption = @"client EAP encryption";
NSString *LibOrgBouncycastleCryptoTlsExporterLabel_ttls_keying_material = @"ttls keying material";
NSString *LibOrgBouncycastleCryptoTlsExporterLabel_ttls_challenge = @"ttls challenge";
NSString *LibOrgBouncycastleCryptoTlsExporterLabel_dtls_srtp = @"EXTRACTOR-dtls_srtp";
NSString *LibOrgBouncycastleCryptoTlsExporterLabel_extended_master_secret = @"extended master secret";

@implementation LibOrgBouncycastleCryptoTlsExporterLabel

+ (NSString *)client_finished {
  return LibOrgBouncycastleCryptoTlsExporterLabel_client_finished;
}

+ (NSString *)server_finished {
  return LibOrgBouncycastleCryptoTlsExporterLabel_server_finished;
}

+ (NSString *)master_secret {
  return LibOrgBouncycastleCryptoTlsExporterLabel_master_secret;
}

+ (NSString *)key_expansion {
  return LibOrgBouncycastleCryptoTlsExporterLabel_key_expansion;
}

+ (NSString *)client_EAP_encryption {
  return LibOrgBouncycastleCryptoTlsExporterLabel_client_EAP_encryption;
}

+ (NSString *)ttls_keying_material {
  return LibOrgBouncycastleCryptoTlsExporterLabel_ttls_keying_material;
}

+ (NSString *)ttls_challenge {
  return LibOrgBouncycastleCryptoTlsExporterLabel_ttls_challenge;
}

+ (NSString *)dtls_srtp {
  return LibOrgBouncycastleCryptoTlsExporterLabel_dtls_srtp;
}

+ (NSString *)extended_master_secret {
  return LibOrgBouncycastleCryptoTlsExporterLabel_extended_master_secret;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsExporterLabel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "client_finished", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "server_finished", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "master_secret", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "key_expansion", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "client_EAP_encryption", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "ttls_keying_material", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "ttls_challenge", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "dtls_srtp", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "extended_master_secret", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { &LibOrgBouncycastleCryptoTlsExporterLabel_client_finished, &LibOrgBouncycastleCryptoTlsExporterLabel_server_finished, &LibOrgBouncycastleCryptoTlsExporterLabel_master_secret, &LibOrgBouncycastleCryptoTlsExporterLabel_key_expansion, &LibOrgBouncycastleCryptoTlsExporterLabel_client_EAP_encryption, &LibOrgBouncycastleCryptoTlsExporterLabel_ttls_keying_material, &LibOrgBouncycastleCryptoTlsExporterLabel_ttls_challenge, &LibOrgBouncycastleCryptoTlsExporterLabel_dtls_srtp, &LibOrgBouncycastleCryptoTlsExporterLabel_extended_master_secret };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsExporterLabel = { "ExporterLabel", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 1, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsExporterLabel;
}

@end

void LibOrgBouncycastleCryptoTlsExporterLabel_init(LibOrgBouncycastleCryptoTlsExporterLabel *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsExporterLabel *new_LibOrgBouncycastleCryptoTlsExporterLabel_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsExporterLabel, init)
}

LibOrgBouncycastleCryptoTlsExporterLabel *create_LibOrgBouncycastleCryptoTlsExporterLabel_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsExporterLabel, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsExporterLabel)
