//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/test/SimpleTestResult.java
//

#include "J2ObjC_source.h"
#include "SimpleTestResult.h"
#include "Strings.h"
#include "Test.h"
#include "TestResult.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Throwable.h"

@interface LibOrgBouncycastleUtilTestSimpleTestResult () {
 @public
  jboolean success_;
  NSString *message_;
  JavaLangThrowable *exception_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleUtilTestSimpleTestResult, message_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleUtilTestSimpleTestResult, exception_, JavaLangThrowable *)

inline NSString *LibOrgBouncycastleUtilTestSimpleTestResult_get_SEPARATOR(void);
static NSString *LibOrgBouncycastleUtilTestSimpleTestResult_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleUtilTestSimpleTestResult, SEPARATOR, NSString *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleUtilTestSimpleTestResult)

@implementation LibOrgBouncycastleUtilTestSimpleTestResult

- (instancetype)initWithBoolean:(jboolean)success
                   withNSString:(NSString *)message {
  LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_(self, success, message);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)success
                   withNSString:(NSString *)message
          withJavaLangThrowable:(JavaLangThrowable *)exception {
  LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_withJavaLangThrowable_(self, success, message, exception);
  return self;
}

+ (id<LibOrgBouncycastleUtilTestTestResult>)successfulWithLibOrgBouncycastleUtilTestTest:(id<LibOrgBouncycastleUtilTestTest>)test
                                                                            withNSString:(NSString *)message {
  return LibOrgBouncycastleUtilTestSimpleTestResult_successfulWithLibOrgBouncycastleUtilTestTest_withNSString_(test, message);
}

+ (id<LibOrgBouncycastleUtilTestTestResult>)failedWithLibOrgBouncycastleUtilTestTest:(id<LibOrgBouncycastleUtilTestTest>)test
                                                                        withNSString:(NSString *)message {
  return LibOrgBouncycastleUtilTestSimpleTestResult_failedWithLibOrgBouncycastleUtilTestTest_withNSString_(test, message);
}

+ (id<LibOrgBouncycastleUtilTestTestResult>)failedWithLibOrgBouncycastleUtilTestTest:(id<LibOrgBouncycastleUtilTestTest>)test
                                                                        withNSString:(NSString *)message
                                                               withJavaLangThrowable:(JavaLangThrowable *)t {
  return LibOrgBouncycastleUtilTestSimpleTestResult_failedWithLibOrgBouncycastleUtilTestTest_withNSString_withJavaLangThrowable_(test, message, t);
}

+ (id<LibOrgBouncycastleUtilTestTestResult>)failedWithLibOrgBouncycastleUtilTestTest:(id<LibOrgBouncycastleUtilTestTest>)test
                                                                        withNSString:(NSString *)message
                                                                              withId:(id)expected
                                                                              withId:(id)found {
  return LibOrgBouncycastleUtilTestSimpleTestResult_failedWithLibOrgBouncycastleUtilTestTest_withNSString_withId_withId_(test, message, expected, found);
}

+ (NSString *)failedMessageWithNSString:(NSString *)algorithm
                           withNSString:(NSString *)testName
                           withNSString:(NSString *)expected
                           withNSString:(NSString *)actual {
  return LibOrgBouncycastleUtilTestSimpleTestResult_failedMessageWithNSString_withNSString_withNSString_withNSString_(algorithm, testName, expected, actual);
}

- (jboolean)isSuccessful {
  return success_;
}

- (NSString *)description {
  return message_;
}

- (JavaLangThrowable *)getException {
  return exception_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilTestTestResult;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilTestTestResult;", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilTestTestResult;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilTestTestResult;", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withNSString:);
  methods[1].selector = @selector(initWithBoolean:withNSString:withJavaLangThrowable:);
  methods[2].selector = @selector(successfulWithLibOrgBouncycastleUtilTestTest:withNSString:);
  methods[3].selector = @selector(failedWithLibOrgBouncycastleUtilTestTest:withNSString:);
  methods[4].selector = @selector(failedWithLibOrgBouncycastleUtilTestTest:withNSString:withJavaLangThrowable:);
  methods[5].selector = @selector(failedWithLibOrgBouncycastleUtilTestTest:withNSString:withId:withId:);
  methods[6].selector = @selector(failedMessageWithNSString:withNSString:withNSString:withNSString:);
  methods[7].selector = @selector(isSuccessful);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(getException);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "success_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exception_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLNSString;", "ZLNSString;LJavaLangThrowable;", "successful", "LLibOrgBouncycastleUtilTestTest;LNSString;", "failed", "LLibOrgBouncycastleUtilTestTest;LNSString;LJavaLangThrowable;", "LLibOrgBouncycastleUtilTestTest;LNSString;LNSObject;LNSObject;", "failedMessage", "LNSString;LNSString;LNSString;LNSString;", "toString", &LibOrgBouncycastleUtilTestSimpleTestResult_SEPARATOR };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilTestSimpleTestResult = { "SimpleTestResult", "lib.org.bouncycastle.util.test", ptrTable, methods, fields, 7, 0x1, 10, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilTestSimpleTestResult;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleUtilTestSimpleTestResult class]) {
    LibOrgBouncycastleUtilTestSimpleTestResult_SEPARATOR = LibOrgBouncycastleUtilStrings_lineSeparator();
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleUtilTestSimpleTestResult)
  }
}

@end

void LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_(LibOrgBouncycastleUtilTestSimpleTestResult *self, jboolean success, NSString *message) {
  NSObject_init(self);
  self->success_ = success;
  self->message_ = message;
}

LibOrgBouncycastleUtilTestSimpleTestResult *new_LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_(jboolean success, NSString *message) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilTestSimpleTestResult, initWithBoolean_withNSString_, success, message)
}

LibOrgBouncycastleUtilTestSimpleTestResult *create_LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_(jboolean success, NSString *message) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilTestSimpleTestResult, initWithBoolean_withNSString_, success, message)
}

void LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_withJavaLangThrowable_(LibOrgBouncycastleUtilTestSimpleTestResult *self, jboolean success, NSString *message, JavaLangThrowable *exception) {
  NSObject_init(self);
  self->success_ = success;
  self->message_ = message;
  self->exception_ = exception;
}

LibOrgBouncycastleUtilTestSimpleTestResult *new_LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_withJavaLangThrowable_(jboolean success, NSString *message, JavaLangThrowable *exception) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilTestSimpleTestResult, initWithBoolean_withNSString_withJavaLangThrowable_, success, message, exception)
}

LibOrgBouncycastleUtilTestSimpleTestResult *create_LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_withJavaLangThrowable_(jboolean success, NSString *message, JavaLangThrowable *exception) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilTestSimpleTestResult, initWithBoolean_withNSString_withJavaLangThrowable_, success, message, exception)
}

id<LibOrgBouncycastleUtilTestTestResult> LibOrgBouncycastleUtilTestSimpleTestResult_successfulWithLibOrgBouncycastleUtilTestTest_withNSString_(id<LibOrgBouncycastleUtilTestTest> test, NSString *message) {
  LibOrgBouncycastleUtilTestSimpleTestResult_initialize();
  return new_LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_(true, JreStrcat("$$$", [((id<LibOrgBouncycastleUtilTestTest>) nil_chk(test)) getName], @": ", message));
}

id<LibOrgBouncycastleUtilTestTestResult> LibOrgBouncycastleUtilTestSimpleTestResult_failedWithLibOrgBouncycastleUtilTestTest_withNSString_(id<LibOrgBouncycastleUtilTestTest> test, NSString *message) {
  LibOrgBouncycastleUtilTestSimpleTestResult_initialize();
  return new_LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_(false, JreStrcat("$$$", [((id<LibOrgBouncycastleUtilTestTest>) nil_chk(test)) getName], @": ", message));
}

id<LibOrgBouncycastleUtilTestTestResult> LibOrgBouncycastleUtilTestSimpleTestResult_failedWithLibOrgBouncycastleUtilTestTest_withNSString_withJavaLangThrowable_(id<LibOrgBouncycastleUtilTestTest> test, NSString *message, JavaLangThrowable *t) {
  LibOrgBouncycastleUtilTestSimpleTestResult_initialize();
  return new_LibOrgBouncycastleUtilTestSimpleTestResult_initWithBoolean_withNSString_withJavaLangThrowable_(false, JreStrcat("$$$", [((id<LibOrgBouncycastleUtilTestTest>) nil_chk(test)) getName], @": ", message), t);
}

id<LibOrgBouncycastleUtilTestTestResult> LibOrgBouncycastleUtilTestSimpleTestResult_failedWithLibOrgBouncycastleUtilTestTest_withNSString_withId_withId_(id<LibOrgBouncycastleUtilTestTest> test, NSString *message, id expected, id found) {
  LibOrgBouncycastleUtilTestSimpleTestResult_initialize();
  return LibOrgBouncycastleUtilTestSimpleTestResult_failedWithLibOrgBouncycastleUtilTestTest_withNSString_(test, JreStrcat("$$$@$$@", message, LibOrgBouncycastleUtilTestSimpleTestResult_SEPARATOR, @"Expected: ", expected, LibOrgBouncycastleUtilTestSimpleTestResult_SEPARATOR, @"Found   : ", found));
}

NSString *LibOrgBouncycastleUtilTestSimpleTestResult_failedMessageWithNSString_withNSString_withNSString_withNSString_(NSString *algorithm, NSString *testName, NSString *expected, NSString *actual) {
  LibOrgBouncycastleUtilTestSimpleTestResult_initialize();
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(algorithm);
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@" failing "])) appendWithNSString:testName];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:LibOrgBouncycastleUtilTestSimpleTestResult_SEPARATOR])) appendWithNSString:@"    expected: "])) appendWithNSString:expected];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:LibOrgBouncycastleUtilTestSimpleTestResult_SEPARATOR])) appendWithNSString:@"    got     : "])) appendWithNSString:actual];
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilTestSimpleTestResult)
