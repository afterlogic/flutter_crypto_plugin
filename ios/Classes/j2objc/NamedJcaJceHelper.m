//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/util/NamedJcaJceHelper.java
//

#include "J2ObjC_source.h"
#include "NamedJcaJceHelper.h"
#include "java/security/AlgorithmParameterGenerator.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/KeyFactory.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/MessageDigest.h"
#include "java/security/SecureRandom.h"
#include "java/security/Signature.h"
#include "java/security/cert/CertificateFactory.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/KeyAgreement.h"
#include "javax/crypto/KeyGenerator.h"
#include "javax/crypto/Mac.h"
#include "javax/crypto/SecretKeyFactory.h"

@implementation LibOrgBouncycastleJcajceUtilNamedJcaJceHelper

- (instancetype)initWithNSString:(NSString *)providerName {
  LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(self, providerName);
  return self;
}

- (JavaxCryptoCipher *)createCipherWithNSString:(NSString *)algorithm {
  return JavaxCryptoCipher_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaxCryptoMac *)createMacWithNSString:(NSString *)algorithm {
  return JavaxCryptoMac_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaxCryptoKeyAgreement *)createKeyAgreementWithNSString:(NSString *)algorithm {
  return JavaxCryptoKeyAgreement_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaSecurityAlgorithmParameterGenerator *)createAlgorithmParameterGeneratorWithNSString:(NSString *)algorithm {
  return JavaSecurityAlgorithmParameterGenerator_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaSecurityAlgorithmParameters *)createAlgorithmParametersWithNSString:(NSString *)algorithm {
  return JavaSecurityAlgorithmParameters_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaxCryptoKeyGenerator *)createKeyGeneratorWithNSString:(NSString *)algorithm {
  return JavaxCryptoKeyGenerator_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaSecurityKeyFactory *)createKeyFactoryWithNSString:(NSString *)algorithm {
  return JavaSecurityKeyFactory_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaxCryptoSecretKeyFactory *)createSecretKeyFactoryWithNSString:(NSString *)algorithm {
  return JavaxCryptoSecretKeyFactory_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaSecurityKeyPairGenerator *)createKeyPairGeneratorWithNSString:(NSString *)algorithm {
  return JavaSecurityKeyPairGenerator_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaSecurityMessageDigest *)createDigestWithNSString:(NSString *)algorithm {
  return JavaSecurityMessageDigest_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)algorithm {
  return JavaSecuritySignature_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaSecurityCertCertificateFactory *)createCertificateFactoryWithNSString:(NSString *)algorithm {
  return JavaSecurityCertCertificateFactory_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

- (JavaSecuritySecureRandom *)createSecureRandomWithNSString:(NSString *)algorithm {
  return JavaSecuritySecureRandom_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoCipher;", 0x1, 1, 0, 2, -1, -1, -1 },
    { NULL, "LJavaxCryptoMac;", 0x1, 3, 0, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyAgreement;", 0x1, 5, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameterGenerator;", 0x1, 6, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x1, 7, 0, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyGenerator;", 0x1, 8, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyFactory;", 0x1, 9, 0, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKeyFactory;", 0x1, 10, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPairGenerator;", 0x1, 11, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityMessageDigest;", 0x1, 12, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 13, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificateFactory;", 0x1, 14, 0, 15, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x1, 16, 0, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(createCipherWithNSString:);
  methods[2].selector = @selector(createMacWithNSString:);
  methods[3].selector = @selector(createKeyAgreementWithNSString:);
  methods[4].selector = @selector(createAlgorithmParameterGeneratorWithNSString:);
  methods[5].selector = @selector(createAlgorithmParametersWithNSString:);
  methods[6].selector = @selector(createKeyGeneratorWithNSString:);
  methods[7].selector = @selector(createKeyFactoryWithNSString:);
  methods[8].selector = @selector(createSecretKeyFactoryWithNSString:);
  methods[9].selector = @selector(createKeyPairGeneratorWithNSString:);
  methods[10].selector = @selector(createDigestWithNSString:);
  methods[11].selector = @selector(createSignatureWithNSString:);
  methods[12].selector = @selector(createCertificateFactoryWithNSString:);
  methods[13].selector = @selector(createSecureRandomWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "providerName_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "createCipher", "LJavaSecurityNoSuchAlgorithmException;LJavaxCryptoNoSuchPaddingException;LJavaSecurityNoSuchProviderException;", "createMac", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "createKeyAgreement", "createAlgorithmParameterGenerator", "createAlgorithmParameters", "createKeyGenerator", "createKeyFactory", "createSecretKeyFactory", "createKeyPairGenerator", "createDigest", "createSignature", "createCertificateFactory", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchProviderException;", "createSecureRandom" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceUtilNamedJcaJceHelper = { "NamedJcaJceHelper", "lib.org.bouncycastle.jcajce.util", ptrTable, methods, fields, 7, 0x1, 14, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper;
}

@end

void LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(LibOrgBouncycastleJcajceUtilNamedJcaJceHelper *self, NSString *providerName) {
  NSObject_init(self);
  self->providerName_ = providerName;
}

LibOrgBouncycastleJcajceUtilNamedJcaJceHelper *new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(NSString *providerName) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceUtilNamedJcaJceHelper, initWithNSString_, providerName)
}

LibOrgBouncycastleJcajceUtilNamedJcaJceHelper *create_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(NSString *providerName) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceUtilNamedJcaJceHelper, initWithNSString_, providerName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceUtilNamedJcaJceHelper)
