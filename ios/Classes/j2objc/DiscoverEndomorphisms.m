//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/tools/DiscoverEndomorphisms.java
//

#include "BigIntegers.h"
#include "DiscoverEndomorphisms.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECNamedCurveTable.h"
#include "ECPoint.h"
#include "FiniteField.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "X9ECParameters.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms ()

+ (void)discoverEndomorphismsWithNSString:(NSString *)curveName;

+ (void)printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9;

+ (void)printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)lambda
                          withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)betas;

+ (void)printPropertyWithNSString:(NSString *)name
                           withId:(id)value;

+ (jboolean)areRelativelyPrimeWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (IOSObjectArray *)calculateRangeWithJavaMathBigInteger:(JavaMathBigInteger *)mid
                                  withJavaMathBigInteger:(JavaMathBigInteger *)off
                                  withJavaMathBigInteger:(JavaMathBigInteger *)div;

+ (IOSObjectArray *)extEuclidBezoutWithJavaMathBigIntegerArray:(IOSObjectArray *)ab;

+ (IOSObjectArray *)extEuclidGLVWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                withJavaMathBigInteger:(JavaMathBigInteger *)lambda;

+ (IOSObjectArray *)chooseShortestWithJavaMathBigIntegerArray:(IOSObjectArray *)u
                                  withJavaMathBigIntegerArray:(IOSObjectArray *)v;

+ (IOSObjectArray *)intersectWithJavaMathBigIntegerArray:(IOSObjectArray *)ab
                             withJavaMathBigIntegerArray:(IOSObjectArray *)cd;

+ (jboolean)isLessThanSqrtWithJavaMathBigInteger:(JavaMathBigInteger *)a
                          withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (jboolean)isShorterWithJavaMathBigIntegerArray:(IOSObjectArray *)u
                     withJavaMathBigIntegerArray:(IOSObjectArray *)v;

+ (jboolean)isVectorBoundedBySqrtWithJavaMathBigIntegerArray:(IOSObjectArray *)v
                                      withJavaMathBigInteger:(JavaMathBigInteger *)n;

+ (IOSObjectArray *)orderWithJavaMathBigInteger:(JavaMathBigInteger *)a
                         withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (JavaMathBigInteger *)roundQuotientWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                     withJavaMathBigInteger:(JavaMathBigInteger *)y;

+ (IOSObjectArray *)solveQuadraticEquationWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                          withJavaMathBigInteger:(JavaMathBigInteger *)r
                                          withJavaMathBigInteger:(JavaMathBigInteger *)s;

+ (IOSObjectArray *)findBetaValuesWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c;

+ (JavaMathBigInteger *)isqrtWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (void)swapWithJavaMathBigIntegerArray:(IOSObjectArray *)ab;

@end

inline jint LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_get_radix(void);
#define LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms, radix, jint)

__attribute__((unused)) static void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismsWithNSString_(NSString *curveName);

__attribute__((unused)) static void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *x9);

__attribute__((unused)) static void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElementArray_(LibOrgBouncycastleAsn1X9X9ECParameters *x9, JavaMathBigInteger *lambda, IOSObjectArray *betas);

__attribute__((unused)) static void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(NSString *name, id value);

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_areRelativelyPrimeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *mid, JavaMathBigInteger *off, JavaMathBigInteger *div);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidBezoutWithJavaMathBigIntegerArray_(IOSObjectArray *ab);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidGLVWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *lambda);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_chooseShortestWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *u, IOSObjectArray *v);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_intersectWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *ab, IOSObjectArray *cd);

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *u, IOSObjectArray *v);

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isVectorBoundedBySqrtWithJavaMathBigIntegerArray_withJavaMathBigInteger_(IOSObjectArray *v, JavaMathBigInteger *n);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_orderWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *x, JavaMathBigInteger *y);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_solveQuadraticEquationWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *r, JavaMathBigInteger *s);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_findBetaValuesWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *c);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isqrtWithJavaMathBigInteger_(JavaMathBigInteger *x);

__attribute__((unused)) static void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(IOSObjectArray *ab);

@implementation LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_mainWithNSStringArray_(args);
}

+ (void)discoverEndomorphismsWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9 {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismsWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

+ (void)discoverEndomorphismsWithNSString:(NSString *)curveName {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismsWithNSString_(curveName);
}

+ (void)printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9 {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

+ (void)printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)lambda
                          withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)betas {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElementArray_(x9, lambda, betas);
}

+ (void)printPropertyWithNSString:(NSString *)name
                           withId:(id)value {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(name, value);
}

+ (jboolean)areRelativelyPrimeWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_areRelativelyPrimeWithJavaMathBigInteger_withJavaMathBigInteger_(a, b);
}

+ (IOSObjectArray *)calculateRangeWithJavaMathBigInteger:(JavaMathBigInteger *)mid
                                  withJavaMathBigInteger:(JavaMathBigInteger *)off
                                  withJavaMathBigInteger:(JavaMathBigInteger *)div {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(mid, off, div);
}

+ (IOSObjectArray *)extEuclidBezoutWithJavaMathBigIntegerArray:(IOSObjectArray *)ab {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidBezoutWithJavaMathBigIntegerArray_(ab);
}

+ (IOSObjectArray *)extEuclidGLVWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                withJavaMathBigInteger:(JavaMathBigInteger *)lambda {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidGLVWithJavaMathBigInteger_withJavaMathBigInteger_(n, lambda);
}

+ (IOSObjectArray *)chooseShortestWithJavaMathBigIntegerArray:(IOSObjectArray *)u
                                  withJavaMathBigIntegerArray:(IOSObjectArray *)v {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_chooseShortestWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(u, v);
}

+ (IOSObjectArray *)intersectWithJavaMathBigIntegerArray:(IOSObjectArray *)ab
                             withJavaMathBigIntegerArray:(IOSObjectArray *)cd {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_intersectWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(ab, cd);
}

+ (jboolean)isLessThanSqrtWithJavaMathBigInteger:(JavaMathBigInteger *)a
                          withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(a, b);
}

+ (jboolean)isShorterWithJavaMathBigIntegerArray:(IOSObjectArray *)u
                     withJavaMathBigIntegerArray:(IOSObjectArray *)v {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(u, v);
}

+ (jboolean)isVectorBoundedBySqrtWithJavaMathBigIntegerArray:(IOSObjectArray *)v
                                      withJavaMathBigInteger:(JavaMathBigInteger *)n {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isVectorBoundedBySqrtWithJavaMathBigIntegerArray_withJavaMathBigInteger_(v, n);
}

+ (IOSObjectArray *)orderWithJavaMathBigInteger:(JavaMathBigInteger *)a
                         withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_orderWithJavaMathBigInteger_withJavaMathBigInteger_(a, b);
}

+ (JavaMathBigInteger *)roundQuotientWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                     withJavaMathBigInteger:(JavaMathBigInteger *)y {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_(x, y);
}

+ (IOSObjectArray *)solveQuadraticEquationWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                          withJavaMathBigInteger:(JavaMathBigInteger *)r
                                          withJavaMathBigInteger:(JavaMathBigInteger *)s {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_solveQuadraticEquationWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(n, r, s);
}

+ (IOSObjectArray *)findBetaValuesWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_findBetaValuesWithLibOrgBouncycastleMathEcECCurve_(c);
}

+ (JavaMathBigInteger *)isqrtWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isqrtWithJavaMathBigInteger_(x);
}

+ (void)swapWithJavaMathBigIntegerArray:(IOSObjectArray *)ab {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(ab);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0xa, 15, 10, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0xa, 16, 17, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0xa, 18, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 19, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 20, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0xa, 23, 10, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 24, 10, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0xa, 25, 12, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleMathEcECFieldElement;", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(discoverEndomorphismsWithLibOrgBouncycastleAsn1X9X9ECParameters:);
  methods[3].selector = @selector(discoverEndomorphismsWithNSString:);
  methods[4].selector = @selector(printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters:);
  methods[5].selector = @selector(printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters:withJavaMathBigInteger:withLibOrgBouncycastleMathEcECFieldElementArray:);
  methods[6].selector = @selector(printPropertyWithNSString:withId:);
  methods[7].selector = @selector(areRelativelyPrimeWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[8].selector = @selector(calculateRangeWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[9].selector = @selector(extEuclidBezoutWithJavaMathBigIntegerArray:);
  methods[10].selector = @selector(extEuclidGLVWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[11].selector = @selector(chooseShortestWithJavaMathBigIntegerArray:withJavaMathBigIntegerArray:);
  methods[12].selector = @selector(intersectWithJavaMathBigIntegerArray:withJavaMathBigIntegerArray:);
  methods[13].selector = @selector(isLessThanSqrtWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[14].selector = @selector(isShorterWithJavaMathBigIntegerArray:withJavaMathBigIntegerArray:);
  methods[15].selector = @selector(isVectorBoundedBySqrtWithJavaMathBigIntegerArray:withJavaMathBigInteger:);
  methods[16].selector = @selector(orderWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[17].selector = @selector(roundQuotientWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[18].selector = @selector(solveQuadraticEquationWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[19].selector = @selector(findBetaValuesWithLibOrgBouncycastleMathEcECCurve:);
  methods[20].selector = @selector(isqrtWithJavaMathBigInteger:);
  methods[21].selector = @selector(swapWithJavaMathBigIntegerArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "radix", "I", .constantValue.asInt = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "discoverEndomorphisms", "LLibOrgBouncycastleAsn1X9X9ECParameters;", "LNSString;", "printGLVTypeBParameters", "LLibOrgBouncycastleAsn1X9X9ECParameters;LJavaMathBigInteger;[LLibOrgBouncycastleMathEcECFieldElement;", "printProperty", "LNSString;LNSObject;", "areRelativelyPrime", "LJavaMathBigInteger;LJavaMathBigInteger;", "calculateRange", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "extEuclidBezout", "[LJavaMathBigInteger;", "extEuclidGLV", "chooseShortest", "[LJavaMathBigInteger;[LJavaMathBigInteger;", "intersect", "isLessThanSqrt", "isShorter", "isVectorBoundedBySqrt", "[LJavaMathBigInteger;LJavaMathBigInteger;", "order", "roundQuotient", "solveQuadraticEquation", "findBetaValues", "LLibOrgBouncycastleMathEcECCurve;", "isqrt", "LJavaMathBigInteger;", "swap" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms = { "DiscoverEndomorphisms", "lib.org.bouncycastle.math.ec.tools", ptrTable, methods, fields, 7, 0x1, 22, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms;
}

@end

void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_init(LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms *self) {
  NSObject_init(self);
}

LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms *new_LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms, init)
}

LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms *create_LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms, init)
}

void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ < 1) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Expected a list of curve names as arguments"];
    return;
  }
  for (jint i = 0; i < args->size_; ++i) {
    LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismsWithNSString_(IOSObjectArray_Get(args, i));
  }
}

void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismsWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *x9) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  if (x9 == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"x9");
  }
  LibOrgBouncycastleMathEcECCurve *c = [x9 getCurve];
  if (LibOrgBouncycastleMathEcECAlgorithms_isFpCurveWithLibOrgBouncycastleMathEcECCurve_(c)) {
    JavaMathBigInteger *characteristic = [((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getField])) getCharacteristic];
    if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([c getA])) isZero] && [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(characteristic)) modWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, THREE)])) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Curve has a 'GLV Type B' endomorphism with these parameters:"];
      LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
    }
  }
}

void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismsWithNSString_(NSString *curveName) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  LibOrgBouncycastleAsn1X9X9ECParameters *x9 = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(curveName);
  if (x9 == nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unknown curve: ", curveName)];
    return;
  }
  LibOrgBouncycastleMathEcECCurve *c = [x9 getCurve];
  if (LibOrgBouncycastleMathEcECAlgorithms_isFpCurveWithLibOrgBouncycastleMathEcECCurve_(c)) {
    JavaMathBigInteger *characteristic = [((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getField])) getCharacteristic];
    if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([c getA])) isZero] && [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(characteristic)) modWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, THREE)])) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Curve '", curveName, @"' has a 'GLV Type B' endomorphism with these parameters:")];
      LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
    }
  }
}

void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *x9) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  IOSObjectArray *lambdas = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_solveQuadraticEquationWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getN], JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE), JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE));
  IOSObjectArray *betas = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_findBetaValuesWithLibOrgBouncycastleMathEcECCurve_([x9 getCurve]);
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElementArray_(x9, IOSObjectArray_Get(nil_chk(lambdas), 0), betas);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"OR"];
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElementArray_(x9, IOSObjectArray_Get(lambdas, 1), betas);
}

void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithLibOrgBouncycastleAsn1X9X9ECParameters_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElementArray_(LibOrgBouncycastleAsn1X9X9ECParameters *x9, JavaMathBigInteger *lambda, IOSObjectArray *betas) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  LibOrgBouncycastleMathEcECPoint *G = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getG])) normalize];
  LibOrgBouncycastleMathEcECPoint *mapG = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(G)) multiplyWithJavaMathBigInteger:lambda])) normalize];
  if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([G getYCoord])) isEqual:[((LibOrgBouncycastleMathEcECPoint *) nil_chk(mapG)) getYCoord]]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Derivation of GLV Type B parameters failed unexpectedly");
  }
  LibOrgBouncycastleMathEcECFieldElement *beta = IOSObjectArray_Get(nil_chk(betas), 0);
  if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([G getXCoord])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:beta])) isEqual:[mapG getXCoord]]) {
    beta = IOSObjectArray_Get(betas, 1);
    if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([G getXCoord])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:beta])) isEqual:[mapG getXCoord]]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Derivation of GLV Type B parameters failed unexpectedly");
    }
  }
  JavaMathBigInteger *n = [x9 getN];
  IOSObjectArray *v1 = nil;
  IOSObjectArray *v2 = nil;
  IOSObjectArray *rt = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidGLVWithJavaMathBigInteger_withJavaMathBigInteger_(n, lambda);
  v1 = [IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk(rt), 2), [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(rt, 3))) negate] } count:2 type:JavaMathBigInteger_class_()];
  v2 = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_chooseShortestWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_([IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(rt, 0), [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(rt, 1))) negate] } count:2 type:JavaMathBigInteger_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(rt, 4), [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(rt, 5))) negate] } count:2 type:JavaMathBigInteger_class_()]);
  if (!LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isVectorBoundedBySqrtWithJavaMathBigIntegerArray_withJavaMathBigInteger_(v2, n) && LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_areRelativelyPrimeWithJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(v1, 0), IOSObjectArray_Get(v1, 1))) {
    JavaMathBigInteger *r = IOSObjectArray_Get(v1, 0);
    JavaMathBigInteger *t = IOSObjectArray_Get(v1, 1);
    JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(t)) multiplyWithJavaMathBigInteger:lambda]])) divideWithJavaMathBigInteger:n];
    IOSObjectArray *vw = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidBezoutWithJavaMathBigIntegerArray_([IOSObjectArray newArrayWithObjects:(id[]){ [((JavaMathBigInteger *) nil_chk(s)) abs], [t abs] } count:2 type:JavaMathBigInteger_class_()]);
    if (vw != nil) {
      JavaMathBigInteger *v = IOSObjectArray_Get(vw, 0);
      JavaMathBigInteger *w = IOSObjectArray_Get(vw, 1);
      if ([s signum] < 0) {
        v = [((JavaMathBigInteger *) nil_chk(v)) negate];
      }
      if ([t signum] > 0) {
        w = [((JavaMathBigInteger *) nil_chk(w)) negate];
      }
      JavaMathBigInteger *check = [((JavaMathBigInteger *) nil_chk([s multiplyWithJavaMathBigInteger:v])) subtractWithJavaMathBigInteger:[t multiplyWithJavaMathBigInteger:w]];
      if (![((JavaMathBigInteger *) nil_chk(check)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)]) {
        @throw new_JavaLangIllegalStateException_init();
      }
      JavaMathBigInteger *x = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(w)) multiplyWithJavaMathBigInteger:n])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(v)) multiplyWithJavaMathBigInteger:lambda]];
      JavaMathBigInteger *base1 = [v negate];
      JavaMathBigInteger *base2 = [((JavaMathBigInteger *) nil_chk(x)) negate];
      JavaMathBigInteger *sqrtN = [((JavaMathBigInteger *) nil_chk(LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isqrtWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)]))) addWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)];
      IOSObjectArray *I1 = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(base1, sqrtN, t);
      IOSObjectArray *I2 = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(base2, sqrtN, r);
      IOSObjectArray *range = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_intersectWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(I1, I2);
      if (range != nil) {
        for (JavaMathBigInteger *alpha = IOSObjectArray_Get(range, 0); [((JavaMathBigInteger *) nil_chk(alpha)) compareToWithId:IOSObjectArray_Get(range, 1)] <= 0; alpha = [alpha addWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)]) {
          IOSObjectArray *candidate = [IOSObjectArray newArrayWithObjects:(id[]){ [x addWithJavaMathBigInteger:[alpha multiplyWithJavaMathBigInteger:r]], [v addWithJavaMathBigInteger:[alpha multiplyWithJavaMathBigInteger:t]] } count:2 type:JavaMathBigInteger_class_()];
          if (LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(candidate, v2)) {
            v2 = candidate;
          }
        }
      }
    }
  }
  JavaMathBigInteger *d = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(v2), 1)]))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(v2, 0)]];
  jint bits = [((JavaMathBigInteger *) nil_chk(n)) bitLength] + 16 - ([n bitLength] & 7);
  JavaMathBigInteger *g1 = LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v2, 1))) shiftLeftWithInt:bits], d);
  JavaMathBigInteger *g2 = [((JavaMathBigInteger *) nil_chk(LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 1))) shiftLeftWithInt:bits], d))) negate];
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"Beta", [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) toBigInteger])) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"Lambda", [((JavaMathBigInteger *) nil_chk(lambda)) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"v1", JreStrcat("$$$$$", @"{ ", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 0))) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix], @", ", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 1))) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix], @" }"));
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"v2", JreStrcat("$$$$$", @"{ ", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v2, 0))) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix], @", ", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v2, 1))) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix], @" }"));
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"d", [((JavaMathBigInteger *) nil_chk(d)) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"(OPT) g1", [((JavaMathBigInteger *) nil_chk(g1)) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"(OPT) g2", [((JavaMathBigInteger *) nil_chk(g2)) toStringWithInt:LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"(OPT) bits", JavaLangInteger_toStringWithInt_(bits));
}

void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(NSString *name, id value) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(@"  ");
  (void) [sb appendWithNSString:name];
  while ([sb java_length] < 20) {
    (void) [sb appendWithChar:' '];
  }
  (void) [sb appendWithNSString:@"= "];
  (void) [sb appendWithNSString:[nil_chk(value) description]];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[sb description]];
}

jboolean LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_areRelativelyPrimeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(a)) gcdWithJavaMathBigInteger:b])) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)];
}

IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *mid, JavaMathBigInteger *off, JavaMathBigInteger *div) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *i1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(mid)) subtractWithJavaMathBigInteger:off])) divideWithJavaMathBigInteger:div];
  JavaMathBigInteger *i2 = [((JavaMathBigInteger *) nil_chk([mid addWithJavaMathBigInteger:off])) divideWithJavaMathBigInteger:div];
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_orderWithJavaMathBigInteger_withJavaMathBigInteger_(i1, i2);
}

IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidBezoutWithJavaMathBigIntegerArray_(IOSObjectArray *ab) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  jboolean swap = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(ab), 0))) compareToWithId:IOSObjectArray_Get(ab, 1)] < 0;
  if (swap) {
    LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(ab);
  }
  JavaMathBigInteger *r0 = IOSObjectArray_Get(ab, 0);
  JavaMathBigInteger *r1 = IOSObjectArray_Get(ab, 1);
  JavaMathBigInteger *s0 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE);
  JavaMathBigInteger *s1 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO);
  JavaMathBigInteger *t0 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO);
  JavaMathBigInteger *t1 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE);
  while ([((JavaMathBigInteger *) nil_chk(r1)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] > 0) {
    IOSObjectArray *qr = [((JavaMathBigInteger *) nil_chk(r0)) divideAndRemainderWithJavaMathBigInteger:r1];
    JavaMathBigInteger *q = IOSObjectArray_Get(nil_chk(qr), 0);
    JavaMathBigInteger *r2 = IOSObjectArray_Get(qr, 1);
    JavaMathBigInteger *s2 = [((JavaMathBigInteger *) nil_chk(s0)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q)) multiplyWithJavaMathBigInteger:s1]];
    JavaMathBigInteger *t2 = [((JavaMathBigInteger *) nil_chk(t0)) subtractWithJavaMathBigInteger:[q multiplyWithJavaMathBigInteger:t1]];
    r0 = r1;
    r1 = r2;
    s0 = s1;
    s1 = s2;
    t0 = t1;
    t1 = t2;
  }
  if ([r1 signum] <= 0) {
    return nil;
  }
  IOSObjectArray *st = [IOSObjectArray newArrayWithObjects:(id[]){ s1, t1 } count:2 type:JavaMathBigInteger_class_()];
  if (swap) {
    LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(st);
  }
  return st;
}

IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidGLVWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *lambda) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *r0 = n;
  JavaMathBigInteger *r1 = lambda;
  JavaMathBigInteger *t0 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO);
  JavaMathBigInteger *t1 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE);
  for (; ; ) {
    IOSObjectArray *qr = [((JavaMathBigInteger *) nil_chk(r0)) divideAndRemainderWithJavaMathBigInteger:r1];
    JavaMathBigInteger *q = IOSObjectArray_Get(nil_chk(qr), 0);
    JavaMathBigInteger *r2 = IOSObjectArray_Get(qr, 1);
    JavaMathBigInteger *t2 = [((JavaMathBigInteger *) nil_chk(t0)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q)) multiplyWithJavaMathBigInteger:t1]];
    if (LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(r1, n)) {
      return [IOSObjectArray newArrayWithObjects:(id[]){ r0, t0, r1, t1, r2, t2 } count:6 type:JavaMathBigInteger_class_()];
    }
    r0 = r1;
    r1 = r2;
    t0 = t1;
    t1 = t2;
  }
}

IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_chooseShortestWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *u, IOSObjectArray *v) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(u, v) ? u : v;
}

IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_intersectWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *ab, IOSObjectArray *cd) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *min = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(ab), 0))) maxWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(cd), 0)];
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ab, 1))) minWithJavaMathBigInteger:IOSObjectArray_Get(cd, 1)];
  if ([((JavaMathBigInteger *) nil_chk(min)) compareToWithId:max] > 0) {
    return nil;
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ min, max } count:2 type:JavaMathBigInteger_class_()];
}

jboolean LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  a = [((JavaMathBigInteger *) nil_chk(a)) abs];
  b = [((JavaMathBigInteger *) nil_chk(b)) abs];
  jint target = [((JavaMathBigInteger *) nil_chk(b)) bitLength];
  jint maxBits = [((JavaMathBigInteger *) nil_chk(a)) bitLength] * 2;
  jint minBits = maxBits - 1;
  return minBits <= target && (maxBits < target || [((JavaMathBigInteger *) nil_chk([a multiplyWithJavaMathBigInteger:a])) compareToWithId:b] < 0);
}

jboolean LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *u, IOSObjectArray *v) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *u1 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(u), 0))) abs];
  JavaMathBigInteger *u2 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(u, 1))) abs];
  JavaMathBigInteger *v1 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(v), 0))) abs];
  JavaMathBigInteger *v2 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v, 1))) abs];
  jboolean c1 = [((JavaMathBigInteger *) nil_chk(u1)) compareToWithId:v1] < 0;
  jboolean c2 = [((JavaMathBigInteger *) nil_chk(u2)) compareToWithId:v2] < 0;
  if (c1 == c2) {
    return c1;
  }
  JavaMathBigInteger *du = [((JavaMathBigInteger *) nil_chk([u1 multiplyWithJavaMathBigInteger:u1])) addWithJavaMathBigInteger:[u2 multiplyWithJavaMathBigInteger:u2]];
  JavaMathBigInteger *dv = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(v1)) multiplyWithJavaMathBigInteger:v1])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(v2)) multiplyWithJavaMathBigInteger:v2]];
  return [((JavaMathBigInteger *) nil_chk(du)) compareToWithId:dv] < 0;
}

jboolean LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isVectorBoundedBySqrtWithJavaMathBigIntegerArray_withJavaMathBigInteger_(IOSObjectArray *v, JavaMathBigInteger *n) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(v), 0))) abs])) maxWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v, 1))) abs]];
  return LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(max, n);
}

IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_orderWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  if ([((JavaMathBigInteger *) nil_chk(a)) compareToWithId:b] <= 0) {
    return [IOSObjectArray newArrayWithObjects:(id[]){ a, b } count:2 type:JavaMathBigInteger_class_()];
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ b, a } count:2 type:JavaMathBigInteger_class_()];
}

JavaMathBigInteger *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *x, JavaMathBigInteger *y) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  jboolean negative = ([((JavaMathBigInteger *) nil_chk(x)) signum] != [((JavaMathBigInteger *) nil_chk(y)) signum]);
  x = [x abs];
  y = [y abs];
  JavaMathBigInteger *result = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(y)) shiftRightWithInt:1]])) divideWithJavaMathBigInteger:y];
  return negative ? [((JavaMathBigInteger *) nil_chk(result)) negate] : result;
}

IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_solveQuadraticEquationWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *r, JavaMathBigInteger *s) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *det = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) multiplyWithJavaMathBigInteger:r])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(s)) shiftLeftWithInt:2]])) modWithJavaMathBigInteger:n];
  JavaMathBigInteger *root1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([new_LibOrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_(n, det) sqrt])) toBigInteger];
  JavaMathBigInteger *root2 = [((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:root1];
  if ([((JavaMathBigInteger *) nil_chk(root1)) testBitWithInt:0]) {
    root2 = [((JavaMathBigInteger *) nil_chk(root2)) addWithJavaMathBigInteger:n];
  }
  else {
    root1 = [root1 addWithJavaMathBigInteger:n];
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ [((JavaMathBigInteger *) nil_chk(root1)) shiftRightWithInt:1], [((JavaMathBigInteger *) nil_chk(root2)) shiftRightWithInt:1] } count:2 type:JavaMathBigInteger_class_()];
}

IOSObjectArray *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_findBetaValuesWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *c) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *q = [((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getField])) getCharacteristic];
  JavaMathBigInteger *e = [((JavaMathBigInteger *) nil_chk(q)) divideWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, THREE)];
  JavaSecuritySecureRandom *random = new_JavaSecuritySecureRandom_init();
  JavaMathBigInteger *b;
  do {
    JavaMathBigInteger *r = LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO), [q subtractWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO)], random);
    b = [((JavaMathBigInteger *) nil_chk(r)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:q];
  }
  while ([((JavaMathBigInteger *) nil_chk(b)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)]);
  LibOrgBouncycastleMathEcECFieldElement *beta = [c fromBigIntegerWithJavaMathBigInteger:b];
  return [IOSObjectArray newArrayWithObjects:(id[]){ beta, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) square] } count:2 type:LibOrgBouncycastleMathEcECFieldElement_class_()];
}

JavaMathBigInteger *LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_isqrtWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *g0 = [((JavaMathBigInteger *) nil_chk(x)) shiftRightWithInt:[x bitLength] / 2];
  for (; ; ) {
    JavaMathBigInteger *g1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(g0)) addWithJavaMathBigInteger:[x divideWithJavaMathBigInteger:g0]])) shiftRightWithInt:1];
    if ([((JavaMathBigInteger *) nil_chk(g1)) isEqual:g0]) {
      return g1;
    }
    g0 = g1;
  }
}

void LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(IOSObjectArray *ab) {
  LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms_initialize();
  JavaMathBigInteger *tmp = IOSObjectArray_Get(nil_chk(ab), 0);
  (void) IOSObjectArray_Set(ab, 0, IOSObjectArray_Get(ab, 1));
  (void) IOSObjectArray_Set(ab, 1, tmp);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcToolsDiscoverEndomorphisms)
