//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/rainbow/RainbowKeysToParams.java
//

#include "AsymmetricKeyParameter.h"
#include "BCRainbowPrivateKey.h"
#include "BCRainbowPublicKey.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RainbowKeysToParams.h"
#include "RainbowPrivateKeyParameters.h"
#include "RainbowPublicKeyParameters.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"

@implementation LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(key);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(generatePrivateKeyParameterWithJavaSecurityPrivateKey:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "generatePrivateKeyParameter", "LJavaSecurityPrivateKey;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams = { "RainbowKeysToParams", "lib.org.bouncycastle.pqc.jcajce.provider.rainbow", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams;
}

@end

void LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_init(LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams *new_LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams, init)
}

LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams *create_LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams, init)
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_initialize();
  if ([key isKindOfClass:[LibOrgBouncycastlePqcJcajceProviderRainbowBCRainbowPublicKey class]]) {
    LibOrgBouncycastlePqcJcajceProviderRainbowBCRainbowPublicKey *k = (LibOrgBouncycastlePqcJcajceProviderRainbowBCRainbowPublicKey *) key;
    return new_LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters_initWithInt_withShortArray2_withShortArray2_withShortArray_([((LibOrgBouncycastlePqcJcajceProviderRainbowBCRainbowPublicKey *) nil_chk(k)) getDocLength], [k getCoeffQuadratic], [k getCoeffSingular], [k getCoeffScalar]);
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"can't identify Rainbow public key: ", [[((id<JavaSecurityPublicKey>) nil_chk(key)) java_getClass] getName]));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key) {
  LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams_initialize();
  if ([key isKindOfClass:[LibOrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey class]]) {
    LibOrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *k = (LibOrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *) key;
    return new_LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters_initWithShortArray2_withShortArray_withShortArray2_withShortArray_withIntArray_withLibOrgBouncycastlePqcCryptoRainbowLayerArray_([((LibOrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *) nil_chk(k)) getInvA1], [k getB1], [k getInvA2], [k getB2], [k getVi], [k getLayers]);
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't identify Rainbow private key.");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderRainbowRainbowKeysToParams)
