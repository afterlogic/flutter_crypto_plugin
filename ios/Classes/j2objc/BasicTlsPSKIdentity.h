//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/BasicTlsPSKIdentity.java
//

#ifndef BasicTlsPSKIdentity_H
#define BasicTlsPSKIdentity_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsPSKIdentity.h"

@class IOSByteArray;

@interface LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity : NSObject < LibOrgBouncycastleCryptoTlsTlsPSKIdentity > {
 @public
  IOSByteArray *identity_;
  IOSByteArray *psk_;
}

#pragma mark Public

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)identity
                              withByteArray:(IOSByteArray *)psk;

- (instancetype __nonnull)initWithNSString:(NSString *)identity
                             withByteArray:(IOSByteArray *)psk;

- (IOSByteArray *)getPSK;

- (IOSByteArray *)getPSKIdentity;

- (void)notifyIdentityHintWithByteArray:(IOSByteArray *)psk_identity_hint;

- (void)skipIdentityHint;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity, identity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity, psk_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity_initWithByteArray_withByteArray_(LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity *self, IOSByteArray *identity, IOSByteArray *psk);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity *new_LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity_initWithByteArray_withByteArray_(IOSByteArray *identity, IOSByteArray *psk) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity *create_LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity_initWithByteArray_withByteArray_(IOSByteArray *identity, IOSByteArray *psk);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity_initWithNSString_withByteArray_(LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity *self, NSString *identity, IOSByteArray *psk);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity *new_LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity_initWithNSString_withByteArray_(NSString *identity, IOSByteArray *psk) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity *create_LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity_initWithNSString_withByteArray_(NSString *identity, IOSByteArray *psk);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsBasicTlsPSKIdentity)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BasicTlsPSKIdentity_H
