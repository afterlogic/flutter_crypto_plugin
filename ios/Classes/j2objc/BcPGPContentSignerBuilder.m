//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcPGPContentSignerBuilder.java
//

#include "AsymmetricKeyParameter.h"
#include "BcImplProvider.h"
#include "BcPGPContentSignerBuilder.h"
#include "BcPGPDigestCalculatorProvider.h"
#include "BcPGPKeyConverter.h"
#include "CryptoException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PGPContentSigner.h"
#include "PGPDigestCalculator.h"
#include "PGPPrivateKey.h"
#include "ParametersWithRandom.h"
#include "Signer.h"
#include "SignerOutputStream.h"
#include "TeeOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder () {
 @public
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPDigestCalculatorProvider *digestCalculatorProvider_;
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *keyConverter_;
  jint hashAlgorithm_;
  JavaSecuritySecureRandom *random_;
  jint keyAlgorithm_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder, digestCalculatorProvider_, LibOrgBouncycastleOpenpgpOperatorBcBcPGPDigestCalculatorProvider *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder, keyConverter_, LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder, random_, JavaSecuritySecureRandom *)

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1 : NSObject < LibOrgBouncycastleOpenpgpOperatorPGPContentSigner > {
 @public
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *this$0_;
  jint val$signatureType_;
  LibOrgBouncycastleOpenpgpPGPPrivateKey *val$privateKey_;
  id<LibOrgBouncycastleCryptoSigner> val$signer_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> val$digestCalculator_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder:(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *)outer$
                                                                             withInt:(jint)capture$0
                                          withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)capture$1
                                                  withLibOrgBouncycastleCryptoSigner:(id<LibOrgBouncycastleCryptoSigner>)capture$2
                            withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)capture$3;

- (jint)getType;

- (jint)getHashAlgorithm;

- (jint)getKeyAlgorithm;

- (jlong)getKeyID;

- (JavaIoOutputStream *)getOutputStream;

- (IOSByteArray *)getSignature;

- (IOSByteArray *)getDigest;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *outer$, jint capture$0, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$1, id<LibOrgBouncycastleCryptoSigner> capture$2, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> capture$3);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *outer$, jint capture$0, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$1, id<LibOrgBouncycastleCryptoSigner> capture$2, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *outer$, jint capture$0, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$1, id<LibOrgBouncycastleCryptoSigner> capture$2, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> capture$3);

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder

- (instancetype)initWithInt:(jint)keyAlgorithm
                    withInt:(jint)hashAlgorithm {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_initWithInt_withInt_(self, keyAlgorithm, hashAlgorithm);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  return self;
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPContentSigner>)buildWithInt:(jint)signatureType
                           withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privateKey {
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalculator = [((LibOrgBouncycastleOpenpgpOperatorBcBcPGPDigestCalculatorProvider *) nil_chk(digestCalculatorProvider_)) getWithInt:hashAlgorithm_];
  id<LibOrgBouncycastleCryptoSigner> signer = LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createSignerWithInt_withInt_(keyAlgorithm_, hashAlgorithm_);
  if (random_ != nil) {
    [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_([((LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *) nil_chk(keyConverter_)) getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPrivateKey:privateKey], random_)];
  }
  else {
    [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *) nil_chk(keyConverter_)) getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPrivateKey:privateKey]];
  }
  return new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(self, signatureType, privateKey, signer, digestCalculator);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPContentSigner;", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[2].selector = @selector(buildWithInt:withLibOrgBouncycastleOpenpgpPGPPrivateKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digestCalculatorProvider_", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPDigestCalculatorProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyConverter_", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "setSecureRandom", "LJavaSecuritySecureRandom;", "build", "ILLibOrgBouncycastleOpenpgpPGPPrivateKey;", "LLibOrgBouncycastleOpenpgpPGPException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder = { "BcPGPContentSignerBuilder", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x1, 3, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_initWithInt_withInt_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *self, jint keyAlgorithm, jint hashAlgorithm) {
  NSObject_init(self);
  self->digestCalculatorProvider_ = new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDigestCalculatorProvider_init();
  self->keyConverter_ = new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter_init();
  self->keyAlgorithm_ = keyAlgorithm;
  self->hashAlgorithm_ = hashAlgorithm;
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_initWithInt_withInt_(jint keyAlgorithm, jint hashAlgorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder, initWithInt_withInt_, keyAlgorithm, hashAlgorithm)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_initWithInt_withInt_(jint keyAlgorithm, jint hashAlgorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder, initWithInt_withInt_, keyAlgorithm, hashAlgorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder)

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder:(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *)outer$
                                                                             withInt:(jint)capture$0
                                          withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)capture$1
                                                  withLibOrgBouncycastleCryptoSigner:(id<LibOrgBouncycastleCryptoSigner>)capture$2
                            withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)capture$3 {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (jint)getType {
  return val$signatureType_;
}

- (jint)getHashAlgorithm {
  return this$0_->hashAlgorithm_;
}

- (jint)getKeyAlgorithm {
  return this$0_->keyAlgorithm_;
}

- (jlong)getKeyID {
  return [((LibOrgBouncycastleOpenpgpPGPPrivateKey *) nil_chk(val$privateKey_)) getKeyID];
}

- (JavaIoOutputStream *)getOutputStream {
  return new_LibOrgBouncycastleUtilIoTeeOutputStream_initWithJavaIoOutputStream_withJavaIoOutputStream_(new_LibOrgBouncycastleOpenpgpOperatorBcSignerOutputStream_initWithLibOrgBouncycastleCryptoSigner_(val$signer_), [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(val$digestCalculator_)) getOutputStream]);
}

- (IOSByteArray *)getSignature {
  @try {
    return [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(val$signer_)) generateSignature];
  }
  @catch (LibOrgBouncycastleCryptoCryptoException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unable to create signature");
  }
}

- (IOSByteArray *)getDigest {
  return [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(val$digestCalculator_)) getDigest];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder:withInt:withLibOrgBouncycastleOpenpgpPGPPrivateKey:withLibOrgBouncycastleCryptoSigner:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(getHashAlgorithm);
  methods[3].selector = @selector(getKeyAlgorithm);
  methods[4].selector = @selector(getKeyID);
  methods[5].selector = @selector(getOutputStream);
  methods[6].selector = @selector(getSignature);
  methods[7].selector = @selector(getDigest);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$signatureType_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$privateKey_", "LLibOrgBouncycastleOpenpgpPGPPrivateKey;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$signer_", "LLibOrgBouncycastleCryptoSigner;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$digestCalculator_", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder;", "buildWithInt:withLibOrgBouncycastleOpenpgpPGPPrivateKey:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1 = { "", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x8010, 8, 5, 0, -1, 1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *outer$, jint capture$0, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$1, id<LibOrgBouncycastleCryptoSigner> capture$2, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> capture$3) {
  self->this$0_ = outer$;
  self->val$signatureType_ = capture$0;
  self->val$privateKey_ = capture$1;
  self->val$signer_ = capture$2;
  self->val$digestCalculator_ = capture$3;
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *outer$, jint capture$0, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$1, id<LibOrgBouncycastleCryptoSigner> capture$2, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> capture$3) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_, outer$, capture$0, capture$1, capture$2, capture$3)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder *outer$, jint capture$0, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$1, id<LibOrgBouncycastleCryptoSigner> capture$2, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> capture$3) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPContentSignerBuilder_withInt_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleCryptoSigner_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_, outer$, capture$0, capture$1, capture$2, capture$3)
}
