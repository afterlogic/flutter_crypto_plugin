//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SRPTlsClient.java
//

#ifndef SRPTlsClient_H
#define SRPTlsClient_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsClient.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaUtilHashtable;
@protocol LibOrgBouncycastleCryptoTlsTlsAuthentication;
@protocol LibOrgBouncycastleCryptoTlsTlsCipherFactory;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;
@protocol LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier;

@interface LibOrgBouncycastleCryptoTlsSRPTlsClient : LibOrgBouncycastleCryptoTlsAbstractTlsClient {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier_;
  IOSByteArray *identity_;
  IOSByteArray *password_;
}

#pragma mark Public

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)identity
                              withByteArray:(IOSByteArray *)password;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                                                                withByteArray:(IOSByteArray *)identity
                                                                withByteArray:(IOSByteArray *)password;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                           withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier:(id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier>)groupVerifier
                                                                withByteArray:(IOSByteArray *)identity
                                                                withByteArray:(IOSByteArray *)password;

- (id<LibOrgBouncycastleCryptoTlsTlsAuthentication>)getAuthentication;

- (IOSIntArray *)getCipherSuites;

- (JavaUtilHashtable *)getClientExtensions;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange;

- (void)processServerExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createSRPKeyExchangeWithInt:(jint)keyExchange;

- (jboolean)requireSRPServerExtension;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsSRPTlsClient)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSRPTlsClient, groupVerifier_, id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSRPTlsClient, identity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSRPTlsClient, password_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithByteArray_withByteArray_(LibOrgBouncycastleCryptoTlsSRPTlsClient *self, IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsClient *new_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithByteArray_withByteArray_(IOSByteArray *identity, IOSByteArray *password) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsClient *create_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithByteArray_withByteArray_(IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_(LibOrgBouncycastleCryptoTlsSRPTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsClient *new_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, IOSByteArray *identity, IOSByteArray *password) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsClient *create_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(LibOrgBouncycastleCryptoTlsSRPTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsClient *new_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsClient *create_LibOrgBouncycastleCryptoTlsSRPTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsSRPTlsClient)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SRPTlsClient_H
