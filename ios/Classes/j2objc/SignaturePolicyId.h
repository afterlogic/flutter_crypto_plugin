//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/esf/SignaturePolicyId.java
//

#ifndef SignaturePolicyId_H
#define SignaturePolicyId_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue;
@class LibOrgBouncycastleAsn1EsfSigPolicyQualifiers;

@interface LibOrgBouncycastleAsn1EsfSignaturePolicyId : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)sigPolicyIdentifier
                           withLibOrgBouncycastleAsn1EsfOtherHashAlgAndValue:(LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *)sigPolicyHash;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)sigPolicyId
                           withLibOrgBouncycastleAsn1EsfOtherHashAlgAndValue:(LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *)sigPolicyHash
                            withLibOrgBouncycastleAsn1EsfSigPolicyQualifiers:(LibOrgBouncycastleAsn1EsfSigPolicyQualifiers *)sigPolicyQualifiers;

+ (LibOrgBouncycastleAsn1EsfSignaturePolicyId *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *)getSigPolicyHash;

- (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getSigPolicyId;

- (LibOrgBouncycastleAsn1EsfSigPolicyQualifiers *)getSigPolicyQualifiers;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1EsfSignaturePolicyId)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EsfSignaturePolicyId *LibOrgBouncycastleAsn1EsfSignaturePolicyId_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1EsfSignaturePolicyId_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1EsfOtherHashAlgAndValue_(LibOrgBouncycastleAsn1EsfSignaturePolicyId *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sigPolicyIdentifier, LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *sigPolicyHash);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EsfSignaturePolicyId *new_LibOrgBouncycastleAsn1EsfSignaturePolicyId_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1EsfOtherHashAlgAndValue_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sigPolicyIdentifier, LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *sigPolicyHash) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EsfSignaturePolicyId *create_LibOrgBouncycastleAsn1EsfSignaturePolicyId_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1EsfOtherHashAlgAndValue_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sigPolicyIdentifier, LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *sigPolicyHash);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1EsfSignaturePolicyId_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1EsfOtherHashAlgAndValue_withLibOrgBouncycastleAsn1EsfSigPolicyQualifiers_(LibOrgBouncycastleAsn1EsfSignaturePolicyId *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sigPolicyId, LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *sigPolicyHash, LibOrgBouncycastleAsn1EsfSigPolicyQualifiers *sigPolicyQualifiers);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EsfSignaturePolicyId *new_LibOrgBouncycastleAsn1EsfSignaturePolicyId_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1EsfOtherHashAlgAndValue_withLibOrgBouncycastleAsn1EsfSigPolicyQualifiers_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sigPolicyId, LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *sigPolicyHash, LibOrgBouncycastleAsn1EsfSigPolicyQualifiers *sigPolicyQualifiers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EsfSignaturePolicyId *create_LibOrgBouncycastleAsn1EsfSignaturePolicyId_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1EsfOtherHashAlgAndValue_withLibOrgBouncycastleAsn1EsfSigPolicyQualifiers_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sigPolicyId, LibOrgBouncycastleAsn1EsfOtherHashAlgAndValue *sigPolicyHash, LibOrgBouncycastleAsn1EsfSigPolicyQualifiers *sigPolicyQualifiers);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1EsfSignaturePolicyId)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SignaturePolicyId_H
