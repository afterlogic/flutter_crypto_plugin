//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java
//

#ifndef XMSSUtil_H
#define XMSSUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSClass;
@class IOSObjectArray;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastlePqcCryptoXmssXMSSUtil : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (jboolean)areEqualWithByteArray2:(IOSObjectArray *)a
                    withByteArray2:(IOSObjectArray *)b;

+ (jlong)bytesToXBigEndianWithByteArray:(IOSByteArray *)inArg
                                withInt:(jint)offset
                                withInt:(jint)size;

+ (jint)calculateTauWithInt:(jint)index
                    withInt:(jint)height;

+ (IOSByteArray *)cloneArrayWithByteArray:(IOSByteArray *)inArg;

+ (IOSObjectArray *)cloneArrayWithByteArray2:(IOSObjectArray *)inArg;

+ (void)copyBytesAtOffsetWithByteArray:(IOSByteArray *)dst
                         withByteArray:(IOSByteArray *)src
                               withInt:(jint)offset OBJC_METHOD_FAMILY_NONE;

+ (id)deserializeWithByteArray:(IOSByteArray *)data
                  withIOSClass:(IOSClass *)clazz;

+ (void)dumpByteArrayWithByteArray2:(IOSObjectArray *)x;

+ (IOSByteArray *)extractBytesAtOffsetWithByteArray:(IOSByteArray *)src
                                            withInt:(jint)offset
                                            withInt:(jint)length;

+ (jint)getDigestSizeWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

+ (jint)getLeafIndexWithLong:(jlong)index
                     withInt:(jint)xmssTreeHeight;

+ (jlong)getTreeIndexWithLong:(jlong)index
                      withInt:(jint)xmssTreeHeight;

+ (jboolean)hasNullPointerWithByteArray2:(IOSObjectArray *)inArg;

+ (jboolean)isIndexValidWithInt:(jint)height
                       withLong:(jlong)index;

+ (jboolean)isNewAuthenticationPathNeededWithLong:(jlong)globalIndex
                                          withInt:(jint)xmssHeight
                                          withInt:(jint)layer;

+ (jboolean)isNewBDSInitNeededWithLong:(jlong)globalIndex
                               withInt:(jint)xmssHeight
                               withInt:(jint)layer;

+ (jint)log2WithInt:(jint)n;

+ (void)longToBigEndianWithLong:(jlong)value
                  withByteArray:(IOSByteArray *)inArg
                        withInt:(jint)offset;

+ (IOSByteArray *)serializeWithId:(id)obj;

+ (IOSByteArray *)toBytesBigEndianWithLong:(jlong)value
                                   withInt:(jint)sizeInByte;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoXmssXMSSUtil)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssXMSSUtil_init(LibOrgBouncycastlePqcCryptoXmssXMSSUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssXMSSUtil *new_LibOrgBouncycastlePqcCryptoXmssXMSSUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssXMSSUtil *create_LibOrgBouncycastlePqcCryptoXmssXMSSUtil_init(void);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_(jint n);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(jlong value, jint sizeInByte);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssXMSSUtil_longToBigEndianWithLong_withByteArray_withInt_(jlong value, IOSByteArray *inArg, jint offset);

FOUNDATION_EXPORT jlong LibOrgBouncycastlePqcCryptoXmssXMSSUtil_bytesToXBigEndianWithByteArray_withInt_withInt_(IOSByteArray *inArg, jint offset, jint size);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(IOSByteArray *inArg);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray2_(IOSObjectArray *inArg);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcCryptoXmssXMSSUtil_areEqualWithByteArray2_withByteArray2_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssXMSSUtil_dumpByteArrayWithByteArray2_(IOSObjectArray *x);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcCryptoXmssXMSSUtil_hasNullPointerWithByteArray2_(IOSObjectArray *inArg);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssXMSSUtil_copyBytesAtOffsetWithByteArray_withByteArray_withInt_(IOSByteArray *dst, IOSByteArray *src, jint offset);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcCryptoXmssXMSSUtil_extractBytesAtOffsetWithByteArray_withInt_withInt_(IOSByteArray *src, jint offset, jint length);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_(jint height, jlong index);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getDigestSizeWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest);

FOUNDATION_EXPORT jlong LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(jlong index, jint xmssTreeHeight);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(jlong index, jint xmssTreeHeight);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcCryptoXmssXMSSUtil_serializeWithId_(id obj);

FOUNDATION_EXPORT id LibOrgBouncycastlePqcCryptoXmssXMSSUtil_deserializeWithByteArray_withIOSClass_(IOSByteArray *data, IOSClass *clazz);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoXmssXMSSUtil_calculateTauWithInt_withInt_(jint index, jint height);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcCryptoXmssXMSSUtil_isNewBDSInitNeededWithLong_withInt_withInt_(jlong globalIndex, jint xmssHeight, jint layer);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcCryptoXmssXMSSUtil_isNewAuthenticationPathNeededWithLong_withInt_withInt_(jlong globalIndex, jint xmssHeight, jint layer);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoXmssXMSSUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // XMSSUtil_H
