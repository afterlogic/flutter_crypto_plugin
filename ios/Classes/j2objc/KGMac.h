//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/KGMac.java
//

#ifndef KGMac_H
#define KGMac_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Mac.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoModesKGCMBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoMacsKGMac : NSObject < LibOrgBouncycastleCryptoMac >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoModesKGCMBlockCipher:(LibOrgBouncycastleCryptoModesKGCMBlockCipher *)cipher;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoModesKGCMBlockCipher:(LibOrgBouncycastleCryptoModesKGCMBlockCipher *)cipher
                                                                       withInt:(jint)macSizeBits;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoMacsKGMac)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsKGMac_initWithLibOrgBouncycastleCryptoModesKGCMBlockCipher_(LibOrgBouncycastleCryptoMacsKGMac *self, LibOrgBouncycastleCryptoModesKGCMBlockCipher *cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsKGMac *new_LibOrgBouncycastleCryptoMacsKGMac_initWithLibOrgBouncycastleCryptoModesKGCMBlockCipher_(LibOrgBouncycastleCryptoModesKGCMBlockCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsKGMac *create_LibOrgBouncycastleCryptoMacsKGMac_initWithLibOrgBouncycastleCryptoModesKGCMBlockCipher_(LibOrgBouncycastleCryptoModesKGCMBlockCipher *cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsKGMac_initWithLibOrgBouncycastleCryptoModesKGCMBlockCipher_withInt_(LibOrgBouncycastleCryptoMacsKGMac *self, LibOrgBouncycastleCryptoModesKGCMBlockCipher *cipher, jint macSizeBits);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsKGMac *new_LibOrgBouncycastleCryptoMacsKGMac_initWithLibOrgBouncycastleCryptoModesKGCMBlockCipher_withInt_(LibOrgBouncycastleCryptoModesKGCMBlockCipher *cipher, jint macSizeBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsKGMac *create_LibOrgBouncycastleCryptoMacsKGMac_initWithLibOrgBouncycastleCryptoModesKGCMBlockCipher_withInt_(LibOrgBouncycastleCryptoModesKGCMBlockCipher *cipher, jint macSizeBits);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoMacsKGMac)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // KGMac_H
