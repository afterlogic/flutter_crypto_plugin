//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SSL3Mac.java
//

#ifndef SSL3Mac_H
#define SSL3Mac_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Mac.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastleCryptoTlsSSL3Mac : NSObject < LibOrgBouncycastleCryptoMac >
@property (readonly, class) IOSByteArray *IPAD NS_SWIFT_NAME(IPAD);
@property (readonly, class) IOSByteArray *OPAD NS_SWIFT_NAME(OPAD);

+ (IOSByteArray *)IPAD;

+ (IOSByteArray *)OPAD;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (id<LibOrgBouncycastleCryptoDigest>)getUnderlyingDigest;

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsSSL3Mac)

inline IOSByteArray *LibOrgBouncycastleCryptoTlsSSL3Mac_get_IPAD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsSSL3Mac_IPAD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsSSL3Mac, IPAD, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoTlsSSL3Mac_get_OPAD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsSSL3Mac_OPAD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsSSL3Mac, OPAD, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSSL3Mac_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoTlsSSL3Mac *self, id<LibOrgBouncycastleCryptoDigest> digest);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSSL3Mac *new_LibOrgBouncycastleCryptoTlsSSL3Mac_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSSL3Mac *create_LibOrgBouncycastleCryptoTlsSSL3Mac_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsSSL3Mac)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SSL3Mac_H
