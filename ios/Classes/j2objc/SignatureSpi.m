//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/edec/SignatureSpi.java
//

#include "AsymmetricKeyParameter.h"
#include "BCEdDSAPrivateKey.h"
#include "BCEdDSAPublicKey.h"
#include "CryptoException.h"
#include "Ed25519Signer.h"
#include "Ed448PrivateKeyParameters.h"
#include "Ed448PublicKeyParameters.h"
#include "Ed448Signer.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SignatureSpi.h"
#include "Signer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SignatureException.h"
#include "java/security/SignatureSpi.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi () {
 @public
  NSString *algorithm_;
  id<LibOrgBouncycastleCryptoSigner> signer_;
}

- (id<LibOrgBouncycastleCryptoSigner>)getSignerWithNSString:(NSString *)alg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi, algorithm_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi, signer_, id<LibOrgBouncycastleCryptoSigner>)

inline IOSByteArray *LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_get_EMPTY_CONTEXT(void);
static IOSByteArray *LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EMPTY_CONTEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi, EMPTY_CONTEXT, IOSByteArray *)

__attribute__((unused)) static id<LibOrgBouncycastleCryptoSigner> LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_getSignerWithNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi *self, NSString *alg);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi

- (instancetype)initWithNSString:(NSString *)algorithm {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_initWithNSString_(self, algorithm);
  return self;
}

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  if ([publicKey isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey class]]) {
    LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *pub = [((LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *) nil_chk(((LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *) publicKey))) engineGetKeyParameters];
    if ([pub isKindOfClass:[LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters class]]) {
      signer_ = LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_getSignerWithNSString_(self, @"Ed448");
    }
    else {
      signer_ = LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_getSignerWithNSString_(self, @"Ed25519");
    }
    [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:pub];
  }
  else {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"cannot identify EdDSA public key");
  }
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey {
  if ([privateKey isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPrivateKey class]]) {
    LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *priv = [((LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPrivateKey *) nil_chk(((LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPrivateKey *) privateKey))) engineGetKeyParameters];
    if ([priv isKindOfClass:[LibOrgBouncycastleCryptoParamsEd448PrivateKeyParameters class]]) {
      signer_ = LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_getSignerWithNSString_(self, @"Ed448");
    }
    else {
      signer_ = LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_getSignerWithNSString_(self, @"Ed25519");
    }
    [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:priv];
  }
  else {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"cannot identify EdDSA public key");
  }
}

- (id<LibOrgBouncycastleCryptoSigner>)getSignerWithNSString:(NSString *)alg {
  return LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_getSignerWithNSString_(self, alg);
}

- (void)engineUpdateWithByte:(jbyte)b {
  [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer_)) updateWithByte:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)bytes
                          withInt:(jint)off
                          withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer_)) updateWithByteArray:bytes withInt:off withInt:len];
}

- (IOSByteArray *)engineSign {
  @try {
    return [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer_)) generateSignature];
  }
  @catch (LibOrgBouncycastleCryptoCryptoException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_([e getMessage]);
  }
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)signature {
  return [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer_)) verifySignatureWithByteArray:signature];
}

- (void)engineSetParameterWithNSString:(NSString *)s
                                withId:(id)o {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)s {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineGetParameter unsupported");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x2, 6, 0, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 10, 9, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 9, -1, -1, -1 },
    { NULL, "Z", 0x4, 11, 12, 9, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, 15, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 16, 0, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(engineInitVerifyWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:);
  methods[3].selector = @selector(getSignerWithNSString:);
  methods[4].selector = @selector(engineUpdateWithByte:);
  methods[5].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(engineSign);
  methods[7].selector = @selector(engineVerifyWithByteArray:);
  methods[8].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[9].selector = @selector(engineGetParameterWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_CONTEXT", "[B", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "algorithm_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signer_", "LLibOrgBouncycastleCryptoSigner;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "engineInitVerify", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "engineInitSign", "LJavaSecurityPrivateKey;", "getSigner", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "[B", "engineSetParameter", "LNSString;LNSObject;", "LJavaSecurityInvalidParameterException;", "engineGetParameter", &LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EMPTY_CONTEXT, "LLibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA;LLibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448;LLibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi = { "SignatureSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, 18, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi class]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EMPTY_CONTEXT = [IOSByteArray newArrayWithLength:0];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi)
  }
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_initWithNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi *self, NSString *algorithm) {
  JavaSecuritySignatureSpi_init(self);
  self->algorithm_ = algorithm;
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_initWithNSString_(NSString *algorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi, initWithNSString_, algorithm)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_initWithNSString_(NSString *algorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi, initWithNSString_, algorithm)
}

id<LibOrgBouncycastleCryptoSigner> LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_getSignerWithNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi *self, NSString *alg) {
  if (self->algorithm_ != nil && ![((NSString *) nil_chk(alg)) isEqual:self->algorithm_]) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"inappropriate key for ", self->algorithm_));
  }
  if ([((NSString *) nil_chk(alg)) isEqual:@"Ed448"]) {
    return new_LibOrgBouncycastleCryptoSignersEd448Signer_initWithByteArray_(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EMPTY_CONTEXT);
  }
  else {
    return new_LibOrgBouncycastleCryptoSignersEd25519Signer_init();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA = { "EdDSA", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_initWithNSString_(self, nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_EdDSA)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448 = { "Ed448", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_initWithNSString_(self, @"Ed448");
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448 *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448 *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed448)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519 = { "Ed25519", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_initWithNSString_(self, @"Ed25519");
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519 *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519 *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecSignatureSpi_Ed25519)
