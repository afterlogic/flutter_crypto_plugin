//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/kdf/ConcatenationKDFGenerator.java
//

#include "ConcatenationKDFGenerator.h"
#include "DerivationParameters.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KDFParameters.h"
#include "OutputLengthException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  IOSByteArray *shared_;
  IOSByteArray *otherInfo_;
  jint hLen_;
}

- (void)ItoOSPWithInt:(jint)i
        withByteArray:(IOSByteArray *)sp;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator, shared_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator, otherInfo_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_ItoOSPWithInt_withByteArray_(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator *self, jint i, IOSByteArray *sp);

@implementation LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoDerivationParameters:(id<LibOrgBouncycastleCryptoDerivationParameters>)param {
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsKDFParameters class]]) {
    LibOrgBouncycastleCryptoParamsKDFParameters *p = (LibOrgBouncycastleCryptoParamsKDFParameters *) param;
    shared_ = [((LibOrgBouncycastleCryptoParamsKDFParameters *) nil_chk(p)) getSharedSecret];
    otherInfo_ = [p getIV];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"KDF parameters required for generator");
  }
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return digest_;
}

- (void)ItoOSPWithInt:(jint)i
        withByteArray:(IOSByteArray *)sp {
  LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_ItoOSPWithInt_withByteArray_(self, i, sp);
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  if ((((IOSByteArray *) nil_chk(outArg))->size_ - len) < outOff) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too small");
  }
  IOSByteArray *hashBuf = [IOSByteArray newArrayWithLength:hLen_];
  IOSByteArray *C = [IOSByteArray newArrayWithLength:4];
  jint counter = 1;
  jint outputLen = 0;
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  if (len > hLen_) {
    do {
      LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_ItoOSPWithInt_withByteArray_(self, counter, C);
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:shared_ withInt:0 withInt:((IOSByteArray *) nil_chk(shared_))->size_];
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:otherInfo_ withInt:0 withInt:((IOSByteArray *) nil_chk(otherInfo_))->size_];
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hashBuf withInt:0];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashBuf, 0, outArg, outOff + outputLen, hLen_);
      outputLen += hLen_;
    }
    while ((counter++) < (len / hLen_));
  }
  if (outputLen < len) {
    LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_ItoOSPWithInt_withByteArray_(self, counter, C);
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:shared_ withInt:0 withInt:((IOSByteArray *) nil_chk(shared_))->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:otherInfo_ withInt:0 withInt:((IOSByteArray *) nil_chk(otherInfo_))->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hashBuf withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashBuf, 0, outArg, outOff + outputLen, len - outputLen);
  }
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(ItoOSPWithInt:withByteArray:);
  methods[4].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shared_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "otherInfo_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoDerivationParameters;", "ItoOSP", "I[B", "generateBytes", "[BII", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator = { "ConcatenationKDFGenerator", "lib.org.bouncycastle.crypto.agreement.kdf", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator;
}

@end

void LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
  self->hLen_ = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
}

LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator *new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator *create_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

void LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_ItoOSPWithInt_withByteArray_(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator *self, jint i, IOSByteArray *sp) {
  *IOSByteArray_GetRef(nil_chk(sp), 0) = (jbyte) (JreURShift32(i, 24));
  *IOSByteArray_GetRef(sp, 1) = (jbyte) (JreURShift32(i, 16));
  *IOSByteArray_GetRef(sp, 2) = (jbyte) (JreURShift32(i, 8));
  *IOSByteArray_GetRef(sp, 3) = (jbyte) (JreURShift32(i, 0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator)
