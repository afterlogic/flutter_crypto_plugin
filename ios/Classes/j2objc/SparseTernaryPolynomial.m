//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.java
//

#include "ArrayEncoder.h"
#include "Arrays.h"
#include "BigIntPolynomial.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntegerPolynomial.h"
#include "J2ObjC_source.h"
#include "SparseTernaryPolynomial.h"
#include "Util.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial () {
 @public
  jint N_;
  IOSIntArray *ones_;
  IOSIntArray *negOnes_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, ones_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, negOnes_, IOSIntArray *)

inline jint LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_get_BITS_PER_INDEX(void);
#define LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_BITS_PER_INDEX 11
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, BITS_PER_INDEX, jint)

@implementation LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial

- (instancetype)initWithInt:(jint)N
               withIntArray:(IOSIntArray *)ones
               withIntArray:(IOSIntArray *)negOnes {
  LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(self, N, ones, negOnes);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)intPoly {
  LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(self, intPoly);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)coeffs {
  LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(self, coeffs);
  return self;
}

+ (LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)fromBinaryWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                            withInt:(jint)N
                                                                                            withInt:(jint)numOnes
                                                                                            withInt:(jint)numNegOnes {
  return LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_(is, N, numOnes, numNegOnes);
}

+ (LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                                                  withInt:(jint)numOnes
                                                                                  withInt:(jint)numNegOnes
                                                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
}

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2 {
  IOSIntArray *b = ((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2))->coeffs_;
  if (((IOSIntArray *) nil_chk(b))->size_ != N_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of coefficients must be the same");
  }
  IOSIntArray *c = [IOSIntArray newArrayWithLength:N_];
  for (jint idx = 0; idx != ((IOSIntArray *) nil_chk(ones_))->size_; idx++) {
    jint i = IOSIntArray_Get(ones_, idx);
    jint j = N_ - 1 - i;
    for (jint k = N_ - 1; k >= 0; k--) {
      *IOSIntArray_GetRef(c, k) += IOSIntArray_Get(b, j);
      j--;
      if (j < 0) {
        j = N_ - 1;
      }
    }
  }
  for (jint idx = 0; idx != ((IOSIntArray *) nil_chk(negOnes_))->size_; idx++) {
    jint i = IOSIntArray_Get(negOnes_, idx);
    jint j = N_ - 1 - i;
    for (jint k = N_ - 1; k >= 0; k--) {
      *IOSIntArray_GetRef(c, k) -= IOSIntArray_Get(b, j);
      j--;
      if (j < 0) {
        j = N_ - 1;
      }
    }
  }
  return new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(c);
}

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                       withInt:(jint)modulus {
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c = [self multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:poly2];
  [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c)) modWithInt:modulus];
  return c;
}

- (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2 {
  IOSObjectArray *b = ((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(poly2))->coeffs_;
  if (((IOSObjectArray *) nil_chk(b))->size_ != N_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of coefficients must be the same");
  }
  IOSObjectArray *c = [IOSObjectArray newArrayWithLength:N_ type:JavaMathBigInteger_class_()];
  for (jint i = 0; i < N_; i++) {
    (void) IOSObjectArray_Set(c, i, JreLoadStatic(JavaMathBigInteger, ZERO));
  }
  for (jint idx = 0; idx != ((IOSIntArray *) nil_chk(ones_))->size_; idx++) {
    jint i = IOSIntArray_Get(ones_, idx);
    jint j = N_ - 1 - i;
    for (jint k = N_ - 1; k >= 0; k--) {
      (void) IOSObjectArray_Set(c, k, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(c, k))) addWithJavaMathBigInteger:IOSObjectArray_Get(b, j)]);
      j--;
      if (j < 0) {
        j = N_ - 1;
      }
    }
  }
  for (jint idx = 0; idx != ((IOSIntArray *) nil_chk(negOnes_))->size_; idx++) {
    jint i = IOSIntArray_Get(negOnes_, idx);
    jint j = N_ - 1 - i;
    for (jint k = N_ - 1; k >= 0; k--) {
      (void) IOSObjectArray_Set(c, k, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(c, k))) subtractWithJavaMathBigInteger:IOSObjectArray_Get(b, j)]);
      j--;
      if (j < 0) {
        j = N_ - 1;
      }
    }
  }
  return new_LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithJavaMathBigIntegerArray_(c);
}

- (IOSIntArray *)getOnes {
  return ones_;
}

- (IOSIntArray *)getNegOnes {
  return negOnes_;
}

- (IOSByteArray *)toBinary {
  jint maxIndex = JreLShift32(1, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_BITS_PER_INDEX);
  IOSByteArray *bin1 = LibOrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(ones_, maxIndex);
  IOSByteArray *bin2 = LibOrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(negOnes_, maxIndex);
  IOSByteArray *bin = LibOrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(bin1, ((IOSByteArray *) nil_chk(bin1))->size_ + ((IOSByteArray *) nil_chk(bin2))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bin2, 0, bin, bin1->size_, bin2->size_);
  return bin;
}

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial {
  IOSIntArray *coeffs = [IOSIntArray newArrayWithLength:N_];
  for (jint idx = 0; idx != ((IOSIntArray *) nil_chk(ones_))->size_; idx++) {
    jint i = IOSIntArray_Get(ones_, idx);
    *IOSIntArray_GetRef(coeffs, i) = 1;
  }
  for (jint idx = 0; idx != ((IOSIntArray *) nil_chk(negOnes_))->size_; idx++) {
    jint i = IOSIntArray_Get(negOnes_, idx);
    *IOSIntArray_GetRef(coeffs, i) = -1;
  }
  return new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(coeffs);
}

- (jint)size {
  return N_;
}

- (void)clear {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(ones_))->size_; i++) {
    *IOSIntArray_GetRef(ones_, i) = 0;
  }
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(negOnes_))->size_; i++) {
    *IOSIntArray_GetRef(negOnes_, i) = 0;
  }
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + N_;
  result = prime * result + LibOrgBouncycastleUtilArrays_hashCodeWithIntArray_(negOnes_);
  result = prime * result + LibOrgBouncycastleUtilArrays_hashCodeWithIntArray_(ones_);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *other = (LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *) cast_chk(obj, [LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial class]);
  if (N_ != other->N_) {
    return false;
  }
  if (!LibOrgBouncycastleUtilArrays_areEqualWithIntArray_withIntArray_(negOnes_, other->negOnes_)) {
    return false;
  }
  if (!LibOrgBouncycastleUtilArrays_areEqualWithIntArray_withIntArray_(ones_, other->ones_)) {
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial;", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withIntArray:withIntArray:);
  methods[1].selector = @selector(initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[2].selector = @selector(initWithIntArray:);
  methods[3].selector = @selector(fromBinaryWithJavaIoInputStream:withInt:withInt:withInt:);
  methods[4].selector = @selector(generateRandomWithInt:withInt:withInt:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[6].selector = @selector(multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[7].selector = @selector(multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:);
  methods[8].selector = @selector(getOnes);
  methods[9].selector = @selector(getNegOnes);
  methods[10].selector = @selector(toBinary);
  methods[11].selector = @selector(toIntegerPolynomial);
  methods[12].selector = @selector(size);
  methods[13].selector = @selector(clear);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BITS_PER_INDEX", "I", .constantValue.asInt = LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_BITS_PER_INDEX, 0x1a, -1, -1, -1, -1 },
    { "N_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ones_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "negOnes_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[I[I", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", "[I", "fromBinary", "LJavaIoInputStream;III", "LJavaIoIOException;", "generateRandom", "IIILJavaSecuritySecureRandom;", "mult", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;I", "LLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial = { "SparseTernaryPolynomial", "lib.org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x1, 16, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial;
}

@end

void LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, jint N, IOSIntArray *ones, IOSIntArray *negOnes) {
  NSObject_init(self);
  self->N_ = N;
  self->ones_ = ones;
  self->negOnes_ = negOnes;
}

LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(jint N, IOSIntArray *ones, IOSIntArray *negOnes) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithInt_withIntArray_withIntArray_, N, ones, negOnes)
}

LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(jint N, IOSIntArray *ones, IOSIntArray *negOnes) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithInt_withIntArray_withIntArray_, N, ones, negOnes)
}

void LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(self, ((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(intPoly))->coeffs_);
}

LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_, intPoly)
}

LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_, intPoly)
}

void LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, IOSIntArray *coeffs) {
  NSObject_init(self);
  self->N_ = ((IOSIntArray *) nil_chk(coeffs))->size_;
  self->ones_ = [IOSIntArray newArrayWithLength:self->N_];
  self->negOnes_ = [IOSIntArray newArrayWithLength:self->N_];
  jint onesIdx = 0;
  jint negOnesIdx = 0;
  for (jint i = 0; i < self->N_; i++) {
    jint c = IOSIntArray_Get(coeffs, i);
    switch (c) {
      case 1:
      *IOSIntArray_GetRef(self->ones_, onesIdx++) = i;
      break;
      case -1:
      *IOSIntArray_GetRef(self->negOnes_, negOnesIdx++) = i;
      break;
      case 0:
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Illegal value: ", c, @", must be one of {-1, 0, 1}"));
    }
  }
  self->ones_ = LibOrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(self->ones_, onesIdx);
  self->negOnes_ = LibOrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(self->negOnes_, negOnesIdx);
}

LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithIntArray_, coeffs)
}

LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithIntArray_, coeffs)
}

LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_(JavaIoInputStream *is, jint N, jint numOnes, jint numNegOnes) {
  LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initialize();
  jint maxIndex = JreLShift32(1, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_BITS_PER_INDEX);
  jint bitsPerIndex = 32 - JavaLangInteger_numberOfLeadingZerosWithInt_(maxIndex - 1);
  jint data1Len = (numOnes * bitsPerIndex + 7) / 8;
  IOSByteArray *data1 = LibOrgBouncycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, data1Len);
  IOSIntArray *ones = LibOrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(data1, numOnes, maxIndex);
  jint data2Len = (numNegOnes * bitsPerIndex + 7) / 8;
  IOSByteArray *data2 = LibOrgBouncycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, data2Len);
  IOSIntArray *negOnes = LibOrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(data2, numNegOnes, maxIndex);
  return new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(N, ones, negOnes);
}

LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initialize();
  IOSIntArray *coeffs = LibOrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
  return new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(coeffs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial)
