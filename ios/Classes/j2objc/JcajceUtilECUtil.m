//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/util/JcajceUtilECUtil.java
//

#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BouncyCastleProvider.h"
#include "CustomNamedCurves.h"
#include "EC5Util.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECNamedCurveParameterSpec.h"
#include "ECNamedCurveTable.h"
#include "ECNamedDomainParameters.h"
#include "ECParameterSpec.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKey.h"
#include "ECPublicKeyParameters.h"
#include "Fingerprint.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceUtilECUtil.h"
#include "JceECPrivateKey.h"
#include "PrivateKeyInfo.h"
#include "ProviderConfiguration.h"
#include "Strings.h"
#include "SubjectPublicKeyInfo.h"
#include "X962Parameters.h"
#include "X9ECParameters.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/ECPrivateKey.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/util/Enumeration.h"
#include "java/util/Map.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil ()

+ (LibOrgBouncycastleMathEcECPoint *)calculateQWithJavaMathBigInteger:(JavaMathBigInteger *)d
                         withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec;

@end

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_calculateQWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_(JavaMathBigInteger *d, LibOrgBouncycastleJceSpecECParameterSpec *spec);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSIntArray *)convertMidTermsWithIntArray:(IOSIntArray *)k {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_convertMidTermsWithIntArray_(k);
}

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                            withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)params {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleJceSpecECParameterSpec_(configuration, params);
}

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                              withLibOrgBouncycastleAsn1X9X962Parameters:(LibOrgBouncycastleAsn1X9X962Parameters *)params {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleAsn1X9X962Parameters_(configuration, params);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(key);
}

+ (jint)getOrderBitLengthWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)order
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)privateValue {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getOrderBitLengthWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaMathBigInteger_withJavaMathBigInteger_(configuration, order, privateValue);
}

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithNSString:(NSString *)curveName {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithNSString_(curveName);
}

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)ecParameterSpec {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithLibOrgBouncycastleJceSpecECParameterSpec_(ecParameterSpec);
}

+ (LibOrgBouncycastleAsn1X9X9ECParameters *)getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}

+ (LibOrgBouncycastleAsn1X9X9ECParameters *)getNamedCurveByNameWithNSString:(NSString *)curveName {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByNameWithNSString_(curveName);
}

+ (NSString *)getCurveNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getCurveNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}

+ (NSString *)privateKeyToStringWithNSString:(NSString *)algorithm
                      withJavaMathBigInteger:(JavaMathBigInteger *)d
withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_privateKeyToStringWithNSString_withJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_(algorithm, d, spec);
}

+ (LibOrgBouncycastleMathEcECPoint *)calculateQWithJavaMathBigInteger:(JavaMathBigInteger *)d
                         withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_calculateQWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_(d, spec);
}

+ (NSString *)publicKeyToStringWithNSString:(NSString *)algorithm
        withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)q
withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_publicKeyToStringWithNSString_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(algorithm, q, spec);
}

+ (NSString *)generateKeyFingerprintWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)publicPoint
                           withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generateKeyFingerprintWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(publicPoint, spec);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECDomainParameters;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECDomainParameters;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 5, 6, 7, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 8, 9, 7, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x9, 12, 14, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X9X9ECParameters;", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X9X9ECParameters;", 0x9, 17, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertMidTermsWithIntArray:);
  methods[2].selector = @selector(getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:withLibOrgBouncycastleJceSpecECParameterSpec:);
  methods[3].selector = @selector(getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:withLibOrgBouncycastleAsn1X9X962Parameters:);
  methods[4].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[5].selector = @selector(generatePrivateKeyParameterWithJavaSecurityPrivateKey:);
  methods[6].selector = @selector(getOrderBitLengthWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[7].selector = @selector(getNamedCurveOidWithNSString:);
  methods[8].selector = @selector(getNamedCurveOidWithLibOrgBouncycastleJceSpecECParameterSpec:);
  methods[9].selector = @selector(getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[10].selector = @selector(getNamedCurveByNameWithNSString:);
  methods[11].selector = @selector(getCurveNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[12].selector = @selector(privateKeyToStringWithNSString:withJavaMathBigInteger:withLibOrgBouncycastleJceSpecECParameterSpec:);
  methods[13].selector = @selector(calculateQWithJavaMathBigInteger:withLibOrgBouncycastleJceSpecECParameterSpec:);
  methods[14].selector = @selector(publicKeyToStringWithNSString:withLibOrgBouncycastleMathEcECPoint:withLibOrgBouncycastleJceSpecECParameterSpec:);
  methods[15].selector = @selector(generateKeyFingerprintWithLibOrgBouncycastleMathEcECPoint:withLibOrgBouncycastleJceSpecECParameterSpec:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertMidTerms", "[I", "getDomainParameters", "LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;LLibOrgBouncycastleJceSpecECParameterSpec;", "LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;LLibOrgBouncycastleAsn1X9X962Parameters;", "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "generatePrivateKeyParameter", "LJavaSecurityPrivateKey;", "getOrderBitLength", "LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;LJavaMathBigInteger;LJavaMathBigInteger;", "getNamedCurveOid", "LNSString;", "LLibOrgBouncycastleJceSpecECParameterSpec;", "getNamedCurveByOid", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "getNamedCurveByName", "getCurveName", "privateKeyToString", "LNSString;LJavaMathBigInteger;LLibOrgBouncycastleJceSpecECParameterSpec;", "calculateQ", "LJavaMathBigInteger;LLibOrgBouncycastleJceSpecECParameterSpec;", "publicKeyToString", "LNSString;LLibOrgBouncycastleMathEcECPoint;LLibOrgBouncycastleJceSpecECParameterSpec;", "generateKeyFingerprint", "LLibOrgBouncycastleMathEcECPoint;LLibOrgBouncycastleJceSpecECParameterSpec;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil = { "JcajceUtilECUtil", "lib.org.bouncycastle.jcajce.provider.asymmetric.util", ptrTable, methods, NULL, 7, 0x1, 16, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_init(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil *new_LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil *create_LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil, init)
}

IOSIntArray *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_convertMidTermsWithIntArray_(IOSIntArray *k) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  IOSIntArray *res = [IOSIntArray newArrayWithLength:3];
  if (((IOSIntArray *) nil_chk(k))->size_ == 1) {
    *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 0);
  }
  else {
    if (k->size_ != 3) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only Trinomials and pentanomials supported");
    }
    if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 1) && IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 2)) {
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 0);
      if (IOSIntArray_Get(k, 1) < IOSIntArray_Get(k, 2)) {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 1);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 2);
      }
      else {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 2);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 1);
      }
    }
    else if (IOSIntArray_Get(k, 1) < IOSIntArray_Get(k, 2)) {
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 1);
      if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 2)) {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 0);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 2);
      }
      else {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 2);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 0);
      }
    }
    else {
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 2);
      if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 1)) {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 0);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 1);
      }
      else {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 1);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 0);
      }
    }
  }
  return res;
}

LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleJceSpecECParameterSpec_(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, LibOrgBouncycastleJceSpecECParameterSpec *params) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  LibOrgBouncycastleCryptoParamsECDomainParameters *domainParameters;
  if ([params isKindOfClass:[LibOrgBouncycastleJceSpecECNamedCurveParameterSpec class]]) {
    LibOrgBouncycastleJceSpecECNamedCurveParameterSpec *nParams = (LibOrgBouncycastleJceSpecECNamedCurveParameterSpec *) params;
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *nameOid = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithNSString_([((LibOrgBouncycastleJceSpecECNamedCurveParameterSpec *) nil_chk(nParams)) getName]);
    domainParameters = new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(nameOid, [nParams getCurve], [nParams getG], [nParams getN], [nParams getH], [nParams getSeed]);
  }
  else if (params == nil) {
    LibOrgBouncycastleJceSpecECParameterSpec *iSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
    domainParameters = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(iSpec)) getCurve], [iSpec getG], [iSpec getN], [iSpec getH], [iSpec getSeed]);
  }
  else {
    domainParameters = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([params getCurve], [params getG], [params getN], [params getH], [params getSeed]);
  }
  return domainParameters;
}

LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleAsn1X9X962Parameters_(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, LibOrgBouncycastleAsn1X9X962Parameters *params) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  LibOrgBouncycastleCryptoParamsECDomainParameters *domainParameters;
  if ([((LibOrgBouncycastleAsn1X9X962Parameters *) nil_chk(params)) isNamedCurve]) {
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([params getParameters]);
    LibOrgBouncycastleAsn1X9X9ECParameters *ecP = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
    if (ecP == nil) {
      id<JavaUtilMap> extraCurves = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getAdditionalECParameters];
      ecP = (LibOrgBouncycastleAsn1X9X9ECParameters *) cast_chk([((id<JavaUtilMap>) nil_chk(extraCurves)) getWithId:oid], [LibOrgBouncycastleAsn1X9X9ECParameters class]);
    }
    domainParameters = new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(oid, [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecP)) getCurve], [ecP getG], [ecP getN], [ecP getH], [ecP getSeed]);
  }
  else if ([params isImplicitlyCA]) {
    LibOrgBouncycastleJceSpecECParameterSpec *iSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
    domainParameters = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(iSpec)) getCurve], [iSpec getG], [iSpec getN], [iSpec getH], [iSpec getSeed]);
  }
  else {
    LibOrgBouncycastleAsn1X9X9ECParameters *ecP = LibOrgBouncycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
    domainParameters = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecP)) getCurve], [ecP getG], [ecP getN], [ecP getH], [ecP getSeed]);
  }
  return domainParameters;
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  if ([LibOrgBouncycastleJceInterfacesECPublicKey_class_() isInstance:key]) {
    id<LibOrgBouncycastleJceInterfacesECPublicKey> k = (id<LibOrgBouncycastleJceInterfacesECPublicKey>) cast_check(key, LibOrgBouncycastleJceInterfacesECPublicKey_class_());
    LibOrgBouncycastleJceSpecECParameterSpec *s = [((id<LibOrgBouncycastleJceInterfacesECPublicKey>) nil_chk(k)) getParameters];
    return new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([k getQ], new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPublicKey> pubKey = (id<JavaSecurityInterfacesECPublicKey>) cast_check(key, JavaSecurityInterfacesECPublicKey_class_());
    LibOrgBouncycastleJceSpecECParameterSpec *s = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_([((id<JavaSecurityInterfacesECPublicKey>) nil_chk(pubKey)) getParams], false);
    return new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_([pubKey getParams], [pubKey getW], false), new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else {
    @try {
      IOSByteArray *bytes = [((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded];
      if (bytes == nil) {
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no encoding for EC public key");
      }
      id<JavaSecurityPublicKey> publicKey = LibOrgBouncycastleJceProviderBouncyCastleProvider_getPublicKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(bytes));
      if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:publicKey]) {
        return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"cannot identify EC public key: ", [e description]));
    }
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"cannot identify EC public key.");
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  if ([LibOrgBouncycastleJceInterfacesJceECPrivateKey_class_() isInstance:key]) {
    id<LibOrgBouncycastleJceInterfacesJceECPrivateKey> k = (id<LibOrgBouncycastleJceInterfacesJceECPrivateKey>) cast_check(key, LibOrgBouncycastleJceInterfacesJceECPrivateKey_class_());
    LibOrgBouncycastleJceSpecECParameterSpec *s = [((id<LibOrgBouncycastleJceInterfacesJceECPrivateKey>) nil_chk(k)) getParameters];
    if (s == nil) {
      s = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
    }
    if ([[k getParameters] isKindOfClass:[LibOrgBouncycastleJceSpecECNamedCurveParameterSpec class]]) {
      NSString *name = [((LibOrgBouncycastleJceSpecECNamedCurveParameterSpec *) nil_chk(((LibOrgBouncycastleJceSpecECNamedCurveParameterSpec *) cast_chk([k getParameters], [LibOrgBouncycastleJceSpecECNamedCurveParameterSpec class])))) getName];
      return new_LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_([k getD], new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(LibOrgBouncycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(name), [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
    }
    else {
      return new_LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_([k getD], new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
    }
  }
  else if ([JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPrivateKey> privKey = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(key, JavaSecurityInterfacesECPrivateKey_class_());
    LibOrgBouncycastleJceSpecECParameterSpec *s = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_([((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(privKey)) getParams], false);
    return new_LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_([privKey getS], new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else {
    @try {
      IOSByteArray *bytes = [((id<JavaSecurityPrivateKey>) nil_chk(key)) getEncoded];
      if (bytes == nil) {
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no encoding for EC private key");
      }
      id<JavaSecurityPrivateKey> privateKey = LibOrgBouncycastleJceProviderBouncyCastleProvider_getPrivateKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(bytes));
      if ([JavaSecurityInterfacesECPrivateKey_class_() isInstance:privateKey]) {
        return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(privateKey);
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"cannot identify EC private key: ", [e description]));
    }
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't identify EC private key.");
}

jint LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getOrderBitLengthWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaMathBigInteger_withJavaMathBigInteger_(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, JavaMathBigInteger *order, JavaMathBigInteger *privateValue) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  if (order == nil) {
    LibOrgBouncycastleJceSpecECParameterSpec *implicitCA = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
    if (implicitCA == nil) {
      return [((JavaMathBigInteger *) nil_chk(privateValue)) bitLength];
    }
    return [((JavaMathBigInteger *) nil_chk([implicitCA getN])) bitLength];
  }
  else {
    return [order bitLength];
  }
}

LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithNSString_(NSString *curveName) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  NSString *name = curveName;
  jint spacePos = [((NSString *) nil_chk(name)) java_indexOf:' '];
  if (spacePos > 0) {
    name = [name java_substring:spacePos + 1];
  }
  @try {
    if ([((NSString *) nil_chk(name)) charAtWithInt:0] >= '0' && [name charAtWithInt:0] <= '2') {
      return new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(name);
    }
  }
  @catch (JavaLangIllegalArgumentException *ex) {
  }
  return LibOrgBouncycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(name);
}

LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJceSpecECParameterSpec *ecParameterSpec) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  for (id<JavaUtilEnumeration> names = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getNames(); [((id<JavaUtilEnumeration>) nil_chk(names)) hasMoreElements]; ) {
    NSString *name = (NSString *) cast_chk([names nextElement], [NSString class]);
    LibOrgBouncycastleAsn1X9X9ECParameters *params = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(name);
    if ([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(params)) getN])) isEqual:[((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(ecParameterSpec)) getN]] && [((JavaMathBigInteger *) nil_chk([params getH])) isEqual:[ecParameterSpec getH]] && [((LibOrgBouncycastleMathEcECCurve *) nil_chk([params getCurve])) equalsWithLibOrgBouncycastleMathEcECCurve:[ecParameterSpec getCurve]] && [((LibOrgBouncycastleMathEcECPoint *) nil_chk([params getG])) equalsWithLibOrgBouncycastleMathEcECPoint:[ecParameterSpec getG]]) {
      return LibOrgBouncycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(name);
    }
  }
  return nil;
}

LibOrgBouncycastleAsn1X9X9ECParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  LibOrgBouncycastleAsn1X9X9ECParameters *params = LibOrgBouncycastleCryptoEcCustomNamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
  if (params == nil) {
    params = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
  }
  return params;
}

LibOrgBouncycastleAsn1X9X9ECParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByNameWithNSString_(NSString *curveName) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  LibOrgBouncycastleAsn1X9X9ECParameters *params = LibOrgBouncycastleCryptoEcCustomNamedCurves_getByNameWithNSString_(curveName);
  if (params == nil) {
    params = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(curveName);
  }
  return params;
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getCurveNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  return LibOrgBouncycastleAsn1X9ECNamedCurveTable_getNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_privateKeyToStringWithNSString_withJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, JavaMathBigInteger *d, LibOrgBouncycastleJceSpecECParameterSpec *spec) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = LibOrgBouncycastleUtilStrings_lineSeparator();
  LibOrgBouncycastleMathEcECPoint *q = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_calculateQWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_(d, spec);
  (void) [buf appendWithNSString:algorithm];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" Private Key ["])) appendWithNSString:LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generateKeyFingerprintWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(q, spec)])) appendWithNSString:@"]"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            X: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(q)) getAffineXCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Y: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([q getAffineYCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  return [buf description];
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_calculateQWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_(JavaMathBigInteger *d, LibOrgBouncycastleJceSpecECParameterSpec *spec) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(spec)) getG])) multiplyWithJavaMathBigInteger:d])) normalize];
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_publicKeyToStringWithNSString_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, LibOrgBouncycastleMathEcECPoint *q, LibOrgBouncycastleJceSpecECParameterSpec *spec) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = LibOrgBouncycastleUtilStrings_lineSeparator();
  (void) [buf appendWithNSString:algorithm];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" Public Key ["])) appendWithNSString:LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generateKeyFingerprintWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(q, spec)])) appendWithNSString:@"]"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            X: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(q)) getAffineXCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Y: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([q getAffineYCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  return [buf description];
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generateKeyFingerprintWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleMathEcECPoint *publicPoint, LibOrgBouncycastleJceSpecECParameterSpec *spec) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_initialize();
  LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(spec)) getCurve];
  LibOrgBouncycastleMathEcECPoint *g = [spec getG];
  if (curve != nil) {
    return [new_LibOrgBouncycastleUtilFingerprint_initWithByteArray_(LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_withByteArray_([((LibOrgBouncycastleMathEcECPoint *) nil_chk(publicPoint)) getEncodedWithBoolean:false], [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) getEncoded], [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) getEncoded], [((LibOrgBouncycastleMathEcECPoint *) nil_chk(g)) getEncodedWithBoolean:false])) description];
  }
  return [new_LibOrgBouncycastleUtilFingerprint_initWithByteArray_([((LibOrgBouncycastleMathEcECPoint *) nil_chk(publicPoint)) getEncodedWithBoolean:false]) description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil)
