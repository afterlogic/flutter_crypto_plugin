//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/polynomial/ModularResultant.java
//

#include "BigIntEuclidean.h"
#include "BigIntPolynomial.h"
#include "J2ObjC_source.h"
#include "ModularResultant.h"
#include "Resultant.h"
#include "java/math/BigInteger.h"

@implementation LibOrgBouncycastlePqcMathNtruPolynomialModularResultant

- (instancetype)initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)rho
                                                         withJavaMathBigInteger:(JavaMathBigInteger *)res
                                                         withJavaMathBigInteger:(JavaMathBigInteger *)modulus {
  LibOrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(self, rho, res, modulus);
  return self;
}

+ (LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *)combineRhoWithLibOrgBouncycastlePqcMathNtruPolynomialModularResultant:(LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *)modRes1
                                                                       withLibOrgBouncycastlePqcMathNtruPolynomialModularResultant:(LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *)modRes2 {
  return LibOrgBouncycastlePqcMathNtruPolynomialModularResultant_combineRhoWithLibOrgBouncycastlePqcMathNtruPolynomialModularResultant_withLibOrgBouncycastlePqcMathNtruPolynomialModularResultant_(modRes1, modRes2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialModularResultant;", 0x8, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(combineRhoWithLibOrgBouncycastlePqcMathNtruPolynomialModularResultant:withLibOrgBouncycastlePqcMathNtruPolynomialModularResultant:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "modulus_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;LJavaMathBigInteger;LJavaMathBigInteger;", "combineRho", "LLibOrgBouncycastlePqcMathNtruPolynomialModularResultant;LLibOrgBouncycastlePqcMathNtruPolynomialModularResultant;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcMathNtruPolynomialModularResultant = { "ModularResultant", "lib.org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcMathNtruPolynomialModularResultant;
}

@end

void LibOrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *self, LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho, JavaMathBigInteger *res, JavaMathBigInteger *modulus) {
  LibOrgBouncycastlePqcMathNtruPolynomialResultant_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_(self, rho, res);
  self->modulus_ = modulus;
}

LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *new_LibOrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho, JavaMathBigInteger *res, JavaMathBigInteger *modulus) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialModularResultant, initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_, rho, res, modulus)
}

LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *create_LibOrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho, JavaMathBigInteger *res, JavaMathBigInteger *modulus) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialModularResultant, initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_, rho, res, modulus)
}

LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *LibOrgBouncycastlePqcMathNtruPolynomialModularResultant_combineRhoWithLibOrgBouncycastlePqcMathNtruPolynomialModularResultant_withLibOrgBouncycastlePqcMathNtruPolynomialModularResultant_(LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1, LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2) {
  LibOrgBouncycastlePqcMathNtruPolynomialModularResultant_initialize();
  JavaMathBigInteger *mod1 = ((LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk(modRes1))->modulus_;
  JavaMathBigInteger *mod2 = ((LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk(modRes2))->modulus_;
  JavaMathBigInteger *prod = [((JavaMathBigInteger *) nil_chk(mod1)) multiplyWithJavaMathBigInteger:mod2];
  LibOrgBouncycastlePqcMathNtruEuclidBigIntEuclidean *er = LibOrgBouncycastlePqcMathNtruEuclidBigIntEuclidean_calculateWithJavaMathBigInteger_withJavaMathBigInteger_(mod2, mod1);
  LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho1 = (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) cast_chk([((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(modRes1->rho_)) java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial class]);
  [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rho1)) multWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(((LibOrgBouncycastlePqcMathNtruEuclidBigIntEuclidean *) nil_chk(er))->x_)) multiplyWithJavaMathBigInteger:mod2]];
  LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho2 = (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) cast_chk([((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(modRes2->rho_)) java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial class]);
  [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rho2)) multWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(er->y_)) multiplyWithJavaMathBigInteger:mod1]];
  [rho1 addWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:rho2];
  [rho1 modWithJavaMathBigInteger:prod];
  return new_LibOrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(rho1, nil, prod);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcMathNtruPolynomialModularResultant)
