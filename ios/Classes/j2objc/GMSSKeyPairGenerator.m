//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/gmss/GMSSKeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "CryptoServicesRegistrar.h"
#include "Digest.h"
#include "GMSSDigestProvider.h"
#include "GMSSKeyGenerationParameters.h"
#include "GMSSKeyPairGenerator.h"
#include "GMSSParameters.h"
#include "GMSSPrivateKeyParameters.h"
#include "GMSSPublicKeyParameters.h"
#include "GMSSRandom.h"
#include "GMSSRootCalc.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "Treehash.h"
#include "WinternitzOTSVerify.h"
#include "WinternitzOTSignature.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "java/util/Vector.h"

@interface LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator () {
 @public
  LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *gmssRandom_;
  id<LibOrgBouncycastleCryptoDigest> messDigestTree_;
  IOSObjectArray *currentSeeds_;
  IOSObjectArray *nextNextSeeds_;
  IOSObjectArray *currentRootSigs_;
  id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider_;
  jint mdLength_;
  jint numLayer_;
  jboolean initialized_;
  LibOrgBouncycastlePqcCryptoGmssGMSSParameters *gmssPS_;
  IOSIntArray *heightOfTrees_;
  IOSIntArray *otsIndex_;
  IOSIntArray *K_;
  LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters *gmssParams_;
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)genKeyPair;

- (LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *)generateCurrentAuthpathAndRootWithByteArray:(IOSByteArray *)lowerRoot
                                                                          withJavaUtilVector:(JavaUtilVector *)currentStack
                                                                               withByteArray:(IOSByteArray *)seed
                                                                                     withInt:(jint)h;

- (LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *)generateNextAuthpathAndRootWithJavaUtilVector:(JavaUtilVector *)nextStack
                                                                                 withByteArray:(IOSByteArray *)seed
                                                                                       withInt:(jint)h;

- (void)initializeDefault OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, gmssRandom_, LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, messDigestTree_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, currentSeeds_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, nextNextSeeds_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, currentRootSigs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, digestProvider_, id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, gmssPS_, LibOrgBouncycastlePqcCryptoGmssGMSSParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, heightOfTrees_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, otsIndex_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, K_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, gmssParams_, LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters *)

__attribute__((unused)) static LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_genKeyPair(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateCurrentAuthpathAndRootWithByteArray_withJavaUtilVector_withByteArray_withInt_(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self, IOSByteArray *lowerRoot, JavaUtilVector *currentStack, IOSByteArray *seed, jint h);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateNextAuthpathAndRootWithJavaUtilVector_withByteArray_withInt_(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self, JavaUtilVector *nextStack, IOSByteArray *seed, jint h);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initializeDefault(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self);

NSString *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_OID = @"1.3.6.1.4.1.8301.3.1.3.3";

@implementation LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator

+ (NSString *)OID {
  return LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_OID;
}

- (instancetype)initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider:(id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>)digestProvider {
  LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(self, digestProvider);
  return self;
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)genKeyPair {
  return LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_genKeyPair(self);
}

- (LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *)generateCurrentAuthpathAndRootWithByteArray:(IOSByteArray *)lowerRoot
                                                                          withJavaUtilVector:(JavaUtilVector *)currentStack
                                                                               withByteArray:(IOSByteArray *)seed
                                                                                     withInt:(jint)h {
  return LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateCurrentAuthpathAndRootWithByteArray_withJavaUtilVector_withByteArray_withInt_(self, lowerRoot, currentStack, seed, h);
}

- (LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *)generateNextAuthpathAndRootWithJavaUtilVector:(JavaUtilVector *)nextStack
                                                                                 withByteArray:(IOSByteArray *)seed
                                                                                       withInt:(jint)h {
  return LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateNextAuthpathAndRootWithJavaUtilVector_withByteArray_withInt_(self, nextStack, seed, h);
}

- (void)initialize__WithInt:(jint)keySize
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  LibOrgBouncycastleCryptoKeyGenerationParameters *kgp;
  if (keySize <= 10) {
    IOSIntArray *defh = [IOSIntArray newArrayWithInts:(jint[]){ 10 } count:1];
    IOSIntArray *defw = [IOSIntArray newArrayWithInts:(jint[]){ 3 } count:1];
    IOSIntArray *defk = [IOSIntArray newArrayWithInts:(jint[]){ 2 } count:1];
    kgp = new_LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastlePqcCryptoGmssGMSSParameters_(secureRandom, new_LibOrgBouncycastlePqcCryptoGmssGMSSParameters_initWithInt_withIntArray_withIntArray_withIntArray_(defh->size_, defh, defw, defk));
  }
  else if (keySize <= 20) {
    IOSIntArray *defh = [IOSIntArray newArrayWithInts:(jint[]){ 10, 10 } count:2];
    IOSIntArray *defw = [IOSIntArray newArrayWithInts:(jint[]){ 5, 4 } count:2];
    IOSIntArray *defk = [IOSIntArray newArrayWithInts:(jint[]){ 2, 2 } count:2];
    kgp = new_LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastlePqcCryptoGmssGMSSParameters_(secureRandom, new_LibOrgBouncycastlePqcCryptoGmssGMSSParameters_initWithInt_withIntArray_withIntArray_withIntArray_(defh->size_, defh, defw, defk));
  }
  else {
    IOSIntArray *defh = [IOSIntArray newArrayWithInts:(jint[]){ 10, 10, 10, 10 } count:4];
    IOSIntArray *defw = [IOSIntArray newArrayWithInts:(jint[]){ 9, 9, 9, 3 } count:4];
    IOSIntArray *defk = [IOSIntArray newArrayWithInts:(jint[]){ 2, 2, 2, 2 } count:4];
    kgp = new_LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastlePqcCryptoGmssGMSSParameters_(secureRandom, new_LibOrgBouncycastlePqcCryptoGmssGMSSParameters_initWithInt_withIntArray_withIntArray_withIntArray_(defh->size_, defh, defw, defk));
  }
  [self initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:kgp];
}

- (void)initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  self->gmssParams_ = (LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters class]);
  self->gmssPS_ = new_LibOrgBouncycastlePqcCryptoGmssGMSSParameters_initWithInt_withIntArray_withIntArray_withIntArray_([((LibOrgBouncycastlePqcCryptoGmssGMSSParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters *) nil_chk(gmssParams_)) getParameters])) getNumOfLayers], [((LibOrgBouncycastlePqcCryptoGmssGMSSParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters *) nil_chk(gmssParams_)) getParameters])) getHeightOfTrees], [((LibOrgBouncycastlePqcCryptoGmssGMSSParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters *) nil_chk(gmssParams_)) getParameters])) getWinternitzParameter], [((LibOrgBouncycastlePqcCryptoGmssGMSSParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters *) nil_chk(gmssParams_)) getParameters])) getK]);
  self->numLayer_ = [gmssPS_ getNumOfLayers];
  self->heightOfTrees_ = [((LibOrgBouncycastlePqcCryptoGmssGMSSParameters *) nil_chk(gmssPS_)) getHeightOfTrees];
  self->otsIndex_ = [((LibOrgBouncycastlePqcCryptoGmssGMSSParameters *) nil_chk(gmssPS_)) getWinternitzParameter];
  self->K_ = [((LibOrgBouncycastlePqcCryptoGmssGMSSParameters *) nil_chk(gmssPS_)) getK];
  self->currentSeeds_ = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ numLayer_, mdLength_ }];
  self->nextNextSeeds_ = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ numLayer_ - 1, mdLength_ }];
  JavaSecuritySecureRandom *secRan = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  for (jint i = 0; i < numLayer_; i++) {
    [((JavaSecuritySecureRandom *) nil_chk(secRan)) nextBytesWithByteArray:IOSObjectArray_Get(nil_chk(currentSeeds_), i)];
    (void) [((LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(gmssRandom_)) nextSeedWithByteArray:IOSObjectArray_Get(nil_chk(currentSeeds_), i)];
  }
  self->initialized_ = true;
}

- (void)initializeDefault {
  LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initializeDefault(self);
}

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  [self initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param];
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  return LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_genKeyPair(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoGmssGMSSRootCalc;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoGmssGMSSRootCalc;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider:);
  methods[1].selector = @selector(genKeyPair);
  methods[2].selector = @selector(generateCurrentAuthpathAndRootWithByteArray:withJavaUtilVector:withByteArray:withInt:);
  methods[3].selector = @selector(generateNextAuthpathAndRootWithJavaUtilVector:withByteArray:withInt:);
  methods[4].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[6].selector = @selector(initializeDefault);
  methods[7].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[8].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gmssRandom_", "LLibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "messDigestTree_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentSeeds_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextNextSeeds_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentRootSigs_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digestProvider_", "LLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mdLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numLayer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gmssPS_", "LLibOrgBouncycastlePqcCryptoGmssGMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "heightOfTrees_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "otsIndex_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "K_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gmssParams_", "LLibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider;", "generateCurrentAuthpathAndRoot", "[BLJavaUtilVector;[BI", "generateNextAuthpathAndRoot", "LJavaUtilVector;[BI", "initialize", "ILJavaSecuritySecureRandom;", "LLibOrgBouncycastleCryptoKeyGenerationParameters;", "init", &LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_OID };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator = { "GMSSKeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.gmss", ptrTable, methods, fields, 7, 0x1, 9, 15, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self, id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider) {
  NSObject_init(self);
  self->initialized_ = false;
  self->digestProvider_ = digestProvider;
  self->messDigestTree_ = [((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(digestProvider)) get];
  self->mdLength_ = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->messDigestTree_)) getDigestSize];
  self->gmssRandom_ = new_LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_initWithLibOrgBouncycastleCryptoDigest_(self->messDigestTree_);
}

LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_, digestProvider)
}

LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_, digestProvider)
}

LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_genKeyPair(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self) {
  if (!self->initialized_) {
    LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initializeDefault(self);
  }
  IOSObjectArray *currentAuthPaths = [IOSObjectArray newArrayWithLength:self->numLayer_ type:IOSClass_byteArray(2)];
  IOSObjectArray *nextAuthPaths = [IOSObjectArray newArrayWithLength:self->numLayer_ - 1 type:IOSClass_byteArray(2)];
  IOSObjectArray *currentTreehash = [IOSObjectArray newArrayWithLength:self->numLayer_ type:IOSClass_arrayType(LibOrgBouncycastlePqcCryptoGmssTreehash_class_(), 1)];
  IOSObjectArray *nextTreehash = [IOSObjectArray newArrayWithLength:self->numLayer_ - 1 type:IOSClass_arrayType(LibOrgBouncycastlePqcCryptoGmssTreehash_class_(), 1)];
  IOSObjectArray *currentStack = [IOSObjectArray newArrayWithLength:self->numLayer_ type:JavaUtilVector_class_()];
  IOSObjectArray *nextStack = [IOSObjectArray newArrayWithLength:self->numLayer_ - 1 type:JavaUtilVector_class_()];
  IOSObjectArray *currentRetain = [IOSObjectArray newArrayWithLength:self->numLayer_ type:IOSClass_arrayType(JavaUtilVector_class_(), 1)];
  IOSObjectArray *nextRetain = [IOSObjectArray newArrayWithLength:self->numLayer_ - 1 type:IOSClass_arrayType(JavaUtilVector_class_(), 1)];
  for (jint i = 0; i < self->numLayer_; i++) {
    (void) IOSObjectArray_SetAndConsume(currentAuthPaths, i, [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ IOSIntArray_Get(nil_chk(self->heightOfTrees_), i), self->mdLength_ }]);
    (void) IOSObjectArray_SetAndConsume(currentTreehash, i, [IOSObjectArray newArrayWithLength:IOSIntArray_Get(self->heightOfTrees_, i) - IOSIntArray_Get(nil_chk(self->K_), i) type:LibOrgBouncycastlePqcCryptoGmssTreehash_class_()]);
    if (i > 0) {
      (void) IOSObjectArray_SetAndConsume(nextAuthPaths, i - 1, [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ IOSIntArray_Get(self->heightOfTrees_, i), self->mdLength_ }]);
      (void) IOSObjectArray_SetAndConsume(nextTreehash, i - 1, [IOSObjectArray newArrayWithLength:IOSIntArray_Get(self->heightOfTrees_, i) - IOSIntArray_Get(self->K_, i) type:LibOrgBouncycastlePqcCryptoGmssTreehash_class_()]);
    }
    (void) IOSObjectArray_SetAndConsume(currentStack, i, new_JavaUtilVector_init());
    if (i > 0) {
      (void) IOSObjectArray_SetAndConsume(nextStack, i - 1, new_JavaUtilVector_init());
    }
  }
  IOSObjectArray *currentRoots = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ self->numLayer_, self->mdLength_ }];
  IOSObjectArray *nextRoots = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ self->numLayer_ - 1, self->mdLength_ }];
  IOSObjectArray *seeds = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ self->numLayer_, self->mdLength_ }];
  for (jint i = 0; i < self->numLayer_; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(self->currentSeeds_), i), 0, IOSObjectArray_Get(seeds, i), 0, self->mdLength_);
  }
  self->currentRootSigs_ = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ self->numLayer_ - 1, self->mdLength_ }];
  for (jint h = self->numLayer_ - 1; h >= 0; h--) {
    LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *tree;
    if (h == self->numLayer_ - 1) {
      tree = LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateCurrentAuthpathAndRootWithByteArray_withJavaUtilVector_withByteArray_withInt_(self, nil, IOSObjectArray_Get(currentStack, h), IOSObjectArray_Get(seeds, h), h);
    }
    else {
      tree = LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateCurrentAuthpathAndRootWithByteArray_withJavaUtilVector_withByteArray_withInt_(self, IOSObjectArray_Get(currentRoots, h + 1), IOSObjectArray_Get(currentStack, h), IOSObjectArray_Get(seeds, h), h);
    }
    for (jint i = 0; i < IOSIntArray_Get(nil_chk(self->heightOfTrees_), h); i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk([((LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *) nil_chk(tree)) getAuthPath]), i), 0, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(currentAuthPaths, h)), i), 0, self->mdLength_);
    }
    (void) IOSObjectArray_Set(currentRetain, h, [((LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *) nil_chk(tree)) getRetain]);
    (void) IOSObjectArray_Set(currentTreehash, h, [tree getTreehash]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([tree getRoot], 0, IOSObjectArray_Get(currentRoots, h), 0, self->mdLength_);
  }
  for (jint h = self->numLayer_ - 2; h >= 0; h--) {
    LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *tree = LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateNextAuthpathAndRootWithJavaUtilVector_withByteArray_withInt_(self, IOSObjectArray_Get(nextStack, h), IOSObjectArray_Get(seeds, h + 1), h + 1);
    for (jint i = 0; i < IOSIntArray_Get(nil_chk(self->heightOfTrees_), h + 1); i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk([((LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *) nil_chk(tree)) getAuthPath]), i), 0, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nextAuthPaths, h)), i), 0, self->mdLength_);
    }
    (void) IOSObjectArray_Set(nextRetain, h, [((LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *) nil_chk(tree)) getRetain]);
    (void) IOSObjectArray_Set(nextTreehash, h, [tree getTreehash]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([tree getRoot], 0, IOSObjectArray_Get(nextRoots, h), 0, self->mdLength_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(seeds, h + 1), 0, IOSObjectArray_Get(nil_chk(self->nextNextSeeds_), h), 0, self->mdLength_);
  }
  LibOrgBouncycastlePqcCryptoGmssGMSSPublicKeyParameters *publicKey = new_LibOrgBouncycastlePqcCryptoGmssGMSSPublicKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoGmssGMSSParameters_(IOSObjectArray_Get(currentRoots, 0), self->gmssPS_);
  LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters *privateKey = new_LibOrgBouncycastlePqcCryptoGmssGMSSPrivateKeyParameters_initWithByteArray2_withByteArray2_withByteArray3_withByteArray3_withLibOrgBouncycastlePqcCryptoGmssTreehashArray2_withLibOrgBouncycastlePqcCryptoGmssTreehashArray2_withJavaUtilVectorArray_withJavaUtilVectorArray_withJavaUtilVectorArray2_withJavaUtilVectorArray2_withByteArray2_withByteArray2_withLibOrgBouncycastlePqcCryptoGmssGMSSParameters_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(self->currentSeeds_, self->nextNextSeeds_, currentAuthPaths, nextAuthPaths, currentTreehash, nextTreehash, currentStack, nextStack, currentRetain, nextRetain, nextRoots, self->currentRootSigs_, self->gmssPS_, self->digestProvider_);
  return (new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(publicKey, privateKey));
}

LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateCurrentAuthpathAndRootWithByteArray_withJavaUtilVector_withByteArray_withInt_(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self, IOSByteArray *lowerRoot, JavaUtilVector *currentStack, IOSByteArray *seed, jint h) {
  IOSByteArray *help = [IOSByteArray newArrayWithLength:self->mdLength_];
  IOSByteArray *OTSseed = [IOSByteArray newArrayWithLength:self->mdLength_];
  OTSseed = [((LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(self->gmssRandom_)) nextSeedWithByteArray:seed];
  LibOrgBouncycastlePqcCryptoGmssUtilWinternitzOTSignature *ots;
  LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *treeToConstruct = new_LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc_initWithInt_withInt_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(IOSIntArray_Get(nil_chk(self->heightOfTrees_), h), IOSIntArray_Get(nil_chk(self->K_), h), self->digestProvider_);
  [treeToConstruct initialize__WithJavaUtilVector:currentStack];
  if (h == self->numLayer_ - 1) {
    ots = new_LibOrgBouncycastlePqcCryptoGmssUtilWinternitzOTSignature_initWithByteArray_withLibOrgBouncycastleCryptoDigest_withInt_(OTSseed, [((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(self->digestProvider_)) get], IOSIntArray_Get(nil_chk(self->otsIndex_), h));
    help = [ots getPublicKey];
  }
  else {
    ots = new_LibOrgBouncycastlePqcCryptoGmssUtilWinternitzOTSignature_initWithByteArray_withLibOrgBouncycastleCryptoDigest_withInt_(OTSseed, [((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(self->digestProvider_)) get], IOSIntArray_Get(nil_chk(self->otsIndex_), h));
    (void) IOSObjectArray_Set(nil_chk(self->currentRootSigs_), h, [ots getSignatureWithByteArray:lowerRoot]);
    LibOrgBouncycastlePqcCryptoGmssUtilWinternitzOTSVerify *otsver = new_LibOrgBouncycastlePqcCryptoGmssUtilWinternitzOTSVerify_initWithLibOrgBouncycastleCryptoDigest_withInt_([((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(self->digestProvider_)) get], IOSIntArray_Get(nil_chk(self->otsIndex_), h));
    help = [otsver VerifyWithByteArray:lowerRoot withByteArray:IOSObjectArray_Get(nil_chk(self->currentRootSigs_), h)];
  }
  [treeToConstruct updateWithByteArray:help];
  jint seedForTreehashIndex = 3;
  jint count = 0;
  for (jint i = 1; i < (JreLShift32(1, IOSIntArray_Get(nil_chk(self->heightOfTrees_), h))); i++) {
    if (i == seedForTreehashIndex && count < IOSIntArray_Get(self->heightOfTrees_, h) - IOSIntArray_Get(nil_chk(self->K_), h)) {
      [treeToConstruct initializeTreehashSeedWithByteArray:seed withInt:count];
      seedForTreehashIndex *= 2;
      count++;
    }
    OTSseed = [((LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(self->gmssRandom_)) nextSeedWithByteArray:seed];
    ots = new_LibOrgBouncycastlePqcCryptoGmssUtilWinternitzOTSignature_initWithByteArray_withLibOrgBouncycastleCryptoDigest_withInt_(OTSseed, [((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(self->digestProvider_)) get], IOSIntArray_Get(nil_chk(self->otsIndex_), h));
    [treeToConstruct updateWithByteArray:[ots getPublicKey]];
  }
  if ([treeToConstruct wasFinished]) {
    return treeToConstruct;
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Baum noch nicht fertig konstruiert!!!"];
  return nil;
}

LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_generateNextAuthpathAndRootWithJavaUtilVector_withByteArray_withInt_(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self, JavaUtilVector *nextStack, IOSByteArray *seed, jint h) {
  IOSByteArray *OTSseed = [IOSByteArray newArrayWithLength:self->numLayer_];
  LibOrgBouncycastlePqcCryptoGmssUtilWinternitzOTSignature *ots;
  LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc *treeToConstruct = new_LibOrgBouncycastlePqcCryptoGmssGMSSRootCalc_initWithInt_withInt_withLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(IOSIntArray_Get(nil_chk(self->heightOfTrees_), h), IOSIntArray_Get(nil_chk(self->K_), h), self->digestProvider_);
  [treeToConstruct initialize__WithJavaUtilVector:nextStack];
  jint seedForTreehashIndex = 3;
  jint count = 0;
  for (jint i = 0; i < (JreLShift32(1, IOSIntArray_Get(nil_chk(self->heightOfTrees_), h))); i++) {
    if (i == seedForTreehashIndex && count < IOSIntArray_Get(self->heightOfTrees_, h) - IOSIntArray_Get(nil_chk(self->K_), h)) {
      [treeToConstruct initializeTreehashSeedWithByteArray:seed withInt:count];
      seedForTreehashIndex *= 2;
      count++;
    }
    OTSseed = [((LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(self->gmssRandom_)) nextSeedWithByteArray:seed];
    ots = new_LibOrgBouncycastlePqcCryptoGmssUtilWinternitzOTSignature_initWithByteArray_withLibOrgBouncycastleCryptoDigest_withInt_(OTSseed, [((id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>) nil_chk(self->digestProvider_)) get], IOSIntArray_Get(nil_chk(self->otsIndex_), h));
    [treeToConstruct updateWithByteArray:[ots getPublicKey]];
  }
  if ([treeToConstruct wasFinished]) {
    return treeToConstruct;
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"N\ufffdchster Baum noch nicht fertig konstruiert!!!"];
  return nil;
}

void LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initializeDefault(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self) {
  IOSIntArray *defh = [IOSIntArray newArrayWithInts:(jint[]){ 10, 10, 10, 10 } count:4];
  IOSIntArray *defw = [IOSIntArray newArrayWithInts:(jint[]){ 3, 3, 3, 3 } count:4];
  IOSIntArray *defk = [IOSIntArray newArrayWithInts:(jint[]){ 2, 2, 2, 2 } count:4];
  LibOrgBouncycastleCryptoKeyGenerationParameters *kgp = new_LibOrgBouncycastlePqcCryptoGmssGMSSKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastlePqcCryptoGmssGMSSParameters_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom(), new_LibOrgBouncycastlePqcCryptoGmssGMSSParameters_initWithInt_withIntArray_withIntArray_withIntArray_(defh->size_, defh, defw, defk));
  [self initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:kgp];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator)
