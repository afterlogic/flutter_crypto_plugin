//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/PolynomialHeuristic.java
//

#ifndef PolynomialHeuristic_H
#define PolynomialHeuristic_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSIntArray;

@interface LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic : NSObject
@property (readonly, class) IOSIntArray *ZETA_I NS_SWIFT_NAME(ZETA_I);
@property (readonly, class) IOSIntArray *ZETA_INVERSE_I NS_SWIFT_NAME(ZETA_INVERSE_I);
@property (readonly, class) IOSIntArray *ZETA_III_SIZE NS_SWIFT_NAME(ZETA_III_SIZE);
@property (readonly, class) IOSIntArray *ZETA_INVERSE_III_SIZE NS_SWIFT_NAME(ZETA_INVERSE_III_SIZE);
@property (readonly, class) IOSIntArray *ZETA_III_SPEED NS_SWIFT_NAME(ZETA_III_SPEED);
@property (readonly, class) IOSIntArray *ZETA_INVERSE_III_SPEED NS_SWIFT_NAME(ZETA_INVERSE_III_SPEED);

+ (IOSIntArray *)ZETA_I;

+ (IOSIntArray *)ZETA_INVERSE_I;

+ (IOSIntArray *)ZETA_III_SIZE;

+ (IOSIntArray *)ZETA_INVERSE_III_SIZE;

+ (IOSIntArray *)ZETA_III_SPEED;

+ (IOSIntArray *)ZETA_INVERSE_III_SPEED;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic)

inline IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_get_ZETA_I(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_ZETA_I;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_I, IOSIntArray *)

inline IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_get_ZETA_INVERSE_I(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_ZETA_INVERSE_I;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_INVERSE_I, IOSIntArray *)

inline IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_get_ZETA_III_SIZE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_ZETA_III_SIZE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_III_SIZE, IOSIntArray *)

inline IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_get_ZETA_INVERSE_III_SIZE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_ZETA_INVERSE_III_SIZE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_INVERSE_III_SIZE, IOSIntArray *)

inline IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_get_ZETA_III_SPEED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_ZETA_III_SPEED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_III_SPEED, IOSIntArray *)

inline IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_get_ZETA_INVERSE_III_SPEED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_ZETA_INVERSE_III_SPEED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_INVERSE_III_SPEED, IOSIntArray *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_init(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic *new_LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic *create_LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PolynomialHeuristic_H
