//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/ec/ECUtil.java
//

#ifndef ECUtil_H
#define ECUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;

@interface LibOrgBouncycastleCryptoEcECUtil : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (JavaMathBigInteger *)generateKWithJavaMathBigInteger:(JavaMathBigInteger *)n
                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEcECUtil)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEcECUtil_init(LibOrgBouncycastleCryptoEcECUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEcECUtil *new_LibOrgBouncycastleCryptoEcECUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEcECUtil *create_LibOrgBouncycastleCryptoEcECUtil_init(void);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleCryptoEcECUtil_generateKWithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *n, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEcECUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ECUtil_H
