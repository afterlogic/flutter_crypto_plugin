//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/Wots.java
//

#ifndef Wots_H
#define Wots_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastlePqcCryptoSphincsHashFunctions;

@interface LibOrgBouncycastlePqcCryptoSphincsWots : NSObject
@property (readonly, class) jint WOTS_LOGW NS_SWIFT_NAME(WOTS_LOGW);
@property (readonly, class) jint WOTS_W NS_SWIFT_NAME(WOTS_W);
@property (readonly, class) jint WOTS_L1 NS_SWIFT_NAME(WOTS_L1);
@property (readonly, class) jint WOTS_L NS_SWIFT_NAME(WOTS_L);
@property (readonly, class) jint WOTS_LOG_L NS_SWIFT_NAME(WOTS_LOG_L);
@property (readonly, class) jint WOTS_SIGBYTES NS_SWIFT_NAME(WOTS_SIGBYTES);

+ (jint)WOTS_LOGW;

+ (jint)WOTS_W;

+ (jint)WOTS_L1;

+ (jint)WOTS_L;

+ (jint)WOTS_LOG_L;

+ (jint)WOTS_SIGBYTES;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (void)expand_seedWithByteArray:(IOSByteArray *)outseeds
                         withInt:(jint)outOff
                   withByteArray:(IOSByteArray *)inseed
                         withInt:(jint)inOff;

+ (void)gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                       withByteArray:(IOSByteArray *)outArg
                                                             withInt:(jint)outOff
                                                       withByteArray:(IOSByteArray *)seed
                                                             withInt:(jint)seedOff
                                                       withByteArray:(IOSByteArray *)masks
                                                             withInt:(jint)masksOff
                                                             withInt:(jint)chainlen;

- (void)wots_pkgenWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                        withByteArray:(IOSByteArray *)pk
                                                              withInt:(jint)pkOff
                                                        withByteArray:(IOSByteArray *)sk
                                                              withInt:(jint)skOff
                                                        withByteArray:(IOSByteArray *)masks
                                                              withInt:(jint)masksOff;

- (void)wots_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                       withByteArray:(IOSByteArray *)sig
                                                             withInt:(jint)sigOff
                                                       withByteArray:(IOSByteArray *)msg
                                                       withByteArray:(IOSByteArray *)sk
                                                       withByteArray:(IOSByteArray *)masks;

- (void)wots_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                         withByteArray:(IOSByteArray *)pk
                                                         withByteArray:(IOSByteArray *)sig
                                                               withInt:(jint)sigOff
                                                         withByteArray:(IOSByteArray *)msg
                                                         withByteArray:(IOSByteArray *)masks;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoSphincsWots)

inline jint LibOrgBouncycastlePqcCryptoSphincsWots_get_WOTS_LOGW(void);
#define LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_LOGW 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsWots, WOTS_LOGW, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsWots_get_WOTS_W(void);
#define LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsWots, WOTS_W, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsWots_get_WOTS_L1(void);
#define LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L1 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsWots, WOTS_L1, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsWots_get_WOTS_L(void);
#define LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L 67
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsWots, WOTS_L, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsWots_get_WOTS_LOG_L(void);
#define LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L 7
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsWots, WOTS_LOG_L, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsWots_get_WOTS_SIGBYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_SIGBYTES 2144
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsWots, WOTS_SIGBYTES, jint)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsWots_init(LibOrgBouncycastlePqcCryptoSphincsWots *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsWots *new_LibOrgBouncycastlePqcCryptoSphincsWots_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsWots *create_LibOrgBouncycastlePqcCryptoSphincsWots_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(IOSByteArray *outseeds, jint outOff, IOSByteArray *inseed, jint inOff);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsWots_gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *outArg, jint outOff, IOSByteArray *seed, jint seedOff, IOSByteArray *masks, jint masksOff, jint chainlen);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoSphincsWots)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Wots_H
