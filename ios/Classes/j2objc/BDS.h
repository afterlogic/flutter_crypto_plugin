//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/BDS.java
//

#ifndef BDS_H
#define BDS_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastlePqcCryptoXmssOTSHashAddress;
@class LibOrgBouncycastlePqcCryptoXmssXMSSNode;
@class LibOrgBouncycastlePqcCryptoXmssXMSSParameters;
@protocol JavaUtilList;

@interface LibOrgBouncycastlePqcCryptoXmssBDS : NSObject < JavaIoSerializable >

#pragma mark Public

- (LibOrgBouncycastlePqcCryptoXmssBDS *)getNextStateWithByteArray:(IOSByteArray *)publicSeed
                                                    withByteArray:(IOSByteArray *)secretKeySeed
                withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

- (LibOrgBouncycastlePqcCryptoXmssBDS *)withWOTSDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)digestName;

#pragma mark Protected

- (id<JavaUtilList>)getAuthenticationPath;

- (jint)getIndex;

- (LibOrgBouncycastlePqcCryptoXmssXMSSNode *)getRoot;

- (jint)getTreeHeight;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                                  withByteArray:(IOSByteArray *)publicSeed
                                                                  withByteArray:(IOSByteArray *)secretKeySeed
                              withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                                  withByteArray:(IOSByteArray *)publicSeed
                                                                  withByteArray:(IOSByteArray *)secretKeySeed
                              withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress
                                                                        withInt:(jint)index;

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                                        withInt:(jint)index;

- (jboolean)isUsed;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoXmssBDS)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, jint index);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withInt_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, jint index);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(LibOrgBouncycastlePqcCryptoXmssBDS *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint index);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssBDS *new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssBDS *create_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint index);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoXmssBDS)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BDS_H
