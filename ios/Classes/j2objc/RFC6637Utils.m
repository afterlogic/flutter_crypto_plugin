//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/RFC6637Utils.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCPGKey.h"
#include "ECDHPublicBCPGKey.h"
#include "HashAlgorithmTags.h"
#include "Hex.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFingerPrintCalculator.h"
#include "NISTObjectIdentifiers.h"
#include "PGPException.h"
#include "PublicKeyPacket.h"
#include "RFC6637Utils.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleOpenpgpOperatorRFC6637Utils ()

- (instancetype)init;

@end

inline IOSByteArray *LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_get_ANONYMOUS_SENDER(void);
static IOSByteArray *LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_ANONYMOUS_SENDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils, ANONYMOUS_SENDER, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_init(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils *self);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorRFC6637Utils *new_LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorRFC6637Utils *create_LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_init(void);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils)

@implementation LibOrgBouncycastleOpenpgpOperatorRFC6637Utils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getXDHAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)pubKeyData {
  return LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getXDHAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket_(pubKeyData);
}

+ (NSString *)getAgreementAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)pubKeyData {
  return LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getAgreementAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket_(pubKeyData);
}

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getKeyEncryptionOIDWithInt:(jint)algID {
  return LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getKeyEncryptionOIDWithInt_(algID);
}

+ (IOSByteArray *)createUserKeyingMaterialWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)pubKeyData
                      withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  return LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_createUserKeyingMaterialWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(pubKeyData, fingerPrintCalculator);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getXDHAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket:);
  methods[2].selector = @selector(getAgreementAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket:);
  methods[3].selector = @selector(getKeyEncryptionOIDWithInt:);
  methods[4].selector = @selector(createUserKeyingMaterialWithLibOrgBouncycastleBcpgPublicKeyPacket:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ANONYMOUS_SENDER", "[B", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "getXDHAlgorithm", "LLibOrgBouncycastleBcpgPublicKeyPacket;", "getAgreementAlgorithm", "getKeyEncryptionOID", "I", "LLibOrgBouncycastleOpenpgpPGPException;", "createUserKeyingMaterial", "LLibOrgBouncycastleBcpgPublicKeyPacket;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", &LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_ANONYMOUS_SENDER };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorRFC6637Utils = { "RFC6637Utils", "lib.org.bouncycastle.openpgp.operator", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorRFC6637Utils;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleOpenpgpOperatorRFC6637Utils class]) {
    LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_ANONYMOUS_SENDER = LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_(@"416E6F6E796D6F75732053656E64657220202020");
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils)
  }
}

@end

void LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_init(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorRFC6637Utils *new_LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils, init)
}

LibOrgBouncycastleOpenpgpOperatorRFC6637Utils *create_LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils, init)
}

NSString *LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getXDHAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket_(LibOrgBouncycastleBcpgPublicKeyPacket *pubKeyData) {
  LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_initialize();
  LibOrgBouncycastleBcpgECDHPublicBCPGKey *ecKey = (LibOrgBouncycastleBcpgECDHPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(pubKeyData)) getKey], [LibOrgBouncycastleBcpgECDHPublicBCPGKey class]);
  switch ([((LibOrgBouncycastleBcpgECDHPublicBCPGKey *) nil_chk(ecKey)) getHashAlgorithm]) {
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA256:
    return @"X25519withSHA256CKDF";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA384:
    return @"X25519withSHA384CKDF";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA512:
    return @"X25519withSHA512CKDF";
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$B", @"Unknown hash algorithm specified: ", [ecKey getHashAlgorithm]));
  }
}

NSString *LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getAgreementAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket_(LibOrgBouncycastleBcpgPublicKeyPacket *pubKeyData) {
  LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_initialize();
  LibOrgBouncycastleBcpgECDHPublicBCPGKey *ecKey = (LibOrgBouncycastleBcpgECDHPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(pubKeyData)) getKey], [LibOrgBouncycastleBcpgECDHPublicBCPGKey class]);
  switch ([((LibOrgBouncycastleBcpgECDHPublicBCPGKey *) nil_chk(ecKey)) getHashAlgorithm]) {
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA256:
    return @"ECCDHwithSHA256CKDF";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA384:
    return @"ECCDHwithSHA384CKDF";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA512:
    return @"ECCDHwithSHA512CKDF";
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$B", @"Unknown hash algorithm specified: ", [ecKey getHashAlgorithm]));
  }
}

LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getKeyEncryptionOIDWithInt_(jint algID) {
  LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_initialize();
  switch (algID) {
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128:
    return JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes128_wrap);
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_192:
    return JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes192_wrap);
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256:
    return JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_wrap);
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown symmetric algorithm ID: ", algID));
  }
}

IOSByteArray *LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_createUserKeyingMaterialWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *pubKeyData, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_initialize();
  JavaIoByteArrayOutputStream *pOut = new_JavaIoByteArrayOutputStream_init();
  LibOrgBouncycastleBcpgECDHPublicBCPGKey *ecKey = (LibOrgBouncycastleBcpgECDHPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(pubKeyData)) getKey], [LibOrgBouncycastleBcpgECDHPublicBCPGKey class]);
  IOSByteArray *encOid = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleBcpgECDHPublicBCPGKey *) nil_chk(ecKey)) getCurveOID])) getEncoded];
  [pOut writeWithByteArray:encOid withInt:1 withInt:((IOSByteArray *) nil_chk(encOid))->size_ - 1];
  [pOut writeWithInt:[pubKeyData getAlgorithm]];
  [pOut writeWithInt:(jint) 0x03];
  [pOut writeWithInt:(jint) 0x01];
  [pOut writeWithInt:[ecKey getHashAlgorithm]];
  [pOut writeWithInt:[ecKey getSymmetricKeyAlgorithm]];
  [pOut writeWithByteArray:LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_ANONYMOUS_SENDER];
  [pOut writeWithByteArray:[((id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>) nil_chk(fingerPrintCalculator)) calculateFingerprintWithLibOrgBouncycastleBcpgPublicKeyPacket:pubKeyData]];
  return [pOut toByteArray];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils)
