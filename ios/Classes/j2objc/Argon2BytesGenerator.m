//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/Argon2BytesGenerator.java
//

#include "Argon2BytesGenerator.h"
#include "Argon2Parameters.h"
#include "Arrays.h"
#include "Blake2bDigest.h"
#include "CharToByteConverter.h"
#include "Digest.h"
#include "Hex.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pack.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"

@class LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;
@class LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position;

@interface LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator () {
 @public
  IOSObjectArray *memory_;
  jint segmentLength_;
  jint laneLength_;
  LibOrgBouncycastleCryptoParamsArgon2Parameters *parameters_;
  IOSByteArray *result_;
}

- (void)reset;

- (void)doInitWithLibOrgBouncycastleCryptoParamsArgon2Parameters:(LibOrgBouncycastleCryptoParamsArgon2Parameters *)parameters;

- (void)initMemoryWithInt:(jint)memoryBlocks OBJC_METHOD_FAMILY_NONE;

- (void)fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)X
                 withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)Y
                 withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)currentBlock
                                                                      withBoolean:(jboolean)withXor;

- (void)fillMemoryBlocks;

- (void)fillSegmentWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position;

- (jboolean)isDataIndependentAddressingWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position;

- (void)initAddressBlocksWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position
                            withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)zeroBlock
                            withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)inputBlock
                            withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)addressBlock OBJC_METHOD_FAMILY_NONE;

- (jboolean)isWithXorWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position;

- (jint)getPrevOffsetWithInt:(jint)currentOffset;

- (jint)rotatePrevOffsetWithInt:(jint)currentOffset
                        withInt:(jint)prevOffset;

+ (jint)getStartingIndexWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position;

- (void)nextAddressesWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)zeroBlock
                     withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)inputBlock
                     withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)addressBlock;

- (jlong)getPseudoRandomWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position
                           withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)addressBlock
                           withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)inputBlock
                           withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)zeroBlock
                                                                                    withInt:(jint)prevOffset
                                                                                withBoolean:(jboolean)dataIndependentAddressing;

- (jint)getRefLaneWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position
                                                                             withLong:(jlong)pseudoRandom;

- (jint)getRefColumnWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position
                                                                               withLong:(jlong)pseudoRandom
                                                                            withBoolean:(jboolean)sameLane;

- (void)digestWithInt:(jint)outputLength;

- (IOSByteArray *)initialHashWithLibOrgBouncycastleCryptoParamsArgon2Parameters:(LibOrgBouncycastleCryptoParamsArgon2Parameters *)parameters
                                                                        withInt:(jint)outputLength
                                                                  withByteArray:(IOSByteArray *)password OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)hash__WithByteArray:(IOSByteArray *)input
                              withInt:(jint)outputLength;

- (void)roundFunctionWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)block
                                                                              withInt:(jint)v0
                                                                              withInt:(jint)v1
                                                                              withInt:(jint)v2
                                                                              withInt:(jint)v3
                                                                              withInt:(jint)v4
                                                                              withInt:(jint)v5
                                                                              withInt:(jint)v6
                                                                              withInt:(jint)v7
                                                                              withInt:(jint)v8
                                                                              withInt:(jint)v9
                                                                              withInt:(jint)v10
                                                                              withInt:(jint)v11
                                                                              withInt:(jint)v12
                                                                              withInt:(jint)v13
                                                                              withInt:(jint)v14
                                                                              withInt:(jint)v15;

- (void)FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)block
                                                                  withInt:(jint)a
                                                                  withInt:(jint)b
                                                                  withInt:(jint)c
                                                                  withInt:(jint)d;

- (void)fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)block
                                                                        withInt:(jint)x
                                                                        withInt:(jint)y;

- (void)rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)block
                                                                       withInt:(jint)v
                                                                       withInt:(jint)w
                                                                      withLong:(jlong)c;

- (void)initialize__WithByteArray:(IOSByteArray *)password
                          withInt:(jint)outputLength OBJC_METHOD_FAMILY_NONE;

+ (void)addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                       withInt:(jint)n;

+ (void)addByteStringWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                          withByteArray:(IOSByteArray *)octets;

- (void)fillFirstBlocksWithByteArray:(IOSByteArray *)initialHash;

- (IOSByteArray *)getInitialHashLongWithByteArray:(IOSByteArray *)initialHash
                                    withByteArray:(IOSByteArray *)appendix;

- (jlong)intToLongWithInt:(jint)x;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, memory_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, parameters_, LibOrgBouncycastleCryptoParamsArgon2Parameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, result_, IOSByteArray *)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_ARGON2_BLOCK_SIZE(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_BLOCK_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, ARGON2_BLOCK_SIZE, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_ARGON2_QWORDS_IN_BLOCK(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_QWORDS_IN_BLOCK 128
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, ARGON2_QWORDS_IN_BLOCK, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_ARGON2_ADDRESSES_IN_BLOCK(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_ADDRESSES_IN_BLOCK 128
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, ARGON2_ADDRESSES_IN_BLOCK, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_ARGON2_PREHASH_DIGEST_LENGTH(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_DIGEST_LENGTH 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, ARGON2_PREHASH_DIGEST_LENGTH, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_ARGON2_PREHASH_SEED_LENGTH(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_SEED_LENGTH 72
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, ARGON2_PREHASH_SEED_LENGTH, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_ARGON2_SYNC_POINTS(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, ARGON2_SYNC_POINTS, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_MIN_PARALLELISM(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_PARALLELISM 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, MIN_PARALLELISM, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_MAX_PARALLELISM(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MAX_PARALLELISM 16777216
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, MAX_PARALLELISM, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_MIN_OUTLEN(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_OUTLEN 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, MIN_OUTLEN, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_get_MIN_ITERATIONS(void);
#define LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_ITERATIONS 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, MIN_ITERATIONS, jint)

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_reset(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_doInitWithLibOrgBouncycastleCryptoParamsArgon2Parameters_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoParamsArgon2Parameters *parameters);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initMemoryWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint memoryBlocks);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withBoolean_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *X, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *Y, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *currentBlock, jboolean withXor);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillMemoryBlocks(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillSegmentWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position);

__attribute__((unused)) static jboolean LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_isDataIndependentAddressingWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initAddressBlocksWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *zeroBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *inputBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *addressBlock);

__attribute__((unused)) static jboolean LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_isWithXorWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getPrevOffsetWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint currentOffset);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotatePrevOffsetWithInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint currentOffset, jint prevOffset);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getStartingIndexWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_nextAddressesWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *zeroBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *inputBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *addressBlock);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getPseudoRandomWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withBoolean_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *addressBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *inputBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *zeroBlock, jint prevOffset, jboolean dataIndependentAddressing);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getRefLaneWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLong_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position, jlong pseudoRandom);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getRefColumnWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLong_withBoolean_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position, jlong pseudoRandom, jboolean sameLane);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_digestWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint outputLength);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialHashWithLibOrgBouncycastleCryptoParamsArgon2Parameters_withInt_withByteArray_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoParamsArgon2Parameters *parameters, jint outputLength, IOSByteArray *password);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_hash__WithByteArray_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, IOSByteArray *input, jint outputLength);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_roundFunctionWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *block, jint v0, jint v1, jint v2, jint v3, jint v4, jint v5, jint v6, jint v7, jint v8, jint v9, jint v10, jint v11, jint v12, jint v13, jint v14, jint v15);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *block, jint a, jint b, jint c, jint d);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *block, jint x, jint y);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withLong_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *block, jint v, jint w, jlong c);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialize__WithByteArray_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, IOSByteArray *password, jint outputLength);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoDigest> digest, jint n);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addByteStringWithLibOrgBouncycastleCryptoDigest_withByteArray_(id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *octets);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillFirstBlocksWithByteArray_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, IOSByteArray *initialHash);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getInitialHashLongWithByteArray_withByteArray_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, IOSByteArray *initialHash, IOSByteArray *appendix);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint x);

@interface LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block : NSObject {
 @public
  IOSLongArray *v_;
}

- (instancetype)init;

- (void)fromBytesWithByteArray:(IOSByteArray *)input;

- (IOSByteArray *)toBytes;

- (void)copyBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)other OBJC_METHOD_FAMILY_NONE;

- (void)xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b1
             withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b2;

- (void)xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b1
             withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b2
             withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b3;

- (void)xorWithWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)other;

- (NSString *)description;

- (void)clear;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block, v_, IOSLongArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *create_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init(void);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_copyBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *other);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *b1, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *b2);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xorWithWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *other);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block)

@interface LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position : NSObject {
 @public
  jint pass_;
  jint lane_;
  jint slice_;
  jint index_;
}

- (instancetype)initWithInt:(jint)pass
                    withInt:(jint)lane
                    withInt:(jint)slice
                    withInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position)

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_initWithInt_withInt_withInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *self, jint pass, jint lane, jint slice, jint index);

__attribute__((unused)) static LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_initWithInt_withInt_withInt_withInt_(jint pass, jint lane, jint slice, jint index) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *create_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_initWithInt_withInt_withInt_withInt_(jint pass, jint lane, jint slice, jint index);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position)

@implementation LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoParamsArgon2Parameters:(LibOrgBouncycastleCryptoParamsArgon2Parameters *)parameters {
  self->parameters_ = parameters;
  if ([((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(parameters)) getLanes] < LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_PARALLELISM) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"lanes must be greater than ", LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_PARALLELISM));
  }
  else if ([parameters getLanes] > LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MAX_PARALLELISM) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"lanes must be less than ", LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MAX_PARALLELISM));
  }
  else if ([parameters getMemory] < 2 * [parameters getLanes]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"memory is less than: ", (2 * [parameters getLanes]), @" expected ", (2 * [parameters getLanes])));
  }
  else if ([parameters getIterations] < LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_ITERATIONS) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"iterations is less than: ", LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_ITERATIONS));
  }
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_doInitWithLibOrgBouncycastleCryptoParamsArgon2Parameters_(self, parameters);
}

- (jint)generateBytesWithCharArray:(IOSCharArray *)password
                     withByteArray:(IOSByteArray *)outArg {
  return [self generateBytesWithByteArray:[((id<LibOrgBouncycastleCryptoCharToByteConverter>) nil_chk([((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(parameters_)) getCharToByteConverter])) convertWithCharArray:password] withByteArray:outArg];
}

- (jint)generateBytesWithCharArray:(IOSCharArray *)password
                     withByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)outLen {
  return [self generateBytesWithByteArray:[((id<LibOrgBouncycastleCryptoCharToByteConverter>) nil_chk([((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(parameters_)) getCharToByteConverter])) convertWithCharArray:password] withByteArray:outArg withInt:outOff withInt:outLen];
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)password
                     withByteArray:(IOSByteArray *)outArg {
  return [self generateBytesWithByteArray:password withByteArray:outArg withInt:0 withInt:((IOSByteArray *) nil_chk(outArg))->size_];
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)password
                     withByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)outLen {
  if (outLen < LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_OUTLEN) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"output length less than ", LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_OUTLEN));
  }
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialize__WithByteArray_withInt_(self, password, outLen);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillMemoryBlocks(self);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_digestWithInt_(self, outLen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(result_, 0, outArg, outOff, outLen);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_reset(self);
  return outLen;
}

- (void)reset {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_reset(self);
}

- (void)doInitWithLibOrgBouncycastleCryptoParamsArgon2Parameters:(LibOrgBouncycastleCryptoParamsArgon2Parameters *)parameters {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_doInitWithLibOrgBouncycastleCryptoParamsArgon2Parameters_(self, parameters);
}

- (void)initMemoryWithInt:(jint)memoryBlocks {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initMemoryWithInt_(self, memoryBlocks);
}

- (void)fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)X
                 withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)Y
                 withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)currentBlock
                                                                      withBoolean:(jboolean)withXor {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withBoolean_(self, X, Y, currentBlock, withXor);
}

- (void)fillMemoryBlocks {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillMemoryBlocks(self);
}

- (void)fillSegmentWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillSegmentWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(self, position);
}

- (jboolean)isDataIndependentAddressingWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_isDataIndependentAddressingWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(self, position);
}

- (void)initAddressBlocksWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position
                            withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)zeroBlock
                            withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)inputBlock
                            withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)addressBlock {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initAddressBlocksWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(self, position, zeroBlock, inputBlock, addressBlock);
}

- (jboolean)isWithXorWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_isWithXorWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(self, position);
}

- (jint)getPrevOffsetWithInt:(jint)currentOffset {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getPrevOffsetWithInt_(self, currentOffset);
}

- (jint)rotatePrevOffsetWithInt:(jint)currentOffset
                        withInt:(jint)prevOffset {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotatePrevOffsetWithInt_withInt_(self, currentOffset, prevOffset);
}

+ (jint)getStartingIndexWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getStartingIndexWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(position);
}

- (void)nextAddressesWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)zeroBlock
                     withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)inputBlock
                     withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)addressBlock {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_nextAddressesWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(self, zeroBlock, inputBlock, addressBlock);
}

- (jlong)getPseudoRandomWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position
                           withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)addressBlock
                           withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)inputBlock
                           withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)zeroBlock
                                                                                    withInt:(jint)prevOffset
                                                                                withBoolean:(jboolean)dataIndependentAddressing {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getPseudoRandomWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withBoolean_(self, position, addressBlock, inputBlock, zeroBlock, prevOffset, dataIndependentAddressing);
}

- (jint)getRefLaneWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position
                                                                             withLong:(jlong)pseudoRandom {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getRefLaneWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLong_(self, position, pseudoRandom);
}

- (jint)getRefColumnWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *)position
                                                                               withLong:(jlong)pseudoRandom
                                                                            withBoolean:(jboolean)sameLane {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getRefColumnWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLong_withBoolean_(self, position, pseudoRandom, sameLane);
}

- (void)digestWithInt:(jint)outputLength {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_digestWithInt_(self, outputLength);
}

- (IOSByteArray *)initialHashWithLibOrgBouncycastleCryptoParamsArgon2Parameters:(LibOrgBouncycastleCryptoParamsArgon2Parameters *)parameters
                                                                        withInt:(jint)outputLength
                                                                  withByteArray:(IOSByteArray *)password {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialHashWithLibOrgBouncycastleCryptoParamsArgon2Parameters_withInt_withByteArray_(self, parameters, outputLength, password);
}

- (IOSByteArray *)hash__WithByteArray:(IOSByteArray *)input
                              withInt:(jint)outputLength {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_hash__WithByteArray_withInt_(self, input, outputLength);
}

- (void)roundFunctionWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)block
                                                                              withInt:(jint)v0
                                                                              withInt:(jint)v1
                                                                              withInt:(jint)v2
                                                                              withInt:(jint)v3
                                                                              withInt:(jint)v4
                                                                              withInt:(jint)v5
                                                                              withInt:(jint)v6
                                                                              withInt:(jint)v7
                                                                              withInt:(jint)v8
                                                                              withInt:(jint)v9
                                                                              withInt:(jint)v10
                                                                              withInt:(jint)v11
                                                                              withInt:(jint)v12
                                                                              withInt:(jint)v13
                                                                              withInt:(jint)v14
                                                                              withInt:(jint)v15 {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_roundFunctionWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, block, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
}

- (void)FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)block
                                                                  withInt:(jint)a
                                                                  withInt:(jint)b
                                                                  withInt:(jint)c
                                                                  withInt:(jint)d {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, a, b, c, d);
}

- (void)fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)block
                                                                        withInt:(jint)x
                                                                        withInt:(jint)y {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_(self, block, x, y);
}

- (void)rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)block
                                                                       withInt:(jint)v
                                                                       withInt:(jint)w
                                                                      withLong:(jlong)c {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withLong_(self, block, v, w, c);
}

- (void)initialize__WithByteArray:(IOSByteArray *)password
                          withInt:(jint)outputLength {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialize__WithByteArray_withInt_(self, password, outputLength);
}

+ (void)addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                       withInt:(jint)n {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(digest, n);
}

+ (void)addByteStringWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                          withByteArray:(IOSByteArray *)octets {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addByteStringWithLibOrgBouncycastleCryptoDigest_withByteArray_(digest, octets);
}

- (void)fillFirstBlocksWithByteArray:(IOSByteArray *)initialHash {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillFirstBlocksWithByteArray_(self, initialHash);
}

- (IOSByteArray *)getInitialHashLongWithByteArray:(IOSByteArray *)initialHash
                                    withByteArray:(IOSByteArray *)appendix {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getInitialHashLongWithByteArray_withByteArray_(self, initialHash, appendix);
}

- (jlong)intToLongWithInt:(jint)x {
  return LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(self, x);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 18, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 49, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 50, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 51, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoParamsArgon2Parameters:);
  methods[2].selector = @selector(generateBytesWithCharArray:withByteArray:);
  methods[3].selector = @selector(generateBytesWithCharArray:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(generateBytesWithByteArray:withByteArray:);
  methods[5].selector = @selector(generateBytesWithByteArray:withByteArray:withInt:withInt:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(doInitWithLibOrgBouncycastleCryptoParamsArgon2Parameters:);
  methods[8].selector = @selector(initMemoryWithInt:);
  methods[9].selector = @selector(fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withBoolean:);
  methods[10].selector = @selector(fillMemoryBlocks);
  methods[11].selector = @selector(fillSegmentWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:);
  methods[12].selector = @selector(isDataIndependentAddressingWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:);
  methods[13].selector = @selector(initAddressBlocksWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:);
  methods[14].selector = @selector(isWithXorWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:);
  methods[15].selector = @selector(getPrevOffsetWithInt:);
  methods[16].selector = @selector(rotatePrevOffsetWithInt:withInt:);
  methods[17].selector = @selector(getStartingIndexWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:);
  methods[18].selector = @selector(nextAddressesWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:);
  methods[19].selector = @selector(getPseudoRandomWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withInt:withBoolean:);
  methods[20].selector = @selector(getRefLaneWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:withLong:);
  methods[21].selector = @selector(getRefColumnWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position:withLong:withBoolean:);
  methods[22].selector = @selector(digestWithInt:);
  methods[23].selector = @selector(initialHashWithLibOrgBouncycastleCryptoParamsArgon2Parameters:withInt:withByteArray:);
  methods[24].selector = @selector(hash__WithByteArray:withInt:);
  methods[25].selector = @selector(roundFunctionWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[26].selector = @selector(FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withInt:withInt:withInt:withInt:);
  methods[27].selector = @selector(fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withInt:withInt:);
  methods[28].selector = @selector(rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withInt:withInt:withLong:);
  methods[29].selector = @selector(initialize__WithByteArray:withInt:);
  methods[30].selector = @selector(addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest:withInt:);
  methods[31].selector = @selector(addByteStringWithLibOrgBouncycastleCryptoDigest:withByteArray:);
  methods[32].selector = @selector(fillFirstBlocksWithByteArray:);
  methods[33].selector = @selector(getInitialHashLongWithByteArray:withByteArray:);
  methods[34].selector = @selector(intToLongWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ARGON2_BLOCK_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "ARGON2_QWORDS_IN_BLOCK", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_QWORDS_IN_BLOCK, 0x1a, -1, -1, -1, -1 },
    { "ARGON2_ADDRESSES_IN_BLOCK", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_ADDRESSES_IN_BLOCK, 0x1a, -1, -1, -1, -1 },
    { "ARGON2_PREHASH_DIGEST_LENGTH", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_DIGEST_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "ARGON2_PREHASH_SEED_LENGTH", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_SEED_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "ARGON2_SYNC_POINTS", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS, 0x1a, -1, -1, -1, -1 },
    { "MIN_PARALLELISM", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_PARALLELISM, 0x1a, -1, -1, -1, -1 },
    { "MAX_PARALLELISM", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MAX_PARALLELISM, 0x1a, -1, -1, -1, -1 },
    { "MIN_OUTLEN", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_OUTLEN, 0x1a, -1, -1, -1, -1 },
    { "MIN_ITERATIONS", "I", .constantValue.asInt = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_MIN_ITERATIONS, 0x1a, -1, -1, -1, -1 },
    { "memory_", "[LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "segmentLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "laneLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parameters_", "LLibOrgBouncycastleCryptoParamsArgon2Parameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "result_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoParamsArgon2Parameters;", "generateBytes", "[C[B", "[C[BII", "[B[B", "[B[BII", "doInit", "initMemory", "I", "fillBlock", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;Z", "fillSegment", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position;", "isDataIndependentAddressing", "initAddressBlocks", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;", "isWithXor", "getPrevOffset", "rotatePrevOffset", "II", "getStartingIndex", "nextAddresses", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;", "getPseudoRandom", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;IZ", "getRefLane", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position;J", "getRefColumn", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position;JZ", "digest", "initialHash", "LLibOrgBouncycastleCryptoParamsArgon2Parameters;I[B", "hash", "[BI", "roundFunction", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;IIIIIIIIIIIIIIII", "F", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;IIII", "fBlaMka", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;II", "rotr64", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;IIJ", "initialize", "addIntToLittleEndian", "LLibOrgBouncycastleCryptoDigest;I", "addByteString", "LLibOrgBouncycastleCryptoDigest;[B", "fillFirstBlocks", "[B", "getInitialHashLong", "intToLong", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator = { "Argon2BytesGenerator", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 35, 15, -1, 52, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator;
}

@end

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_init(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, init)
}

LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *create_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator, init)
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_reset(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->memory_))->size_; i++) {
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *b = IOSObjectArray_Get(self->memory_, i);
    [((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(b)) clear];
  }
  self->memory_ = nil;
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(self->result_, (jbyte) 0);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_doInitWithLibOrgBouncycastleCryptoParamsArgon2Parameters_(self, self->parameters_);
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_doInitWithLibOrgBouncycastleCryptoParamsArgon2Parameters_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoParamsArgon2Parameters *parameters) {
  jint memoryBlocks = [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(parameters)) getMemory];
  if (memoryBlocks < 2 * LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS * [parameters getLanes]) {
    memoryBlocks = 2 * LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS * [parameters getLanes];
  }
  self->segmentLength_ = memoryBlocks / ([parameters getLanes] * LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS);
  self->laneLength_ = self->segmentLength_ * LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS;
  memoryBlocks = self->segmentLength_ * ([parameters getLanes] * LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initMemoryWithInt_(self, memoryBlocks);
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initMemoryWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint memoryBlocks) {
  self->memory_ = [IOSObjectArray newArrayWithLength:memoryBlocks type:LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_class_()];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->memory_))->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(self->memory_, i, new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init());
  }
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withBoolean_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *X, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *Y, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *currentBlock, jboolean withXor) {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *R = new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init();
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *Z = new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init();
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(R, X, Y);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_copyBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(Z, R);
  for (jint i = 0; i < 8; i++) {
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_roundFunctionWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, Z, 16 * i, 16 * i + 1, 16 * i + 2, 16 * i + 3, 16 * i + 4, 16 * i + 5, 16 * i + 6, 16 * i + 7, 16 * i + 8, 16 * i + 9, 16 * i + 10, 16 * i + 11, 16 * i + 12, 16 * i + 13, 16 * i + 14, 16 * i + 15);
  }
  for (jint i = 0; i < 8; i++) {
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_roundFunctionWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, Z, 2 * i, 2 * i + 1, 2 * i + 16, 2 * i + 17, 2 * i + 32, 2 * i + 33, 2 * i + 48, 2 * i + 49, 2 * i + 64, 2 * i + 65, 2 * i + 80, 2 * i + 81, 2 * i + 96, 2 * i + 97, 2 * i + 112, 2 * i + 113);
  }
  if (withXor) {
    [((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(currentBlock)) xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:R withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:Z withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:currentBlock];
  }
  else {
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(nil_chk(currentBlock), R, Z);
  }
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillMemoryBlocks(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self) {
  for (jint i = 0; i < [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getIterations]; i++) {
    for (jint j = 0; j < LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS; j++) {
      for (jint k = 0; k < [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getLanes]; k++) {
        LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position = new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_initWithInt_withInt_withInt_withInt_(i, k, j, 0);
        LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillSegmentWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(self, position);
      }
    }
  }
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillSegmentWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position) {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *addressBlock = nil;
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *inputBlock = nil;
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *zeroBlock = nil;
  jboolean dataIndependentAddressing = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_isDataIndependentAddressingWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(self, position);
  jint startingIndex = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getStartingIndexWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(position);
  jint currentOffset = ((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *) nil_chk(position))->lane_ * self->laneLength_ + position->slice_ * self->segmentLength_ + startingIndex;
  jint prevOffset = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getPrevOffsetWithInt_(self, currentOffset);
  if (dataIndependentAddressing) {
    addressBlock = new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init();
    zeroBlock = new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init();
    inputBlock = new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init();
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initAddressBlocksWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(self, position, zeroBlock, inputBlock, addressBlock);
  }
  for (position->index_ = startingIndex; position->index_ < self->segmentLength_; position->index_++, currentOffset++, prevOffset++) {
    prevOffset = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotatePrevOffsetWithInt_withInt_(self, currentOffset, prevOffset);
    jlong pseudoRandom = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getPseudoRandomWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withBoolean_(self, position, addressBlock, inputBlock, zeroBlock, prevOffset, dataIndependentAddressing);
    jint refLane = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getRefLaneWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLong_(self, position, pseudoRandom);
    jint refColumn = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getRefColumnWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLong_withBoolean_(self, position, pseudoRandom, refLane == position->lane_);
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *prevBlock = IOSObjectArray_Get(nil_chk(self->memory_), prevOffset);
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *refBlock = IOSObjectArray_Get(self->memory_, ((self->laneLength_) * refLane + refColumn));
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *currentBlock = IOSObjectArray_Get(self->memory_, currentOffset);
    jboolean withXor = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_isWithXorWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(self, position);
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withBoolean_(self, prevBlock, refBlock, currentBlock, withXor);
  }
}

jboolean LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_isDataIndependentAddressingWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position) {
  return ([((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getType] == LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_i) || ([((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getType] == LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_id && (((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *) nil_chk(position))->pass_ == 0) && (position->slice_ < LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_SYNC_POINTS / 2));
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initAddressBlocksWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *zeroBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *inputBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *addressBlock) {
  *IOSLongArray_GetRef(nil_chk(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(inputBlock))->v_), 0) = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(self, ((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *) nil_chk(position))->pass_);
  *IOSLongArray_GetRef(nil_chk(inputBlock->v_), 1) = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(self, position->lane_);
  *IOSLongArray_GetRef(nil_chk(inputBlock->v_), 2) = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(self, position->slice_);
  *IOSLongArray_GetRef(nil_chk(inputBlock->v_), 3) = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(self, ((IOSObjectArray *) nil_chk(self->memory_))->size_);
  *IOSLongArray_GetRef(nil_chk(inputBlock->v_), 4) = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(self, [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getIterations]);
  *IOSLongArray_GetRef(nil_chk(inputBlock->v_), 5) = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(self, [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getType]);
  if ((position->pass_ == 0) && (position->slice_ == 0)) {
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_nextAddressesWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(self, zeroBlock, inputBlock, addressBlock);
  }
}

jboolean LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_isWithXorWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position) {
  return !(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *) nil_chk(position))->pass_ == 0 || [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getVersion] == LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_VERSION_10);
}

jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getPrevOffsetWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint currentOffset) {
  if (currentOffset % self->laneLength_ == 0) {
    return currentOffset + self->laneLength_ - 1;
  }
  else {
    return currentOffset - 1;
  }
}

jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotatePrevOffsetWithInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint currentOffset, jint prevOffset) {
  if (currentOffset % self->laneLength_ == 1) {
    prevOffset = currentOffset - 1;
  }
  return prevOffset;
}

jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getStartingIndexWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position) {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialize();
  if ((((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *) nil_chk(position))->pass_ == 0) && (position->slice_ == 0)) {
    return 2;
  }
  else {
    return 0;
  }
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_nextAddressesWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *zeroBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *inputBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *addressBlock) {
  (*IOSLongArray_GetRef(nil_chk(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(inputBlock))->v_), 6))++;
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withBoolean_(self, zeroBlock, inputBlock, addressBlock, false);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withBoolean_(self, zeroBlock, addressBlock, addressBlock, false);
}

jlong LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getPseudoRandomWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withBoolean_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *addressBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *inputBlock, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *zeroBlock, jint prevOffset, jboolean dataIndependentAddressing) {
  if (dataIndependentAddressing) {
    if (((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *) nil_chk(position))->index_ % LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_ADDRESSES_IN_BLOCK == 0) {
      LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_nextAddressesWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(self, zeroBlock, inputBlock, addressBlock);
    }
    return IOSLongArray_Get(nil_chk(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(addressBlock))->v_), position->index_ % LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_ADDRESSES_IN_BLOCK);
  }
  else {
    return IOSLongArray_Get(nil_chk(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(IOSObjectArray_Get(nil_chk(self->memory_), prevOffset)))->v_), 0);
  }
}

jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getRefLaneWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLong_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position, jlong pseudoRandom) {
  jint refLane = (jint) (((JreURShift64(pseudoRandom, 32))) % [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getLanes]);
  if ((((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *) nil_chk(position))->pass_ == 0) && (position->slice_ == 0)) {
    refLane = position->lane_;
  }
  return refLane;
}

jint LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getRefColumnWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_withLong_withBoolean_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *position, jlong pseudoRandom, jboolean sameLane) {
  jint referenceAreaSize;
  jint startPosition;
  if (((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *) nil_chk(position))->pass_ == 0) {
    startPosition = 0;
    if (sameLane) {
      referenceAreaSize = position->slice_ * self->segmentLength_ + position->index_ - 1;
    }
    else {
      referenceAreaSize = position->slice_ * self->segmentLength_ + ((position->index_ == 0) ? (-1) : 0);
    }
  }
  else {
    startPosition = ((position->slice_ + 1) * self->segmentLength_) % self->laneLength_;
    if (sameLane) {
      referenceAreaSize = self->laneLength_ - self->segmentLength_ + position->index_ - 1;
    }
    else {
      referenceAreaSize = self->laneLength_ - self->segmentLength_ + ((position->index_ == 0) ? (-1) : 0);
    }
  }
  jlong relativePosition = pseudoRandom & (jlong) 0xFFFFFFFFLL;
  relativePosition = JreURShift64((relativePosition * relativePosition), 32);
  relativePosition = referenceAreaSize - 1 - (JreURShift64((referenceAreaSize * relativePosition), 32));
  return (jint) (startPosition + relativePosition) % self->laneLength_;
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_digestWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint outputLength) {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *finalBlock = IOSObjectArray_Get(nil_chk(self->memory_), self->laneLength_ - 1);
  for (jint i = 1; i < [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getLanes]; i++) {
    jint lastBlockInLane = i * self->laneLength_ + (self->laneLength_ - 1);
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xorWithWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(nil_chk(finalBlock), IOSObjectArray_Get(nil_chk(self->memory_), lastBlockInLane));
  }
  IOSByteArray *finalBlockBytes = [((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(finalBlock)) toBytes];
  self->result_ = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_hash__WithByteArray_withInt_(self, finalBlockBytes, outputLength);
}

IOSByteArray *LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialHashWithLibOrgBouncycastleCryptoParamsArgon2Parameters_withInt_withByteArray_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoParamsArgon2Parameters *parameters, jint outputLength, IOSByteArray *password) {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest *blake = new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_DIGEST_LENGTH * 8);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(blake, [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(parameters)) getLanes]);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(blake, outputLength);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(blake, [parameters getMemory]);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(blake, [parameters getIterations]);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(blake, [parameters getVersion]);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(blake, [parameters getType]);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addByteStringWithLibOrgBouncycastleCryptoDigest_withByteArray_(blake, password);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addByteStringWithLibOrgBouncycastleCryptoDigest_withByteArray_(blake, [parameters getSalt]);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addByteStringWithLibOrgBouncycastleCryptoDigest_withByteArray_(blake, [parameters getSecret]);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addByteStringWithLibOrgBouncycastleCryptoDigest_withByteArray_(blake, [parameters getAdditional]);
  IOSByteArray *blake2hash = [IOSByteArray newArrayWithLength:[blake getDigestSize]];
  [blake doFinalWithByteArray:blake2hash withInt:0];
  return blake2hash;
}

IOSByteArray *LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_hash__WithByteArray_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, IOSByteArray *input, jint outputLength) {
  IOSByteArray *result = [IOSByteArray newArrayWithLength:outputLength];
  IOSByteArray *outlenBytes = LibOrgBouncycastleUtilPack_intToLittleEndianWithInt_(outputLength);
  jint blake2bLength = 64;
  if (outputLength <= blake2bLength) {
    LibOrgBouncycastleCryptoDigestsBlake2bDigest *blake = new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(outputLength * 8);
    [blake updateWithByteArray:outlenBytes withInt:0 withInt:((IOSByteArray *) nil_chk(outlenBytes))->size_];
    [blake updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
    [blake doFinalWithByteArray:result withInt:0];
  }
  else {
    LibOrgBouncycastleCryptoDigestsBlake2bDigest *digest = new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(blake2bLength * 8);
    IOSByteArray *outBuffer = [IOSByteArray newArrayWithLength:blake2bLength];
    [digest updateWithByteArray:outlenBytes withInt:0 withInt:((IOSByteArray *) nil_chk(outlenBytes))->size_];
    [digest updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
    [digest doFinalWithByteArray:outBuffer withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outBuffer, 0, result, 0, blake2bLength / 2);
    jint r = ((outputLength + 31) / 32) - 2;
    jint position = blake2bLength / 2;
    for (jint i = 2; i <= r; i++, position += blake2bLength / 2) {
      [digest updateWithByteArray:outBuffer withInt:0 withInt:outBuffer->size_];
      [digest doFinalWithByteArray:outBuffer withInt:0];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outBuffer, 0, result, position, blake2bLength / 2);
    }
    jint lastLength = outputLength - 32 * r;
    digest = new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(lastLength * 8);
    [digest updateWithByteArray:outBuffer withInt:0 withInt:outBuffer->size_];
    [digest doFinalWithByteArray:result withInt:position];
  }
  return result;
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_roundFunctionWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *block, jint v0, jint v1, jint v2, jint v3, jint v4, jint v5, jint v6, jint v7, jint v8, jint v9, jint v10, jint v11, jint v12, jint v13, jint v14, jint v15) {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, v0, v4, v8, v12);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, v1, v5, v9, v13);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, v2, v6, v10, v14);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, v3, v7, v11, v15);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, v0, v5, v10, v15);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, v1, v6, v11, v12);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, v2, v7, v8, v13);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(self, block, v3, v4, v9, v14);
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_FWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *block, jint a, jint b, jint c, jint d) {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_(self, block, a, b);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withLong_(self, block, d, a, 32);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_(self, block, c, d);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withLong_(self, block, b, c, 24);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_(self, block, a, b);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withLong_(self, block, d, a, 16);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_(self, block, c, d);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withLong_(self, block, b, c, 63);
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fBlaMkaWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *block, jint x, jint y) {
  jlong m = (jlong) 0xFFFFFFFFLL;
  jlong xy = (IOSLongArray_Get(nil_chk(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(block))->v_), x) & m) * (IOSLongArray_Get(block->v_, y) & m);
  *IOSLongArray_GetRef(block->v_, x) = IOSLongArray_Get(block->v_, x) + IOSLongArray_Get(block->v_, y) + 2 * xy;
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_rotr64WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withInt_withInt_withLong_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *block, jint v, jint w, jlong c) {
  jlong temp = IOSLongArray_Get(nil_chk(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(block))->v_), v) ^ IOSLongArray_Get(block->v_, w);
  *IOSLongArray_GetRef(block->v_, v) = (JreURShift64(temp, c)) | (JreLShift64(temp, (64 - c)));
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialize__WithByteArray_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, IOSByteArray *password, jint outputLength) {
  IOSByteArray *initialHash = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialHashWithLibOrgBouncycastleCryptoParamsArgon2Parameters_withInt_withByteArray_(self, self->parameters_, outputLength, password);
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillFirstBlocksWithByteArray_(self, initialHash);
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoDigest> digest, jint n) {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialize();
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByte:(jbyte) (n)];
  [digest updateWithByte:(jbyte) (JreURShift32(n, 8))];
  [digest updateWithByte:(jbyte) (JreURShift32(n, 16))];
  [digest updateWithByte:(jbyte) (JreURShift32(n, 24))];
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addByteStringWithLibOrgBouncycastleCryptoDigest_withByteArray_(id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *octets) {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_initialize();
  if (octets != nil) {
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(digest, octets->size_);
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:octets withInt:0 withInt:octets->size_];
  }
  else {
    LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_addIntToLittleEndianWithLibOrgBouncycastleCryptoDigest_withInt_(digest, 0);
  }
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_fillFirstBlocksWithByteArray_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, IOSByteArray *initialHash) {
  IOSByteArray *zeroBytes = [IOSByteArray newArrayWithBytes:(jbyte[]){ 0, 0, 0, 0 } count:4];
  IOSByteArray *oneBytes = [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 0, 0 } count:4];
  IOSByteArray *initialHashWithZeros = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getInitialHashLongWithByteArray_withByteArray_(self, initialHash, zeroBytes);
  IOSByteArray *initialHashWithOnes = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getInitialHashLongWithByteArray_withByteArray_(self, initialHash, oneBytes);
  for (jint i = 0; i < [((LibOrgBouncycastleCryptoParamsArgon2Parameters *) nil_chk(self->parameters_)) getLanes]; i++) {
    LibOrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(i, initialHashWithZeros, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_DIGEST_LENGTH + 4);
    LibOrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(i, initialHashWithOnes, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_DIGEST_LENGTH + 4);
    IOSByteArray *blockhashBytes = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_hash__WithByteArray_withInt_(self, initialHashWithZeros, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_BLOCK_SIZE);
    [((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(IOSObjectArray_Get(nil_chk(self->memory_), i * self->laneLength_ + 0))) fromBytesWithByteArray:blockhashBytes];
    blockhashBytes = LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_hash__WithByteArray_withInt_(self, initialHashWithOnes, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_BLOCK_SIZE);
    [((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(IOSObjectArray_Get(nil_chk(self->memory_), i * self->laneLength_ + 1))) fromBytesWithByteArray:blockhashBytes];
  }
}

IOSByteArray *LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_getInitialHashLongWithByteArray_withByteArray_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, IOSByteArray *initialHash, IOSByteArray *appendix) {
  IOSByteArray *initialHashLong = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_SEED_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(initialHash, 0, initialHashLong, 0, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_DIGEST_LENGTH);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(appendix, 0, initialHashLong, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_PREHASH_DIGEST_LENGTH, 4);
  return initialHashLong;
}

jlong LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_intToLongWithInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator *self, jint x) {
  return (jlong) (x & (jlong) 0xffffffffLL);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator)

@implementation LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)fromBytesWithByteArray:(IOSByteArray *)input {
  if (((IOSByteArray *) nil_chk(input))->size_ != LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_BLOCK_SIZE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"input shorter than blocksize");
  }
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(v_))->size_; i++) {
    *IOSLongArray_GetRef(v_, i) = LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(input, i * 8);
  }
}

- (IOSByteArray *)toBytes {
  IOSByteArray *result = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_BLOCK_SIZE];
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(v_))->size_; i++) {
    LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(IOSLongArray_Get(v_, i), result, i * 8);
  }
  return result;
}

- (void)copyBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)other {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_copyBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(self, other);
}

- (void)xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b1
             withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b2 {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(self, b1, b2);
}

- (void)xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b1
             withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b2
             withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)b3 {
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(v_))->size_; i++) {
    *IOSLongArray_GetRef(v_, i) = IOSLongArray_Get(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(b1))->v_, i) ^ IOSLongArray_Get(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(b2))->v_, i) ^ IOSLongArray_Get(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(b3))->v_, i);
  }
}

- (void)xorWithWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *)other {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xorWithWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(self, other);
}

- (NSString *)description {
  JavaLangStringBuffer *result = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(v_))->size_; i++) {
    (void) [result appendWithNSString:LibOrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_(LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_(IOSLongArray_Get(v_, i)))];
  }
  return [result description];
}

- (void)clear {
  LibOrgBouncycastleUtilArrays_fillWithLongArray_withLong_(v_, 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromBytesWithByteArray:);
  methods[2].selector = @selector(toBytes);
  methods[3].selector = @selector(copyBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:);
  methods[4].selector = @selector(xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:);
  methods[5].selector = @selector(xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:);
  methods[6].selector = @selector(xorWithWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block:);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "v_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromBytes", "[B", "copyBlock", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;", "xor", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;", "xorWith", "toString", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block = { "Block", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0xa, 9, 1, 9, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block;
}

@end

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *self) {
  NSObject_init(self);
  self->v_ = [IOSLongArray newArrayWithLength:LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_ARGON2_QWORDS_IN_BLOCK];
}

LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block, init)
}

LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *create_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block, init)
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_copyBlockWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *other) {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(other))->v_, 0, self->v_, 0, ((IOSLongArray *) nil_chk(self->v_))->size_);
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xor__WithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_withLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *b1, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *b2) {
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(self->v_))->size_; i++) {
    *IOSLongArray_GetRef(self->v_, i) = IOSLongArray_Get(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(b1))->v_, i) ^ IOSLongArray_Get(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(b2))->v_, i);
  }
}

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_xorWithWithLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *self, LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *other) {
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(self->v_))->size_; i++) {
    *IOSLongArray_GetRef(self->v_, i) = IOSLongArray_Get(self->v_, i) ^ IOSLongArray_Get(((LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block *) nil_chk(other))->v_, i);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Block)

@implementation LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position

- (instancetype)initWithInt:(jint)pass
                    withInt:(jint)lane
                    withInt:(jint)slice
                    withInt:(jint)index {
  LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_initWithInt_withInt_withInt_withInt_(self, pass, lane, slice, index);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pass_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lane_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "slice_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIII", "LLibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position = { "Position", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0xa, 1, 4, 1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position;
}

@end

void LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_initWithInt_withInt_withInt_withInt_(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *self, jint pass, jint lane, jint slice, jint index) {
  NSObject_init(self);
  self->pass_ = pass;
  self->lane_ = lane;
  self->slice_ = slice;
  self->index_ = index;
}

LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *new_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_initWithInt_withInt_withInt_withInt_(jint pass, jint lane, jint slice, jint index) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position, initWithInt_withInt_withInt_withInt_, pass, lane, slice, index)
}

LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position *create_LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position_initWithInt_withInt_withInt_withInt_(jint pass, jint lane, jint slice, jint index) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position, initWithInt_withInt_withInt_withInt_, pass, lane, slice, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsArgon2BytesGenerator_Position)
