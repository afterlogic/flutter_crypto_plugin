//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/Fingerprint.java
//

#include "Arrays.h"
#include "Fingerprint.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SHA512tDigest.h"
#include "SHAKEDigest.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"

@interface LibOrgBouncycastleUtilFingerprint () {
 @public
  IOSByteArray *fingerprint_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleUtilFingerprint, fingerprint_, IOSByteArray *)

inline IOSCharArray *LibOrgBouncycastleUtilFingerprint_get_encodingTable(void);
inline IOSCharArray *LibOrgBouncycastleUtilFingerprint_set_encodingTable(IOSCharArray *value);
static IOSCharArray *LibOrgBouncycastleUtilFingerprint_encodingTable;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleUtilFingerprint, encodingTable, IOSCharArray *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleUtilFingerprint)

@implementation LibOrgBouncycastleUtilFingerprint

- (instancetype)initWithByteArray:(IOSByteArray *)source {
  LibOrgBouncycastleUtilFingerprint_initWithByteArray_(self, source);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)source
                          withInt:(jint)bitLength {
  LibOrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(self, source, bitLength);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)source
                      withBoolean:(jboolean)useSHA512t {
  LibOrgBouncycastleUtilFingerprint_initWithByteArray_withBoolean_(self, source, useSHA512t);
  return self;
}

- (IOSByteArray *)getFingerprint {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(fingerprint_);
}

- (NSString *)description {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(fingerprint_))->size_; i++) {
    if (i > 0) {
      (void) [sb appendWithNSString:@":"];
    }
    (void) [sb appendWithChar:IOSCharArray_Get(nil_chk(LibOrgBouncycastleUtilFingerprint_encodingTable), (JreURShift32(IOSByteArray_Get(fingerprint_, i), 4)) & (jint) 0xf)];
    (void) [sb appendWithChar:IOSCharArray_Get(nil_chk(LibOrgBouncycastleUtilFingerprint_encodingTable), IOSByteArray_Get(fingerprint_, i) & (jint) 0x0f)];
  }
  return [sb description];
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if ([o isKindOfClass:[LibOrgBouncycastleUtilFingerprint class]]) {
    return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(((LibOrgBouncycastleUtilFingerprint *) nil_chk(((LibOrgBouncycastleUtilFingerprint *) o)))->fingerprint_, fingerprint_);
  }
  return false;
}

- (NSUInteger)hash {
  return LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_(fingerprint_);
}

+ (IOSByteArray *)calculateFingerprintWithByteArray:(IOSByteArray *)input {
  return LibOrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_(input);
}

+ (IOSByteArray *)calculateFingerprintWithByteArray:(IOSByteArray *)input
                                            withInt:(jint)bitLength {
  return LibOrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_withInt_(input, bitLength);
}

+ (IOSByteArray *)calculateFingerprintSHA512_160WithByteArray:(IOSByteArray *)input {
  return LibOrgBouncycastleUtilFingerprint_calculateFingerprintSHA512_160WithByteArray_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:withInt:);
  methods[2].selector = @selector(initWithByteArray:withBoolean:);
  methods[3].selector = @selector(getFingerprint);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(calculateFingerprintWithByteArray:);
  methods[8].selector = @selector(calculateFingerprintWithByteArray:withInt:);
  methods[9].selector = @selector(calculateFingerprintSHA512_160WithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encodingTable", "[C", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "fingerprint_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "[BI", "[BZ", "toString", "equals", "LNSObject;", "hashCode", "calculateFingerprint", "calculateFingerprintSHA512_160", &LibOrgBouncycastleUtilFingerprint_encodingTable };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilFingerprint = { "Fingerprint", "lib.org.bouncycastle.util", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilFingerprint;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleUtilFingerprint class]) {
    LibOrgBouncycastleUtilFingerprint_encodingTable = [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleUtilFingerprint)
  }
}

@end

void LibOrgBouncycastleUtilFingerprint_initWithByteArray_(LibOrgBouncycastleUtilFingerprint *self, IOSByteArray *source) {
  LibOrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(self, source, 160);
}

LibOrgBouncycastleUtilFingerprint *new_LibOrgBouncycastleUtilFingerprint_initWithByteArray_(IOSByteArray *source) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilFingerprint, initWithByteArray_, source)
}

LibOrgBouncycastleUtilFingerprint *create_LibOrgBouncycastleUtilFingerprint_initWithByteArray_(IOSByteArray *source) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilFingerprint, initWithByteArray_, source)
}

void LibOrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(LibOrgBouncycastleUtilFingerprint *self, IOSByteArray *source, jint bitLength) {
  NSObject_init(self);
  self->fingerprint_ = LibOrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_withInt_(source, bitLength);
}

LibOrgBouncycastleUtilFingerprint *new_LibOrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(IOSByteArray *source, jint bitLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilFingerprint, initWithByteArray_withInt_, source, bitLength)
}

LibOrgBouncycastleUtilFingerprint *create_LibOrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(IOSByteArray *source, jint bitLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilFingerprint, initWithByteArray_withInt_, source, bitLength)
}

void LibOrgBouncycastleUtilFingerprint_initWithByteArray_withBoolean_(LibOrgBouncycastleUtilFingerprint *self, IOSByteArray *source, jboolean useSHA512t) {
  NSObject_init(self);
  if (useSHA512t) {
    self->fingerprint_ = LibOrgBouncycastleUtilFingerprint_calculateFingerprintSHA512_160WithByteArray_(source);
  }
  else {
    self->fingerprint_ = LibOrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_(source);
  }
}

LibOrgBouncycastleUtilFingerprint *new_LibOrgBouncycastleUtilFingerprint_initWithByteArray_withBoolean_(IOSByteArray *source, jboolean useSHA512t) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilFingerprint, initWithByteArray_withBoolean_, source, useSHA512t)
}

LibOrgBouncycastleUtilFingerprint *create_LibOrgBouncycastleUtilFingerprint_initWithByteArray_withBoolean_(IOSByteArray *source, jboolean useSHA512t) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilFingerprint, initWithByteArray_withBoolean_, source, useSHA512t)
}

IOSByteArray *LibOrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_(IOSByteArray *input) {
  LibOrgBouncycastleUtilFingerprint_initialize();
  return LibOrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_withInt_(input, 160);
}

IOSByteArray *LibOrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_withInt_(IOSByteArray *input, jint bitLength) {
  LibOrgBouncycastleUtilFingerprint_initialize();
  if (bitLength % 8 != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bitLength must be a multiple of 8");
  }
  LibOrgBouncycastleCryptoDigestsSHAKEDigest *digest = new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  [digest updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:bitLength / 8];
  [digest doFinalWithByteArray:rv withInt:0 withInt:bitLength / 8];
  return rv;
}

IOSByteArray *LibOrgBouncycastleUtilFingerprint_calculateFingerprintSHA512_160WithByteArray_(IOSByteArray *input) {
  LibOrgBouncycastleUtilFingerprint_initialize();
  LibOrgBouncycastleCryptoDigestsSHA512tDigest *digest = new_LibOrgBouncycastleCryptoDigestsSHA512tDigest_initWithInt_(160);
  [digest updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  [digest doFinalWithByteArray:rv withInt:0];
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilFingerprint)
