//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/io/MacOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Mac.h"
#include "MacOutputStream.h"
#include "java/io/OutputStream.h"

@implementation LibOrgBouncycastleCryptoIoMacOutputStream

- (instancetype)initWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac {
  LibOrgBouncycastleCryptoIoMacOutputStream_initWithLibOrgBouncycastleCryptoMac_(self, mac);
  return self;
}

- (void)writeWithInt:(jint)b {
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) updateWithByte:(jbyte) b];
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:b withInt:off withInt:len];
}

- (IOSByteArray *)getMac {
  IOSByteArray *res = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) getMacSize]];
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) doFinalWithByteArray:res withInt:0];
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoMac:);
  methods[1].selector = @selector(writeWithInt:);
  methods[2].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(getMac);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mac_", "LLibOrgBouncycastleCryptoMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoMac;", "write", "I", "LJavaIoIOException;", "[BII" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoIoMacOutputStream = { "MacOutputStream", "lib.org.bouncycastle.crypto.io", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoIoMacOutputStream;
}

@end

void LibOrgBouncycastleCryptoIoMacOutputStream_initWithLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoIoMacOutputStream *self, id<LibOrgBouncycastleCryptoMac> mac) {
  JavaIoOutputStream_init(self);
  self->mac_ = mac;
}

LibOrgBouncycastleCryptoIoMacOutputStream *new_LibOrgBouncycastleCryptoIoMacOutputStream_initWithLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoMac> mac) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoIoMacOutputStream, initWithLibOrgBouncycastleCryptoMac_, mac)
}

LibOrgBouncycastleCryptoIoMacOutputStream *create_LibOrgBouncycastleCryptoIoMacOutputStream_initWithLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoMac> mac) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoIoMacOutputStream, initWithLibOrgBouncycastleCryptoMac_, mac)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoIoMacOutputStream)
