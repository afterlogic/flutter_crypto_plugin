//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/PSKTlsClient.java
//

#include "AbstractTlsClient.h"
#include "AlertDescription.h"
#include "CipherSuite.h"
#include "DefaultTlsCipherFactory.h"
#include "DefaultTlsDHVerifier.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyExchangeAlgorithm.h"
#include "PSKTlsClient.h"
#include "TlsAuthentication.h"
#include "TlsCipherFactory.h"
#include "TlsDHVerifier.h"
#include "TlsFatalAlert.h"
#include "TlsKeyExchange.h"
#include "TlsPSKIdentity.h"
#include "TlsPSKKeyExchange.h"
#include "TlsUtils.h"
#include "java/util/Vector.h"

@implementation LibOrgBouncycastleCryptoTlsPSKTlsClient

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)pskIdentity {
  LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(self, pskIdentity);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                      withLibOrgBouncycastleCryptoTlsTlsPSKIdentity:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)pskIdentity {
  LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(self, cipherFactory, pskIdentity);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                       withLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier
                      withLibOrgBouncycastleCryptoTlsTlsPSKIdentity:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)pskIdentity {
  LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(self, cipherFactory, dhVerifier, pskIdentity);
  return self;
}

- (IOSIntArray *)getCipherSuites {
  return [IOSIntArray newArrayWithInts:(jint[]){ LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA } count:2];
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange {
  jint keyExchangeAlgorithm = LibOrgBouncycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(selectedCipherSuite_);
  switch (keyExchangeAlgorithm) {
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_PSK:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK:
    return [self createPSKKeyExchangeWithInt:keyExchangeAlgorithm];
    default:
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<LibOrgBouncycastleCryptoTlsTlsAuthentication>)getAuthentication {
  @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createPSKKeyExchangeWithInt:(jint)keyExchange {
  return new_LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(keyExchange, supportedSignatureAlgorithms_, pskIdentity_, nil, dhVerifier_, nil, namedCurves_, clientECPointFormats_, serverECPointFormats_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsAuthentication;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x4, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:withLibOrgBouncycastleCryptoTlsTlsPSKIdentity:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:withLibOrgBouncycastleCryptoTlsTlsDHVerifier:withLibOrgBouncycastleCryptoTlsTlsPSKIdentity:);
  methods[3].selector = @selector(getCipherSuites);
  methods[4].selector = @selector(getKeyExchange);
  methods[5].selector = @selector(getAuthentication);
  methods[6].selector = @selector(createPSKKeyExchangeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dhVerifier_", "LLibOrgBouncycastleCryptoTlsTlsDHVerifier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pskIdentity_", "LLibOrgBouncycastleCryptoTlsTlsPSKIdentity;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoTlsTlsPSKIdentity;", "LLibOrgBouncycastleCryptoTlsTlsCipherFactory;LLibOrgBouncycastleCryptoTlsTlsPSKIdentity;", "LLibOrgBouncycastleCryptoTlsTlsCipherFactory;LLibOrgBouncycastleCryptoTlsTlsDHVerifier;LLibOrgBouncycastleCryptoTlsTlsPSKIdentity;", "LJavaIoIOException;", "createPSKKeyExchange", "I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsPSKTlsClient = { "PSKTlsClient", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsPSKTlsClient;
}

@end

void LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(LibOrgBouncycastleCryptoTlsPSKTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(self, new_LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory_init(), pskIdentity);
}

LibOrgBouncycastleCryptoTlsPSKTlsClient *new_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsPSKTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_, pskIdentity)
}

LibOrgBouncycastleCryptoTlsPSKTlsClient *create_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsPSKTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_, pskIdentity)
}

void LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(LibOrgBouncycastleCryptoTlsPSKTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(self, cipherFactory, new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init(), pskIdentity);
}

LibOrgBouncycastleCryptoTlsPSKTlsClient *new_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsPSKTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_, cipherFactory, pskIdentity)
}

LibOrgBouncycastleCryptoTlsPSKTlsClient *create_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsPSKTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_, cipherFactory, pskIdentity)
}

void LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(LibOrgBouncycastleCryptoTlsPSKTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  LibOrgBouncycastleCryptoTlsAbstractTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  self->dhVerifier_ = dhVerifier;
  self->pskIdentity_ = pskIdentity;
}

LibOrgBouncycastleCryptoTlsPSKTlsClient *new_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsPSKTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_, cipherFactory, dhVerifier, pskIdentity)
}

LibOrgBouncycastleCryptoTlsPSKTlsClient *create_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsPSKTlsClient, initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_, cipherFactory, dhVerifier, pskIdentity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsPSKTlsClient)
