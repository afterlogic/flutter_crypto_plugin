//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcPGPDataEncryptorBuilder.java
//

#include "BcImplProvider.h"
#include "BcPGPDataEncryptorBuilder.h"
#include "BcUtil.h"
#include "BlockCipher.h"
#include "BufferedBlockCipher.h"
#include "CryptoIoCipherOutputStream.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OpenPgpBcSHA1PGPDigestCalculator.h"
#include "PGPDataEncryptor.h"
#include "PGPDigestCalculator.h"
#include "PGPException.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder () {
 @public
  JavaSecuritySecureRandom *random_;
  jboolean withIntegrityPacket_;
  jint encAlgorithm_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder, random_, JavaSecuritySecureRandom *)

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor : NSObject < LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptor > {
 @public
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *this$0_;
  LibOrgBouncycastleCryptoBufferedBlockCipher *c_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder:(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *)outer$
                                                                       withByteArray:(IOSByteArray *)keyBytes;

- (JavaIoOutputStream *)getOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)getIntegrityCalculator;

- (jint)getBlockSize;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor, c_, LibOrgBouncycastleCryptoBufferedBlockCipher *)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor *self, LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor)

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder

- (instancetype)initWithInt:(jint)encAlgorithm {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_initWithInt_(self, encAlgorithm);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *)setWithIntegrityPacketWithBoolean:(jboolean)withIntegrityPacket {
  self->withIntegrityPacket_ = withIntegrityPacket;
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  return self;
}

- (jint)getAlgorithm {
  return encAlgorithm_;
}

- (JavaSecuritySecureRandom *)getSecureRandom {
  if (random_ == nil) {
    random_ = new_JavaSecuritySecureRandom_init();
  }
  return random_;
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptor>)buildWithByteArray:(IOSByteArray *)keyBytes {
  return new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_(self, keyBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptor;", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(setWithIntegrityPacketWithBoolean:);
  methods[2].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[3].selector = @selector(getAlgorithm);
  methods[4].selector = @selector(getSecureRandom);
  methods[5].selector = @selector(buildWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "withIntegrityPacket_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "setWithIntegrityPacket", "Z", "setSecureRandom", "LJavaSecuritySecureRandom;", "build", "[B", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder = { "BcPGPDataEncryptorBuilder", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, 8, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_initWithInt_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *self, jint encAlgorithm) {
  NSObject_init(self);
  self->encAlgorithm_ = encAlgorithm;
  if (encAlgorithm == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"null cipher specified");
  }
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_initWithInt_(jint encAlgorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder, initWithInt_, encAlgorithm)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_initWithInt_(jint encAlgorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder, initWithInt_, encAlgorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder)

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder:(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *)outer$
                                                                       withByteArray:(IOSByteArray *)keyBytes {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_(self, outer$, keyBytes);
  return self;
}

- (JavaIoOutputStream *)getOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(outArg, c_);
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)getIntegrityCalculator {
  if (this$0_->withIntegrityPacket_) {
    return new_LibOrgBouncycastleOpenpgpOperatorBcOpenPgpBcSHA1PGPDigestCalculator_init();
  }
  return nil;
}

- (jint)getBlockSize {
  return [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(c_)) getBlockSize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder:withByteArray:);
  methods[1].selector = @selector(getOutputStreamWithJavaIoOutputStream:);
  methods[2].selector = @selector(getIntegrityCalculator);
  methods[3].selector = @selector(getBlockSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "c_", "LLibOrgBouncycastleCryptoBufferedBlockCipher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LLibOrgBouncycastleOpenpgpPGPException;", "getOutputStream", "LJavaIoOutputStream;", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor = { "MyPGPDataEncryptor", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x2, 4, 2, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor *self, LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes) {
  self->this$0_ = outer$;
  NSObject_init(self);
  id<LibOrgBouncycastleCryptoBlockCipher> engine = LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createBlockCipherWithInt_(outer$->encAlgorithm_);
  @try {
    self->c_ = LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createStreamCipherWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withBoolean_withByteArray_(true, engine, outer$->withIntegrityPacket_, keyBytes);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"invalid parameters: ", [e getMessage]), e);
  }
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor, initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_, outer$, keyBytes)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor, initWithLibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_withByteArray_, outer$, keyBytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcPGPDataEncryptorBuilder_MyPGPDataEncryptor)
