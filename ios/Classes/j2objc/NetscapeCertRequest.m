//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/netscape/NetscapeCertRequest.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Encoding.h"
#include "ASN1InputStream.h"
#include "ASN1Object.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "DERBitString.h"
#include "DERIA5String.h"
#include "DERSequence.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NetscapeCertRequest.h"
#include "SubjectPublicKeyInfo.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/KeyFactory.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/X509EncodedKeySpec.h"

@interface LibOrgBouncycastleJceNetscapeNetscapeCertRequest ()

+ (LibOrgBouncycastleAsn1ASN1Sequence *)getReqWithByteArray:(IOSByteArray *)r;

- (LibOrgBouncycastleAsn1ASN1Primitive *)getKeySpec;

@end

__attribute__((unused)) static LibOrgBouncycastleAsn1ASN1Sequence *LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getReqWithByteArray_(IOSByteArray *r);

__attribute__((unused)) static LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getKeySpec(LibOrgBouncycastleJceNetscapeNetscapeCertRequest *self);

@implementation LibOrgBouncycastleJceNetscapeNetscapeCertRequest

+ (LibOrgBouncycastleAsn1ASN1Sequence *)getReqWithByteArray:(IOSByteArray *)r {
  return LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getReqWithByteArray_(r);
}

- (instancetype)initWithByteArray:(IOSByteArray *)req {
  LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithByteArray_(self, req);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)spkac {
  LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, spkac);
  return self;
}

- (instancetype)initWithNSString:(NSString *)challenge
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)signing_alg
       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pub_key {
  LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPublicKey_(self, challenge, signing_alg, pub_key);
  return self;
}

- (NSString *)getChallenge {
  return challenge_;
}

- (void)setChallengeWithNSString:(NSString *)value {
  challenge_ = value;
}

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getSigningAlgorithm {
  return sigAlg_;
}

- (void)setSigningAlgorithmWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)value {
  sigAlg_ = value;
}

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getKeyAlgorithm {
  return keyAlg_;
}

- (void)setKeyAlgorithmWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)value {
  keyAlg_ = value;
}

- (id<JavaSecurityPublicKey>)getPublicKey {
  return pubkey_;
}

- (void)setPublicKeyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)value {
  pubkey_ = value;
}

- (jboolean)verifyWithNSString:(NSString *)challenge {
  if (![((NSString *) nil_chk(challenge)) isEqual:self->challenge_]) {
    return false;
  }
  JavaSecuritySignature *sig = JavaSecuritySignature_getInstanceWithNSString_withNSString_([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(sigAlg_)) getAlgorithm])) getId], @"BC");
  [((JavaSecuritySignature *) nil_chk(sig)) initVerifyWithJavaSecurityPublicKey:pubkey_];
  [sig updateWithByteArray:[((LibOrgBouncycastleAsn1DERBitString *) nil_chk(content_)) getBytes]];
  return [sig verifyWithByteArray:sigBits_];
}

- (void)signWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)priv_key {
  [self signWithJavaSecurityPrivateKey:priv_key withJavaSecuritySecureRandom:nil];
}

- (void)signWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)priv_key
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand {
  JavaSecuritySignature *sig = JavaSecuritySignature_getInstanceWithNSString_withNSString_([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(sigAlg_)) getAlgorithm])) getId], @"BC");
  if (rand != nil) {
    [((JavaSecuritySignature *) nil_chk(sig)) initSignWithJavaSecurityPrivateKey:priv_key withJavaSecuritySecureRandom:rand];
  }
  else {
    [((JavaSecuritySignature *) nil_chk(sig)) initSignWithJavaSecurityPrivateKey:priv_key];
  }
  LibOrgBouncycastleAsn1ASN1EncodableVector *pkac = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [pkac addWithLibOrgBouncycastleAsn1ASN1Encodable:LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getKeySpec(self)];
  [pkac addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERIA5String_initWithNSString_(challenge_)];
  @try {
    [sig updateWithByteArray:[new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(pkac) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER]];
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_JavaSecuritySignatureException_initWithNSString_([ioe getMessage]);
  }
  sigBits_ = [sig sign];
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)getKeySpec {
  return LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getKeySpec(self);
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *spkac = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  LibOrgBouncycastleAsn1ASN1EncodableVector *pkac = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  @try {
    [pkac addWithLibOrgBouncycastleAsn1ASN1Encodable:LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getKeySpec(self)];
  }
  @catch (JavaLangException *e) {
  }
  [pkac addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERIA5String_initWithNSString_(challenge_)];
  [spkac addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(pkac)];
  [spkac addWithLibOrgBouncycastleAsn1ASN1Encodable:sigAlg_];
  [spkac addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERBitString_initWithByteArray_(sigBits_)];
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(spkac);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1ASN1Sequence;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 7, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 18, 17, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getReqWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(initWithNSString:withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withJavaSecurityPublicKey:);
  methods[4].selector = @selector(getChallenge);
  methods[5].selector = @selector(setChallengeWithNSString:);
  methods[6].selector = @selector(getSigningAlgorithm);
  methods[7].selector = @selector(setSigningAlgorithmWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  methods[8].selector = @selector(getKeyAlgorithm);
  methods[9].selector = @selector(setKeyAlgorithmWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  methods[10].selector = @selector(getPublicKey);
  methods[11].selector = @selector(setPublicKeyWithJavaSecurityPublicKey:);
  methods[12].selector = @selector(verifyWithNSString:);
  methods[13].selector = @selector(signWithJavaSecurityPrivateKey:);
  methods[14].selector = @selector(signWithJavaSecurityPrivateKey:withJavaSecuritySecureRandom:);
  methods[15].selector = @selector(getKeySpec);
  methods[16].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sigAlg_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keyAlg_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sigBits_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "challenge_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "content_", "LLibOrgBouncycastleAsn1DERBitString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pubkey_", "LJavaSecurityPublicKey;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getReq", "[B", "LJavaIoIOException;", "LLibOrgBouncycastleAsn1ASN1Sequence;", "LNSString;LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;LJavaSecurityPublicKey;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySpecInvalidKeySpecException;LJavaSecurityNoSuchProviderException;", "setChallenge", "LNSString;", "setSigningAlgorithm", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", "setKeyAlgorithm", "setPublicKey", "LJavaSecurityPublicKey;", "verify", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;LJavaSecurityNoSuchProviderException;", "sign", "LJavaSecurityPrivateKey;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;LJavaSecurityNoSuchProviderException;LJavaSecuritySpecInvalidKeySpecException;", "LJavaSecurityPrivateKey;LJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceNetscapeNetscapeCertRequest = { "NetscapeCertRequest", "lib.org.bouncycastle.jce.netscape", ptrTable, methods, fields, 7, 0x1, 17, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceNetscapeNetscapeCertRequest;
}

@end

LibOrgBouncycastleAsn1ASN1Sequence *LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getReqWithByteArray_(IOSByteArray *r) {
  LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initialize();
  LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(r));
  return LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([aIn readObject]);
}

void LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithByteArray_(LibOrgBouncycastleJceNetscapeNetscapeCertRequest *self, IOSByteArray *req) {
  LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getReqWithByteArray_(req));
}

LibOrgBouncycastleJceNetscapeNetscapeCertRequest *new_LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithByteArray_(IOSByteArray *req) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceNetscapeNetscapeCertRequest, initWithByteArray_, req)
}

LibOrgBouncycastleJceNetscapeNetscapeCertRequest *create_LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithByteArray_(IOSByteArray *req) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceNetscapeNetscapeCertRequest, initWithByteArray_, req)
}

void LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleJceNetscapeNetscapeCertRequest *self, LibOrgBouncycastleAsn1ASN1Sequence *spkac) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  @try {
    if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(spkac)) size] != 3) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"invalid SPKAC (size):", [spkac size]));
    }
    self->sigAlg_ = LibOrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([spkac getObjectAtWithInt:1]);
    self->sigBits_ = [((LibOrgBouncycastleAsn1DERBitString *) nil_chk(((LibOrgBouncycastleAsn1DERBitString *) cast_chk([spkac getObjectAtWithInt:2], [LibOrgBouncycastleAsn1DERBitString class])))) getOctets];
    LibOrgBouncycastleAsn1ASN1Sequence *pkac = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([spkac getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1Sequence class]);
    if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(pkac)) size] != 2) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"invalid PKAC (len): ", [pkac size]));
    }
    self->challenge_ = [((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(((LibOrgBouncycastleAsn1DERIA5String *) cast_chk([pkac getObjectAtWithInt:1], [LibOrgBouncycastleAsn1DERIA5String class])))) getString];
    self->content_ = new_LibOrgBouncycastleAsn1DERBitString_initWithLibOrgBouncycastleAsn1ASN1Encodable_(pkac);
    LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *pubkeyinfo = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([pkac getObjectAtWithInt:0]);
    JavaSecuritySpecX509EncodedKeySpec *xspec = new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_([new_LibOrgBouncycastleAsn1DERBitString_initWithLibOrgBouncycastleAsn1ASN1Encodable_(pubkeyinfo) getBytes]);
    self->keyAlg_ = [((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(pubkeyinfo)) getAlgorithm];
    self->pubkey_ = [((JavaSecurityKeyFactory *) nil_chk(JavaSecurityKeyFactory_getInstanceWithNSString_withNSString_([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(self->keyAlg_)) getAlgorithm])) getId], @"BC"))) generatePublicWithJavaSecuritySpecKeySpec:xspec];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_([e description]);
  }
}

LibOrgBouncycastleJceNetscapeNetscapeCertRequest *new_LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *spkac) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceNetscapeNetscapeCertRequest, initWithLibOrgBouncycastleAsn1ASN1Sequence_, spkac)
}

LibOrgBouncycastleJceNetscapeNetscapeCertRequest *create_LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *spkac) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceNetscapeNetscapeCertRequest, initWithLibOrgBouncycastleAsn1ASN1Sequence_, spkac)
}

void LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPublicKey_(LibOrgBouncycastleJceNetscapeNetscapeCertRequest *self, NSString *challenge, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signing_alg, id<JavaSecurityPublicKey> pub_key) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->challenge_ = challenge;
  self->sigAlg_ = signing_alg;
  self->pubkey_ = pub_key;
  LibOrgBouncycastleAsn1ASN1EncodableVector *content_der = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [content_der addWithLibOrgBouncycastleAsn1ASN1Encodable:LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getKeySpec(self)];
  [content_der addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERIA5String_initWithNSString_(challenge)];
  @try {
    self->content_ = new_LibOrgBouncycastleAsn1DERBitString_initWithLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(content_der));
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$$", @"exception encoding key: ", [e description]));
  }
}

LibOrgBouncycastleJceNetscapeNetscapeCertRequest *new_LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPublicKey_(NSString *challenge, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signing_alg, id<JavaSecurityPublicKey> pub_key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceNetscapeNetscapeCertRequest, initWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPublicKey_, challenge, signing_alg, pub_key)
}

LibOrgBouncycastleJceNetscapeNetscapeCertRequest *create_LibOrgBouncycastleJceNetscapeNetscapeCertRequest_initWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPublicKey_(NSString *challenge, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signing_alg, id<JavaSecurityPublicKey> pub_key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceNetscapeNetscapeCertRequest, initWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPublicKey_, challenge, signing_alg, pub_key)
}

LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleJceNetscapeNetscapeCertRequest_getKeySpec(LibOrgBouncycastleJceNetscapeNetscapeCertRequest *self) {
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  LibOrgBouncycastleAsn1ASN1Primitive *obj = nil;
  @try {
    [baos writeWithByteArray:[((id<JavaSecurityPublicKey>) nil_chk(self->pubkey_)) getEncoded]];
    [baos close];
    LibOrgBouncycastleAsn1ASN1InputStream *derin = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_([baos toByteArray]));
    obj = [derin readObject];
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_([ioe getMessage]);
  }
  return obj;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceNetscapeNetscapeCertRequest)
