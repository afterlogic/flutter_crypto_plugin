//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/Seed.java
//

#include "ChaChaEngine.h"
#include "HashFunctions.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "Pack.h"
#include "ParametersWithIV.h"
#include "SPHINCS256Config.h"
#include "Seed.h"
#include "StreamCipher.h"
#include "Tree.h"

@implementation LibOrgBouncycastlePqcCryptoSphincsSeed

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoSphincsSeed_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)get_seedWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                      withByteArray:(IOSByteArray *)seed
                                                            withInt:(jint)seedOff
                                                      withByteArray:(IOSByteArray *)sk
                withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *)a {
  LibOrgBouncycastlePqcCryptoSphincsSeed_get_seedWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, seedOff, sk, a);
}

+ (void)prgWithByteArray:(IOSByteArray *)r
                 withInt:(jint)rOff
                withLong:(jlong)rlen
           withByteArray:(IOSByteArray *)key
                 withInt:(jint)keyOff {
  LibOrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(r, rOff, rlen, key, keyOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get_seedWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:);
  methods[2].selector = @selector(prgWithByteArray:withInt:withLong:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get_seed", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BLLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr;", "prg", "[BIJ[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoSphincsSeed = { "Seed", "lib.org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoSphincsSeed;
}

@end

void LibOrgBouncycastlePqcCryptoSphincsSeed_init(LibOrgBouncycastlePqcCryptoSphincsSeed *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoSphincsSeed *new_LibOrgBouncycastlePqcCryptoSphincsSeed_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoSphincsSeed, init)
}

LibOrgBouncycastlePqcCryptoSphincsSeed *create_LibOrgBouncycastlePqcCryptoSphincsSeed_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoSphincsSeed, init)
}

void LibOrgBouncycastlePqcCryptoSphincsSeed_get_seedWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *seed, jint seedOff, IOSByteArray *sk, LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *a) {
  LibOrgBouncycastlePqcCryptoSphincsSeed_initialize();
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES + 8];
  jlong t;
  jint i;
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES; i++) {
    *IOSByteArray_GetRef(buffer, i) = IOSByteArray_Get(nil_chk(sk), i);
  }
  t = ((LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *) nil_chk(a))->level_;
  t |= JreLShift64(a->subtree_, 4);
  t |= JreLShift64(a->subleaf_, 59);
  LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(t, buffer, LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES);
  [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) varlen_hashWithByteArray:seed withInt:seedOff withByteArray:buffer withInt:buffer->size_];
}

void LibOrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(IOSByteArray *r, jint rOff, jlong rlen, IOSByteArray *key, jint keyOff) {
  LibOrgBouncycastlePqcCryptoSphincsSeed_initialize();
  IOSByteArray *nonce = [IOSByteArray newArrayWithLength:8];
  id<LibOrgBouncycastleCryptoStreamCipher> cipher = new_LibOrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(12);
  [cipher init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key, keyOff, 32), nonce)];
  [cipher processBytesWithByteArray:r withInt:rOff withInt:(jint) rlen withByteArray:r withInt:rOff];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoSphincsSeed)
