//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/ECKeyParameters.java
//

#include "AsymmetricKeyParameter.h"
#include "ECDomainParameters.h"
#include "ECKeyParameters.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleCryptoParamsECKeyParameters

- (instancetype)initWithBoolean:(jboolean)isPrivate
withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)params {
  LibOrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_(self, isPrivate, params);
  return self;
}

- (LibOrgBouncycastleCryptoParamsECDomainParameters *)getParameters {
  return params_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECDomainParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withLibOrgBouncycastleCryptoParamsECDomainParameters:);
  methods[1].selector = @selector(getParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLLibOrgBouncycastleCryptoParamsECDomainParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsECKeyParameters = { "ECKeyParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsECKeyParameters;
}

@end

void LibOrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParamsECKeyParameters *self, jboolean isPrivate, LibOrgBouncycastleCryptoParamsECDomainParameters *params) {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, isPrivate);
  self->params_ = params;
}

LibOrgBouncycastleCryptoParamsECKeyParameters *new_LibOrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_(jboolean isPrivate, LibOrgBouncycastleCryptoParamsECDomainParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsECKeyParameters, initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_, isPrivate, params)
}

LibOrgBouncycastleCryptoParamsECKeyParameters *create_LibOrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_(jboolean isPrivate, LibOrgBouncycastleCryptoParamsECDomainParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsECKeyParameters, initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_, isPrivate, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsECKeyParameters)
