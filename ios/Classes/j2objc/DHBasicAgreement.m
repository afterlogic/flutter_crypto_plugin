//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/DHBasicAgreement.java
//

#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "DHBasicAgreement.h"
#include "DHParameters.h"
#include "DHPrivateKeyParameters.h"
#include "DHPublicKeyParameters.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoAgreementDHBasicAgreement () {
 @public
  LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *key_;
  LibOrgBouncycastleCryptoParamsDHParameters *dhParams_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementDHBasicAgreement, key_, LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementDHBasicAgreement, dhParams_, LibOrgBouncycastleCryptoParamsDHParameters *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementDHBasicAgreement_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementDHBasicAgreement_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoAgreementDHBasicAgreement, ONE, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoAgreementDHBasicAgreement)

@implementation LibOrgBouncycastleCryptoAgreementDHBasicAgreement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoAgreementDHBasicAgreement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *kParam;
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
    kParam = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  else {
    kParam = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk(param, [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  if (!([kParam isKindOfClass:[LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"DHEngine expects DHPrivateKeyParameters");
  }
  self->key_ = (LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) cast_chk(kParam, [LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters class]);
  self->dhParams_ = [((LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) nil_chk(key_)) getParameters];
}

- (jint)getFieldSize {
  return ([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) nil_chk(key_)) getParameters])) getP])) bitLength] + 7) / 8;
}

- (JavaMathBigInteger *)calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)pubKey {
  LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *pub = (LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *) cast_chk(pubKey, [LibOrgBouncycastleCryptoParamsDHPublicKeyParameters class]);
  if (![((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *) nil_chk(pub)) getParameters])) isEqual:dhParams_]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Diffie-Hellman public key has wrong parameters.");
  }
  JavaMathBigInteger *p = [((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(dhParams_)) getP];
  JavaMathBigInteger *peerY = [pub getY];
  if (peerY == nil || [peerY compareToWithId:LibOrgBouncycastleCryptoAgreementDHBasicAgreement_ONE] <= 0 || [peerY compareToWithId:[((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoAgreementDHBasicAgreement_ONE]] >= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Diffie-Hellman public key is weak");
  }
  JavaMathBigInteger *result = [peerY modPowWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) nil_chk(key_)) getX] withJavaMathBigInteger:p];
  if ([((JavaMathBigInteger *) nil_chk(result)) isEqual:LibOrgBouncycastleCryptoAgreementDHBasicAgreement_ONE]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Shared key can't be 1");
  }
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dhParams_", "LLibOrgBouncycastleCryptoParamsDHParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoCipherParameters;", "calculateAgreement", &LibOrgBouncycastleCryptoAgreementDHBasicAgreement_ONE };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementDHBasicAgreement = { "DHBasicAgreement", "lib.org.bouncycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementDHBasicAgreement;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoAgreementDHBasicAgreement class]) {
    LibOrgBouncycastleCryptoAgreementDHBasicAgreement_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoAgreementDHBasicAgreement)
  }
}

@end

void LibOrgBouncycastleCryptoAgreementDHBasicAgreement_init(LibOrgBouncycastleCryptoAgreementDHBasicAgreement *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoAgreementDHBasicAgreement *new_LibOrgBouncycastleCryptoAgreementDHBasicAgreement_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementDHBasicAgreement, init)
}

LibOrgBouncycastleCryptoAgreementDHBasicAgreement *create_LibOrgBouncycastleCryptoAgreementDHBasicAgreement_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementDHBasicAgreement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementDHBasicAgreement)
