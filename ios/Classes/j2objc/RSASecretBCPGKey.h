//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/RSASecretBCPGKey.java
//

#ifndef RSASecretBCPGKey_H
#define RSASecretBCPGKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BCPGKey.h"
#include "BCPGObject.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleBcpgBCPGInputStream;
@class LibOrgBouncycastleBcpgBCPGOutputStream;
@class LibOrgBouncycastleBcpgMPInteger;

@interface LibOrgBouncycastleBcpgRSASecretBCPGKey : LibOrgBouncycastleBcpgBCPGObject < LibOrgBouncycastleBcpgBCPGKey > {
 @public
  LibOrgBouncycastleBcpgMPInteger *d_;
  LibOrgBouncycastleBcpgMPInteger *p_;
  LibOrgBouncycastleBcpgMPInteger *q_;
  LibOrgBouncycastleBcpgMPInteger *u_;
  JavaMathBigInteger *expP_;
  JavaMathBigInteger *expQ_;
  JavaMathBigInteger *crt_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleBcpgBCPGInputStream:(LibOrgBouncycastleBcpgBCPGInputStream *)inArg;

- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)d
                              withJavaMathBigInteger:(JavaMathBigInteger *)p
                              withJavaMathBigInteger:(JavaMathBigInteger *)q;

- (void)encodeWithLibOrgBouncycastleBcpgBCPGOutputStream:(LibOrgBouncycastleBcpgBCPGOutputStream *)outArg;

- (JavaMathBigInteger *)getCrtCoefficient;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (JavaMathBigInteger *)getModulus;

- (JavaMathBigInteger *)getPrimeExponentP;

- (JavaMathBigInteger *)getPrimeExponentQ;

- (JavaMathBigInteger *)getPrimeP;

- (JavaMathBigInteger *)getPrimeQ;

- (JavaMathBigInteger *)getPrivateExponent;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleBcpgRSASecretBCPGKey)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleBcpgRSASecretBCPGKey, d_, LibOrgBouncycastleBcpgMPInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleBcpgRSASecretBCPGKey, p_, LibOrgBouncycastleBcpgMPInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleBcpgRSASecretBCPGKey, q_, LibOrgBouncycastleBcpgMPInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleBcpgRSASecretBCPGKey, u_, LibOrgBouncycastleBcpgMPInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleBcpgRSASecretBCPGKey, expP_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleBcpgRSASecretBCPGKey, expQ_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleBcpgRSASecretBCPGKey, crt_, JavaMathBigInteger *)

FOUNDATION_EXPORT void LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgRSASecretBCPGKey *self, LibOrgBouncycastleBcpgBCPGInputStream *inArg);

FOUNDATION_EXPORT LibOrgBouncycastleBcpgRSASecretBCPGKey *new_LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleBcpgRSASecretBCPGKey *create_LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *inArg);

FOUNDATION_EXPORT void LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleBcpgRSASecretBCPGKey *self, JavaMathBigInteger *d, JavaMathBigInteger *p, JavaMathBigInteger *q);

FOUNDATION_EXPORT LibOrgBouncycastleBcpgRSASecretBCPGKey *new_LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *d, JavaMathBigInteger *p, JavaMathBigInteger *q) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleBcpgRSASecretBCPGKey *create_LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *d, JavaMathBigInteger *p, JavaMathBigInteger *q);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleBcpgRSASecretBCPGKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // RSASecretBCPGKey_H
