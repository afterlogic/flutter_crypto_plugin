//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/newhope/NHKeyPairGeneratorSpi.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BCNHPrivateKey.h"
#include "BCNHPublicKey.h"
#include "CryptoServicesRegistrar.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "NHKeyPairGenerator.h"
#include "NHKeyPairGeneratorSpi.h"
#include "NHPrivateKeyParameters.h"
#include "NHPublicKeyParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@implementation LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (strength != 1024) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"strength must be 1024 bits");
  }
  [((LibOrgBouncycastlePqcCryptoNewhopeNHKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(random, 1024)];
  initialised_ = true;
}

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not recognised");
}

- (JavaSecurityKeyPair *)generateKeyPair {
  if (!initialised_) {
    [((LibOrgBouncycastlePqcCryptoNewhopeNHKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(random_, 1024)];
    initialised_ = true;
  }
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((LibOrgBouncycastlePqcCryptoNewhopeNHKeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *pub = (LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters class]);
  LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters *priv = (LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters *) cast_chk([pair getPrivate], [LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters class]);
  return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey_initWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_(pub), new_LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPrivateKey_initWithLibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters_(priv));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "engine_", "LLibOrgBouncycastlePqcCryptoNewhopeNHKeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi = { "NHKeyPairGeneratorSpi", "lib.org.bouncycastle.pqc.jcajce.provider.newhope", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi;
}

@end

void LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi_init(LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self, @"NH");
  self->engine_ = new_LibOrgBouncycastlePqcCryptoNewhopeNHKeyPairGenerator_init();
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
}

LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi *new_LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi, init)
}

LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi *create_LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyPairGeneratorSpi)
