//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/DHKeyGeneratorHelper.java
//

#include "BigIntegers.h"
#include "DHKeyGeneratorHelper.h"
#include "DHParameters.h"
#include "J2ObjC_source.h"
#include "WNafUtil.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper ()

- (instancetype)init;

@end

inline JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper, ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_get_TWO(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper, TWO, JavaMathBigInteger *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_init(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper *new_LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper *create_LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_init(void);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper)

LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper *LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_INSTANCE;

@implementation LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper

+ (LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper *)INSTANCE {
  return LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaMathBigInteger *)calculatePrivateWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParams
                                                          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  jint limit = [((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(dhParams)) getL];
  if (limit != 0) {
    jint minWeight = JreURShift32(limit, 2);
    for (; ; ) {
      JavaMathBigInteger *x = [((JavaMathBigInteger *) nil_chk(LibOrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(limit, random))) setBitWithInt:limit - 1];
      if (LibOrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(x) >= minWeight) {
        return x;
      }
    }
  }
  JavaMathBigInteger *min = LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_TWO;
  jint m = [dhParams getM];
  if (m != 0) {
    min = [((JavaMathBigInteger *) nil_chk(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_ONE)) shiftLeftWithInt:m - 1];
  }
  JavaMathBigInteger *q = [dhParams getQ];
  if (q == nil) {
    q = [dhParams getP];
  }
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_TWO];
  jint minWeight = JreURShift32([((JavaMathBigInteger *) nil_chk(max)) bitLength], 2);
  for (; ; ) {
    JavaMathBigInteger *x = LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(min, max, random);
    if (LibOrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(x) >= minWeight) {
      return x;
    }
  }
}

- (JavaMathBigInteger *)calculatePublicWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParams
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(dhParams)) getG])) modPowWithJavaMathBigInteger:x withJavaMathBigInteger:[dhParams getP]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(calculatePrivateWithLibOrgBouncycastleCryptoParamsDHParameters:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(calculatePublicWithLibOrgBouncycastleCryptoParamsDHParameters:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LLibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "calculatePrivate", "LLibOrgBouncycastleCryptoParamsDHParameters;LJavaSecuritySecureRandom;", "calculatePublic", "LLibOrgBouncycastleCryptoParamsDHParameters;LJavaMathBigInteger;", &LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_INSTANCE, &LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_ONE, &LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_TWO };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper = { "DHKeyGeneratorHelper", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x0, 3, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper class]) {
    LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_INSTANCE = new_LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_init();
    LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_TWO = JavaMathBigInteger_valueOfWithLong_(2);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper)
  }
}

@end

void LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_init(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper *new_LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper, init)
}

LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper *create_LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsDHKeyGeneratorHelper)
