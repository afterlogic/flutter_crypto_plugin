//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/NamedCurve.java
//

#ifndef NamedCurve_H
#define NamedCurve_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsNamedCurve : NSObject
@property (readonly, class) jint sect163k1 NS_SWIFT_NAME(sect163k1);
@property (readonly, class) jint sect163r1 NS_SWIFT_NAME(sect163r1);
@property (readonly, class) jint sect163r2 NS_SWIFT_NAME(sect163r2);
@property (readonly, class) jint sect193r1 NS_SWIFT_NAME(sect193r1);
@property (readonly, class) jint sect193r2 NS_SWIFT_NAME(sect193r2);
@property (readonly, class) jint sect233k1 NS_SWIFT_NAME(sect233k1);
@property (readonly, class) jint sect233r1 NS_SWIFT_NAME(sect233r1);
@property (readonly, class) jint sect239k1 NS_SWIFT_NAME(sect239k1);
@property (readonly, class) jint sect283k1 NS_SWIFT_NAME(sect283k1);
@property (readonly, class) jint sect283r1 NS_SWIFT_NAME(sect283r1);
@property (readonly, class) jint sect409k1 NS_SWIFT_NAME(sect409k1);
@property (readonly, class) jint sect409r1 NS_SWIFT_NAME(sect409r1);
@property (readonly, class) jint sect571k1 NS_SWIFT_NAME(sect571k1);
@property (readonly, class) jint sect571r1 NS_SWIFT_NAME(sect571r1);
@property (readonly, class) jint secp160k1 NS_SWIFT_NAME(secp160k1);
@property (readonly, class) jint secp160r1 NS_SWIFT_NAME(secp160r1);
@property (readonly, class) jint secp160r2 NS_SWIFT_NAME(secp160r2);
@property (readonly, class) jint secp192k1 NS_SWIFT_NAME(secp192k1);
@property (readonly, class) jint secp192r1 NS_SWIFT_NAME(secp192r1);
@property (readonly, class) jint secp224k1 NS_SWIFT_NAME(secp224k1);
@property (readonly, class) jint secp224r1 NS_SWIFT_NAME(secp224r1);
@property (readonly, class) jint secp256k1 NS_SWIFT_NAME(secp256k1);
@property (readonly, class) jint secp256r1 NS_SWIFT_NAME(secp256r1);
@property (readonly, class) jint secp384r1 NS_SWIFT_NAME(secp384r1);
@property (readonly, class) jint secp521r1 NS_SWIFT_NAME(secp521r1);
@property (readonly, class) jint brainpoolP256r1 NS_SWIFT_NAME(brainpoolP256r1);
@property (readonly, class) jint brainpoolP384r1 NS_SWIFT_NAME(brainpoolP384r1);
@property (readonly, class) jint brainpoolP512r1 NS_SWIFT_NAME(brainpoolP512r1);
@property (readonly, class) jint arbitrary_explicit_prime_curves NS_SWIFT_NAME(arbitrary_explicit_prime_curves);
@property (readonly, class) jint arbitrary_explicit_char2_curves NS_SWIFT_NAME(arbitrary_explicit_char2_curves);

+ (jint)sect163k1;

+ (jint)sect163r1;

+ (jint)sect163r2;

+ (jint)sect193r1;

+ (jint)sect193r2;

+ (jint)sect233k1;

+ (jint)sect233r1;

+ (jint)sect239k1;

+ (jint)sect283k1;

+ (jint)sect283r1;

+ (jint)sect409k1;

+ (jint)sect409r1;

+ (jint)sect571k1;

+ (jint)sect571r1;

+ (jint)secp160k1;

+ (jint)secp160r1;

+ (jint)secp160r2;

+ (jint)secp192k1;

+ (jint)secp192r1;

+ (jint)secp224k1;

+ (jint)secp224r1;

+ (jint)secp256k1;

+ (jint)secp256r1;

+ (jint)secp384r1;

+ (jint)secp521r1;

+ (jint)brainpoolP256r1;

+ (jint)brainpoolP384r1;

+ (jint)brainpoolP512r1;

+ (jint)arbitrary_explicit_prime_curves;

+ (jint)arbitrary_explicit_char2_curves;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jboolean)isValidWithInt:(jint)namedCurve;

+ (jboolean)refersToASpecificNamedCurveWithInt:(jint)namedCurve;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsNamedCurve)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect163k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect163k1 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect163k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect163r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect163r1 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect163r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect163r2(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect163r2 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect163r2, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect193r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect193r1 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect193r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect193r2(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect193r2 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect193r2, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect233k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect233k1 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect233k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect233r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect233r1 7
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect233r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect239k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect239k1 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect239k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect283k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect283k1 9
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect283k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect283r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect283r1 10
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect283r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect409k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect409k1 11
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect409k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect409r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect409r1 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect409r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect571k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect571k1 13
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect571k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_sect571r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_sect571r1 14
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, sect571r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp160k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp160k1 15
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp160k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp160r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp160r1 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp160r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp160r2(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp160r2 17
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp160r2, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp192k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp192k1 18
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp192k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp192r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp192r1 19
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp192r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp224k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp224k1 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp224k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp224r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp224r1 21
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp224r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp256k1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp256k1 22
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp256k1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp256r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp256r1 23
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp256r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp384r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp384r1 24
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp384r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_secp521r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_secp521r1 25
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, secp521r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_brainpoolP256r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_brainpoolP256r1 26
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, brainpoolP256r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_brainpoolP384r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_brainpoolP384r1 27
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, brainpoolP384r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_brainpoolP512r1(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_brainpoolP512r1 28
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, brainpoolP512r1, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_arbitrary_explicit_prime_curves(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_arbitrary_explicit_prime_curves 65281
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, arbitrary_explicit_prime_curves, jint)

inline jint LibOrgBouncycastleCryptoTlsNamedCurve_get_arbitrary_explicit_char2_curves(void);
#define LibOrgBouncycastleCryptoTlsNamedCurve_arbitrary_explicit_char2_curves 65282
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsNamedCurve, arbitrary_explicit_char2_curves, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsNamedCurve_init(LibOrgBouncycastleCryptoTlsNamedCurve *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsNamedCurve *new_LibOrgBouncycastleCryptoTlsNamedCurve_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsNamedCurve *create_LibOrgBouncycastleCryptoTlsNamedCurve_init(void);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsNamedCurve_isValidWithInt_(jint namedCurve);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsNamedCurve_refersToASpecificNamedCurveWithInt_(jint namedCurve);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsNamedCurve)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // NamedCurve_H
