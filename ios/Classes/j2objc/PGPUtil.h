//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPUtil.java
//

#ifndef PGPUtil_H
#define PGPUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "HashAlgorithmTags.h"
#include "J2ObjC_header.h"
#include "java/io/BufferedInputStream.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecuritySecureRandom;

@interface LibOrgBouncycastleOpenpgpPGPUtil : NSObject < LibOrgBouncycastleBcpgHashAlgorithmTags >

#pragma mark Public

- (instancetype __nonnull)init;

+ (JavaIoInputStream *)getDecoderStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (NSString *)getDefaultProvider;

+ (NSString *)getDigestNameWithInt:(jint)hashAlgorithm;

+ (NSString *)getSignatureNameWithInt:(jint)keyAlgorithm
                              withInt:(jint)hashAlgorithm;

+ (NSString *)getSymmetricCipherNameWithInt:(jint)algorithm;

+ (IOSByteArray *)makeRandomKeyWithInt:(jint)algorithm
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (void)setDefaultProviderWithNSString:(NSString *)provider;

+ (void)writeFileToLiteralDataWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                            withChar:(jchar)fileType
                                      withJavaIoFile:(JavaIoFile *)file;

+ (void)writeFileToLiteralDataWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                            withChar:(jchar)fileType
                                      withJavaIoFile:(JavaIoFile *)file
                                       withByteArray:(IOSByteArray *)buffer;

#pragma mark Package-Private

+ (IOSObjectArray *)dsaSigToMpiWithByteArray:(IOSByteArray *)encoding;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPUtil)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPUtil_init(LibOrgBouncycastleOpenpgpPGPUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPUtil *new_LibOrgBouncycastleOpenpgpPGPUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPUtil *create_LibOrgBouncycastleOpenpgpPGPUtil_init(void);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleOpenpgpPGPUtil_getDigestNameWithInt_(jint hashAlgorithm);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleOpenpgpPGPUtil_getSignatureNameWithInt_withInt_(jint keyAlgorithm, jint hashAlgorithm);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleOpenpgpPGPUtil_getSymmetricCipherNameWithInt_(jint algorithm);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleOpenpgpPGPUtil_getDefaultProvider(void);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPUtil_setDefaultProviderWithNSString_(NSString *provider);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleOpenpgpPGPUtil_dsaSigToMpiWithByteArray_(IOSByteArray *encoding);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleOpenpgpPGPUtil_makeRandomKeyWithInt_withJavaSecuritySecureRandom_(jint algorithm, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPUtil_writeFileToLiteralDataWithJavaIoOutputStream_withChar_withJavaIoFile_(JavaIoOutputStream *outArg, jchar fileType, JavaIoFile *file);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPUtil_writeFileToLiteralDataWithJavaIoOutputStream_withChar_withJavaIoFile_withByteArray_(JavaIoOutputStream *outArg, jchar fileType, JavaIoFile *file, IOSByteArray *buffer);

FOUNDATION_EXPORT JavaIoInputStream *LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(JavaIoInputStream *inArg);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPUtil)

@interface LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt : JavaIoBufferedInputStream

#pragma mark Public

- (jint)available;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)arg0
                                            withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt_initWithJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt *self, JavaIoInputStream *input);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt *new_LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt_initWithJavaIoInputStream_(JavaIoInputStream *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt *create_LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt_initWithJavaIoInputStream_(JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PGPUtil_H
