//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ocsp/Asn1OcspCertStatus.java
//

#ifndef Asn1OcspCertStatus_H
#define Asn1OcspCertStatus_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1OcspRevokedInfo;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)tagNo
withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)value;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1OcspRevokedInfo:(LibOrgBouncycastleAsn1OcspRevokedInfo *)info;

+ (LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                            withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *)getInstanceWithId:(id)obj;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getStatus;

- (jint)getTagNo;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_init(LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *self);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *new_LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *create_LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_initWithLibOrgBouncycastleAsn1OcspRevokedInfo_(LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *self, LibOrgBouncycastleAsn1OcspRevokedInfo *info);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *new_LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_initWithLibOrgBouncycastleAsn1OcspRevokedInfo_(LibOrgBouncycastleAsn1OcspRevokedInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *create_LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_initWithLibOrgBouncycastleAsn1OcspRevokedInfo_(LibOrgBouncycastleAsn1OcspRevokedInfo *info);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *self, jint tagNo, id<LibOrgBouncycastleAsn1ASN1Encodable> value);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *new_LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(jint tagNo, id<LibOrgBouncycastleAsn1ASN1Encodable> value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *create_LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(jint tagNo, id<LibOrgBouncycastleAsn1ASN1Encodable> value);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus *LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1OcspAsn1OcspCertStatus)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Asn1OcspCertStatus_H
