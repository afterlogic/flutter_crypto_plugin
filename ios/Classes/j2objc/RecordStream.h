//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/RecordStream.java
//

#ifndef RecordStream_H
#define RecordStream_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class LibOrgBouncycastleCryptoTlsProtocolVersion;
@class LibOrgBouncycastleCryptoTlsTlsProtocol;
@protocol LibOrgBouncycastleCryptoTlsTlsCipher;
@protocol LibOrgBouncycastleCryptoTlsTlsCompression;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsHandshakeHash;

@interface LibOrgBouncycastleCryptoTlsRecordStream : NSObject
@property (readonly, class) jint TLS_HEADER_SIZE NS_SWIFT_NAME(TLS_HEADER_SIZE);
@property (readonly, class) jint TLS_HEADER_TYPE_OFFSET NS_SWIFT_NAME(TLS_HEADER_TYPE_OFFSET);
@property (readonly, class) jint TLS_HEADER_VERSION_OFFSET NS_SWIFT_NAME(TLS_HEADER_VERSION_OFFSET);
@property (readonly, class) jint TLS_HEADER_LENGTH_OFFSET NS_SWIFT_NAME(TLS_HEADER_LENGTH_OFFSET);

+ (jint)TLS_HEADER_SIZE;

+ (jint)TLS_HEADER_TYPE_OFFSET;

+ (jint)TLS_HEADER_VERSION_OFFSET;

+ (jint)TLS_HEADER_LENGTH_OFFSET;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsProtocol:(LibOrgBouncycastleCryptoTlsTlsProtocol *)handler
                                                   withJavaIoInputStream:(JavaIoInputStream *)input
                                                  withJavaIoOutputStream:(JavaIoOutputStream *)output;

- (void)checkRecordHeaderWithByteArray:(IOSByteArray *)recordHeader;

- (IOSByteArray *)decodeAndVerifyWithShort:(jshort)type
                     withJavaIoInputStream:(JavaIoInputStream *)input
                                   withInt:(jint)len;

- (void)finaliseHandshake;

- (void)flush;

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)getHandshakeHash;

- (JavaIoOutputStream *)getHandshakeHashUpdater;

- (jint)getPlaintextLimit;

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getReadVersion;

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)notifyHelloComplete;

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)prepareToFinish;

- (jboolean)readRecord;

- (void)receivedReadCipherSpec;

- (void)safeClose;

- (void)sentWriteCipherSpec;

- (void)setPendingConnectionStateWithLibOrgBouncycastleCryptoTlsTlsCompression:(id<LibOrgBouncycastleCryptoTlsTlsCompression>)tlsCompression
                                      withLibOrgBouncycastleCryptoTlsTlsCipher:(id<LibOrgBouncycastleCryptoTlsTlsCipher>)tlsCipher;

- (void)setPlaintextLimitWithInt:(jint)plaintextLimit;

- (void)setReadVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)readVersion;

- (void)setRestrictReadVersionWithBoolean:(jboolean)enabled;

- (void)setWriteVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)writeVersion;

- (void)writeRecordWithShort:(jshort)type
               withByteArray:(IOSByteArray *)plaintext
                     withInt:(jint)plaintextOffset
                     withInt:(jint)plaintextLength;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsRecordStream)

inline jint LibOrgBouncycastleCryptoTlsRecordStream_get_TLS_HEADER_SIZE(void);
#define LibOrgBouncycastleCryptoTlsRecordStream_TLS_HEADER_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsRecordStream, TLS_HEADER_SIZE, jint)

inline jint LibOrgBouncycastleCryptoTlsRecordStream_get_TLS_HEADER_TYPE_OFFSET(void);
#define LibOrgBouncycastleCryptoTlsRecordStream_TLS_HEADER_TYPE_OFFSET 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsRecordStream, TLS_HEADER_TYPE_OFFSET, jint)

inline jint LibOrgBouncycastleCryptoTlsRecordStream_get_TLS_HEADER_VERSION_OFFSET(void);
#define LibOrgBouncycastleCryptoTlsRecordStream_TLS_HEADER_VERSION_OFFSET 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsRecordStream, TLS_HEADER_VERSION_OFFSET, jint)

inline jint LibOrgBouncycastleCryptoTlsRecordStream_get_TLS_HEADER_LENGTH_OFFSET(void);
#define LibOrgBouncycastleCryptoTlsRecordStream_TLS_HEADER_LENGTH_OFFSET 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsRecordStream, TLS_HEADER_LENGTH_OFFSET, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsRecordStream_initWithLibOrgBouncycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsRecordStream *self, LibOrgBouncycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsRecordStream *new_LibOrgBouncycastleCryptoTlsRecordStream_initWithLibOrgBouncycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsRecordStream *create_LibOrgBouncycastleCryptoTlsRecordStream_initWithLibOrgBouncycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsRecordStream)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // RecordStream_H
