//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsECDSASigner.java
//

#include "AsymmetricKeyParameter.h"
#include "DSA.h"
#include "Digest.h"
#include "ECDSASigner.h"
#include "ECPublicKeyParameters.h"
#include "HMacDSAKCalculator.h"
#include "J2ObjC_source.h"
#include "SignatureAlgorithm.h"
#include "TlsDSASigner.h"
#include "TlsECDSASigner.h"
#include "TlsUtils.h"

@implementation LibOrgBouncycastleCryptoTlsTlsECDSASigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsTlsECDSASigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isValidPublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey {
  return [publicKey isKindOfClass:[LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]];
}

- (id<LibOrgBouncycastleCryptoDSA>)createDSAImplWithShort:(jshort)hashAlgorithm {
  return new_LibOrgBouncycastleCryptoSignersECDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(new_LibOrgBouncycastleCryptoSignersHMacDSAKCalculator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_(hashAlgorithm)));
}

- (jshort)getSignatureAlgorithm {
  return LibOrgBouncycastleCryptoTlsSignatureAlgorithm_ecdsa;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDSA;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "S", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isValidPublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[2].selector = @selector(createDSAImplWithShort:);
  methods[3].selector = @selector(getSignatureAlgorithm);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isValidPublicKey", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "createDSAImpl", "S" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsECDSASigner = { "TlsECDSASigner", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsECDSASigner;
}

@end

void LibOrgBouncycastleCryptoTlsTlsECDSASigner_init(LibOrgBouncycastleCryptoTlsTlsECDSASigner *self) {
  LibOrgBouncycastleCryptoTlsTlsDSASigner_init(self);
}

LibOrgBouncycastleCryptoTlsTlsECDSASigner *new_LibOrgBouncycastleCryptoTlsTlsECDSASigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsECDSASigner, init)
}

LibOrgBouncycastleCryptoTlsTlsECDSASigner *create_LibOrgBouncycastleCryptoTlsTlsECDSASigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsECDSASigner, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsECDSASigner)
