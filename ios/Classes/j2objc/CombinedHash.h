//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CombinedHash.java
//

#ifndef CombinedHash_H
#define CombinedHash_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsHandshakeHash.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsCombinedHash : NSObject < LibOrgBouncycastleCryptoTlsTlsHandshakeHash > {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsContext> context_;
  id<LibOrgBouncycastleCryptoDigest> md5_;
  id<LibOrgBouncycastleCryptoDigest> sha1_;
}

#pragma mark Public

- (jint)doFinalWithByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff;

- (id<LibOrgBouncycastleCryptoDigest>)forkPRFHash;

- (NSString *)getAlgorithmName;

- (jint)getDigestSize;

- (IOSByteArray *)getFinalHashWithShort:(jshort)hashAlgorithm;

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)notifyPRFDetermined;

- (void)reset;

- (void)sealHashAlgorithms;

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)stopTracking;

- (void)trackHashAlgorithmWithShort:(jshort)hashAlgorithm;

- (void)updateWithByte:(jbyte)input;

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)len;

#pragma mark Protected

- (void)ssl3CompleteWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)d
                                         withByteArray:(IOSByteArray *)ipad
                                         withByteArray:(IOSByteArray *)opad
                                               withInt:(jint)padLength;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsCombinedHash:(LibOrgBouncycastleCryptoTlsCombinedHash *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsCombinedHash)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCombinedHash, context_, id<LibOrgBouncycastleCryptoTlsTlsContext>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCombinedHash, md5_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCombinedHash, sha1_, id<LibOrgBouncycastleCryptoDigest>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCombinedHash_init(LibOrgBouncycastleCryptoTlsCombinedHash *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCombinedHash *new_LibOrgBouncycastleCryptoTlsCombinedHash_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCombinedHash *create_LibOrgBouncycastleCryptoTlsCombinedHash_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(LibOrgBouncycastleCryptoTlsCombinedHash *self, LibOrgBouncycastleCryptoTlsCombinedHash *t);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCombinedHash *new_LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(LibOrgBouncycastleCryptoTlsCombinedHash *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCombinedHash *create_LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(LibOrgBouncycastleCryptoTlsCombinedHash *t);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCombinedHash)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CombinedHash_H
