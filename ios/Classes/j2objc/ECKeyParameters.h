//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/ECKeyParameters.java
//

#ifndef ECKeyParameters_H
#define ECKeyParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricKeyParameter.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoParamsECDomainParameters;

@interface LibOrgBouncycastleCryptoParamsECKeyParameters : LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter {
 @public
  LibOrgBouncycastleCryptoParamsECDomainParameters *params_;
}

#pragma mark Public

- (LibOrgBouncycastleCryptoParamsECDomainParameters *)getParameters;

#pragma mark Protected

- (instancetype __nonnull)initWithBoolean:(jboolean)isPrivate
withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)params;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsECKeyParameters)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsECKeyParameters, params_, LibOrgBouncycastleCryptoParamsECDomainParameters *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParamsECKeyParameters *self, jboolean isPrivate, LibOrgBouncycastleCryptoParamsECDomainParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECKeyParameters *new_LibOrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_(jboolean isPrivate, LibOrgBouncycastleCryptoParamsECDomainParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECKeyParameters *create_LibOrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECDomainParameters_(jboolean isPrivate, LibOrgBouncycastleCryptoParamsECDomainParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsECKeyParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ECKeyParameters_H
