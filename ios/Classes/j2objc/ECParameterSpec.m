//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/spec/ECParameterSpec.java
//

#include "ECCurve.h"
#include "ECParameterSpec.h"
#include "ECPoint.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleJceSpecECParameterSpec () {
 @public
  LibOrgBouncycastleMathEcECCurve *curve_;
  IOSByteArray *seed_;
  LibOrgBouncycastleMathEcECPoint *G_;
  JavaMathBigInteger *n_;
  JavaMathBigInteger *h_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecECParameterSpec, curve_, LibOrgBouncycastleMathEcECCurve *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecECParameterSpec, seed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecECParameterSpec, G_, LibOrgBouncycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecECParameterSpec, n_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecECParameterSpec, h_, JavaMathBigInteger *)

@implementation LibOrgBouncycastleJceSpecECParameterSpec

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)G
                                 withJavaMathBigInteger:(JavaMathBigInteger *)n {
  LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(self, curve, G, n);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)G
                                 withJavaMathBigInteger:(JavaMathBigInteger *)n
                                 withJavaMathBigInteger:(JavaMathBigInteger *)h {
  LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(self, curve, G, n, h);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)G
                                 withJavaMathBigInteger:(JavaMathBigInteger *)n
                                 withJavaMathBigInteger:(JavaMathBigInteger *)h
                                          withByteArray:(IOSByteArray *)seed {
  LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(self, curve, G, n, h, seed);
  return self;
}

- (LibOrgBouncycastleMathEcECCurve *)getCurve {
  return curve_;
}

- (LibOrgBouncycastleMathEcECPoint *)getG {
  return G_;
}

- (JavaMathBigInteger *)getN {
  return n_;
}

- (JavaMathBigInteger *)getH {
  return h_;
}

- (IOSByteArray *)getSeed {
  return seed_;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[LibOrgBouncycastleJceSpecECParameterSpec class]])) {
    return false;
  }
  LibOrgBouncycastleJceSpecECParameterSpec *other = (LibOrgBouncycastleJceSpecECParameterSpec *) cast_chk(o, [LibOrgBouncycastleJceSpecECParameterSpec class]);
  return [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) equalsWithLibOrgBouncycastleMathEcECCurve:[((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(other)) getCurve]] && [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self getG])) equalsWithLibOrgBouncycastleMathEcECPoint:[other getG]];
}

- (NSUInteger)hash {
  return ((jint) [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) hash]) ^ ((jint) [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self getG])) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withJavaMathBigInteger:withByteArray:);
  methods[3].selector = @selector(getCurve);
  methods[4].selector = @selector(getG);
  methods[5].selector = @selector(getN);
  methods[6].selector = @selector(getH);
  methods[7].selector = @selector(getSeed);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curve_", "LLibOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "G_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "h_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LJavaMathBigInteger;", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LJavaMathBigInteger;[B", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceSpecECParameterSpec = { "ECParameterSpec", "lib.org.bouncycastle.jce.spec", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceSpecECParameterSpec;
}

@end

void LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleJceSpecECParameterSpec *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  NSObject_init(self);
  self->curve_ = curve;
  self->G_ = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(G)) normalize];
  self->n_ = n;
  self->h_ = JavaMathBigInteger_valueOfWithLong_(1);
  self->seed_ = nil;
}

LibOrgBouncycastleJceSpecECParameterSpec *new_LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceSpecECParameterSpec, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_, curve, G, n)
}

LibOrgBouncycastleJceSpecECParameterSpec *create_LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceSpecECParameterSpec, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_, curve, G, n)
}

void LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleJceSpecECParameterSpec *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  NSObject_init(self);
  self->curve_ = curve;
  self->G_ = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(G)) normalize];
  self->n_ = n;
  self->h_ = h;
  self->seed_ = nil;
}

LibOrgBouncycastleJceSpecECParameterSpec *new_LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceSpecECParameterSpec, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_, curve, G, n, h)
}

LibOrgBouncycastleJceSpecECParameterSpec *create_LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceSpecECParameterSpec, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_, curve, G, n, h)
}

void LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(LibOrgBouncycastleJceSpecECParameterSpec *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  NSObject_init(self);
  self->curve_ = curve;
  self->G_ = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(G)) normalize];
  self->n_ = n;
  self->h_ = h;
  self->seed_ = seed;
}

LibOrgBouncycastleJceSpecECParameterSpec *new_LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceSpecECParameterSpec, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_, curve, G, n, h, seed)
}

LibOrgBouncycastleJceSpecECParameterSpec *create_LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceSpecECParameterSpec, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_, curve, G, n, h, seed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceSpecECParameterSpec)
