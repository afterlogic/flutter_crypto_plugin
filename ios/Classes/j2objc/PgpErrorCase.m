//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/PgpErrorCase.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "PgpErrorCase.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static void LibComAfterlogicPgpPgpErrorCase_initWithNSString_withInt_(LibComAfterlogicPgpPgpErrorCase *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static LibComAfterlogicPgpPgpErrorCase *new_LibComAfterlogicPgpPgpErrorCase_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(LibComAfterlogicPgpPgpErrorCase)

LibComAfterlogicPgpPgpErrorCase *LibComAfterlogicPgpPgpErrorCase_values_[3];

@implementation LibComAfterlogicPgpPgpErrorCase

+ (LibComAfterlogicPgpPgpErrorCase *)Undefined {
  return JreEnum(LibComAfterlogicPgpPgpErrorCase, Undefined);
}

+ (LibComAfterlogicPgpPgpErrorCase *)InvalidMessage {
  return JreEnum(LibComAfterlogicPgpPgpErrorCase, InvalidMessage);
}

+ (LibComAfterlogicPgpPgpErrorCase *)InvalidPassword {
  return JreEnum(LibComAfterlogicPgpPgpErrorCase, InvalidPassword);
}

+ (IOSObjectArray *)values {
  return LibComAfterlogicPgpPgpErrorCase_values();
}

+ (LibComAfterlogicPgpPgpErrorCase *)valueOfWithNSString:(NSString *)name {
  return LibComAfterlogicPgpPgpErrorCase_valueOfWithNSString_(name);
}

- (LibComAfterlogicPgpPgpErrorCase_Enum)toNSEnum {
  return (LibComAfterlogicPgpPgpErrorCase_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LLibComAfterlogicPgpPgpErrorCase;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpPgpErrorCase;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Undefined", "LLibComAfterlogicPgpPgpErrorCase;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "InvalidMessage", "LLibComAfterlogicPgpPgpErrorCase;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "InvalidPassword", "LLibComAfterlogicPgpPgpErrorCase;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(LibComAfterlogicPgpPgpErrorCase, Undefined), &JreEnum(LibComAfterlogicPgpPgpErrorCase, InvalidMessage), &JreEnum(LibComAfterlogicPgpPgpErrorCase, InvalidPassword), "Ljava/lang/Enum<Llib/com/afterlogic/pgp/PgpErrorCase;>;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpPgpErrorCase = { "PgpErrorCase", "lib.com.afterlogic.pgp", ptrTable, methods, fields, 7, 0x4011, 2, 3, -1, -1, -1, 5, -1 };
  return &_LibComAfterlogicPgpPgpErrorCase;
}

+ (void)initialize {
  if (self == [LibComAfterlogicPgpPgpErrorCase class]) {
    JreEnum(LibComAfterlogicPgpPgpErrorCase, Undefined) = new_LibComAfterlogicPgpPgpErrorCase_initWithNSString_withInt_(JreEnumConstantName(LibComAfterlogicPgpPgpErrorCase_class_(), 0), 0);
    JreEnum(LibComAfterlogicPgpPgpErrorCase, InvalidMessage) = new_LibComAfterlogicPgpPgpErrorCase_initWithNSString_withInt_(JreEnumConstantName(LibComAfterlogicPgpPgpErrorCase_class_(), 1), 1);
    JreEnum(LibComAfterlogicPgpPgpErrorCase, InvalidPassword) = new_LibComAfterlogicPgpPgpErrorCase_initWithNSString_withInt_(JreEnumConstantName(LibComAfterlogicPgpPgpErrorCase_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(LibComAfterlogicPgpPgpErrorCase)
  }
}

@end

void LibComAfterlogicPgpPgpErrorCase_initWithNSString_withInt_(LibComAfterlogicPgpPgpErrorCase *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

LibComAfterlogicPgpPgpErrorCase *new_LibComAfterlogicPgpPgpErrorCase_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpPgpErrorCase, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *LibComAfterlogicPgpPgpErrorCase_values() {
  LibComAfterlogicPgpPgpErrorCase_initialize();
  return [IOSObjectArray arrayWithObjects:LibComAfterlogicPgpPgpErrorCase_values_ count:3 type:LibComAfterlogicPgpPgpErrorCase_class_()];
}

LibComAfterlogicPgpPgpErrorCase *LibComAfterlogicPgpPgpErrorCase_valueOfWithNSString_(NSString *name) {
  LibComAfterlogicPgpPgpErrorCase_initialize();
  for (int i = 0; i < 3; i++) {
    LibComAfterlogicPgpPgpErrorCase *e = LibComAfterlogicPgpPgpErrorCase_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

LibComAfterlogicPgpPgpErrorCase *LibComAfterlogicPgpPgpErrorCase_fromOrdinal(NSUInteger ordinal) {
  LibComAfterlogicPgpPgpErrorCase_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return LibComAfterlogicPgpPgpErrorCase_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpPgpErrorCase)
