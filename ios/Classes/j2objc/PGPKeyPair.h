//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPKeyPair.java
//

#ifndef PGPKeyPair_H
#define PGPKeyPair_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleOpenpgpPGPPrivateKey;
@class LibOrgBouncycastleOpenpgpPGPPublicKey;

@interface LibOrgBouncycastleOpenpgpPGPKeyPair : NSObject {
 @public
  LibOrgBouncycastleOpenpgpPGPPublicKey *pub_;
  LibOrgBouncycastleOpenpgpPGPPrivateKey *priv_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pub
                             withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)priv;

- (jlong)getKeyID;

- (LibOrgBouncycastleOpenpgpPGPPrivateKey *)getPrivateKey;

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKey;

#pragma mark Protected

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPKeyPair)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPKeyPair, pub_, LibOrgBouncycastleOpenpgpPGPPublicKey *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPKeyPair, priv_, LibOrgBouncycastleOpenpgpPGPPrivateKey *)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPKeyPair_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpPGPKeyPair *self, LibOrgBouncycastleOpenpgpPGPPublicKey *pub, LibOrgBouncycastleOpenpgpPGPPrivateKey *priv);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPKeyPair *new_LibOrgBouncycastleOpenpgpPGPKeyPair_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *pub, LibOrgBouncycastleOpenpgpPGPPrivateKey *priv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPKeyPair *create_LibOrgBouncycastleOpenpgpPGPKeyPair_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *pub, LibOrgBouncycastleOpenpgpPGPPrivateKey *priv);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPKeyPair_init(LibOrgBouncycastleOpenpgpPGPKeyPair *self);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPKeyPair *new_LibOrgBouncycastleOpenpgpPGPKeyPair_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPKeyPair *create_LibOrgBouncycastleOpenpgpPGPKeyPair_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPKeyPair)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PGPKeyPair_H
