//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/examples/DESExample.java
//

#include "CBCBlockCipher.h"
#include "CryptoException.h"
#include "DESExample.h"
#include "DESedeEngine.h"
#include "DESedeKeyGenerator.h"
#include "DESedeParameters.h"
#include "Hex.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "KeyParameter.h"
#include "PaddedBufferedBlockCipher.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoExamplesDESExample () {
 @public
  jboolean encrypt_;
  LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *cipher_;
  JavaIoBufferedInputStream *in_;
  JavaIoBufferedOutputStream *out_;
  IOSByteArray *key_;
}

- (void)process;

- (void)performEncryptWithByteArray:(IOSByteArray *)key;

- (void)performDecryptWithByteArray:(IOSByteArray *)key;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoExamplesDESExample, cipher_, LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoExamplesDESExample, in_, JavaIoBufferedInputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoExamplesDESExample, out_, JavaIoBufferedOutputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoExamplesDESExample, key_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoExamplesDESExample_process(LibOrgBouncycastleCryptoExamplesDESExample *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoExamplesDESExample_performEncryptWithByteArray_(LibOrgBouncycastleCryptoExamplesDESExample *self, IOSByteArray *key);

__attribute__((unused)) static void LibOrgBouncycastleCryptoExamplesDESExample_performDecryptWithByteArray_(LibOrgBouncycastleCryptoExamplesDESExample *self, IOSByteArray *key);

@implementation LibOrgBouncycastleCryptoExamplesDESExample

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleCryptoExamplesDESExample_mainWithNSStringArray_(args);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoExamplesDESExample_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)infile
                    withNSString:(NSString *)outfile
                    withNSString:(NSString *)keyfile
                     withBoolean:(jboolean)encrypt {
  LibOrgBouncycastleCryptoExamplesDESExample_initWithNSString_withNSString_withNSString_withBoolean_(self, infile, outfile, keyfile, encrypt);
  return self;
}

- (void)process {
  LibOrgBouncycastleCryptoExamplesDESExample_process(self);
}

- (void)performEncryptWithByteArray:(IOSByteArray *)key {
  LibOrgBouncycastleCryptoExamplesDESExample_performEncryptWithByteArray_(self, key);
}

- (void)performDecryptWithByteArray:(IOSByteArray *)key {
  LibOrgBouncycastleCryptoExamplesDESExample_performDecryptWithByteArray_(self, key);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(mainWithNSStringArray:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:withNSString:withNSString:withBoolean:);
  methods[3].selector = @selector(process);
  methods[4].selector = @selector(performEncryptWithByteArray:);
  methods[5].selector = @selector(performDecryptWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encrypt_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "in_", "LJavaIoBufferedInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "out_", "LJavaIoBufferedOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "LNSString;LNSString;LNSString;Z", "performEncrypt", "[B", "performDecrypt" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoExamplesDESExample = { "DESExample", "lib.org.bouncycastle.crypto.examples", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoExamplesDESExample;
}

@end

void LibOrgBouncycastleCryptoExamplesDESExample_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleCryptoExamplesDESExample_initialize();
  jboolean encrypt = true;
  NSString *infile = nil;
  NSString *outfile = nil;
  NSString *keyfile = nil;
  if (((IOSObjectArray *) nil_chk(args))->size_ < 2) {
    LibOrgBouncycastleCryptoExamplesDESExample *de = new_LibOrgBouncycastleCryptoExamplesDESExample_init();
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"Usage: java ", [[de java_getClass] getName], @" infile outfile [keyfile]")];
    JavaLangSystem_exitWithInt_(1);
  }
  keyfile = @"deskey.dat";
  infile = IOSObjectArray_Get(args, 0);
  outfile = IOSObjectArray_Get(args, 1);
  if (args->size_ > 2) {
    encrypt = false;
    keyfile = IOSObjectArray_Get(args, 2);
  }
  LibOrgBouncycastleCryptoExamplesDESExample *de = new_LibOrgBouncycastleCryptoExamplesDESExample_initWithNSString_withNSString_withNSString_withBoolean_(infile, outfile, keyfile, encrypt);
  LibOrgBouncycastleCryptoExamplesDESExample_process(de);
}

void LibOrgBouncycastleCryptoExamplesDESExample_init(LibOrgBouncycastleCryptoExamplesDESExample *self) {
  NSObject_init(self);
  self->encrypt_ = true;
  self->cipher_ = nil;
  self->in_ = nil;
  self->out_ = nil;
  self->key_ = nil;
}

LibOrgBouncycastleCryptoExamplesDESExample *new_LibOrgBouncycastleCryptoExamplesDESExample_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoExamplesDESExample, init)
}

LibOrgBouncycastleCryptoExamplesDESExample *create_LibOrgBouncycastleCryptoExamplesDESExample_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoExamplesDESExample, init)
}

void LibOrgBouncycastleCryptoExamplesDESExample_initWithNSString_withNSString_withNSString_withBoolean_(LibOrgBouncycastleCryptoExamplesDESExample *self, NSString *infile, NSString *outfile, NSString *keyfile, jboolean encrypt) {
  NSObject_init(self);
  self->encrypt_ = true;
  self->cipher_ = nil;
  self->in_ = nil;
  self->out_ = nil;
  self->key_ = nil;
  self->encrypt_ = encrypt;
  @try {
    self->in_ = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(infile));
  }
  @catch (JavaIoFileNotFoundException *fnf) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Input file not found [", infile, ']')];
    JavaLangSystem_exitWithInt_(1);
  }
  @try {
    self->out_ = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(outfile));
  }
  @catch (JavaIoIOException *fnf) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Output file not created [", outfile, ']')];
    JavaLangSystem_exitWithInt_(1);
  }
  if (encrypt) {
    @try {
      JavaSecuritySecureRandom *sr = nil;
      @try {
        sr = new_JavaSecuritySecureRandom_init();
        [sr setSeedWithByteArray:[@"www.bouncycastle.org" java_getBytes]];
      }
      @catch (JavaLangException *nsa) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Hmmm, no SHA1PRNG, you need the Sun implementation"];
        JavaLangSystem_exitWithInt_(1);
      }
      LibOrgBouncycastleCryptoKeyGenerationParameters *kgp = new_LibOrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(sr, LibOrgBouncycastleCryptoParamsDESedeParameters_DES_EDE_KEY_LENGTH * 8);
      LibOrgBouncycastleCryptoGeneratorsDESedeKeyGenerator *kg = new_LibOrgBouncycastleCryptoGeneratorsDESedeKeyGenerator_init();
      [kg init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:kgp];
      self->key_ = [kg generateKey];
      JavaIoBufferedOutputStream *keystream = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(keyfile));
      IOSByteArray *keyhex = LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_(self->key_);
      [keystream writeWithByteArray:keyhex withInt:0 withInt:((IOSByteArray *) nil_chk(keyhex))->size_];
      [keystream flush];
      [keystream close];
    }
    @catch (JavaIoIOException *createKey) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Could not decryption create key file [", keyfile, ']')];
      JavaLangSystem_exitWithInt_(1);
    }
  }
  else {
    @try {
      JavaIoBufferedInputStream *keystream = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(keyfile));
      jint len = [keystream available];
      IOSByteArray *keyhex = [IOSByteArray newArrayWithLength:len];
      [keystream readWithByteArray:keyhex withInt:0 withInt:len];
      self->key_ = LibOrgBouncycastleUtilEncodersHex_decodeWithByteArray_(keyhex);
    }
    @catch (JavaIoIOException *ioe) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Decryption key file not found, or not valid [", keyfile, ']')];
      JavaLangSystem_exitWithInt_(1);
    }
  }
}

LibOrgBouncycastleCryptoExamplesDESExample *new_LibOrgBouncycastleCryptoExamplesDESExample_initWithNSString_withNSString_withNSString_withBoolean_(NSString *infile, NSString *outfile, NSString *keyfile, jboolean encrypt) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoExamplesDESExample, initWithNSString_withNSString_withNSString_withBoolean_, infile, outfile, keyfile, encrypt)
}

LibOrgBouncycastleCryptoExamplesDESExample *create_LibOrgBouncycastleCryptoExamplesDESExample_initWithNSString_withNSString_withNSString_withBoolean_(NSString *infile, NSString *outfile, NSString *keyfile, jboolean encrypt) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoExamplesDESExample, initWithNSString_withNSString_withNSString_withBoolean_, infile, outfile, keyfile, encrypt)
}

void LibOrgBouncycastleCryptoExamplesDESExample_process(LibOrgBouncycastleCryptoExamplesDESExample *self) {
  self->cipher_ = new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESedeEngine_init()));
  if (self->encrypt_) {
    LibOrgBouncycastleCryptoExamplesDESExample_performEncryptWithByteArray_(self, self->key_);
  }
  else {
    LibOrgBouncycastleCryptoExamplesDESExample_performDecryptWithByteArray_(self, self->key_);
  }
  @try {
    [((JavaIoBufferedInputStream *) nil_chk(self->in_)) close];
    [((JavaIoBufferedOutputStream *) nil_chk(self->out_)) flush];
    [((JavaIoBufferedOutputStream *) nil_chk(self->out_)) close];
  }
  @catch (JavaIoIOException *closing) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"exception closing resources: ", [closing getMessage])];
  }
}

void LibOrgBouncycastleCryptoExamplesDESExample_performEncryptWithByteArray_(LibOrgBouncycastleCryptoExamplesDESExample *self, IOSByteArray *key) {
  [((LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *) nil_chk(self->cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(key)];
  jint inBlockSize = 47;
  jint outBlockSize = [((LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *) nil_chk(self->cipher_)) getOutputSizeWithInt:inBlockSize];
  IOSByteArray *inblock = [IOSByteArray newArrayWithLength:inBlockSize];
  IOSByteArray *outblock = [IOSByteArray newArrayWithLength:outBlockSize];
  @try {
    jint inL;
    jint outL;
    IOSByteArray *rv = nil;
    while ((inL = [((JavaIoBufferedInputStream *) nil_chk(self->in_)) readWithByteArray:inblock withInt:0 withInt:inBlockSize]) > 0) {
      outL = [((LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *) nil_chk(self->cipher_)) processBytesWithByteArray:inblock withInt:0 withInt:inL withByteArray:outblock withInt:0];
      if (outL > 0) {
        rv = LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(outblock, 0, outL);
        [((JavaIoBufferedOutputStream *) nil_chk(self->out_)) writeWithByteArray:rv withInt:0 withInt:((IOSByteArray *) nil_chk(rv))->size_];
        [((JavaIoBufferedOutputStream *) nil_chk(self->out_)) writeWithInt:0x000a];
      }
    }
    @try {
      outL = [((LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *) nil_chk(self->cipher_)) doFinalWithByteArray:outblock withInt:0];
      if (outL > 0) {
        rv = LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(outblock, 0, outL);
        [((JavaIoBufferedOutputStream *) nil_chk(self->out_)) writeWithByteArray:rv withInt:0 withInt:((IOSByteArray *) nil_chk(rv))->size_];
        [((JavaIoBufferedOutputStream *) nil_chk(self->out_)) writeWithInt:0x000a];
      }
    }
    @catch (LibOrgBouncycastleCryptoCryptoException *ce) {
    }
  }
  @catch (JavaIoIOException *ioeread) {
    [ioeread printStackTrace];
  }
}

void LibOrgBouncycastleCryptoExamplesDESExample_performDecryptWithByteArray_(LibOrgBouncycastleCryptoExamplesDESExample *self, IOSByteArray *key) {
  [((LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *) nil_chk(self->cipher_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(key)];
  JavaIoBufferedReader *br = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(self->in_));
  @try {
    jint outL;
    IOSByteArray *inblock = nil;
    IOSByteArray *outblock = nil;
    NSString *rv = nil;
    while ((rv = [br readLine]) != nil) {
      inblock = LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_(rv);
      outblock = [IOSByteArray newArrayWithLength:[((LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *) nil_chk(self->cipher_)) getOutputSizeWithInt:((IOSByteArray *) nil_chk(inblock))->size_]];
      outL = [((LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *) nil_chk(self->cipher_)) processBytesWithByteArray:inblock withInt:0 withInt:inblock->size_ withByteArray:outblock withInt:0];
      if (outL > 0) {
        [((JavaIoBufferedOutputStream *) nil_chk(self->out_)) writeWithByteArray:outblock withInt:0 withInt:outL];
      }
    }
    @try {
      outL = [((LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *) nil_chk(self->cipher_)) doFinalWithByteArray:outblock withInt:0];
      if (outL > 0) {
        [((JavaIoBufferedOutputStream *) nil_chk(self->out_)) writeWithByteArray:outblock withInt:0 withInt:outL];
      }
    }
    @catch (LibOrgBouncycastleCryptoCryptoException *ce) {
    }
  }
  @catch (JavaIoIOException *ioeread) {
    [ioeread printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoExamplesDESExample)
