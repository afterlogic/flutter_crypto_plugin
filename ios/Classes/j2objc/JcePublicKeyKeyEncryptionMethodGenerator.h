//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcePublicKeyKeyEncryptionMethodGenerator.java
//

#ifndef JcePublicKeyKeyEncryptionMethodGenerator_H
#define JcePublicKeyKeyEncryptionMethodGenerator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PublicKeyKeyEncryptionMethodGenerator.h"

@class IOSByteArray;
@class JavaSecurityProvider;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleOpenpgpPGPPublicKey;

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator : LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key;

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider;

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *)setProviderWithNSString:(NSString *)providerName;

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

#pragma mark Protected

- (IOSByteArray *)encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
                                                                withByteArray:(IOSByteArray *)sessionInfo;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *self, LibOrgBouncycastleOpenpgpPGPPublicKey *key);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *key);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // JcePublicKeyKeyEncryptionMethodGenerator_H
