//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/test/UncloseableOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "UncloseableOutputStream.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/RuntimeException.h"

@implementation LibOrgBouncycastleUtilTestUncloseableOutputStream

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)s {
  LibOrgBouncycastleUtilTestUncloseableOutputStream_initWithJavaIoOutputStream_(self, s);
  return self;
}

- (void)close {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"close() called on UncloseableOutputStream");
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:b withInt:off withInt:len];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(writeWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoOutputStream;", "write", "[BII", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilTestUncloseableOutputStream = { "UncloseableOutputStream", "lib.org.bouncycastle.util.test", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilTestUncloseableOutputStream;
}

@end

void LibOrgBouncycastleUtilTestUncloseableOutputStream_initWithJavaIoOutputStream_(LibOrgBouncycastleUtilTestUncloseableOutputStream *self, JavaIoOutputStream *s) {
  JavaIoFilterOutputStream_initWithJavaIoOutputStream_(self, s);
}

LibOrgBouncycastleUtilTestUncloseableOutputStream *new_LibOrgBouncycastleUtilTestUncloseableOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *s) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilTestUncloseableOutputStream, initWithJavaIoOutputStream_, s)
}

LibOrgBouncycastleUtilTestUncloseableOutputStream *create_LibOrgBouncycastleUtilTestUncloseableOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *s) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilTestUncloseableOutputStream, initWithJavaIoOutputStream_, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilTestUncloseableOutputStream)
