//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSAddress.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pack.h"
#include "XMSSAddress.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSSAddress () {
 @public
  jint layerAddress_;
  jlong treeAddress_;
  jint type_;
  jint keyAndMask_;
}

@end

@interface LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder () {
 @public
  jint type_;
  jint layerAddress_;
  jlong treeAddress_;
  jint keyAndMask_;
}

@end

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSAddress

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder:(LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder *)builder {
  LibOrgBouncycastlePqcCryptoXmssXMSSAddress_initWithLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder_(self, builder);
  return self;
}

- (IOSByteArray *)toByteArray {
  IOSByteArray *byteRepresentation = [IOSByteArray newArrayWithLength:32];
  LibOrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(layerAddress_, byteRepresentation, 0);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(treeAddress_, byteRepresentation, 4);
  LibOrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(type_, byteRepresentation, 12);
  LibOrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(keyAndMask_, byteRepresentation, 28);
  return byteRepresentation;
}

- (jint)getLayerAddress {
  return layerAddress_;
}

- (jlong)getTreeAddress {
  return treeAddress_;
}

- (jint)getType {
  return type_;
}

- (jint)getKeyAndMask {
  return keyAndMask_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder:);
  methods[1].selector = @selector(toByteArray);
  methods[2].selector = @selector(getLayerAddress);
  methods[3].selector = @selector(getTreeAddress);
  methods[4].selector = @selector(getType);
  methods[5].selector = @selector(getKeyAndMask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "layerAddress_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "treeAddress_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyAndMask_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSAddress = { "XMSSAddress", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x401, 6, 4, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSAddress;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSAddress_initWithLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder_(LibOrgBouncycastlePqcCryptoXmssXMSSAddress *self, LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder *builder) {
  NSObject_init(self);
  self->layerAddress_ = ((LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder *) nil_chk(builder))->layerAddress_;
  self->treeAddress_ = builder->treeAddress_;
  self->type_ = builder->type_;
  self->keyAndMask_ = builder->keyAndMask_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSAddress)

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder

- (instancetype)initWithInt:(jint)type {
  LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder_initWithInt_(self, type);
  return self;
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder *)withLayerAddressWithInt:(jint)val {
  layerAddress_ = val;
  return [self getThis];
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder *)withTreeAddressWithLong:(jlong)val {
  treeAddress_ = val;
  return [self getThis];
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder *)withKeyAndMaskWithInt:(jint)val {
  keyAndMask_ = val;
  return [self getThis];
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSAddress *)build {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder *)getThis {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder;", 0x4, 1, 0, -1, 2, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder;", 0x4, 3, 4, -1, 5, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder;", 0x4, 6, 0, -1, 2, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSAddress;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder;", 0x404, -1, -1, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(withLayerAddressWithInt:);
  methods[2].selector = @selector(withTreeAddressWithLong:);
  methods[3].selector = @selector(withKeyAndMaskWithInt:);
  methods[4].selector = @selector(build);
  methods[5].selector = @selector(getThis);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "layerAddress_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeAddress_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyAndMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "withLayerAddress", "(I)TT;", "withTreeAddress", "J", "(J)TT;", "withKeyAndMask", "()TT;", "LLibOrgBouncycastlePqcCryptoXmssXMSSAddress;", "<T:Llib/org/bouncycastle/pqc/crypto/xmss/XMSSAddress$Builder;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder = { "Builder", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x40c, 6, 4, 8, -1, -1, 9, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder_initWithInt_(LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder *self, jint type) {
  NSObject_init(self);
  self->layerAddress_ = 0;
  self->treeAddress_ = 0LL;
  self->keyAndMask_ = 0;
  self->type_ = type;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder)
