//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/io/Streams.java
//

#ifndef Streams_H
#define Streams_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoByteArrayOutputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;

@interface LibOrgBouncycastleUtilIoStreams : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)drainWithJavaIoInputStream:(JavaIoInputStream *)inStr;

+ (void)pipeAllWithJavaIoInputStream:(JavaIoInputStream *)inStr
              withJavaIoOutputStream:(JavaIoOutputStream *)outStr;

+ (jlong)pipeAllLimitedWithJavaIoInputStream:(JavaIoInputStream *)inStr
                                    withLong:(jlong)limit
                      withJavaIoOutputStream:(JavaIoOutputStream *)outStr;

+ (IOSByteArray *)readAllWithJavaIoInputStream:(JavaIoInputStream *)inStr;

+ (IOSByteArray *)readAllLimitedWithJavaIoInputStream:(JavaIoInputStream *)inStr
                                              withInt:(jint)limit;

+ (jint)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inStr
                         withByteArray:(IOSByteArray *)buf;

+ (jint)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inStr
                         withByteArray:(IOSByteArray *)buf
                               withInt:(jint)off
                               withInt:(jint)len;

+ (void)writeBufToWithJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)buf
                           withJavaIoOutputStream:(JavaIoOutputStream *)output;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleUtilIoStreams)

FOUNDATION_EXPORT void LibOrgBouncycastleUtilIoStreams_init(LibOrgBouncycastleUtilIoStreams *self);

FOUNDATION_EXPORT LibOrgBouncycastleUtilIoStreams *new_LibOrgBouncycastleUtilIoStreams_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilIoStreams *create_LibOrgBouncycastleUtilIoStreams_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilIoStreams_drainWithJavaIoInputStream_(JavaIoInputStream *inStr);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_(JavaIoInputStream *inStr);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilIoStreams_readAllLimitedWithJavaIoInputStream_withInt_(JavaIoInputStream *inStr, jint limit);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(JavaIoInputStream *inStr, IOSByteArray *buf);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *inStr, IOSByteArray *buf, jint off, jint len);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inStr, JavaIoOutputStream *outStr);

FOUNDATION_EXPORT jlong LibOrgBouncycastleUtilIoStreams_pipeAllLimitedWithJavaIoInputStream_withLong_withJavaIoOutputStream_(JavaIoInputStream *inStr, jlong limit, JavaIoOutputStream *outStr);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilIoStreams_writeBufToWithJavaIoByteArrayOutputStream_withJavaIoOutputStream_(JavaIoByteArrayOutputStream *buf, JavaIoOutputStream *output);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilIoStreams)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Streams_H
