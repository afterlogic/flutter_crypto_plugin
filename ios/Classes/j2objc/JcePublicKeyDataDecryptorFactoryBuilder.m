//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcePublicKeyDataDecryptorFactoryBuilder.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "BCPGKey.h"
#include "CryptlibObjectIdentifiers.h"
#include "DefaultJcaJceHelper.h"
#include "ECCurve.h"
#include "ECDHPublicBCPGKey.h"
#include "ECNamedCurveTable.h"
#include "ECPoint.h"
#include "EdECObjectIdentifiers.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaKeyFingerprintCalculator.h"
#include "JcaPGPKeyConverter.h"
#include "JcePublicKeyDataDecryptorFactoryBuilder.h"
#include "NamedJcaJceHelper.h"
#include "OperatorHelper.h"
#include "PGPDataDecryptor.h"
#include "PGPException.h"
#include "PGPPad.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "ProviderJcaJceHelper.h"
#include "PublicKeyAlgorithmTags.h"
#include "PublicKeyDataDecryptorFactory.h"
#include "PublicKeyPacket.h"
#include "RFC6637Utils.h"
#include "SubjectPublicKeyInfo.h"
#include "UserKeyingMaterialSpec.h"
#include "X9ECParameters.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/KeyFactory.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/PrivateKey.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "java/util/Date.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/KeyAgreement.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/interfaces/DHKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder () {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *helper_;
  LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *contentHelper_;
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *keyConverter_;
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator *fingerprintCalculator_;
}

- (IOSByteArray *)decryptSessionDataWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter:(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *)converter
                                                       withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privKey
                                                                                   withByteArray2:(IOSObjectArray *)secKeyData;

- (IOSByteArray *)decryptSessionDataWithInt:(jint)keyAlgorithm
                 withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privKey
                             withByteArray2:(IOSObjectArray *)secKeyData;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder, helper_, LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder, contentHelper_, LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder, keyConverter_, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder, fingerprintCalculator_, LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withByteArray2_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *converter, LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, IOSObjectArray *secKeyData);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithInt_withJavaSecurityPrivateKey_withByteArray2_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *self, jint keyAlgorithm, id<JavaSecurityPrivateKey> privKey, IOSObjectArray *secKeyData);

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1 : NSObject < LibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory > {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *this$0_;
  id<JavaSecurityPrivateKey> val$privKey_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *)outer$
                                                                            withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)capture$0;

- (IOSByteArray *)recoverSessionDataWithInt:(jint)keyAlgorithm
                             withByteArray2:(IOSObjectArray *)secKeyData;

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor>)createDataDecryptorWithBoolean:(jboolean)withIntegrityPacket
                                                                                withInt:(jint)encAlgorithm
                                                                          withByteArray:(IOSByteArray *)key;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, id<JavaSecurityPrivateKey> capture$0);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, id<JavaSecurityPrivateKey> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, id<JavaSecurityPrivateKey> capture$0);

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2 : NSObject < LibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory > {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *this$0_;
  LibOrgBouncycastleOpenpgpPGPPrivateKey *val$privKey_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *)outer$
                                                            withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)capture$0;

- (IOSByteArray *)recoverSessionDataWithInt:(jint)keyAlgorithm
                             withByteArray2:(IOSObjectArray *)secKeyData;

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor>)createDataDecryptorWithBoolean:(jboolean)withIntegrityPacket
                                                                                withInt:(jint)encAlgorithm
                                                                          withByteArray:(IOSByteArray *)key;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2 *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$0);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2 *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2 *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$0);

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  (void) [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(keyConverter_)) setProviderWithJavaSecurityProvider:provider];
  self->contentHelper_ = helper_;
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *)setProviderWithNSString:(NSString *)providerName {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  (void) [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(keyConverter_)) setProviderWithNSString:providerName];
  self->contentHelper_ = helper_;
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *)setContentProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  self->contentHelper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *)setContentProviderWithNSString:(NSString *)providerName {
  self->contentHelper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  return self;
}

- (id<LibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory>)buildWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privKey {
  return new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_(self, privKey);
}

- (id<LibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory>)buildWithLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privKey {
  return new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(self, privKey);
}

- (IOSByteArray *)decryptSessionDataWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter:(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *)converter
                                                       withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privKey
                                                                                   withByteArray2:(IOSObjectArray *)secKeyData {
  return LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withByteArray2_(self, converter, privKey, secKeyData);
}

- (IOSByteArray *)decryptSessionDataWithInt:(jint)keyAlgorithm
                 withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privKey
                             withByteArray2:(IOSObjectArray *)secKeyData {
  return LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithInt_withJavaSecurityPrivateKey_withByteArray2_(self, keyAlgorithm, privKey, secKeyData);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 7, 8, 9, -1, -1, -1 },
    { NULL, "[B", 0x2, 7, 10, 9, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setProviderWithJavaSecurityProvider:);
  methods[2].selector = @selector(setProviderWithNSString:);
  methods[3].selector = @selector(setContentProviderWithJavaSecurityProvider:);
  methods[4].selector = @selector(setContentProviderWithNSString:);
  methods[5].selector = @selector(buildWithJavaSecurityPrivateKey:);
  methods[6].selector = @selector(buildWithLibOrgBouncycastleOpenpgpPGPPrivateKey:);
  methods[7].selector = @selector(decryptSessionDataWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter:withLibOrgBouncycastleOpenpgpPGPPrivateKey:withByteArray2:);
  methods[8].selector = @selector(decryptSessionDataWithInt:withJavaSecurityPrivateKey:withByteArray2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "contentHelper_", "LLibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyConverter_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fingerprintCalculator_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setProvider", "LJavaSecurityProvider;", "LNSString;", "setContentProvider", "build", "LJavaSecurityPrivateKey;", "LLibOrgBouncycastleOpenpgpPGPPrivateKey;", "decryptSessionData", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter;LLibOrgBouncycastleOpenpgpPGPPrivateKey;[[B", "LLibOrgBouncycastleOpenpgpPGPException;", "ILJavaSecurityPrivateKey;[[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder = { "JcePublicKeyDataDecryptorFactoryBuilder", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_init(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *self) {
  NSObject_init(self);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
  self->contentHelper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
  self->keyConverter_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_init();
  self->fingerprintCalculator_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init();
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder, init)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder, init)
}

IOSByteArray *LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withByteArray2_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *converter, LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, IOSObjectArray *secKeyData) {
  LibOrgBouncycastleBcpgPublicKeyPacket *pubKeyData = [((LibOrgBouncycastleOpenpgpPGPPrivateKey *) nil_chk(privKey)) getPublicKeyPacket];
  LibOrgBouncycastleBcpgECDHPublicBCPGKey *ecKey = (LibOrgBouncycastleBcpgECDHPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(pubKeyData)) getKey], [LibOrgBouncycastleBcpgECDHPublicBCPGKey class]);
  IOSByteArray *enc = IOSObjectArray_Get(nil_chk(secKeyData), 0);
  jint pLen = (((JreLShift32((IOSByteArray_Get(nil_chk(enc), 0) & (jint) 0xff), 8)) + (IOSByteArray_Get(enc, 1) & (jint) 0xff)) + 7) / 8;
  IOSByteArray *pEnc = [IOSByteArray newArrayWithLength:pLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(enc, 2, pEnc, 0, pLen);
  IOSByteArray *keyEnc = [IOSByteArray newArrayWithLength:IOSByteArray_Get(enc, pLen + 2)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(enc, 2 + pLen + 1, keyEnc, 0, keyEnc->size_);
  @try {
    JavaxCryptoKeyAgreement *agreement;
    id<JavaSecurityPublicKey> publicKey;
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleBcpgECDHPublicBCPGKey *) nil_chk(ecKey)) getCurveOID])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers, curvey25519)]) {
      agreement = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(self->helper_)) createKeyAgreementWithNSString:LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getXDHAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket_(pubKeyData)];
      JavaSecurityKeyFactory *keyFact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(self->helper_)) createKeyFactoryWithNSString:@"XDH"];
      publicKey = [((JavaSecurityKeyFactory *) nil_chk(keyFact)) generatePublicWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_([new_LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_X25519)), LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(pEnc, 1, pEnc->size_)) getEncoded])];
    }
    else {
      LibOrgBouncycastleAsn1X9X9ECParameters *x9Params = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([ecKey getCurveOID]);
      LibOrgBouncycastleMathEcECPoint *publicPoint = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9Params)) getCurve])) decodePointWithByteArray:pEnc];
      agreement = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(self->helper_)) createKeyAgreementWithNSString:LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getAgreementAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket_(pubKeyData)];
      publicKey = [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(converter)) getPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(new_LibOrgBouncycastleBcpgPublicKeyPacket_initWithInt_withJavaUtilDate_withLibOrgBouncycastleBcpgBCPGKey_(LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH, new_JavaUtilDate_init(), new_LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_withInt_withInt_([ecKey getCurveOID], publicPoint, [ecKey getHashAlgorithm], [ecKey getSymmetricKeyAlgorithm])), self->fingerprintCalculator_)];
    }
    IOSByteArray *userKeyingMaterial = LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_createUserKeyingMaterialWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(pubKeyData, self->fingerprintCalculator_);
    id<JavaSecurityPrivateKey> privateKey = [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(converter)) getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPrivateKey:privKey];
    [((JavaxCryptoKeyAgreement *) nil_chk(agreement)) init__WithJavaSecurityKey:privateKey withJavaSecuritySpecAlgorithmParameterSpec:new_LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec_initWithByteArray_(userKeyingMaterial)];
    (void) [agreement doPhaseWithJavaSecurityKey:publicKey withBoolean:true];
    id<JavaSecurityKey> key = [agreement generateSecretWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getKeyEncryptionOIDWithInt_([ecKey getSymmetricKeyAlgorithm]))) getId]];
    JavaxCryptoCipher *c = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(self->helper_)) createKeyWrapperWithInt:[ecKey getSymmetricKeyAlgorithm]];
    [((JavaxCryptoCipher *) nil_chk(c)) init__WithInt:JavaxCryptoCipher_UNWRAP_MODE withJavaSecurityKey:key];
    id<JavaSecurityKey> paddedSessionKey = [c unwrapWithByteArray:keyEnc withNSString:@"Session" withInt:JavaxCryptoCipher_SECRET_KEY];
    return LibOrgBouncycastleOpenpgpOperatorPGPPad_unpadSessionDataWithByteArray_([((id<JavaSecurityKey>) nil_chk(paddedSessionKey)) getEncoded]);
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"error setting asymmetric cipher", e);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"error setting asymmetric cipher", e);
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"error setting asymmetric cipher", e);
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"error setting asymmetric cipher", e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"error setting asymmetric cipher", e);
  }
}

IOSByteArray *LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithInt_withJavaSecurityPrivateKey_withByteArray2_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *self, jint keyAlgorithm, id<JavaSecurityPrivateKey> privKey, IOSObjectArray *secKeyData) {
  JavaxCryptoCipher *c1 = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(self->helper_)) createPublicKeyCipherWithInt:keyAlgorithm];
  @try {
    [((JavaxCryptoCipher *) nil_chk(c1)) init__WithInt:JavaxCryptoCipher_DECRYPT_MODE withJavaSecurityKey:privKey];
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"error setting asymmetric cipher", e);
  }
  if (keyAlgorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT || keyAlgorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL) {
    IOSByteArray *bi = IOSObjectArray_Get(nil_chk(secKeyData), 0);
    (void) [c1 updateWithByteArray:bi withInt:2 withInt:((IOSByteArray *) nil_chk(bi))->size_ - 2];
  }
  else {
    id<JavaxCryptoInterfacesDHKey> k = (id<JavaxCryptoInterfacesDHKey>) cast_check(privKey, JavaxCryptoInterfacesDHKey_class_());
    jint size = ([((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk([((id<JavaxCryptoInterfacesDHKey>) nil_chk(k)) getParams])) getP])) bitLength] + 7) / 8;
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:size];
    IOSByteArray *bi = IOSObjectArray_Get(nil_chk(secKeyData), 0);
    if (((IOSByteArray *) nil_chk(bi))->size_ - 2 > size) {
      (void) [c1 updateWithByteArray:bi withInt:3 withInt:bi->size_ - 3];
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bi, 2, tmp, tmp->size_ - (bi->size_ - 2), bi->size_ - 2);
      (void) [c1 updateWithByteArray:tmp];
    }
    bi = IOSObjectArray_Get(secKeyData, 1);
    for (jint i = 0; i != tmp->size_; i++) {
      *IOSByteArray_GetRef(tmp, i) = 0;
    }
    if (((IOSByteArray *) nil_chk(bi))->size_ - 2 > size) {
      (void) [c1 updateWithByteArray:bi withInt:3 withInt:bi->size_ - 3];
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bi, 2, tmp, tmp->size_ - (bi->size_ - 2), bi->size_ - 2);
      (void) [c1 updateWithByteArray:tmp];
    }
  }
  @try {
    return [c1 doFinal];
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"exception decrypting session data", e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder)

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *)outer$
                                                                            withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)capture$0 {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_(self, outer$, capture$0);
  return self;
}

- (IOSByteArray *)recoverSessionDataWithInt:(jint)keyAlgorithm
                             withByteArray2:(IOSObjectArray *)secKeyData {
  if (keyAlgorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"ECDH requires use of PGPPrivateKey for decryption");
  }
  return LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithInt_withJavaSecurityPrivateKey_withByteArray2_(this$0_, keyAlgorithm, val$privKey_, secKeyData);
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor>)createDataDecryptorWithBoolean:(jboolean)withIntegrityPacket
                                                                                withInt:(jint)encAlgorithm
                                                                          withByteArray:(IOSByteArray *)key {
  return [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(this$0_->contentHelper_)) createDataDecryptorWithBoolean:withIntegrityPacket withInt:encAlgorithm withByteArray:key];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor;", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder:withJavaSecurityPrivateKey:);
  methods[1].selector = @selector(recoverSessionDataWithInt:withByteArray2:);
  methods[2].selector = @selector(createDataDecryptorWithBoolean:withInt:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$privKey_", "LJavaSecurityPrivateKey;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "recoverSessionData", "I[[B", "LLibOrgBouncycastleOpenpgpPGPException;", "createDataDecryptor", "ZI[B", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;", "buildWithJavaSecurityPrivateKey:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1 = { "", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x8010, 3, 2, 5, -1, 6, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, id<JavaSecurityPrivateKey> capture$0) {
  self->this$0_ = outer$;
  self->val$privKey_ = capture$0;
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, id<JavaSecurityPrivateKey> capture$0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_, outer$, capture$0)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, id<JavaSecurityPrivateKey> capture$0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withJavaSecurityPrivateKey_, outer$, capture$0)
}

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *)outer$
                                                            withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)capture$0 {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(self, outer$, capture$0);
  return self;
}

- (IOSByteArray *)recoverSessionDataWithInt:(jint)keyAlgorithm
                             withByteArray2:(IOSObjectArray *)secKeyData {
  if (keyAlgorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH) {
    return LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withByteArray2_(this$0_, this$0_->keyConverter_, val$privKey_, secKeyData);
  }
  return LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_decryptSessionDataWithInt_withJavaSecurityPrivateKey_withByteArray2_(this$0_, keyAlgorithm, [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(this$0_->keyConverter_)) getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPrivateKey:val$privKey_], secKeyData);
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor>)createDataDecryptorWithBoolean:(jboolean)withIntegrityPacket
                                                                                withInt:(jint)encAlgorithm
                                                                          withByteArray:(IOSByteArray *)key {
  return [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(this$0_->contentHelper_)) createDataDecryptorWithBoolean:withIntegrityPacket withInt:encAlgorithm withByteArray:key];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor;", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder:withLibOrgBouncycastleOpenpgpPGPPrivateKey:);
  methods[1].selector = @selector(recoverSessionDataWithInt:withByteArray2:);
  methods[2].selector = @selector(createDataDecryptorWithBoolean:withInt:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$privKey_", "LLibOrgBouncycastleOpenpgpPGPPrivateKey;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "recoverSessionData", "I[[B", "LLibOrgBouncycastleOpenpgpPGPException;", "createDataDecryptor", "ZI[B", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder;", "buildWithLibOrgBouncycastleOpenpgpPGPPrivateKey:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2 = { "", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x8010, 3, 2, 5, -1, 6, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2 *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$0) {
  self->this$0_ = outer$;
  self->val$privKey_ = capture$0;
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2 *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_, outer$, capture$0)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2 *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPrivateKey *capture$0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_2, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_withLibOrgBouncycastleOpenpgpPGPPrivateKey_, outer$, capture$0)
}
