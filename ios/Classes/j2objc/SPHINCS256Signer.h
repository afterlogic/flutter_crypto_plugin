//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Signer.java
//

#ifndef SPHINCS256Signer_H
#define SPHINCS256Signer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "MessageSigner.h"

@class IOSByteArray;
@class LibOrgBouncycastlePqcCryptoSphincsHashFunctions;
@class LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer : NSObject < LibOrgBouncycastlePqcCryptoMessageSigner >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)nDigest
                              withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)twoNDigest;

- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message;

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature;

#pragma mark Package-Private

+ (void)compute_authpath_wotsWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                                   withByteArray:(IOSByteArray *)root
                                                                   withByteArray:(IOSByteArray *)authpath
                                                                         withInt:(jint)authOff
                             withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *)a
                                                                   withByteArray:(IOSByteArray *)sk
                                                                   withByteArray:(IOSByteArray *)masks
                                                                         withInt:(jint)height;

- (IOSByteArray *)crypto_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                                   withByteArray:(IOSByteArray *)m
                                                                   withByteArray:(IOSByteArray *)sk;

+ (void)validate_authpathWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                               withByteArray:(IOSByteArray *)root
                                                               withByteArray:(IOSByteArray *)leaf
                                                                     withInt:(jint)leafidx
                                                               withByteArray:(IOSByteArray *)authpath
                                                                     withInt:(jint)auOff
                                                               withByteArray:(IOSByteArray *)masks
                                                                     withInt:(jint)height;

- (jboolean)verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                        withByteArray:(IOSByteArray *)m
                                                        withByteArray:(IOSByteArray *)sm
                                                        withByteArray:(IOSByteArray *)pk;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer *self, id<LibOrgBouncycastleCryptoDigest> nDigest, id<LibOrgBouncycastleCryptoDigest> twoNDigest);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer *new_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> nDigest, id<LibOrgBouncycastleCryptoDigest> twoNDigest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer *create_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> nDigest, id<LibOrgBouncycastleCryptoDigest> twoNDigest);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_validate_authpathWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *root, IOSByteArray *leaf, jint leafidx, IOSByteArray *authpath, jint auOff, IOSByteArray *masks, jint height);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_compute_authpath_wotsWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withLibOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withByteArray_withInt_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *root, IOSByteArray *authpath, jint authOff, LibOrgBouncycastlePqcCryptoSphincsTree_leafaddr *a, IOSByteArray *sk, IOSByteArray *masks, jint height);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Signer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SPHINCS256Signer_H
