//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/QTESLAKeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "PqcCryptoQTESLA.h"
#include "QTESLAKeyGenerationParameters.h"
#include "QTESLAKeyPairGenerator.h"
#include "QTESLAPrivateKeyParameters.h"
#include "QTESLAPublicKeyParameters.h"
#include "QTESLASecurityCategory.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator () {
 @public
  jint securityCategory_;
  JavaSecuritySecureRandom *secureRandom_;
}

- (IOSByteArray *)allocatePrivateWithInt:(jint)securityCategory OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)allocatePublicWithInt:(jint)securityCategory OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator, secureRandom_, JavaSecuritySecureRandom *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_allocatePrivateWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *self, jint securityCategory);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_allocatePublicWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *self, jint securityCategory);

@implementation LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters *parameters = (LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters class]);
  self->secureRandom_ = [((LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters *) nil_chk(parameters)) getRandom];
  self->securityCategory_ = [parameters getSecurityCategory];
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  IOSByteArray *privateKey = LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_allocatePrivateWithInt_(self, securityCategory_);
  IOSByteArray *publicKey = LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_allocatePublicWithInt_(self, securityCategory_);
  switch (securityCategory_) {
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_I:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom_);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SIZE:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIISizeWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom_);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SPEED:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIISpeedWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom_);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_I:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIPWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom_);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_III:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIIPWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom_);
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown security category: ", securityCategory_));
  }
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters_initWithInt_withByteArray_(securityCategory_, publicKey), new_LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters_initWithInt_withByteArray_(securityCategory_, privateKey));
}

- (IOSByteArray *)allocatePrivateWithInt:(jint)securityCategory {
  return LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_allocatePrivateWithInt_(self, securityCategory);
}

- (IOSByteArray *)allocatePublicWithInt:(jint)securityCategory {
  return LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_allocatePublicWithInt_(self, securityCategory);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(allocatePrivateWithInt:);
  methods[4].selector = @selector(allocatePublicWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "securityCategory_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "secureRandom_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;", "allocatePrivate", "I", "allocatePublic" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator = { "QTESLAKeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_init(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator, init)
}

IOSByteArray *LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_allocatePrivateWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *self, jint securityCategory) {
  return [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getPrivateSizeWithInt_(securityCategory)];
}

IOSByteArray *LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_allocatePublicWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *self, jint securityCategory) {
  return [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getPublicSizeWithInt_(securityCategory)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator)
