//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/DerUtil.java
//

#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "Arrays.h"
#include "DEROctetString.h"
#include "DerUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"

@interface LibOrgBouncycastleCryptoUtilDerUtil_1 : JavaLangIllegalStateException {
 @public
  JavaIoIOException *val$e_;
}

- (instancetype)initWithJavaIoIOException:(JavaIoIOException *)capture$0
                             withNSString:(NSString *)x0;

- (JavaLangThrowable *)getCause;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilDerUtil_1)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilDerUtil_1_initWithJavaIoIOException_withNSString_(LibOrgBouncycastleCryptoUtilDerUtil_1 *self, JavaIoIOException *capture$0, NSString *x0);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilDerUtil_1 *new_LibOrgBouncycastleCryptoUtilDerUtil_1_initWithJavaIoIOException_withNSString_(JavaIoIOException *capture$0, NSString *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilDerUtil_1 *create_LibOrgBouncycastleCryptoUtilDerUtil_1_initWithJavaIoIOException_withNSString_(JavaIoIOException *capture$0, NSString *x0);

@implementation LibOrgBouncycastleCryptoUtilDerUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilDerUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleAsn1ASN1OctetString *)getOctetStringWithByteArray:(IOSByteArray *)data {
  return LibOrgBouncycastleCryptoUtilDerUtil_getOctetStringWithByteArray_(data);
}

+ (IOSByteArray *)toByteArrayWithLibOrgBouncycastleAsn1ASN1Primitive:(LibOrgBouncycastleAsn1ASN1Primitive *)primitive {
  return LibOrgBouncycastleCryptoUtilDerUtil_toByteArrayWithLibOrgBouncycastleAsn1ASN1Primitive_(primitive);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1OctetString;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getOctetStringWithByteArray:);
  methods[2].selector = @selector(toByteArrayWithLibOrgBouncycastleAsn1ASN1Primitive:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getOctetString", "[B", "toByteArray", "LLibOrgBouncycastleAsn1ASN1Primitive;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilDerUtil = { "DerUtil", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilDerUtil;
}

@end

void LibOrgBouncycastleCryptoUtilDerUtil_init(LibOrgBouncycastleCryptoUtilDerUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoUtilDerUtil *new_LibOrgBouncycastleCryptoUtilDerUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilDerUtil, init)
}

LibOrgBouncycastleCryptoUtilDerUtil *create_LibOrgBouncycastleCryptoUtilDerUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilDerUtil, init)
}

LibOrgBouncycastleAsn1ASN1OctetString *LibOrgBouncycastleCryptoUtilDerUtil_getOctetStringWithByteArray_(IOSByteArray *data) {
  LibOrgBouncycastleCryptoUtilDerUtil_initialize();
  if (data == nil) {
    return new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_([IOSByteArray newArrayWithLength:0]);
  }
  return new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(LibOrgBouncycastleUtilArrays_cloneWithByteArray_(data));
}

IOSByteArray *LibOrgBouncycastleCryptoUtilDerUtil_toByteArrayWithLibOrgBouncycastleAsn1ASN1Primitive_(LibOrgBouncycastleAsn1ASN1Primitive *primitive) {
  LibOrgBouncycastleCryptoUtilDerUtil_initialize();
  @try {
    return [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk(primitive)) getEncoded];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleCryptoUtilDerUtil_1_initWithJavaIoIOException_withNSString_(e, JreStrcat("$$", @"Cannot get encoding: ", [e getMessage]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilDerUtil)

@implementation LibOrgBouncycastleCryptoUtilDerUtil_1

- (instancetype)initWithJavaIoIOException:(JavaIoIOException *)capture$0
                             withNSString:(NSString *)x0 {
  LibOrgBouncycastleCryptoUtilDerUtil_1_initWithJavaIoIOException_withNSString_(self, capture$0, x0);
  return self;
}

- (JavaLangThrowable *)getCause {
  return val$e_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoIOException:withNSString:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LJavaIoIOException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LLibOrgBouncycastleCryptoUtilDerUtil;", "toByteArrayWithLibOrgBouncycastleAsn1ASN1Primitive:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilDerUtil_1 = { "", "lib.org.bouncycastle.crypto.util", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilDerUtil_1;
}

@end

void LibOrgBouncycastleCryptoUtilDerUtil_1_initWithJavaIoIOException_withNSString_(LibOrgBouncycastleCryptoUtilDerUtil_1 *self, JavaIoIOException *capture$0, NSString *x0) {
  self->val$e_ = capture$0;
  JavaLangIllegalStateException_initWithNSString_(self, x0);
}

LibOrgBouncycastleCryptoUtilDerUtil_1 *new_LibOrgBouncycastleCryptoUtilDerUtil_1_initWithJavaIoIOException_withNSString_(JavaIoIOException *capture$0, NSString *x0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilDerUtil_1, initWithJavaIoIOException_withNSString_, capture$0, x0)
}

LibOrgBouncycastleCryptoUtilDerUtil_1 *create_LibOrgBouncycastleCryptoUtilDerUtil_1_initWithJavaIoIOException_withNSString_(JavaIoIOException *capture$0, NSString *x0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilDerUtil_1, initWithJavaIoIOException_withNSString_, capture$0, x0)
}
