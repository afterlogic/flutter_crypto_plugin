//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/decryption_verification/OpenPgpMetadata.java
//

#include "CompressionAlgorithm.h"
#include "J2ObjC_source.h"
#include "OpenPgpMetadata.h"
#include "OpenPgpV4Fingerprint.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "SymmetricKeyAlgorithm.h"
#include "java/lang/Long.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"

@interface LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata () {
 @public
  id<JavaUtilSet> recipientKeyIds_;
  LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *decryptionFingerprint_;
  id<JavaUtilSet> unverifiedSignatureKeyIds_;
  id<JavaUtilSet> verifiedSignaturesFingerprints_;
  LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *symmetricKeyAlgorithm_;
  LibComAfterlogicPgpAlgorithmCompressionAlgorithm *compressionAlgorithm_;
  jboolean integrityProtected_;
}

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata, recipientKeyIds_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata, decryptionFingerprint_, LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata, unverifiedSignatureKeyIds_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata, verifiedSignaturesFingerprints_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata, symmetricKeyAlgorithm_, LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata, compressionAlgorithm_, LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)

@interface LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder () {
 @public
  id<JavaUtilSet> recipientFingerprints_;
  LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *decryptionFingerprint_;
  id<JavaUtilSet> unverifiedSignatureKeyIds_;
  id<JavaUtilSet> verifiedSignatureFingerprints_;
  LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *symmetricKeyAlgorithm_;
  LibComAfterlogicPgpAlgorithmCompressionAlgorithm *compressionAlgorithm_;
  jboolean integrityProtected_;
}

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder, recipientFingerprints_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder, decryptionFingerprint_, LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder, unverifiedSignatureKeyIds_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder, verifiedSignatureFingerprints_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder, symmetricKeyAlgorithm_, LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder, compressionAlgorithm_, LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)

@implementation LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)recipientKeyIds
withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:(LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *)decryptionFingerprint
withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm:(LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *)symmetricKeyAlgorithm
withLibComAfterlogicPgpAlgorithmCompressionAlgorithm:(LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)algorithm
                        withBoolean:(jboolean)integrityProtected
                    withJavaUtilSet:(id<JavaUtilSet>)unverifiedSignatureKeyIds
                    withJavaUtilSet:(id<JavaUtilSet>)verifiedSignaturesFingerprints {
  LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_initWithJavaUtilSet_withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint_withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm_withLibComAfterlogicPgpAlgorithmCompressionAlgorithm_withBoolean_withJavaUtilSet_withJavaUtilSet_(self, recipientKeyIds, decryptionFingerprint, symmetricKeyAlgorithm, algorithm, integrityProtected, unverifiedSignatureKeyIds, verifiedSignaturesFingerprints);
  return self;
}

- (id<JavaUtilSet>)getRecipientKeyIds {
  return recipientKeyIds_;
}

- (jboolean)isEncrypted {
  return ![((id<JavaUtilSet>) nil_chk([self getRecipientKeyIds])) isEmpty];
}

- (LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *)getDecryptionFingerprint {
  return decryptionFingerprint_;
}

- (LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *)getSymmetricKeyAlgorithm {
  return symmetricKeyAlgorithm_;
}

- (LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)getCompressionAlgorithm {
  return compressionAlgorithm_;
}

- (jboolean)isIntegrityProtected {
  return integrityProtected_;
}

- (id<JavaUtilSet>)getAllSignatureKeyFingerprints {
  return unverifiedSignatureKeyIds_;
}

- (jboolean)isSigned {
  return ![((id<JavaUtilSet>) nil_chk(unverifiedSignatureKeyIds_)) isEmpty];
}

- (id<JavaUtilSet>)getVerifiedSignaturesFingerprints {
  return verifiedSignaturesFingerprints_;
}

- (jboolean)isVerified {
  return ![((id<JavaUtilSet>) nil_chk(verifiedSignaturesFingerprints_)) isEmpty];
}

- (jboolean)containsVerifiedSignatureFromWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)publicKeys {
  for (LibOrgBouncycastleOpenpgpPGPPublicKey * __strong key in nil_chk(publicKeys)) {
    LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *fingerprint = new_LibComAfterlogicPgpKeyOpenPgpV4Fingerprint_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(key);
    if ([self containsVerifiedSignatureFromWithLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:fingerprint]) {
      return true;
    }
  }
  return false;
}

- (jboolean)containsVerifiedSignatureFromWithLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:(LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *)fingerprint {
  return [((id<JavaUtilSet>) nil_chk(verifiedSignaturesFingerprints_)) containsWithId:fingerprint];
}

+ (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)getBuilder {
  return LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_getBuilder();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyOpenPgpV4Fingerprint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", 0x8, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilSet:withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm:withLibComAfterlogicPgpAlgorithmCompressionAlgorithm:withBoolean:withJavaUtilSet:withJavaUtilSet:);
  methods[1].selector = @selector(getRecipientKeyIds);
  methods[2].selector = @selector(isEncrypted);
  methods[3].selector = @selector(getDecryptionFingerprint);
  methods[4].selector = @selector(getSymmetricKeyAlgorithm);
  methods[5].selector = @selector(getCompressionAlgorithm);
  methods[6].selector = @selector(isIntegrityProtected);
  methods[7].selector = @selector(getAllSignatureKeyFingerprints);
  methods[8].selector = @selector(isSigned);
  methods[9].selector = @selector(getVerifiedSignaturesFingerprints);
  methods[10].selector = @selector(isVerified);
  methods[11].selector = @selector(containsVerifiedSignatureFromWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing:);
  methods[12].selector = @selector(containsVerifiedSignatureFromWithLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:);
  methods[13].selector = @selector(getBuilder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "recipientKeyIds_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "decryptionFingerprint_", "LLibComAfterlogicPgpKeyOpenPgpV4Fingerprint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "unverifiedSignatureKeyIds_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "verifiedSignaturesFingerprints_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "symmetricKeyAlgorithm_", "LLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "compressionAlgorithm_", "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "integrityProtected_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilSet;LLibComAfterlogicPgpKeyOpenPgpV4Fingerprint;LLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm;LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;ZLJavaUtilSet;LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/Long;>;Llib/com/afterlogic/pgp/key/OpenPgpV4Fingerprint;Llib/com/afterlogic/pgp/algorithm/SymmetricKeyAlgorithm;Llib/com/afterlogic/pgp/algorithm/CompressionAlgorithm;ZLjava/util/Set<Ljava/lang/Long;>;Ljava/util/Set<Llib/com/afterlogic/pgp/key/OpenPgpV4Fingerprint;>;)V", "()Ljava/util/Set<Ljava/lang/Long;>;", "()Ljava/util/Set<Llib/com/afterlogic/pgp/key/OpenPgpV4Fingerprint;>;", "containsVerifiedSignatureFrom", "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", "LLibComAfterlogicPgpKeyOpenPgpV4Fingerprint;", "Ljava/util/Set<Ljava/lang/Long;>;", "Ljava/util/Set<Llib/com/afterlogic/pgp/key/OpenPgpV4Fingerprint;>;", "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata = { "OpenPgpMetadata", "lib.com.afterlogic.pgp.decryption_verification", ptrTable, methods, fields, 7, 0x1, 14, 7, -1, 9, -1, -1, -1 };
  return &_LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata;
}

@end

void LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_initWithJavaUtilSet_withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint_withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm_withLibComAfterlogicPgpAlgorithmCompressionAlgorithm_withBoolean_withJavaUtilSet_withJavaUtilSet_(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata *self, id<JavaUtilSet> recipientKeyIds, LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *decryptionFingerprint, LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *symmetricKeyAlgorithm, LibComAfterlogicPgpAlgorithmCompressionAlgorithm *algorithm, jboolean integrityProtected, id<JavaUtilSet> unverifiedSignatureKeyIds, id<JavaUtilSet> verifiedSignaturesFingerprints) {
  NSObject_init(self);
  self->recipientKeyIds_ = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(recipientKeyIds);
  self->decryptionFingerprint_ = decryptionFingerprint;
  self->symmetricKeyAlgorithm_ = symmetricKeyAlgorithm;
  self->compressionAlgorithm_ = algorithm;
  self->integrityProtected_ = integrityProtected;
  self->unverifiedSignatureKeyIds_ = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(unverifiedSignatureKeyIds);
  self->verifiedSignaturesFingerprints_ = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(verifiedSignaturesFingerprints);
}

LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata *new_LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_initWithJavaUtilSet_withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint_withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm_withLibComAfterlogicPgpAlgorithmCompressionAlgorithm_withBoolean_withJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> recipientKeyIds, LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *decryptionFingerprint, LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *symmetricKeyAlgorithm, LibComAfterlogicPgpAlgorithmCompressionAlgorithm *algorithm, jboolean integrityProtected, id<JavaUtilSet> unverifiedSignatureKeyIds, id<JavaUtilSet> verifiedSignaturesFingerprints) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata, initWithJavaUtilSet_withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint_withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm_withLibComAfterlogicPgpAlgorithmCompressionAlgorithm_withBoolean_withJavaUtilSet_withJavaUtilSet_, recipientKeyIds, decryptionFingerprint, symmetricKeyAlgorithm, algorithm, integrityProtected, unverifiedSignatureKeyIds, verifiedSignaturesFingerprints)
}

LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata *create_LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_initWithJavaUtilSet_withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint_withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm_withLibComAfterlogicPgpAlgorithmCompressionAlgorithm_withBoolean_withJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> recipientKeyIds, LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *decryptionFingerprint, LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *symmetricKeyAlgorithm, LibComAfterlogicPgpAlgorithmCompressionAlgorithm *algorithm, jboolean integrityProtected, id<JavaUtilSet> unverifiedSignatureKeyIds, id<JavaUtilSet> verifiedSignaturesFingerprints) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata, initWithJavaUtilSet_withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint_withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm_withLibComAfterlogicPgpAlgorithmCompressionAlgorithm_withBoolean_withJavaUtilSet_withJavaUtilSet_, recipientKeyIds, decryptionFingerprint, symmetricKeyAlgorithm, algorithm, integrityProtected, unverifiedSignatureKeyIds, verifiedSignaturesFingerprints)
}

LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_getBuilder() {
  LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_initialize();
  return new_LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata)

@implementation LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)addRecipientKeyIdWithJavaLangLong:(JavaLangLong *)keyId {
  [((id<JavaUtilSet>) nil_chk(self->recipientFingerprints_)) addWithId:keyId];
  return self;
}

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)setDecryptionFingerprintWithLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:(LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *)fingerprint {
  self->decryptionFingerprint_ = fingerprint;
  return self;
}

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)setCompressionAlgorithmWithLibComAfterlogicPgpAlgorithmCompressionAlgorithm:(LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)algorithm {
  self->compressionAlgorithm_ = algorithm;
  return self;
}

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)addUnverifiedSignatureKeyIdWithJavaLangLong:(JavaLangLong *)keyId {
  [((id<JavaUtilSet>) nil_chk(self->unverifiedSignatureKeyIds_)) addWithId:keyId];
  return self;
}

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)addVerifiedSignatureFingerprintWithLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:(LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *)fingerprint {
  [((id<JavaUtilSet>) nil_chk(self->verifiedSignatureFingerprints_)) addWithId:fingerprint];
  return self;
}

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)setSymmetricKeyAlgorithmWithLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm:(LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *)symmetricKeyAlgorithm {
  self->symmetricKeyAlgorithm_ = symmetricKeyAlgorithm;
  return self;
}

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *)setIntegrityProtectedWithBoolean:(jboolean)integrityProtected {
  self->integrityProtected_ = integrityProtected;
  return self;
}

- (LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata *)build {
  return new_LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_initWithJavaUtilSet_withLibComAfterlogicPgpKeyOpenPgpV4Fingerprint_withLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm_withLibComAfterlogicPgpAlgorithmCompressionAlgorithm_withBoolean_withJavaUtilSet_withJavaUtilSet_(recipientFingerprints_, decryptionFingerprint_, symmetricKeyAlgorithm_, compressionAlgorithm_, integrityProtected_, unverifiedSignatureKeyIds_, verifiedSignatureFingerprints_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addRecipientKeyIdWithJavaLangLong:);
  methods[2].selector = @selector(setDecryptionFingerprintWithLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:);
  methods[3].selector = @selector(setCompressionAlgorithmWithLibComAfterlogicPgpAlgorithmCompressionAlgorithm:);
  methods[4].selector = @selector(addUnverifiedSignatureKeyIdWithJavaLangLong:);
  methods[5].selector = @selector(addVerifiedSignatureFingerprintWithLibComAfterlogicPgpKeyOpenPgpV4Fingerprint:);
  methods[6].selector = @selector(setSymmetricKeyAlgorithmWithLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm:);
  methods[7].selector = @selector(setIntegrityProtectedWithBoolean:);
  methods[8].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "recipientFingerprints_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "decryptionFingerprint_", "LLibComAfterlogicPgpKeyOpenPgpV4Fingerprint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unverifiedSignatureKeyIds_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "verifiedSignatureFingerprints_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "symmetricKeyAlgorithm_", "LLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compressionAlgorithm_", "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "integrityProtected_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addRecipientKeyId", "LJavaLangLong;", "setDecryptionFingerprint", "LLibComAfterlogicPgpKeyOpenPgpV4Fingerprint;", "setCompressionAlgorithm", "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", "addUnverifiedSignatureKeyId", "addVerifiedSignatureFingerprint", "setSymmetricKeyAlgorithm", "LLibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm;", "setIntegrityProtected", "Z", "Ljava/util/Set<Ljava/lang/Long;>;", "Ljava/util/Set<Llib/com/afterlogic/pgp/key/OpenPgpV4Fingerprint;>;", "LLibComAfterlogicPgpDecryption_verificationOpenPgpMetadata;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder = { "Builder", "lib.com.afterlogic.pgp.decryption_verification", ptrTable, methods, fields, 7, 0x8, 9, 7, 14, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder;
}

@end

void LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_init(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *self) {
  NSObject_init(self);
  self->recipientFingerprints_ = new_JavaUtilHashSet_init();
  self->unverifiedSignatureKeyIds_ = new_JavaUtilHashSet_init();
  self->verifiedSignatureFingerprints_ = new_JavaUtilHashSet_init();
  self->symmetricKeyAlgorithm_ = JreLoadEnum(LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm, NULL);
  self->compressionAlgorithm_ = JreLoadEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, UNCOMPRESSED);
  self->integrityProtected_ = false;
}

LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *new_LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_init() {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder, init)
}

LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder *create_LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder_init() {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpDecryption_verificationOpenPgpMetadata_Builder)
