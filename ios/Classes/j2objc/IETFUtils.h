//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x500/style/IETFUtils.java
//

#ifndef IETFUtils_H
#define IETFUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaLangStringBuffer;
@class JavaUtilHashtable;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1X500AttributeTypeAndValue;
@class LibOrgBouncycastleAsn1X500RDN;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;
@protocol LibOrgBouncycastleAsn1X500X500NameStyle;

@interface LibOrgBouncycastleAsn1X500StyleIETFUtils : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)appendRDNWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
        withLibOrgBouncycastleAsn1X500RDN:(LibOrgBouncycastleAsn1X500RDN *)rdn
                    withJavaUtilHashtable:(JavaUtilHashtable *)oidSymbols;

+ (void)appendTypeAndValueWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
withLibOrgBouncycastleAsn1X500AttributeTypeAndValue:(LibOrgBouncycastleAsn1X500AttributeTypeAndValue *)typeAndValue
                             withJavaUtilHashtable:(JavaUtilHashtable *)oidSymbols;

+ (NSString *)canonicalizeWithNSString:(NSString *)s;

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)decodeAttrNameWithNSString:(NSString *)name
                                                     withJavaUtilHashtable:(JavaUtilHashtable *)lookUp;

+ (IOSObjectArray *)findAttrNamesForOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                                withJavaUtilHashtable:(JavaUtilHashtable *)lookup;

+ (jboolean)rDNAreEqualWithLibOrgBouncycastleAsn1X500RDN:(LibOrgBouncycastleAsn1X500RDN *)rdn1
                       withLibOrgBouncycastleAsn1X500RDN:(LibOrgBouncycastleAsn1X500RDN *)rdn2;

+ (IOSObjectArray *)rDNsFromStringWithNSString:(NSString *)name
   withLibOrgBouncycastleAsn1X500X500NameStyle:(id<LibOrgBouncycastleAsn1X500X500NameStyle>)x500Style;

+ (NSString *)stripInternalSpacesWithNSString:(NSString *)str;

+ (id<LibOrgBouncycastleAsn1ASN1Encodable>)valueFromHexStringWithNSString:(NSString *)str
                                                                  withInt:(jint)off;

+ (NSString *)valueToStringWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)value;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X500StyleIETFUtils)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X500StyleIETFUtils_init(LibOrgBouncycastleAsn1X500StyleIETFUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X500StyleIETFUtils *new_LibOrgBouncycastleAsn1X500StyleIETFUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X500StyleIETFUtils *create_LibOrgBouncycastleAsn1X500StyleIETFUtils_init(void);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleAsn1X500StyleIETFUtils_rDNsFromStringWithNSString_withLibOrgBouncycastleAsn1X500X500NameStyle_(NSString *name, id<LibOrgBouncycastleAsn1X500X500NameStyle> x500Style);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleAsn1X500StyleIETFUtils_findAttrNamesForOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilHashtable_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, JavaUtilHashtable *lookup);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1X500StyleIETFUtils_decodeAttrNameWithNSString_withJavaUtilHashtable_(NSString *name, JavaUtilHashtable *lookUp);

FOUNDATION_EXPORT id<LibOrgBouncycastleAsn1ASN1Encodable> LibOrgBouncycastleAsn1X500StyleIETFUtils_valueFromHexStringWithNSString_withInt_(NSString *str, jint off);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X500StyleIETFUtils_appendRDNWithJavaLangStringBuffer_withLibOrgBouncycastleAsn1X500RDN_withJavaUtilHashtable_(JavaLangStringBuffer *buf, LibOrgBouncycastleAsn1X500RDN *rdn, JavaUtilHashtable *oidSymbols);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withLibOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(JavaLangStringBuffer *buf, LibOrgBouncycastleAsn1X500AttributeTypeAndValue *typeAndValue, JavaUtilHashtable *oidSymbols);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithLibOrgBouncycastleAsn1ASN1Encodable_(id<LibOrgBouncycastleAsn1ASN1Encodable> value);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleAsn1X500StyleIETFUtils_canonicalizeWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleAsn1X500StyleIETFUtils_stripInternalSpacesWithNSString_(NSString *str);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleAsn1X500StyleIETFUtils_rDNAreEqualWithLibOrgBouncycastleAsn1X500RDN_withLibOrgBouncycastleAsn1X500RDN_(LibOrgBouncycastleAsn1X500RDN *rdn1, LibOrgBouncycastleAsn1X500RDN *rdn2);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X500StyleIETFUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // IETFUtils_H
