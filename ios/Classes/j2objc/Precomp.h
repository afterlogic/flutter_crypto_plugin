//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/newhope/Precomp.java
//

#ifndef Precomp_H
#define Precomp_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSShortArray;

@interface LibOrgBouncycastlePqcCryptoNewhopePrecomp : NSObject
@property (readonly, class) IOSShortArray *OMEGAS_MONTGOMERY NS_SWIFT_NAME(OMEGAS_MONTGOMERY);
@property (readonly, class) IOSShortArray *OMEGAS_INV_MONTGOMERY NS_SWIFT_NAME(OMEGAS_INV_MONTGOMERY);
@property (readonly, class) IOSShortArray *PSIS_BITREV_MONTGOMERY NS_SWIFT_NAME(PSIS_BITREV_MONTGOMERY);
@property (readonly, class) IOSShortArray *PSIS_INV_MONTGOMERY NS_SWIFT_NAME(PSIS_INV_MONTGOMERY);

+ (IOSShortArray *)OMEGAS_MONTGOMERY;

+ (IOSShortArray *)OMEGAS_INV_MONTGOMERY;

+ (IOSShortArray *)PSIS_BITREV_MONTGOMERY;

+ (IOSShortArray *)PSIS_INV_MONTGOMERY;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcCryptoNewhopePrecomp)

inline IOSShortArray *LibOrgBouncycastlePqcCryptoNewhopePrecomp_get_OMEGAS_MONTGOMERY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastlePqcCryptoNewhopePrecomp_OMEGAS_MONTGOMERY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoNewhopePrecomp, OMEGAS_MONTGOMERY, IOSShortArray *)

inline IOSShortArray *LibOrgBouncycastlePqcCryptoNewhopePrecomp_get_OMEGAS_INV_MONTGOMERY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastlePqcCryptoNewhopePrecomp_OMEGAS_INV_MONTGOMERY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoNewhopePrecomp, OMEGAS_INV_MONTGOMERY, IOSShortArray *)

inline IOSShortArray *LibOrgBouncycastlePqcCryptoNewhopePrecomp_get_PSIS_BITREV_MONTGOMERY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastlePqcCryptoNewhopePrecomp_PSIS_BITREV_MONTGOMERY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoNewhopePrecomp, PSIS_BITREV_MONTGOMERY, IOSShortArray *)

inline IOSShortArray *LibOrgBouncycastlePqcCryptoNewhopePrecomp_get_PSIS_INV_MONTGOMERY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastlePqcCryptoNewhopePrecomp_PSIS_INV_MONTGOMERY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoNewhopePrecomp, PSIS_INV_MONTGOMERY, IOSShortArray *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopePrecomp_init(LibOrgBouncycastlePqcCryptoNewhopePrecomp *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNewhopePrecomp *new_LibOrgBouncycastlePqcCryptoNewhopePrecomp_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNewhopePrecomp *create_LibOrgBouncycastlePqcCryptoNewhopePrecomp_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoNewhopePrecomp)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Precomp_H
