//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SignatureAlgorithm.java
//

#include "J2ObjC_source.h"
#include "SignatureAlgorithm.h"

@implementation LibOrgBouncycastleCryptoTlsSignatureAlgorithm

+ (jshort)anonymous {
  return LibOrgBouncycastleCryptoTlsSignatureAlgorithm_anonymous;
}

+ (jshort)rsa {
  return LibOrgBouncycastleCryptoTlsSignatureAlgorithm_rsa;
}

+ (jshort)dsa {
  return LibOrgBouncycastleCryptoTlsSignatureAlgorithm_dsa;
}

+ (jshort)ecdsa {
  return LibOrgBouncycastleCryptoTlsSignatureAlgorithm_ecdsa;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsSignatureAlgorithm_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "anonymous", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsSignatureAlgorithm_anonymous, 0x19, -1, -1, -1, -1 },
    { "rsa", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsSignatureAlgorithm_rsa, 0x19, -1, -1, -1, -1 },
    { "dsa", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsSignatureAlgorithm_dsa, 0x19, -1, -1, -1, -1 },
    { "ecdsa", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsSignatureAlgorithm_ecdsa, 0x19, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsSignatureAlgorithm = { "SignatureAlgorithm", "lib.org.bouncycastle.crypto.tls", NULL, methods, fields, 7, 0x1, 1, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsSignatureAlgorithm;
}

@end

void LibOrgBouncycastleCryptoTlsSignatureAlgorithm_init(LibOrgBouncycastleCryptoTlsSignatureAlgorithm *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsSignatureAlgorithm *new_LibOrgBouncycastleCryptoTlsSignatureAlgorithm_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsSignatureAlgorithm, init)
}

LibOrgBouncycastleCryptoTlsSignatureAlgorithm *create_LibOrgBouncycastleCryptoTlsSignatureAlgorithm_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsSignatureAlgorithm, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsSignatureAlgorithm)
