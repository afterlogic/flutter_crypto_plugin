//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/util/PqcCryptoPrivateKeyFactory.java
//

#ifndef PqcCryptoPrivateKeyFactory_H
#define PqcCryptoPrivateKeyFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class LibOrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)privateKeyInfoData;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_init(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory *new_LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory *create_LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_init(void);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithByteArray_(IOSByteArray *privateKeyInfoData);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PqcCryptoPrivateKeyFactory_H
