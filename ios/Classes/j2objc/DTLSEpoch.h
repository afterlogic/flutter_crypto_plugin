//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DTLSEpoch.java
//

#ifndef DTLSEpoch_H
#define DTLSEpoch_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoTlsDTLSReplayWindow;
@protocol LibOrgBouncycastleCryptoTlsTlsCipher;

@interface LibOrgBouncycastleCryptoTlsDTLSEpoch : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)epoch
withLibOrgBouncycastleCryptoTlsTlsCipher:(id<LibOrgBouncycastleCryptoTlsTlsCipher>)cipher;

- (jlong)allocateSequenceNumber OBJC_METHOD_FAMILY_NONE;

- (id<LibOrgBouncycastleCryptoTlsTlsCipher>)getCipher;

- (jint)getEpoch;

- (LibOrgBouncycastleCryptoTlsDTLSReplayWindow *)getReplayWindow;

- (jlong)getSequenceNumber;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDTLSEpoch)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDTLSEpoch_initWithInt_withLibOrgBouncycastleCryptoTlsTlsCipher_(LibOrgBouncycastleCryptoTlsDTLSEpoch *self, jint epoch, id<LibOrgBouncycastleCryptoTlsTlsCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDTLSEpoch *new_LibOrgBouncycastleCryptoTlsDTLSEpoch_initWithInt_withLibOrgBouncycastleCryptoTlsTlsCipher_(jint epoch, id<LibOrgBouncycastleCryptoTlsTlsCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDTLSEpoch *create_LibOrgBouncycastleCryptoTlsDTLSEpoch_initWithInt_withLibOrgBouncycastleCryptoTlsTlsCipher_(jint epoch, id<LibOrgBouncycastleCryptoTlsTlsCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDTLSEpoch)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DTLSEpoch_H
