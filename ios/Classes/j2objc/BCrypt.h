//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/BCrypt.java
//

#ifndef BCrypt_H
#define BCrypt_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSCharArray;

@interface LibOrgBouncycastleCryptoGeneratorsBCrypt : NSObject
@property (readonly, class) jint MAGIC_STRING_LENGTH NS_SWIFT_NAME(MAGIC_STRING_LENGTH);
@property (readonly, class) jint SALT_SIZE_BYTES NS_SWIFT_NAME(SALT_SIZE_BYTES);
@property (readonly, class) jint MIN_COST NS_SWIFT_NAME(MIN_COST);
@property (readonly, class) jint MAX_COST NS_SWIFT_NAME(MAX_COST);
@property (readonly, class) jint MAX_PASSWORD_BYTES NS_SWIFT_NAME(MAX_PASSWORD_BYTES);

+ (jint)MAGIC_STRING_LENGTH;

+ (jint)SALT_SIZE_BYTES;

+ (jint)MIN_COST;

+ (jint)MAX_COST;

+ (jint)MAX_PASSWORD_BYTES;

#pragma mark Public

+ (IOSByteArray *)generateWithByteArray:(IOSByteArray *)password
                          withByteArray:(IOSByteArray *)salt
                                withInt:(jint)cost;

+ (IOSByteArray *)passwordToByteArrayWithCharArray:(IOSCharArray *)password;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoGeneratorsBCrypt)

inline jint LibOrgBouncycastleCryptoGeneratorsBCrypt_get_MAGIC_STRING_LENGTH(void);
#define LibOrgBouncycastleCryptoGeneratorsBCrypt_MAGIC_STRING_LENGTH 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsBCrypt, MAGIC_STRING_LENGTH, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsBCrypt_get_SALT_SIZE_BYTES(void);
#define LibOrgBouncycastleCryptoGeneratorsBCrypt_SALT_SIZE_BYTES 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsBCrypt, SALT_SIZE_BYTES, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsBCrypt_get_MIN_COST(void);
#define LibOrgBouncycastleCryptoGeneratorsBCrypt_MIN_COST 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsBCrypt, MIN_COST, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsBCrypt_get_MAX_COST(void);
#define LibOrgBouncycastleCryptoGeneratorsBCrypt_MAX_COST 31
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsBCrypt, MAX_COST, jint)

inline jint LibOrgBouncycastleCryptoGeneratorsBCrypt_get_MAX_PASSWORD_BYTES(void);
#define LibOrgBouncycastleCryptoGeneratorsBCrypt_MAX_PASSWORD_BYTES 72
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoGeneratorsBCrypt, MAX_PASSWORD_BYTES, jint)

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoGeneratorsBCrypt_passwordToByteArrayWithCharArray_(IOSCharArray *password);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoGeneratorsBCrypt_generateWithByteArray_withByteArray_withInt_(IOSByteArray *password, IOSByteArray *salt, jint cost);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoGeneratorsBCrypt)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BCrypt_H
