//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcePGPDataEncryptorBuilder.java
//

#include "DefaultJcaJceHelper.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJcePGPUtil.h"
#include "JcePGPDataEncryptorBuilder.h"
#include "NamedJcaJceHelper.h"
#include "OperatorHelper.h"
#include "PGPDataEncryptor.h"
#include "PGPDigestCalculator.h"
#include "PGPException.h"
#include "ProviderJcaJceHelper.h"
#include "SHA1PGPDigestCalculator.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Provider.h"
#include "java/security/SecureRandom.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/CipherOutputStream.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/spec/IvParameterSpec.h"

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder () {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *helper_;
  JavaSecuritySecureRandom *random_;
  jboolean withIntegrityPacket_;
  jint encAlgorithm_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder, helper_, LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder, random_, JavaSecuritySecureRandom *)

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor : NSObject < LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptor > {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *this$0_;
  JavaxCryptoCipher *c_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *)outer$
                                                                            withByteArray:(IOSByteArray *)keyBytes;

- (JavaIoOutputStream *)getOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)getIntegrityCalculator;

- (jint)getBlockSize;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor, c_, JavaxCryptoCipher *)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor)

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder

- (instancetype)initWithInt:(jint)encAlgorithm {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_initWithInt_(self, encAlgorithm);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *)setWithIntegrityPacketWithBoolean:(jboolean)withIntegrityPacket {
  self->withIntegrityPacket_ = withIntegrityPacket;
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *)setProviderWithNSString:(NSString *)providerName {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  return self;
}

- (jint)getAlgorithm {
  return encAlgorithm_;
}

- (JavaSecuritySecureRandom *)getSecureRandom {
  if (random_ == nil) {
    random_ = new_JavaSecuritySecureRandom_init();
  }
  return random_;
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDataEncryptor>)buildWithByteArray:(IOSByteArray *)keyBytes {
  return new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_(self, keyBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder;", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptor;", 0x1, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(setWithIntegrityPacketWithBoolean:);
  methods[2].selector = @selector(setProviderWithJavaSecurityProvider:);
  methods[3].selector = @selector(setProviderWithNSString:);
  methods[4].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[5].selector = @selector(getAlgorithm);
  methods[6].selector = @selector(getSecureRandom);
  methods[7].selector = @selector(buildWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "withIntegrityPacket_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "setWithIntegrityPacket", "Z", "setProvider", "LJavaSecurityProvider;", "LNSString;", "setSecureRandom", "LJavaSecuritySecureRandom;", "build", "[B", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder = { "JcePGPDataEncryptorBuilder", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, 11, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_initWithInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *self, jint encAlgorithm) {
  NSObject_init(self);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
  self->encAlgorithm_ = encAlgorithm;
  if (encAlgorithm == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"null cipher specified");
  }
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_initWithInt_(jint encAlgorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder, initWithInt_, encAlgorithm)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_initWithInt_(jint encAlgorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder, initWithInt_, encAlgorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder)

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *)outer$
                                                                            withByteArray:(IOSByteArray *)keyBytes {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_(self, outer$, keyBytes);
  return self;
}

- (JavaIoOutputStream *)getOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return new_JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(outArg, c_);
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)getIntegrityCalculator {
  if (this$0_->withIntegrityPacket_) {
    return new_LibOrgBouncycastleOpenpgpOperatorJcajceSHA1PGPDigestCalculator_init();
  }
  return nil;
}

- (jint)getBlockSize {
  return [((JavaxCryptoCipher *) nil_chk(c_)) getBlockSize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder:withByteArray:);
  methods[1].selector = @selector(getOutputStreamWithJavaIoOutputStream:);
  methods[2].selector = @selector(getIntegrityCalculator);
  methods[3].selector = @selector(getBlockSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "c_", "LJavaxCryptoCipher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LLibOrgBouncycastleOpenpgpPGPException;", "getOutputStream", "LJavaIoOutputStream;", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor = { "MyPGPDataEncryptor", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x2, 4, 2, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->c_ = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(outer$->helper_)) createStreamCipherWithInt:outer$->encAlgorithm_ withBoolean:outer$->withIntegrityPacket_];
  @try {
    if (outer$->withIntegrityPacket_) {
      IOSByteArray *iv = [IOSByteArray newArrayWithLength:[((JavaxCryptoCipher *) nil_chk(self->c_)) getBlockSize]];
      [self->c_ init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_makeSymmetricKeyWithInt_withByteArray_(outer$->encAlgorithm_, keyBytes) withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_(iv)];
    }
    else {
      [((JavaxCryptoCipher *) nil_chk(self->c_)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_makeSymmetricKeyWithInt_withByteArray_(outer$->encAlgorithm_, keyBytes)];
    }
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"invalid key: ", [e getMessage]), e);
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"imvalid algorithm parameter: ", [e getMessage]), e);
  }
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_, outer$, keyBytes)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *outer$, IOSByteArray *keyBytes) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_withByteArray_, outer$, keyBytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_MyPGPDataEncryptor)
