//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/newhope/NHOtherInfoGenerator.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "DERBitString.h"
#include "DEROtherInfo.h"
#include "ExchangePair.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "NHAgreement.h"
#include "NHExchangePairGenerator.h"
#include "NHKeyPairGenerator.h"
#include "NHOtherInfoGenerator.h"
#include "NHPublicKeyParameters.h"
#include "PQCObjectIdentifiers.h"
#include "SubjectPublicKeyInfo.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator ()

+ (IOSByteArray *)getEncodedWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters:(LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *)pubKey;

+ (LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *)getPublicKeyWithByteArray:(IOSByteArray *)enc;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getEncodedWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_(LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *pubKey);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getPublicKeyWithByteArray_(IOSByteArray *enc);

@interface LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU () {
 @public
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *aKp_;
  LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *agreement_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU, aKp_, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU, agreement_, LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *)

@implementation LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator

- (instancetype)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algorithmID
                                                        withByteArray:(IOSByteArray *)partyUInfo
                                                        withByteArray:(IOSByteArray *)partyVInfo
                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(self, algorithmID, partyUInfo, partyVInfo, random);
  return self;
}

+ (IOSByteArray *)getEncodedWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters:(LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *)pubKey {
  return LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getEncodedWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_(pubKey);
}

+ (LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *)getPublicKeyWithByteArray:(IOSByteArray *)enc {
  return LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getPublicKeyWithByteArray_(enc);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters;", 0xa, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(getEncodedWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters:);
  methods[2].selector = @selector(getPublicKeyWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "otherInfoBuilder_", "LLibOrgBouncycastleCryptoUtilDEROtherInfo_Builder;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "used_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[B[BLJavaSecuritySecureRandom;", "getEncoded", "LLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters;", "getPublicKey", "[B", "LLibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU;LLibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator = { "NHOtherInfoGenerator", "lib.org.bouncycastle.pqc.crypto.newhope", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, 5, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  NSObject_init(self);
  self->used_ = false;
  self->otherInfoBuilder_ = new_LibOrgBouncycastleCryptoUtilDEROtherInfo_Builder_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_(algorithmID, partyUInfo, partyVInfo);
  self->random_ = random;
}

LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator *new_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_, algorithmID, partyUInfo, partyVInfo, random)
}

LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator *create_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_, algorithmID, partyUInfo, partyVInfo, random)
}

IOSByteArray *LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getEncodedWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_(LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *pubKey) {
  LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_initialize();
  LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *pki;
  @try {
    LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastlePqcAsn1PQCObjectIdentifiers, newHope));
    pki = new_LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(algorithmIdentifier, [((LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) nil_chk(pubKey)) getPubData]);
    return [pki getEncoded];
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
}

LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getPublicKeyWithByteArray_(IOSByteArray *enc) {
  LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_initialize();
  LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *pki = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(enc);
  return new_LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_initWithByteArray_([((LibOrgBouncycastleAsn1DERBitString *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(pki)) getPublicKeyData])) getOctets]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator)

@implementation LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU

- (instancetype)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algorithmID
                                                        withByteArray:(IOSByteArray *)partyUInfo
                                                        withByteArray:(IOSByteArray *)partyVInfo
                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(self, algorithmID, partyUInfo, partyVInfo, random);
  return self;
}

- (LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator *)withSuppPubInfoWithByteArray:(IOSByteArray *)suppPubInfo {
  (void) [((LibOrgBouncycastleCryptoUtilDEROtherInfo_Builder *) nil_chk(self->otherInfoBuilder_)) withSuppPubInfoWithByteArray:suppPubInfo];
  return self;
}

- (IOSByteArray *)getSuppPrivInfoPartA {
  return LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getEncodedWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_((LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(aKp_)) getPublic], [LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters class]));
}

- (LibOrgBouncycastleCryptoUtilDEROtherInfo *)generateWithByteArray:(IOSByteArray *)suppPrivInfoPartB {
  if (used_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"builder already used");
  }
  used_ = true;
  (void) [((LibOrgBouncycastleCryptoUtilDEROtherInfo_Builder *) nil_chk(self->otherInfoBuilder_)) withSuppPrivInfoWithByteArray:[((LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *) nil_chk(agreement_)) calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getPublicKeyWithByteArray_(suppPrivInfoPartB)]];
  return [otherInfoBuilder_ build];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoUtilDEROtherInfo;", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(withSuppPubInfoWithByteArray:);
  methods[2].selector = @selector(getSuppPrivInfoPartA);
  methods[3].selector = @selector(generateWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "aKp_", "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "agreement_", "LLibOrgBouncycastlePqcCryptoNewhopeNHAgreement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[B[BLJavaSecuritySecureRandom;", "withSuppPubInfo", "[B", "generate", "LLibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU = { "PartyU", "lib.org.bouncycastle.pqc.crypto.newhope", ptrTable, methods, fields, 7, 0x9, 4, 2, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU;
}

@end

void LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(self, algorithmID, partyUInfo, partyVInfo, random);
  self->agreement_ = new_LibOrgBouncycastlePqcCryptoNewhopeNHAgreement_init();
  LibOrgBouncycastlePqcCryptoNewhopeNHKeyPairGenerator *kpGen = new_LibOrgBouncycastlePqcCryptoNewhopeNHKeyPairGenerator_init();
  [kpGen init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(random, 2048)];
  self->aKp_ = [kpGen generateKeyPair];
  [((LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *) nil_chk(self->agreement_)) init__WithLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(self->aKp_)) getPrivate]];
}

LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU *new_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_, algorithmID, partyUInfo, partyVInfo, random)
}

LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU *create_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_, algorithmID, partyUInfo, partyVInfo, random)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyU)

@implementation LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV

- (instancetype)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algorithmID
                                                        withByteArray:(IOSByteArray *)partyUInfo
                                                        withByteArray:(IOSByteArray *)partyVInfo
                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(self, algorithmID, partyUInfo, partyVInfo, random);
  return self;
}

- (LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator *)withSuppPubInfoWithByteArray:(IOSByteArray *)suppPubInfo {
  (void) [((LibOrgBouncycastleCryptoUtilDEROtherInfo_Builder *) nil_chk(self->otherInfoBuilder_)) withSuppPubInfoWithByteArray:suppPubInfo];
  return self;
}

- (IOSByteArray *)getSuppPrivInfoPartBWithByteArray:(IOSByteArray *)suppPrivInfoPartA {
  LibOrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator *exchGen = new_LibOrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(random_);
  LibOrgBouncycastlePqcCryptoExchangePair *bEp = [exchGen generateExchangeWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getPublicKeyWithByteArray_(suppPrivInfoPartA)];
  (void) [((LibOrgBouncycastleCryptoUtilDEROtherInfo_Builder *) nil_chk(self->otherInfoBuilder_)) withSuppPrivInfoWithByteArray:[((LibOrgBouncycastlePqcCryptoExchangePair *) nil_chk(bEp)) getSharedValue]];
  return LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_getEncodedWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_((LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) cast_chk([bEp getPublicKey], [LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters class]));
}

- (LibOrgBouncycastleCryptoUtilDEROtherInfo *)generate {
  if (used_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"builder already used");
  }
  used_ = true;
  return [((LibOrgBouncycastleCryptoUtilDEROtherInfo_Builder *) nil_chk(otherInfoBuilder_)) build];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoUtilDEROtherInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(withSuppPubInfoWithByteArray:);
  methods[2].selector = @selector(getSuppPrivInfoPartBWithByteArray:);
  methods[3].selector = @selector(generate);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[B[BLJavaSecuritySecureRandom;", "withSuppPubInfo", "[B", "getSuppPrivInfoPartB", "LLibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV = { "PartyV", "lib.org.bouncycastle.pqc.crypto.newhope", ptrTable, methods, NULL, 7, 0x9, 4, 0, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV;
}

@end

void LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(self, algorithmID, partyUInfo, partyVInfo, random);
}

LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV *new_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_, algorithmID, partyUInfo, partyVInfo, random)
}

LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV *create_LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmID, IOSByteArray *partyUInfo, IOSByteArray *partyVInfo, JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withByteArray_withJavaSecuritySecureRandom_, algorithmID, partyUInfo, partyVInfo, random)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNewhopeNHOtherInfoGenerator_PartyV)
