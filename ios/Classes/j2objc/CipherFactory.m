//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/CipherFactory.java
//

#include "AEADBlockCipher.h"
#include "AESEngine.h"
#include "ASN1Encodable.h"
#include "ASN1Null.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "AlgorithmIdentifierFactory.h"
#include "BlockCipher.h"
#include "BufferedBlockCipher.h"
#include "CAST5CBCParameters.h"
#include "CAST5Engine.h"
#include "CBCBlockCipher.h"
#include "CipherFactory.h"
#include "CipherParameters.h"
#include "CryptoIoCipherOutputStream.h"
#include "DESEngine.h"
#include "DESedeEngine.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KISAObjectIdentifiers.h"
#include "KeyParameter.h"
#include "MiscObjectIdentifiers.h"
#include "NISTObjectIdentifiers.h"
#include "NTTObjectIdentifiers.h"
#include "OIWObjectIdentifiers.h"
#include "PKCS7Padding.h"
#include "PKCSObjectIdentifiers.h"
#include "PaddedBufferedBlockCipher.h"
#include "ParametersWithIV.h"
#include "RC2CBCParameter.h"
#include "RC2Engine.h"
#include "RC2Parameters.h"
#include "RC4Engine.h"
#include "StreamCipher.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoUtilCipherFactory ()

+ (LibOrgBouncycastleCryptoBufferedBlockCipher *)createCipherWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)algorithm;

@end

inline IOSShortArray *LibOrgBouncycastleCryptoUtilCipherFactory_get_rc2Ekb(void);
static IOSShortArray *LibOrgBouncycastleCryptoUtilCipherFactory_rc2Ekb;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilCipherFactory, rc2Ekb, IOSShortArray *)

__attribute__((unused)) static LibOrgBouncycastleCryptoBufferedBlockCipher *LibOrgBouncycastleCryptoUtilCipherFactory_createCipherWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoUtilCipherFactory)

@implementation LibOrgBouncycastleCryptoUtilCipherFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilCipherFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)createContentCipherWithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)encKey
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)encryptionAlgID {
  return LibOrgBouncycastleCryptoUtilCipherFactory_createContentCipherWithBoolean_withLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(forEncryption, encKey, encryptionAlgID);
}

+ (LibOrgBouncycastleCryptoBufferedBlockCipher *)createCipherWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)algorithm {
  return LibOrgBouncycastleCryptoUtilCipherFactory_createCipherWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(algorithm);
}

+ (LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *)createOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)dOut
                                                                                            withId:(id)cipher {
  return LibOrgBouncycastleCryptoUtilCipherFactory_createOutputStreamWithJavaIoOutputStream_withId_(dOut, cipher);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoBufferedBlockCipher;", 0xa, 3, 4, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream;", 0x9, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createContentCipherWithBoolean:withLibOrgBouncycastleCryptoCipherParameters:withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  methods[2].selector = @selector(createCipherWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[3].selector = @selector(createOutputStreamWithJavaIoOutputStream:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rc2Ekb", "[S", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "createContentCipher", "ZLLibOrgBouncycastleCryptoCipherParameters;LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", "LJavaLangIllegalArgumentException;", "createCipher", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "createOutputStream", "LJavaIoOutputStream;LNSObject;", &LibOrgBouncycastleCryptoUtilCipherFactory_rc2Ekb };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilCipherFactory = { "CipherFactory", "lib.org.bouncycastle.crypto.util", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilCipherFactory;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoUtilCipherFactory class]) {
    LibOrgBouncycastleCryptoUtilCipherFactory_rc2Ekb = [IOSShortArray newArrayWithShorts:(jshort[]){ (jint) 0x5d, (jint) 0xbe, (jint) 0x9b, (jint) 0x8b, (jint) 0x11, (jint) 0x99, (jint) 0x6e, (jint) 0x4d, (jint) 0x59, (jint) 0xf3, (jint) 0x85, (jint) 0xa6, (jint) 0x3f, (jint) 0xb7, (jint) 0x83, (jint) 0xc5, (jint) 0xe4, (jint) 0x73, (jint) 0x6b, (jint) 0x3a, (jint) 0x68, (jint) 0x5a, (jint) 0xc0, (jint) 0x47, (jint) 0xa0, (jint) 0x64, (jint) 0x34, (jint) 0x0c, (jint) 0xf1, (jint) 0xd0, (jint) 0x52, (jint) 0xa5, (jint) 0xb9, (jint) 0x1e, (jint) 0x96, (jint) 0x43, (jint) 0x41, (jint) 0xd8, (jint) 0xd4, (jint) 0x2c, (jint) 0xdb, (jint) 0xf8, (jint) 0x07, (jint) 0x77, (jint) 0x2a, (jint) 0xca, (jint) 0xeb, (jint) 0xef, (jint) 0x10, (jint) 0x1c, (jint) 0x16, (jint) 0x0d, (jint) 0x38, (jint) 0x72, (jint) 0x2f, (jint) 0x89, (jint) 0xc1, (jint) 0xf9, (jint) 0x80, (jint) 0xc4, (jint) 0x6d, (jint) 0xae, (jint) 0x30, (jint) 0x3d, (jint) 0xce, (jint) 0x20, (jint) 0x63, (jint) 0xfe, (jint) 0xe6, (jint) 0x1a, (jint) 0xc7, (jint) 0xb8, (jint) 0x50, (jint) 0xe8, (jint) 0x24, (jint) 0x17, (jint) 0xfc, (jint) 0x25, (jint) 0x6f, (jint) 0xbb, (jint) 0x6a, (jint) 0xa3, (jint) 0x44, (jint) 0x53, (jint) 0xd9, (jint) 0xa2, (jint) 0x01, (jint) 0xab, (jint) 0xbc, (jint) 0xb6, (jint) 0x1f, (jint) 0x98, (jint) 0xee, (jint) 0x9a, (jint) 0xa7, (jint) 0x2d, (jint) 0x4f, (jint) 0x9e, (jint) 0x8e, (jint) 0xac, (jint) 0xe0, (jint) 0xc6, (jint) 0x49, (jint) 0x46, (jint) 0x29, (jint) 0xf4, (jint) 0x94, (jint) 0x8a, (jint) 0xaf, (jint) 0xe1, (jint) 0x5b, (jint) 0xc3, (jint) 0xb3, (jint) 0x7b, (jint) 0x57, (jint) 0xd1, (jint) 0x7c, (jint) 0x9c, (jint) 0xed, (jint) 0x87, (jint) 0x40, (jint) 0x8c, (jint) 0xe2, (jint) 0xcb, (jint) 0x93, (jint) 0x14, (jint) 0xc9, (jint) 0x61, (jint) 0x2e, (jint) 0xe5, (jint) 0xcc, (jint) 0xf6, (jint) 0x5e, (jint) 0xa8, (jint) 0x5c, (jint) 0xd6, (jint) 0x75, (jint) 0x8d, (jint) 0x62, (jint) 0x95, (jint) 0x58, (jint) 0x69, (jint) 0x76, (jint) 0xa1, (jint) 0x4a, (jint) 0xb5, (jint) 0x55, (jint) 0x09, (jint) 0x78, (jint) 0x33, (jint) 0x82, (jint) 0xd7, (jint) 0xdd, (jint) 0x79, (jint) 0xf5, (jint) 0x1b, (jint) 0x0b, (jint) 0xde, (jint) 0x26, (jint) 0x21, (jint) 0x28, (jint) 0x74, (jint) 0x04, (jint) 0x97, (jint) 0x56, (jint) 0xdf, (jint) 0x3c, (jint) 0xf0, (jint) 0x37, (jint) 0x39, (jint) 0xdc, (jint) 0xff, (jint) 0x06, (jint) 0xa4, (jint) 0xea, (jint) 0x42, (jint) 0x08, (jint) 0xda, (jint) 0xb4, (jint) 0x71, (jint) 0xb0, (jint) 0xcf, (jint) 0x12, (jint) 0x7a, (jint) 0x4e, (jint) 0xfa, (jint) 0x6c, (jint) 0x1d, (jint) 0x84, (jint) 0x00, (jint) 0xc8, (jint) 0x7f, (jint) 0x91, (jint) 0x45, (jint) 0xaa, (jint) 0x2b, (jint) 0xc2, (jint) 0xb1, (jint) 0x8f, (jint) 0xd5, (jint) 0xba, (jint) 0xf2, (jint) 0xad, (jint) 0x19, (jint) 0xb2, (jint) 0x67, (jint) 0x36, (jint) 0xf7, (jint) 0x0f, (jint) 0x0a, (jint) 0x92, (jint) 0x7d, (jint) 0xe3, (jint) 0x9d, (jint) 0xe9, (jint) 0x90, (jint) 0x3e, (jint) 0x23, (jint) 0x27, (jint) 0x66, (jint) 0x13, (jint) 0xec, (jint) 0x81, (jint) 0x15, (jint) 0xbd, (jint) 0x22, (jint) 0xbf, (jint) 0x9f, (jint) 0x7e, (jint) 0xa9, (jint) 0x51, (jint) 0x4b, (jint) 0x4c, (jint) 0xfb, (jint) 0x02, (jint) 0xd3, (jint) 0x70, (jint) 0x86, (jint) 0x31, (jint) 0xe7, (jint) 0x3b, (jint) 0x05, (jint) 0x03, (jint) 0x54, (jint) 0x60, (jint) 0x48, (jint) 0x65, (jint) 0x18, (jint) 0xd2, (jint) 0xcd, (jint) 0x5f, (jint) 0x32, (jint) 0x88, (jint) 0x0e, (jint) 0x35, (jint) 0xfd } count:256];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoUtilCipherFactory)
  }
}

@end

void LibOrgBouncycastleCryptoUtilCipherFactory_init(LibOrgBouncycastleCryptoUtilCipherFactory *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoUtilCipherFactory *new_LibOrgBouncycastleCryptoUtilCipherFactory_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilCipherFactory, init)
}

LibOrgBouncycastleCryptoUtilCipherFactory *create_LibOrgBouncycastleCryptoUtilCipherFactory_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilCipherFactory, init)
}

id LibOrgBouncycastleCryptoUtilCipherFactory_createContentCipherWithBoolean_withLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(jboolean forEncryption, id<LibOrgBouncycastleCryptoCipherParameters> encKey, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *encryptionAlgID) {
  LibOrgBouncycastleCryptoUtilCipherFactory_initialize();
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *encAlg = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(encryptionAlgID)) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(encAlg)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, rc4)]) {
    id<LibOrgBouncycastleCryptoStreamCipher> cipher = new_LibOrgBouncycastleCryptoEnginesRC4Engine_init();
    [cipher init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:encKey];
    return cipher;
  }
  else {
    LibOrgBouncycastleCryptoBufferedBlockCipher *cipher = LibOrgBouncycastleCryptoUtilCipherFactory_createCipherWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([encryptionAlgID getAlgorithm]);
    LibOrgBouncycastleAsn1ASN1Primitive *sParams = [((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([encryptionAlgID getParameters])) toASN1Primitive];
    if (sParams != nil && !([sParams isKindOfClass:[LibOrgBouncycastleAsn1ASN1Null class]])) {
      if ([encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, des_EDE3_CBC)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory, IDEA_CBC)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes128_CBC)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes192_CBC)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CBC)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia128_cbc)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia192_cbc)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia256_cbc)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1KisaKISAObjectIdentifiers, id_seedCBC)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, desCBC)]) {
        [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(encKey, [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_(sParams))) getOctets])];
      }
      else if ([encAlg isEqual:JreLoadStatic(LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory, CAST5_CBC)]) {
        LibOrgBouncycastleAsn1MiscCAST5CBCParameters *cbcParams = LibOrgBouncycastleAsn1MiscCAST5CBCParameters_getInstanceWithId_(sParams);
        [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(encKey, [((LibOrgBouncycastleAsn1MiscCAST5CBCParameters *) nil_chk(cbcParams)) getIV])];
      }
      else if ([encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, RC2_CBC)]) {
        LibOrgBouncycastleAsn1PkcsRC2CBCParameter *cbcParams = LibOrgBouncycastleAsn1PkcsRC2CBCParameter_getInstanceWithId_(sParams);
        [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(new_LibOrgBouncycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_([((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk(encKey, [LibOrgBouncycastleCryptoParamsKeyParameter class])))) getKey], IOSShortArray_Get(nil_chk(LibOrgBouncycastleCryptoUtilCipherFactory_rc2Ekb), [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1PkcsRC2CBCParameter *) nil_chk(cbcParams)) getRC2ParameterVersion])) intValue])), [cbcParams getIV])];
      }
      else {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot match parameters");
      }
    }
    else {
      if ([encAlg isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, des_EDE3_CBC)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory, IDEA_CBC)] || [encAlg isEqual:JreLoadStatic(LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory, CAST5_CBC)]) {
        [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(encKey, [IOSByteArray newArrayWithLength:8])];
      }
      else {
        [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:encKey];
      }
    }
    return cipher;
  }
}

LibOrgBouncycastleCryptoBufferedBlockCipher *LibOrgBouncycastleCryptoUtilCipherFactory_createCipherWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm) {
  LibOrgBouncycastleCryptoUtilCipherFactory_initialize();
  id<LibOrgBouncycastleCryptoBlockCipher> cipher;
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes128_CBC))) isEqual:algorithm] || [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes192_CBC))) isEqual:algorithm] || [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CBC))) isEqual:algorithm]) {
    cipher = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesAESEngine_init());
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, des_EDE3_CBC))) isEqual:algorithm]) {
    cipher = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESedeEngine_init());
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, desCBC))) isEqual:algorithm]) {
    cipher = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESEngine_init());
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, RC2_CBC))) isEqual:algorithm]) {
    cipher = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRC2Engine_init());
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, cast5CBC))) isEqual:algorithm]) {
    cipher = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesCAST5Engine_init());
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"cannot recognise cipher: ", algorithm));
  }
  return new_LibOrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(cipher, new_LibOrgBouncycastleCryptoPaddingsPKCS7Padding_init());
}

LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *LibOrgBouncycastleCryptoUtilCipherFactory_createOutputStreamWithJavaIoOutputStream_withId_(JavaIoOutputStream *dOut, id cipher) {
  LibOrgBouncycastleCryptoUtilCipherFactory_initialize();
  if ([cipher isKindOfClass:[LibOrgBouncycastleCryptoBufferedBlockCipher class]]) {
    return new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(dOut, (LibOrgBouncycastleCryptoBufferedBlockCipher *) cipher);
  }
  if ([LibOrgBouncycastleCryptoStreamCipher_class_() isInstance:cipher]) {
    return new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_(dOut, (id<LibOrgBouncycastleCryptoStreamCipher>) cast_check(cipher, LibOrgBouncycastleCryptoStreamCipher_class_()));
  }
  if ([LibOrgBouncycastleCryptoModesAEADBlockCipher_class_() isInstance:cipher]) {
    return new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(dOut, (id<LibOrgBouncycastleCryptoModesAEADBlockCipher>) cast_check(cipher, LibOrgBouncycastleCryptoModesAEADBlockCipher_class_()));
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unknown cipher object: ", cipher));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilCipherFactory)
