//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/ECPoint.java
//

#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECMultiplier.h"
#include "ECPoint.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PreCompCallback.h"
#include "PreCompInfo.h"
#include "ValidityPrecompInfo.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/Hashtable.h"

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcECPoint_satisfiesOrder(LibOrgBouncycastleMathEcECPoint *self);

__attribute__((unused)) static LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleMathEcECPoint_getZCoordWithInt_(LibOrgBouncycastleMathEcECPoint *self, jint index);

__attribute__((unused)) static LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleMathEcECPoint_getRawXCoord(LibOrgBouncycastleMathEcECPoint *self);

__attribute__((unused)) static LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleMathEcECPoint_getRawYCoord(LibOrgBouncycastleMathEcECPoint *self);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcECPoint_getRawZCoords(LibOrgBouncycastleMathEcECPoint *self);

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECPoint_scaleXWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint *self, LibOrgBouncycastleMathEcECFieldElement *scale_);

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECPoint_scaleYWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint *self, LibOrgBouncycastleMathEcECFieldElement *scale_);

@interface LibOrgBouncycastleMathEcECPoint_1 : NSObject < LibOrgBouncycastleMathEcPreCompCallback > {
 @public
  LibOrgBouncycastleMathEcECPoint *this$0_;
  jboolean val$decompressed_;
  jboolean val$checkOrder_;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)outer$
                                            withBoolean:(jboolean)capture$0
                                            withBoolean:(jboolean)capture$1;

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)existing;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcECPoint_1)

__attribute__((unused)) static void LibOrgBouncycastleMathEcECPoint_1_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(LibOrgBouncycastleMathEcECPoint_1 *self, LibOrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1);

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint_1 *new_LibOrgBouncycastleMathEcECPoint_1_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(LibOrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint_1 *create_LibOrgBouncycastleMathEcECPoint_1_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(LibOrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleMathEcECPoint)

IOSObjectArray *LibOrgBouncycastleMathEcECPoint_EMPTY_ZS;

@implementation LibOrgBouncycastleMathEcECPoint

+ (IOSObjectArray *)EMPTY_ZS {
  return LibOrgBouncycastleMathEcECPoint_EMPTY_ZS;
}

+ (IOSObjectArray *)getInitialZCoordsWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve {
  return LibOrgBouncycastleMathEcECPoint_getInitialZCoordsWithLibOrgBouncycastleMathEcECCurve_(curve);
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y {
  LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
        withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  return self;
}

- (jboolean)satisfiesCurveEquation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)satisfiesOrder {
  return LibOrgBouncycastleMathEcECPoint_satisfiesOrder(self);
}

- (LibOrgBouncycastleMathEcECPoint *)getDetachedPoint {
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self normalize])) detach];
}

- (LibOrgBouncycastleMathEcECCurve *)getCurve {
  return curve_;
}

- (LibOrgBouncycastleMathEcECPoint *)detach {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getCurveCoordinateSystem {
  return nil == curve_ ? LibOrgBouncycastleMathEcECCurve_COORD_AFFINE : [curve_ getCoordinateSystem];
}

- (LibOrgBouncycastleMathEcECFieldElement *)getAffineXCoord {
  [self checkNormalized];
  return [self getXCoord];
}

- (LibOrgBouncycastleMathEcECFieldElement *)getAffineYCoord {
  [self checkNormalized];
  return [self getYCoord];
}

- (LibOrgBouncycastleMathEcECFieldElement *)getXCoord {
  return x_;
}

- (LibOrgBouncycastleMathEcECFieldElement *)getYCoord {
  return y_;
}

- (LibOrgBouncycastleMathEcECFieldElement *)getZCoordWithInt:(jint)index {
  return LibOrgBouncycastleMathEcECPoint_getZCoordWithInt_(self, index);
}

- (IOSObjectArray *)getZCoords {
  jint zsLen = ((IOSObjectArray *) nil_chk(zs_))->size_;
  if (zsLen == 0) {
    return LibOrgBouncycastleMathEcECPoint_EMPTY_ZS;
  }
  IOSObjectArray *copy_ = [IOSObjectArray newArrayWithLength:zsLen type:LibOrgBouncycastleMathEcECFieldElement_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(zs_, 0, copy_, 0, zsLen);
  return copy_;
}

- (LibOrgBouncycastleMathEcECFieldElement *)getRawXCoord {
  return LibOrgBouncycastleMathEcECPoint_getRawXCoord(self);
}

- (LibOrgBouncycastleMathEcECFieldElement *)getRawYCoord {
  return LibOrgBouncycastleMathEcECPoint_getRawYCoord(self);
}

- (IOSObjectArray *)getRawZCoords {
  return LibOrgBouncycastleMathEcECPoint_getRawZCoords(self);
}

- (void)checkNormalized {
  if (![self isNormalized]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"point not in normal form");
  }
}

- (jboolean)isNormalized {
  jint coord = [self getCurveCoordinateSystem];
  return coord == LibOrgBouncycastleMathEcECCurve_COORD_AFFINE || coord == LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE || [self isInfinity] || [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(nil_chk(zs_), 0))) isOne];
}

- (LibOrgBouncycastleMathEcECPoint *)normalize {
  if ([self isInfinity]) {
    return self;
  }
  switch ([self getCurveCoordinateSystem]) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      return self;
    }
    default:
    {
      LibOrgBouncycastleMathEcECFieldElement *Z1 = [self getZCoordWithInt:0];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne]) {
        return self;
      }
      return [self normalizeWithLibOrgBouncycastleMathEcECFieldElement:[Z1 invert]];
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)normalizeWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)zInv {
  switch ([self getCurveCoordinateSystem]) {
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      return [self createScaledPointWithLibOrgBouncycastleMathEcECFieldElement:zInv withLibOrgBouncycastleMathEcECFieldElement:zInv];
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      LibOrgBouncycastleMathEcECFieldElement *zInv2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(zInv)) square];
      LibOrgBouncycastleMathEcECFieldElement *zInv3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(zInv2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:zInv];
      return [self createScaledPointWithLibOrgBouncycastleMathEcECFieldElement:zInv2 withLibOrgBouncycastleMathEcECFieldElement:zInv3];
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"not a projective coordinate system");
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)createScaledPointWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)sx
                                                      withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)sy {
  return [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(LibOrgBouncycastleMathEcECPoint_getRawXCoord(self))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:sx] withLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(LibOrgBouncycastleMathEcECPoint_getRawYCoord(self))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:sy] withBoolean:self->withCompression_];
}

- (jboolean)isInfinity {
  return x_ == nil || y_ == nil || (((IOSObjectArray *) nil_chk(zs_))->size_ > 0 && [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(zs_, 0))) isZero]);
}

- (jboolean)isCompressed {
  return self->withCompression_;
}

- (jboolean)isValid {
  return [self implIsValidWithBoolean:false withBoolean:true];
}

- (jboolean)isValidPartial {
  return [self implIsValidWithBoolean:false withBoolean:false];
}

- (jboolean)implIsValidWithBoolean:(jboolean)decompressed
                       withBoolean:(jboolean)checkOrder {
  if ([self isInfinity]) {
    return true;
  }
  LibOrgBouncycastleMathEcValidityPrecompInfo *validity = (LibOrgBouncycastleMathEcValidityPrecompInfo *) cast_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) precomputeWithLibOrgBouncycastleMathEcECPoint:self withNSString:LibOrgBouncycastleMathEcValidityPrecompInfo_PRECOMP_NAME withLibOrgBouncycastleMathEcPreCompCallback:new_LibOrgBouncycastleMathEcECPoint_1_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(self, decompressed, checkOrder)], [LibOrgBouncycastleMathEcValidityPrecompInfo class]);
  return ![((LibOrgBouncycastleMathEcValidityPrecompInfo *) nil_chk(validity)) hasFailed];
}

- (LibOrgBouncycastleMathEcECPoint *)scaleXWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_ {
  return LibOrgBouncycastleMathEcECPoint_scaleXWithLibOrgBouncycastleMathEcECFieldElement_(self, scale_);
}

- (LibOrgBouncycastleMathEcECPoint *)scaleYWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_ {
  return LibOrgBouncycastleMathEcECPoint_scaleYWithLibOrgBouncycastleMathEcECFieldElement_(self, scale_);
}

- (jboolean)equalsWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)other {
  if (nil == other) {
    return false;
  }
  LibOrgBouncycastleMathEcECCurve *c1 = [self getCurve];
  LibOrgBouncycastleMathEcECCurve *c2 = [other getCurve];
  jboolean n1 = nil == c1;
  jboolean n2 = nil == c2;
  jboolean i1 = [self isInfinity];
  jboolean i2 = [other isInfinity];
  if (i1 || i2) {
    return (i1 && i2) && (n1 || n2 || [((LibOrgBouncycastleMathEcECCurve *) nil_chk(c1)) equalsWithLibOrgBouncycastleMathEcECCurve:c2]);
  }
  LibOrgBouncycastleMathEcECPoint *p1 = self;
  LibOrgBouncycastleMathEcECPoint *p2 = other;
  if (n1 && n2) {
  }
  else if (n1) {
    p2 = [p2 normalize];
  }
  else if (n2) {
    p1 = [p1 normalize];
  }
  else if (![((LibOrgBouncycastleMathEcECCurve *) nil_chk(c1)) equalsWithLibOrgBouncycastleMathEcECCurve:c2]) {
    return false;
  }
  else {
    IOSObjectArray *points = [IOSObjectArray newArrayWithObjects:(id[]){ self, [c1 importPointWithLibOrgBouncycastleMathEcECPoint:p2] } count:2 type:LibOrgBouncycastleMathEcECPoint_class_()];
    [c1 normalizeAllWithLibOrgBouncycastleMathEcECPointArray:points];
    p1 = IOSObjectArray_Get(points, 0);
    p2 = IOSObjectArray_Get(points, 1);
  }
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p1)) getXCoord])) isEqual:[((LibOrgBouncycastleMathEcECPoint *) nil_chk(p2)) getXCoord]] && [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([p1 getYCoord])) isEqual:[p2 getYCoord]];
}

- (jboolean)isEqual:(id)other {
  if (other == self) {
    return true;
  }
  if (!([other isKindOfClass:[LibOrgBouncycastleMathEcECPoint class]])) {
    return false;
  }
  return [self equalsWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *) cast_chk(other, [LibOrgBouncycastleMathEcECPoint class])];
}

- (NSUInteger)hash {
  LibOrgBouncycastleMathEcECCurve *c = [self getCurve];
  jint hc = (nil == c) ? 0 : ~((jint) [((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) hash]);
  if (![self isInfinity]) {
    LibOrgBouncycastleMathEcECPoint *p = [self normalize];
    hc ^= ((jint) [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getXCoord])) hash]) * 17;
    hc ^= ((jint) [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([p getYCoord])) hash]) * 257;
  }
  return hc;
}

- (NSString *)description {
  if ([self isInfinity]) {
    return @"INF";
  }
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  (void) [sb appendWithChar:'('];
  (void) [sb appendWithId:LibOrgBouncycastleMathEcECPoint_getRawXCoord(self)];
  (void) [sb appendWithChar:','];
  (void) [sb appendWithId:LibOrgBouncycastleMathEcECPoint_getRawYCoord(self)];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(zs_))->size_; ++i) {
    (void) [sb appendWithChar:','];
    (void) [sb appendWithId:IOSObjectArray_Get(nil_chk(zs_), i)];
  }
  (void) [sb appendWithChar:')'];
  return [sb description];
}

- (IOSByteArray *)getEncoded {
  return [self getEncodedWithBoolean:self->withCompression_];
}

- (IOSByteArray *)getEncodedWithBoolean:(jboolean)compressed {
  if ([self isInfinity]) {
    return [IOSByteArray newArrayWithLength:1];
  }
  LibOrgBouncycastleMathEcECPoint *normed = [self normalize];
  IOSByteArray *X = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(normed)) getXCoord])) getEncoded];
  if (compressed) {
    IOSByteArray *PO = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(X))->size_ + 1];
    *IOSByteArray_GetRef(PO, 0) = (jbyte) ([normed getCompressionYTilde] ? (jint) 0x03 : (jint) 0x02);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X, 0, PO, 1, X->size_);
    return PO;
  }
  IOSByteArray *Y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([normed getYCoord])) getEncoded];
  IOSByteArray *PO = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(X))->size_ + ((IOSByteArray *) nil_chk(Y))->size_ + 1];
  *IOSByteArray_GetRef(PO, 0) = (jint) 0x04;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X, 0, PO, 1, X->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(Y, 0, PO, X->size_ + 1, Y->size_);
  return PO;
}

- (jboolean)getCompressionYTilde {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECPoint *)addWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECPoint *)negate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECPoint *)subtractWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECPoint *)timesPow2WithInt:(jint)e {
  if (e < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'e' cannot be negative");
  }
  LibOrgBouncycastleMathEcECPoint *p = self;
  while (--e >= 0) {
    p = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) twice];
  }
  return p;
}

- (LibOrgBouncycastleMathEcECPoint *)twice {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECPoint *)twicePlusWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithLibOrgBouncycastleMathEcECPoint:b];
}

- (LibOrgBouncycastleMathEcECPoint *)threeTimes {
  return [self twicePlusWithLibOrgBouncycastleMathEcECPoint:self];
}

- (LibOrgBouncycastleMathEcECPoint *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return [((id<LibOrgBouncycastleMathEcECMultiplier>) nil_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getMultiplier])) multiplyWithLibOrgBouncycastleMathEcECPoint:self withJavaMathBigInteger:k];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LLibOrgBouncycastleMathEcECFieldElement;", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleMathEcECFieldElement;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 13, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x401, 21, 15, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x401, 22, 15, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 23, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 24, 15, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInitialZCoordsWithLibOrgBouncycastleMathEcECCurve:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElementArray:);
  methods[3].selector = @selector(satisfiesCurveEquation);
  methods[4].selector = @selector(satisfiesOrder);
  methods[5].selector = @selector(getDetachedPoint);
  methods[6].selector = @selector(getCurve);
  methods[7].selector = @selector(detach);
  methods[8].selector = @selector(getCurveCoordinateSystem);
  methods[9].selector = @selector(getAffineXCoord);
  methods[10].selector = @selector(getAffineYCoord);
  methods[11].selector = @selector(getXCoord);
  methods[12].selector = @selector(getYCoord);
  methods[13].selector = @selector(getZCoordWithInt:);
  methods[14].selector = @selector(getZCoords);
  methods[15].selector = @selector(getRawXCoord);
  methods[16].selector = @selector(getRawYCoord);
  methods[17].selector = @selector(getRawZCoords);
  methods[18].selector = @selector(checkNormalized);
  methods[19].selector = @selector(isNormalized);
  methods[20].selector = @selector(normalize);
  methods[21].selector = @selector(normalizeWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[22].selector = @selector(createScaledPointWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[23].selector = @selector(isInfinity);
  methods[24].selector = @selector(isCompressed);
  methods[25].selector = @selector(isValid);
  methods[26].selector = @selector(isValidPartial);
  methods[27].selector = @selector(implIsValidWithBoolean:withBoolean:);
  methods[28].selector = @selector(scaleXWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[29].selector = @selector(scaleYWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[30].selector = @selector(equalsWithLibOrgBouncycastleMathEcECPoint:);
  methods[31].selector = @selector(isEqual:);
  methods[32].selector = @selector(hash);
  methods[33].selector = @selector(description);
  methods[34].selector = @selector(getEncoded);
  methods[35].selector = @selector(getEncodedWithBoolean:);
  methods[36].selector = @selector(getCompressionYTilde);
  methods[37].selector = @selector(addWithLibOrgBouncycastleMathEcECPoint:);
  methods[38].selector = @selector(negate);
  methods[39].selector = @selector(subtractWithLibOrgBouncycastleMathEcECPoint:);
  methods[40].selector = @selector(timesPow2WithInt:);
  methods[41].selector = @selector(twice);
  methods[42].selector = @selector(twicePlusWithLibOrgBouncycastleMathEcECPoint:);
  methods[43].selector = @selector(threeTimes);
  methods[44].selector = @selector(multiplyWithJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ZS", "[LLibOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x1c, -1, 27, -1, -1 },
    { "curve_", "LLibOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "x_", "LLibOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "y_", "LLibOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "zs_", "[LLibOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "withCompression_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "preCompTable_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInitialZCoords", "LLibOrgBouncycastleMathEcECCurve;", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;[LLibOrgBouncycastleMathEcECFieldElement;", "getZCoord", "I", "normalize", "LLibOrgBouncycastleMathEcECFieldElement;", "createScaledPoint", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;", "implIsValid", "ZZ", "scaleX", "scaleY", "equals", "LLibOrgBouncycastleMathEcECPoint;", "LNSObject;", "hashCode", "toString", "getEncoded", "Z", "add", "subtract", "timesPow2", "twicePlus", "multiply", "LJavaMathBigInteger;", &LibOrgBouncycastleMathEcECPoint_EMPTY_ZS, "LLibOrgBouncycastleMathEcECPoint_AbstractFp;LLibOrgBouncycastleMathEcECPoint_Fp;LLibOrgBouncycastleMathEcECPoint_AbstractF2m;LLibOrgBouncycastleMathEcECPoint_F2m;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECPoint = { "ECPoint", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x401, 45, 7, -1, 28, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECPoint;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleMathEcECPoint class]) {
    LibOrgBouncycastleMathEcECPoint_EMPTY_ZS = [IOSObjectArray newArrayWithLength:0 type:LibOrgBouncycastleMathEcECFieldElement_class_()];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleMathEcECPoint)
  }
}

@end

IOSObjectArray *LibOrgBouncycastleMathEcECPoint_getInitialZCoordsWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *curve) {
  LibOrgBouncycastleMathEcECPoint_initialize();
  jint coord = nil == curve ? LibOrgBouncycastleMathEcECCurve_COORD_AFFINE : [curve getCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    return LibOrgBouncycastleMathEcECPoint_EMPTY_ZS;
    default:
    break;
  }
  LibOrgBouncycastleMathEcECFieldElement *one = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    return [IOSObjectArray newArrayWithObjects:(id[]){ one } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()];
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
    return [IOSObjectArray newArrayWithObjects:(id[]){ one, one, one } count:3 type:LibOrgBouncycastleMathEcECFieldElement_class_()];
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    return [IOSObjectArray newArrayWithObjects:(id[]){ one, [curve getA] } count:2 type:LibOrgBouncycastleMathEcECFieldElement_class_()];
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown coordinate system");
  }
}

void LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y) {
  LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, LibOrgBouncycastleMathEcECPoint_getInitialZCoordsWithLibOrgBouncycastleMathEcECCurve_(curve));
}

void LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(LibOrgBouncycastleMathEcECPoint *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  NSObject_init(self);
  self->preCompTable_ = nil;
  self->curve_ = curve;
  self->x_ = x;
  self->y_ = y;
  self->zs_ = zs;
}

jboolean LibOrgBouncycastleMathEcECPoint_satisfiesOrder(LibOrgBouncycastleMathEcECPoint *self) {
  if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE))) isEqual:[((LibOrgBouncycastleMathEcECCurve *) nil_chk(self->curve_)) getCofactor]]) {
    return true;
  }
  JavaMathBigInteger *n = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(self->curve_)) getOrder];
  return n == nil || [((LibOrgBouncycastleMathEcECPoint *) nil_chk(LibOrgBouncycastleMathEcECAlgorithms_referenceMultiplyWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(self, n))) isInfinity];
}

LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleMathEcECPoint_getZCoordWithInt_(LibOrgBouncycastleMathEcECPoint *self, jint index) {
  return (index < 0 || index >= ((IOSObjectArray *) nil_chk(self->zs_))->size_) ? nil : IOSObjectArray_Get(nil_chk(self->zs_), index);
}

LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleMathEcECPoint_getRawXCoord(LibOrgBouncycastleMathEcECPoint *self) {
  return self->x_;
}

LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleMathEcECPoint_getRawYCoord(LibOrgBouncycastleMathEcECPoint *self) {
  return self->y_;
}

IOSObjectArray *LibOrgBouncycastleMathEcECPoint_getRawZCoords(LibOrgBouncycastleMathEcECPoint *self) {
  return self->zs_;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECPoint_scaleXWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint *self, LibOrgBouncycastleMathEcECFieldElement *scale_) {
  return [self isInfinity] ? self : [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(LibOrgBouncycastleMathEcECPoint_getRawXCoord(self))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:scale_] withLibOrgBouncycastleMathEcECFieldElement:LibOrgBouncycastleMathEcECPoint_getRawYCoord(self) withLibOrgBouncycastleMathEcECFieldElementArray:LibOrgBouncycastleMathEcECPoint_getRawZCoords(self) withBoolean:self->withCompression_];
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECPoint_scaleYWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint *self, LibOrgBouncycastleMathEcECFieldElement *scale_) {
  return [self isInfinity] ? self : [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithLibOrgBouncycastleMathEcECFieldElement:LibOrgBouncycastleMathEcECPoint_getRawXCoord(self) withLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(LibOrgBouncycastleMathEcECPoint_getRawYCoord(self))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:scale_] withLibOrgBouncycastleMathEcECFieldElementArray:LibOrgBouncycastleMathEcECPoint_getRawZCoords(self) withBoolean:self->withCompression_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECPoint)

@implementation LibOrgBouncycastleMathEcECPoint_1

- (instancetype)initWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)outer$
                                            withBoolean:(jboolean)capture$0
                                            withBoolean:(jboolean)capture$1 {
  LibOrgBouncycastleMathEcECPoint_1_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(self, outer$, capture$0, capture$1);
  return self;
}

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)existing {
  LibOrgBouncycastleMathEcValidityPrecompInfo *info = ([existing isKindOfClass:[LibOrgBouncycastleMathEcValidityPrecompInfo class]]) ? (LibOrgBouncycastleMathEcValidityPrecompInfo *) cast_chk(existing, [LibOrgBouncycastleMathEcValidityPrecompInfo class]) : nil;
  if (info == nil) {
    info = new_LibOrgBouncycastleMathEcValidityPrecompInfo_init();
  }
  if ([info hasFailed]) {
    return info;
  }
  if (![info hasCurveEquationPassed]) {
    if (!val$decompressed_ && ![this$0_ satisfiesCurveEquation]) {
      [info reportFailed];
      return info;
    }
    [info reportCurveEquationPassed];
  }
  if (val$checkOrder_ && ![info hasOrderPassed]) {
    if (![this$0_ satisfiesOrder]) {
      [info reportFailed];
      return info;
    }
    [info reportOrderPassed];
  }
  return info;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcPreCompInfo;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECPoint:withBoolean:withBoolean:);
  methods[1].selector = @selector(precomputeWithLibOrgBouncycastleMathEcPreCompInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$decompressed_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$checkOrder_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "precompute", "LLibOrgBouncycastleMathEcPreCompInfo;", "LLibOrgBouncycastleMathEcECPoint;", "implIsValidWithBoolean:withBoolean:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECPoint_1 = { "", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8010, 2, 3, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleMathEcECPoint_1;
}

@end

void LibOrgBouncycastleMathEcECPoint_1_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(LibOrgBouncycastleMathEcECPoint_1 *self, LibOrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1) {
  self->this$0_ = outer$;
  self->val$decompressed_ = capture$0;
  self->val$checkOrder_ = capture$1;
  NSObject_init(self);
}

LibOrgBouncycastleMathEcECPoint_1 *new_LibOrgBouncycastleMathEcECPoint_1_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(LibOrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECPoint_1, initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_, outer$, capture$0, capture$1)
}

LibOrgBouncycastleMathEcECPoint_1 *create_LibOrgBouncycastleMathEcECPoint_1_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(LibOrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECPoint_1, initWithLibOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_, outer$, capture$0, capture$1)
}

@implementation LibOrgBouncycastleMathEcECPoint_AbstractFp

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y {
  LibOrgBouncycastleMathEcECPoint_AbstractFp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
        withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  LibOrgBouncycastleMathEcECPoint_AbstractFp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  return self;
}

- (jboolean)getCompressionYTilde {
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self getAffineYCoord])) testBitZero];
}

- (jboolean)satisfiesCurveEquation {
  LibOrgBouncycastleMathEcECFieldElement *X = self->x_;
  LibOrgBouncycastleMathEcECFieldElement *Y = self->y_;
  LibOrgBouncycastleMathEcECFieldElement *A = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getA];
  LibOrgBouncycastleMathEcECFieldElement *B = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getB];
  LibOrgBouncycastleMathEcECFieldElement *lhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) square];
  switch ([self getCurveCoordinateSystem]) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    break;
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      LibOrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
        LibOrgBouncycastleMathEcECFieldElement *Z2 = [Z square];
        LibOrgBouncycastleMathEcECFieldElement *Z3 = [Z multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
        lhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z];
        A = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(A)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
        B = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(B)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z3];
      }
      break;
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      LibOrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
        LibOrgBouncycastleMathEcECFieldElement *Z2 = [Z square];
        LibOrgBouncycastleMathEcECFieldElement *Z4 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) square];
        LibOrgBouncycastleMathEcECFieldElement *Z6 = [Z2 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z4];
        A = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(A)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z4];
        B = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(B)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z6];
      }
      break;
    }
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
  }
  LibOrgBouncycastleMathEcECFieldElement *rhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:A])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:X])) addWithLibOrgBouncycastleMathEcECFieldElement:B];
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) isEqual:rhs];
}

- (LibOrgBouncycastleMathEcECPoint *)subtractWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    return self;
  }
  return [self addWithLibOrgBouncycastleMathEcECPoint:[b negate]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElementArray:);
  methods[2].selector = @selector(getCompressionYTilde);
  methods[3].selector = @selector(satisfiesCurveEquation);
  methods[4].selector = @selector(subtractWithLibOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;[LLibOrgBouncycastleMathEcECFieldElement;", "subtract", "LLibOrgBouncycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECPoint_AbstractFp = { "AbstractFp", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 5, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECPoint_AbstractFp;
}

@end

void LibOrgBouncycastleMathEcECPoint_AbstractFp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint_AbstractFp *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y) {
  LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
}

void LibOrgBouncycastleMathEcECPoint_AbstractFp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(LibOrgBouncycastleMathEcECPoint_AbstractFp *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECPoint_AbstractFp)

@implementation LibOrgBouncycastleMathEcECPoint_Fp

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                            withBoolean:(jboolean)withCompression {
  LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(self, curve, x, y, withCompression);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
        withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                            withBoolean:(jboolean)withCompression {
  LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(self, curve, x, y, zs, withCompression);
  return self;
}

- (LibOrgBouncycastleMathEcECPoint *)detach {
  return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(nil, [self getAffineXCoord], [self getAffineYCoord], false);
}

- (LibOrgBouncycastleMathEcECFieldElement *)getZCoordWithInt:(jint)index {
  if (index == 1 && LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED == [self getCurveCoordinateSystem]) {
    return [self getJacobianModifiedW];
  }
  return LibOrgBouncycastleMathEcECPoint_getZCoordWithInt_(self, index);
}

- (LibOrgBouncycastleMathEcECPoint *)addWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  if ([self isInfinity]) {
    return b;
  }
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    return self;
  }
  if (self == b) {
    return [self twice];
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
  LibOrgBouncycastleMathEcECFieldElement *X2 = b->x_;
  LibOrgBouncycastleMathEcECFieldElement *Y2 = b->y_;
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *dx = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X1];
      LibOrgBouncycastleMathEcECFieldElement *dy = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y2)) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dx)) isZero]) {
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) isZero]) {
          return [self twice];
        }
        return [curve getInfinity];
      }
      LibOrgBouncycastleMathEcECFieldElement *gamma = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) divideWithLibOrgBouncycastleMathEcECFieldElement:dx];
      LibOrgBouncycastleMathEcECFieldElement *X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) square])) subtractWithLibOrgBouncycastleMathEcECFieldElement:X1])) subtractWithLibOrgBouncycastleMathEcECFieldElement:X2];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([gamma multiplyWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X3]])) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, X3, Y3, self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      LibOrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(b->zs_, 0);
      jboolean Z1IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      jboolean Z2IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *u1 = Z1IsOne ? Y2 : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      LibOrgBouncycastleMathEcECFieldElement *u2 = Z2IsOne ? Y1 : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
      LibOrgBouncycastleMathEcECFieldElement *u = [u1 subtractWithLibOrgBouncycastleMathEcECFieldElement:u2];
      LibOrgBouncycastleMathEcECFieldElement *v1 = Z1IsOne ? X2 : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      LibOrgBouncycastleMathEcECFieldElement *v2 = Z2IsOne ? X1 : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
      LibOrgBouncycastleMathEcECFieldElement *v = [v1 subtractWithLibOrgBouncycastleMathEcECFieldElement:v2];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(v)) isZero]) {
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(u)) isZero]) {
          return [self twice];
        }
        return [curve getInfinity];
      }
      LibOrgBouncycastleMathEcECFieldElement *w = Z1IsOne ? Z2 : Z2IsOne ? Z1 : [Z1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
      LibOrgBouncycastleMathEcECFieldElement *vSquared = [v square];
      LibOrgBouncycastleMathEcECFieldElement *vCubed = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(vSquared)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:v];
      LibOrgBouncycastleMathEcECFieldElement *vSquaredV2 = [vSquared multiplyWithLibOrgBouncycastleMathEcECFieldElement:v2];
      LibOrgBouncycastleMathEcECFieldElement *A = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(u)) square])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:w])) subtractWithLibOrgBouncycastleMathEcECFieldElement:vCubed])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:vSquaredV2]];
      LibOrgBouncycastleMathEcECFieldElement *X3 = [v multiplyWithLibOrgBouncycastleMathEcECFieldElement:A];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(vSquaredV2)) subtractWithLibOrgBouncycastleMathEcECFieldElement:A])) multiplyMinusProductWithLibOrgBouncycastleMathEcECFieldElement:u withLibOrgBouncycastleMathEcECFieldElement:u2 withLibOrgBouncycastleMathEcECFieldElement:vCubed];
      LibOrgBouncycastleMathEcECFieldElement *Z3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(vCubed)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:w];
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      LibOrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(b->zs_, 0);
      jboolean Z1IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *X3;
      LibOrgBouncycastleMathEcECFieldElement *Y3;
      LibOrgBouncycastleMathEcECFieldElement *Z3;
      LibOrgBouncycastleMathEcECFieldElement *Z3Squared = nil;
      if (!Z1IsOne && [Z1 isEqual:Z2]) {
        LibOrgBouncycastleMathEcECFieldElement *dx = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X2];
        LibOrgBouncycastleMathEcECFieldElement *dy = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y2];
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dx)) isZero]) {
          if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) isZero]) {
            return [self twice];
          }
          return [curve getInfinity];
        }
        LibOrgBouncycastleMathEcECFieldElement *C = [dx square];
        LibOrgBouncycastleMathEcECFieldElement *W1 = [X1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:C];
        LibOrgBouncycastleMathEcECFieldElement *W2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:C];
        LibOrgBouncycastleMathEcECFieldElement *A1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(W1)) subtractWithLibOrgBouncycastleMathEcECFieldElement:W2])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y1];
        X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) square])) subtractWithLibOrgBouncycastleMathEcECFieldElement:W1])) subtractWithLibOrgBouncycastleMathEcECFieldElement:W2];
        Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([W1 subtractWithLibOrgBouncycastleMathEcECFieldElement:X3])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:dy])) subtractWithLibOrgBouncycastleMathEcECFieldElement:A1];
        Z3 = dx;
        Z3 = [Z3 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      }
      else {
        LibOrgBouncycastleMathEcECFieldElement *Z1Squared;
        LibOrgBouncycastleMathEcECFieldElement *U2;
        LibOrgBouncycastleMathEcECFieldElement *S2;
        if (Z1IsOne) {
          Z1Squared = Z1;
          U2 = X2;
          S2 = Y2;
        }
        else {
          Z1Squared = [Z1 square];
          U2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Squared)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:X2];
          LibOrgBouncycastleMathEcECFieldElement *Z1Cubed = [Z1Squared multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
          S2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Cubed)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y2];
        }
        jboolean Z2IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne];
        LibOrgBouncycastleMathEcECFieldElement *Z2Squared;
        LibOrgBouncycastleMathEcECFieldElement *U1;
        LibOrgBouncycastleMathEcECFieldElement *S1;
        if (Z2IsOne) {
          Z2Squared = Z2;
          U1 = X1;
          S1 = Y1;
        }
        else {
          Z2Squared = [Z2 square];
          U1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2Squared)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:X1];
          LibOrgBouncycastleMathEcECFieldElement *Z2Cubed = [Z2Squared multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
          S1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2Cubed)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y1];
        }
        LibOrgBouncycastleMathEcECFieldElement *H = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(U1)) subtractWithLibOrgBouncycastleMathEcECFieldElement:U2];
        LibOrgBouncycastleMathEcECFieldElement *R = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(S1)) subtractWithLibOrgBouncycastleMathEcECFieldElement:S2];
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(H)) isZero]) {
          if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(R)) isZero]) {
            return [self twice];
          }
          return [curve getInfinity];
        }
        LibOrgBouncycastleMathEcECFieldElement *HSquared = [H square];
        LibOrgBouncycastleMathEcECFieldElement *G = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(HSquared)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:H];
        LibOrgBouncycastleMathEcECFieldElement *V = [HSquared multiplyWithLibOrgBouncycastleMathEcECFieldElement:U1];
        X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(R)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:G])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:V]];
        Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(V)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X3])) multiplyMinusProductWithLibOrgBouncycastleMathEcECFieldElement:R withLibOrgBouncycastleMathEcECFieldElement:G withLibOrgBouncycastleMathEcECFieldElement:S1];
        Z3 = H;
        if (!Z1IsOne) {
          Z3 = [Z3 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
        }
        if (!Z2IsOne) {
          Z3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z3)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
        }
        if (Z3 == H) {
          Z3Squared = HSquared;
        }
      }
      IOSObjectArray *zs;
      if (coord == LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED) {
        LibOrgBouncycastleMathEcECFieldElement *W3 = [self calculateJacobianModifiedWWithLibOrgBouncycastleMathEcECFieldElement:Z3 withLibOrgBouncycastleMathEcECFieldElement:Z3Squared];
        zs = [IOSObjectArray newArrayWithObjects:(id[]){ Z3, W3 } count:2 type:LibOrgBouncycastleMathEcECFieldElement_class_()];
      }
      else {
        zs = [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()];
      }
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, Y3, zs, self->withCompression_);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)twice {
  if ([self isInfinity]) {
    return self;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
    return [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  }
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *X1Squared = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square];
      LibOrgBouncycastleMathEcECFieldElement *gamma = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self threeWithLibOrgBouncycastleMathEcECFieldElement:X1Squared])) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getA]])) divideWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:Y1]];
      LibOrgBouncycastleMathEcECFieldElement *X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) square])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:X1]];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([gamma multiplyWithLibOrgBouncycastleMathEcECFieldElement:[X1 subtractWithLibOrgBouncycastleMathEcECFieldElement:X3]])) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, X3, Y3, self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      jboolean Z1IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *w = [curve getA];
      if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w)) isZero] && !Z1IsOne) {
        w = [w multiplyWithLibOrgBouncycastleMathEcECFieldElement:[Z1 square]];
      }
      w = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w)) addWithLibOrgBouncycastleMathEcECFieldElement:[self threeWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square]]];
      LibOrgBouncycastleMathEcECFieldElement *s = Z1IsOne ? Y1 : [Y1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      LibOrgBouncycastleMathEcECFieldElement *t = Z1IsOne ? [Y1 square] : [s multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      LibOrgBouncycastleMathEcECFieldElement *B = [X1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:t];
      LibOrgBouncycastleMathEcECFieldElement *_4B = [self fourWithLibOrgBouncycastleMathEcECFieldElement:B];
      LibOrgBouncycastleMathEcECFieldElement *h = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w)) square])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:_4B]];
      LibOrgBouncycastleMathEcECFieldElement *_2s = [self twoWithLibOrgBouncycastleMathEcECFieldElement:s];
      LibOrgBouncycastleMathEcECFieldElement *X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(h)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:_2s];
      LibOrgBouncycastleMathEcECFieldElement *_2t = [self twoWithLibOrgBouncycastleMathEcECFieldElement:t];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_4B)) subtractWithLibOrgBouncycastleMathEcECFieldElement:h])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:w])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_2t)) square]]];
      LibOrgBouncycastleMathEcECFieldElement *_4sSquared = Z1IsOne ? [self twoWithLibOrgBouncycastleMathEcECFieldElement:_2t] : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_2s)) square];
      LibOrgBouncycastleMathEcECFieldElement *Z3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self twoWithLibOrgBouncycastleMathEcECFieldElement:_4sSquared])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:s];
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    {
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      jboolean Z1IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *Y1Squared = [Y1 square];
      LibOrgBouncycastleMathEcECFieldElement *T = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1Squared)) square];
      LibOrgBouncycastleMathEcECFieldElement *a4 = [curve getA];
      LibOrgBouncycastleMathEcECFieldElement *a4Neg = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(a4)) negate];
      LibOrgBouncycastleMathEcECFieldElement *M;
      LibOrgBouncycastleMathEcECFieldElement *S;
      if ([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(a4Neg)) toBigInteger])) isEqual:JavaMathBigInteger_valueOfWithLong_(3)]) {
        LibOrgBouncycastleMathEcECFieldElement *Z1Squared = Z1IsOne ? Z1 : [Z1 square];
        M = [self threeWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) addWithLibOrgBouncycastleMathEcECFieldElement:Z1Squared])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[X1 subtractWithLibOrgBouncycastleMathEcECFieldElement:Z1Squared]]];
        S = [self fourWithLibOrgBouncycastleMathEcECFieldElement:[Y1Squared multiplyWithLibOrgBouncycastleMathEcECFieldElement:X1]];
      }
      else {
        LibOrgBouncycastleMathEcECFieldElement *X1Squared = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square];
        M = [self threeWithLibOrgBouncycastleMathEcECFieldElement:X1Squared];
        if (Z1IsOne) {
          M = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(M)) addWithLibOrgBouncycastleMathEcECFieldElement:a4];
        }
        else if (![a4 isZero]) {
          LibOrgBouncycastleMathEcECFieldElement *Z1Squared = [Z1 square];
          LibOrgBouncycastleMathEcECFieldElement *Z1Pow4 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Squared)) square];
          if ([a4Neg bitLength] < [a4 bitLength]) {
            M = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(M)) subtractWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Pow4)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:a4Neg]];
          }
          else {
            M = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(M)) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Pow4)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:a4]];
          }
        }
        S = [self fourWithLibOrgBouncycastleMathEcECFieldElement:[X1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y1Squared]];
      }
      LibOrgBouncycastleMathEcECFieldElement *X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(M)) square])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:S]];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(S)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X3])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:M])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self eightWithLibOrgBouncycastleMathEcECFieldElement:T]];
      LibOrgBouncycastleMathEcECFieldElement *Z3 = [self twoWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      if (!Z1IsOne) {
        Z3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z3)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      }
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      return [self twiceJacobianModifiedWithBoolean:true];
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)twicePlusWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  if (self == b) {
    return [self threeTimes];
  }
  if ([self isInfinity]) {
    return b;
  }
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    return [self twice];
  }
  LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
    return b;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
      LibOrgBouncycastleMathEcECFieldElement *X2 = b->x_;
      LibOrgBouncycastleMathEcECFieldElement *Y2 = b->y_;
      LibOrgBouncycastleMathEcECFieldElement *dx = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X1];
      LibOrgBouncycastleMathEcECFieldElement *dy = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y2)) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dx)) isZero]) {
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) isZero]) {
          return [self threeTimes];
        }
        return self;
      }
      LibOrgBouncycastleMathEcECFieldElement *X = [dx square];
      LibOrgBouncycastleMathEcECFieldElement *Y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) square];
      LibOrgBouncycastleMathEcECFieldElement *d = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self twoWithLibOrgBouncycastleMathEcECFieldElement:X1])) addWithLibOrgBouncycastleMathEcECFieldElement:X2]])) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(d)) isZero]) {
        return [curve getInfinity];
      }
      LibOrgBouncycastleMathEcECFieldElement *D = [d multiplyWithLibOrgBouncycastleMathEcECFieldElement:dx];
      LibOrgBouncycastleMathEcECFieldElement *I = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(D)) invert];
      LibOrgBouncycastleMathEcECFieldElement *L1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([d multiplyWithLibOrgBouncycastleMathEcECFieldElement:I])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:dy];
      LibOrgBouncycastleMathEcECFieldElement *L2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self twoWithLibOrgBouncycastleMathEcECFieldElement:Y1])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:X])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:dx])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:I])) subtractWithLibOrgBouncycastleMathEcECFieldElement:L1];
      LibOrgBouncycastleMathEcECFieldElement *X4 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L2)) subtractWithLibOrgBouncycastleMathEcECFieldElement:L1]))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) addWithLibOrgBouncycastleMathEcECFieldElement:L2]])) addWithLibOrgBouncycastleMathEcECFieldElement:X2];
      LibOrgBouncycastleMathEcECFieldElement *Y4 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X4]))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:L2])) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, X4, Y4, self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      return [((LibOrgBouncycastleMathEcECPoint_Fp *) nil_chk([self twiceJacobianModifiedWithBoolean:false])) addWithLibOrgBouncycastleMathEcECPoint:b];
    }
    default:
    {
      return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithLibOrgBouncycastleMathEcECPoint:b];
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)threeTimes {
  if ([self isInfinity]) {
    return self;
  }
  LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
    return self;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
      LibOrgBouncycastleMathEcECFieldElement *_2Y1 = [self twoWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      LibOrgBouncycastleMathEcECFieldElement *X = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1)) square];
      LibOrgBouncycastleMathEcECFieldElement *Z = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self threeWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square]])) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getA]];
      LibOrgBouncycastleMathEcECFieldElement *Y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) square];
      LibOrgBouncycastleMathEcECFieldElement *d = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self threeWithLibOrgBouncycastleMathEcECFieldElement:X1])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:X])) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(d)) isZero]) {
        return [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getInfinity];
      }
      LibOrgBouncycastleMathEcECFieldElement *D = [d multiplyWithLibOrgBouncycastleMathEcECFieldElement:_2Y1];
      LibOrgBouncycastleMathEcECFieldElement *I = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(D)) invert];
      LibOrgBouncycastleMathEcECFieldElement *L1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([d multiplyWithLibOrgBouncycastleMathEcECFieldElement:I])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z];
      LibOrgBouncycastleMathEcECFieldElement *L2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) square])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:I])) subtractWithLibOrgBouncycastleMathEcECFieldElement:L1];
      LibOrgBouncycastleMathEcECFieldElement *X4 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L2)) subtractWithLibOrgBouncycastleMathEcECFieldElement:L1]))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) addWithLibOrgBouncycastleMathEcECFieldElement:L2]])) addWithLibOrgBouncycastleMathEcECFieldElement:X1];
      LibOrgBouncycastleMathEcECFieldElement *Y4 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(([X1 subtractWithLibOrgBouncycastleMathEcECFieldElement:X4]))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:L2])) subtractWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, X4, Y4, self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      return [((LibOrgBouncycastleMathEcECPoint_Fp *) nil_chk([self twiceJacobianModifiedWithBoolean:false])) addWithLibOrgBouncycastleMathEcECPoint:self];
    }
    default:
    {
      return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithLibOrgBouncycastleMathEcECPoint:self];
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)timesPow2WithInt:(jint)e {
  if (e < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'e' cannot be negative");
  }
  if (e == 0 || [self isInfinity]) {
    return self;
  }
  if (e == 1) {
    return [self twice];
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
    return [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  }
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  LibOrgBouncycastleMathEcECFieldElement *W1 = [curve getA];
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  LibOrgBouncycastleMathEcECFieldElement *Z1 = ((IOSObjectArray *) nil_chk(self->zs_))->size_ < 1 ? [curve fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] : IOSObjectArray_Get(self->zs_, 0);
  if (![Z1 isOne]) {
    {
      LibOrgBouncycastleMathEcECFieldElement *Z1Sq;
      switch (coord) {
        case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
        break;
        case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
        Z1Sq = [Z1 square];
        X1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
        Y1 = [Y1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq];
        W1 = [self calculateJacobianModifiedWWithLibOrgBouncycastleMathEcECFieldElement:Z1 withLibOrgBouncycastleMathEcECFieldElement:Z1Sq];
        break;
        case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
        W1 = [self calculateJacobianModifiedWWithLibOrgBouncycastleMathEcECFieldElement:Z1 withLibOrgBouncycastleMathEcECFieldElement:nil];
        break;
        case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
        W1 = [self getJacobianModifiedW];
        break;
        default:
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
      }
    }
  }
  for (jint i = 0; i < e; ++i) {
    if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
      return [curve getInfinity];
    }
    LibOrgBouncycastleMathEcECFieldElement *X1Squared = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square];
    LibOrgBouncycastleMathEcECFieldElement *M = [self threeWithLibOrgBouncycastleMathEcECFieldElement:X1Squared];
    LibOrgBouncycastleMathEcECFieldElement *_2Y1 = [self twoWithLibOrgBouncycastleMathEcECFieldElement:Y1];
    LibOrgBouncycastleMathEcECFieldElement *_2Y1Squared = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y1];
    LibOrgBouncycastleMathEcECFieldElement *S = [self twoWithLibOrgBouncycastleMathEcECFieldElement:[X1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:_2Y1Squared]];
    LibOrgBouncycastleMathEcECFieldElement *_4T = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1Squared)) square];
    LibOrgBouncycastleMathEcECFieldElement *_8T = [self twoWithLibOrgBouncycastleMathEcECFieldElement:_4T];
    if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(W1)) isZero]) {
      M = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(M)) addWithLibOrgBouncycastleMathEcECFieldElement:W1];
      W1 = [self twoWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_8T)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:W1]];
    }
    X1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(M)) square])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:S]];
    Y1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([M multiplyWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(S)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X1]])) subtractWithLibOrgBouncycastleMathEcECFieldElement:_8T];
    Z1 = [Z1 isOne] ? _2Y1 : [_2Y1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
  }
  {
    LibOrgBouncycastleMathEcECFieldElement *zInv;
    LibOrgBouncycastleMathEcECFieldElement *zInv2;
    LibOrgBouncycastleMathEcECFieldElement *zInv3;
    switch (coord) {
      case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
      zInv = [Z1 invert];
      zInv2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(zInv)) square];
      zInv3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(zInv2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:zInv];
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:zInv2], [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:zInv3], self->withCompression_);
      case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
      X1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      Z1 = [Z1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:[Z1 square]];
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X1, Y1, [IOSObjectArray newArrayWithObjects:(id[]){ Z1 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
      case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X1, Y1, [IOSObjectArray newArrayWithObjects:(id[]){ Z1 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
      case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X1, Y1, [IOSObjectArray newArrayWithObjects:(id[]){ Z1, W1 } count:2 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

- (LibOrgBouncycastleMathEcECFieldElement *)twoWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x {
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(x)) addWithLibOrgBouncycastleMathEcECFieldElement:x];
}

- (LibOrgBouncycastleMathEcECFieldElement *)threeWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x {
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self twoWithLibOrgBouncycastleMathEcECFieldElement:x])) addWithLibOrgBouncycastleMathEcECFieldElement:x];
}

- (LibOrgBouncycastleMathEcECFieldElement *)fourWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x {
  return [self twoWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:x]];
}

- (LibOrgBouncycastleMathEcECFieldElement *)eightWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x {
  return [self fourWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:x]];
}

- (LibOrgBouncycastleMathEcECFieldElement *)doubleProductFromSquaresWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)a
                                                                    withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)b
                                                                    withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)aSquared
                                                                    withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)bSquared {
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(a)) addWithLibOrgBouncycastleMathEcECFieldElement:b])) square])) subtractWithLibOrgBouncycastleMathEcECFieldElement:aSquared])) subtractWithLibOrgBouncycastleMathEcECFieldElement:bSquared];
}

- (LibOrgBouncycastleMathEcECPoint *)negate {
  if ([self isInfinity]) {
    return self;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  if (LibOrgBouncycastleMathEcECCurve_COORD_AFFINE != coord) {
    return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, self->x_, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(self->y_)) negate], self->zs_, self->withCompression_);
  }
  return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, self->x_, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(self->y_)) negate], self->withCompression_);
}

- (LibOrgBouncycastleMathEcECFieldElement *)calculateJacobianModifiedWWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)Z
                                                                      withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)ZSquared {
  LibOrgBouncycastleMathEcECFieldElement *a4 = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getA];
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(a4)) isZero] || [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
    return a4;
  }
  if (ZSquared == nil) {
    ZSquared = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) square];
  }
  LibOrgBouncycastleMathEcECFieldElement *W = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(ZSquared)) square];
  LibOrgBouncycastleMathEcECFieldElement *a4Neg = [a4 negate];
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(a4Neg)) bitLength] < [a4 bitLength]) {
    W = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(W)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:a4Neg])) negate];
  }
  else {
    W = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(W)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:a4];
  }
  return W;
}

- (LibOrgBouncycastleMathEcECFieldElement *)getJacobianModifiedW {
  LibOrgBouncycastleMathEcECFieldElement *W = IOSObjectArray_Get(nil_chk(self->zs_), 1);
  if (W == nil) {
    (void) IOSObjectArray_Set(self->zs_, 1, W = [self calculateJacobianModifiedWWithLibOrgBouncycastleMathEcECFieldElement:IOSObjectArray_Get(self->zs_, 0) withLibOrgBouncycastleMathEcECFieldElement:nil]);
  }
  return W;
}

- (LibOrgBouncycastleMathEcECPoint_Fp *)twiceJacobianModifiedWithBoolean:(jboolean)calculateW {
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
  LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
  LibOrgBouncycastleMathEcECFieldElement *W1 = [self getJacobianModifiedW];
  LibOrgBouncycastleMathEcECFieldElement *X1Squared = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square];
  LibOrgBouncycastleMathEcECFieldElement *M = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self threeWithLibOrgBouncycastleMathEcECFieldElement:X1Squared])) addWithLibOrgBouncycastleMathEcECFieldElement:W1];
  LibOrgBouncycastleMathEcECFieldElement *_2Y1 = [self twoWithLibOrgBouncycastleMathEcECFieldElement:Y1];
  LibOrgBouncycastleMathEcECFieldElement *_2Y1Squared = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y1];
  LibOrgBouncycastleMathEcECFieldElement *S = [self twoWithLibOrgBouncycastleMathEcECFieldElement:[X1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:_2Y1Squared]];
  LibOrgBouncycastleMathEcECFieldElement *X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(M)) square])) subtractWithLibOrgBouncycastleMathEcECFieldElement:[self twoWithLibOrgBouncycastleMathEcECFieldElement:S]];
  LibOrgBouncycastleMathEcECFieldElement *_4T = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1Squared)) square];
  LibOrgBouncycastleMathEcECFieldElement *_8T = [self twoWithLibOrgBouncycastleMathEcECFieldElement:_4T];
  LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([M multiplyWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(S)) subtractWithLibOrgBouncycastleMathEcECFieldElement:X3]])) subtractWithLibOrgBouncycastleMathEcECFieldElement:_8T];
  LibOrgBouncycastleMathEcECFieldElement *W3 = calculateW ? [self twoWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(_8T)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:W1]] : nil;
  LibOrgBouncycastleMathEcECFieldElement *Z3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne] ? _2Y1 : [_2Y1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
  return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_([self getCurve], X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3, W3 } count:2 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, 10, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, 11, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, 12, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint_Fp;", 0x4, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withBoolean:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElementArray:withBoolean:);
  methods[2].selector = @selector(detach);
  methods[3].selector = @selector(getZCoordWithInt:);
  methods[4].selector = @selector(addWithLibOrgBouncycastleMathEcECPoint:);
  methods[5].selector = @selector(twice);
  methods[6].selector = @selector(twicePlusWithLibOrgBouncycastleMathEcECPoint:);
  methods[7].selector = @selector(threeTimes);
  methods[8].selector = @selector(timesPow2WithInt:);
  methods[9].selector = @selector(twoWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[10].selector = @selector(threeWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[11].selector = @selector(fourWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[12].selector = @selector(eightWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[13].selector = @selector(doubleProductFromSquaresWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[14].selector = @selector(negate);
  methods[15].selector = @selector(calculateJacobianModifiedWWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[16].selector = @selector(getJacobianModifiedW);
  methods[17].selector = @selector(twiceJacobianModifiedWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;Z", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;[LLibOrgBouncycastleMathEcECFieldElement;Z", "getZCoord", "I", "add", "LLibOrgBouncycastleMathEcECPoint;", "twicePlus", "timesPow2", "two", "LLibOrgBouncycastleMathEcECFieldElement;", "three", "four", "eight", "doubleProductFromSquares", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;", "calculateJacobianModifiedW", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;", "twiceJacobianModified", "Z" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECPoint_Fp = { "Fp", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x9, 18, 0, 5, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECPoint_Fp;
}

@end

void LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECPoint_Fp *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression) {
  LibOrgBouncycastleMathEcECPoint_AbstractFp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  if ((x == nil) != (y == nil)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Exactly one of the field elements is null");
  }
  self->withCompression_ = withCompression;
}

LibOrgBouncycastleMathEcECPoint_Fp *new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECPoint_Fp, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_, curve, x, y, withCompression)
}

LibOrgBouncycastleMathEcECPoint_Fp *create_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECPoint_Fp, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_, curve, x, y, withCompression)
}

void LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECPoint_Fp *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression) {
  LibOrgBouncycastleMathEcECPoint_AbstractFp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  self->withCompression_ = withCompression;
}

LibOrgBouncycastleMathEcECPoint_Fp *new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECPoint_Fp, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_, curve, x, y, zs, withCompression)
}

LibOrgBouncycastleMathEcECPoint_Fp *create_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECPoint_Fp, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_, curve, x, y, zs, withCompression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECPoint_Fp)

@implementation LibOrgBouncycastleMathEcECPoint_AbstractF2m

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y {
  LibOrgBouncycastleMathEcECPoint_AbstractF2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
        withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  LibOrgBouncycastleMathEcECPoint_AbstractF2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  return self;
}

- (jboolean)satisfiesCurveEquation {
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  LibOrgBouncycastleMathEcECFieldElement *X = self->x_;
  LibOrgBouncycastleMathEcECFieldElement *A = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getA];
  LibOrgBouncycastleMathEcECFieldElement *B = [curve getB];
  jint coord = [curve getCoordinateSystem];
  if (coord == LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE) {
    LibOrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(self->zs_), 0);
    jboolean ZIsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne];
    if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
      LibOrgBouncycastleMathEcECFieldElement *Y = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *lhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) square];
      LibOrgBouncycastleMathEcECFieldElement *rhs = B;
      if (!ZIsOne) {
        rhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(rhs)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[Z square]];
      }
      return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) isEqual:rhs];
    }
    LibOrgBouncycastleMathEcECFieldElement *L = self->y_;
    LibOrgBouncycastleMathEcECFieldElement *X2 = [X square];
    LibOrgBouncycastleMathEcECFieldElement *lhs;
    LibOrgBouncycastleMathEcECFieldElement *rhs;
    if (ZIsOne) {
      lhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:L])) addWithLibOrgBouncycastleMathEcECFieldElement:A];
      rhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:B];
    }
    else {
      LibOrgBouncycastleMathEcECFieldElement *Z2 = [Z square];
      LibOrgBouncycastleMathEcECFieldElement *Z4 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) square];
      lhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithLibOrgBouncycastleMathEcECFieldElement:Z])) multiplyPlusProductWithLibOrgBouncycastleMathEcECFieldElement:L withLibOrgBouncycastleMathEcECFieldElement:A withLibOrgBouncycastleMathEcECFieldElement:Z2];
      rhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) squarePlusProductWithLibOrgBouncycastleMathEcECFieldElement:B withLibOrgBouncycastleMathEcECFieldElement:Z4];
    }
    lhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:X2];
    return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) isEqual:rhs];
  }
  LibOrgBouncycastleMathEcECFieldElement *Y = self->y_;
  LibOrgBouncycastleMathEcECFieldElement *lhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) addWithLibOrgBouncycastleMathEcECFieldElement:X])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    break;
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      LibOrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
        LibOrgBouncycastleMathEcECFieldElement *Z2 = [Z square];
        LibOrgBouncycastleMathEcECFieldElement *Z3 = [Z multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
        lhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z];
        A = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(A)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z];
        B = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(B)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z3];
      }
      break;
    }
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
  }
  LibOrgBouncycastleMathEcECFieldElement *rhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) addWithLibOrgBouncycastleMathEcECFieldElement:A])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[X square]])) addWithLibOrgBouncycastleMathEcECFieldElement:B];
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) isEqual:rhs];
}

- (jboolean)satisfiesOrder {
  JavaMathBigInteger *cofactor = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getCofactor];
  if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO))) isEqual:cofactor]) {
    LibOrgBouncycastleMathEcECPoint *N = [self normalize];
    LibOrgBouncycastleMathEcECFieldElement *X = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(N)) getAffineXCoord];
    LibOrgBouncycastleMathEcECFieldElement *rhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getA]];
    return [((LibOrgBouncycastleMathEcECFieldElement_AbstractF2m *) nil_chk(((LibOrgBouncycastleMathEcECFieldElement_AbstractF2m *) cast_chk(rhs, [LibOrgBouncycastleMathEcECFieldElement_AbstractF2m class])))) trace] == 0;
  }
  if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, FOUR))) isEqual:cofactor]) {
    LibOrgBouncycastleMathEcECPoint *N = [self normalize];
    LibOrgBouncycastleMathEcECFieldElement *X = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(N)) getAffineXCoord];
    LibOrgBouncycastleMathEcECFieldElement *lambda = [((LibOrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(((LibOrgBouncycastleMathEcECCurve_AbstractF2m *) cast_chk(curve_, [LibOrgBouncycastleMathEcECCurve_AbstractF2m class])))) solveQuadraticEquationWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getA]]];
    if (lambda == nil) {
      return false;
    }
    LibOrgBouncycastleMathEcECFieldElement *w = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([X multiplyWithLibOrgBouncycastleMathEcECFieldElement:lambda])) addWithLibOrgBouncycastleMathEcECFieldElement:[N getAffineYCoord]];
    LibOrgBouncycastleMathEcECFieldElement *t = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w)) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getA]];
    return [((LibOrgBouncycastleMathEcECFieldElement_AbstractF2m *) nil_chk(((LibOrgBouncycastleMathEcECFieldElement_AbstractF2m *) cast_chk(t, [LibOrgBouncycastleMathEcECFieldElement_AbstractF2m class])))) trace] == 0 || [((LibOrgBouncycastleMathEcECFieldElement_AbstractF2m *) nil_chk(((LibOrgBouncycastleMathEcECFieldElement_AbstractF2m *) cast_chk(([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(t)) addWithLibOrgBouncycastleMathEcECFieldElement:X]), [LibOrgBouncycastleMathEcECFieldElement_AbstractF2m class])))) trace] == 0;
  }
  return LibOrgBouncycastleMathEcECPoint_satisfiesOrder(self);
}

- (LibOrgBouncycastleMathEcECPoint *)scaleXWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_ {
  if ([self isInfinity]) {
    return self;
  }
  jint coord = [self getCurveCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *X = LibOrgBouncycastleMathEcECPoint_getRawXCoord(self);
      LibOrgBouncycastleMathEcECFieldElement *L = LibOrgBouncycastleMathEcECPoint_getRawYCoord(self);
      LibOrgBouncycastleMathEcECFieldElement *X2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:scale_];
      LibOrgBouncycastleMathEcECFieldElement *L2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithLibOrgBouncycastleMathEcECFieldElement:X])) divideWithLibOrgBouncycastleMathEcECFieldElement:scale_])) addWithLibOrgBouncycastleMathEcECFieldElement:X2];
      return [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithLibOrgBouncycastleMathEcECFieldElement:X withLibOrgBouncycastleMathEcECFieldElement:L2 withLibOrgBouncycastleMathEcECFieldElementArray:LibOrgBouncycastleMathEcECPoint_getRawZCoords(self) withBoolean:self->withCompression_];
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      LibOrgBouncycastleMathEcECFieldElement *X = LibOrgBouncycastleMathEcECPoint_getRawXCoord(self);
      LibOrgBouncycastleMathEcECFieldElement *L = LibOrgBouncycastleMathEcECPoint_getRawYCoord(self);
      LibOrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(LibOrgBouncycastleMathEcECPoint_getRawZCoords(self)), 0);
      LibOrgBouncycastleMathEcECFieldElement *X2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(scale_)) square]];
      LibOrgBouncycastleMathEcECFieldElement *L2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithLibOrgBouncycastleMathEcECFieldElement:X])) addWithLibOrgBouncycastleMathEcECFieldElement:X2];
      LibOrgBouncycastleMathEcECFieldElement *Z2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:scale_];
      return [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithLibOrgBouncycastleMathEcECFieldElement:X2 withLibOrgBouncycastleMathEcECFieldElement:L2 withLibOrgBouncycastleMathEcECFieldElementArray:[IOSObjectArray newArrayWithObjects:(id[]){ Z2 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()] withBoolean:self->withCompression_];
    }
    default:
    {
      return LibOrgBouncycastleMathEcECPoint_scaleXWithLibOrgBouncycastleMathEcECFieldElement_(self, scale_);
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)scaleYWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_ {
  if ([self isInfinity]) {
    return self;
  }
  jint coord = [self getCurveCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      LibOrgBouncycastleMathEcECFieldElement *X = LibOrgBouncycastleMathEcECPoint_getRawXCoord(self);
      LibOrgBouncycastleMathEcECFieldElement *L = LibOrgBouncycastleMathEcECPoint_getRawYCoord(self);
      LibOrgBouncycastleMathEcECFieldElement *L2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithLibOrgBouncycastleMathEcECFieldElement:X])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:scale_])) addWithLibOrgBouncycastleMathEcECFieldElement:X];
      return [((LibOrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithLibOrgBouncycastleMathEcECFieldElement:X withLibOrgBouncycastleMathEcECFieldElement:L2 withLibOrgBouncycastleMathEcECFieldElementArray:LibOrgBouncycastleMathEcECPoint_getRawZCoords(self) withBoolean:self->withCompression_];
    }
    default:
    {
      return LibOrgBouncycastleMathEcECPoint_scaleYWithLibOrgBouncycastleMathEcECFieldElement_(self, scale_);
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)subtractWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    return self;
  }
  return [self addWithLibOrgBouncycastleMathEcECPoint:[b negate]];
}

- (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)tau {
  if ([self isInfinity]) {
    return self;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
      return (LibOrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([curve createRawPointWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square] withLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) square] withBoolean:self->withCompression_], [LibOrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      return (LibOrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([curve createRawPointWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square] withLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) square] withLibOrgBouncycastleMathEcECFieldElementArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) square] } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()] withBoolean:self->withCompression_], [LibOrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)tauPowWithInt:(jint)pow {
  if ([self isInfinity]) {
    return self;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
      return (LibOrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([curve createRawPointWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) squarePowWithInt:pow] withLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) squarePowWithInt:pow] withBoolean:self->withCompression_], [LibOrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      return (LibOrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([curve createRawPointWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) squarePowWithInt:pow] withLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) squarePowWithInt:pow] withLibOrgBouncycastleMathEcECFieldElementArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) squarePowWithInt:pow] } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()] withBoolean:self->withCompression_], [LibOrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElementArray:);
  methods[2].selector = @selector(satisfiesCurveEquation);
  methods[3].selector = @selector(satisfiesOrder);
  methods[4].selector = @selector(scaleXWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[5].selector = @selector(scaleYWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[6].selector = @selector(subtractWithLibOrgBouncycastleMathEcECPoint:);
  methods[7].selector = @selector(tau);
  methods[8].selector = @selector(tauPowWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;[LLibOrgBouncycastleMathEcECFieldElement;", "scaleX", "LLibOrgBouncycastleMathEcECFieldElement;", "scaleY", "subtract", "LLibOrgBouncycastleMathEcECPoint;", "tauPow", "I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECPoint_AbstractF2m = { "AbstractF2m", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 9, 0, 6, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECPoint_AbstractF2m;
}

@end

void LibOrgBouncycastleMathEcECPoint_AbstractF2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y) {
  LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
}

void LibOrgBouncycastleMathEcECPoint_AbstractF2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECPoint_AbstractF2m)

@implementation LibOrgBouncycastleMathEcECPoint_F2m

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                            withBoolean:(jboolean)withCompression {
  LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(self, curve, x, y, withCompression);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
             withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
        withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                            withBoolean:(jboolean)withCompression {
  LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(self, curve, x, y, zs, withCompression);
  return self;
}

- (LibOrgBouncycastleMathEcECPoint *)detach {
  return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(nil, [self getAffineXCoord], [self getAffineYCoord], false);
}

- (LibOrgBouncycastleMathEcECFieldElement *)getYCoord {
  jint coord = [self getCurveCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      LibOrgBouncycastleMathEcECFieldElement *X = x_;
      LibOrgBouncycastleMathEcECFieldElement *L = y_;
      if ([self isInfinity] || [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
        return L;
      }
      LibOrgBouncycastleMathEcECFieldElement *Y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithLibOrgBouncycastleMathEcECFieldElement:X])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:X];
      if (LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE == coord) {
        LibOrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(zs_), 0);
        if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
          Y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) divideWithLibOrgBouncycastleMathEcECFieldElement:Z];
        }
      }
      return Y;
    }
    default:
    {
      return y_;
    }
  }
}

- (jboolean)getCompressionYTilde {
  LibOrgBouncycastleMathEcECFieldElement *X = LibOrgBouncycastleMathEcECPoint_getRawXCoord(self);
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
    return false;
  }
  LibOrgBouncycastleMathEcECFieldElement *Y = LibOrgBouncycastleMathEcECPoint_getRawYCoord(self);
  switch ([self getCurveCoordinateSystem]) {
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) testBitZero] != [X testBitZero];
    }
    default:
    {
      return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) divideWithLibOrgBouncycastleMathEcECFieldElement:X])) testBitZero];
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)addWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  if ([self isInfinity]) {
    return b;
  }
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    return self;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  LibOrgBouncycastleMathEcECFieldElement *X2 = b->x_;
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Y2 = b->y_;
      LibOrgBouncycastleMathEcECFieldElement *dx = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) addWithLibOrgBouncycastleMathEcECFieldElement:X2];
      LibOrgBouncycastleMathEcECFieldElement *dy = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) addWithLibOrgBouncycastleMathEcECFieldElement:Y2];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dx)) isZero]) {
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) isZero]) {
          return [self twice];
        }
        return [curve getInfinity];
      }
      LibOrgBouncycastleMathEcECFieldElement *L = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) divideWithLibOrgBouncycastleMathEcECFieldElement:dx];
      LibOrgBouncycastleMathEcECFieldElement *X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:L])) addWithLibOrgBouncycastleMathEcECFieldElement:dx])) addWithLibOrgBouncycastleMathEcECFieldElement:[curve getA]];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([L multiplyWithLibOrgBouncycastleMathEcECFieldElement:[X1 addWithLibOrgBouncycastleMathEcECFieldElement:X3]])) addWithLibOrgBouncycastleMathEcECFieldElement:X3])) addWithLibOrgBouncycastleMathEcECFieldElement:Y1];
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, X3, Y3, self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      LibOrgBouncycastleMathEcECFieldElement *Y2 = b->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(b->zs_, 0);
      jboolean Z2IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *U1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Y2];
      LibOrgBouncycastleMathEcECFieldElement *U2 = Z2IsOne ? Y1 : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
      LibOrgBouncycastleMathEcECFieldElement *U = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(U1)) addWithLibOrgBouncycastleMathEcECFieldElement:U2];
      LibOrgBouncycastleMathEcECFieldElement *V1 = [Z1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:X2];
      LibOrgBouncycastleMathEcECFieldElement *V2 = Z2IsOne ? X1 : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
      LibOrgBouncycastleMathEcECFieldElement *V = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(V1)) addWithLibOrgBouncycastleMathEcECFieldElement:V2];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(V)) isZero]) {
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(U)) isZero]) {
          return [self twice];
        }
        return [curve getInfinity];
      }
      LibOrgBouncycastleMathEcECFieldElement *VSq = [V square];
      LibOrgBouncycastleMathEcECFieldElement *VCu = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(VSq)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:V];
      LibOrgBouncycastleMathEcECFieldElement *W = Z2IsOne ? Z1 : [Z1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
      LibOrgBouncycastleMathEcECFieldElement *uv = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(U)) addWithLibOrgBouncycastleMathEcECFieldElement:V];
      LibOrgBouncycastleMathEcECFieldElement *A = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(uv)) multiplyPlusProductWithLibOrgBouncycastleMathEcECFieldElement:U withLibOrgBouncycastleMathEcECFieldElement:VSq withLibOrgBouncycastleMathEcECFieldElement:[curve getA]])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:W])) addWithLibOrgBouncycastleMathEcECFieldElement:VCu];
      LibOrgBouncycastleMathEcECFieldElement *X3 = [V multiplyWithLibOrgBouncycastleMathEcECFieldElement:A];
      LibOrgBouncycastleMathEcECFieldElement *VSqZ2 = Z2IsOne ? VSq : [VSq multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([U multiplyPlusProductWithLibOrgBouncycastleMathEcECFieldElement:X1 withLibOrgBouncycastleMathEcECFieldElement:V withLibOrgBouncycastleMathEcECFieldElement:Y1])) multiplyPlusProductWithLibOrgBouncycastleMathEcECFieldElement:VSqZ2 withLibOrgBouncycastleMathEcECFieldElement:uv withLibOrgBouncycastleMathEcECFieldElement:A];
      LibOrgBouncycastleMathEcECFieldElement *Z3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(VCu)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:W];
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) isZero]) {
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) isZero]) {
          return [curve getInfinity];
        }
        return [b addWithLibOrgBouncycastleMathEcECPoint:self];
      }
      LibOrgBouncycastleMathEcECFieldElement *L1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      LibOrgBouncycastleMathEcECFieldElement *L2 = b->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(b->zs_, 0);
      jboolean Z1IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *U2 = X2;
      LibOrgBouncycastleMathEcECFieldElement *S2 = L2;
      if (!Z1IsOne) {
        U2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(U2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
        S2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(S2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      }
      jboolean Z2IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *U1 = X1;
      LibOrgBouncycastleMathEcECFieldElement *S1 = L1;
      if (!Z2IsOne) {
        U1 = [U1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
        S1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(S1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
      }
      LibOrgBouncycastleMathEcECFieldElement *A = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(S1)) addWithLibOrgBouncycastleMathEcECFieldElement:S2];
      LibOrgBouncycastleMathEcECFieldElement *B = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(U1)) addWithLibOrgBouncycastleMathEcECFieldElement:U2];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(B)) isZero]) {
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(A)) isZero]) {
          return [self twice];
        }
        return [curve getInfinity];
      }
      LibOrgBouncycastleMathEcECFieldElement *X3;
      LibOrgBouncycastleMathEcECFieldElement *L3;
      LibOrgBouncycastleMathEcECFieldElement *Z3;
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) isZero]) {
        LibOrgBouncycastleMathEcECPoint *p = [self normalize];
        X1 = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getXCoord];
        LibOrgBouncycastleMathEcECFieldElement *Y1 = [p getYCoord];
        LibOrgBouncycastleMathEcECFieldElement *Y2 = L2;
        LibOrgBouncycastleMathEcECFieldElement *L = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) addWithLibOrgBouncycastleMathEcECFieldElement:Y2])) divideWithLibOrgBouncycastleMathEcECFieldElement:X1];
        X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:L])) addWithLibOrgBouncycastleMathEcECFieldElement:X1])) addWithLibOrgBouncycastleMathEcECFieldElement:[curve getA]];
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X3)) isZero]) {
          return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, X3, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt], self->withCompression_);
        }
        LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([L multiplyWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) addWithLibOrgBouncycastleMathEcECFieldElement:X3]])) addWithLibOrgBouncycastleMathEcECFieldElement:X3])) addWithLibOrgBouncycastleMathEcECFieldElement:Y1];
        L3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y3)) divideWithLibOrgBouncycastleMathEcECFieldElement:X3])) addWithLibOrgBouncycastleMathEcECFieldElement:X3];
        Z3 = [curve fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)];
      }
      else {
        B = [B square];
        LibOrgBouncycastleMathEcECFieldElement *AU1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(A)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:U1];
        LibOrgBouncycastleMathEcECFieldElement *AU2 = [A multiplyWithLibOrgBouncycastleMathEcECFieldElement:U2];
        X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(AU1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:AU2];
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X3)) isZero]) {
          return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, X3, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt], self->withCompression_);
        }
        LibOrgBouncycastleMathEcECFieldElement *ABZ2 = [A multiplyWithLibOrgBouncycastleMathEcECFieldElement:B];
        if (!Z2IsOne) {
          ABZ2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(ABZ2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z2];
        }
        L3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(AU2)) addWithLibOrgBouncycastleMathEcECFieldElement:B])) squarePlusProductWithLibOrgBouncycastleMathEcECFieldElement:ABZ2 withLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) addWithLibOrgBouncycastleMathEcECFieldElement:Z1]];
        Z3 = ABZ2;
        if (!Z1IsOne) {
          Z3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z3)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
        }
      }
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, L3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)twice {
  if ([self isInfinity]) {
    return self;
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) isZero]) {
    return [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  }
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *L1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) divideWithLibOrgBouncycastleMathEcECFieldElement:X1])) addWithLibOrgBouncycastleMathEcECFieldElement:X1];
      LibOrgBouncycastleMathEcECFieldElement *X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:L1])) addWithLibOrgBouncycastleMathEcECFieldElement:[curve getA]];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [X1 squarePlusProductWithLibOrgBouncycastleMathEcECFieldElement:X3 withLibOrgBouncycastleMathEcECFieldElement:[L1 addOne]];
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, X3, Y3, self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      jboolean Z1IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *X1Z1 = Z1IsOne ? X1 : [X1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      LibOrgBouncycastleMathEcECFieldElement *Y1Z1 = Z1IsOne ? Y1 : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      LibOrgBouncycastleMathEcECFieldElement *X1Sq = [X1 square];
      LibOrgBouncycastleMathEcECFieldElement *S = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1Sq)) addWithLibOrgBouncycastleMathEcECFieldElement:Y1Z1];
      LibOrgBouncycastleMathEcECFieldElement *V = X1Z1;
      LibOrgBouncycastleMathEcECFieldElement *vSquared = [V square];
      LibOrgBouncycastleMathEcECFieldElement *sv = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(S)) addWithLibOrgBouncycastleMathEcECFieldElement:V];
      LibOrgBouncycastleMathEcECFieldElement *h = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(sv)) multiplyPlusProductWithLibOrgBouncycastleMathEcECFieldElement:S withLibOrgBouncycastleMathEcECFieldElement:vSquared withLibOrgBouncycastleMathEcECFieldElement:[curve getA]];
      LibOrgBouncycastleMathEcECFieldElement *X3 = [V multiplyWithLibOrgBouncycastleMathEcECFieldElement:h];
      LibOrgBouncycastleMathEcECFieldElement *Y3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([X1Sq square])) multiplyPlusProductWithLibOrgBouncycastleMathEcECFieldElement:V withLibOrgBouncycastleMathEcECFieldElement:h withLibOrgBouncycastleMathEcECFieldElement:sv];
      LibOrgBouncycastleMathEcECFieldElement *Z3 = [V multiplyWithLibOrgBouncycastleMathEcECFieldElement:vSquared];
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      LibOrgBouncycastleMathEcECFieldElement *L1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      jboolean Z1IsOne = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      LibOrgBouncycastleMathEcECFieldElement *L1Z1 = Z1IsOne ? L1 : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      LibOrgBouncycastleMathEcECFieldElement *Z1Sq = Z1IsOne ? Z1 : [Z1 square];
      LibOrgBouncycastleMathEcECFieldElement *a = [curve getA];
      LibOrgBouncycastleMathEcECFieldElement *aZ1Sq = Z1IsOne ? a : [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(a)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq];
      LibOrgBouncycastleMathEcECFieldElement *T = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:L1Z1])) addWithLibOrgBouncycastleMathEcECFieldElement:aZ1Sq];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(T)) isZero]) {
        return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, T, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt], withCompression_);
      }
      LibOrgBouncycastleMathEcECFieldElement *X3 = [T square];
      LibOrgBouncycastleMathEcECFieldElement *Z3 = Z1IsOne ? T : [T multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq];
      LibOrgBouncycastleMathEcECFieldElement *b = [curve getB];
      LibOrgBouncycastleMathEcECFieldElement *L3;
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(b)) bitLength] < (JreRShift32([curve getFieldSize], 1))) {
        LibOrgBouncycastleMathEcECFieldElement *t1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([L1 addWithLibOrgBouncycastleMathEcECFieldElement:X1])) square];
        LibOrgBouncycastleMathEcECFieldElement *t2;
        if ([b isOne]) {
          t2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([aZ1Sq addWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq])) square];
        }
        else {
          t2 = [aZ1Sq squarePlusProductWithLibOrgBouncycastleMathEcECFieldElement:b withLibOrgBouncycastleMathEcECFieldElement:[Z1Sq square]];
        }
        L3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(t1)) addWithLibOrgBouncycastleMathEcECFieldElement:T])) addWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:t1])) addWithLibOrgBouncycastleMathEcECFieldElement:t2])) addWithLibOrgBouncycastleMathEcECFieldElement:X3];
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(a)) isZero]) {
          L3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L3)) addWithLibOrgBouncycastleMathEcECFieldElement:Z3];
        }
        else if (![a isOne]) {
          L3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L3)) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([a addOne])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z3]];
        }
      }
      else {
        LibOrgBouncycastleMathEcECFieldElement *X1Z1 = Z1IsOne ? X1 : [X1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
        L3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([X1Z1 squarePlusProductWithLibOrgBouncycastleMathEcECFieldElement:T withLibOrgBouncycastleMathEcECFieldElement:L1Z1])) addWithLibOrgBouncycastleMathEcECFieldElement:X3])) addWithLibOrgBouncycastleMathEcECFieldElement:Z3];
      }
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, L3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)twicePlusWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b {
  if ([self isInfinity]) {
    return b;
  }
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    return [self twice];
  }
  LibOrgBouncycastleMathEcECCurve *curve = [self getCurve];
  LibOrgBouncycastleMathEcECFieldElement *X1 = self->x_;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) isZero]) {
    return b;
  }
  jint coord = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      LibOrgBouncycastleMathEcECFieldElement *X2 = b->x_;
      LibOrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(nil_chk(b->zs_), 0);
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) isZero] || ![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne]) {
        return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithLibOrgBouncycastleMathEcECPoint:b];
      }
      LibOrgBouncycastleMathEcECFieldElement *L1 = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      LibOrgBouncycastleMathEcECFieldElement *L2 = b->y_;
      LibOrgBouncycastleMathEcECFieldElement *X1Sq = [X1 square];
      LibOrgBouncycastleMathEcECFieldElement *L1Sq = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) square];
      LibOrgBouncycastleMathEcECFieldElement *Z1Sq = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) square];
      LibOrgBouncycastleMathEcECFieldElement *L1Z1 = [L1 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1];
      LibOrgBouncycastleMathEcECFieldElement *T = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq])) addWithLibOrgBouncycastleMathEcECFieldElement:L1Sq])) addWithLibOrgBouncycastleMathEcECFieldElement:L1Z1];
      LibOrgBouncycastleMathEcECFieldElement *L2plus1 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L2)) addOne];
      LibOrgBouncycastleMathEcECFieldElement *A = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) addWithLibOrgBouncycastleMathEcECFieldElement:L2plus1])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq])) addWithLibOrgBouncycastleMathEcECFieldElement:L1Sq])) multiplyPlusProductWithLibOrgBouncycastleMathEcECFieldElement:T withLibOrgBouncycastleMathEcECFieldElement:X1Sq withLibOrgBouncycastleMathEcECFieldElement:Z1Sq];
      LibOrgBouncycastleMathEcECFieldElement *X2Z1Sq = [X2 multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq];
      LibOrgBouncycastleMathEcECFieldElement *B = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X2Z1Sq)) addWithLibOrgBouncycastleMathEcECFieldElement:T])) square];
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(B)) isZero]) {
        if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(A)) isZero]) {
          return [b twice];
        }
        return [curve getInfinity];
      }
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(A)) isZero]) {
        return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve, A, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt], withCompression_);
      }
      LibOrgBouncycastleMathEcECFieldElement *X3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([A square])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:X2Z1Sq];
      LibOrgBouncycastleMathEcECFieldElement *Z3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([A multiplyWithLibOrgBouncycastleMathEcECFieldElement:B])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:Z1Sq];
      LibOrgBouncycastleMathEcECFieldElement *L3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([A addWithLibOrgBouncycastleMathEcECFieldElement:B])) square])) multiplyPlusProductWithLibOrgBouncycastleMathEcECFieldElement:T withLibOrgBouncycastleMathEcECFieldElement:L2plus1 withLibOrgBouncycastleMathEcECFieldElement:Z3];
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve, X3, L3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    default:
    {
      return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithLibOrgBouncycastleMathEcECPoint:b];
    }
  }
}

- (LibOrgBouncycastleMathEcECPoint *)negate {
  if ([self isInfinity]) {
    return self;
  }
  LibOrgBouncycastleMathEcECFieldElement *X = self->x_;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
    return self;
  }
  switch ([self getCurveCoordinateSystem]) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y = self->y_;
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve_, X, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) addWithLibOrgBouncycastleMathEcECFieldElement:X], self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      LibOrgBouncycastleMathEcECFieldElement *Y = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve_, X, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) addWithLibOrgBouncycastleMathEcECFieldElement:X], [IOSObjectArray newArrayWithObjects:(id[]){ Z } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      LibOrgBouncycastleMathEcECFieldElement *L = self->y_;
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(curve_, X, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addOne], self->withCompression_);
    }
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      LibOrgBouncycastleMathEcECFieldElement *L = self->y_;
      LibOrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(self->zs_), 0);
      return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(curve_, X, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithLibOrgBouncycastleMathEcECFieldElement:Z], [IOSObjectArray newArrayWithObjects:(id[]){ Z } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], self->withCompression_);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withBoolean:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElementArray:withBoolean:);
  methods[2].selector = @selector(detach);
  methods[3].selector = @selector(getYCoord);
  methods[4].selector = @selector(getCompressionYTilde);
  methods[5].selector = @selector(addWithLibOrgBouncycastleMathEcECPoint:);
  methods[6].selector = @selector(twice);
  methods[7].selector = @selector(twicePlusWithLibOrgBouncycastleMathEcECPoint:);
  methods[8].selector = @selector(negate);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;Z", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;[LLibOrgBouncycastleMathEcECFieldElement;Z", "add", "LLibOrgBouncycastleMathEcECPoint;", "twicePlus" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECPoint_F2m = { "F2m", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x9, 9, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECPoint_F2m;
}

@end

void LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECPoint_F2m *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression) {
  LibOrgBouncycastleMathEcECPoint_AbstractF2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  if ((x == nil) != (y == nil)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Exactly one of the field elements is null");
  }
  if (x != nil) {
    LibOrgBouncycastleMathEcECFieldElement_F2m_checkFieldElementsWithLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self->x_, self->y_);
    if (curve != nil) {
      LibOrgBouncycastleMathEcECFieldElement_F2m_checkFieldElementsWithLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self->x_, [((LibOrgBouncycastleMathEcECCurve *) nil_chk(self->curve_)) getA]);
    }
  }
  self->withCompression_ = withCompression;
}

LibOrgBouncycastleMathEcECPoint_F2m *new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECPoint_F2m, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_, curve, x, y, withCompression)
}

LibOrgBouncycastleMathEcECPoint_F2m *create_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECPoint_F2m, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_, curve, x, y, withCompression)
}

void LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECPoint_F2m *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression) {
  LibOrgBouncycastleMathEcECPoint_AbstractF2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  self->withCompression_ = withCompression;
}

LibOrgBouncycastleMathEcECPoint_F2m *new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECPoint_F2m, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_, curve, x, y, zs, withCompression)
}

LibOrgBouncycastleMathEcECPoint_F2m *create_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECPoint_F2m, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_, curve, x, y, zs, withCompression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECPoint_F2m)
