//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/PublicKeyKeyEncryptionMethodGenerator.java
//

#include "ContainedPacket.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MPInteger.h"
#include "PGPException.h"
#include "PGPKeyEncryptionMethodGenerator.h"
#include "PGPPublicKey.h"
#include "PublicKeyAlgorithmTags.h"
#include "PublicKeyEncSessionPacket.h"
#include "PublicKeyKeyEncryptionMethodGenerator.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator () {
 @public
  LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey_;
}

- (IOSByteArray *)convertToEncodedMPIWithByteArray:(IOSByteArray *)encryptedSessionInfo;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator, pubKey_, LibOrgBouncycastleOpenpgpPGPPublicKey *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_convertToEncodedMPIWithByteArray_(LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator *self, IOSByteArray *encryptedSessionInfo);

@implementation LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey {
  LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(self, pubKey);
  return self;
}

- (IOSObjectArray *)processSessionInfoWithByteArray:(IOSByteArray *)encryptedSessionInfo {
  IOSObjectArray *data;
  {
    IOSByteArray *b1;
    IOSByteArray *b2;
    switch ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey_)) getAlgorithm]) {
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT:
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
      data = [IOSObjectArray newArrayWithLength:1 type:IOSClass_byteArray(1)];
      (void) IOSObjectArray_Set(data, 0, LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_convertToEncodedMPIWithByteArray_(self, encryptedSessionInfo));
      break;
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
      b1 = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(encryptedSessionInfo))->size_ / 2];
      b2 = [IOSByteArray newArrayWithLength:encryptedSessionInfo->size_ / 2];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(encryptedSessionInfo, 0, b1, 0, b1->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(encryptedSessionInfo, b1->size_, b2, 0, b2->size_);
      data = [IOSObjectArray newArrayWithLength:2 type:IOSClass_byteArray(1)];
      (void) IOSObjectArray_Set(data, 0, LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_convertToEncodedMPIWithByteArray_(self, b1));
      (void) IOSObjectArray_Set(data, 1, LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_convertToEncodedMPIWithByteArray_(self, b2));
      break;
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH:
      data = [IOSObjectArray newArrayWithLength:1 type:IOSClass_byteArray(1)];
      (void) IOSObjectArray_Set(data, 0, encryptedSessionInfo);
      break;
      default:
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown asymmetric algorithm: ", [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey_)) getAlgorithm]));
    }
  }
  return data;
}

- (IOSByteArray *)convertToEncodedMPIWithByteArray:(IOSByteArray *)encryptedSessionInfo {
  return LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_convertToEncodedMPIWithByteArray_(self, encryptedSessionInfo);
}

- (LibOrgBouncycastleBcpgContainedPacket *)generateWithInt:(jint)encAlgorithm
                                             withByteArray:(IOSByteArray *)sessionInfo {
  return new_LibOrgBouncycastleBcpgPublicKeyEncSessionPacket_initWithLong_withInt_withByteArray2_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey_)) getKeyID], [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey_)) getAlgorithm], [self processSessionInfoWithByteArray:[self encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:pubKey_ withByteArray:sessionInfo]]);
}

- (IOSByteArray *)encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
                                                                withByteArray:(IOSByteArray *)sessionInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "[[B", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x2, 4, 2, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgContainedPacket;", 0x1, 5, 6, 3, -1, -1, -1 },
    { NULL, "[B", 0x404, 7, 8, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[1].selector = @selector(processSessionInfoWithByteArray:);
  methods[2].selector = @selector(convertToEncodedMPIWithByteArray:);
  methods[3].selector = @selector(generateWithInt:withByteArray:);
  methods[4].selector = @selector(encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pubKey_", "LLibOrgBouncycastleOpenpgpPGPPublicKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleOpenpgpPGPPublicKey;", "processSessionInfo", "[B", "LLibOrgBouncycastleOpenpgpPGPException;", "convertToEncodedMPI", "generate", "I[B", "encryptSessionInfo", "LLibOrgBouncycastleOpenpgpPGPPublicKey;[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator = { "PublicKeyKeyEncryptionMethodGenerator", "lib.org.bouncycastle.openpgp.operator", ptrTable, methods, fields, 7, 0x401, 5, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator;
}

@end

void LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator *self, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey) {
  LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator_init(self);
  self->pubKey_ = pubKey;
  switch ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey)) getAlgorithm]) {
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT:
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
    break;
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't use an RSA_SIGN key for encryption.");
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
    break;
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH:
    break;
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't use DSA for encryption.");
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't use ECDSA for encryption.");
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown asymmetric algorithm: ", [pubKey getAlgorithm]));
  }
}

IOSByteArray *LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_convertToEncodedMPIWithByteArray_(LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator *self, IOSByteArray *encryptedSessionInfo) {
  @try {
    return [new_LibOrgBouncycastleBcpgMPInteger_initWithJavaMathBigInteger_(new_JavaMathBigInteger_initWithInt_withByteArray_(1, encryptedSessionInfo)) getEncoded];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"Invalid MPI encoding: ", [e getMessage]), e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator)
