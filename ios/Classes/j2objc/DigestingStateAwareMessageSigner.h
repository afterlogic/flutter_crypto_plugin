//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/DigestingStateAwareMessageSigner.java
//

#ifndef DigestingStateAwareMessageSigner_H
#define DigestingStateAwareMessageSigner_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DigestingMessageSigner.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastlePqcCryptoMessageSigner;
@protocol LibOrgBouncycastlePqcCryptoStateAwareMessageSigner;

@interface LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner : LibOrgBouncycastlePqcCryptoDigestingMessageSigner

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcCryptoStateAwareMessageSigner:(id<LibOrgBouncycastlePqcCryptoStateAwareMessageSigner>)messSigner
                                                  withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)messDigest;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getUpdatedPrivateKey;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcCryptoMessageSigner:(id<LibOrgBouncycastlePqcCryptoMessageSigner>)arg0
                                        withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner_initWithLibOrgBouncycastlePqcCryptoStateAwareMessageSigner_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner *self, id<LibOrgBouncycastlePqcCryptoStateAwareMessageSigner> messSigner, id<LibOrgBouncycastleCryptoDigest> messDigest);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner *new_LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner_initWithLibOrgBouncycastlePqcCryptoStateAwareMessageSigner_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastlePqcCryptoStateAwareMessageSigner> messSigner, id<LibOrgBouncycastleCryptoDigest> messDigest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner *create_LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner_initWithLibOrgBouncycastlePqcCryptoStateAwareMessageSigner_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastlePqcCryptoStateAwareMessageSigner> messSigner, id<LibOrgBouncycastleCryptoDigest> messDigest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoDigestingStateAwareMessageSigner)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DigestingStateAwareMessageSigner_H
