//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/ntru/NTRUSigningPublicKeyParameters.java
//

#include "AsymmetricKeyParameter.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IntegerPolynomial.h"
#include "J2ObjC_source.h"
#include "NTRUSigningParameters.h"
#include "NTRUSigningPublicKeyParameters.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"

@interface LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters () {
 @public
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters, params_, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *)

@implementation LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters

- (instancetype)initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)h
                        withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *)params {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(self, h, params);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)b
withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *)params {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(self, b, params);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *)params {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(self, is, params);
  return self;
}

- (IOSByteArray *)getEncoded {
  return [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(h_)) toBinaryWithInt:((LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *) nil_chk(params_))->q_];
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[self getEncoded]];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((h_ == nil) ? 0 : ((jint) [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(h_)) hash]));
  result = prime * result + ((params_ == nil) ? 0 : ((jint) [((LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *) nil_chk(params_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *other = (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *) cast_chk(obj, [LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters class]);
  if (h_ == nil) {
    if (other->h_ != nil) {
      return false;
    }
  }
  else if (![h_ isEqual:other->h_]) {
    return false;
  }
  if (params_ == nil) {
    if (other->params_ != nil) {
      return false;
    }
  }
  else if (![params_ isEqual:other->params_]) {
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters:);
  methods[1].selector = @selector(initWithByteArray:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters:);
  methods[2].selector = @selector(initWithJavaIoInputStream:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters:);
  methods[3].selector = @selector(getEncoded);
  methods[4].selector = @selector(writeToWithJavaIoOutputStream:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "h_", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;LLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters;", "[BLLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters;", "LJavaIoInputStream;LLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters;", "LJavaIoIOException;", "writeTo", "LJavaIoOutputStream;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters = { "NTRUSigningPublicKeyParameters", "lib.org.bouncycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters;
}

@end

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *self, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, false);
  self->h_ = h;
  self->params_ = params;
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters, initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_, h, params)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters, initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_, h, params)
}

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *self, IOSByteArray *b, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, false);
  self->h_ = LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithByteArray_withInt_withInt_(b, ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *) nil_chk(params))->N_, params->q_);
  self->params_ = params;
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(IOSByteArray *b, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters, initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_, b, params)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(IOSByteArray *b, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters, initWithByteArray_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_, b, params)
}

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *self, JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, false);
  self->h_ = LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_(is, ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *) nil_chk(params))->N_, params->q_);
  self->params_ = params;
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters, initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_, is, params)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(JavaIoInputStream *is, LibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters, initWithJavaIoInputStream_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_, is, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters)
