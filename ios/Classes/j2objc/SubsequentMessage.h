//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/SubsequentMessage.java
//

#ifndef SubsequentMessage_H
#define SubsequentMessage_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Integer.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaMathBigInteger;

@interface LibOrgBouncycastleAsn1CrmfSubsequentMessage : LibOrgBouncycastleAsn1ASN1Integer
@property (readonly, class) LibOrgBouncycastleAsn1CrmfSubsequentMessage *encrCert NS_SWIFT_NAME(encrCert);
@property (readonly, class) LibOrgBouncycastleAsn1CrmfSubsequentMessage *challengeResp NS_SWIFT_NAME(challengeResp);

+ (LibOrgBouncycastleAsn1CrmfSubsequentMessage *)encrCert;

+ (LibOrgBouncycastleAsn1CrmfSubsequentMessage *)challengeResp;

#pragma mark Public

+ (LibOrgBouncycastleAsn1CrmfSubsequentMessage *)valueOfWithInt:(jint)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)arg0
                                withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLong:(jlong)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleAsn1CrmfSubsequentMessage)

inline LibOrgBouncycastleAsn1CrmfSubsequentMessage *LibOrgBouncycastleAsn1CrmfSubsequentMessage_get_encrCert(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfSubsequentMessage *LibOrgBouncycastleAsn1CrmfSubsequentMessage_encrCert;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CrmfSubsequentMessage, encrCert, LibOrgBouncycastleAsn1CrmfSubsequentMessage *)

inline LibOrgBouncycastleAsn1CrmfSubsequentMessage *LibOrgBouncycastleAsn1CrmfSubsequentMessage_get_challengeResp(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfSubsequentMessage *LibOrgBouncycastleAsn1CrmfSubsequentMessage_challengeResp;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CrmfSubsequentMessage, challengeResp, LibOrgBouncycastleAsn1CrmfSubsequentMessage *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfSubsequentMessage *LibOrgBouncycastleAsn1CrmfSubsequentMessage_valueOfWithInt_(jint value);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfSubsequentMessage)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SubsequentMessage_H
