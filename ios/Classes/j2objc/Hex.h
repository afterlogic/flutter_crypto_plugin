//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/encoders/Hex.java
//

#ifndef Hex_H
#define Hex_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoOutputStream;

@interface LibOrgBouncycastleUtilEncodersHex : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)data;

+ (IOSByteArray *)decodeWithNSString:(NSString *)data;

+ (jint)decodeWithNSString:(NSString *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)data;

+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)data
                              withInt:(jint)off
                              withInt:(jint)length;

+ (jint)encodeWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (jint)encodeWithByteArray:(IOSByteArray *)data
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)data;

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)data
                               withInt:(jint)off
                               withInt:(jint)length;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleUtilEncodersHex)

FOUNDATION_EXPORT void LibOrgBouncycastleUtilEncodersHex_init(LibOrgBouncycastleUtilEncodersHex *self);

FOUNDATION_EXPORT LibOrgBouncycastleUtilEncodersHex *new_LibOrgBouncycastleUtilEncodersHex_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilEncodersHex *create_LibOrgBouncycastleUtilEncodersHex_init(void);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint length);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint length);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_withJavaIoOutputStream_(IOSByteArray *data, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_withJavaIoOutputStream_(IOSByteArray *data, jint off, jint length, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilEncodersHex_decodeWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_(NSString *data);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_withJavaIoOutputStream_(NSString *data, JavaIoOutputStream *outArg);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilEncodersHex)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Hex_H
