//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/PGPExampleUtil.java
//

#ifndef PGPExampleUtil_H
#define PGPExampleUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSCharArray;
@class JavaIoInputStream;
@class LibOrgBouncycastleOpenpgpPGPPrivateKey;
@class LibOrgBouncycastleOpenpgpPGPPublicKey;
@class LibOrgBouncycastleOpenpgpPGPSecretKey;
@class LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection;

@interface LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (IOSByteArray *)compressFileWithNSString:(NSString *)fileName
                                   withInt:(jint)algorithm;

+ (LibOrgBouncycastleOpenpgpPGPPrivateKey *)findSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection:(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *)pgpSec
                                                                                                        withLong:(jlong)keyID
                                                                                                   withCharArray:(IOSCharArray *)pass;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)readPublicKeyWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)readPublicKeyWithNSString:(NSString *)fileName;

+ (LibOrgBouncycastleOpenpgpPGPSecretKey *)readSecretKeyWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (LibOrgBouncycastleOpenpgpPGPSecretKey *)readSecretKeyWithNSString:(NSString *)fileName;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_init(LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil *new_LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil *create_LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_init(void);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_compressFileWithNSString_withInt_(NSString *fileName, jint algorithm);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPrivateKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_findSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_withLong_withCharArray_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *pgpSec, jlong keyID, IOSCharArray *pass);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readPublicKeyWithNSString_(NSString *fileName);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readPublicKeyWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithNSString_(NSString *fileName);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithJavaIoInputStream_(JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PGPExampleUtil_H
