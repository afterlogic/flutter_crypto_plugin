//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/mceliece/PqcCryptoMcelieceUtils.java
//

#ifndef PqcCryptoMcelieceUtils_H
#define PqcCryptoMcelieceUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (id<LibOrgBouncycastleCryptoDigest>)getDigestWithNSString:(NSString *)digestName;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils_init(LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils *new_LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils *create_LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils_init(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils_getDigestWithNSString_(NSString *digestName);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PqcCryptoMcelieceUtils_H
