//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ServerSRPParams.java
//

#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ServerSRPParams.h"
#include "TlsSRPUtils.h"
#include "TlsUtils.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/math/BigInteger.h"

@implementation LibOrgBouncycastleCryptoTlsServerSRPParams

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)N
                    withJavaMathBigInteger:(JavaMathBigInteger *)g
                             withByteArray:(IOSByteArray *)s
                    withJavaMathBigInteger:(JavaMathBigInteger *)B {
  LibOrgBouncycastleCryptoTlsServerSRPParams_initWithJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withJavaMathBigInteger_(self, N, g, s, B);
  return self;
}

- (JavaMathBigInteger *)getB {
  return B_;
}

- (JavaMathBigInteger *)getG {
  return g_;
}

- (JavaMathBigInteger *)getN {
  return N_;
}

- (IOSByteArray *)getS {
  return s_;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_writeSRPParameterWithJavaMathBigInteger_withJavaIoOutputStream_(N_, output);
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_writeSRPParameterWithJavaMathBigInteger_withJavaIoOutputStream_(g_, output);
  LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(s_, output);
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_writeSRPParameterWithJavaMathBigInteger_withJavaIoOutputStream_(B_, output);
}

+ (LibOrgBouncycastleCryptoTlsServerSRPParams *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleCryptoTlsServerSRPParams_parseWithJavaIoInputStream_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsServerSRPParams;", 0x9, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withByteArray:withJavaMathBigInteger:);
  methods[1].selector = @selector(getB);
  methods[2].selector = @selector(getG);
  methods[3].selector = @selector(getN);
  methods[4].selector = @selector(getS);
  methods[5].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[6].selector = @selector(parseWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "N_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "g_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "B_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "s_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;[BLJavaMathBigInteger;", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsServerSRPParams = { "ServerSRPParams", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsServerSRPParams;
}

@end

void LibOrgBouncycastleCryptoTlsServerSRPParams_initWithJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withJavaMathBigInteger_(LibOrgBouncycastleCryptoTlsServerSRPParams *self, JavaMathBigInteger *N, JavaMathBigInteger *g, IOSByteArray *s, JavaMathBigInteger *B) {
  NSObject_init(self);
  self->N_ = N;
  self->g_ = g;
  self->s_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(s);
  self->B_ = B;
}

LibOrgBouncycastleCryptoTlsServerSRPParams *new_LibOrgBouncycastleCryptoTlsServerSRPParams_initWithJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withJavaMathBigInteger_(JavaMathBigInteger *N, JavaMathBigInteger *g, IOSByteArray *s, JavaMathBigInteger *B) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsServerSRPParams, initWithJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withJavaMathBigInteger_, N, g, s, B)
}

LibOrgBouncycastleCryptoTlsServerSRPParams *create_LibOrgBouncycastleCryptoTlsServerSRPParams_initWithJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withJavaMathBigInteger_(JavaMathBigInteger *N, JavaMathBigInteger *g, IOSByteArray *s, JavaMathBigInteger *B) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsServerSRPParams, initWithJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withJavaMathBigInteger_, N, g, s, B)
}

LibOrgBouncycastleCryptoTlsServerSRPParams *LibOrgBouncycastleCryptoTlsServerSRPParams_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  LibOrgBouncycastleCryptoTlsServerSRPParams_initialize();
  JavaMathBigInteger *N = LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPParameterWithJavaIoInputStream_(input);
  JavaMathBigInteger *g = LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPParameterWithJavaIoInputStream_(input);
  IOSByteArray *s = LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input);
  JavaMathBigInteger *B = LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPParameterWithJavaIoInputStream_(input);
  return new_LibOrgBouncycastleCryptoTlsServerSRPParams_initWithJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withJavaMathBigInteger_(N, g, s, B);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsServerSRPParams)
