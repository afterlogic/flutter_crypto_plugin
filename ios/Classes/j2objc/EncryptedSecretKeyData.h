//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/bc/EncryptedSecretKeyData.java
//

#ifndef EncryptedSecretKeyData_H
#define EncryptedSecretKeyData_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;

@interface LibOrgBouncycastleAsn1BcEncryptedSecretKeyData : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)keyEncryptionAlgorithm
                                                                  withByteArray:(IOSByteArray *)encryptedKeyData;

- (IOSByteArray *)getEncryptedKeyData;

+ (LibOrgBouncycastleAsn1BcEncryptedSecretKeyData *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getKeyEncryptionAlgorithm;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1BcEncryptedSecretKeyData)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1BcEncryptedSecretKeyData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1BcEncryptedSecretKeyData *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, IOSByteArray *encryptedKeyData);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1BcEncryptedSecretKeyData *new_LibOrgBouncycastleAsn1BcEncryptedSecretKeyData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, IOSByteArray *encryptedKeyData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1BcEncryptedSecretKeyData *create_LibOrgBouncycastleAsn1BcEncryptedSecretKeyData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, IOSByteArray *encryptedKeyData);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1BcEncryptedSecretKeyData *LibOrgBouncycastleAsn1BcEncryptedSecretKeyData_getInstanceWithId_(id o);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1BcEncryptedSecretKeyData)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // EncryptedSecretKeyData_H
