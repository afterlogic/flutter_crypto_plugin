//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/DESedeWrapEngine.java
//

#include "Arrays.h"
#include "CBCBlockCipher.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "DESedeEngine.h"
#include "DESedeWrapEngine.h"
#include "Digest.h"
#include "DigestFactory.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "ParametersWithIV.h"
#include "ParametersWithRandom.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoEnginesDESedeWrapEngine () {
 @public
  LibOrgBouncycastleCryptoModesCBCBlockCipher *engine_;
  LibOrgBouncycastleCryptoParamsKeyParameter *param_;
  LibOrgBouncycastleCryptoParamsParametersWithIV *paramPlusIV_;
  IOSByteArray *iv_;
  jboolean forWrapping_;
}

- (IOSByteArray *)calculateCMSKeyChecksumWithByteArray:(IOSByteArray *)key;

- (jboolean)checkCMSKeyChecksumWithByteArray:(IOSByteArray *)key
                               withByteArray:(IOSByteArray *)checksum;

+ (IOSByteArray *)reverseWithByteArray:(IOSByteArray *)bs;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine, engine_, LibOrgBouncycastleCryptoModesCBCBlockCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine, param_, LibOrgBouncycastleCryptoParamsKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine, paramPlusIV_, LibOrgBouncycastleCryptoParamsParametersWithIV *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine, iv_, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_get_IV2(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_IV2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine, IV2, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_calculateCMSKeyChecksumWithByteArray_(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine *self, IOSByteArray *key);

__attribute__((unused)) static jboolean LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_checkCMSKeyChecksumWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine *self, IOSByteArray *key, IOSByteArray *checksum);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_reverseWithByteArray_(IOSByteArray *bs);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine)

@implementation LibOrgBouncycastleCryptoEnginesDESedeWrapEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forWrapping
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  self->forWrapping_ = forWrapping;
  self->engine_ = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesDESedeEngine_init());
  JavaSecuritySecureRandom *sr;
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *pr = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
    param = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(pr)) getParameters];
    sr = [pr getRandom];
  }
  else {
    sr = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  }
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]]) {
    self->param_ = (LibOrgBouncycastleCryptoParamsKeyParameter *) param;
    if (self->forWrapping_) {
      self->iv_ = [IOSByteArray newArrayWithLength:8];
      [((JavaSecuritySecureRandom *) nil_chk(sr)) nextBytesWithByteArray:iv_];
      self->paramPlusIV_ = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(self->param_, self->iv_);
    }
  }
  else if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
    self->paramPlusIV_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) param;
    self->iv_ = [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(self->paramPlusIV_)) getIV];
    self->param_ = (LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(self->paramPlusIV_)) getParameters], [LibOrgBouncycastleCryptoParamsKeyParameter class]);
    if (self->forWrapping_) {
      if ((self->iv_ == nil) || (((IOSByteArray *) nil_chk(self->iv_))->size_ != 8)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"IV is not 8 octets");
      }
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"You should not supply an IV for unwrapping");
    }
  }
}

- (NSString *)getAlgorithmName {
  return @"DESede";
}

- (IOSByteArray *)wrapWithByteArray:(IOSByteArray *)inArg
                            withInt:(jint)inOff
                            withInt:(jint)inLen {
  if (!forWrapping_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Not initialized for wrapping");
  }
  IOSByteArray *keyToBeWrapped = [IOSByteArray newArrayWithLength:inLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, keyToBeWrapped, 0, inLen);
  IOSByteArray *CKS = LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_calculateCMSKeyChecksumWithByteArray_(self, keyToBeWrapped);
  IOSByteArray *WKCKS = [IOSByteArray newArrayWithLength:keyToBeWrapped->size_ + ((IOSByteArray *) nil_chk(CKS))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keyToBeWrapped, 0, WKCKS, 0, keyToBeWrapped->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(CKS, 0, WKCKS, keyToBeWrapped->size_, CKS->size_);
  jint blockSize = [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) getBlockSize];
  if (WKCKS->size_ % blockSize != 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Not multiple of block length");
  }
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:paramPlusIV_];
  IOSByteArray *TEMP1 = [IOSByteArray newArrayWithLength:WKCKS->size_];
  for (jint currentBytePos = 0; currentBytePos != WKCKS->size_; currentBytePos += blockSize) {
    [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:WKCKS withInt:currentBytePos withByteArray:TEMP1 withInt:currentBytePos];
  }
  IOSByteArray *TEMP2 = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(self->iv_))->size_ + TEMP1->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->iv_, 0, TEMP2, 0, self->iv_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(TEMP1, 0, TEMP2, ((IOSByteArray *) nil_chk(self->iv_))->size_, TEMP1->size_);
  IOSByteArray *TEMP3 = LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_reverseWithByteArray_(TEMP2);
  LibOrgBouncycastleCryptoParamsParametersWithIV *param2 = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(self->param_, LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_IV2);
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(self->engine_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param2];
  for (jint currentBytePos = 0; currentBytePos != ((IOSByteArray *) nil_chk(TEMP3))->size_; currentBytePos += blockSize) {
    [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:TEMP3 withInt:currentBytePos withByteArray:TEMP3 withInt:currentBytePos];
  }
  return TEMP3;
}

- (IOSByteArray *)unwrapWithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff
                              withInt:(jint)inLen {
  if (forWrapping_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Not set for unwrapping");
  }
  if (inArg == nil) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Null pointer as ciphertext");
  }
  jint blockSize = [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) getBlockSize];
  if (inLen % blockSize != 0) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(JreStrcat("$I", @"Ciphertext not multiple of ", blockSize));
  }
  LibOrgBouncycastleCryptoParamsParametersWithIV *param2 = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(self->param_, LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_IV2);
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(self->engine_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param2];
  IOSByteArray *TEMP3 = [IOSByteArray newArrayWithLength:inLen];
  for (jint currentBytePos = 0; currentBytePos != inLen; currentBytePos += blockSize) {
    [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:inArg withInt:inOff + currentBytePos withByteArray:TEMP3 withInt:currentBytePos];
  }
  IOSByteArray *TEMP2 = LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_reverseWithByteArray_(TEMP3);
  self->iv_ = [IOSByteArray newArrayWithLength:8];
  IOSByteArray *TEMP1 = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(TEMP2))->size_ - 8];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(TEMP2, 0, self->iv_, 0, 8);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(TEMP2, 8, TEMP1, 0, TEMP2->size_ - 8);
  self->paramPlusIV_ = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(self->param_, self->iv_);
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(self->engine_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:self->paramPlusIV_];
  IOSByteArray *WKCKS = [IOSByteArray newArrayWithLength:TEMP1->size_];
  for (jint currentBytePos = 0; currentBytePos != WKCKS->size_; currentBytePos += blockSize) {
    [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:TEMP1 withInt:currentBytePos withByteArray:WKCKS withInt:currentBytePos];
  }
  IOSByteArray *result = [IOSByteArray newArrayWithLength:WKCKS->size_ - 8];
  IOSByteArray *CKStoBeVerified = [IOSByteArray newArrayWithLength:8];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(WKCKS, 0, result, 0, WKCKS->size_ - 8);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(WKCKS, WKCKS->size_ - 8, CKStoBeVerified, 0, 8);
  if (!LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_checkCMSKeyChecksumWithByteArray_withByteArray_(self, result, CKStoBeVerified)) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Checksum inside ciphertext is corrupted");
  }
  return result;
}

- (IOSByteArray *)calculateCMSKeyChecksumWithByteArray:(IOSByteArray *)key {
  return LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_calculateCMSKeyChecksumWithByteArray_(self, key);
}

- (jboolean)checkCMSKeyChecksumWithByteArray:(IOSByteArray *)key
                               withByteArray:(IOSByteArray *)checksum {
  return LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_checkCMSKeyChecksumWithByteArray_withByteArray_(self, key, checksum);
}

+ (IOSByteArray *)reverseWithByteArray:(IOSByteArray *)bs {
  return LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_reverseWithByteArray_(bs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 3, 5, -1, -1, -1 },
    { NULL, "[B", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 10, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(wrapWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(unwrapWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(calculateCMSKeyChecksumWithByteArray:);
  methods[6].selector = @selector(checkCMSKeyChecksumWithByteArray:withByteArray:);
  methods[7].selector = @selector(reverseWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "engine_", "LLibOrgBouncycastleCryptoModesCBCBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "param_", "LLibOrgBouncycastleCryptoParamsKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramPlusIV_", "LLibOrgBouncycastleCryptoParamsParametersWithIV;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forWrapping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "IV2", "[B", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "sha1_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "digest_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "wrap", "[BII", "unwrap", "LLibOrgBouncycastleCryptoInvalidCipherTextException;", "calculateCMSKeyChecksum", "[B", "checkCMSKeyChecksum", "[B[B", "reverse", &LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_IV2 };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesDESedeWrapEngine = { "DESedeWrapEngine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 8, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesDESedeWrapEngine;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoEnginesDESedeWrapEngine class]) {
    LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_IV2 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x4a, (jbyte) (jint) 0xdd, (jbyte) (jint) 0xa2, (jbyte) (jint) 0x2c, (jbyte) (jint) 0x79, (jbyte) (jint) 0xe8, (jbyte) (jint) 0x21, (jbyte) (jint) 0x05 } count:8];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine)
  }
}

@end

void LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_init(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine *self) {
  NSObject_init(self);
  self->sha1_ = LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1();
  self->digest_ = [IOSByteArray newArrayWithLength:20];
}

LibOrgBouncycastleCryptoEnginesDESedeWrapEngine *new_LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine, init)
}

LibOrgBouncycastleCryptoEnginesDESedeWrapEngine *create_LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine, init)
}

IOSByteArray *LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_calculateCMSKeyChecksumWithByteArray_(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine *self, IOSByteArray *key) {
  IOSByteArray *result = [IOSByteArray newArrayWithLength:8];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->sha1_)) updateWithByteArray:key withInt:0 withInt:((IOSByteArray *) nil_chk(key))->size_];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->sha1_)) doFinalWithByteArray:self->digest_ withInt:0];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->digest_, 0, result, 0, 8);
  return result;
}

jboolean LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_checkCMSKeyChecksumWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine *self, IOSByteArray *key, IOSByteArray *checksum) {
  return LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_calculateCMSKeyChecksumWithByteArray_(self, key), checksum);
}

IOSByteArray *LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_reverseWithByteArray_(IOSByteArray *bs) {
  LibOrgBouncycastleCryptoEnginesDESedeWrapEngine_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(bs))->size_];
  for (jint i = 0; i < bs->size_; i++) {
    *IOSByteArray_GetRef(result, i) = IOSByteArray_Get(bs, bs->size_ - (i + 1));
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesDESedeWrapEngine)
