//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/SM2KeyExchangePrivateParameters.java
//

#ifndef SM2KeyExchangePrivateParameters_H
#define SM2KeyExchangePrivateParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CipherParameters.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoParamsECPrivateKeyParameters;
@class LibOrgBouncycastleMathEcECPoint;

@interface LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters : NSObject < LibOrgBouncycastleCryptoCipherParameters >

#pragma mark Public

- (instancetype __nonnull)initWithBoolean:(jboolean)initiator
withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)staticPrivateKey
withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)ephemeralPrivateKey;

- (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)getEphemeralPrivateKey;

- (LibOrgBouncycastleMathEcECPoint *)getEphemeralPublicPoint;

- (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)getStaticPrivateKey;

- (LibOrgBouncycastleMathEcECPoint *)getStaticPublicPoint;

- (jboolean)isInitiator;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters *self, jboolean initiator, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters *new_LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(jboolean initiator, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters *create_LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(jboolean initiator, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SM2KeyExchangePrivateParameters_H
