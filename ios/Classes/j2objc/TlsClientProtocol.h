//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsClientProtocol.java
//

#ifndef TlsClientProtocol_H
#define TlsClientProtocol_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsProtocol.h"

@class IOSByteArray;
@class JavaIoByteArrayInputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecuritySecureRandom;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoTlsAbstractTlsContext;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@class LibOrgBouncycastleCryptoTlsCertificateStatus;
@class LibOrgBouncycastleCryptoTlsDigitallySigned;
@class LibOrgBouncycastleCryptoTlsTlsClientContextImpl;
@protocol LibOrgBouncycastleCryptoTlsTlsAuthentication;
@protocol LibOrgBouncycastleCryptoTlsTlsClient;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;
@protocol LibOrgBouncycastleCryptoTlsTlsPeer;

@interface LibOrgBouncycastleCryptoTlsTlsClientProtocol : LibOrgBouncycastleCryptoTlsTlsProtocol {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsClient> tlsClient_;
  LibOrgBouncycastleCryptoTlsTlsClientContextImpl *tlsClientContext_;
  IOSByteArray *selectedSessionID_;
  id<LibOrgBouncycastleCryptoTlsTlsKeyExchange> keyExchange_;
  id<LibOrgBouncycastleCryptoTlsTlsAuthentication> authentication_;
  LibOrgBouncycastleCryptoTlsCertificateStatus *certificateStatus_;
  LibOrgBouncycastleCryptoTlsCertificateRequest *certificateRequest_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)input
                             withJavaIoOutputStream:(JavaIoOutputStream *)output
                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (void)connectWithLibOrgBouncycastleCryptoTlsTlsClient:(id<LibOrgBouncycastleCryptoTlsTlsClient>)tlsClient;

#pragma mark Protected

- (void)cleanupHandshake;

- (id<LibOrgBouncycastleCryptoTlsTlsContext>)getContext;

- (id<LibOrgBouncycastleCryptoTlsTlsPeer>)getPeer;

- (void)handleHandshakeMessageWithShort:(jshort)type
         withJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)handleSupplementalDataWithJavaUtilVector:(JavaUtilVector *)serverSupplementalData;

- (void)receiveNewSessionTicketMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)receiveServerHelloMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)sendCertificateVerifyMessageWithLibOrgBouncycastleCryptoTlsDigitallySigned:(LibOrgBouncycastleCryptoTlsDigitallySigned *)certificateVerify;

- (void)sendClientHelloMessage;

- (void)sendClientKeyExchangeMessage;

#pragma mark Package-Private

- (LibOrgBouncycastleCryptoTlsAbstractTlsContext *)getContextAdmin;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsClientProtocol)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsClientProtocol, tlsClient_, id<LibOrgBouncycastleCryptoTlsTlsClient>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsClientProtocol, tlsClientContext_, LibOrgBouncycastleCryptoTlsTlsClientContextImpl *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsClientProtocol, selectedSessionID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsClientProtocol, keyExchange_, id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsClientProtocol, authentication_, id<LibOrgBouncycastleCryptoTlsTlsAuthentication>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsClientProtocol, certificateStatus_, LibOrgBouncycastleCryptoTlsCertificateStatus *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsClientProtocol, certificateRequest_, LibOrgBouncycastleCryptoTlsCertificateRequest *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsClientProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoTlsTlsClientProtocol *self, JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsClientProtocol *new_LibOrgBouncycastleCryptoTlsTlsClientProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsClientProtocol *create_LibOrgBouncycastleCryptoTlsTlsClientProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsClientProtocol_initWithJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoTlsTlsClientProtocol *self, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsClientProtocol *new_LibOrgBouncycastleCryptoTlsTlsClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsClientProtocol *create_LibOrgBouncycastleCryptoTlsTlsClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsClientProtocol)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsClientProtocol_H
