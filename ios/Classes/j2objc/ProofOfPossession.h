//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/ProofOfPossession.java
//

#ifndef ProofOfPossession_H
#define ProofOfPossession_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CrmfPOPOPrivKey;
@class LibOrgBouncycastleAsn1CrmfPOPOSigningKey;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1CrmfProofOfPossession : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >
@property (readonly, class) jint TYPE_RA_VERIFIED NS_SWIFT_NAME(TYPE_RA_VERIFIED);
@property (readonly, class) jint TYPE_SIGNING_KEY NS_SWIFT_NAME(TYPE_SIGNING_KEY);
@property (readonly, class) jint TYPE_KEY_ENCIPHERMENT NS_SWIFT_NAME(TYPE_KEY_ENCIPHERMENT);
@property (readonly, class) jint TYPE_KEY_AGREEMENT NS_SWIFT_NAME(TYPE_KEY_AGREEMENT);

+ (jint)TYPE_RA_VERIFIED;

+ (jint)TYPE_SIGNING_KEY;

+ (jint)TYPE_KEY_ENCIPHERMENT;

+ (jint)TYPE_KEY_AGREEMENT;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)type
withLibOrgBouncycastleAsn1CrmfPOPOPrivKey:(LibOrgBouncycastleAsn1CrmfPOPOPrivKey *)privkey;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CrmfPOPOSigningKey:(LibOrgBouncycastleAsn1CrmfPOPOSigningKey *)poposk;

+ (LibOrgBouncycastleAsn1CrmfProofOfPossession *)getInstanceWithId:(id)o;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getObject;

- (jint)getType;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CrmfProofOfPossession)

inline jint LibOrgBouncycastleAsn1CrmfProofOfPossession_get_TYPE_RA_VERIFIED(void);
#define LibOrgBouncycastleAsn1CrmfProofOfPossession_TYPE_RA_VERIFIED 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1CrmfProofOfPossession, TYPE_RA_VERIFIED, jint)

inline jint LibOrgBouncycastleAsn1CrmfProofOfPossession_get_TYPE_SIGNING_KEY(void);
#define LibOrgBouncycastleAsn1CrmfProofOfPossession_TYPE_SIGNING_KEY 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1CrmfProofOfPossession, TYPE_SIGNING_KEY, jint)

inline jint LibOrgBouncycastleAsn1CrmfProofOfPossession_get_TYPE_KEY_ENCIPHERMENT(void);
#define LibOrgBouncycastleAsn1CrmfProofOfPossession_TYPE_KEY_ENCIPHERMENT 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1CrmfProofOfPossession, TYPE_KEY_ENCIPHERMENT, jint)

inline jint LibOrgBouncycastleAsn1CrmfProofOfPossession_get_TYPE_KEY_AGREEMENT(void);
#define LibOrgBouncycastleAsn1CrmfProofOfPossession_TYPE_KEY_AGREEMENT 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1CrmfProofOfPossession, TYPE_KEY_AGREEMENT, jint)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfProofOfPossession *LibOrgBouncycastleAsn1CrmfProofOfPossession_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfProofOfPossession_init(LibOrgBouncycastleAsn1CrmfProofOfPossession *self);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfProofOfPossession *new_LibOrgBouncycastleAsn1CrmfProofOfPossession_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfProofOfPossession *create_LibOrgBouncycastleAsn1CrmfProofOfPossession_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfProofOfPossession_initWithLibOrgBouncycastleAsn1CrmfPOPOSigningKey_(LibOrgBouncycastleAsn1CrmfProofOfPossession *self, LibOrgBouncycastleAsn1CrmfPOPOSigningKey *poposk);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfProofOfPossession *new_LibOrgBouncycastleAsn1CrmfProofOfPossession_initWithLibOrgBouncycastleAsn1CrmfPOPOSigningKey_(LibOrgBouncycastleAsn1CrmfPOPOSigningKey *poposk) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfProofOfPossession *create_LibOrgBouncycastleAsn1CrmfProofOfPossession_initWithLibOrgBouncycastleAsn1CrmfPOPOSigningKey_(LibOrgBouncycastleAsn1CrmfPOPOSigningKey *poposk);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfProofOfPossession_initWithInt_withLibOrgBouncycastleAsn1CrmfPOPOPrivKey_(LibOrgBouncycastleAsn1CrmfProofOfPossession *self, jint type, LibOrgBouncycastleAsn1CrmfPOPOPrivKey *privkey);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfProofOfPossession *new_LibOrgBouncycastleAsn1CrmfProofOfPossession_initWithInt_withLibOrgBouncycastleAsn1CrmfPOPOPrivKey_(jint type, LibOrgBouncycastleAsn1CrmfPOPOPrivKey *privkey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfProofOfPossession *create_LibOrgBouncycastleAsn1CrmfProofOfPossession_initWithInt_withLibOrgBouncycastleAsn1CrmfPOPOPrivKey_(jint type, LibOrgBouncycastleAsn1CrmfPOPOPrivKey *privkey);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfProofOfPossession)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ProofOfPossession_H
