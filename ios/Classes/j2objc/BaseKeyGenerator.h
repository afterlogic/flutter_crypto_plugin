//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/BaseKeyGenerator.java
//

#ifndef BaseKeyGenerator_H
#define BaseKeyGenerator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "javax/crypto/KeyGeneratorSpi.h"

@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoCipherKeyGenerator;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol JavaxCryptoSecretKey;

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator : JavaxCryptoKeyGeneratorSpi {
 @public
  NSString *algName_;
  jint keySize_;
  jint defaultKeySize_;
  LibOrgBouncycastleCryptoCipherKeyGenerator *engine_;
  jboolean uninitialised_;
}

#pragma mark Protected

- (instancetype __nonnull)initWithNSString:(NSString *)algName
                                   withInt:(jint)defaultKeySize
withLibOrgBouncycastleCryptoCipherKeyGenerator:(LibOrgBouncycastleCryptoCipherKeyGenerator *)engine;

- (id<JavaxCryptoSecretKey>)engineGenerateKey;

- (void)engineInitWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)keySize
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator, algName_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator, engine_, LibOrgBouncycastleCryptoCipherKeyGenerator *)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator *self, NSString *algName, jint defaultKeySize, LibOrgBouncycastleCryptoCipherKeyGenerator *engine);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(NSString *algName, jint defaultKeySize, LibOrgBouncycastleCryptoCipherKeyGenerator *engine) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(NSString *algName, jint defaultKeySize, LibOrgBouncycastleCryptoCipherKeyGenerator *engine);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BaseKeyGenerator_H
