//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceFujisakiCipherSpi.java
//

#include "AsymmetricHybridCipher.h"
#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "CipherSpiExt.h"
#include "Digest.h"
#include "DigestFactory.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "McElieceCCA2KeyParameters.h"
#include "McElieceCCA2KeysToParams.h"
#include "McElieceFujisakiCipher.h"
#include "McElieceFujisakiCipherSpi.h"
#include "ParametersWithRandom.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/BadPaddingException.h"

@interface LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *cipher_;
  JavaIoByteArrayOutputStream *buf_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi, cipher_, LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi, buf_, JavaIoByteArrayOutputStream *)

@implementation LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *)cipher {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_(self, digest, cipher);
  return self;
}

- (IOSByteArray *)updateWithByteArray:(IOSByteArray *)input
                              withInt:(jint)inOff
                              withInt:(jint)inLen {
  [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithByteArray:input withInt:inOff withInt:inLen];
  return [IOSByteArray newArrayWithLength:0];
}

- (IOSByteArray *)doFinalWithByteArray:(IOSByteArray *)input
                               withInt:(jint)inOff
                               withInt:(jint)inLen {
  (void) [self updateWithByteArray:input withInt:inOff withInt:inLen];
  IOSByteArray *data = [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) toByteArray];
  [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) reset];
  if (opMode_ == LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_ENCRYPT_MODE) {
    return [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *) nil_chk(cipher_)) messageEncryptWithByteArray:data];
  }
  else if (opMode_ == LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_DECRYPT_MODE) {
    @try {
      return [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *) nil_chk(cipher_)) messageDecryptWithByteArray:data];
    }
    @catch (LibOrgBouncycastleCryptoInvalidCipherTextException *e) {
      @throw new_JavaxCryptoBadPaddingException_initWithNSString_([e getMessage]);
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unknown mode in doFinal");
  }
}

- (jint)encryptOutputSizeWithInt:(jint)inLen {
  return 0;
}

- (jint)decryptOutputSizeWithInt:(jint)inLen {
  return 0;
}

- (void)initCipherEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
  withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  param = LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_()));
  param = new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(param, sr);
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *) nil_chk(cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param];
}

- (void)initCipherDecryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
  withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  param = LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_()));
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *) nil_chk(cipher_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param];
}

- (NSString *)getName {
  return @"McElieceFujisakiCipher";
}

- (jint)getKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *mcElieceCCA2KeyParameters;
  if ([JavaSecurityPublicKey_class_() isInstance:key]) {
    mcElieceCCA2KeyParameters = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *) cast_chk(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_())), [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters class]);
  }
  else {
    mcElieceCCA2KeyParameters = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *) cast_chk(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_())), [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters class]);
  }
  return [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *) nil_chk(cipher_)) getKeySizeWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:mcElieceCCA2KeyParameters];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 2, 4, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, 10, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher:);
  methods[1].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(doFinalWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(encryptOutputSizeWithInt:);
  methods[4].selector = @selector(decryptOutputSizeWithInt:);
  methods[5].selector = @selector(initCipherEncryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[6].selector = @selector(initCipherDecryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[7].selector = @selector(getName);
  methods[8].selector = @selector(getKeySizeWithJavaSecurityKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher;", "update", "[BII", "doFinal", "LJavaxCryptoBadPaddingException;", "encryptOutputSize", "I", "decryptOutputSize", "initCipherEncrypt", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "initCipherDecrypt", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;", "getKeySize", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "LLibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi = { "McElieceFujisakiCipherSpi", "lib.org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, 16, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi;
}

@end

void LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *cipher) {
  LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_init(self);
  self->digest_ = digest;
  self->cipher_ = cipher;
  self->buf_ = new_JavaIoByteArrayOutputStream_init();
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi *new_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_(id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi, initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_, digest, cipher)
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi *create_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_(id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi, initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_, digest, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi)

@implementation LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki = { "McElieceFujisaki", "lib.org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki;
}

@end

void LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki_init(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki *self) {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_(self, LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1(), new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init());
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki *new_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki, init)
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki *create_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki)
