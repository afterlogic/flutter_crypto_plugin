//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/Tnaf.java
//

#include "ECConstants.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SimpleBigDecimal.h"
#include "Tnaf.h"
#include "ZTauElement.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

inline JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_get_MINUS_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_MINUS_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcTnaf, MINUS_ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_get_MINUS_TWO(void);
static JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_MINUS_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcTnaf, MINUS_TWO, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_get_MINUS_THREE(void);
static JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_MINUS_THREE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcTnaf, MINUS_THREE, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleMathEcTnaf)

IOSObjectArray *LibOrgBouncycastleMathEcTnaf_alpha0;
IOSObjectArray *LibOrgBouncycastleMathEcTnaf_alpha0Tnaf;
IOSObjectArray *LibOrgBouncycastleMathEcTnaf_alpha1;
IOSObjectArray *LibOrgBouncycastleMathEcTnaf_alpha1Tnaf;

@implementation LibOrgBouncycastleMathEcTnaf

+ (jbyte)WIDTH {
  return LibOrgBouncycastleMathEcTnaf_WIDTH;
}

+ (jbyte)POW_2_WIDTH {
  return LibOrgBouncycastleMathEcTnaf_POW_2_WIDTH;
}

+ (IOSObjectArray *)alpha0 {
  return LibOrgBouncycastleMathEcTnaf_alpha0;
}

+ (IOSObjectArray *)alpha0Tnaf {
  return LibOrgBouncycastleMathEcTnaf_alpha0Tnaf;
}

+ (IOSObjectArray *)alpha1 {
  return LibOrgBouncycastleMathEcTnaf_alpha1;
}

+ (IOSObjectArray *)alpha1Tnaf {
  return LibOrgBouncycastleMathEcTnaf_alpha1Tnaf;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcTnaf_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaMathBigInteger *)normWithByte:(jbyte)mu
withLibOrgBouncycastleMathEcZTauElement:(LibOrgBouncycastleMathEcZTauElement *)lambda {
  return LibOrgBouncycastleMathEcTnaf_normWithByte_withLibOrgBouncycastleMathEcZTauElement_(mu, lambda);
}

+ (LibOrgBouncycastleMathEcSimpleBigDecimal *)normWithByte:(jbyte)mu
              withLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)u
              withLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)v {
  return LibOrgBouncycastleMathEcTnaf_normWithByte_withLibOrgBouncycastleMathEcSimpleBigDecimal_withLibOrgBouncycastleMathEcSimpleBigDecimal_(mu, u, v);
}

+ (LibOrgBouncycastleMathEcZTauElement *)roundWithLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)lambda0
                                              withLibOrgBouncycastleMathEcSimpleBigDecimal:(LibOrgBouncycastleMathEcSimpleBigDecimal *)lambda1
                                                                                  withByte:(jbyte)mu {
  return LibOrgBouncycastleMathEcTnaf_roundWithLibOrgBouncycastleMathEcSimpleBigDecimal_withLibOrgBouncycastleMathEcSimpleBigDecimal_withByte_(lambda0, lambda1, mu);
}

+ (LibOrgBouncycastleMathEcSimpleBigDecimal *)approximateDivisionByNWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                    withJavaMathBigInteger:(JavaMathBigInteger *)s
                                                                    withJavaMathBigInteger:(JavaMathBigInteger *)vm
                                                                                  withByte:(jbyte)a
                                                                                   withInt:(jint)m
                                                                                   withInt:(jint)c {
  return LibOrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(k, s, vm, a, m, c);
}

+ (IOSByteArray *)tauAdicNafWithByte:(jbyte)mu
withLibOrgBouncycastleMathEcZTauElement:(LibOrgBouncycastleMathEcZTauElement *)lambda {
  return LibOrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withLibOrgBouncycastleMathEcZTauElement_(mu, lambda);
}

+ (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)tauWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p {
  return LibOrgBouncycastleMathEcTnaf_tauWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_(p);
}

+ (jbyte)getMuWithLibOrgBouncycastleMathEcECCurve_AbstractF2m:(LibOrgBouncycastleMathEcECCurve_AbstractF2m *)curve {
  return LibOrgBouncycastleMathEcTnaf_getMuWithLibOrgBouncycastleMathEcECCurve_AbstractF2m_(curve);
}

+ (jbyte)getMuWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)curveA {
  return LibOrgBouncycastleMathEcTnaf_getMuWithLibOrgBouncycastleMathEcECFieldElement_(curveA);
}

+ (jbyte)getMuWithInt:(jint)curveA {
  return LibOrgBouncycastleMathEcTnaf_getMuWithInt_(curveA);
}

+ (IOSObjectArray *)getLucasWithByte:(jbyte)mu
                             withInt:(jint)k
                         withBoolean:(jboolean)doV {
  return LibOrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, k, doV);
}

+ (JavaMathBigInteger *)getTwWithByte:(jbyte)mu
                              withInt:(jint)w {
  return LibOrgBouncycastleMathEcTnaf_getTwWithByte_withInt_(mu, w);
}

+ (IOSObjectArray *)getSiWithLibOrgBouncycastleMathEcECCurve_AbstractF2m:(LibOrgBouncycastleMathEcECCurve_AbstractF2m *)curve {
  return LibOrgBouncycastleMathEcTnaf_getSiWithLibOrgBouncycastleMathEcECCurve_AbstractF2m_(curve);
}

+ (IOSObjectArray *)getSiWithInt:(jint)fieldSize
                         withInt:(jint)curveA
          withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  return LibOrgBouncycastleMathEcTnaf_getSiWithInt_withInt_withJavaMathBigInteger_(fieldSize, curveA, cofactor);
}

+ (jint)getShiftsForCofactorWithJavaMathBigInteger:(JavaMathBigInteger *)h {
  return LibOrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(h);
}

+ (LibOrgBouncycastleMathEcZTauElement *)partModReductionWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                        withInt:(jint)m
                                                                       withByte:(jbyte)a
                                                    withJavaMathBigIntegerArray:(IOSObjectArray *)s
                                                                       withByte:(jbyte)mu
                                                                       withByte:(jbyte)c {
  return LibOrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, a, s, mu, c);
}

+ (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyRTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                                       withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return LibOrgBouncycastleMathEcTnaf_multiplyRTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withJavaMathBigInteger_(p, k);
}

+ (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                     withLibOrgBouncycastleMathEcZTauElement:(LibOrgBouncycastleMathEcZTauElement *)lambda {
  return LibOrgBouncycastleMathEcTnaf_multiplyTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withLibOrgBouncycastleMathEcZTauElement_(p, lambda);
}

+ (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyFromTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                                                   withByteArray:(IOSByteArray *)u {
  return LibOrgBouncycastleMathEcTnaf_multiplyFromTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(p, u);
}

+ (IOSByteArray *)tauAdicWNafWithByte:(jbyte)mu
withLibOrgBouncycastleMathEcZTauElement:(LibOrgBouncycastleMathEcZTauElement *)lambda
                             withByte:(jbyte)width
               withJavaMathBigInteger:(JavaMathBigInteger *)pow2w
               withJavaMathBigInteger:(JavaMathBigInteger *)tw
withLibOrgBouncycastleMathEcZTauElementArray:(IOSObjectArray *)alpha {
  return LibOrgBouncycastleMathEcTnaf_tauAdicWNafWithByte_withLibOrgBouncycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcZTauElementArray_(mu, lambda, width, pow2w, tw, alpha);
}

+ (IOSObjectArray *)getPreCompWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:(LibOrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                     withByte:(jbyte)a {
  return LibOrgBouncycastleMathEcTnaf_getPreCompWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(p, a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcSimpleBigDecimal;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcZTauElement;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcSimpleBigDecimal;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 13, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 18, 11, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 20, 21, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcZTauElement;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 32, 33, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(normWithByte:withLibOrgBouncycastleMathEcZTauElement:);
  methods[2].selector = @selector(normWithByte:withLibOrgBouncycastleMathEcSimpleBigDecimal:withLibOrgBouncycastleMathEcSimpleBigDecimal:);
  methods[3].selector = @selector(roundWithLibOrgBouncycastleMathEcSimpleBigDecimal:withLibOrgBouncycastleMathEcSimpleBigDecimal:withByte:);
  methods[4].selector = @selector(approximateDivisionByNWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withByte:withInt:withInt:);
  methods[5].selector = @selector(tauAdicNafWithByte:withLibOrgBouncycastleMathEcZTauElement:);
  methods[6].selector = @selector(tauWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:);
  methods[7].selector = @selector(getMuWithLibOrgBouncycastleMathEcECCurve_AbstractF2m:);
  methods[8].selector = @selector(getMuWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[9].selector = @selector(getMuWithInt:);
  methods[10].selector = @selector(getLucasWithByte:withInt:withBoolean:);
  methods[11].selector = @selector(getTwWithByte:withInt:);
  methods[12].selector = @selector(getSiWithLibOrgBouncycastleMathEcECCurve_AbstractF2m:);
  methods[13].selector = @selector(getSiWithInt:withInt:withJavaMathBigInteger:);
  methods[14].selector = @selector(getShiftsForCofactorWithJavaMathBigInteger:);
  methods[15].selector = @selector(partModReductionWithJavaMathBigInteger:withInt:withByte:withJavaMathBigIntegerArray:withByte:withByte:);
  methods[16].selector = @selector(multiplyRTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:withJavaMathBigInteger:);
  methods[17].selector = @selector(multiplyTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:withLibOrgBouncycastleMathEcZTauElement:);
  methods[18].selector = @selector(multiplyFromTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:withByteArray:);
  methods[19].selector = @selector(tauAdicWNafWithByte:withLibOrgBouncycastleMathEcZTauElement:withByte:withJavaMathBigInteger:withJavaMathBigInteger:withLibOrgBouncycastleMathEcZTauElementArray:);
  methods[20].selector = @selector(getPreCompWithLibOrgBouncycastleMathEcECPoint_AbstractF2m:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MINUS_ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "MINUS_TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "MINUS_THREE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "WIDTH", "B", .constantValue.asChar = LibOrgBouncycastleMathEcTnaf_WIDTH, 0x19, -1, -1, -1, -1 },
    { "POW_2_WIDTH", "B", .constantValue.asChar = LibOrgBouncycastleMathEcTnaf_POW_2_WIDTH, 0x19, -1, -1, -1, -1 },
    { "alpha0", "[LLibOrgBouncycastleMathEcZTauElement;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "alpha0Tnaf", "[[B", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "alpha1", "[LLibOrgBouncycastleMathEcZTauElement;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "alpha1Tnaf", "[[B", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "norm", "BLLibOrgBouncycastleMathEcZTauElement;", "BLLibOrgBouncycastleMathEcSimpleBigDecimal;LLibOrgBouncycastleMathEcSimpleBigDecimal;", "round", "LLibOrgBouncycastleMathEcSimpleBigDecimal;LLibOrgBouncycastleMathEcSimpleBigDecimal;B", "approximateDivisionByN", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;BII", "tauAdicNaf", "tau", "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;", "getMu", "LLibOrgBouncycastleMathEcECCurve_AbstractF2m;", "LLibOrgBouncycastleMathEcECFieldElement;", "I", "getLucas", "BIZ", "getTw", "BI", "getSi", "IILJavaMathBigInteger;", "getShiftsForCofactor", "LJavaMathBigInteger;", "partModReduction", "LJavaMathBigInteger;IB[LJavaMathBigInteger;BB", "multiplyRTnaf", "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;LJavaMathBigInteger;", "multiplyTnaf", "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;LLibOrgBouncycastleMathEcZTauElement;", "multiplyFromTnaf", "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;[B", "tauAdicWNaf", "BLLibOrgBouncycastleMathEcZTauElement;BLJavaMathBigInteger;LJavaMathBigInteger;[LLibOrgBouncycastleMathEcZTauElement;", "getPreComp", "LLibOrgBouncycastleMathEcECPoint_AbstractF2m;B", &LibOrgBouncycastleMathEcTnaf_MINUS_ONE, &LibOrgBouncycastleMathEcTnaf_MINUS_TWO, &LibOrgBouncycastleMathEcTnaf_MINUS_THREE, &LibOrgBouncycastleMathEcTnaf_alpha0, &LibOrgBouncycastleMathEcTnaf_alpha0Tnaf, &LibOrgBouncycastleMathEcTnaf_alpha1, &LibOrgBouncycastleMathEcTnaf_alpha1Tnaf };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcTnaf = { "Tnaf", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x0, 21, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcTnaf;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleMathEcTnaf class]) {
    LibOrgBouncycastleMathEcTnaf_MINUS_ONE = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE))) negate];
    LibOrgBouncycastleMathEcTnaf_MINUS_TWO = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO))) negate];
    LibOrgBouncycastleMathEcTnaf_MINUS_THREE = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, THREE))) negate];
    LibOrgBouncycastleMathEcTnaf_alpha0 = [IOSObjectArray newArrayWithObjects:(id[]){ nil, create_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE), JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)), nil, create_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcTnaf_MINUS_THREE, LibOrgBouncycastleMathEcTnaf_MINUS_ONE), nil, create_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcTnaf_MINUS_ONE, LibOrgBouncycastleMathEcTnaf_MINUS_ONE), nil, create_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE), LibOrgBouncycastleMathEcTnaf_MINUS_ONE), nil } count:9 type:LibOrgBouncycastleMathEcZTauElement_class_()];
    LibOrgBouncycastleMathEcTnaf_alpha0Tnaf = [IOSObjectArray newArrayWithObjects:(id[]){ nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 0, 1 } count:4] } count:8 type:IOSClass_byteArray(1)];
    LibOrgBouncycastleMathEcTnaf_alpha1 = [IOSObjectArray newArrayWithObjects:(id[]){ nil, create_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE), JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)), nil, create_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcTnaf_MINUS_THREE, JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)), nil, create_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcTnaf_MINUS_ONE, JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)), nil, create_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE), JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)), nil } count:9 type:LibOrgBouncycastleMathEcZTauElement_class_()];
    LibOrgBouncycastleMathEcTnaf_alpha1Tnaf = [IOSObjectArray newArrayWithObjects:(id[]){ nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 0, -1 } count:4] } count:8 type:IOSClass_byteArray(1)];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleMathEcTnaf)
  }
}

@end

void LibOrgBouncycastleMathEcTnaf_init(LibOrgBouncycastleMathEcTnaf *self) {
  NSObject_init(self);
}

LibOrgBouncycastleMathEcTnaf *new_LibOrgBouncycastleMathEcTnaf_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcTnaf, init)
}

LibOrgBouncycastleMathEcTnaf *create_LibOrgBouncycastleMathEcTnaf_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcTnaf, init)
}

JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_normWithByte_withLibOrgBouncycastleMathEcZTauElement_(jbyte mu, LibOrgBouncycastleMathEcZTauElement *lambda) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  JavaMathBigInteger *norm;
  JavaMathBigInteger *s1 = [((JavaMathBigInteger *) nil_chk(((LibOrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_)) multiplyWithJavaMathBigInteger:lambda->u_];
  JavaMathBigInteger *s2 = [lambda->u_ multiplyWithJavaMathBigInteger:lambda->v_];
  JavaMathBigInteger *s3 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(lambda->v_)) multiplyWithJavaMathBigInteger:lambda->v_])) shiftLeftWithInt:1];
  if (mu == 1) {
    norm = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s1)) addWithJavaMathBigInteger:s2])) addWithJavaMathBigInteger:s3];
  }
  else if (mu == -1) {
    norm = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s1)) subtractWithJavaMathBigInteger:s2])) addWithJavaMathBigInteger:s3];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  return norm;
}

LibOrgBouncycastleMathEcSimpleBigDecimal *LibOrgBouncycastleMathEcTnaf_normWithByte_withLibOrgBouncycastleMathEcSimpleBigDecimal_withLibOrgBouncycastleMathEcSimpleBigDecimal_(jbyte mu, LibOrgBouncycastleMathEcSimpleBigDecimal *u, LibOrgBouncycastleMathEcSimpleBigDecimal *v) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  LibOrgBouncycastleMathEcSimpleBigDecimal *norm;
  LibOrgBouncycastleMathEcSimpleBigDecimal *s1 = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(u)) multiplyWithLibOrgBouncycastleMathEcSimpleBigDecimal:u];
  LibOrgBouncycastleMathEcSimpleBigDecimal *s2 = [u multiplyWithLibOrgBouncycastleMathEcSimpleBigDecimal:v];
  LibOrgBouncycastleMathEcSimpleBigDecimal *s3 = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(v)) multiplyWithLibOrgBouncycastleMathEcSimpleBigDecimal:v])) shiftLeftWithInt:1];
  if (mu == 1) {
    norm = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(s1)) addWithLibOrgBouncycastleMathEcSimpleBigDecimal:s2])) addWithLibOrgBouncycastleMathEcSimpleBigDecimal:s3];
  }
  else if (mu == -1) {
    norm = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(s1)) subtractWithLibOrgBouncycastleMathEcSimpleBigDecimal:s2])) addWithLibOrgBouncycastleMathEcSimpleBigDecimal:s3];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  return norm;
}

LibOrgBouncycastleMathEcZTauElement *LibOrgBouncycastleMathEcTnaf_roundWithLibOrgBouncycastleMathEcSimpleBigDecimal_withLibOrgBouncycastleMathEcSimpleBigDecimal_withByte_(LibOrgBouncycastleMathEcSimpleBigDecimal *lambda0, LibOrgBouncycastleMathEcSimpleBigDecimal *lambda1, jbyte mu) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  jint scale_ = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(lambda0)) getScale];
  if ([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(lambda1)) getScale] != scale_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"lambda0 and lambda1 do not have same scale");
  }
  if (!((mu == 1) || (mu == -1))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  JavaMathBigInteger *f0 = [lambda0 round];
  JavaMathBigInteger *f1 = [lambda1 round];
  LibOrgBouncycastleMathEcSimpleBigDecimal *eta0 = [lambda0 subtractWithJavaMathBigInteger:f0];
  LibOrgBouncycastleMathEcSimpleBigDecimal *eta1 = [lambda1 subtractWithJavaMathBigInteger:f1];
  LibOrgBouncycastleMathEcSimpleBigDecimal *eta = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta0)) addWithLibOrgBouncycastleMathEcSimpleBigDecimal:eta0];
  if (mu == 1) {
    eta = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) addWithLibOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  }
  else {
    eta = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) subtractWithLibOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  }
  LibOrgBouncycastleMathEcSimpleBigDecimal *threeEta1 = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta1)) addWithLibOrgBouncycastleMathEcSimpleBigDecimal:eta1])) addWithLibOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  LibOrgBouncycastleMathEcSimpleBigDecimal *fourEta1 = [((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(threeEta1)) addWithLibOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  LibOrgBouncycastleMathEcSimpleBigDecimal *check1;
  LibOrgBouncycastleMathEcSimpleBigDecimal *check2;
  if (mu == 1) {
    check1 = [eta0 subtractWithLibOrgBouncycastleMathEcSimpleBigDecimal:threeEta1];
    check2 = [eta0 addWithLibOrgBouncycastleMathEcSimpleBigDecimal:fourEta1];
  }
  else {
    check1 = [eta0 addWithLibOrgBouncycastleMathEcSimpleBigDecimal:threeEta1];
    check2 = [eta0 subtractWithLibOrgBouncycastleMathEcSimpleBigDecimal:fourEta1];
  }
  jbyte h0 = 0;
  jbyte h1 = 0;
  if ([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) compareToWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] >= 0) {
    if ([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check1)) compareToWithJavaMathBigInteger:LibOrgBouncycastleMathEcTnaf_MINUS_ONE] < 0) {
      h1 = mu;
    }
    else {
      h0 = 1;
    }
  }
  else {
    if ([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check2)) compareToWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO)] >= 0) {
      h1 = mu;
    }
  }
  if ([eta compareToWithJavaMathBigInteger:LibOrgBouncycastleMathEcTnaf_MINUS_ONE] < 0) {
    if ([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check1)) compareToWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] >= 0) {
      h1 = (jbyte) -mu;
    }
    else {
      h0 = -1;
    }
  }
  else {
    if ([((LibOrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check2)) compareToWithJavaMathBigInteger:LibOrgBouncycastleMathEcTnaf_MINUS_TWO] < 0) {
      h1 = (jbyte) -mu;
    }
  }
  JavaMathBigInteger *q0 = [((JavaMathBigInteger *) nil_chk(f0)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h0)];
  JavaMathBigInteger *q1 = [((JavaMathBigInteger *) nil_chk(f1)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h1)];
  return new_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(q0, q1);
}

LibOrgBouncycastleMathEcSimpleBigDecimal *LibOrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(JavaMathBigInteger *k, JavaMathBigInteger *s, JavaMathBigInteger *vm, jbyte a, jint m, jint c) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  jint _k = (m + 5) / 2 + c;
  JavaMathBigInteger *ns = [((JavaMathBigInteger *) nil_chk(k)) shiftRightWithInt:m - _k - 2 + a];
  JavaMathBigInteger *gs = [((JavaMathBigInteger *) nil_chk(s)) multiplyWithJavaMathBigInteger:ns];
  JavaMathBigInteger *hs = [((JavaMathBigInteger *) nil_chk(gs)) shiftRightWithInt:m];
  JavaMathBigInteger *js = [((JavaMathBigInteger *) nil_chk(vm)) multiplyWithJavaMathBigInteger:hs];
  JavaMathBigInteger *gsPlusJs = [gs addWithJavaMathBigInteger:js];
  JavaMathBigInteger *ls = [((JavaMathBigInteger *) nil_chk(gsPlusJs)) shiftRightWithInt:_k - c];
  if ([gsPlusJs testBitWithInt:_k - c - 1]) {
    ls = [((JavaMathBigInteger *) nil_chk(ls)) addWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)];
  }
  return new_LibOrgBouncycastleMathEcSimpleBigDecimal_initWithJavaMathBigInteger_withInt_(ls, c);
}

IOSByteArray *LibOrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withLibOrgBouncycastleMathEcZTauElement_(jbyte mu, LibOrgBouncycastleMathEcZTauElement *lambda) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  JavaMathBigInteger *norm = LibOrgBouncycastleMathEcTnaf_normWithByte_withLibOrgBouncycastleMathEcZTauElement_(mu, lambda);
  jint log2Norm = [((JavaMathBigInteger *) nil_chk(norm)) bitLength];
  jint maxLength = log2Norm > 30 ? log2Norm + 4 : 34;
  IOSByteArray *u = [IOSByteArray newArrayWithLength:maxLength];
  jint i = 0;
  jint length = 0;
  JavaMathBigInteger *r0 = ((LibOrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_;
  JavaMathBigInteger *r1 = lambda->v_;
  while (!(([((JavaMathBigInteger *) nil_chk(r0)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]) && ([((JavaMathBigInteger *) nil_chk(r1)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]))) {
    if ([r0 testBitWithInt:0]) {
      *IOSByteArray_GetRef(u, i) = (jbyte) [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(([r0 subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r1)) shiftLeftWithInt:1]]))) modWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, FOUR)]])) intValue];
      if (IOSByteArray_Get(u, i) == 1) {
        r0 = [r0 clearBitWithInt:0];
      }
      else {
        r0 = [r0 addWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)];
      }
      length = i;
    }
    else {
      *IOSByteArray_GetRef(u, i) = 0;
    }
    JavaMathBigInteger *t = r0;
    JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1];
    if (mu == 1) {
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) addWithJavaMathBigInteger:s];
    }
    else {
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) subtractWithJavaMathBigInteger:s];
    }
    r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(t)) shiftRightWithInt:1])) negate];
    i++;
  }
  length++;
  IOSByteArray *tnaf = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(u, 0, tnaf, 0, length);
  return tnaf;
}

LibOrgBouncycastleMathEcECPoint_AbstractF2m *LibOrgBouncycastleMathEcTnaf_tauWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  return [((LibOrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) tau];
}

jbyte LibOrgBouncycastleMathEcTnaf_getMuWithLibOrgBouncycastleMathEcECCurve_AbstractF2m_(LibOrgBouncycastleMathEcECCurve_AbstractF2m *curve) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  if (![((LibOrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) isKoblitz]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No Koblitz curve (ABC), TNAF multiplication not possible");
  }
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) isZero]) {
    return -1;
  }
  return 1;
}

jbyte LibOrgBouncycastleMathEcTnaf_getMuWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECFieldElement *curveA) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  return (jbyte) ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(curveA)) isZero] ? -1 : 1);
}

jbyte LibOrgBouncycastleMathEcTnaf_getMuWithInt_(jint curveA) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  return (jbyte) (curveA == 0 ? -1 : 1);
}

IOSObjectArray *LibOrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(jbyte mu, jint k, jboolean doV) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  JavaMathBigInteger *u0;
  JavaMathBigInteger *u1;
  JavaMathBigInteger *u2;
  if (doV) {
    u0 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO);
    u1 = JavaMathBigInteger_valueOfWithLong_(mu);
  }
  else {
    u0 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO);
    u1 = JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE);
  }
  for (jint i = 1; i < k; i++) {
    JavaMathBigInteger *s = nil;
    if (mu == 1) {
      s = u1;
    }
    else {
      s = [((JavaMathBigInteger *) nil_chk(u1)) negate];
    }
    u2 = [((JavaMathBigInteger *) nil_chk(s)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(u0)) shiftLeftWithInt:1]];
    u0 = u1;
    u1 = u2;
  }
  IOSObjectArray *retVal = [IOSObjectArray newArrayWithObjects:(id[]){ u0, u1 } count:2 type:JavaMathBigInteger_class_()];
  return retVal;
}

JavaMathBigInteger *LibOrgBouncycastleMathEcTnaf_getTwWithByte_withInt_(jbyte mu, jint w) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  if (w == 4) {
    if (mu == 1) {
      return JavaMathBigInteger_valueOfWithLong_(6);
    }
    else {
      return JavaMathBigInteger_valueOfWithLong_(10);
    }
  }
  else {
    IOSObjectArray *us = LibOrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, w, false);
    JavaMathBigInteger *twoToW = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO))) setBitWithInt:w];
    JavaMathBigInteger *u1invert = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(us), 1))) modInverseWithJavaMathBigInteger:twoToW];
    JavaMathBigInteger *tw;
    tw = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(us, 0)])) multiplyWithJavaMathBigInteger:u1invert])) modWithJavaMathBigInteger:twoToW];
    return tw;
  }
}

IOSObjectArray *LibOrgBouncycastleMathEcTnaf_getSiWithLibOrgBouncycastleMathEcECCurve_AbstractF2m_(LibOrgBouncycastleMathEcECCurve_AbstractF2m *curve) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  if (![((LibOrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) isKoblitz]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"si is defined for Koblitz curves only");
  }
  jint m = [curve getFieldSize];
  jint a = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) intValue];
  jbyte mu = LibOrgBouncycastleMathEcTnaf_getMuWithInt_(a);
  jint shifts = LibOrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_([curve getCofactor]);
  jint index = m + 3 - a;
  IOSObjectArray *ui = LibOrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, index, false);
  if (mu == 1) {
    (void) IOSObjectArray_Set(nil_chk(ui), 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 0))) negate]);
    (void) IOSObjectArray_Set(ui, 1, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 1))) negate]);
  }
  JavaMathBigInteger *dividend0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE))) addWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(ui), 1)])) shiftRightWithInt:shifts];
  JavaMathBigInteger *dividend1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE) addWithJavaMathBigInteger:IOSObjectArray_Get(ui, 0)])) shiftRightWithInt:shifts])) negate];
  return [IOSObjectArray newArrayWithObjects:(id[]){ dividend0, dividend1 } count:2 type:JavaMathBigInteger_class_()];
}

IOSObjectArray *LibOrgBouncycastleMathEcTnaf_getSiWithInt_withInt_withJavaMathBigInteger_(jint fieldSize, jint curveA, JavaMathBigInteger *cofactor) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  jbyte mu = LibOrgBouncycastleMathEcTnaf_getMuWithInt_(curveA);
  jint shifts = LibOrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(cofactor);
  jint index = fieldSize + 3 - curveA;
  IOSObjectArray *ui = LibOrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, index, false);
  if (mu == 1) {
    (void) IOSObjectArray_Set(nil_chk(ui), 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 0))) negate]);
    (void) IOSObjectArray_Set(ui, 1, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 1))) negate]);
  }
  JavaMathBigInteger *dividend0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE))) addWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(ui), 1)])) shiftRightWithInt:shifts];
  JavaMathBigInteger *dividend1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE) addWithJavaMathBigInteger:IOSObjectArray_Get(ui, 0)])) shiftRightWithInt:shifts])) negate];
  return [IOSObjectArray newArrayWithObjects:(id[]){ dividend0, dividend1 } count:2 type:JavaMathBigInteger_class_()];
}

jint LibOrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(JavaMathBigInteger *h) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  if (h != nil) {
    if ([h isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO)]) {
      return 1;
    }
    if ([h isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, FOUR)]) {
      return 2;
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"h (Cofactor) must be 2 or 4");
}

LibOrgBouncycastleMathEcZTauElement *LibOrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(JavaMathBigInteger *k, jint m, jbyte a, IOSObjectArray *s, jbyte mu, jbyte c) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  JavaMathBigInteger *d0;
  if (mu == 1) {
    d0 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) addWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)];
  }
  else {
    d0 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) subtractWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)];
  }
  IOSObjectArray *v = LibOrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, m, true);
  JavaMathBigInteger *vm = IOSObjectArray_Get(nil_chk(v), 1);
  LibOrgBouncycastleMathEcSimpleBigDecimal *lambda0 = LibOrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(k, IOSObjectArray_Get(s, 0), vm, a, m, c);
  LibOrgBouncycastleMathEcSimpleBigDecimal *lambda1 = LibOrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(k, IOSObjectArray_Get(s, 1), vm, a, m, c);
  LibOrgBouncycastleMathEcZTauElement *q = LibOrgBouncycastleMathEcTnaf_roundWithLibOrgBouncycastleMathEcSimpleBigDecimal_withLibOrgBouncycastleMathEcSimpleBigDecimal_withByte_(lambda0, lambda1, mu);
  JavaMathBigInteger *r0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(k)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(d0)) multiplyWithJavaMathBigInteger:((LibOrgBouncycastleMathEcZTauElement *) nil_chk(q))->u_]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)])) multiplyWithJavaMathBigInteger:q->v_]];
  JavaMathBigInteger *r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(s, 1))) multiplyWithJavaMathBigInteger:q->u_])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(s, 0))) multiplyWithJavaMathBigInteger:q->v_]];
  return new_LibOrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(r0, r1);
}

LibOrgBouncycastleMathEcECPoint_AbstractF2m *LibOrgBouncycastleMathEcTnaf_multiplyRTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p, JavaMathBigInteger *k) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  LibOrgBouncycastleMathEcECCurve_AbstractF2m *curve = (LibOrgBouncycastleMathEcECCurve_AbstractF2m *) cast_chk([((LibOrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve], [LibOrgBouncycastleMathEcECCurve_AbstractF2m class]);
  jint m = [((LibOrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) getFieldSize];
  jint a = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) intValue];
  jbyte mu = LibOrgBouncycastleMathEcTnaf_getMuWithInt_(a);
  IOSObjectArray *s = [curve getSi];
  LibOrgBouncycastleMathEcZTauElement *rho = LibOrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, (jbyte) a, s, mu, (jbyte) 10);
  return LibOrgBouncycastleMathEcTnaf_multiplyTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withLibOrgBouncycastleMathEcZTauElement_(p, rho);
}

LibOrgBouncycastleMathEcECPoint_AbstractF2m *LibOrgBouncycastleMathEcTnaf_multiplyTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withLibOrgBouncycastleMathEcZTauElement_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p, LibOrgBouncycastleMathEcZTauElement *lambda) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  LibOrgBouncycastleMathEcECCurve_AbstractF2m *curve = (LibOrgBouncycastleMathEcECCurve_AbstractF2m *) cast_chk([((LibOrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve], [LibOrgBouncycastleMathEcECCurve_AbstractF2m class]);
  jbyte mu = LibOrgBouncycastleMathEcTnaf_getMuWithLibOrgBouncycastleMathEcECFieldElement_([((LibOrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) getA]);
  IOSByteArray *u = LibOrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withLibOrgBouncycastleMathEcZTauElement_(mu, lambda);
  LibOrgBouncycastleMathEcECPoint_AbstractF2m *q = LibOrgBouncycastleMathEcTnaf_multiplyFromTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(p, u);
  return q;
}

LibOrgBouncycastleMathEcECPoint_AbstractF2m *LibOrgBouncycastleMathEcTnaf_multiplyFromTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p, IOSByteArray *u) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve];
  LibOrgBouncycastleMathEcECPoint_AbstractF2m *q = (LibOrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity], [LibOrgBouncycastleMathEcECPoint_AbstractF2m class]);
  LibOrgBouncycastleMathEcECPoint_AbstractF2m *pNeg = (LibOrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([p negate], [LibOrgBouncycastleMathEcECPoint_AbstractF2m class]);
  jint tauCount = 0;
  for (jint i = ((IOSByteArray *) nil_chk(u))->size_ - 1; i >= 0; i--) {
    ++tauCount;
    jbyte ui = IOSByteArray_Get(u, i);
    if (ui != 0) {
      q = [((LibOrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) tauPowWithInt:tauCount];
      tauCount = 0;
      LibOrgBouncycastleMathEcECPoint *x = ui > 0 ? p : pNeg;
      q = (LibOrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([((LibOrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) addWithLibOrgBouncycastleMathEcECPoint:x], [LibOrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
  }
  if (tauCount > 0) {
    q = [((LibOrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) tauPowWithInt:tauCount];
  }
  return q;
}

IOSByteArray *LibOrgBouncycastleMathEcTnaf_tauAdicWNafWithByte_withLibOrgBouncycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcZTauElementArray_(jbyte mu, LibOrgBouncycastleMathEcZTauElement *lambda, jbyte width, JavaMathBigInteger *pow2w, JavaMathBigInteger *tw, IOSObjectArray *alpha) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  JavaMathBigInteger *norm = LibOrgBouncycastleMathEcTnaf_normWithByte_withLibOrgBouncycastleMathEcZTauElement_(mu, lambda);
  jint log2Norm = [((JavaMathBigInteger *) nil_chk(norm)) bitLength];
  jint maxLength = log2Norm > 30 ? log2Norm + 4 + width : 34 + width;
  IOSByteArray *u = [IOSByteArray newArrayWithLength:maxLength];
  JavaMathBigInteger *pow2wMin1 = [((JavaMathBigInteger *) nil_chk(pow2w)) shiftRightWithInt:1];
  JavaMathBigInteger *r0 = ((LibOrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_;
  JavaMathBigInteger *r1 = lambda->v_;
  jint i = 0;
  while (!(([((JavaMathBigInteger *) nil_chk(r0)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]) && ([((JavaMathBigInteger *) nil_chk(r1)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]))) {
    if ([r0 testBitWithInt:0]) {
      JavaMathBigInteger *uUnMod = [((JavaMathBigInteger *) nil_chk([r0 addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r1)) multiplyWithJavaMathBigInteger:tw]])) modWithJavaMathBigInteger:pow2w];
      jbyte uLocal;
      if ([((JavaMathBigInteger *) nil_chk(uUnMod)) compareToWithId:pow2wMin1] >= 0) {
        uLocal = (jbyte) [((JavaMathBigInteger *) nil_chk([uUnMod subtractWithJavaMathBigInteger:pow2w])) intValue];
      }
      else {
        uLocal = (jbyte) [uUnMod intValue];
      }
      *IOSByteArray_GetRef(u, i) = uLocal;
      jboolean s = true;
      if (uLocal < 0) {
        s = false;
        uLocal = (jbyte) -uLocal;
      }
      if (s) {
        r0 = [r0 subtractWithJavaMathBigInteger:((LibOrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(nil_chk(alpha), uLocal)))->u_];
        r1 = [r1 subtractWithJavaMathBigInteger:((LibOrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(alpha, uLocal)))->v_];
      }
      else {
        r0 = [r0 addWithJavaMathBigInteger:((LibOrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(nil_chk(alpha), uLocal)))->u_];
        r1 = [r1 addWithJavaMathBigInteger:((LibOrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(alpha, uLocal)))->v_];
      }
    }
    else {
      *IOSByteArray_GetRef(u, i) = 0;
    }
    JavaMathBigInteger *t = r0;
    if (mu == 1) {
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1]];
    }
    else {
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1]];
    }
    r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(t)) shiftRightWithInt:1])) negate];
    i++;
  }
  return u;
}

IOSObjectArray *LibOrgBouncycastleMathEcTnaf_getPreCompWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *p, jbyte a) {
  LibOrgBouncycastleMathEcTnaf_initialize();
  IOSObjectArray *alphaTnaf = (a == 0) ? LibOrgBouncycastleMathEcTnaf_alpha0Tnaf : LibOrgBouncycastleMathEcTnaf_alpha1Tnaf;
  IOSObjectArray *pu = [IOSObjectArray newArrayWithLength:JreURShift32((alphaTnaf->size_ + 1), 1) type:LibOrgBouncycastleMathEcECPoint_AbstractF2m_class_()];
  (void) IOSObjectArray_Set(pu, 0, p);
  jint precompLen = alphaTnaf->size_;
  for (jint i = 3; i < precompLen; i += 2) {
    (void) IOSObjectArray_Set(pu, JreURShift32(i, 1), LibOrgBouncycastleMathEcTnaf_multiplyFromTnafWithLibOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(p, IOSObjectArray_Get(alphaTnaf, i)));
  }
  [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve])) normalizeAllWithLibOrgBouncycastleMathEcECPointArray:pu];
  return pu;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcTnaf)
