//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/CertResponse.java
//

#ifndef CertResponse_H
#define CertResponse_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Integer;
@class LibOrgBouncycastleAsn1ASN1OctetString;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CmpCertifiedKeyPair;
@class LibOrgBouncycastleAsn1CmpPKIStatusInfo;

@interface LibOrgBouncycastleAsn1CmpCertResponse : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)certReqId
                         withLibOrgBouncycastleAsn1CmpPKIStatusInfo:(LibOrgBouncycastleAsn1CmpPKIStatusInfo *)status;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)certReqId
                         withLibOrgBouncycastleAsn1CmpPKIStatusInfo:(LibOrgBouncycastleAsn1CmpPKIStatusInfo *)status
                      withLibOrgBouncycastleAsn1CmpCertifiedKeyPair:(LibOrgBouncycastleAsn1CmpCertifiedKeyPair *)certifiedKeyPair
                          withLibOrgBouncycastleAsn1ASN1OctetString:(LibOrgBouncycastleAsn1ASN1OctetString *)rspInfo;

- (LibOrgBouncycastleAsn1CmpCertifiedKeyPair *)getCertifiedKeyPair;

- (LibOrgBouncycastleAsn1ASN1Integer *)getCertReqId;

+ (LibOrgBouncycastleAsn1CmpCertResponse *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1CmpPKIStatusInfo *)getStatus;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmpCertResponse)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertResponse *LibOrgBouncycastleAsn1CmpCertResponse_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpCertResponse_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIStatusInfo_(LibOrgBouncycastleAsn1CmpCertResponse *self, LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CmpPKIStatusInfo *status);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertResponse *new_LibOrgBouncycastleAsn1CmpCertResponse_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIStatusInfo_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CmpPKIStatusInfo *status) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertResponse *create_LibOrgBouncycastleAsn1CmpCertResponse_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIStatusInfo_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CmpPKIStatusInfo *status);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpCertResponse_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIStatusInfo_withLibOrgBouncycastleAsn1CmpCertifiedKeyPair_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1CmpCertResponse *self, LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CmpPKIStatusInfo *status, LibOrgBouncycastleAsn1CmpCertifiedKeyPair *certifiedKeyPair, LibOrgBouncycastleAsn1ASN1OctetString *rspInfo);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertResponse *new_LibOrgBouncycastleAsn1CmpCertResponse_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIStatusInfo_withLibOrgBouncycastleAsn1CmpCertifiedKeyPair_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CmpPKIStatusInfo *status, LibOrgBouncycastleAsn1CmpCertifiedKeyPair *certifiedKeyPair, LibOrgBouncycastleAsn1ASN1OctetString *rspInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertResponse *create_LibOrgBouncycastleAsn1CmpCertResponse_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIStatusInfo_withLibOrgBouncycastleAsn1CmpCertifiedKeyPair_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CmpPKIStatusInfo *status, LibOrgBouncycastleAsn1CmpCertifiedKeyPair *certifiedKeyPair, LibOrgBouncycastleAsn1ASN1OctetString *rspInfo);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmpCertResponse)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertResponse_H
