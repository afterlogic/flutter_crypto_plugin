//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/mceliece/McElieceKobaraImaiCipher.java
//

#include "ByteUtils.h"
#include "CipherParameters.h"
#include "Conversions.h"
#include "CryptoServicesRegistrar.h"
#include "Digest.h"
#include "DigestRandomGenerator.h"
#include "GF2Vector.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntegerFunctions.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "McElieceCCA2KeyParameters.h"
#include "McElieceCCA2Primitives.h"
#include "McElieceCCA2PrivateKeyParameters.h"
#include "McElieceCCA2PublicKeyParameters.h"
#include "McElieceKobaraImaiCipher.h"
#include "ParametersWithRandom.h"
#include "PqcCryptoMcelieceUtils.h"
#include "SHA1Digest.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher () {
 @public
  id<LibOrgBouncycastleCryptoDigest> messDigest_;
  JavaSecuritySecureRandom *sr_;
  jint n_;
  jint k_;
  jint t_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, messDigest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, sr_, JavaSecuritySecureRandom *)

inline NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_get_DEFAULT_PRNG_NAME(void);
static NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_DEFAULT_PRNG_NAME = @"SHA1PRNG";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, DEFAULT_PRNG_NAME, NSString *)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher)

NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2.3";
IOSByteArray *LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT;

@implementation LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher

+ (NSString *)OID {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_OID;
}

+ (IOSByteArray *)PUBLIC_CONSTANT {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->sr_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk([rParam getParameters], [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
    else {
      self->sr_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
  }
  else {
    self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]);
    LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]));
  }
}

- (jint)getKeySizeWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)key {
  if ([key isKindOfClass:[LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]]) {
    return [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) key))) getN];
  }
  if ([key isKindOfClass:[LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]]) {
    return [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}

- (void)initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, pubKey);
}

- (void)initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, privKey);
}

- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  if (!forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  jint c2Len = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize];
  jint c4Len = JreRShift32(k_, 3);
  jint c5Len = JreRShift32(([((JavaMathBigInteger *) nil_chk(LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n_, t_))) bitLength] - 1), 3);
  jint mLen = c4Len + c5Len - c2Len - ((IOSByteArray *) nil_chk(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT))->size_;
  if (((IOSByteArray *) nil_chk(input))->size_ > mLen) {
    mLen = input->size_;
  }
  jint c1Len = mLen + LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT->size_;
  jint c6Len = c1Len + c2Len - c4Len - c5Len;
  IOSByteArray *mConst = [IOSByteArray newArrayWithLength:c1Len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, 0, mConst, 0, input->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT, 0, mConst, mLen, LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT->size_);
  IOSByteArray *r = [IOSByteArray newArrayWithLength:c2Len];
  [((JavaSecuritySecureRandom *) nil_chk(sr_)) nextBytesWithByteArray:r];
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_LibOrgBouncycastleCryptoPrngDigestRandomGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
  [sr0 addSeedMaterialWithByteArray:r];
  IOSByteArray *c1 = [IOSByteArray newArrayWithLength:c1Len];
  [sr0 nextBytesWithByteArray:c1];
  for (jint i = c1Len - 1; i >= 0; i--) {
    *IOSByteArray_GetRef(c1, i) ^= IOSByteArray_Get(mConst, i);
  }
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:c1 withInt:0 withInt:c1->size_];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:c2 withInt:0];
  for (jint i = c2Len - 1; i >= 0; i--) {
    *IOSByteArray_GetRef(c2, i) ^= IOSByteArray_Get(r, i);
  }
  IOSByteArray *c2c1 = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c2, c1);
  IOSByteArray *c6 = [IOSByteArray newArrayWithLength:0];
  if (c6Len > 0) {
    c6 = [IOSByteArray newArrayWithLength:c6Len];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c2c1, 0, c6, 0, c6Len);
  }
  IOSByteArray *c5 = [IOSByteArray newArrayWithLength:c5Len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c2c1, c6Len, c5, 0, c5Len);
  IOSByteArray *c4 = [IOSByteArray newArrayWithLength:c4Len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c2c1, c6Len + c5Len, c4, 0, c4Len);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *c4Vec = LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(k_, c4);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *z = LibOrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, c5);
  IOSByteArray *encC4 = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_encryptionPrimitiveWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]), c4Vec, z))) getEncoded];
  if (c6Len > 0) {
    return LibOrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c6, encC4);
  }
  return encC4;
}

- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  if (forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  jint nDiv8 = JreRShift32(n_, 3);
  if (((IOSByteArray *) nil_chk(input))->size_ < nDiv8) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: Ciphertext too short.");
  }
  jint c2Len = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize];
  jint c4Len = JreRShift32(k_, 3);
  jint c6Len = input->size_ - nDiv8;
  IOSByteArray *c6;
  IOSByteArray *encC4;
  if (c6Len > 0) {
    IOSObjectArray *c6EncC4 = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(input, c6Len);
    c6 = IOSObjectArray_Get(nil_chk(c6EncC4), 0);
    encC4 = IOSObjectArray_Get(c6EncC4, 1);
  }
  else {
    c6 = [IOSByteArray newArrayWithLength:0];
    encC4 = input;
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *encC4Vec = LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, encC4);
  IOSObjectArray *c4z = LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_decryptionPrimitiveWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]), encC4Vec);
  IOSByteArray *c4 = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(IOSObjectArray_Get(nil_chk(c4z), 0))) getEncoded];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *z = IOSObjectArray_Get(c4z, 1);
  if (((IOSByteArray *) nil_chk(c4))->size_ > c4Len) {
    c4 = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_subArrayWithByteArray_withInt_withInt_(c4, 0, c4Len);
  }
  IOSByteArray *c5 = LibOrgBouncycastlePqcCryptoMcelieceConversions_decodeWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(n_, t_, z);
  IOSByteArray *c6c5c4 = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c6, c5);
  c6c5c4 = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c6c5c4, c4);
  jint c1Len = ((IOSByteArray *) nil_chk(c6c5c4))->size_ - c2Len;
  IOSObjectArray *c2c1 = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(c6c5c4, c2Len);
  IOSByteArray *c2 = IOSObjectArray_Get(nil_chk(c2c1), 0);
  IOSByteArray *c1 = IOSObjectArray_Get(c2c1, 1);
  IOSByteArray *rPrime = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:c1 withInt:0 withInt:((IOSByteArray *) nil_chk(c1))->size_];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:rPrime withInt:0];
  for (jint i = c2Len - 1; i >= 0; i--) {
    *IOSByteArray_GetRef(rPrime, i) ^= IOSByteArray_Get(nil_chk(c2), i);
  }
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_LibOrgBouncycastleCryptoPrngDigestRandomGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
  [sr0 addSeedMaterialWithByteArray:rPrime];
  IOSByteArray *mConstPrime = [IOSByteArray newArrayWithLength:c1Len];
  [sr0 nextBytesWithByteArray:mConstPrime];
  for (jint i = c1Len - 1; i >= 0; i--) {
    *IOSByteArray_GetRef(mConstPrime, i) ^= IOSByteArray_Get(c1, i);
  }
  if (mConstPrime->size_ < c1Len) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  IOSObjectArray *temp = LibOrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(mConstPrime, c1Len - ((IOSByteArray *) nil_chk(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT))->size_);
  IOSByteArray *mr = IOSObjectArray_Get(nil_chk(temp), 0);
  IOSByteArray *constPrime = IOSObjectArray_Get(temp, 1);
  if (!LibOrgBouncycastlePqcMathLinearalgebraByteUtils_equalsWithByteArray_withByteArray_(constPrime, LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT)) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  return mr;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 9, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:);
  methods[3].selector = @selector(initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:);
  methods[4].selector = @selector(initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:);
  methods[5].selector = @selector(messageEncryptWithByteArray:);
  methods[6].selector = @selector(messageDecryptWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "DEFAULT_PRNG_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "PUBLIC_CONSTANT", "[B", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "messDigest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "getKeySize", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", "initCipherEncrypt", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters;", "initCipherDecrypt", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters;", "messageEncrypt", "[B", "messageDecrypt", "LLibOrgBouncycastleCryptoInvalidCipherTextException;", &LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_OID, &LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_DEFAULT_PRNG_NAME, &LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher = { "McElieceKobaraImaiCipher", "lib.org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 7, 10, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher class]) {
    LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT = [@"a predetermined public constant" java_getBytes];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher)
  }
}

@end

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_init(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, init)
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *create_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, init)
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey) {
  self->messDigest_ = LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils_getDigestWithNSString_([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(pubKey)) getDigest]);
  self->n_ = [pubKey getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey) {
  self->messDigest_ = LibOrgBouncycastlePqcCryptoMceliecePqcCryptoMcelieceUtils_getDigestWithNSString_([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(privKey)) getDigest]);
  self->n_ = [privKey getN];
  self->k_ = [privKey getK];
  self->t_ = [privKey getT];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher)
