//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsSessionImpl.java
//

#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SessionParameters.h"
#include "TlsSessionImpl.h"
#include "java/lang/IllegalArgumentException.h"

@implementation LibOrgBouncycastleCryptoTlsTlsSessionImpl

- (instancetype)initWithByteArray:(IOSByteArray *)sessionID
withLibOrgBouncycastleCryptoTlsSessionParameters:(LibOrgBouncycastleCryptoTlsSessionParameters *)sessionParameters {
  LibOrgBouncycastleCryptoTlsTlsSessionImpl_initWithByteArray_withLibOrgBouncycastleCryptoTlsSessionParameters_(self, sessionID, sessionParameters);
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters *)exportSessionParameters {
  @synchronized(self) {
    return self->sessionParameters_ == nil ? nil : [self->sessionParameters_ copy__];
  }
}

- (IOSByteArray *)getSessionID {
  @synchronized(self) {
    return sessionID_;
  }
}

- (void)invalidate {
  @synchronized(self) {
    self->resumable_ = false;
  }
}

- (jboolean)isResumable {
  @synchronized(self) {
    return resumable_;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withLibOrgBouncycastleCryptoTlsSessionParameters:);
  methods[1].selector = @selector(exportSessionParameters);
  methods[2].selector = @selector(getSessionID);
  methods[3].selector = @selector(invalidate);
  methods[4].selector = @selector(isResumable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sessionID_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sessionParameters_", "LLibOrgBouncycastleCryptoTlsSessionParameters;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "resumable_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BLLibOrgBouncycastleCryptoTlsSessionParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsSessionImpl = { "TlsSessionImpl", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 5, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsSessionImpl;
}

@end

void LibOrgBouncycastleCryptoTlsTlsSessionImpl_initWithByteArray_withLibOrgBouncycastleCryptoTlsSessionParameters_(LibOrgBouncycastleCryptoTlsTlsSessionImpl *self, IOSByteArray *sessionID, LibOrgBouncycastleCryptoTlsSessionParameters *sessionParameters) {
  NSObject_init(self);
  if (sessionID == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'sessionID' cannot be null");
  }
  if (sessionID->size_ > 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'sessionID' cannot be longer than 32 bytes");
  }
  self->sessionID_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(sessionID);
  self->sessionParameters_ = sessionParameters;
  self->resumable_ = (sessionID->size_ > 0 && nil != sessionParameters && [sessionParameters isExtendedMasterSecret]);
}

LibOrgBouncycastleCryptoTlsTlsSessionImpl *new_LibOrgBouncycastleCryptoTlsTlsSessionImpl_initWithByteArray_withLibOrgBouncycastleCryptoTlsSessionParameters_(IOSByteArray *sessionID, LibOrgBouncycastleCryptoTlsSessionParameters *sessionParameters) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsSessionImpl, initWithByteArray_withLibOrgBouncycastleCryptoTlsSessionParameters_, sessionID, sessionParameters)
}

LibOrgBouncycastleCryptoTlsTlsSessionImpl *create_LibOrgBouncycastleCryptoTlsTlsSessionImpl_initWithByteArray_withLibOrgBouncycastleCryptoTlsSessionParameters_(IOSByteArray *sessionID, LibOrgBouncycastleCryptoTlsSessionParameters *sessionParameters) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsSessionImpl, initWithByteArray_withLibOrgBouncycastleCryptoTlsSessionParameters_, sessionID, sessionParameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsSessionImpl)
