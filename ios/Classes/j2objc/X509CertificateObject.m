//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/X509CertificateObject.java
//

#include "ASN1BitString.h"
#include "ASN1Dump.h"
#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1OutputStream.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1String.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "Asn1X509Time.h"
#include "BasicConstraints.h"
#include "BouncyCastleProvider.h"
#include "DERBitString.h"
#include "DERIA5String.h"
#include "DERNull.h"
#include "Extension.h"
#include "Extensions.h"
#include "GeneralName.h"
#include "Hex.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "KeyUsage.h"
#include "MiscObjectIdentifiers.h"
#include "NetscapeCertType.h"
#include "NetscapeRevocationURL.h"
#include "PKCS12BagAttributeCarrier.h"
#include "PKCS12BagAttributeCarrierImpl.h"
#include "RFC3280CertPathUtilities.h"
#include "RFC4519Style.h"
#include "Strings.h"
#include "SubjectPublicKeyInfo.h"
#include "TBSCertificate.h"
#include "VerisignCzagExtension.h"
#include "X500Name.h"
#include "X500NameStyle.h"
#include "X509Certificate.h"
#include "X509CertificateObject.h"
#include "X509Principal.h"
#include "X509SignatureUtil.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigInteger.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/security/Principal.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Security.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleJceProviderX509CertificateObject () {
 @public
  LibOrgBouncycastleAsn1X509X509Certificate *c_;
  LibOrgBouncycastleAsn1X509BasicConstraints *basicConstraints_;
  IOSBooleanArray *keyUsage_;
  jboolean hashValueSet_;
  jint hashValue_;
  id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> attrCarrier_;
}

- (IOSByteArray *)getExtensionBytesWithNSString:(NSString *)oid;

- (jint)calculateHashCode;

- (void)checkSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withJavaSecuritySignature:(JavaSecuritySignature *)signature;

- (jboolean)isAlgIdEqualWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)id1
                        withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)id2;

+ (id<JavaUtilCollection>)getAlternativeNamesWithByteArray:(IOSByteArray *)extVal;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderX509CertificateObject, c_, LibOrgBouncycastleAsn1X509X509Certificate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderX509CertificateObject, basicConstraints_, LibOrgBouncycastleAsn1X509BasicConstraints *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderX509CertificateObject, keyUsage_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderX509CertificateObject, attrCarrier_, id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJceProviderX509CertificateObject_getExtensionBytesWithNSString_(LibOrgBouncycastleJceProviderX509CertificateObject *self, NSString *oid);

__attribute__((unused)) static jint LibOrgBouncycastleJceProviderX509CertificateObject_calculateHashCode(LibOrgBouncycastleJceProviderX509CertificateObject *self);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(LibOrgBouncycastleJceProviderX509CertificateObject *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *signature);

__attribute__((unused)) static jboolean LibOrgBouncycastleJceProviderX509CertificateObject_isAlgIdEqualWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(LibOrgBouncycastleJceProviderX509CertificateObject *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *id1, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *id2);

__attribute__((unused)) static id<JavaUtilCollection> LibOrgBouncycastleJceProviderX509CertificateObject_getAlternativeNamesWithByteArray_(IOSByteArray *extVal);

@implementation LibOrgBouncycastleJceProviderX509CertificateObject

- (instancetype)initWithLibOrgBouncycastleAsn1X509X509Certificate:(LibOrgBouncycastleAsn1X509X509Certificate *)c {
  LibOrgBouncycastleJceProviderX509CertificateObject_initWithLibOrgBouncycastleAsn1X509X509Certificate_(self, c);
  return self;
}

- (void)checkValidity {
  [self checkValidityWithJavaUtilDate:new_JavaUtilDate_init()];
}

- (void)checkValidityWithJavaUtilDate:(JavaUtilDate *)date {
  if ([((JavaUtilDate *) nil_chk(date)) getTime] > [((JavaUtilDate *) nil_chk([self getNotAfter])) getTime]) {
    @throw new_JavaSecurityCertCertificateExpiredException_initWithNSString_(JreStrcat("$$", @"certificate expired on ", [((LibOrgBouncycastleAsn1X509Asn1X509Time *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getEndDate])) getTime]));
  }
  if ([date getTime] < [((JavaUtilDate *) nil_chk([self getNotBefore])) getTime]) {
    @throw new_JavaSecurityCertCertificateNotYetValidException_initWithNSString_(JreStrcat("$$", @"certificate not valid till ", [((LibOrgBouncycastleAsn1X509Asn1X509Time *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getStartDate])) getTime]));
  }
}

- (jint)getVersion {
  return [((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getVersionNumber];
}

- (JavaMathBigInteger *)getSerialNumber {
  return [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSerialNumber])) getValue];
}

- (id<JavaSecurityPrincipal>)getIssuerDN {
  @try {
    return new_LibOrgBouncycastleJceX509Principal_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((LibOrgBouncycastleAsn1X500X500Name *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getIssuer])) getEncoded]));
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
}

- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal {
  @try {
    JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
    LibOrgBouncycastleAsn1ASN1OutputStream *aOut = new_LibOrgBouncycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(bOut);
    [aOut writeObjectWithLibOrgBouncycastleAsn1ASN1Encodable:[((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getIssuer]];
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([bOut toByteArray]);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode issuer DN");
  }
}

- (id<JavaSecurityPrincipal>)getSubjectDN {
  return new_LibOrgBouncycastleJceX509Principal_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((LibOrgBouncycastleAsn1X500X500Name *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSubject])) toASN1Primitive]));
}

- (JavaxSecurityAuthX500X500Principal *)getSubjectX500Principal {
  @try {
    JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
    LibOrgBouncycastleAsn1ASN1OutputStream *aOut = new_LibOrgBouncycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(bOut);
    [aOut writeObjectWithLibOrgBouncycastleAsn1ASN1Encodable:[((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSubject]];
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([bOut toByteArray]);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode issuer DN");
  }
}

- (JavaUtilDate *)getNotBefore {
  return [((LibOrgBouncycastleAsn1X509Asn1X509Time *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getStartDate])) getDate];
}

- (JavaUtilDate *)getNotAfter {
  return [((LibOrgBouncycastleAsn1X509Asn1X509Time *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getEndDate])) getDate];
}

- (IOSByteArray *)getTBSCertificate {
  @try {
    return [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getTBSCertificate])) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_([e description]);
  }
}

- (IOSByteArray *)getSignature {
  return [((LibOrgBouncycastleAsn1DERBitString *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSignature])) getOctets];
}

- (NSString *)getSigAlgName {
  JavaSecurityProvider *prov = JavaSecuritySecurity_getProviderWithNSString_(LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
  if (prov != nil) {
    NSString *algName = [prov getPropertyWithNSString:JreStrcat("$$", @"Alg.Alias.Signature.", [self getSigAlgOID])];
    if (algName != nil) {
      return algName;
    }
  }
  IOSObjectArray *provs = JavaSecuritySecurity_getProviders();
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(provs))->size_; i++) {
    NSString *algName = [((JavaSecurityProvider *) nil_chk(IOSObjectArray_Get(provs, i))) getPropertyWithNSString:JreStrcat("$$", @"Alg.Alias.Signature.", [self getSigAlgOID])];
    if (algName != nil) {
      return algName;
    }
  }
  return [self getSigAlgOID];
}

- (NSString *)getSigAlgOID {
  return [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSignatureAlgorithm])) getAlgorithm])) getId];
}

- (IOSByteArray *)getSigAlgParams {
  if ([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSignatureAlgorithm])) getParameters] != nil) {
    @try {
      return [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSignatureAlgorithm])) getParameters])) toASN1Primitive])) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
    }
    @catch (JavaIoIOException *e) {
      return nil;
    }
  }
  else {
    return nil;
  }
}

- (IOSBooleanArray *)getIssuerUniqueID {
  LibOrgBouncycastleAsn1DERBitString *id_ = [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getTBSCertificate])) getIssuerUniqueId];
  if (id_ != nil) {
    IOSByteArray *bytes = [id_ getBytes];
    IOSBooleanArray *boolId = [IOSBooleanArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 8 - [id_ getPadBits]];
    for (jint i = 0; i != boolId->size_; i++) {
      *IOSBooleanArray_GetRef(boolId, i) = ((IOSByteArray_Get(bytes, i / 8) & (JreURShift32((jint) 0x80, (i % 8)))) != 0);
    }
    return boolId;
  }
  return nil;
}

- (IOSBooleanArray *)getSubjectUniqueID {
  LibOrgBouncycastleAsn1DERBitString *id_ = [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getTBSCertificate])) getSubjectUniqueId];
  if (id_ != nil) {
    IOSByteArray *bytes = [id_ getBytes];
    IOSBooleanArray *boolId = [IOSBooleanArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 8 - [id_ getPadBits]];
    for (jint i = 0; i != boolId->size_; i++) {
      *IOSBooleanArray_GetRef(boolId, i) = ((IOSByteArray_Get(bytes, i / 8) & (JreURShift32((jint) 0x80, (i % 8)))) != 0);
    }
    return boolId;
  }
  return nil;
}

- (IOSBooleanArray *)getKeyUsage {
  return keyUsage_;
}

- (id<JavaUtilList>)getExtendedKeyUsage {
  IOSByteArray *bytes = LibOrgBouncycastleJceProviderX509CertificateObject_getExtensionBytesWithNSString_(self, @"2.5.29.37");
  if (bytes != nil) {
    @try {
      LibOrgBouncycastleAsn1ASN1InputStream *dIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(bytes);
      LibOrgBouncycastleAsn1ASN1Sequence *seq = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([dIn readObject], [LibOrgBouncycastleAsn1ASN1Sequence class]);
      id<JavaUtilList> list = new_JavaUtilArrayList_init();
      for (jint i = 0; i != [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size]; i++) {
        [list addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([seq getObjectAtWithInt:i], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class])))) getId]];
      }
      return JavaUtilCollections_unmodifiableListWithJavaUtilList_(list);
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_(@"error processing extended key usage extension");
    }
  }
  return nil;
}

- (jint)getBasicConstraints {
  if (basicConstraints_ != nil) {
    if ([basicConstraints_ isCA]) {
      if ([((LibOrgBouncycastleAsn1X509BasicConstraints *) nil_chk(basicConstraints_)) getPathLenConstraint] == nil) {
        return JavaLangInteger_MAX_VALUE;
      }
      else {
        return [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1X509BasicConstraints *) nil_chk(basicConstraints_)) getPathLenConstraint])) intValue];
      }
    }
    else {
      return -1;
    }
  }
  return -1;
}

- (id<JavaUtilCollection>)getSubjectAlternativeNames {
  return LibOrgBouncycastleJceProviderX509CertificateObject_getAlternativeNamesWithByteArray_(LibOrgBouncycastleJceProviderX509CertificateObject_getExtensionBytesWithNSString_(self, [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, subjectAlternativeName))) getId]));
}

- (id<JavaUtilCollection>)getIssuerAlternativeNames {
  return LibOrgBouncycastleJceProviderX509CertificateObject_getAlternativeNamesWithByteArray_(LibOrgBouncycastleJceProviderX509CertificateObject_getExtensionBytesWithNSString_(self, [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuerAlternativeName))) getId]));
}

- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  if ([self getVersion] == 3) {
    id<JavaUtilSet> set = new_JavaUtilHashSet_init();
    LibOrgBouncycastleAsn1X509Extensions *extensions = [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    if (extensions != nil) {
      id<JavaUtilEnumeration> e = [extensions oids];
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        LibOrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
        if ([((LibOrgBouncycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          [set addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      return set;
    }
  }
  return nil;
}

- (IOSByteArray *)getExtensionBytesWithNSString:(NSString *)oid {
  return LibOrgBouncycastleJceProviderX509CertificateObject_getExtensionBytesWithNSString_(self, oid);
}

- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid {
  LibOrgBouncycastleAsn1X509Extensions *exts = [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
  if (exts != nil) {
    LibOrgBouncycastleAsn1X509Extension *ext = [exts getExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    if (ext != nil) {
      @try {
        return [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getEncoded];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"error parsing ", [e description]));
      }
    }
  }
  return nil;
}

- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  if ([self getVersion] == 3) {
    id<JavaUtilSet> set = new_JavaUtilHashSet_init();
    LibOrgBouncycastleAsn1X509Extensions *extensions = [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    if (extensions != nil) {
      id<JavaUtilEnumeration> e = [extensions oids];
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        LibOrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
        if (![((LibOrgBouncycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          [set addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      return set;
    }
  }
  return nil;
}

- (jboolean)hasUnsupportedCriticalExtension {
  if ([self getVersion] == 3) {
    LibOrgBouncycastleAsn1X509Extensions *extensions = [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    if (extensions != nil) {
      id<JavaUtilEnumeration> e = [extensions oids];
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        NSString *oidId = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId];
        if ([((NSString *) nil_chk(oidId)) isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, KEY_USAGE)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CERTIFICATE_POLICIES)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, POLICY_MAPPINGS)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, INHIBIT_ANY_POLICY)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, CRL_DISTRIBUTION_POINTS)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, POLICY_CONSTRAINTS)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, BASIC_CONSTRAINTS)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, SUBJECT_ALTERNATIVE_NAME)] || [oidId isEqual:JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, NAME_CONSTRAINTS)]) {
          continue;
        }
        LibOrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
        if ([((LibOrgBouncycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          return true;
        }
      }
    }
  }
  return false;
}

- (id<JavaSecurityPublicKey>)getPublicKey {
  @try {
    return LibOrgBouncycastleJceProviderBouncyCastleProvider_getPublicKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSubjectPublicKeyInfo]);
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
}

- (IOSByteArray *)getEncoded {
  @try {
    return [((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_([e description]);
  }
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([o isKindOfClass:[JavaSecurityCertCertificate class]])) {
    return false;
  }
  JavaSecurityCertCertificate *other = (JavaSecurityCertCertificate *) cast_chk(o, [JavaSecurityCertCertificate class]);
  @try {
    IOSByteArray *b1 = [self getEncoded];
    IOSByteArray *b2 = [((JavaSecurityCertCertificate *) nil_chk(other)) getEncoded];
    return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(b1, b2);
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    return false;
  }
}

- (NSUInteger)hash {
  @synchronized(self) {
    if (!hashValueSet_) {
      hashValue_ = LibOrgBouncycastleJceProviderX509CertificateObject_calculateHashCode(self);
      hashValueSet_ = true;
    }
    return hashValue_;
  }
}

- (jint)calculateHashCode {
  return LibOrgBouncycastleJceProviderX509CertificateObject_calculateHashCode(self);
}

- (void)setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                              withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)attribute {
  [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withLibOrgBouncycastleAsn1ASN1Encodable:attribute];
}

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
}

- (id<JavaUtilEnumeration>)getBagAttributeKeys {
  return [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) getBagAttributeKeys];
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = LibOrgBouncycastleUtilStrings_lineSeparator();
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  [0]         Version: "])) appendWithInt:[self getVersion]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"         SerialNumber: "])) appendWithId:[self getSerialNumber]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"             IssuerDN: "])) appendWithId:[self getIssuerDN]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Start Date: "])) appendWithId:[self getNotBefore]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Final Date: "])) appendWithId:[self getNotAfter]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            SubjectDN: "])) appendWithId:[self getSubjectDN]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Public Key: "])) appendWithId:[self getPublicKey]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  Signature Algorithm: "])) appendWithNSString:[self getSigAlgName]])) appendWithNSString:nl];
  IOSByteArray *sig = [self getSignature];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Signature: "])) appendWithNSString:[NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(sig, 0, 20)]])) appendWithNSString:nl];
  for (jint i = 20; i < ((IOSByteArray *) nil_chk(sig))->size_; i += 20) {
    if (i < sig->size_ - 20) {
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       "])) appendWithNSString:[NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(sig, i, 20)]])) appendWithNSString:nl];
    }
    else {
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       "])) appendWithNSString:[NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(sig, i, sig->size_ - i)]])) appendWithNSString:nl];
    }
  }
  LibOrgBouncycastleAsn1X509Extensions *extensions = [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
  if (extensions != nil) {
    id<JavaUtilEnumeration> e = [extensions oids];
    if ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      (void) [buf appendWithNSString:@"       Extensions: \n"];
    }
    while ([e hasMoreElements]) {
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
      LibOrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
      if ([((LibOrgBouncycastleAsn1X509Extension *) nil_chk(ext)) getExtnValue] != nil) {
        IOSByteArray *octs = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getOctets];
        LibOrgBouncycastleAsn1ASN1InputStream *dIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(octs);
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       critical("])) appendWithBoolean:[ext isCritical]])) appendWithNSString:@") "];
        @try {
          if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, basicConstraints)]) {
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:LibOrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_([dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, keyUsage)]) {
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:LibOrgBouncycastleAsn1X509KeyUsage_getInstanceWithId_([dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, netscapeCertType)]) {
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_LibOrgBouncycastleAsn1MiscNetscapeCertType_initWithLibOrgBouncycastleAsn1DERBitString_((LibOrgBouncycastleAsn1DERBitString *) cast_chk([dIn readObject], [LibOrgBouncycastleAsn1DERBitString class]))])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, netscapeRevocationURL)]) {
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_LibOrgBouncycastleAsn1MiscNetscapeRevocationURL_initWithLibOrgBouncycastleAsn1DERIA5String_((LibOrgBouncycastleAsn1DERIA5String *) cast_chk([dIn readObject], [LibOrgBouncycastleAsn1DERIA5String class]))])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, verisignCzagExtension)]) {
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_LibOrgBouncycastleAsn1MiscVerisignCzagExtension_initWithLibOrgBouncycastleAsn1DERIA5String_((LibOrgBouncycastleAsn1DERIA5String *) cast_chk([dIn readObject], [LibOrgBouncycastleAsn1DERIA5String class]))])) appendWithNSString:nl];
          }
          else {
            (void) [buf appendWithNSString:[oid getId]];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:LibOrgBouncycastleAsn1UtilASN1Dump_dumpAsStringWithId_([dIn readObject])])) appendWithNSString:nl];
          }
        }
        @catch (JavaLangException *ex) {
          (void) [buf appendWithNSString:[oid getId]];
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:@"*****"])) appendWithNSString:nl];
        }
      }
      else {
        (void) [buf appendWithNSString:nl];
      }
    }
  }
  return [buf description];
}

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  JavaSecuritySignature *signature;
  NSString *sigName = LibOrgBouncycastleJceProviderX509SignatureUtil_getSignatureNameWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSignatureAlgorithm]);
  @try {
    signature = JavaSecuritySignature_getInstanceWithNSString_withNSString_(sigName, LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
  }
  @catch (JavaLangException *e) {
    signature = JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
  LibOrgBouncycastleJceProviderX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, signature);
}

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider {
  NSString *sigName = LibOrgBouncycastleJceProviderX509SignatureUtil_getSignatureNameWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSignatureAlgorithm]);
  JavaSecuritySignature *signature;
  if (sigProvider != nil) {
    signature = JavaSecuritySignature_getInstanceWithNSString_withNSString_(sigName, sigProvider);
  }
  else {
    signature = JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
  LibOrgBouncycastleJceProviderX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, signature);
}

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider {
  NSString *sigName = LibOrgBouncycastleJceProviderX509SignatureUtil_getSignatureNameWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(c_)) getSignatureAlgorithm]);
  JavaSecuritySignature *signature;
  if (sigProvider != nil) {
    signature = JavaSecuritySignature_getInstanceWithNSString_withJavaSecurityProvider_(sigName, sigProvider);
  }
  else {
    signature = JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
  LibOrgBouncycastleJceProviderX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, signature);
}

- (void)checkSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withJavaSecuritySignature:(JavaSecuritySignature *)signature {
  LibOrgBouncycastleJceProviderX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, signature);
}

- (jboolean)isAlgIdEqualWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)id1
                        withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)id2 {
  return LibOrgBouncycastleJceProviderX509CertificateObject_isAlgIdEqualWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(self, id1, id2);
}

+ (id<JavaUtilCollection>)getAlternativeNamesWithByteArray:(IOSByteArray *)extVal {
  return LibOrgBouncycastleJceProviderX509CertificateObject_getAlternativeNamesWithByteArray_(extVal);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x21, 11, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Encodable;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x11, 17, 20, 19, -1, -1, -1 },
    { NULL, "V", 0x11, 17, 21, 22, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, 25, -1, -1, -1 },
    { NULL, "Z", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xa, 28, 29, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1X509X509Certificate:);
  methods[1].selector = @selector(checkValidity);
  methods[2].selector = @selector(checkValidityWithJavaUtilDate:);
  methods[3].selector = @selector(getVersion);
  methods[4].selector = @selector(getSerialNumber);
  methods[5].selector = @selector(getIssuerDN);
  methods[6].selector = @selector(getIssuerX500Principal);
  methods[7].selector = @selector(getSubjectDN);
  methods[8].selector = @selector(getSubjectX500Principal);
  methods[9].selector = @selector(getNotBefore);
  methods[10].selector = @selector(getNotAfter);
  methods[11].selector = @selector(getTBSCertificate);
  methods[12].selector = @selector(getSignature);
  methods[13].selector = @selector(getSigAlgName);
  methods[14].selector = @selector(getSigAlgOID);
  methods[15].selector = @selector(getSigAlgParams);
  methods[16].selector = @selector(getIssuerUniqueID);
  methods[17].selector = @selector(getSubjectUniqueID);
  methods[18].selector = @selector(getKeyUsage);
  methods[19].selector = @selector(getExtendedKeyUsage);
  methods[20].selector = @selector(getBasicConstraints);
  methods[21].selector = @selector(getSubjectAlternativeNames);
  methods[22].selector = @selector(getIssuerAlternativeNames);
  methods[23].selector = @selector(getCriticalExtensionOIDs);
  methods[24].selector = @selector(getExtensionBytesWithNSString:);
  methods[25].selector = @selector(getExtensionValueWithNSString:);
  methods[26].selector = @selector(getNonCriticalExtensionOIDs);
  methods[27].selector = @selector(hasUnsupportedCriticalExtension);
  methods[28].selector = @selector(getPublicKey);
  methods[29].selector = @selector(getEncoded);
  methods[30].selector = @selector(isEqual:);
  methods[31].selector = @selector(hash);
  methods[32].selector = @selector(calculateHashCode);
  methods[33].selector = @selector(setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withLibOrgBouncycastleAsn1ASN1Encodable:);
  methods[34].selector = @selector(getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[35].selector = @selector(getBagAttributeKeys);
  methods[36].selector = @selector(description);
  methods[37].selector = @selector(verifyWithJavaSecurityPublicKey:);
  methods[38].selector = @selector(verifyWithJavaSecurityPublicKey:withNSString:);
  methods[39].selector = @selector(verifyWithJavaSecurityPublicKey:withJavaSecurityProvider:);
  methods[40].selector = @selector(checkSignatureWithJavaSecurityPublicKey:withJavaSecuritySignature:);
  methods[41].selector = @selector(isAlgIdEqualWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  methods[42].selector = @selector(getAlternativeNamesWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c_", "LLibOrgBouncycastleAsn1X509X509Certificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "basicConstraints_", "LLibOrgBouncycastleAsn1X509BasicConstraints;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyUsage_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashValueSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attrCarrier_", "LLibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1X509X509Certificate;", "LJavaSecurityCertCertificateParsingException;", "LJavaSecurityCertCertificateExpiredException;LJavaSecurityCertCertificateNotYetValidException;", "checkValidity", "LJavaUtilDate;", "LJavaSecurityCertCertificateEncodingException;", "getExtensionBytes", "LNSString;", "getExtensionValue", "equals", "LNSObject;", "hashCode", "setBagAttribute", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;LLibOrgBouncycastleAsn1ASN1Encodable;", "getBagAttribute", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "toString", "verify", "LJavaSecurityPublicKey;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;LJavaSecuritySignatureException;", "LJavaSecurityPublicKey;LNSString;", "LJavaSecurityPublicKey;LJavaSecurityProvider;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;", "checkSignature", "LJavaSecurityPublicKey;LJavaSecuritySignature;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "isAlgIdEqual", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", "getAlternativeNames", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderX509CertificateObject = { "X509CertificateObject", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 43, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderX509CertificateObject;
}

@end

void LibOrgBouncycastleJceProviderX509CertificateObject_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleJceProviderX509CertificateObject *self, LibOrgBouncycastleAsn1X509X509Certificate *c) {
  JavaSecurityCertX509Certificate_init(self);
  self->attrCarrier_ = new_LibOrgBouncycastleJcajceProviderAsymmetricUtilPKCS12BagAttributeCarrierImpl_init();
  self->c_ = c;
  @try {
    IOSByteArray *bytes = LibOrgBouncycastleJceProviderX509CertificateObject_getExtensionBytesWithNSString_(self, @"2.5.29.19");
    if (bytes != nil) {
      self->basicConstraints_ = LibOrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(bytes));
    }
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_(JreStrcat("$@", @"cannot construct BasicConstraints: ", e));
  }
  @try {
    IOSByteArray *bytes = LibOrgBouncycastleJceProviderX509CertificateObject_getExtensionBytesWithNSString_(self, @"2.5.29.15");
    if (bytes != nil) {
      LibOrgBouncycastleAsn1ASN1BitString *bits = LibOrgBouncycastleAsn1DERBitString_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(bytes));
      bytes = [((LibOrgBouncycastleAsn1ASN1BitString *) nil_chk(bits)) getBytes];
      jint length = (((IOSByteArray *) nil_chk(bytes))->size_ * 8) - [bits getPadBits];
      self->keyUsage_ = [IOSBooleanArray newArrayWithLength:(length < 9) ? 9 : length];
      for (jint i = 0; i != length; i++) {
        *IOSBooleanArray_GetRef(self->keyUsage_, i) = ((IOSByteArray_Get(bytes, i / 8) & (JreURShift32((jint) 0x80, (i % 8)))) != 0);
      }
    }
    else {
      self->keyUsage_ = nil;
    }
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_(JreStrcat("$@", @"cannot construct KeyUsage: ", e));
  }
}

LibOrgBouncycastleJceProviderX509CertificateObject *new_LibOrgBouncycastleJceProviderX509CertificateObject_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509X509Certificate *c) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderX509CertificateObject, initWithLibOrgBouncycastleAsn1X509X509Certificate_, c)
}

LibOrgBouncycastleJceProviderX509CertificateObject *create_LibOrgBouncycastleJceProviderX509CertificateObject_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509X509Certificate *c) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderX509CertificateObject, initWithLibOrgBouncycastleAsn1X509X509Certificate_, c)
}

IOSByteArray *LibOrgBouncycastleJceProviderX509CertificateObject_getExtensionBytesWithNSString_(LibOrgBouncycastleJceProviderX509CertificateObject *self, NSString *oid) {
  LibOrgBouncycastleAsn1X509Extensions *exts = [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(self->c_)) getTBSCertificate])) getExtensions];
  if (exts != nil) {
    LibOrgBouncycastleAsn1X509Extension *ext = [exts getExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    if (ext != nil) {
      return [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getOctets];
    }
  }
  return nil;
}

jint LibOrgBouncycastleJceProviderX509CertificateObject_calculateHashCode(LibOrgBouncycastleJceProviderX509CertificateObject *self) {
  @try {
    jint hashCode = 0;
    IOSByteArray *certData = [self getEncoded];
    for (jint i = 1; i < ((IOSByteArray *) nil_chk(certData))->size_; i++) {
      hashCode += IOSByteArray_Get(certData, i) * i;
    }
    return hashCode;
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    return 0;
  }
}

void LibOrgBouncycastleJceProviderX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(LibOrgBouncycastleJceProviderX509CertificateObject *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *signature) {
  if (!LibOrgBouncycastleJceProviderX509CertificateObject_isAlgIdEqualWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(self, [((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm], [((LibOrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(self->c_)) getTBSCertificate])) getSignature])) {
    @throw new_JavaSecurityCertCertificateException_initWithNSString_(@"signature algorithm in TBS cert not same as outer cert");
  }
  id<LibOrgBouncycastleAsn1ASN1Encodable> params = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm])) getParameters];
  LibOrgBouncycastleJceProviderX509SignatureUtil_setSignatureParametersWithJavaSecuritySignature_withLibOrgBouncycastleAsn1ASN1Encodable_(signature, params);
  [((JavaSecuritySignature *) nil_chk(signature)) initVerifyWithJavaSecurityPublicKey:key];
  [signature updateWithByteArray:[self getTBSCertificate]];
  if (![signature verifyWithByteArray:[self getSignature]]) {
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"certificate does not verify with supplied key");
  }
}

jboolean LibOrgBouncycastleJceProviderX509CertificateObject_isAlgIdEqualWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(LibOrgBouncycastleJceProviderX509CertificateObject *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *id1, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *id2) {
  if (![((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(id1)) getAlgorithm])) isEqual:[((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(id2)) getAlgorithm]]) {
    return false;
  }
  if ([id1 getParameters] == nil) {
    if ([id2 getParameters] != nil && ![((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([id2 getParameters])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE)]) {
      return false;
    }
    return true;
  }
  if ([id2 getParameters] == nil) {
    if ([id1 getParameters] != nil && ![((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([id1 getParameters])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE)]) {
      return false;
    }
    return true;
  }
  return [((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([id1 getParameters])) isEqual:[id2 getParameters]];
}

id<JavaUtilCollection> LibOrgBouncycastleJceProviderX509CertificateObject_getAlternativeNamesWithByteArray_(IOSByteArray *extVal) {
  LibOrgBouncycastleJceProviderX509CertificateObject_initialize();
  if (extVal == nil) {
    return nil;
  }
  @try {
    id<JavaUtilCollection> temp = new_JavaUtilArrayList_init();
    id<JavaUtilEnumeration> it = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(extVal))) getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(it)) hasMoreElements]) {
      LibOrgBouncycastleAsn1X509GeneralName *genName = LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithId_([it nextElement]);
      id<JavaUtilList> list = new_JavaUtilArrayList_init();
      [list addWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(genName)) getTagNo])];
      {
        IOSByteArray *addrBytes;
        NSString *addr;
        switch ([genName getTagNo]) {
          case LibOrgBouncycastleAsn1X509GeneralName_ediPartyName:
          case LibOrgBouncycastleAsn1X509GeneralName_x400Address:
          case LibOrgBouncycastleAsn1X509GeneralName_otherName:
          [list addWithId:[genName getEncoded]];
          break;
          case LibOrgBouncycastleAsn1X509GeneralName_directoryName:
          [list addWithId:[((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleAsn1X500X500Name_getInstanceWithLibOrgBouncycastleAsn1X500X500NameStyle_withId_(JreLoadStatic(LibOrgBouncycastleAsn1X500StyleRFC4519Style, INSTANCE), [genName getName]))) description]];
          break;
          case LibOrgBouncycastleAsn1X509GeneralName_dNSName:
          case LibOrgBouncycastleAsn1X509GeneralName_rfc822Name:
          case LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
          [list addWithId:[((id<LibOrgBouncycastleAsn1ASN1String>) nil_chk(((id<LibOrgBouncycastleAsn1ASN1String>) cast_check([genName getName], LibOrgBouncycastleAsn1ASN1String_class_())))) getString]];
          break;
          case LibOrgBouncycastleAsn1X509GeneralName_registeredID:
          [list addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([genName getName]))) getId]];
          break;
          case LibOrgBouncycastleAsn1X509GeneralName_iPAddress:
          addrBytes = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([genName getName]))) getOctets];
          @try {
            addr = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByAddressWithByteArray_(addrBytes))) getHostAddress];
          }
          @catch (JavaNetUnknownHostException *e) {
            continue;
          }
          [list addWithId:addr];
          break;
          default:
          @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Bad tag number: ", [genName getTagNo]));
        }
      }
      [temp addWithId:JavaUtilCollections_unmodifiableListWithJavaUtilList_(list)];
    }
    if ([temp size] == 0) {
      return nil;
    }
    return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(temp);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_([e getMessage]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderX509CertificateObject)
