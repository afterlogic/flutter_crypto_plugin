//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/rsa/JcajceRsaKeyFactorySpi.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "AsymmetricKeyParameter.h"
#include "BCRSAPrivateCrtKey.h"
#include "BCRSAPrivateKey.h"
#include "BCRSAPublicKey.h"
#include "BaseKeyFactorySpi.h"
#include "CipherParameters.h"
#include "ExtendedInvalidKeySpecException.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceRsaKeyFactorySpi.h"
#include "OpenSSHPrivateKeySpec.h"
#include "OpenSSHPrivateKeyUtil.h"
#include "OpenSSHPublicKeySpec.h"
#include "OpenSSHPublicKeyUtil.h"
#include "PrivateKeyInfo.h"
#include "RSAKeyParameters.h"
#include "RSAPrivateCrtKeyParameters.h"
#include "RSAPrivateKey.h"
#include "RSAUtil.h"
#include "SubjectPublicKeyInfo.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/RSAPrivateCrtKey.h"
#include "java/security/interfaces/RSAPrivateKey.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/RSAPrivateCrtKeySpec.h"
#include "java/security/spec/RSAPrivateKeySpec.h"
#include "java/security/spec/RSAPublicKeySpec.h"

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)spec {
  if ([((IOSClass *) nil_chk(spec)) isAssignableFrom:JavaSecuritySpecRSAPublicKeySpec_class_()] && [JavaSecurityInterfacesRSAPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesRSAPublicKey> k = (id<JavaSecurityInterfacesRSAPublicKey>) cast_check(key, JavaSecurityInterfacesRSAPublicKey_class_());
    return new_JavaSecuritySpecRSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(k)) getModulus], [k getPublicExponent]);
  }
  else if ([spec isAssignableFrom:JavaSecuritySpecRSAPrivateKeySpec_class_()] && [JavaSecurityInterfacesRSAPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesRSAPrivateKey> k = (id<JavaSecurityInterfacesRSAPrivateKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateKey_class_());
    return new_JavaSecuritySpecRSAPrivateKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesRSAPrivateKey>) nil_chk(k)) getModulus], [k getPrivateExponent]);
  }
  else if ([spec isAssignableFrom:JavaSecuritySpecRSAPrivateCrtKeySpec_class_()] && [JavaSecurityInterfacesRSAPrivateCrtKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesRSAPrivateCrtKey> k = (id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_());
    return new_JavaSecuritySpecRSAPrivateCrtKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(k)) getModulus], [k getPublicExponent], [k getPrivateExponent], [k getPrimeP], [k getPrimeQ], [k getPrimeExponentP], [k getPrimeExponentQ], [k getCrtCoefficient]);
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_class_()] && [JavaSecurityInterfacesRSAPublicKey_class_() isInstance:key]) {
    @try {
      return new_LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_initWithByteArray_(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_LibOrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(false, [((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(((id<JavaSecurityInterfacesRSAPublicKey>) cast_check(key, JavaSecurityInterfacesRSAPublicKey_class_())))) getModulus], [((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(((id<JavaSecurityInterfacesRSAPublicKey>) cast_check(key, JavaSecurityInterfacesRSAPublicKey_class_())))) getPublicExponent])));
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to produce encoding: ", [e getMessage]));
    }
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_class_()] && [JavaSecurityInterfacesRSAPrivateCrtKey_class_() isInstance:key]) {
    @try {
      return new_LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_initWithByteArray_(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_encodePrivateKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_())))) getModulus], [((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_())))) getPublicExponent], [((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_())))) getPrivateExponent], [((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_())))) getPrimeP], [((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_())))) getPrimeQ], [((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_())))) getPrimeExponentP], [((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_())))) getPrimeExponentQ], [((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_())))) getCrtCoefficient])));
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to produce encoding: ", [e getMessage]));
    }
  }
  return [super engineGetKeySpecWithJavaSecurityKey:key withIOSClass:spec];
}

- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  if ([JavaSecurityInterfacesRSAPublicKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPublicKey_initWithJavaSecurityInterfacesRSAPublicKey_((id<JavaSecurityInterfacesRSAPublicKey>) cast_check(key, JavaSecurityInterfacesRSAPublicKey_class_()));
  }
  else if ([JavaSecurityInterfacesRSAPrivateCrtKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecurityInterfacesRSAPrivateCrtKey_((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateCrtKey_class_()));
  }
  else if ([JavaSecurityInterfacesRSAPrivateKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateKey_initWithJavaSecurityInterfacesRSAPrivateKey_((id<JavaSecurityInterfacesRSAPrivateKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateKey_class_()));
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"key type unknown");
}

- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[JavaSecuritySpecPKCS8EncodedKeySpec class]]) {
    @try {
      return [self generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_([((JavaSecuritySpecPKCS8EncodedKeySpec *) nil_chk(((JavaSecuritySpecPKCS8EncodedKeySpec *) keySpec))) getEncoded])];
    }
    @catch (JavaLangException *e) {
      @try {
        return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_([((JavaSecuritySpecPKCS8EncodedKeySpec *) nil_chk(((JavaSecuritySpecPKCS8EncodedKeySpec *) keySpec))) getEncoded]));
      }
      @catch (JavaLangException *ex) {
        @throw new_LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to process key spec: ", [e description]), e);
      }
    }
  }
  else if ([keySpec isKindOfClass:[JavaSecuritySpecRSAPrivateCrtKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecuritySpecRSAPrivateCrtKeySpec_((JavaSecuritySpecRSAPrivateCrtKeySpec *) keySpec);
  }
  else if ([keySpec isKindOfClass:[JavaSecuritySpecRSAPrivateKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateKey_initWithJavaSecuritySpecRSAPrivateKeySpec_((JavaSecuritySpecRSAPrivateKeySpec *) keySpec);
  }
  else if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec class]]) {
    id<LibOrgBouncycastleCryptoCipherParameters> parameters = LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_parsePrivateKeyBlobWithByteArray_([((LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *) nil_chk(((LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *) keySpec))) getEncoded]);
    if ([parameters isKindOfClass:[LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]]) {
      return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_((LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) parameters);
    }
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"open SSH public key is not RSA private key");
  }
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$$", @"unknown KeySpec type: ", [[((id<JavaSecuritySpecKeySpec>) nil_chk(keySpec)) java_getClass] getName]));
}

- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[JavaSecuritySpecRSAPublicKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPublicKey_initWithJavaSecuritySpecRSAPublicKeySpec_((JavaSecuritySpecRSAPublicKeySpec *) keySpec);
  }
  else if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec class]]) {
    id<LibOrgBouncycastleCryptoCipherParameters> parameters = LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithByteArray_([((LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *) nil_chk(((LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *) keySpec))) getEncoded]);
    if ([parameters isKindOfClass:[LibOrgBouncycastleCryptoParamsRSAKeyParameters class]]) {
      return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPublicKey_initWithLibOrgBouncycastleCryptoParamsRSAKeyParameters_((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) parameters);
    }
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Open SSH public key is not RSA public key");
  }
  return [super engineGeneratePublicWithJavaSecuritySpecKeySpec:keySpec];
}

- (id<JavaSecurityPrivateKey>)generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) getPrivateKeyAlgorithm])) getAlgorithm];
  if (LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_isRsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(algOid)) {
    LibOrgBouncycastleAsn1PkcsRSAPrivateKey *rsaPrivKey = LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
    if ([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1PkcsRSAPrivateKey *) nil_chk(rsaPrivKey)) getCoefficient])) intValue] == 0) {
      return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(rsaPrivKey);
    }
    else {
      return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
    }
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

- (id<JavaSecurityPublicKey>)generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getAlgorithm];
  if (LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_isRsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(algOid)) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 3, 4, 5, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x4, 6, 7, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x4, 8, 7, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 12, 13, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGetKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[2].selector = @selector(engineTranslateKeyWithJavaSecurityKey:);
  methods[3].selector = @selector(engineGeneratePrivateWithJavaSecuritySpecKeySpec:);
  methods[4].selector = @selector(engineGeneratePublicWithJavaSecuritySpecKeySpec:);
  methods[5].selector = @selector(generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[6].selector = @selector(generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "engineGetKeySpec", "LJavaSecurityKey;LIOSClass;", "LJavaSecuritySpecInvalidKeySpecException;", "engineTranslateKey", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "engineGeneratePrivate", "LJavaSecuritySpecKeySpec;", "engineGeneratePublic", "generatePrivate", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "LJavaIoIOException;", "generatePublic", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi = { "JcajceRsaKeyFactorySpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseKeyFactorySpi_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaJcajceRsaKeyFactorySpi)
