//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/NafL2RMultiplier.java
//

#include "AbstractECMultiplier.h"
#include "ECCurve.h"
#include "ECPoint.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NafL2RMultiplier.h"
#include "WNafUtil.h"
#include "java/math/BigInteger.h"

@implementation LibOrgBouncycastleMathEcNafL2RMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcNafL2RMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleMathEcECPoint *)multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)k {
  IOSIntArray *naf = LibOrgBouncycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(k);
  LibOrgBouncycastleMathEcECPoint *addP = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) normalize];
  LibOrgBouncycastleMathEcECPoint *subP = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(addP)) negate];
  LibOrgBouncycastleMathEcECPoint *R = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([p getCurve])) getInfinity];
  jint i = ((IOSIntArray *) nil_chk(naf))->size_;
  while (--i >= 0) {
    jint ni = IOSIntArray_Get(naf, i);
    jint digit = JreRShift32(ni, 16);
    jint zeroes = ni & (jint) 0xFFFF;
    R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithLibOrgBouncycastleMathEcECPoint:digit < 0 ? subP : addP];
    R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  return R;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiplyPositive", "LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcNafL2RMultiplier = { "NafL2RMultiplier", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcNafL2RMultiplier;
}

@end

void LibOrgBouncycastleMathEcNafL2RMultiplier_init(LibOrgBouncycastleMathEcNafL2RMultiplier *self) {
  LibOrgBouncycastleMathEcAbstractECMultiplier_init(self);
}

LibOrgBouncycastleMathEcNafL2RMultiplier *new_LibOrgBouncycastleMathEcNafL2RMultiplier_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcNafL2RMultiplier, init)
}

LibOrgBouncycastleMathEcNafL2RMultiplier *create_LibOrgBouncycastleMathEcNafL2RMultiplier_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcNafL2RMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcNafL2RMultiplier)
