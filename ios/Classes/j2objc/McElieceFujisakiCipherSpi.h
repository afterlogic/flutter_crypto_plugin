//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceFujisakiCipherSpi.java
//

#ifndef McElieceFujisakiCipherSpi_H
#define McElieceFujisakiCipherSpi_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricHybridCipher.h"
#include "J2ObjC_header.h"
#include "PKCSObjectIdentifiers.h"
#include "X509ObjectIdentifiers.h"

@class IOSByteArray;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi : LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher < LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, LibOrgBouncycastleAsn1X509X509ObjectIdentifiers >

#pragma mark Public

- (IOSByteArray *)doFinalWithByteArray:(IOSByteArray *)input
                               withInt:(jint)inOff
                               withInt:(jint)inLen;

- (jint)getKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (NSString *)getName;

- (IOSByteArray *)updateWithByteArray:(IOSByteArray *)input
                              withInt:(jint)inOff
                              withInt:(jint)inLen;

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
   withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *)cipher;

- (jint)decryptOutputSizeWithInt:(jint)inLen;

- (jint)encryptOutputSizeWithInt:(jint)inLen;

- (void)initCipherDecryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
  withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params OBJC_METHOD_FAMILY_NONE;

- (void)initCipherEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
  withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *cipher);

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi *new_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_(id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi *create_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_(id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi)

@interface LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki : LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)arg0
   withLibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki_init(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki *new_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki *create_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceFujisakiCipherSpi_McElieceFujisaki)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // McElieceFujisakiCipherSpi_H
