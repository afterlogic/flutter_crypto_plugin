//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ServerNameList.java
//

#ifndef ServerNameList_H
#define ServerNameList_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;

@interface LibOrgBouncycastleCryptoTlsServerNameList : NSObject {
 @public
  JavaUtilVector *serverNameList_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaUtilVector:(JavaUtilVector *)serverNameList;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (JavaUtilVector *)getServerNameList;

+ (LibOrgBouncycastleCryptoTlsServerNameList *)parseWithJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsServerNameList)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsServerNameList, serverNameList_, JavaUtilVector *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsServerNameList_initWithJavaUtilVector_(LibOrgBouncycastleCryptoTlsServerNameList *self, JavaUtilVector *serverNameList);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsServerNameList *new_LibOrgBouncycastleCryptoTlsServerNameList_initWithJavaUtilVector_(JavaUtilVector *serverNameList) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsServerNameList *create_LibOrgBouncycastleCryptoTlsServerNameList_initWithJavaUtilVector_(JavaUtilVector *serverNameList);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsServerNameList *LibOrgBouncycastleCryptoTlsServerNameList_parseWithJavaIoInputStream_(JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsServerNameList)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ServerNameList_H
