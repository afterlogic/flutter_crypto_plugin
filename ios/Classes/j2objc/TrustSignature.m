//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/sig/TrustSignature.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SignatureSubpacket.h"
#include "SignatureSubpacketTags.h"
#include "TrustSignature.h"

@interface LibOrgBouncycastleBcpgSigTrustSignature ()

+ (IOSByteArray *)intToByteArrayWithInt:(jint)v1
                                withInt:(jint)v2;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleBcpgSigTrustSignature_intToByteArrayWithInt_withInt_(jint v1, jint v2);

@implementation LibOrgBouncycastleBcpgSigTrustSignature

+ (IOSByteArray *)intToByteArrayWithInt:(jint)v1
                                withInt:(jint)v2 {
  return LibOrgBouncycastleBcpgSigTrustSignature_intToByteArrayWithInt_withInt_(v1, v2);
}

- (instancetype)initWithBoolean:(jboolean)critical
                    withBoolean:(jboolean)isLongLength
                  withByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withBoolean_withByteArray_(self, critical, isLongLength, data);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)critical
                        withInt:(jint)depth
                        withInt:(jint)trustAmount {
  LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withInt_withInt_(self, critical, depth, trustAmount);
  return self;
}

- (jint)getDepth {
  return IOSByteArray_Get(nil_chk(data_), 0) & (jint) 0xff;
}

- (jint)getTrustAmount {
  return IOSByteArray_Get(nil_chk(data_), 1) & (jint) 0xff;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(intToByteArrayWithInt:withInt:);
  methods[1].selector = @selector(initWithBoolean:withBoolean:withByteArray:);
  methods[2].selector = @selector(initWithBoolean:withInt:withInt:);
  methods[3].selector = @selector(getDepth);
  methods[4].selector = @selector(getTrustAmount);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "intToByteArray", "II", "ZZ[B", "ZII" };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgSigTrustSignature = { "TrustSignature", "lib.org.bouncycastle.bcpg.sig", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgSigTrustSignature;
}

@end

IOSByteArray *LibOrgBouncycastleBcpgSigTrustSignature_intToByteArrayWithInt_withInt_(jint v1, jint v2) {
  LibOrgBouncycastleBcpgSigTrustSignature_initialize();
  IOSByteArray *data = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(data, 0) = (jbyte) v1;
  *IOSByteArray_GetRef(data, 1) = (jbyte) v2;
  return data;
}

void LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withBoolean_withByteArray_(LibOrgBouncycastleBcpgSigTrustSignature *self, jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, LibOrgBouncycastleBcpgSignatureSubpacketTags_TRUST_SIG, critical, isLongLength, data);
}

LibOrgBouncycastleBcpgSigTrustSignature *new_LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withBoolean_withByteArray_(jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSigTrustSignature, initWithBoolean_withBoolean_withByteArray_, critical, isLongLength, data)
}

LibOrgBouncycastleBcpgSigTrustSignature *create_LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withBoolean_withByteArray_(jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSigTrustSignature, initWithBoolean_withBoolean_withByteArray_, critical, isLongLength, data)
}

void LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withInt_withInt_(LibOrgBouncycastleBcpgSigTrustSignature *self, jboolean critical, jint depth, jint trustAmount) {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, LibOrgBouncycastleBcpgSignatureSubpacketTags_TRUST_SIG, critical, false, LibOrgBouncycastleBcpgSigTrustSignature_intToByteArrayWithInt_withInt_(depth, trustAmount));
}

LibOrgBouncycastleBcpgSigTrustSignature *new_LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withInt_withInt_(jboolean critical, jint depth, jint trustAmount) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSigTrustSignature, initWithBoolean_withInt_withInt_, critical, depth, trustAmount)
}

LibOrgBouncycastleBcpgSigTrustSignature *create_LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withInt_withInt_(jboolean critical, jint depth, jint trustAmount) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSigTrustSignature, initWithBoolean_withInt_withInt_, critical, depth, trustAmount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgSigTrustSignature)
