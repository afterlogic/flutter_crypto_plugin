//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcUtil.java
//

#include "ASN1ObjectIdentifier.h"
#include "BcUtil.h"
#include "BigIntegers.h"
#include "BlockCipher.h"
#include "BufferedBlockCipher.h"
#include "CFBBlockCipher.h"
#include "CryptoIoCipherInputStream.h"
#include "CustomNamedCurves.h"
#include "ECCurve.h"
#include "ECNamedCurveTable.h"
#include "ECPoint.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OpenPGPCFBBlockCipher.h"
#include "OpenPgpBcSHA1PGPDigestCalculator.h"
#include "PGPDataDecryptor.h"
#include "PGPDigestCalculator.h"
#include "ParametersWithIV.h"
#include "X9ECParameters.h"
#include "java/io/InputStream.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1 : NSObject < LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor > {
 @public
  LibOrgBouncycastleCryptoBufferedBlockCipher *val$c_;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)capture$0;

- (JavaIoInputStream *)getInputStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (jint)getBlockSize;

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)getIntegrityCalculator;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1 *self, LibOrgBouncycastleCryptoBufferedBlockCipher *capture$0);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1 *new_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoBufferedBlockCipher *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1 *create_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoBufferedBlockCipher *capture$0);

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorBcBcUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoBufferedBlockCipher *)createStreamCipherWithBoolean:(jboolean)forEncryption
                                       withLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                                   withBoolean:(jboolean)withIntegrityPacket
                                                                 withByteArray:(IOSByteArray *)key {
  return LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createStreamCipherWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withBoolean_withByteArray_(forEncryption, engine, withIntegrityPacket, key);
}

+ (id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor>)createDataDecryptorWithBoolean:(jboolean)withIntegrityPacket
                                                withLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                                          withByteArray:(IOSByteArray *)key {
  return LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createDataDecryptorWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withByteArray_(withIntegrityPacket, engine, key);
}

+ (LibOrgBouncycastleCryptoBufferedBlockCipher *)createSymmetricKeyWrapperWithBoolean:(jboolean)forEncryption
                                              withLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                                        withByteArray:(IOSByteArray *)key
                                                                        withByteArray:(IOSByteArray *)iv {
  return LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createSymmetricKeyWrapperWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withByteArray_withByteArray_(forEncryption, engine, key, iv);
}

+ (LibOrgBouncycastleAsn1X9X9ECParameters *)getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)curveOID {
  return LibOrgBouncycastleOpenpgpOperatorBcBcUtil_getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOID);
}

+ (LibOrgBouncycastleMathEcECPoint *)decodePointWithJavaMathBigInteger:(JavaMathBigInteger *)encodedPoint
                                   withLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve {
  return LibOrgBouncycastleOpenpgpOperatorBcBcUtil_decodePointWithJavaMathBigInteger_withLibOrgBouncycastleMathEcECCurve_(encodedPoint, curve);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoBufferedBlockCipher;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoBufferedBlockCipher;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X9X9ECParameters;", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createStreamCipherWithBoolean:withLibOrgBouncycastleCryptoBlockCipher:withBoolean:withByteArray:);
  methods[2].selector = @selector(createDataDecryptorWithBoolean:withLibOrgBouncycastleCryptoBlockCipher:withByteArray:);
  methods[3].selector = @selector(createSymmetricKeyWrapperWithBoolean:withLibOrgBouncycastleCryptoBlockCipher:withByteArray:withByteArray:);
  methods[4].selector = @selector(getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[5].selector = @selector(decodePointWithJavaMathBigInteger:withLibOrgBouncycastleMathEcECCurve:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createStreamCipher", "ZLLibOrgBouncycastleCryptoBlockCipher;Z[B", "createDataDecryptor", "ZLLibOrgBouncycastleCryptoBlockCipher;[B", "createSymmetricKeyWrapper", "ZLLibOrgBouncycastleCryptoBlockCipher;[B[B", "getX9Parameters", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "decodePoint", "LJavaMathBigInteger;LLibOrgBouncycastleMathEcECCurve;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcUtil = { "BcUtil", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, NULL, 7, 0x0, 6, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcUtil;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcUtil_init(LibOrgBouncycastleOpenpgpOperatorBcBcUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorBcBcUtil *new_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcUtil, init)
}

LibOrgBouncycastleOpenpgpOperatorBcBcUtil *create_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcUtil, init)
}

LibOrgBouncycastleCryptoBufferedBlockCipher *LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createStreamCipherWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withBoolean_withByteArray_(jboolean forEncryption, id<LibOrgBouncycastleCryptoBlockCipher> engine, jboolean withIntegrityPacket, IOSByteArray *key) {
  LibOrgBouncycastleOpenpgpOperatorBcBcUtil_initialize();
  LibOrgBouncycastleCryptoBufferedBlockCipher *c;
  if (withIntegrityPacket) {
    c = new_LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(engine, [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(engine)) getBlockSize] * 8));
  }
  else {
    c = new_LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesOpenPGPCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(engine));
  }
  LibOrgBouncycastleCryptoParamsKeyParameter *keyParameter = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(key);
  if (withIntegrityPacket) {
    [c init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(keyParameter, [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(engine)) getBlockSize]])];
  }
  else {
    [c init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:keyParameter];
  }
  return c;
}

id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor> LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createDataDecryptorWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withByteArray_(jboolean withIntegrityPacket, id<LibOrgBouncycastleCryptoBlockCipher> engine, IOSByteArray *key) {
  LibOrgBouncycastleOpenpgpOperatorBcBcUtil_initialize();
  LibOrgBouncycastleCryptoBufferedBlockCipher *c = LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createStreamCipherWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withBoolean_withByteArray_(false, engine, withIntegrityPacket, key);
  return new_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_(c);
}

LibOrgBouncycastleCryptoBufferedBlockCipher *LibOrgBouncycastleOpenpgpOperatorBcBcUtil_createSymmetricKeyWrapperWithBoolean_withLibOrgBouncycastleCryptoBlockCipher_withByteArray_withByteArray_(jboolean forEncryption, id<LibOrgBouncycastleCryptoBlockCipher> engine, IOSByteArray *key, IOSByteArray *iv) {
  LibOrgBouncycastleOpenpgpOperatorBcBcUtil_initialize();
  LibOrgBouncycastleCryptoBufferedBlockCipher *c = new_LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoModesCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(engine, [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(engine)) getBlockSize] * 8));
  [c init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(key), iv)];
  return c;
}

LibOrgBouncycastleAsn1X9X9ECParameters *LibOrgBouncycastleOpenpgpOperatorBcBcUtil_getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOID) {
  LibOrgBouncycastleOpenpgpOperatorBcBcUtil_initialize();
  LibOrgBouncycastleAsn1X9X9ECParameters *x9 = LibOrgBouncycastleCryptoEcCustomNamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOID);
  if (x9 == nil) {
    x9 = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOID);
  }
  return x9;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleOpenpgpOperatorBcBcUtil_decodePointWithJavaMathBigInteger_withLibOrgBouncycastleMathEcECCurve_(JavaMathBigInteger *encodedPoint, LibOrgBouncycastleMathEcECCurve *curve) {
  LibOrgBouncycastleOpenpgpOperatorBcBcUtil_initialize();
  return [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) decodePointWithByteArray:LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(encodedPoint)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcUtil)

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1

- (instancetype)initWithLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)capture$0 {
  LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_(self, capture$0);
  return self;
}

- (JavaIoInputStream *)getInputStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return new_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(inArg, val$c_);
}

- (jint)getBlockSize {
  return [((LibOrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(val$c_)) getBlockSize];
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)getIntegrityCalculator {
  return new_LibOrgBouncycastleOpenpgpOperatorBcOpenPgpBcSHA1PGPDigestCalculator_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBufferedBlockCipher:);
  methods[1].selector = @selector(getInputStreamWithJavaIoInputStream:);
  methods[2].selector = @selector(getBlockSize);
  methods[3].selector = @selector(getIntegrityCalculator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LLibOrgBouncycastleCryptoBufferedBlockCipher;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInputStream", "LJavaIoInputStream;", "LLibOrgBouncycastleOpenpgpOperatorBcBcUtil;", "createDataDecryptorWithBoolean:withLibOrgBouncycastleCryptoBlockCipher:withByteArray:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1 = { "", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x8018, 4, 1, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1 *self, LibOrgBouncycastleCryptoBufferedBlockCipher *capture$0) {
  self->val$c_ = capture$0;
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1 *new_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoBufferedBlockCipher *capture$0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1, initWithLibOrgBouncycastleCryptoBufferedBlockCipher_, capture$0)
}

LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1 *create_LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1_initWithLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoBufferedBlockCipher *capture$0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcUtil_1, initWithLibOrgBouncycastleCryptoBufferedBlockCipher_, capture$0)
}
