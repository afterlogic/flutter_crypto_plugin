//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/HashAlgorithm.java
//

#ifndef HashAlgorithm_H
#define HashAlgorithm_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsHashAlgorithm : NSObject
@property (readonly, class) jshort none NS_SWIFT_NAME(none);
@property (readonly, class) jshort md5 NS_SWIFT_NAME(md5);
@property (readonly, class) jshort sha1 NS_SWIFT_NAME(sha1);
@property (readonly, class) jshort sha224 NS_SWIFT_NAME(sha224);
@property (readonly, class) jshort sha256 NS_SWIFT_NAME(sha256);
@property (readonly, class) jshort sha384 NS_SWIFT_NAME(sha384);
@property (readonly, class) jshort sha512 NS_SWIFT_NAME(sha512);

+ (jshort)none;

+ (jshort)md5;

+ (jshort)sha1;

+ (jshort)sha224;

+ (jshort)sha256;

+ (jshort)sha384;

+ (jshort)sha512;

#pragma mark Public

- (instancetype __nonnull)init;

+ (NSString *)getNameWithShort:(jshort)hashAlgorithm;

+ (NSString *)getTextWithShort:(jshort)hashAlgorithm;

+ (jboolean)isPrivateWithShort:(jshort)hashAlgorithm;

+ (jboolean)isRecognizedWithShort:(jshort)hashAlgorithm;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsHashAlgorithm)

inline jshort LibOrgBouncycastleCryptoTlsHashAlgorithm_get_none(void);
#define LibOrgBouncycastleCryptoTlsHashAlgorithm_none 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHashAlgorithm, none, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHashAlgorithm_get_md5(void);
#define LibOrgBouncycastleCryptoTlsHashAlgorithm_md5 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHashAlgorithm, md5, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHashAlgorithm_get_sha1(void);
#define LibOrgBouncycastleCryptoTlsHashAlgorithm_sha1 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHashAlgorithm, sha1, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHashAlgorithm_get_sha224(void);
#define LibOrgBouncycastleCryptoTlsHashAlgorithm_sha224 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHashAlgorithm, sha224, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHashAlgorithm_get_sha256(void);
#define LibOrgBouncycastleCryptoTlsHashAlgorithm_sha256 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHashAlgorithm, sha256, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHashAlgorithm_get_sha384(void);
#define LibOrgBouncycastleCryptoTlsHashAlgorithm_sha384 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHashAlgorithm, sha384, jshort)

inline jshort LibOrgBouncycastleCryptoTlsHashAlgorithm_get_sha512(void);
#define LibOrgBouncycastleCryptoTlsHashAlgorithm_sha512 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsHashAlgorithm, sha512, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsHashAlgorithm_init(LibOrgBouncycastleCryptoTlsHashAlgorithm *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsHashAlgorithm *new_LibOrgBouncycastleCryptoTlsHashAlgorithm_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsHashAlgorithm *create_LibOrgBouncycastleCryptoTlsHashAlgorithm_init(void);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsHashAlgorithm_getNameWithShort_(jshort hashAlgorithm);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsHashAlgorithm_getTextWithShort_(jshort hashAlgorithm);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsHashAlgorithm_isPrivateWithShort_(jshort hashAlgorithm);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsHashAlgorithm_isRecognizedWithShort_(jshort hashAlgorithm);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsHashAlgorithm)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // HashAlgorithm_H
