//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/rainbow/util/RainbowUtil.java
//

#ifndef RainbowUtil_H
#define RainbowUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class IOSShortArray;

@interface LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (IOSShortArray *)convertArrayWithByteArray:(IOSByteArray *)inArg;

+ (IOSObjectArray *)convertArrayWithByteArray2:(IOSObjectArray *)inArg;

+ (IOSObjectArray *)convertArrayWithByteArray3:(IOSObjectArray *)inArg;

+ (IOSByteArray *)convertArrayWithShortArray:(IOSShortArray *)inArg;

+ (IOSObjectArray *)convertArrayWithShortArray2:(IOSObjectArray *)inArg;

+ (IOSObjectArray *)convertArrayWithShortArray3:(IOSObjectArray *)inArg;

+ (IOSIntArray *)convertArraytoIntWithByteArray:(IOSByteArray *)inArg;

+ (IOSByteArray *)convertIntArrayWithIntArray:(IOSIntArray *)inArg;

+ (jboolean)equalsWithShortArray:(IOSShortArray *)left
                  withShortArray:(IOSShortArray *)right;

+ (jboolean)equalsWithShortArray2:(IOSObjectArray *)left
                  withShortArray2:(IOSObjectArray *)right;

+ (jboolean)equalsWithShortArray3:(IOSObjectArray *)left
                  withShortArray3:(IOSObjectArray *)right;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_init(LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil *new_LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil *create_LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_init(void);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_convertArraytoIntWithByteArray_(IOSByteArray *inArg);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_convertArrayWithByteArray_(IOSByteArray *inArg);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_convertArrayWithByteArray2_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_convertArrayWithByteArray3_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_convertIntArrayWithIntArray_(IOSIntArray *inArg);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_convertArrayWithShortArray_(IOSShortArray *inArg);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_convertArrayWithShortArray2_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_convertArrayWithShortArray3_(IOSObjectArray *inArg);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_equalsWithShortArray_withShortArray_(IOSShortArray *left, IOSShortArray *right);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_equalsWithShortArray2_withShortArray2_(IOSObjectArray *left, IOSObjectArray *right);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil_equalsWithShortArray3_withShortArray3_(IOSObjectArray *left, IOSObjectArray *right);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoRainbowUtilRainbowUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // RainbowUtil_H
