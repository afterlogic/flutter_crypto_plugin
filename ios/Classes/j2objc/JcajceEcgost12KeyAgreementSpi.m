//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ecgost12/JcajceEcgost12KeyAgreementSpi.java
//

#include "AsymmetricKeyParameter.h"
#include "BCECGOST3410_2012PublicKey.h"
#include "BaseAgreementSpi.h"
#include "CipherParameters.h"
#include "DerivationFunction.h"
#include "ECDomainParameters.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKey.h"
#include "ECPublicKeyParameters.h"
#include "ECVKOAgreement.h"
#include "GOST3411_2012_256Digest.h"
#include "GOST3411_2012_512Digest.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceEcgost12KeyAgreementSpi.h"
#include "JcajceUtilECUtil.h"
#include "JceECPrivateKey.h"
#include "ParametersWithUKM.h"
#include "UserKeyingMaterialSpec.h"
#include "X9IntegerConverter.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi () {
 @public
  NSString *kaAlgorithm_JcajceEcgost12KeyAgreementSpi_;
  LibOrgBouncycastleCryptoParamsECDomainParameters *parameters_;
  LibOrgBouncycastleCryptoAgreementECVKOAgreement *agreement_;
  IOSByteArray *result_;
}

- (void)initFromKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)parameterSpec OBJC_METHOD_FAMILY_NONE;

+ (NSString *)getSimpleNameWithIOSClass:(IOSClass *)clazz;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi, kaAlgorithm_JcajceEcgost12KeyAgreementSpi_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi, parameters_, LibOrgBouncycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi, agreement_, LibOrgBouncycastleCryptoAgreementECVKOAgreement *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi, result_, IOSByteArray *)

inline LibOrgBouncycastleAsn1X9X9IntegerConverter *LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_get_converter(void);
static LibOrgBouncycastleAsn1X9X9IntegerConverter *LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_converter;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi, converter, LibOrgBouncycastleAsn1X9X9IntegerConverter *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi *self, id<JavaSecurityKey> key, id<JavaSecuritySpecAlgorithmParameterSpec> parameterSpec);

__attribute__((unused)) static NSString *LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_getSimpleNameWithIOSClass_(IOSClass *clazz);

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1 : JavaSecurityInvalidKeyException {
 @public
  JavaLangException *val$e_;
}

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0
                             withNSString:(NSString *)x0;

- (JavaLangThrowable *)getCause;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1_initWithJavaLangException_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1 *self, JavaLangException *capture$0, NSString *x0);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi

- (instancetype)initWithNSString:(NSString *)kaAlgorithm
withLibOrgBouncycastleCryptoAgreementECVKOAgreement:(LibOrgBouncycastleCryptoAgreementECVKOAgreement *)agreement
withLibOrgBouncycastleCryptoDerivationFunction:(id<LibOrgBouncycastleCryptoDerivationFunction>)kdf {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECVKOAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, kaAlgorithm, agreement, kdf);
  return self;
}

- (id<JavaSecurityKey>)engineDoPhaseWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                            withBoolean:(jboolean)lastPhase {
  if (parameters_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", kaAlgorithm_JcajceEcgost12KeyAgreementSpi_, @" not initialised."));
  }
  if (!lastPhase) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", kaAlgorithm_JcajceEcgost12KeyAgreementSpi_, @" can only be between two parties."));
  }
  id<LibOrgBouncycastleCryptoCipherParameters> pubKey;
  {
    if (!([JavaSecurityPublicKey_class_() isInstance:key])) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$$", kaAlgorithm_JcajceEcgost12KeyAgreementSpi_, @" key agreement requires ", LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_getSimpleNameWithIOSClass_(LibOrgBouncycastleJceInterfacesECPublicKey_class_()), @" for doPhase"));
    }
    pubKey = LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_()));
  }
  @try {
    result_ = [((LibOrgBouncycastleCryptoAgreementECVKOAgreement *) nil_chk(agreement_)) calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:pubKey];
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1_initWithJavaLangException_withNSString_(e, JreStrcat("$$", @"calculation failed: ", [e getMessage]));
  }
  return nil;
}

- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (params != nil && !([params isKindOfClass:[LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"No algorithm parameters supported");
  }
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(self, key, params);
}

- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(self, key, nil);
}

- (void)initFromKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)parameterSpec {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(self, key, parameterSpec);
}

+ (NSString *)getSimpleNameWithIOSClass:(IOSClass *)clazz {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_getSimpleNameWithIOSClass_(clazz);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

- (IOSByteArray *)calcSecret {
  return result_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x8, 13, 14, 8, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoAgreementECVKOAgreement:withLibOrgBouncycastleCryptoDerivationFunction:);
  methods[1].selector = @selector(engineDoPhaseWithJavaSecurityKey:withBoolean:);
  methods[2].selector = @selector(engineInitWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(engineInitWithJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(initFromKeyWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[5].selector = @selector(getSimpleNameWithIOSClass:);
  methods[6].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[7].selector = @selector(calcSecret);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "converter", "LLibOrgBouncycastleAsn1X9X9IntegerConverter;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "kaAlgorithm_JcajceEcgost12KeyAgreementSpi_", "LNSString;", .constantValue.asLong = 0, 0x2, 16, -1, -1, -1 },
    { "parameters_", "LLibOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "agreement_", "LLibOrgBouncycastleCryptoAgreementECVKOAgreement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "result_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LLibOrgBouncycastleCryptoAgreementECVKOAgreement;LLibOrgBouncycastleCryptoDerivationFunction;", "engineDoPhase", "LJavaSecurityKey;Z", "LJavaSecurityInvalidKeyException;LJavaLangIllegalStateException;", "engineInit", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "LJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "initFromKey", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;", "getSimpleName", "LIOSClass;", "generatePublicKeyParameter", "LJavaSecurityPublicKey;", &LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_converter, "kaAlgorithm", "LLibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256;LLibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi = { "JcajceEcgost12KeyAgreementSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.ecgost12", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, 17, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi class]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_converter = new_LibOrgBouncycastleAsn1X9X9IntegerConverter_init();
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi)
  }
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECVKOAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi *self, NSString *kaAlgorithm, LibOrgBouncycastleCryptoAgreementECVKOAgreement *agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoDerivationFunction_(self, kaAlgorithm, kdf);
  self->kaAlgorithm_JcajceEcgost12KeyAgreementSpi_ = kaAlgorithm;
  self->agreement_ = agreement;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECVKOAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(NSString *kaAlgorithm, LibOrgBouncycastleCryptoAgreementECVKOAgreement *agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi, initWithNSString_withLibOrgBouncycastleCryptoAgreementECVKOAgreement_withLibOrgBouncycastleCryptoDerivationFunction_, kaAlgorithm, agreement, kdf)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECVKOAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(NSString *kaAlgorithm, LibOrgBouncycastleCryptoAgreementECVKOAgreement *agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi, initWithNSString_withLibOrgBouncycastleCryptoAgreementECVKOAgreement_withLibOrgBouncycastleCryptoDerivationFunction_, kaAlgorithm, agreement, kdf)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi *self, id<JavaSecurityKey> key, id<JavaSecuritySpecAlgorithmParameterSpec> parameterSpec) {
  {
    if (!([JavaSecurityPrivateKey_class_() isInstance:key])) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$$", self->kaAlgorithm_JcajceEcgost12KeyAgreementSpi_, @" key agreement requires ", LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_getSimpleNameWithIOSClass_(LibOrgBouncycastleJceInterfacesJceECPrivateKey_class_()), @" for initialisation"));
    }
    LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *privKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_())), [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    self->parameters_ = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(privKey)) getParameters];
    self->ukmParameters_ = ([parameterSpec isKindOfClass:[LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec class]]) ? [((LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec *) nil_chk(((LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec *) cast_chk(parameterSpec, [LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec class])))) getUserKeyingMaterial] : nil;
    [((LibOrgBouncycastleCryptoAgreementECVKOAgreement *) nil_chk(self->agreement_)) init__WithLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithUKM_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(privKey, self->ukmParameters_)];
  }
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_getSimpleNameWithIOSClass_(IOSClass *clazz) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initialize();
  NSString *fullName = [((IOSClass *) nil_chk(clazz)) getName];
  return [((NSString *) nil_chk(fullName)) java_substring:[fullName java_lastIndexOf:'.'] + 1];
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initialize();
  return ([key isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricEcgost12BCECGOST3410_2012PublicKey class]]) ? [((LibOrgBouncycastleJcajceProviderAsymmetricEcgost12BCECGOST3410_2012PublicKey *) nil_chk(((LibOrgBouncycastleJcajceProviderAsymmetricEcgost12BCECGOST3410_2012PublicKey *) cast_chk(key, [LibOrgBouncycastleJcajceProviderAsymmetricEcgost12BCECGOST3410_2012PublicKey class])))) engineGetKeyParameters] : LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0
                             withNSString:(NSString *)x0 {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1_initWithJavaLangException_withNSString_(self, capture$0, x0);
  return self;
}

- (JavaLangThrowable *)getCause {
  return val$e_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangException:withNSString:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LJavaLangException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LLibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi;", "engineDoPhaseWithJavaSecurityKey:withBoolean:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1 = { "", "lib.org.bouncycastle.jcajce.provider.asymmetric.ecgost12", ptrTable, methods, fields, 7, 0x8010, 2, 1, 1, -1, 2, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1_initWithJavaLangException_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1 *self, JavaLangException *capture$0, NSString *x0) {
  self->val$e_ = capture$0;
  JavaSecurityInvalidKeyException_initWithNSString_(self, x0);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1, initWithJavaLangException_withNSString_, capture$0, x0)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_1, initWithJavaLangException_withNSString_, capture$0, x0)
}

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256 = { "ECVKO256", "lib.org.bouncycastle.jcajce.provider.asymmetric.ecgost12", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256_init(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECVKOAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECGOST3410-2012-256", new_LibOrgBouncycastleCryptoAgreementECVKOAgreement_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsGOST3411_2012_256Digest_init()), nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO256)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512 = { "ECVKO512", "lib.org.bouncycastle.jcajce.provider.asymmetric.ecgost12", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512_init(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECVKOAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECGOST3410-2012-512", new_LibOrgBouncycastleCryptoAgreementECVKOAgreement_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsGOST3411_2012_512Digest_init()), nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcgost12JcajceEcgost12KeyAgreementSpi_ECVKO512)
