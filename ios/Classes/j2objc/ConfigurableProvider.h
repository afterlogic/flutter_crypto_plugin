//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/config/ConfigurableProvider.java
//

#ifndef ConfigurableProvider_H
#define ConfigurableProvider_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@protocol JavaUtilMap;
@protocol LibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter;

@protocol LibOrgBouncycastleJcajceProviderConfigConfigurableProvider < JavaObject >

- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter;

- (void)addAlgorithmWithNSString:(NSString *)key
                    withNSString:(NSString *)value;

- (void)addAlgorithmWithNSString:(NSString *)type
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                    withNSString:(NSString *)className_;

- (jboolean)hasAlgorithmWithNSString:(NSString *)type
                        withNSString:(NSString *)name;

- (void)addKeyInfoConverterWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
       withLibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter:(id<LibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter>)keyInfoConverter;

- (void)addAttributesWithNSString:(NSString *)key
                  withJavaUtilMap:(id<JavaUtilMap>)attributeMap;

@end

@interface LibOrgBouncycastleJcajceProviderConfigConfigurableProvider : NSObject
@property (readonly, copy, class) NSString *THREAD_LOCAL_EC_IMPLICITLY_CA NS_SWIFT_NAME(THREAD_LOCAL_EC_IMPLICITLY_CA);
@property (readonly, copy, class) NSString *EC_IMPLICITLY_CA NS_SWIFT_NAME(EC_IMPLICITLY_CA);
@property (readonly, copy, class) NSString *THREAD_LOCAL_DH_DEFAULT_PARAMS NS_SWIFT_NAME(THREAD_LOCAL_DH_DEFAULT_PARAMS);
@property (readonly, copy, class) NSString *DH_DEFAULT_PARAMS NS_SWIFT_NAME(DH_DEFAULT_PARAMS);
@property (readonly, copy, class) NSString *ACCEPTABLE_EC_CURVES NS_SWIFT_NAME(ACCEPTABLE_EC_CURVES);
@property (readonly, copy, class) NSString *ADDITIONAL_EC_PARAMETERS NS_SWIFT_NAME(ADDITIONAL_EC_PARAMETERS);

+ (NSString *)THREAD_LOCAL_EC_IMPLICITLY_CA;

+ (NSString *)EC_IMPLICITLY_CA;

+ (NSString *)THREAD_LOCAL_DH_DEFAULT_PARAMS;

+ (NSString *)DH_DEFAULT_PARAMS;

+ (NSString *)ACCEPTABLE_EC_CURVES;

+ (NSString *)ADDITIONAL_EC_PARAMETERS;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderConfigConfigurableProvider)

inline NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_get_THREAD_LOCAL_EC_IMPLICITLY_CA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_EC_IMPLICITLY_CA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderConfigConfigurableProvider, THREAD_LOCAL_EC_IMPLICITLY_CA, NSString *)

inline NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_get_EC_IMPLICITLY_CA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_EC_IMPLICITLY_CA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderConfigConfigurableProvider, EC_IMPLICITLY_CA, NSString *)

inline NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_get_THREAD_LOCAL_DH_DEFAULT_PARAMS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_DH_DEFAULT_PARAMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderConfigConfigurableProvider, THREAD_LOCAL_DH_DEFAULT_PARAMS, NSString *)

inline NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_get_DH_DEFAULT_PARAMS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_DH_DEFAULT_PARAMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderConfigConfigurableProvider, DH_DEFAULT_PARAMS, NSString *)

inline NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_get_ACCEPTABLE_EC_CURVES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_ACCEPTABLE_EC_CURVES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderConfigConfigurableProvider, ACCEPTABLE_EC_CURVES, NSString *)

inline NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_get_ADDITIONAL_EC_PARAMETERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderConfigConfigurableProvider_ADDITIONAL_EC_PARAMETERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderConfigConfigurableProvider, ADDITIONAL_EC_PARAMETERS, NSString *)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderConfigConfigurableProvider)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ConfigurableProvider_H
