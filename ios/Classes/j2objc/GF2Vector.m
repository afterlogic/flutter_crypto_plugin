//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/linearalgebra/GF2Vector.java
//

#include "Arrays.h"
#include "GF2Vector.h"
#include "GF2mField.h"
#include "GF2mVector.h"
#include "IOSPrimitiveArray.h"
#include "IntUtils.h"
#include "J2ObjC_source.h"
#include "LittleEndianConversions.h"
#include "Permutation.h"
#include "RandUtils.h"
#include "Vector.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcMathLinearalgebraGF2Vector () {
 @public
  IOSIntArray *v_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, v_, IOSIntArray *)

@implementation LibOrgBouncycastlePqcMathLinearalgebraGF2Vector

- (instancetype)initWithInt:(jint)length {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(self, length);
  return self;
}

- (instancetype)initWithInt:(jint)length
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(self, length, sr);
  return self;
}

- (instancetype)initWithInt:(jint)length
                    withInt:(jint)t
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(self, length, t, sr);
  return self;
}

- (instancetype)initWithInt:(jint)length
               withIntArray:(IOSIntArray *)v {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(self, length, v);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector:(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)other {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(self, other);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)v
                         withInt:(jint)length {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(self, v, length);
  return self;
}

+ (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)OS2VPWithInt:(jint)length
                                                    withByteArray:(IOSByteArray *)encVec {
  return LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(length, encVec);
}

- (IOSByteArray *)getEncoded {
  jint byteLen = JreRShift32((length_ + 7), 3);
  return LibOrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_toByteArrayWithIntArray_withInt_(v_, byteLen);
}

- (IOSIntArray *)getVecArray {
  return v_;
}

- (jint)getHammingWeight {
  jint weight = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(v_))->size_; i++) {
    jint e = IOSIntArray_Get(v_, i);
    for (jint j = 0; j < 32; j++) {
      jint b = e & 1;
      if (b != 0) {
        weight++;
      }
      JreURShiftAssignInt(&e, 1);
    }
  }
  return weight;
}

- (jboolean)isZero {
  for (jint i = ((IOSIntArray *) nil_chk(v_))->size_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(v_, i) != 0) {
      return false;
    }
  }
  return true;
}

- (jint)getBitWithInt:(jint)index {
  if (index >= length_) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  jint q = JreRShift32(index, 5);
  jint r = index & (jint) 0x1f;
  return JreURShift32((IOSIntArray_Get(nil_chk(v_), q) & (JreLShift32(1, r))), r);
}

- (void)setBitWithInt:(jint)index {
  if (index >= length_) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  *IOSIntArray_GetRef(nil_chk(v_), JreRShift32(index, 5)) |= JreLShift32(1, (index & (jint) 0x1f));
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)addWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)other {
  if (!([other isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]])) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"vector is not defined over GF(2)");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *otherVec = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk(other, [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  if (length_ != ((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(otherVec))->length_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  IOSIntArray *vec = LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk(other, [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]))))->v_);
  for (jint i = ((IOSIntArray *) nil_chk(vec))->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(vec, i) ^= IOSIntArray_Get(nil_chk(v_), i);
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(length_, vec);
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:(LibOrgBouncycastlePqcMathLinearalgebraPermutation *)p {
  IOSIntArray *pVec = [((LibOrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p)) getVector];
  if (length_ != ((IOSIntArray *) nil_chk(pVec))->size_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(length_);
  for (jint i = 0; i < pVec->size_; i++) {
    jint e = IOSIntArray_Get(nil_chk(v_), JreRShift32(IOSIntArray_Get(pVec, i), 5)) & (JreLShift32(1, (IOSIntArray_Get(pVec, i) & (jint) 0x1f)));
    if (e != 0) {
      *IOSIntArray_GetRef(result->v_, JreRShift32(i, 5)) |= JreLShift32(1, (i & (jint) 0x1f));
    }
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)extractVectorWithIntArray:(IOSIntArray *)setJ {
  jint k = ((IOSIntArray *) nil_chk(setJ))->size_;
  if (IOSIntArray_Get(setJ, k - 1) > length_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"invalid index set");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(k);
  for (jint i = 0; i < k; i++) {
    jint e = IOSIntArray_Get(nil_chk(v_), JreRShift32(IOSIntArray_Get(setJ, i), 5)) & (JreLShift32(1, (IOSIntArray_Get(setJ, i) & (jint) 0x1f)));
    if (e != 0) {
      *IOSIntArray_GetRef(result->v_, JreRShift32(i, 5)) |= JreLShift32(1, (i & (jint) 0x1f));
    }
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)extractLeftVectorWithInt:(jint)k {
  if (k > length_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"invalid length");
  }
  if (k == length_) {
    return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(self);
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(k);
  jint q = JreRShift32(k, 5);
  jint r = k & (jint) 0x1f;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v_, 0, result->v_, 0, q);
  if (r != 0) {
    *IOSIntArray_GetRef(nil_chk(result->v_), q) = IOSIntArray_Get(v_, q) & ((JreLShift32(1, r)) - 1);
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)extractRightVectorWithInt:(jint)k {
  if (k > length_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"invalid length");
  }
  if (k == length_) {
    return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(self);
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(k);
  jint q = JreRShift32((length_ - k), 5);
  jint r = (length_ - k) & (jint) 0x1f;
  jint length = JreRShift32((k + 31), 5);
  jint ind = q;
  if (r != 0) {
    for (jint i = 0; i < length - 1; i++) {
      jint unseq$1 = ind++;
      *IOSIntArray_GetRef(nil_chk(result->v_), i) = (JreURShift32(IOSIntArray_Get(v_, unseq$1), r)) | (JreLShift32(IOSIntArray_Get(v_, ind), (32 - r)));
    }
    *IOSIntArray_GetRef(nil_chk(result->v_), length - 1) = JreURShift32(IOSIntArray_Get(v_, ind++), r);
    if (ind < v_->size_) {
      *IOSIntArray_GetRef(result->v_, length - 1) |= JreLShift32(IOSIntArray_Get(v_, ind), (32 - r));
    }
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v_, q, result->v_, 0, length);
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *)toExtensionFieldVectorWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field {
  jint m = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field)) getDegree];
  if ((length_ % m) != 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"conversion is impossible");
  }
  jint t = length_ / m;
  IOSIntArray *result = [IOSIntArray newArrayWithLength:t];
  jint count = 0;
  for (jint i = t - 1; i >= 0; i--) {
    for (jint j = [field getDegree] - 1; j >= 0; j--) {
      jint q = JreURShift32(count, 5);
      jint r = count & (jint) 0x1f;
      jint e = (JreURShift32(IOSIntArray_Get(nil_chk(v_), q), r)) & 1;
      if (e == 1) {
        *IOSIntArray_GetRef(result, i) ^= JreLShift32(1, j);
      }
      count++;
    }
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field, result);
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]])) {
    return false;
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *otherVec = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk(other, [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  return (length_ == ((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(otherVec))->length_) && LibOrgBouncycastlePqcMathLinearalgebraIntUtils_equalsWithIntArray_withIntArray_(v_, otherVec->v_);
}

- (NSUInteger)hash {
  jint hash_ = length_;
  hash_ = hash_ * 31 + LibOrgBouncycastleUtilArrays_hashCodeWithIntArray_(v_);
  return hash_;
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < length_; i++) {
    if ((i != 0) && ((i & (jint) 0x1f) == 0)) {
      (void) [buf appendWithChar:' '];
    }
    jint q = JreRShift32(i, 5);
    jint r = i & (jint) 0x1f;
    jint bit = IOSIntArray_Get(nil_chk(v_), q) & (JreLShift32(1, r));
    if (bit == 0) {
      (void) [buf appendWithChar:'0'];
    }
    else {
      (void) [buf appendWithChar:'1'];
    }
  }
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Vector;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Vector;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Vector;", 0x1, 16, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Vector;", 0x1, 17, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2mVector;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initWithInt:withInt:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(initWithInt:withIntArray:);
  methods[4].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector:);
  methods[5].selector = @selector(initWithIntArray:withInt:);
  methods[6].selector = @selector(OS2VPWithInt:withByteArray:);
  methods[7].selector = @selector(getEncoded);
  methods[8].selector = @selector(getVecArray);
  methods[9].selector = @selector(getHammingWeight);
  methods[10].selector = @selector(isZero);
  methods[11].selector = @selector(getBitWithInt:);
  methods[12].selector = @selector(setBitWithInt:);
  methods[13].selector = @selector(addWithLibOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[14].selector = @selector(multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:);
  methods[15].selector = @selector(extractVectorWithIntArray:);
  methods[16].selector = @selector(extractLeftVectorWithInt:);
  methods[17].selector = @selector(extractRightVectorWithInt:);
  methods[18].selector = @selector(toExtensionFieldVectorWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(hash);
  methods[21].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "v_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "ILJavaSecuritySecureRandom;", "IILJavaSecuritySecureRandom;", "I[I", "LLibOrgBouncycastlePqcMathLinearalgebraGF2Vector;", "[II", "OS2VP", "I[B", "getBit", "setBit", "add", "LLibOrgBouncycastlePqcMathLinearalgebraVector;", "multiply", "LLibOrgBouncycastlePqcMathLinearalgebraPermutation;", "extractVector", "[I", "extractLeftVector", "extractRightVector", "toExtensionFieldVector", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcMathLinearalgebraGF2Vector = { "GF2Vector", "lib.org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 22, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector;
}

@end

void LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *self, jint length) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  if (length < 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Negative length.");
  }
  self->length_ = length;
  self->v_ = [IOSIntArray newArrayWithLength:JreRShift32((length + 31), 5)];
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(jint length) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithInt_, length)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(jint length) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithInt_, length)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *self, jint length, JavaSecuritySecureRandom *sr) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  self->length_ = length;
  jint size = JreRShift32((length + 31), 5);
  self->v_ = [IOSIntArray newArrayWithLength:size];
  for (jint i = size - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(nil_chk(self->v_), i) = [((JavaSecuritySecureRandom *) nil_chk(sr)) nextInt];
  }
  jint r = length & (jint) 0x1f;
  if (r != 0) {
    *IOSIntArray_GetRef(nil_chk(self->v_), size - 1) &= (JreLShift32(1, r)) - 1;
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(jint length, JavaSecuritySecureRandom *sr) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithInt_withJavaSecuritySecureRandom_, length, sr)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(jint length, JavaSecuritySecureRandom *sr) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithInt_withJavaSecuritySecureRandom_, length, sr)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *self, jint length, jint t, JavaSecuritySecureRandom *sr) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  if (t > length) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"The hamming weight is greater than the length of vector.");
  }
  self->length_ = length;
  jint size = JreRShift32((length + 31), 5);
  self->v_ = [IOSIntArray newArrayWithLength:size];
  IOSIntArray *help = [IOSIntArray newArrayWithLength:length];
  for (jint i = 0; i < length; i++) {
    *IOSIntArray_GetRef(help, i) = i;
  }
  jint m = length;
  for (jint i = 0; i < t; i++) {
    jint j = LibOrgBouncycastlePqcMathLinearalgebraRandUtils_nextIntWithJavaSecuritySecureRandom_withInt_(sr, m);
    [self setBitWithInt:IOSIntArray_Get(help, j)];
    m--;
    *IOSIntArray_GetRef(help, j) = IOSIntArray_Get(help, m);
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(jint length, jint t, JavaSecuritySecureRandom *sr) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithInt_withInt_withJavaSecuritySecureRandom_, length, t, sr)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(jint length, jint t, JavaSecuritySecureRandom *sr) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithInt_withInt_withJavaSecuritySecureRandom_, length, t, sr)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *self, jint length, IOSIntArray *v) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  if (length < 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"negative length");
  }
  self->length_ = length;
  jint size = JreRShift32((length + 31), 5);
  if (((IOSIntArray *) nil_chk(v))->size_ != size) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  self->v_ = LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(v);
  jint r = length & (jint) 0x1f;
  if (r != 0) {
    *IOSIntArray_GetRef(nil_chk(self->v_), size - 1) &= (JreLShift32(1, r)) - 1;
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(jint length, IOSIntArray *v) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithInt_withIntArray_, length, v)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(jint length, IOSIntArray *v) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithInt_withIntArray_, length, v)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *self, LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *other) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  self->length_ = ((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(other))->length_;
  self->v_ = LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(other->v_);
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *other) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_, other)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *other) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_, other)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *self, IOSIntArray *v, jint length) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  self->v_ = v;
  self->length_ = length;
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(IOSIntArray *v, jint length) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithIntArray_withInt_, v, length)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(IOSIntArray *v, jint length) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector, initWithIntArray_withInt_, v, length)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(jint length, IOSByteArray *encVec) {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initialize();
  if (length < 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"negative length");
  }
  jint byteLen = JreRShift32((length + 7), 3);
  if (((IOSByteArray *) nil_chk(encVec))->size_ > byteLen) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(length, LibOrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_toIntArrayWithByteArray_(encVec));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector)
