//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/linearalgebra/GF2mVector.java
//

#include "Arrays.h"
#include "GF2mField.h"
#include "GF2mVector.h"
#include "IOSPrimitiveArray.h"
#include "IntUtils.h"
#include "J2ObjC_source.h"
#include "Permutation.h"
#include "Vector.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"

@interface LibOrgBouncycastlePqcMathLinearalgebraGF2mVector () {
 @public
  LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field_;
  IOSIntArray *vector_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector, field_, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector, vector_, IOSIntArray *)

@implementation LibOrgBouncycastlePqcMathLinearalgebraGF2mVector

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                          withByteArray:(IOSByteArray *)v {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(self, field, v);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                           withIntArray:(IOSIntArray *)vector {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(self, field, vector);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector:(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *)other {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_(self, other);
  return self;
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)getField {
  return field_;
}

- (IOSIntArray *)getIntArrayForm {
  return LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(vector_);
}

- (IOSByteArray *)getEncoded {
  jint d = 8;
  jint count = 1;
  while ([((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) getDegree] > d) {
    count++;
    d += 8;
  }
  IOSByteArray *res = [IOSByteArray newArrayWithLength:((IOSIntArray *) nil_chk(vector_))->size_ * count];
  count = 0;
  for (jint i = 0; i < vector_->size_; i++) {
    for (jint j = 0; j < d; j += 8) {
      *IOSByteArray_GetRef(res, count++) = (jbyte) (JreURShift32(IOSIntArray_Get(vector_, i), j));
    }
  }
  return res;
}

- (jboolean)isZero {
  for (jint i = ((IOSIntArray *) nil_chk(vector_))->size_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(vector_, i) != 0) {
      return false;
    }
  }
  return true;
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)addWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)addend {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"not implemented");
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:(LibOrgBouncycastlePqcMathLinearalgebraPermutation *)p {
  IOSIntArray *pVec = [((LibOrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p)) getVector];
  if (length_ != ((IOSIntArray *) nil_chk(pVec))->size_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"permutation size and vector size mismatch");
  }
  IOSIntArray *result = [IOSIntArray newArrayWithLength:length_];
  for (jint i = 0; i < pVec->size_; i++) {
    *IOSIntArray_GetRef(result, i) = IOSIntArray_Get(nil_chk(vector_), IOSIntArray_Get(pVec, i));
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, result);
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2mVector class]])) {
    return false;
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *otherVec = (LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *) cast_chk(other, [LibOrgBouncycastlePqcMathLinearalgebraGF2mVector class]);
  if (![((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) isEqual:((LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *) nil_chk(otherVec))->field_]) {
    return false;
  }
  return LibOrgBouncycastlePqcMathLinearalgebraIntUtils_equalsWithIntArray_withIntArray_(vector_, otherVec->vector_);
}

- (NSUInteger)hash {
  jint hash_ = ((jint) [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) hash]);
  hash_ = hash_ * 31 + LibOrgBouncycastleUtilArrays_hashCodeWithIntArray_(vector_);
  return hash_;
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(vector_))->size_; i++) {
    for (jint j = 0; j < [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) getDegree]; j++) {
      jint r = j & (jint) 0x1f;
      jint bitMask = JreLShift32(1, r);
      jint coeff = IOSIntArray_Get(nil_chk(vector_), i) & bitMask;
      if (coeff != 0) {
        (void) [buf appendWithChar:'1'];
      }
      else {
        (void) [buf appendWithChar:'0'];
      }
    }
    (void) [buf appendWithChar:' '];
  }
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:withByteArray:);
  methods[1].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:withIntArray:);
  methods[2].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector:);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(getIntArrayForm);
  methods[5].selector = @selector(getEncoded);
  methods[6].selector = @selector(isZero);
  methods[7].selector = @selector(addWithLibOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[8].selector = @selector(multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "vector_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;[B", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;[I", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mVector;", "add", "LLibOrgBouncycastlePqcMathLinearalgebraVector;", "multiply", "LLibOrgBouncycastlePqcMathLinearalgebraPermutation;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcMathLinearalgebraGF2mVector = { "GF2mVector", "lib.org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector;
}

@end

void LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *v) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  self->field_ = new_LibOrgBouncycastlePqcMathLinearalgebraGF2mField_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_(field);
  jint d = 8;
  jint count = 1;
  while ([((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field)) getDegree] > d) {
    count++;
    d += 8;
  }
  if ((((IOSByteArray *) nil_chk(v))->size_ % count) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Byte array is not an encoded vector over the given finite field.");
  }
  self->length_ = v->size_ / count;
  self->vector_ = [IOSIntArray newArrayWithLength:self->length_];
  count = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->vector_))->size_; i++) {
    for (jint j = 0; j < d; j += 8) {
      *IOSIntArray_GetRef(self->vector_, i) |= JreLShift32((IOSByteArray_Get(v, count++) & (jint) 0xff), j);
    }
    if (![field isElementOfThisFieldWithInt:IOSIntArray_Get(self->vector_, i)]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Byte array is not an encoded vector over the given finite field.");
    }
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *v) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_, field, v)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *v) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_, field, v)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSIntArray *vector) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  self->field_ = field;
  self->length_ = ((IOSIntArray *) nil_chk(vector))->size_;
  for (jint i = vector->size_ - 1; i >= 0; i--) {
    if (![((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field)) isElementOfThisFieldWithInt:IOSIntArray_Get(vector, i)]) {
      @throw new_JavaLangArithmeticException_initWithNSString_(@"Element array is not specified over the given finite field.");
    }
  }
  self->vector_ = LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(vector);
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSIntArray *vector) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_, field, vector)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSIntArray *vector) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_, field, vector)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *other) {
  LibOrgBouncycastlePqcMathLinearalgebraVector_init(self);
  self->field_ = new_LibOrgBouncycastlePqcMathLinearalgebraGF2mField_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_(((LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *) nil_chk(other))->field_);
  self->length_ = other->length_;
  self->vector_ = LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(other->vector_);
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *new_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *other) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_, other)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *create_LibOrgBouncycastlePqcMathLinearalgebraGF2mVector_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *other) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector)
