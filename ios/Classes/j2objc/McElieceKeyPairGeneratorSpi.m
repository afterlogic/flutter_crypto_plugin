//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceKeyPairGeneratorSpi.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BCMcEliecePrivateKey.h"
#include "BCMcEliecePublicKey.h"
#include "J2ObjC_source.h"
#include "McElieceKeyGenParameterSpec.h"
#include "McElieceKeyGenerationParameters.h"
#include "McElieceKeyPairGenerator.h"
#include "McElieceKeyPairGeneratorSpi.h"
#include "McElieceParameters.h"
#include "McEliecePrivateKeyParameters.h"
#include "McEliecePublicKeyParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@implementation LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  kpg_ = new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init();
  LibOrgBouncycastlePqcJcajceSpecMcElieceKeyGenParameterSpec *ecc = (LibOrgBouncycastlePqcJcajceSpecMcElieceKeyGenParameterSpec *) cast_chk(params, [LibOrgBouncycastlePqcJcajceSpecMcElieceKeyGenParameterSpec class]);
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *mccKGParams = new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceParameters_(random, new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceParameters_initWithInt_withInt_([((LibOrgBouncycastlePqcJcajceSpecMcElieceKeyGenParameterSpec *) nil_chk(ecc)) getM], [ecc getT]));
  [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *) nil_chk(kpg_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:mccKGParams];
}

- (void)initialize__WithInt:(jint)keySize
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastlePqcJcajceSpecMcElieceKeyGenParameterSpec *paramSpec = new_LibOrgBouncycastlePqcJcajceSpecMcElieceKeyGenParameterSpec_init();
  @try {
    [self initialize__WithJavaSecuritySpecAlgorithmParameterSpec:paramSpec withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *ae) {
  }
}

- (JavaSecurityKeyPair *)generateKeyPair {
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *generateKeyPair = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *) nil_chk(kpg_)) generateKeyPair];
  LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *sk = (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(generateKeyPair)) getPrivate], [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]);
  LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pk = (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk([generateKeyPair getPublic], [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]);
  return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePublicKey_initWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(pk), new_LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey_initWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(sk));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "kpg_", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", "ILJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi = { "McElieceKeyPairGeneratorSpi", "lib.org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi;
}

@end

void LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi_init(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self, @"McEliece");
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi *new_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi, init)
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi *create_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyPairGeneratorSpi)
