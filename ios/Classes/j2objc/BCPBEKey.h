//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/BCPBEKey.java
//

#ifndef BCPBEKey_H
#define BCPBEKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "javax/crypto/interfaces/PBEKey.h"

@class IOSByteArray;
@class IOSCharArray;
@class JavaxCryptoSpecPBEKeySpec;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@protocol JavaSecuritySpecKeySpec;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey : NSObject < JavaxCryptoInterfacesPBEKey > {
 @public
  NSString *algorithm_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid_;
  jint type_;
  jint digest_;
  jint keySize_;
  jint ivSize_;
  id<LibOrgBouncycastleCryptoCipherParameters> param_;
  JavaxCryptoSpecPBEKeySpec *pbeKeySpec_;
  jboolean tryWrong_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                   withInt:(jint)type
                                   withInt:(jint)digest
                                   withInt:(jint)keySize
                                   withInt:(jint)ivSize
             withJavaxCryptoSpecPBEKeySpec:(JavaxCryptoSpecPBEKeySpec *)pbeKeySpec
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param;

- (instancetype __nonnull)initWithNSString:(NSString *)algName
               withJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)pbeSpec
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param;

- (NSString *)getAlgorithm;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (jint)getIterationCount;

- (jint)getIvSize;

- (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getOID;

- (id<LibOrgBouncycastleCryptoCipherParameters>)getParam;

- (IOSCharArray *)getPassword;

- (IOSByteArray *)getSalt;

- (void)setTryWrongPKCS12ZeroWithBoolean:(jboolean)tryWrong;

#pragma mark Package-Private

- (jint)getDigest;

- (jint)getKeySize;

- (jint)getType;

- (jboolean)shouldTryWrongPKCS12;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey, algorithm_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey, oid_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey, param_, id<LibOrgBouncycastleCryptoCipherParameters>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey, pbeKeySpec_, JavaxCryptoSpecPBEKeySpec *)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withInt_withInt_withInt_withJavaxCryptoSpecPBEKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *self, NSString *algorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jint type, jint digest, jint keySize, jint ivSize, JavaxCryptoSpecPBEKeySpec *pbeKeySpec, id<LibOrgBouncycastleCryptoCipherParameters> param);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withInt_withInt_withInt_withJavaxCryptoSpecPBEKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(NSString *algorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jint type, jint digest, jint keySize, jint ivSize, JavaxCryptoSpecPBEKeySpec *pbeKeySpec, id<LibOrgBouncycastleCryptoCipherParameters> param) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withInt_withInt_withInt_withJavaxCryptoSpecPBEKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(NSString *algorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jint type, jint digest, jint keySize, jint ivSize, JavaxCryptoSpecPBEKeySpec *pbeKeySpec, id<LibOrgBouncycastleCryptoCipherParameters> param);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withJavaSecuritySpecKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *self, NSString *algName, id<JavaSecuritySpecKeySpec> pbeSpec, id<LibOrgBouncycastleCryptoCipherParameters> param);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withJavaSecuritySpecKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(NSString *algName, id<JavaSecuritySpecKeySpec> pbeSpec, id<LibOrgBouncycastleCryptoCipherParameters> param) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withJavaSecuritySpecKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(NSString *algName, id<JavaSecuritySpecKeySpec> pbeSpec, id<LibOrgBouncycastleCryptoCipherParameters> param);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BCPBEKey_H
