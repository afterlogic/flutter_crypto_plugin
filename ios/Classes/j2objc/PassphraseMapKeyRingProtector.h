//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/key/protection/PassphraseMapKeyRingProtector.java
//

#ifndef PassphraseMapKeyRingProtector_H
#define PassphraseMapKeyRingProtector_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "SecretKeyPassphraseProvider.h"
#include "SecretKeyRingProtector.h"

@class JavaLangLong;
@class LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings;
@class LibComAfterlogicPgpUtilPassphrase;
@class LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor;
@class LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;
@protocol JavaUtilMap;

@interface LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector : NSObject < LibComAfterlogicPgpKeyProtectionSecretKeyRingProtector, LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider >

#pragma mark Public

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)passphrases
withLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings:(LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *)protectionSettings
withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider:(id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider>)missingPassphraseCallback;

- (void)addPassphraseWithJavaLangLong:(JavaLangLong *)keyId
withLibComAfterlogicPgpUtilPassphrase:(LibComAfterlogicPgpUtilPassphrase *)passphrase;

- (void)forgetPassphraseWithJavaLangLong:(JavaLangLong *)keyId;

- (LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)getDecryptorWithJavaLangLong:(JavaLangLong *)keyId;

- (LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)getEncryptorWithJavaLangLong:(JavaLangLong *)keyId;

- (LibComAfterlogicPgpUtilPassphrase *)getPassphraseForWithJavaLangLong:(JavaLangLong *)keyId;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector)

FOUNDATION_EXPORT void LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector_initWithJavaUtilMap_withLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector *self, id<JavaUtilMap> passphrases, LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *protectionSettings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> missingPassphraseCallback);

FOUNDATION_EXPORT LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector *new_LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector_initWithJavaUtilMap_withLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(id<JavaUtilMap> passphrases, LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *protectionSettings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> missingPassphraseCallback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector *create_LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector_initWithJavaUtilMap_withLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(id<JavaUtilMap> passphrases, LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *protectionSettings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> missingPassphraseCallback);

J2OBJC_TYPE_LITERAL_HEADER(LibComAfterlogicPgpKeyProtectionPassphraseMapKeyRingProtector)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PassphraseMapKeyRingProtector_H
