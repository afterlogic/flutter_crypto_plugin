//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/JCEDHPrivateKey.java
//

#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "DHDomainParameters.h"
#include "DHParameter.h"
#include "DHParameters.h"
#include "DHPrivateKeyParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JCEDHPrivateKey.h"
#include "PKCS12BagAttributeCarrier.h"
#include "PKCS12BagAttributeCarrierImpl.h"
#include "PKCSObjectIdentifiers.h"
#include "PrivateKeyInfo.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Enumeration.h"
#include "javax/crypto/interfaces/DHPrivateKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "javax/crypto/spec/DHPrivateKeySpec.h"
#include "javax/security/auth/Destroyable.h"

@interface LibOrgBouncycastleJceProviderJCEDHPrivateKey () {
 @public
  JavaxCryptoSpecDHParameterSpec *dhSpec_;
  LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info_;
  id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> attrCarrier_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEDHPrivateKey, dhSpec_, JavaxCryptoSpecDHParameterSpec *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEDHPrivateKey, info_, LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEDHPrivateKey, attrCarrier_, id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>)

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJCEDHPrivateKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJCEDHPrivateKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, JavaIoObjectOutputStream *outArg);

@implementation LibOrgBouncycastleJceProviderJCEDHPrivateKey

+ (jlong)serialVersionUID {
  return LibOrgBouncycastleJceProviderJCEDHPrivateKey_serialVersionUID;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderJCEDHPrivateKey_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaxCryptoInterfacesDHPrivateKey:(id<JavaxCryptoInterfacesDHPrivateKey>)key {
  LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(self, key);
  return self;
}

- (instancetype)initWithJavaxCryptoSpecDHPrivateKeySpec:(JavaxCryptoSpecDHPrivateKeySpec *)spec {
  LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)info {
  LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(self, info);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)params {
  LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_(self, params);
  return self;
}

- (NSString *)getAlgorithm {
  return @"DH";
}

- (NSString *)getFormat {
  return @"PKCS#8";
}

- (IOSByteArray *)getEncoded {
  @try {
    if (info_ != nil) {
      return [info_ getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
    }
    LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info = new_LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement), new_LibOrgBouncycastleAsn1PkcsDHParameter_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([((JavaxCryptoSpecDHParameterSpec *) nil_chk(dhSpec_)) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk(dhSpec_)) getG], [((JavaxCryptoSpecDHParameterSpec *) nil_chk(dhSpec_)) getL])), new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getX]));
    return [info getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
}

- (JavaxCryptoSpecDHParameterSpec *)getParams {
  return dhSpec_;
}

- (JavaMathBigInteger *)getX {
  return x_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  LibOrgBouncycastleJceProviderJCEDHPrivateKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  LibOrgBouncycastleJceProviderJCEDHPrivateKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

- (void)setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                              withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)attribute {
  [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withLibOrgBouncycastleAsn1ASN1Encodable:attribute];
}

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
}

- (id<JavaUtilEnumeration>)getBagAttributeKeys {
  return [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) getBagAttributeKeys];
}

- (void)destroy {
  JavaxSecurityAuthDestroyable_destroy(self);
}

- (jboolean)isDestroyed {
  return JavaxSecurityAuthDestroyable_isDestroyed(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 3, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSpecDHParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Encodable;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaxCryptoInterfacesDHPrivateKey:);
  methods[2].selector = @selector(initWithJavaxCryptoSpecDHPrivateKeySpec:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[4].selector = @selector(initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters:);
  methods[5].selector = @selector(getAlgorithm);
  methods[6].selector = @selector(getFormat);
  methods[7].selector = @selector(getEncoded);
  methods[8].selector = @selector(getParams);
  methods[9].selector = @selector(getX);
  methods[10].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[11].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[12].selector = @selector(setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withLibOrgBouncycastleAsn1ASN1Encodable:);
  methods[13].selector = @selector(getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[14].selector = @selector(getBagAttributeKeys);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastleJceProviderJCEDHPrivateKey_serialVersionUID, 0x18, -1, -1, -1, -1 },
    { "x_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dhSpec_", "LJavaxCryptoSpecDHParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "info_", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attrCarrier_", "LLibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxCryptoInterfacesDHPrivateKey;", "LJavaxCryptoSpecDHPrivateKeySpec;", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "setBagAttribute", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;LLibOrgBouncycastleAsn1ASN1Encodable;", "getBagAttribute", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderJCEDHPrivateKey = { "JCEDHPrivateKey", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 15, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderJCEDHPrivateKey;
}

@end

void LibOrgBouncycastleJceProviderJCEDHPrivateKey_init(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self) {
  NSObject_init(self);
  self->attrCarrier_ = new_LibOrgBouncycastleJcajceProviderAsymmetricUtilPKCS12BagAttributeCarrierImpl_init();
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, init)
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, init)
}

void LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, id<JavaxCryptoInterfacesDHPrivateKey> key) {
  NSObject_init(self);
  self->attrCarrier_ = new_LibOrgBouncycastleJcajceProviderAsymmetricUtilPKCS12BagAttributeCarrierImpl_init();
  self->x_ = [((id<JavaxCryptoInterfacesDHPrivateKey>) nil_chk(key)) getX];
  self->dhSpec_ = [key getParams];
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(id<JavaxCryptoInterfacesDHPrivateKey> key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, initWithJavaxCryptoInterfacesDHPrivateKey_, key)
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(id<JavaxCryptoInterfacesDHPrivateKey> key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, initWithJavaxCryptoInterfacesDHPrivateKey_, key)
}

void LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, JavaxCryptoSpecDHPrivateKeySpec *spec) {
  NSObject_init(self);
  self->attrCarrier_ = new_LibOrgBouncycastleJcajceProviderAsymmetricUtilPKCS12BagAttributeCarrierImpl_init();
  self->x_ = [((JavaxCryptoSpecDHPrivateKeySpec *) nil_chk(spec)) getX];
  self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([spec getP], [spec getG]);
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(JavaxCryptoSpecDHPrivateKeySpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, initWithJavaxCryptoSpecDHPrivateKeySpec_, spec)
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(JavaxCryptoSpecDHPrivateKeySpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, initWithJavaxCryptoSpecDHPrivateKeySpec_, spec)
}

void LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) {
  NSObject_init(self);
  self->attrCarrier_ = new_LibOrgBouncycastleJcajceProviderAsymmetricUtilPKCS12BagAttributeCarrierImpl_init();
  LibOrgBouncycastleAsn1ASN1Sequence *seq = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(info)) getPrivateKeyAlgorithm])) getParameters]);
  LibOrgBouncycastleAsn1ASN1Integer *derX = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([info parsePrivateKey]);
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *id_ = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getPrivateKeyAlgorithm])) getAlgorithm];
  self->info_ = info;
  self->x_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derX)) getValue];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(id_)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement)]) {
    LibOrgBouncycastleAsn1PkcsDHParameter *params = LibOrgBouncycastleAsn1PkcsDHParameter_getInstanceWithId_(seq);
    if ([((LibOrgBouncycastleAsn1PkcsDHParameter *) nil_chk(params)) getL] != nil) {
      self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([params getP], [params getG], [((JavaMathBigInteger *) nil_chk([params getL])) intValue]);
    }
    else {
      self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([params getP], [params getG]);
    }
  }
  else if ([id_ isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, dhpublicnumber)]) {
    LibOrgBouncycastleAsn1X9DHDomainParameters *params = LibOrgBouncycastleAsn1X9DHDomainParameters_getInstanceWithId_(seq);
    self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk([((LibOrgBouncycastleAsn1X9DHDomainParameters *) nil_chk(params)) getP])) getValue], [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk([params getG])) getValue]);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unknown algorithm type: ", id_));
  }
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_, info)
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_, info)
}

void LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *params) {
  NSObject_init(self);
  self->attrCarrier_ = new_LibOrgBouncycastleJcajceProviderAsymmetricUtilPKCS12BagAttributeCarrierImpl_init();
  self->x_ = [((LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) nil_chk(params)) getX];
  self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([params getParameters])) getP], [((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([params getParameters])) getG], [((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([params getParameters])) getL]);
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_, params)
}

LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPrivateKey, initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_, params)
}

void LibOrgBouncycastleJceProviderJCEDHPrivateKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, JavaIoObjectInputStream *inArg) {
  self->x_ = (JavaMathBigInteger *) cast_chk([((JavaIoObjectInputStream *) nil_chk(inArg)) readObject], [JavaMathBigInteger class]);
  self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_((JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]), (JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]), [inArg readInt]);
}

void LibOrgBouncycastleJceProviderJCEDHPrivateKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeObjectWithId:[self getX]];
  [outArg writeObjectWithId:[((JavaxCryptoSpecDHParameterSpec *) nil_chk(self->dhSpec_)) getP]];
  [outArg writeObjectWithId:[((JavaxCryptoSpecDHParameterSpec *) nil_chk(self->dhSpec_)) getG]];
  [outArg writeIntWithInt:[((JavaxCryptoSpecDHParameterSpec *) nil_chk(self->dhSpec_)) getL]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderJCEDHPrivateKey)
