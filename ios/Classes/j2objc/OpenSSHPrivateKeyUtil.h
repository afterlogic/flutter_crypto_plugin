//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/OpenSSHPrivateKeyUtil.java
//

#ifndef OpenSSHPrivateKeyUtil_H
#define OpenSSHPrivateKeyUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil : NSObject
@property (readonly, class) IOSByteArray *AUTH_MAGIC NS_SWIFT_NAME(AUTH_MAGIC);

+ (IOSByteArray *)AUTH_MAGIC;

#pragma mark Public

+ (IOSByteArray *)encodePrivateKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)params;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)parsePrivateKeyBlobWithByteArray:(IOSByteArray *)blob;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil)

inline IOSByteArray *LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_get_AUTH_MAGIC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_AUTH_MAGIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil, AUTH_MAGIC, IOSByteArray *)

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_encodePrivateKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *params);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_parsePrivateKeyBlobWithByteArray_(IOSByteArray *blob);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OpenSSHPrivateKeyUtil_H
