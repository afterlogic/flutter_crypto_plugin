//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/edec/JcajceEdecKeyPairGeneratorSpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricCipherKeyPairGenerator.h"
#include "AsymmetricKeyParameter.h"
#include "BCEdDSAPrivateKey.h"
#include "BCEdDSAPublicKey.h"
#include "BCXDHPrivateKey.h"
#include "BCXDHPublicKey.h"
#include "ECNamedCurveGenParameterSpec.h"
#include "Ed25519KeyGenerationParameters.h"
#include "Ed25519KeyPairGenerator.h"
#include "Ed448KeyGenerationParameters.h"
#include "Ed448KeyPairGenerator.h"
#include "EdDSAParameterSpec.h"
#include "EdECObjectIdentifiers.h"
#include "J2ObjC_source.h"
#include "JcajceEdecKeyPairGeneratorSpi.h"
#include "X25519KeyGenerationParameters.h"
#include "X25519KeyPairGenerator.h"
#include "X448KeyGenerationParameters.h"
#include "X448KeyPairGenerator.h"
#include "XDHParameterSpec.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGeneratorSpi.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/ECGenParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi () {
 @public
  jint algorithm_;
  id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator> generator_;
  jboolean initialised_;
  JavaSecuritySecureRandom *secureRandom_;
}

- (void)algorithmCheckWithInt:(jint)algorithm;

- (void)initializeGeneratorWithNSString:(NSString *)name OBJC_METHOD_FAMILY_NONE;

- (void)setupGeneratorWithInt:(jint)algorithm;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, generator_, id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, secureRandom_, JavaSecuritySecureRandom *)

inline jint LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_get_ALGORITHM_EdDSA(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_EdDSA -1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, ALGORITHM_EdDSA, jint)

inline jint LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_get_ALGORITHM_XDH(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_XDH -2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, ALGORITHM_XDH, jint)

inline jint LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_get_ALGORITHM_Ed448(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, ALGORITHM_Ed448, jint)

inline jint LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_get_ALGORITHM_Ed25519(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, ALGORITHM_Ed25519, jint)

inline jint LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_get_ALGORITHM_X448(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, ALGORITHM_X448, jint)

inline jint LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_get_ALGORITHM_X25519(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, ALGORITHM_X25519, jint)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_algorithmCheckWithInt_(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *self, jint algorithm);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initializeGeneratorWithNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *self, NSString *name);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *self, jint algorithm);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi

- (instancetype)initWithInt:(jint)algorithm
withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator:(id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>)generator {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(self, algorithm, generator);
  return self;
}

- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  self->secureRandom_ = secureRandom;
  switch (strength) {
    case 255:
    case 256:
    switch (algorithm_) {
      case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_EdDSA:
      case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519:
      LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519);
      break;
      case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_XDH:
      case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519:
      LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519);
      break;
      default:
      @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"key size not configurable");
    }
    break;
    case 448:
    switch (algorithm_) {
      case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_EdDSA:
      case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448:
      LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448);
      break;
      case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_XDH:
      case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448:
      LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448);
      break;
      default:
      @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"key size not configurable");
    }
    break;
    default:
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"unknown key size");
  }
}

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)paramSpec
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  self->secureRandom_ = secureRandom;
  if ([paramSpec isKindOfClass:[JavaSecuritySpecECGenParameterSpec class]]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initializeGeneratorWithNSString_(self, [((JavaSecuritySpecECGenParameterSpec *) nil_chk(((JavaSecuritySpecECGenParameterSpec *) paramSpec))) getName]);
  }
  else if ([paramSpec isKindOfClass:[LibOrgBouncycastleJceSpecECNamedCurveGenParameterSpec class]]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initializeGeneratorWithNSString_(self, [((LibOrgBouncycastleJceSpecECNamedCurveGenParameterSpec *) nil_chk(((LibOrgBouncycastleJceSpecECNamedCurveGenParameterSpec *) paramSpec))) getName]);
  }
  else if ([paramSpec isKindOfClass:[LibOrgBouncycastleJcajceSpecEdDSAParameterSpec class]]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initializeGeneratorWithNSString_(self, [((LibOrgBouncycastleJcajceSpecEdDSAParameterSpec *) nil_chk(((LibOrgBouncycastleJcajceSpecEdDSAParameterSpec *) paramSpec))) getCurveName]);
  }
  else if ([paramSpec isKindOfClass:[LibOrgBouncycastleJcajceSpecXDHParameterSpec class]]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initializeGeneratorWithNSString_(self, [((LibOrgBouncycastleJcajceSpecXDHParameterSpec *) nil_chk(((LibOrgBouncycastleJcajceSpecXDHParameterSpec *) paramSpec))) getCurveName]);
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$@", @"invalid parameterSpec: ", paramSpec));
  }
}

- (void)algorithmCheckWithInt:(jint)algorithm {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_algorithmCheckWithInt_(self, algorithm);
}

- (void)initializeGeneratorWithNSString:(NSString *)name {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initializeGeneratorWithNSString_(self, name);
}

- (JavaSecurityKeyPair *)generateKeyPair {
  if (generator_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"generator not correctly initialized");
  }
  if (!initialised_) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, algorithm_);
  }
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *kp = [((id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>) nil_chk(generator_)) generateKeyPair];
  switch (algorithm_) {
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448:
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPublic]), new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPrivateKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_([kp getPrivate]));
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519:
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPublic]), new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPrivateKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_([kp getPrivate]));
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448:
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPublicKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPublic]), new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_([kp getPrivate]));
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519:
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPublicKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPublic]), new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_([kp getPrivate]));
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"generator not correctly initialized");
}

- (void)setupGeneratorWithInt:(jint)algorithm {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, algorithm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator:);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(algorithmCheckWithInt:);
  methods[4].selector = @selector(initializeGeneratorWithNSString:);
  methods[5].selector = @selector(generateKeyPair);
  methods[6].selector = @selector(setupGeneratorWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALGORITHM_EdDSA", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_EdDSA, 0x1a, -1, -1, -1, -1 },
    { "ALGORITHM_XDH", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_XDH, 0x1a, -1, -1, -1, -1 },
    { "ALGORITHM_Ed448", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448, 0x1a, -1, -1, -1, -1 },
    { "ALGORITHM_Ed25519", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519, 0x1a, -1, -1, -1, -1 },
    { "ALGORITHM_X448", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448, 0x1a, -1, -1, -1, -1 },
    { "ALGORITHM_X25519", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519, 0x1a, -1, -1, -1, -1 },
    { "algorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "generator_", "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "secureRandom_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator;", "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", "algorithmCheck", "I", "initializeGenerator", "LNSString;", "setupGenerator", "LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA;LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448;LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519;LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH;LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448;LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi = { "JcajceEdecKeyPairGeneratorSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, fields, 7, 0x1, 7, 10, -1, 10, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *self, jint algorithm, id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator> generator) {
  JavaSecurityKeyPairGeneratorSpi_init(self);
  self->algorithm_ = algorithm;
  self->generator_ = generator;
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(jint algorithm, id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator> generator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_, algorithm, generator)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(jint algorithm, id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator> generator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi, initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_, algorithm, generator)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_algorithmCheckWithInt_(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *self, jint algorithm) {
  if (self->algorithm_ != algorithm) {
    if (self->algorithm_ == LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519 || self->algorithm_ == LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameterSpec for wrong curve type");
    }
    if (self->algorithm_ == LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_EdDSA && (algorithm != LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519 && algorithm != LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448)) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameterSpec for wrong curve type");
    }
    if (self->algorithm_ == LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519 || self->algorithm_ == LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameterSpec for wrong curve type");
    }
    if (self->algorithm_ == LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_XDH && (algorithm != LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519 && algorithm != LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448)) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameterSpec for wrong curve type");
    }
    self->algorithm_ = algorithm;
  }
}

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initializeGeneratorWithNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *self, NSString *name) {
  if ([((NSString *) nil_chk(name)) java_equalsIgnoreCase:LibOrgBouncycastleJcajceSpecEdDSAParameterSpec_Ed448] || [name isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_Ed448))) getId]]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_algorithmCheckWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448);
    self->generator_ = new_LibOrgBouncycastleCryptoGeneratorsEd448KeyPairGenerator_init();
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448);
  }
  else if ([name java_equalsIgnoreCase:LibOrgBouncycastleJcajceSpecEdDSAParameterSpec_Ed25519] || [name isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_Ed25519))) getId]]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_algorithmCheckWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519);
    self->generator_ = new_LibOrgBouncycastleCryptoGeneratorsEd25519KeyPairGenerator_init();
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519);
  }
  else if ([name java_equalsIgnoreCase:LibOrgBouncycastleJcajceSpecXDHParameterSpec_X448] || [name isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_X448))) getId]]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_algorithmCheckWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448);
    self->generator_ = new_LibOrgBouncycastleCryptoGeneratorsX448KeyPairGenerator_init();
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448);
  }
  else if ([name java_equalsIgnoreCase:LibOrgBouncycastleJcajceSpecXDHParameterSpec_X25519] || [name isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_X25519))) getId]]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_algorithmCheckWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519);
    self->generator_ = new_LibOrgBouncycastleCryptoGeneratorsX25519KeyPairGenerator_init();
    LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519);
  }
}

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_setupGeneratorWithInt_(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi *self, jint algorithm) {
  self->initialised_ = true;
  if (self->secureRandom_ == nil) {
    self->secureRandom_ = new_JavaSecuritySecureRandom_init();
  }
  switch (algorithm) {
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448:
    [((id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>) nil_chk(self->generator_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoParamsEd448KeyGenerationParameters_initWithJavaSecuritySecureRandom_(self->secureRandom_)];
    break;
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_EdDSA:
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519:
    [((id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>) nil_chk(self->generator_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoParamsEd25519KeyGenerationParameters_initWithJavaSecuritySecureRandom_(self->secureRandom_)];
    break;
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448:
    [((id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>) nil_chk(self->generator_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoParamsX448KeyGenerationParameters_initWithJavaSecuritySecureRandom_(self->secureRandom_)];
    break;
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_XDH:
    case LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519:
    [((id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>) nil_chk(self->generator_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoParamsX25519KeyGenerationParameters_initWithJavaSecuritySecureRandom_(self->secureRandom_)];
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA = { "EdDSA", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_EdDSA, nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_EdDSA)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448 = { "Ed448", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed448, new_LibOrgBouncycastleCryptoGeneratorsEd448KeyPairGenerator_init());
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448 *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448 *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed448)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519 = { "Ed25519", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_Ed25519, new_LibOrgBouncycastleCryptoGeneratorsEd25519KeyPairGenerator_init());
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519 *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519 *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_Ed25519)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH = { "XDH", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_XDH, nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_XDH)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448 = { "X448", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X448, new_LibOrgBouncycastleCryptoGeneratorsX448KeyPairGenerator_init());
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448 *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448 *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X448)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519 = { "X25519", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x19, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_(self, LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_ALGORITHM_X25519, new_LibOrgBouncycastleCryptoGeneratorsX25519KeyPairGenerator_init());
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519 *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519 *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyPairGeneratorSpi_X25519)
