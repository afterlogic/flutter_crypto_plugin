//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java
//

#include "ASN1BitString.h"
#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1GeneralizedTime.h"
#include "ASN1InputStream.h"
#include "ASN1Object.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "BCFKSLoadStoreParameter.h"
#include "BCFKSStoreParameter.h"
#include "BCJcaJceHelper.h"
#include "BCLoadStoreParameter.h"
#include "BcFKSKeyStoreSpi.h"
#include "CipherParameters.h"
#include "CmsCCMParameters.h"
#include "CryptoServicesRegistrar.h"
#include "DERNull.h"
#include "DefaultJcaJceHelper.h"
#include "ECKey.h"
#include "EncryptedObjectStoreData.h"
#include "EncryptedPrivateKeyData.h"
#include "EncryptedPrivateKeyInfo.h"
#include "EncryptedSecretKeyData.h"
#include "EncryptionScheme.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "KISAObjectIdentifiers.h"
#include "KeyDerivationFunc.h"
#include "KeyParameter.h"
#include "MiscObjectIdentifiers.h"
#include "NISTObjectIdentifiers.h"
#include "NSRIObjectIdentifiers.h"
#include "NTTObjectIdentifiers.h"
#include "OIWObjectIdentifiers.h"
#include "ObjectData.h"
#include "ObjectDataSequence.h"
#include "ObjectStore.h"
#include "ObjectStoreData.h"
#include "ObjectStoreIntegrityCheck.h"
#include "PBEParametersGenerator.h"
#include "PBES2Parameters.h"
#include "PBKDF2Config.h"
#include "PBKDF2Params.h"
#include "PBKDFConfig.h"
#include "PKCS5S2ParametersGenerator.h"
#include "PKCSObjectIdentifiers.h"
#include "PbkdMacIntegrityCheck.h"
#include "PrivateKeyInfo.h"
#include "SCrypt.h"
#include "SHA3Digest.h"
#include "SHA512Digest.h"
#include "ScryptConfig.h"
#include "ScryptParams.h"
#include "SecretKeyData.h"
#include "SignatureCheck.h"
#include "Strings.h"
#include "X509Certificate.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/KeyFactory.h"
#include "java/security/KeyStore.h"
#include "java/security/KeyStoreException.h"
#include "java/security/KeyStoreSpi.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/Signature.h"
#include "java/security/UnrecoverableKeyException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/interfaces/DSAKey.h"
#include "java/security/interfaces/RSAKey.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/text/ParseException.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/IllegalBlockSizeException.h"
#include "javax/crypto/Mac.h"
#include "javax/crypto/NoSuchPaddingException.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/SecretKeyFactory.h"
#include "javax/crypto/spec/SecretKeySpec.h"
#include "javax/security/auth/callback/Callback.h"
#include "javax/security/auth/callback/CallbackHandler.h"
#include "javax/security/auth/callback/PasswordCallback.h"
#include "javax/security/auth/callback/UnsupportedCallbackException.h"

@interface LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi () {
 @public
  id<JavaSecurityPublicKey> verificationKey_;
  id<LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_CertChainValidator> validator_;
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
  id<JavaUtilMap> entries_;
  id<JavaUtilMap> privateKeyCache_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hmacAlgorithm_;
  LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *hmacPkbdAlgorithm_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signatureAlgorithm_;
  JavaUtilDate *creationDate_;
  JavaUtilDate *lastModifiedDate_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *storeEncryptionAlgorithm_;
}

+ (NSString *)getPublicKeyAlgWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

- (JavaSecurityCertCertificate *)decodeCertificateWithId:(id)cert;

- (JavaxCryptoCipher *)createCipherWithNSString:(NSString *)algorithm
                                  withByteArray:(IOSByteArray *)keyBytes;

- (JavaSecuritySecureRandom *)getDefaultSecureRandom;

- (LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *)createPrivateKeySequenceWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *)encryptedPrivateKeyInfo
                                                                                              withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

- (JavaUtilDate *)extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData:(LibOrgBouncycastleAsn1BcObjectData *)entry_
                                                           withJavaUtilDate:(JavaUtilDate *)creationDate;

- (IOSByteArray *)generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:(LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)pbkdAlgorithm
                                                                withNSString:(NSString *)purpose
                                                               withCharArray:(IOSCharArray *)password
                                                                     withInt:(jint)defKeySize;

- (void)verifySigWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)store
              withLibOrgBouncycastleAsn1BcSignatureCheck:(LibOrgBouncycastleAsn1BcSignatureCheck *)integrityCheck
                               withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

- (void)verifyMacWithByteArray:(IOSByteArray *)content
withLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck:(LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck *)integrityCheck
                 withCharArray:(IOSCharArray *)password;

- (IOSByteArray *)calculateMacWithByteArray:(IOSByteArray *)content
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algorithm
withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:(LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)pbkdAlgorithm
                              withCharArray:(IOSCharArray *)password;

- (IOSCharArray *)extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)bcParam;

- (LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *)getEncryptedObjectStoreDataWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)integrityAlgorithm
                                                                                                                     withCharArray:(IOSCharArray *)password;

- (jboolean)isSimilarHmacPbkdWithLibOrgBouncycastleCryptoUtilPBKDFConfig:(LibOrgBouncycastleCryptoUtilPBKDFConfig *)storePBKDFConfig
                         withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:(LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)hmacPkbdAlgorithm;

- (IOSByteArray *)decryptDataWithNSString:(NSString *)purpose
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)protectAlgId
                            withCharArray:(IOSCharArray *)password
                            withByteArray:(IOSByteArray *)encryptedData;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)generateSignatureAlgIdWithJavaSecurityKey:(id<JavaSecurityKey>)key
                      withLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm:(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm *)sigAlg;

- (LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig:(LibOrgBouncycastleCryptoUtilPBKDFConfig *)pbkdfConfig
                                                                                                                    withInt:(jint)keySizeInBytes;

- (LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:(LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)baseAlg
                                                                                                                        withInt:(jint)keySizeInBytes;

- (LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)derivationAlgorithm
                                                                                                                       withInt:(jint)keySizeInBytes;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, verificationKey_, id<JavaSecurityPublicKey>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, validator_, id<LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_CertChainValidator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, entries_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, privateKeyCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, hmacAlgorithm_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, hmacPkbdAlgorithm_, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, signatureAlgorithm_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, creationDate_, JavaUtilDate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, lastModifiedDate_, JavaUtilDate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, storeEncryptionAlgorithm_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)

inline id<JavaUtilMap> LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_get_oidMap(void);
static id<JavaUtilMap> LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, oidMap, id<JavaUtilMap>)

inline id<JavaUtilMap> LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_get_publicAlgMap(void);
static id<JavaUtilMap> LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, publicAlgMap, id<JavaUtilMap>)

inline JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_get_CERTIFICATE(void);
static JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_CERTIFICATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, CERTIFICATE, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_get_PRIVATE_KEY(void);
static JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, PRIVATE_KEY, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_get_SECRET_KEY(void);
static JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SECRET_KEY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, SECRET_KEY, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_get_PROTECTED_PRIVATE_KEY(void);
static JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, PROTECTED_PRIVATE_KEY, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_get_PROTECTED_SECRET_KEY(void);
static JavaMathBigInteger *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_SECRET_KEY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, PROTECTED_SECRET_KEY, JavaMathBigInteger *)

__attribute__((unused)) static NSString *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getPublicKeyAlgWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

__attribute__((unused)) static id<JavaSecurityKey> LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_engineGetKeyWithNSString_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, NSString *alias, IOSCharArray *password);

__attribute__((unused)) static JavaSecurityCertCertificate *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decodeCertificateWithId_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id cert);

__attribute__((unused)) static JavaxCryptoCipher *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, NSString *algorithm, IOSByteArray *keyBytes);

__attribute__((unused)) static JavaSecuritySecureRandom *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getDefaultSecureRandom(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self);

__attribute__((unused)) static LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createPrivateKeySequenceWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *encryptedPrivateKeyInfo, IOSObjectArray *chain);

__attribute__((unused)) static JavaUtilDate *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData_withJavaUtilDate_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1BcObjectData *entry_, JavaUtilDate *creationDate);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withNSString_withCharArray_withInt_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *pbkdAlgorithm, NSString *purpose, IOSCharArray *password, jint defKeySize);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifySigWithLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1BcSignatureCheck_withJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id<LibOrgBouncycastleAsn1ASN1Encodable> store, LibOrgBouncycastleAsn1BcSignatureCheck *integrityCheck, id<JavaSecurityPublicKey> key);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifyMacWithByteArray_withLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, IOSByteArray *content, LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck *integrityCheck, IOSCharArray *password);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_calculateMacWithByteArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, IOSByteArray *content, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithm, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *pbkdAlgorithm, IOSCharArray *password);

__attribute__((unused)) static IOSCharArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id<JavaSecurityKeyStore_LoadStoreParameter> bcParam);

__attribute__((unused)) static LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getEncryptedObjectStoreDataWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *integrityAlgorithm, IOSCharArray *password);

__attribute__((unused)) static jboolean LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_isSimilarHmacPbkdWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleCryptoUtilPBKDFConfig *storePBKDFConfig, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *hmacPkbdAlgorithm);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decryptDataWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_withByteArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, NSString *purpose, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *protectAlgId, IOSCharArray *password, IOSByteArray *encryptedData);

__attribute__((unused)) static LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateSignatureAlgIdWithJavaSecurityKey_withLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id<JavaSecurityKey> key, LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm *sigAlg);

__attribute__((unused)) static LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withInt_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleCryptoUtilPBKDFConfig *pbkdfConfig, jint keySizeInBytes);

__attribute__((unused)) static LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withInt_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *baseAlg, jint keySizeInBytes);

__attribute__((unused)) static LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *derivationAlgorithm, jint keySizeInBytes);

@interface LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1 : NSObject < JavaUtilEnumeration > {
 @public
  id<JavaUtilIterator> val$it_;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0;

- (jboolean)hasMoreElements;

- (id)nextElement;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1_initWithJavaUtilIterator_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1 *self, id<JavaUtilIterator> capture$0);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1 *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1 *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0);

@interface LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi () {
 @public
  id<JavaUtilMap> cache_;
  IOSByteArray *seedKey_;
}

- (IOSByteArray *)calculateMacWithNSString:(NSString *)alias
                             withCharArray:(IOSCharArray *)password;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi, cache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi, seedKey_, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_calculateMacWithNSString_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi *self, NSString *alias, IOSCharArray *password);

@interface LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException : JavaSecurityKeyStoreException {
 @public
  JavaLangThrowable *cause_ExtKeyStoreException_;
}

- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)cause;

- (JavaLangThrowable *)getCause;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException, cause_ExtKeyStoreException_, JavaLangThrowable *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException *self, NSString *msg, JavaLangThrowable *cause);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi

+ (NSString *)getPublicKeyAlgWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getPublicKeyAlgWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}

- (instancetype)initWithLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(self, helper);
  return self;
}

- (id<JavaSecurityKey>)engineGetKeyWithNSString:(NSString *)alias
                                  withCharArray:(IOSCharArray *)password {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_engineGetKeyWithNSString_withCharArray_(self, alias, password);
}

- (IOSObjectArray *)engineGetCertificateChainWithNSString:(NSString *)alias {
  LibOrgBouncycastleAsn1BcObjectData *ent = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:alias];
  if (ent != nil) {
    if ([((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY] || [((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY]) {
      LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *encPrivData = LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData_getInstanceWithId_([ent getData]);
      IOSObjectArray *certificates = [((LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *) nil_chk(encPrivData)) getCertificateChain];
      IOSObjectArray *chain = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(certificates))->size_ type:JavaSecurityCertX509Certificate_class_()];
      for (jint i = 0; i != chain->size_; i++) {
        (void) IOSObjectArray_Set(chain, i, LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decodeCertificateWithId_(self, IOSObjectArray_Get(certificates, i)));
      }
      return chain;
    }
  }
  return nil;
}

- (JavaSecurityCertCertificate *)engineGetCertificateWithNSString:(NSString *)s {
  LibOrgBouncycastleAsn1BcObjectData *ent = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:s];
  if (ent != nil) {
    if ([((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY] || [((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY]) {
      LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *encPrivData = LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData_getInstanceWithId_([ent getData]);
      IOSObjectArray *certificates = [((LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *) nil_chk(encPrivData)) getCertificateChain];
      return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decodeCertificateWithId_(self, IOSObjectArray_Get(nil_chk(certificates), 0));
    }
    else if ([((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_CERTIFICATE]) {
      return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decodeCertificateWithId_(self, [ent getData]);
    }
  }
  return nil;
}

- (JavaSecurityCertCertificate *)decodeCertificateWithId:(id)cert {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decodeCertificateWithId_(self, cert);
}

- (JavaUtilDate *)engineGetCreationDateWithNSString:(NSString *)s {
  LibOrgBouncycastleAsn1BcObjectData *ent = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:s];
  if (ent != nil) {
    @try {
      return [((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk([ent getLastModifiedDate])) getDate];
    }
    @catch (JavaTextParseException *e) {
      return new_JavaUtilDate_init();
    }
  }
  return nil;
}

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                  withJavaSecurityKey:(id<JavaSecurityKey>)key
                        withCharArray:(IOSCharArray *)password
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  JavaUtilDate *creationDate = new_JavaUtilDate_init();
  JavaUtilDate *lastEditDate = creationDate;
  LibOrgBouncycastleAsn1BcObjectData *entry_ = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:alias];
  if (entry_ != nil) {
    creationDate = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData_withJavaUtilDate_(self, entry_, creationDate);
  }
  (void) [((id<JavaUtilMap>) nil_chk(privateKeyCache_)) removeWithId:alias];
  if ([JavaSecurityPrivateKey_class_() isInstance:key]) {
    if (chain == nil) {
      @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"BCFKS KeyStore requires a certificate chain for private key storage.");
    }
    @try {
      IOSByteArray *encodedKey = [((id<JavaSecurityKey>) nil_chk(key)) getEncoded];
      LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *pbkdAlgId = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(self, JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBKDF2), 256 / 8);
      IOSByteArray *keyBytes = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withNSString_withCharArray_withInt_(self, pbkdAlgId, @"PRIVATE_KEY_ENCRYPTION", ((password != nil) ? password : [IOSCharArray newArrayWithLength:0]), 32);
      LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *keyInfo;
      if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(storeEncryptionAlgorithm_)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM)]) {
        JavaxCryptoCipher *c = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(self, @"AES/CCM/NoPadding", keyBytes);
        IOSByteArray *encryptedKey = [((JavaxCryptoCipher *) nil_chk(c)) doFinalWithByteArray:encodedKey];
        JavaSecurityAlgorithmParameters *algParams = [c getParameters];
        LibOrgBouncycastleAsn1PkcsPBES2Parameters *pbeParams = new_LibOrgBouncycastleAsn1PkcsPBES2Parameters_initWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withLibOrgBouncycastleAsn1PkcsEncryptionScheme_(pbkdAlgId, new_LibOrgBouncycastleAsn1PkcsEncryptionScheme_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM), LibOrgBouncycastleAsn1CmsCmsCCMParameters_getInstanceWithId_([((JavaSecurityAlgorithmParameters *) nil_chk(algParams)) getEncoded])));
        keyInfo = new_LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2), pbeParams), encryptedKey);
      }
      else {
        JavaxCryptoCipher *c = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(self, @"AESKWP", keyBytes);
        IOSByteArray *encryptedKey = [((JavaxCryptoCipher *) nil_chk(c)) doFinalWithByteArray:encodedKey];
        LibOrgBouncycastleAsn1PkcsPBES2Parameters *pbeParams = new_LibOrgBouncycastleAsn1PkcsPBES2Parameters_initWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withLibOrgBouncycastleAsn1PkcsEncryptionScheme_(pbkdAlgId, new_LibOrgBouncycastleAsn1PkcsEncryptionScheme_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_wrap_pad)));
        keyInfo = new_LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2), pbeParams), encryptedKey);
      }
      LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *keySeq = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createPrivateKeySequenceWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_withJavaSecurityCertCertificateArray_(self, keyInfo, chain);
      (void) [entries_ putWithId:alias withId:new_LibOrgBouncycastleAsn1BcObjectData_initWithJavaMathBigInteger_withNSString_withJavaUtilDate_withJavaUtilDate_withByteArray_withNSString_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY, alias, creationDate, lastEditDate, [((LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *) nil_chk(keySeq)) getEncoded], nil)];
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"BCFKS KeyStore exception storing private key: ", [e description]), e);
    }
  }
  else if ([JavaxCryptoSecretKey_class_() isInstance:key]) {
    if (chain != nil) {
      @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"BCFKS KeyStore cannot store certificate chain with secret key.");
    }
    @try {
      IOSByteArray *encodedKey = [((id<JavaSecurityKey>) nil_chk(key)) getEncoded];
      LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *pbkdAlgId = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(self, JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBKDF2), 256 / 8);
      IOSByteArray *keyBytes = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withNSString_withCharArray_withInt_(self, pbkdAlgId, @"SECRET_KEY_ENCRYPTION", ((password != nil) ? password : [IOSCharArray newArrayWithLength:0]), 32);
      NSString *keyAlg = LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_([key getAlgorithm]);
      LibOrgBouncycastleAsn1BcSecretKeyData *secKeyData;
      if ([((NSString *) nil_chk(keyAlg)) java_indexOfString:@"AES"] > -1) {
        secKeyData = new_LibOrgBouncycastleAsn1BcSecretKeyData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, aes), encodedKey);
      }
      else {
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap)) getWithId:keyAlg];
        if (algOid != nil) {
          secKeyData = new_LibOrgBouncycastleAsn1BcSecretKeyData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_(algOid, encodedKey);
        }
        else {
          algOid = [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap getWithId:JreStrcat("$CI", keyAlg, '.', (((IOSByteArray *) nil_chk(encodedKey))->size_ * 8))];
          if (algOid != nil) {
            secKeyData = new_LibOrgBouncycastleAsn1BcSecretKeyData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_(algOid, encodedKey);
          }
          else {
            @throw new_JavaSecurityKeyStoreException_initWithNSString_(JreStrcat("$$$", @"BCFKS KeyStore cannot recognize secret key (", keyAlg, @") for storage."));
          }
        }
      }
      LibOrgBouncycastleAsn1BcEncryptedSecretKeyData *keyData;
      if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(storeEncryptionAlgorithm_)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM)]) {
        JavaxCryptoCipher *c = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(self, @"AES/CCM/NoPadding", keyBytes);
        IOSByteArray *encryptedKey = [((JavaxCryptoCipher *) nil_chk(c)) doFinalWithByteArray:[secKeyData getEncoded]];
        JavaSecurityAlgorithmParameters *algParams = [c getParameters];
        LibOrgBouncycastleAsn1PkcsPBES2Parameters *pbeParams = new_LibOrgBouncycastleAsn1PkcsPBES2Parameters_initWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withLibOrgBouncycastleAsn1PkcsEncryptionScheme_(pbkdAlgId, new_LibOrgBouncycastleAsn1PkcsEncryptionScheme_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM), LibOrgBouncycastleAsn1CmsCmsCCMParameters_getInstanceWithId_([((JavaSecurityAlgorithmParameters *) nil_chk(algParams)) getEncoded])));
        keyData = new_LibOrgBouncycastleAsn1BcEncryptedSecretKeyData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2), pbeParams), encryptedKey);
      }
      else {
        JavaxCryptoCipher *c = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(self, @"AESKWP", keyBytes);
        IOSByteArray *encryptedKey = [((JavaxCryptoCipher *) nil_chk(c)) doFinalWithByteArray:[secKeyData getEncoded]];
        LibOrgBouncycastleAsn1PkcsPBES2Parameters *pbeParams = new_LibOrgBouncycastleAsn1PkcsPBES2Parameters_initWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withLibOrgBouncycastleAsn1PkcsEncryptionScheme_(pbkdAlgId, new_LibOrgBouncycastleAsn1PkcsEncryptionScheme_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_wrap_pad)));
        keyData = new_LibOrgBouncycastleAsn1BcEncryptedSecretKeyData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2), pbeParams), encryptedKey);
      }
      (void) [entries_ putWithId:alias withId:new_LibOrgBouncycastleAsn1BcObjectData_initWithJavaMathBigInteger_withNSString_withJavaUtilDate_withJavaUtilDate_withByteArray_withNSString_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SECRET_KEY, alias, creationDate, lastEditDate, [keyData getEncoded], nil)];
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"BCFKS KeyStore exception storing private key: ", [e description]), e);
    }
  }
  else {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"BCFKS KeyStore unable to recognize key.");
  }
  lastModifiedDate_ = lastEditDate;
}

- (JavaxCryptoCipher *)createCipherWithNSString:(NSString *)algorithm
                                  withByteArray:(IOSByteArray *)keyBytes {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(self, algorithm, keyBytes);
}

- (JavaSecuritySecureRandom *)getDefaultSecureRandom {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getDefaultSecureRandom(self);
}

- (LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *)createPrivateKeySequenceWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *)encryptedPrivateKeyInfo
                                                                                              withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createPrivateKeySequenceWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_withJavaSecurityCertCertificateArray_(self, encryptedPrivateKeyInfo, chain);
}

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                        withByteArray:(IOSByteArray *)keyBytes
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  JavaUtilDate *creationDate = new_JavaUtilDate_init();
  JavaUtilDate *lastEditDate = creationDate;
  LibOrgBouncycastleAsn1BcObjectData *entry_ = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:alias];
  if (entry_ != nil) {
    creationDate = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData_withJavaUtilDate_(self, entry_, creationDate);
  }
  if (chain != nil) {
    LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *encInfo;
    @try {
      encInfo = LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_getInstanceWithId_(keyBytes);
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(@"BCFKS KeyStore private key encoding must be an EncryptedPrivateKeyInfo.", e);
    }
    @try {
      (void) [((id<JavaUtilMap>) nil_chk(privateKeyCache_)) removeWithId:alias];
      (void) [entries_ putWithId:alias withId:new_LibOrgBouncycastleAsn1BcObjectData_initWithJavaMathBigInteger_withNSString_withJavaUtilDate_withJavaUtilDate_withByteArray_withNSString_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY, alias, creationDate, lastEditDate, [((LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *) nil_chk(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createPrivateKeySequenceWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_withJavaSecurityCertCertificateArray_(self, encInfo, chain))) getEncoded], nil)];
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"BCFKS KeyStore exception storing protected private key: ", [e description]), e);
    }
  }
  else {
    @try {
      (void) [entries_ putWithId:alias withId:new_LibOrgBouncycastleAsn1BcObjectData_initWithJavaMathBigInteger_withNSString_withJavaUtilDate_withJavaUtilDate_withByteArray_withNSString_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_SECRET_KEY, alias, creationDate, lastEditDate, keyBytes, nil)];
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"BCFKS KeyStore exception storing protected private key: ", [e description]), e);
    }
  }
  lastModifiedDate_ = lastEditDate;
}

- (void)engineSetCertificateEntryWithNSString:(NSString *)alias
              withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate {
  LibOrgBouncycastleAsn1BcObjectData *entry_ = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:alias];
  JavaUtilDate *creationDate = new_JavaUtilDate_init();
  JavaUtilDate *lastEditDate = creationDate;
  if (entry_ != nil) {
    if (![((JavaMathBigInteger *) nil_chk([entry_ getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_CERTIFICATE]) {
      @throw new_JavaSecurityKeyStoreException_initWithNSString_(JreStrcat("$$", @"BCFKS KeyStore already has a key entry with alias ", alias));
    }
    creationDate = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData_withJavaUtilDate_(self, entry_, creationDate);
  }
  @try {
    (void) [entries_ putWithId:alias withId:new_LibOrgBouncycastleAsn1BcObjectData_initWithJavaMathBigInteger_withNSString_withJavaUtilDate_withJavaUtilDate_withByteArray_withNSString_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_CERTIFICATE, alias, creationDate, lastEditDate, [((JavaSecurityCertCertificate *) nil_chk(certificate)) getEncoded], nil)];
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    @throw new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"BCFKS KeyStore unable to handle certificate: ", [e getMessage]), e);
  }
  lastModifiedDate_ = lastEditDate;
}

- (JavaUtilDate *)extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData:(LibOrgBouncycastleAsn1BcObjectData *)entry_
                                                           withJavaUtilDate:(JavaUtilDate *)creationDate {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData_withJavaUtilDate_(self, entry_, creationDate);
}

- (void)engineDeleteEntryWithNSString:(NSString *)alias {
  LibOrgBouncycastleAsn1BcObjectData *entry_ = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:alias];
  if (entry_ == nil) {
    return;
  }
  (void) [((id<JavaUtilMap>) nil_chk(privateKeyCache_)) removeWithId:alias];
  (void) [entries_ removeWithId:alias];
  lastModifiedDate_ = new_JavaUtilDate_init();
}

- (id<JavaUtilEnumeration>)engineAliases {
  id<JavaUtilIterator> it = [new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(entries_)) keySet]) iterator];
  return new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1_initWithJavaUtilIterator_(it);
}

- (jboolean)engineContainsAliasWithNSString:(NSString *)alias {
  if (alias == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"alias value is null");
  }
  return [((id<JavaUtilMap>) nil_chk(entries_)) containsKeyWithId:alias];
}

- (jint)engineSize {
  return [((id<JavaUtilMap>) nil_chk(entries_)) size];
}

- (jboolean)engineIsKeyEntryWithNSString:(NSString *)alias {
  LibOrgBouncycastleAsn1BcObjectData *ent = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:alias];
  if (ent != nil) {
    JavaMathBigInteger *entryType = [ent getType];
    return [((JavaMathBigInteger *) nil_chk(entryType)) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY] || [entryType isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SECRET_KEY] || [entryType isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY] || [entryType isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_SECRET_KEY];
  }
  return false;
}

- (jboolean)engineIsCertificateEntryWithNSString:(NSString *)alias {
  LibOrgBouncycastleAsn1BcObjectData *ent = [((id<JavaUtilMap>) nil_chk(entries_)) getWithId:alias];
  if (ent != nil) {
    return [((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_CERTIFICATE];
  }
  return false;
}

- (NSString *)engineGetCertificateAliasWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate {
  if (certificate == nil) {
    return nil;
  }
  IOSByteArray *encodedCert;
  @try {
    encodedCert = [certificate getEncoded];
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    return nil;
  }
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(entries_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    NSString *alias = [it next];
    LibOrgBouncycastleAsn1BcObjectData *ent = [entries_ getWithId:alias];
    if ([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1BcObjectData *) nil_chk(ent)) getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_CERTIFICATE]) {
      if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([ent getData], encodedCert)) {
        return alias;
      }
    }
    else if ([((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY] || [((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY]) {
      @try {
        LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *encPrivData = LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData_getInstanceWithId_([ent getData]);
        if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(IOSObjectArray_Get(nil_chk([((LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *) nil_chk(encPrivData)) getCertificateChain]), 0))) toASN1Primitive])) getEncoded], encodedCert)) {
          return alias;
        }
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return nil;
}

- (IOSByteArray *)generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:(LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)pbkdAlgorithm
                                                                withNSString:(NSString *)purpose
                                                               withCharArray:(IOSCharArray *)password
                                                                     withInt:(jint)defKeySize {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withNSString_withCharArray_withInt_(self, pbkdAlgorithm, purpose, password, defKeySize);
}

- (void)verifySigWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)store
              withLibOrgBouncycastleAsn1BcSignatureCheck:(LibOrgBouncycastleAsn1BcSignatureCheck *)integrityCheck
                               withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifySigWithLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1BcSignatureCheck_withJavaSecurityPublicKey_(self, store, integrityCheck, key);
}

- (void)verifyMacWithByteArray:(IOSByteArray *)content
withLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck:(LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck *)integrityCheck
                 withCharArray:(IOSCharArray *)password {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifyMacWithByteArray_withLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck_withCharArray_(self, content, integrityCheck, password);
}

- (IOSByteArray *)calculateMacWithByteArray:(IOSByteArray *)content
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algorithm
withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:(LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)pbkdAlgorithm
                              withCharArray:(IOSCharArray *)password {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_calculateMacWithByteArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withCharArray_(self, content, algorithm, pbkdAlgorithm, password);
}

- (IOSCharArray *)extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)bcParam {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(self, bcParam);
}

- (void)engineStoreWithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)parameter {
  if (parameter == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'parameter' arg cannot be null");
  }
  if ([parameter isKindOfClass:[LibOrgBouncycastleJcajceBCFKSStoreParameter class]]) {
    LibOrgBouncycastleJcajceBCFKSStoreParameter *bcParam = (LibOrgBouncycastleJcajceBCFKSStoreParameter *) parameter;
    IOSCharArray *password = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(self, parameter);
    hmacPkbdAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withInt_(self, [bcParam getStorePBKDFConfig], 512 / 8);
    [self engineStoreWithJavaIoOutputStream:[bcParam getOutputStream] withCharArray:password];
  }
  else if ([parameter isKindOfClass:[LibOrgBouncycastleJcajceBCFKSLoadStoreParameter class]]) {
    LibOrgBouncycastleJcajceBCFKSLoadStoreParameter *bcParam = (LibOrgBouncycastleJcajceBCFKSLoadStoreParameter *) parameter;
    if ([bcParam getStoreSignatureKey] != nil) {
      signatureAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateSignatureAlgIdWithJavaSecurityKey_withLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm_(self, [bcParam getStoreSignatureKey], [bcParam getStoreSignatureAlgorithm]);
      hmacPkbdAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withInt_(self, [bcParam getStorePBKDFConfig], 512 / 8);
      if ([bcParam getStoreEncryptionAlgorithm] == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_EncryptionAlgorithm, AES256_CCM)) {
        storeEncryptionAlgorithm_ = JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM);
      }
      else {
        storeEncryptionAlgorithm_ = JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_wrap_pad);
      }
      if ([bcParam getStoreMacAlgorithm] == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_MacAlgorithm, HmacSHA512)) {
        hmacAlgorithm_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
      }
      else {
        hmacAlgorithm_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_hmacWithSHA3_512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
      }
      IOSCharArray *password = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(self, bcParam);
      LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *encStoreData = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getEncryptedObjectStoreDataWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_(self, signatureAlgorithm_, password);
      @try {
        JavaSecuritySignature *sig = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createSignatureWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(signatureAlgorithm_)) getAlgorithm])) getId]];
        [((JavaSecuritySignature *) nil_chk(sig)) initSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>) cast_check([bcParam getStoreSignatureKey], JavaSecurityPrivateKey_class_())];
        [sig updateWithByteArray:[((LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *) nil_chk(encStoreData)) getEncoded]];
        LibOrgBouncycastleAsn1BcSignatureCheck *signatureCheck;
        IOSObjectArray *certs = [bcParam getStoreCertificates];
        if (certs != nil) {
          IOSObjectArray *certificates = [IOSObjectArray newArrayWithLength:certs->size_ type:LibOrgBouncycastleAsn1X509X509Certificate_class_()];
          for (jint i = 0; i != certificates->size_; i++) {
            (void) IOSObjectArray_Set(certificates, i, LibOrgBouncycastleAsn1X509X509Certificate_getInstanceWithId_([((JavaSecurityCertX509Certificate *) nil_chk(IOSObjectArray_Get(certs, i))) getEncoded]));
          }
          signatureCheck = new_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509X509CertificateArray_withByteArray_(signatureAlgorithm_, certificates, [sig sign]);
        }
        else {
          signatureCheck = new_LibOrgBouncycastleAsn1BcSignatureCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(signatureAlgorithm_, [sig sign]);
        }
        LibOrgBouncycastleAsn1BcObjectStore *store = new_LibOrgBouncycastleAsn1BcObjectStore_initWithLibOrgBouncycastleAsn1BcEncryptedObjectStoreData_withLibOrgBouncycastleAsn1BcObjectStoreIntegrityCheck_(encStoreData, new_LibOrgBouncycastleAsn1BcObjectStoreIntegrityCheck_initWithLibOrgBouncycastleAsn1BcSignatureCheck_(signatureCheck));
        [((JavaIoOutputStream *) nil_chk([bcParam getOutputStream])) writeWithByteArray:[store getEncoded]];
        [((JavaIoOutputStream *) nil_chk([bcParam getOutputStream])) flush];
      }
      @catch (JavaSecurityGeneralSecurityException *e) {
        @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"error creating signature: ", [e getMessage]), e);
      }
    }
    else {
      IOSCharArray *password = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(self, bcParam);
      hmacPkbdAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withInt_(self, [bcParam getStorePBKDFConfig], 512 / 8);
      if ([bcParam getStoreEncryptionAlgorithm] == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_EncryptionAlgorithm, AES256_CCM)) {
        storeEncryptionAlgorithm_ = JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM);
      }
      else {
        storeEncryptionAlgorithm_ = JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_wrap_pad);
      }
      if ([bcParam getStoreMacAlgorithm] == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_MacAlgorithm, HmacSHA512)) {
        hmacAlgorithm_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
      }
      else {
        hmacAlgorithm_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_hmacWithSHA3_512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
      }
      [self engineStoreWithJavaIoOutputStream:[bcParam getOutputStream] withCharArray:password];
    }
  }
  else if ([parameter isKindOfClass:[LibOrgBouncycastleJcajceBCLoadStoreParameter class]]) {
    LibOrgBouncycastleJcajceBCLoadStoreParameter *bcParam = (LibOrgBouncycastleJcajceBCLoadStoreParameter *) parameter;
    [self engineStoreWithJavaIoOutputStream:[bcParam getOutputStream] withCharArray:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(self, parameter)];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"no support for 'parameter' of type ", [[parameter java_getClass] getName]));
  }
}

- (void)engineStoreWithJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                            withCharArray:(IOSCharArray *)password {
  if (creationDate_ == nil) {
    @throw new_JavaIoIOException_initWithNSString_(@"KeyStore not initialized");
  }
  LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *encStoreData = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getEncryptedObjectStoreDataWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_(self, hmacAlgorithm_, password);
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt))) isEqual:[((LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *) nil_chk(hmacPkbdAlgorithm_)) getAlgorithm]]) {
    LibOrgBouncycastleAsn1MiscScryptParams *sParams = LibOrgBouncycastleAsn1MiscScryptParams_getInstanceWithId_([((LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *) nil_chk(hmacPkbdAlgorithm_)) getParameters]);
    hmacPkbdAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withInt_(self, hmacPkbdAlgorithm_, [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1MiscScryptParams *) nil_chk(sParams)) getKeyLength])) intValue]);
  }
  else {
    LibOrgBouncycastleAsn1PkcsPBKDF2Params *pbkdf2Params = LibOrgBouncycastleAsn1PkcsPBKDF2Params_getInstanceWithId_([((LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *) nil_chk(hmacPkbdAlgorithm_)) getParameters]);
    hmacPkbdAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withInt_(self, hmacPkbdAlgorithm_, [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1PkcsPBKDF2Params *) nil_chk(pbkdf2Params)) getKeyLength])) intValue]);
  }
  IOSByteArray *mac;
  @try {
    mac = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_calculateMacWithByteArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withCharArray_(self, [((LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *) nil_chk(encStoreData)) getEncoded], hmacAlgorithm_, hmacPkbdAlgorithm_, password);
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"cannot calculate mac: ", [e getMessage]));
  }
  LibOrgBouncycastleAsn1BcObjectStore *store = new_LibOrgBouncycastleAsn1BcObjectStore_initWithLibOrgBouncycastleAsn1BcEncryptedObjectStoreData_withLibOrgBouncycastleAsn1BcObjectStoreIntegrityCheck_(encStoreData, new_LibOrgBouncycastleAsn1BcObjectStoreIntegrityCheck_initWithLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck_(new_LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withByteArray_(hmacAlgorithm_, hmacPkbdAlgorithm_, mac)));
  [((JavaIoOutputStream *) nil_chk(outputStream)) writeWithByteArray:[store getEncoded]];
  [outputStream flush];
}

- (LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *)getEncryptedObjectStoreDataWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)integrityAlgorithm
                                                                                                                     withCharArray:(IOSCharArray *)password {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getEncryptedObjectStoreDataWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_(self, integrityAlgorithm, password);
}

- (void)engineLoadWithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)parameter {
  if (parameter == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'parameter' arg cannot be null");
  }
  if ([parameter isKindOfClass:[LibOrgBouncycastleJcajceBCFKSLoadStoreParameter class]]) {
    LibOrgBouncycastleJcajceBCFKSLoadStoreParameter *bcParam = (LibOrgBouncycastleJcajceBCFKSLoadStoreParameter *) parameter;
    IOSCharArray *password = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(self, bcParam);
    hmacPkbdAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withInt_(self, [bcParam getStorePBKDFConfig], 512 / 8);
    if ([bcParam getStoreEncryptionAlgorithm] == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_EncryptionAlgorithm, AES256_CCM)) {
      storeEncryptionAlgorithm_ = JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM);
    }
    else {
      storeEncryptionAlgorithm_ = JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_wrap_pad);
    }
    if ([bcParam getStoreMacAlgorithm] == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_MacAlgorithm, HmacSHA512)) {
      hmacAlgorithm_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
    }
    else {
      hmacAlgorithm_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_hmacWithSHA3_512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
    }
    self->verificationKey_ = (id<JavaSecurityPublicKey>) cast_check([bcParam getStoreSignatureKey], JavaSecurityPublicKey_class_());
    self->validator_ = [bcParam getCertChainValidator];
    self->signatureAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateSignatureAlgIdWithJavaSecurityKey_withLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm_(self, verificationKey_, [bcParam getStoreSignatureAlgorithm]);
    LibOrgBouncycastleAsn1X509AlgorithmIdentifier *presetHmacAlgorithm = hmacAlgorithm_;
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *presetStoreEncryptionAlgorithm = storeEncryptionAlgorithm_;
    JavaIoInputStream *inputStream = [bcParam getInputStream];
    [self engineLoadWithJavaIoInputStream:inputStream withCharArray:password];
    if (inputStream != nil) {
      if (!LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_isSimilarHmacPbkdWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_(self, [bcParam getStorePBKDFConfig], hmacPkbdAlgorithm_) || ![((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(presetStoreEncryptionAlgorithm)) isEqual:storeEncryptionAlgorithm_]) {
        @throw new_JavaIoIOException_initWithNSString_(@"configuration parameters do not match existing store");
      }
    }
  }
  else if ([parameter isKindOfClass:[LibOrgBouncycastleJcajceBCLoadStoreParameter class]]) {
    LibOrgBouncycastleJcajceBCLoadStoreParameter *bcParam = (LibOrgBouncycastleJcajceBCLoadStoreParameter *) parameter;
    [self engineLoadWithJavaIoInputStream:[bcParam getInputStream] withCharArray:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(self, parameter)];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"no support for 'parameter' of type ", [[parameter java_getClass] getName]));
  }
}

- (jboolean)isSimilarHmacPbkdWithLibOrgBouncycastleCryptoUtilPBKDFConfig:(LibOrgBouncycastleCryptoUtilPBKDFConfig *)storePBKDFConfig
                         withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:(LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)hmacPkbdAlgorithm {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_isSimilarHmacPbkdWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_(self, storePBKDFConfig, hmacPkbdAlgorithm);
}

- (void)engineLoadWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                          withCharArray:(IOSCharArray *)password {
  [((id<JavaUtilMap>) nil_chk(entries_)) clear];
  [((id<JavaUtilMap>) nil_chk(privateKeyCache_)) clear];
  lastModifiedDate_ = creationDate_ = nil;
  hmacAlgorithm_ = nil;
  if (inputStream == nil) {
    lastModifiedDate_ = creationDate_ = new_JavaUtilDate_init();
    verificationKey_ = nil;
    validator_ = nil;
    hmacAlgorithm_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
    hmacPkbdAlgorithm_ = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(self, JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBKDF2), 512 / 8);
    return;
  }
  LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inputStream);
  LibOrgBouncycastleAsn1BcObjectStore *store;
  @try {
    store = LibOrgBouncycastleAsn1BcObjectStore_getInstanceWithId_([aIn readObject]);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_([e getMessage]);
  }
  LibOrgBouncycastleAsn1BcObjectStoreIntegrityCheck *integrityCheck = [((LibOrgBouncycastleAsn1BcObjectStore *) nil_chk(store)) getIntegrityCheck];
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *integrityAlg;
  if ([((LibOrgBouncycastleAsn1BcObjectStoreIntegrityCheck *) nil_chk(integrityCheck)) getType] == LibOrgBouncycastleAsn1BcObjectStoreIntegrityCheck_PBKD_MAC_CHECK) {
    LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck *pbkdMacIntegrityCheck = LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck_getInstanceWithId_([integrityCheck getIntegrityCheck]);
    hmacAlgorithm_ = [((LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck *) nil_chk(pbkdMacIntegrityCheck)) getMacAlgorithm];
    hmacPkbdAlgorithm_ = [pbkdMacIntegrityCheck getPbkdAlgorithm];
    integrityAlg = hmacAlgorithm_;
    @try {
      LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifyMacWithByteArray_withLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck_withCharArray_(self, [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([store getStoreData])) toASN1Primitive])) getEncoded], pbkdMacIntegrityCheck, password);
    }
    @catch (JavaSecurityNoSuchProviderException *e) {
      @throw new_JavaIoIOException_initWithNSString_([e getMessage]);
    }
  }
  else if ([integrityCheck getType] == LibOrgBouncycastleAsn1BcObjectStoreIntegrityCheck_SIG_CHECK) {
    LibOrgBouncycastleAsn1BcSignatureCheck *sigCheck = LibOrgBouncycastleAsn1BcSignatureCheck_getInstanceWithId_([integrityCheck getIntegrityCheck]);
    integrityAlg = [((LibOrgBouncycastleAsn1BcSignatureCheck *) nil_chk(sigCheck)) getSignatureAlgorithm];
    @try {
      IOSObjectArray *certificates = [sigCheck getCertificates];
      if (validator_ != nil) {
        if (certificates == nil) {
          @throw new_JavaIoIOException_initWithNSString_(@"validator specified but no certifcates in store");
        }
        JavaSecurityCertCertificateFactory *certFact = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createCertificateFactoryWithNSString:@"X.509"];
        IOSObjectArray *certs = [IOSObjectArray newArrayWithLength:certificates->size_ type:JavaSecurityCertX509Certificate_class_()];
        for (jint i = 0; i != certs->size_; i++) {
          (void) IOSObjectArray_Set(certs, i, (JavaSecurityCertX509Certificate *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(certFact)) generateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(IOSObjectArray_Get(certificates, i))) getEncoded])], [JavaSecurityCertX509Certificate class]));
        }
        if ([((id<LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_CertChainValidator>) nil_chk(validator_)) isValidWithJavaSecurityCertX509CertificateArray:certs]) {
          LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifySigWithLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1BcSignatureCheck_withJavaSecurityPublicKey_(self, [store getStoreData], sigCheck, [((JavaSecurityCertX509Certificate *) nil_chk(IOSObjectArray_Get(certs, 0))) getPublicKey]);
        }
        else {
          @throw new_JavaIoIOException_initWithNSString_(@"certificate chain in key store signature not valid");
        }
      }
      else {
        LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifySigWithLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1BcSignatureCheck_withJavaSecurityPublicKey_(self, [store getStoreData], sigCheck, verificationKey_);
      }
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
      @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"error verifying signature: ", [e getMessage]), e);
    }
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"BCFKS KeyStore unable to recognize integrity check.");
  }
  id<LibOrgBouncycastleAsn1ASN1Encodable> sData = [store getStoreData];
  LibOrgBouncycastleAsn1BcObjectStoreData *storeData;
  if ([sData isKindOfClass:[LibOrgBouncycastleAsn1BcEncryptedObjectStoreData class]]) {
    LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *encryptedStoreData = (LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *) sData;
    LibOrgBouncycastleAsn1X509AlgorithmIdentifier *protectAlgId = [((LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *) nil_chk(encryptedStoreData)) getEncryptionAlgorithm];
    storeData = LibOrgBouncycastleAsn1BcObjectStoreData_getInstanceWithId_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decryptDataWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_withByteArray_(self, @"STORE_ENCRYPTION", protectAlgId, password, [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk([encryptedStoreData getEncryptedContent])) getOctets]));
  }
  else {
    storeData = LibOrgBouncycastleAsn1BcObjectStoreData_getInstanceWithId_(sData);
  }
  @try {
    creationDate_ = [((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk([((LibOrgBouncycastleAsn1BcObjectStoreData *) nil_chk(storeData)) getCreationDate])) getDate];
    lastModifiedDate_ = [((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk([storeData getLastModifiedDate])) getDate];
  }
  @catch (JavaTextParseException *e) {
    @throw new_JavaIoIOException_initWithNSString_(@"BCFKS KeyStore unable to parse store data information.");
  }
  if (![((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([storeData getIntegrityAlgorithm])) isEqual:integrityAlg]) {
    @throw new_JavaIoIOException_initWithNSString_(@"BCFKS KeyStore storeData integrity algorithm does not match store integrity algorithm.");
  }
  for (id<JavaUtilIterator> it = [((LibOrgBouncycastleAsn1BcObjectDataSequence *) nil_chk([storeData getObjectDataSequence])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    LibOrgBouncycastleAsn1BcObjectData *objData = LibOrgBouncycastleAsn1BcObjectData_getInstanceWithId_([it next]);
    (void) [entries_ putWithId:[((LibOrgBouncycastleAsn1BcObjectData *) nil_chk(objData)) getIdentifier] withId:objData];
  }
}

- (IOSByteArray *)decryptDataWithNSString:(NSString *)purpose
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)protectAlgId
                            withCharArray:(IOSCharArray *)password
                            withByteArray:(IOSByteArray *)encryptedData {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decryptDataWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_withByteArray_(self, purpose, protectAlgId, password, encryptedData);
}

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)generateSignatureAlgIdWithJavaSecurityKey:(id<JavaSecurityKey>)key
                      withLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm:(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm *)sigAlg {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateSignatureAlgIdWithJavaSecurityKey_withLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm_(self, key, sigAlg);
}

- (LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig:(LibOrgBouncycastleCryptoUtilPBKDFConfig *)pbkdfConfig
                                                                                                                    withInt:(jint)keySizeInBytes {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withInt_(self, pbkdfConfig, keySizeInBytes);
}

- (LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:(LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)baseAlg
                                                                                                                        withInt:(jint)keySizeInBytes {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withInt_(self, baseAlg, keySizeInBytes);
}

- (LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *)generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)derivationAlgorithm
                                                                                                                       withInt:(jint)keySizeInBytes {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(self, derivationAlgorithm, keySizeInBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertCertificate;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "LJavaxCryptoCipher;", 0x2, 15, 16, 17, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1BcEncryptedPrivateKeyData;", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 21, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, 14, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 7, 14, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, 27, -1, -1 },
    { NULL, "Z", 0x1, 28, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 33, 34, 35, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, 38, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 40, 41, -1, -1, -1 },
    { NULL, "[B", 0x2, 42, 43, 41, -1, -1, -1 },
    { NULL, "[C", 0x2, 44, 45, 35, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 45, 47, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 48, 49, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1BcEncryptedObjectStoreData;", 0x2, 50, 51, 52, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 45, 47, -1, -1, -1 },
    { NULL, "Z", 0x2, 54, 55, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 56, 49, -1, -1, -1 },
    { NULL, "[B", 0x2, 57, 58, 35, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x2, 59, 60, 35, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1PkcsKeyDerivationFunc;", 0x2, 61, 62, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1PkcsKeyDerivationFunc;", 0x2, 61, 63, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1PkcsKeyDerivationFunc;", 0x2, 61, 64, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getPublicKeyAlgWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[2].selector = @selector(engineGetKeyWithNSString:withCharArray:);
  methods[3].selector = @selector(engineGetCertificateChainWithNSString:);
  methods[4].selector = @selector(engineGetCertificateWithNSString:);
  methods[5].selector = @selector(decodeCertificateWithId:);
  methods[6].selector = @selector(engineGetCreationDateWithNSString:);
  methods[7].selector = @selector(engineSetKeyEntryWithNSString:withJavaSecurityKey:withCharArray:withJavaSecurityCertCertificateArray:);
  methods[8].selector = @selector(createCipherWithNSString:withByteArray:);
  methods[9].selector = @selector(getDefaultSecureRandom);
  methods[10].selector = @selector(createPrivateKeySequenceWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo:withJavaSecurityCertCertificateArray:);
  methods[11].selector = @selector(engineSetKeyEntryWithNSString:withByteArray:withJavaSecurityCertCertificateArray:);
  methods[12].selector = @selector(engineSetCertificateEntryWithNSString:withJavaSecurityCertCertificate:);
  methods[13].selector = @selector(extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData:withJavaUtilDate:);
  methods[14].selector = @selector(engineDeleteEntryWithNSString:);
  methods[15].selector = @selector(engineAliases);
  methods[16].selector = @selector(engineContainsAliasWithNSString:);
  methods[17].selector = @selector(engineSize);
  methods[18].selector = @selector(engineIsKeyEntryWithNSString:);
  methods[19].selector = @selector(engineIsCertificateEntryWithNSString:);
  methods[20].selector = @selector(engineGetCertificateAliasWithJavaSecurityCertCertificate:);
  methods[21].selector = @selector(generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:withNSString:withCharArray:withInt:);
  methods[22].selector = @selector(verifySigWithLibOrgBouncycastleAsn1ASN1Encodable:withLibOrgBouncycastleAsn1BcSignatureCheck:withJavaSecurityPublicKey:);
  methods[23].selector = @selector(verifyMacWithByteArray:withLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck:withCharArray:);
  methods[24].selector = @selector(calculateMacWithByteArray:withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:withCharArray:);
  methods[25].selector = @selector(extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter:);
  methods[26].selector = @selector(engineStoreWithJavaSecurityKeyStore_LoadStoreParameter:);
  methods[27].selector = @selector(engineStoreWithJavaIoOutputStream:withCharArray:);
  methods[28].selector = @selector(getEncryptedObjectStoreDataWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withCharArray:);
  methods[29].selector = @selector(engineLoadWithJavaSecurityKeyStore_LoadStoreParameter:);
  methods[30].selector = @selector(isSimilarHmacPbkdWithLibOrgBouncycastleCryptoUtilPBKDFConfig:withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:);
  methods[31].selector = @selector(engineLoadWithJavaIoInputStream:withCharArray:);
  methods[32].selector = @selector(decryptDataWithNSString:withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withCharArray:withByteArray:);
  methods[33].selector = @selector(generateSignatureAlgIdWithJavaSecurityKey:withLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm:);
  methods[34].selector = @selector(generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig:withInt:);
  methods[35].selector = @selector(generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc:withInt:);
  methods[36].selector = @selector(generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "oidMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 65, 66, -1 },
    { "publicAlgMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 67, 68, -1 },
    { "verificationKey_", "LJavaSecurityPublicKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "validator_", "LLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_CertChainValidator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CERTIFICATE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 69, -1, -1 },
    { "PRIVATE_KEY", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
    { "SECRET_KEY", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 71, -1, -1 },
    { "PROTECTED_PRIVATE_KEY", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
    { "PROTECTED_SECRET_KEY", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "entries_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 74, -1 },
    { "privateKeyCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 75, -1 },
    { "hmacAlgorithm_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hmacPkbdAlgorithm_", "LLibOrgBouncycastleAsn1PkcsKeyDerivationFunc;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signatureAlgorithm_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "creationDate_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastModifiedDate_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storeEncryptionAlgorithm_", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getPublicKeyAlg", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "engineGetKey", "LNSString;[C", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityUnrecoverableKeyException;", "engineGetCertificateChain", "LNSString;", "engineGetCertificate", "decodeCertificate", "LNSObject;", "engineGetCreationDate", "engineSetKeyEntry", "LNSString;LJavaSecurityKey;[C[LJavaSecurityCertCertificate;", "LJavaSecurityKeyStoreException;", "createCipher", "LNSString;[B", "LJavaSecurityNoSuchAlgorithmException;LJavaxCryptoNoSuchPaddingException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;", "createPrivateKeySequence", "LLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo;[LJavaSecurityCertCertificate;", "LJavaSecurityCertCertificateEncodingException;", "LNSString;[B[LJavaSecurityCertCertificate;", "engineSetCertificateEntry", "LNSString;LJavaSecurityCertCertificate;", "extractCreationDate", "LLibOrgBouncycastleAsn1BcObjectData;LJavaUtilDate;", "engineDeleteEntry", "()Ljava/util/Enumeration<Ljava/lang/String;>;", "engineContainsAlias", "engineIsKeyEntry", "engineIsCertificateEntry", "engineGetCertificateAlias", "LJavaSecurityCertCertificate;", "generateKey", "LLibOrgBouncycastleAsn1PkcsKeyDerivationFunc;LNSString;[CI", "LJavaIoIOException;", "verifySig", "LLibOrgBouncycastleAsn1ASN1Encodable;LLibOrgBouncycastleAsn1BcSignatureCheck;LJavaSecurityPublicKey;", "LJavaSecurityGeneralSecurityException;LJavaIoIOException;", "verifyMac", "[BLLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck;[C", "LJavaSecurityNoSuchAlgorithmException;LJavaIoIOException;LJavaSecurityNoSuchProviderException;", "calculateMac", "[BLLibOrgBouncycastleAsn1X509AlgorithmIdentifier;LLibOrgBouncycastleAsn1PkcsKeyDerivationFunc;[C", "extractPassword", "LJavaSecurityKeyStore_LoadStoreParameter;", "engineStore", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaIoIOException;", "LJavaIoOutputStream;[C", "LJavaIoIOException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityCertCertificateException;", "getEncryptedObjectStoreData", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[C", "LJavaIoIOException;LJavaSecurityNoSuchAlgorithmException;", "engineLoad", "isSimilarHmacPbkd", "LLibOrgBouncycastleCryptoUtilPBKDFConfig;LLibOrgBouncycastleAsn1PkcsKeyDerivationFunc;", "LJavaIoInputStream;[C", "decryptData", "LNSString;LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[C[B", "generateSignatureAlgId", "LJavaSecurityKey;LLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm;", "generatePkbdAlgorithmIdentifier", "LLibOrgBouncycastleCryptoUtilPBKDFConfig;I", "LLibOrgBouncycastleAsn1PkcsKeyDerivationFunc;I", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;I", &LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap, "Ljava/util/Map<Ljava/lang/String;Llib/org/bouncycastle/asn1/ASN1ObjectIdentifier;>;", &LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap, "Ljava/util/Map<Llib/org/bouncycastle/asn1/ASN1ObjectIdentifier;Ljava/lang/String;>;", &LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_CERTIFICATE, &LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY, &LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SECRET_KEY, &LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY, &LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_SECRET_KEY, "Ljava/util/Map<Ljava/lang/String;Llib/org/bouncycastle/asn1/bc/ObjectData;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/security/PrivateKey;>;", "LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std;LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def;LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi;LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared;LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared;LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi = { "BcFKSKeyStoreSpi", "lib.org.bouncycastle.jcajce.provider.keystore.bcfks", ptrTable, methods, fields, 7, 0x0, 37, 18, -1, 76, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi class]) {
    LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap = new_JavaUtilHashMap_init();
    LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap = new_JavaUtilHashMap_init();
    {
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"DESEDE" withId:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, desEDE)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"TRIPLEDES" withId:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, desEDE)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"TDEA" withId:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, desEDE)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"HMACSHA1" withId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA1)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"HMACSHA224" withId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA224)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"HMACSHA256" withId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA256)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"HMACSHA384" withId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA384)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"HMACSHA512" withId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA512)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"SEED" withId:JreLoadStatic(LibOrgBouncycastleAsn1KisaKISAObjectIdentifiers, id_seedCBC)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"CAMELLIA.128" withId:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia128_cbc)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"CAMELLIA.192" withId:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia192_cbc)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"CAMELLIA.256" withId:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia256_cbc)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"ARIA.128" withId:JreLoadStatic(LibOrgBouncycastleAsn1NsriNSRIObjectIdentifiers, id_aria128_cbc)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"ARIA.192" withId:JreLoadStatic(LibOrgBouncycastleAsn1NsriNSRIObjectIdentifiers, id_aria192_cbc)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_oidMap putWithId:@"ARIA.256" withId:JreLoadStatic(LibOrgBouncycastleAsn1NsriNSRIObjectIdentifiers, id_aria256_cbc)];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap putWithId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, rsaEncryption) withId:@"RSA"];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap putWithId:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey) withId:@"EC"];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap putWithId:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm) withId:@"DH"];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap putWithId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement) withId:@"DH"];
      (void) [LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap putWithId:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_dsa) withId:@"DSA"];
    }
    LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_CERTIFICATE = JavaMathBigInteger_valueOfWithLong_(0);
    LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY = JavaMathBigInteger_valueOfWithLong_(1);
    LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SECRET_KEY = JavaMathBigInteger_valueOfWithLong_(2);
    LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY = JavaMathBigInteger_valueOfWithLong_(3);
    LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_SECRET_KEY = JavaMathBigInteger_valueOfWithLong_(4);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi)
  }
}

@end

NSString *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getPublicKeyAlgWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid) {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_initialize();
  NSString *algName = [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_publicAlgMap)) getWithId:oid];
  if (algName != nil) {
    return algName;
  }
  return [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId];
}

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  JavaSecurityKeyStoreSpi_init(self);
  self->entries_ = new_JavaUtilHashMap_init();
  self->privateKeyCache_ = new_JavaUtilHashMap_init();
  self->storeEncryptionAlgorithm_ = JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM);
  self->helper_ = helper;
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_, helper)
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi, initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_, helper)
}

id<JavaSecurityKey> LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_engineGetKeyWithNSString_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, NSString *alias, IOSCharArray *password) {
  LibOrgBouncycastleAsn1BcObjectData *ent = [((id<JavaUtilMap>) nil_chk(self->entries_)) getWithId:alias];
  if (ent != nil) {
    if ([((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PRIVATE_KEY] || [((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_PRIVATE_KEY]) {
      id<JavaSecurityPrivateKey> cachedKey = [((id<JavaUtilMap>) nil_chk(self->privateKeyCache_)) getWithId:alias];
      if (cachedKey != nil) {
        return cachedKey;
      }
      LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *encPrivData = LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData_getInstanceWithId_([ent getData]);
      LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *encInfo = LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_getInstanceWithId_([((LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *) nil_chk(encPrivData)) getEncryptedPrivateKeyInfo]);
      @try {
        LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *pInfo = LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decryptDataWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_withByteArray_(self, @"PRIVATE_KEY_ENCRYPTION", [((LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *) nil_chk(encInfo)) getEncryptionAlgorithm], password, [encInfo getEncryptedData]));
        JavaSecurityKeyFactory *kFact = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createKeyFactoryWithNSString:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getPublicKeyAlgWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(pInfo)) getPrivateKeyAlgorithm])) getAlgorithm])];
        id<JavaSecurityPrivateKey> privateKey = [((JavaSecurityKeyFactory *) nil_chk(kFact)) generatePrivateWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_([pInfo getEncoded])];
        (void) [self->privateKeyCache_ putWithId:alias withId:privateKey];
        return privateKey;
      }
      @catch (JavaLangException *e) {
        @throw new_JavaSecurityUnrecoverableKeyException_initWithNSString_(JreStrcat("$$$$", @"BCFKS KeyStore unable to recover private key (", alias, @"): ", [e getMessage]));
      }
    }
    else if ([((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SECRET_KEY] || [((JavaMathBigInteger *) nil_chk([ent getType])) isEqual:LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_PROTECTED_SECRET_KEY]) {
      LibOrgBouncycastleAsn1BcEncryptedSecretKeyData *encKeyData = LibOrgBouncycastleAsn1BcEncryptedSecretKeyData_getInstanceWithId_([ent getData]);
      @try {
        LibOrgBouncycastleAsn1BcSecretKeyData *keyData = LibOrgBouncycastleAsn1BcSecretKeyData_getInstanceWithId_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decryptDataWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_withByteArray_(self, @"SECRET_KEY_ENCRYPTION", [((LibOrgBouncycastleAsn1BcEncryptedSecretKeyData *) nil_chk(encKeyData)) getKeyEncryptionAlgorithm], password, [encKeyData getEncryptedKeyData]));
        JavaxCryptoSecretKeyFactory *kFact = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createSecretKeyFactoryWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1BcSecretKeyData *) nil_chk(keyData)) getKeyAlgorithm])) getId]];
        return [((JavaxCryptoSecretKeyFactory *) nil_chk(kFact)) generateSecretWithJavaSecuritySpecKeySpec:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_([keyData getKeyBytes], [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([keyData getKeyAlgorithm])) getId])];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaSecurityUnrecoverableKeyException_initWithNSString_(JreStrcat("$$$$", @"BCFKS KeyStore unable to recover secret key (", alias, @"): ", [e getMessage]));
      }
    }
    else {
      @throw new_JavaSecurityUnrecoverableKeyException_initWithNSString_(JreStrcat("$$$", @"BCFKS KeyStore unable to recover secret key (", alias, @"): type not recognized"));
    }
  }
  return nil;
}

JavaSecurityCertCertificate *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decodeCertificateWithId_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id cert) {
  if (self->helper_ != nil) {
    @try {
      JavaSecurityCertCertificateFactory *certFact = [self->helper_ createCertificateFactoryWithNSString:@"X.509"];
      return [((JavaSecurityCertCertificateFactory *) nil_chk(certFact)) generateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(LibOrgBouncycastleAsn1X509X509Certificate_getInstanceWithId_(cert))) getEncoded])];
    }
    @catch (JavaLangException *e) {
      return nil;
    }
  }
  else {
    @try {
      JavaSecurityCertCertificateFactory *certFact = JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509");
      return [((JavaSecurityCertCertificateFactory *) nil_chk(certFact)) generateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_([((LibOrgBouncycastleAsn1X509X509Certificate *) nil_chk(LibOrgBouncycastleAsn1X509X509Certificate_getInstanceWithId_(cert))) getEncoded])];
    }
    @catch (JavaLangException *e) {
      return nil;
    }
  }
}

JavaxCryptoCipher *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, NSString *algorithm, IOSByteArray *keyBytes) {
  JavaxCryptoCipher *c = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createCipherWithNSString:algorithm];
  [((JavaxCryptoCipher *) nil_chk(c)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(keyBytes, @"AES")];
  return c;
}

JavaSecuritySecureRandom *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getDefaultSecureRandom(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self) {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
}

LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createPrivateKeySequenceWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *encryptedPrivateKeyInfo, IOSObjectArray *chain) {
  IOSObjectArray *certChain = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(chain))->size_ type:LibOrgBouncycastleAsn1X509X509Certificate_class_()];
  for (jint i = 0; i != chain->size_; i++) {
    (void) IOSObjectArray_Set(certChain, i, LibOrgBouncycastleAsn1X509X509Certificate_getInstanceWithId_([((JavaSecurityCertCertificate *) nil_chk(IOSObjectArray_Get(chain, i))) getEncoded]));
  }
  return new_LibOrgBouncycastleAsn1BcEncryptedPrivateKeyData_initWithLibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_withLibOrgBouncycastleAsn1X509X509CertificateArray_(encryptedPrivateKeyInfo, certChain);
}

JavaUtilDate *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractCreationDateWithLibOrgBouncycastleAsn1BcObjectData_withJavaUtilDate_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1BcObjectData *entry_, JavaUtilDate *creationDate) {
  @try {
    creationDate = [((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk([((LibOrgBouncycastleAsn1BcObjectData *) nil_chk(entry_)) getCreationDate])) getDate];
  }
  @catch (JavaTextParseException *e) {
  }
  return creationDate;
}

IOSByteArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withNSString_withCharArray_withInt_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *pbkdAlgorithm, NSString *purpose, IOSCharArray *password, jint defKeySize) {
  IOSByteArray *encPassword = LibOrgBouncycastleCryptoPBEParametersGenerator_PKCS12PasswordToBytesWithCharArray_(password);
  IOSByteArray *differentiator = LibOrgBouncycastleCryptoPBEParametersGenerator_PKCS12PasswordToBytesWithCharArray_([((NSString *) nil_chk(purpose)) java_toCharArray]);
  jint keySizeInBytes = defKeySize;
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt))) isEqual:[((LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *) nil_chk(pbkdAlgorithm)) getAlgorithm]]) {
    LibOrgBouncycastleAsn1MiscScryptParams *params = LibOrgBouncycastleAsn1MiscScryptParams_getInstanceWithId_([pbkdAlgorithm getParameters]);
    if ([((LibOrgBouncycastleAsn1MiscScryptParams *) nil_chk(params)) getKeyLength] != nil) {
      keySizeInBytes = [((JavaMathBigInteger *) nil_chk([params getKeyLength])) intValue];
    }
    else if (keySizeInBytes == -1) {
      @throw new_JavaIoIOException_initWithNSString_(@"no keyLength found in ScryptParams");
    }
    return LibOrgBouncycastleCryptoGeneratorsSCrypt_generateWithByteArray_withByteArray_withInt_withInt_withInt_withInt_(LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(encPassword, differentiator), [params getSalt], [((JavaMathBigInteger *) nil_chk([params getCostParameter])) intValue], [((JavaMathBigInteger *) nil_chk([params getBlockSize])) intValue], [((JavaMathBigInteger *) nil_chk([params getBlockSize])) intValue], keySizeInBytes);
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([pbkdAlgorithm getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBKDF2)]) {
    LibOrgBouncycastleAsn1PkcsPBKDF2Params *pbkdf2Params = LibOrgBouncycastleAsn1PkcsPBKDF2Params_getInstanceWithId_([pbkdAlgorithm getParameters]);
    if ([((LibOrgBouncycastleAsn1PkcsPBKDF2Params *) nil_chk(pbkdf2Params)) getKeyLength] != nil) {
      keySizeInBytes = [((JavaMathBigInteger *) nil_chk([pbkdf2Params getKeyLength])) intValue];
    }
    else if (keySizeInBytes == -1) {
      @throw new_JavaIoIOException_initWithNSString_(@"no keyLength found in PBKDF2Params");
    }
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([pbkdf2Params getPrf])) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA512)]) {
      LibOrgBouncycastleCryptoGeneratorsPKCS5S2ParametersGenerator *pGen = new_LibOrgBouncycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init());
      [pGen init__WithByteArray:LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(encPassword, differentiator) withByteArray:[pbkdf2Params getSalt] withInt:[((JavaMathBigInteger *) nil_chk([pbkdf2Params getIterationCount])) intValue]];
      return [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([pGen generateDerivedParametersWithInt:keySizeInBytes * 8], [LibOrgBouncycastleCryptoParamsKeyParameter class])))) getKey];
    }
    else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([pbkdf2Params getPrf])) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_hmacWithSHA3_512)]) {
      LibOrgBouncycastleCryptoGeneratorsPKCS5S2ParametersGenerator *pGen = new_LibOrgBouncycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(512));
      [pGen init__WithByteArray:LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(encPassword, differentiator) withByteArray:[pbkdf2Params getSalt] withInt:[((JavaMathBigInteger *) nil_chk([pbkdf2Params getIterationCount])) intValue]];
      return [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([pGen generateDerivedParametersWithInt:keySizeInBytes * 8], [LibOrgBouncycastleCryptoParamsKeyParameter class])))) getKey];
    }
    else {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"BCFKS KeyStore: unrecognized MAC PBKD PRF: ", [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([pbkdf2Params getPrf])) getAlgorithm]));
    }
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"BCFKS KeyStore: unrecognized MAC PBKD.");
  }
}

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifySigWithLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1BcSignatureCheck_withJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id<LibOrgBouncycastleAsn1ASN1Encodable> store, LibOrgBouncycastleAsn1BcSignatureCheck *integrityCheck, id<JavaSecurityPublicKey> key) {
  JavaSecuritySignature *sig = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createSignatureWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1BcSignatureCheck *) nil_chk(integrityCheck)) getSignatureAlgorithm])) getAlgorithm])) getId]];
  [((JavaSecuritySignature *) nil_chk(sig)) initVerifyWithJavaSecurityPublicKey:key];
  [sig updateWithByteArray:[((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(store)) toASN1Primitive])) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER]];
  if (![sig verifyWithByteArray:[((LibOrgBouncycastleAsn1ASN1BitString *) nil_chk([integrityCheck getSignature])) getOctets]]) {
    @throw new_JavaIoIOException_initWithNSString_(@"BCFKS KeyStore corrupted: signature calculation failed");
  }
}

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_verifyMacWithByteArray_withLibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, IOSByteArray *content, LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck *integrityCheck, IOSCharArray *password) {
  IOSByteArray *check = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_calculateMacWithByteArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withCharArray_(self, content, [((LibOrgBouncycastleAsn1BcPbkdMacIntegrityCheck *) nil_chk(integrityCheck)) getMacAlgorithm], [integrityCheck getPbkdAlgorithm], password);
  if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(check, [integrityCheck getMac])) {
    @throw new_JavaIoIOException_initWithNSString_(@"BCFKS KeyStore corrupted: MAC calculation failed");
  }
}

IOSByteArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_calculateMacWithByteArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, IOSByteArray *content, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithm, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *pbkdAlgorithm, IOSCharArray *password) {
  NSString *algorithmId = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algorithm)) getAlgorithm])) getId];
  JavaxCryptoMac *mac = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createMacWithNSString:algorithmId];
  @try {
    [((JavaxCryptoMac *) nil_chk(mac)) init__WithJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withNSString_withCharArray_withInt_(self, pbkdAlgorithm, @"INTEGRITY_CHECK", ((password != nil) ? password : [IOSCharArray newArrayWithLength:0]), -1), algorithmId)];
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Cannot set up MAC calculation: ", [e getMessage]));
  }
  return [mac doFinalWithByteArray:content];
}

IOSCharArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_extractPasswordWithJavaSecurityKeyStore_LoadStoreParameter_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id<JavaSecurityKeyStore_LoadStoreParameter> bcParam) {
  id<JavaSecurityKeyStore_ProtectionParameter> protParam = [((id<JavaSecurityKeyStore_LoadStoreParameter>) nil_chk(bcParam)) getProtectionParameter];
  if (protParam == nil) {
    return nil;
  }
  else if ([protParam isKindOfClass:[JavaSecurityKeyStore_PasswordProtection class]]) {
    return [((JavaSecurityKeyStore_PasswordProtection *) protParam) getPassword];
  }
  else if ([protParam isKindOfClass:[JavaSecurityKeyStore_CallbackHandlerProtection class]]) {
    id<JavaxSecurityAuthCallbackCallbackHandler> handler = [((JavaSecurityKeyStore_CallbackHandlerProtection *) protParam) getCallbackHandler];
    JavaxSecurityAuthCallbackPasswordCallback *passwordCallback = new_JavaxSecurityAuthCallbackPasswordCallback_initWithNSString_withBoolean_(@"password: ", false);
    @try {
      [((id<JavaxSecurityAuthCallbackCallbackHandler>) nil_chk(handler)) handleWithJavaxSecurityAuthCallbackCallbackArray:[IOSObjectArray newArrayWithObjects:(id[]){ passwordCallback } count:1 type:JavaxSecurityAuthCallbackCallback_class_()]];
      return [passwordCallback getPassword];
    }
    @catch (JavaxSecurityAuthCallbackUnsupportedCallbackException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"PasswordCallback not recognised: ", [e getMessage]), e);
    }
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"no support for protection parameter of type ", [[protParam java_getClass] getName]));
  }
}

LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getEncryptedObjectStoreDataWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *integrityAlgorithm, IOSCharArray *password) {
  IOSObjectArray *dataArray = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(self->entries_)) values])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[self->entries_ size] type:LibOrgBouncycastleAsn1BcObjectData_class_()]];
  LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *pbkdAlgId = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withInt_(self, self->hmacPkbdAlgorithm_, 256 / 8);
  IOSByteArray *keyBytes = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withNSString_withCharArray_withInt_(self, pbkdAlgId, @"STORE_ENCRYPTION", ((password != nil) ? password : [IOSCharArray newArrayWithLength:0]), 256 / 8);
  LibOrgBouncycastleAsn1BcObjectStoreData *storeData = new_LibOrgBouncycastleAsn1BcObjectStoreData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withJavaUtilDate_withJavaUtilDate_withLibOrgBouncycastleAsn1BcObjectDataSequence_withNSString_(integrityAlgorithm, self->creationDate_, self->lastModifiedDate_, new_LibOrgBouncycastleAsn1BcObjectDataSequence_initWithLibOrgBouncycastleAsn1BcObjectDataArray_(dataArray), nil);
  LibOrgBouncycastleAsn1BcEncryptedObjectStoreData *encStoreData;
  @try {
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(self->storeEncryptionAlgorithm_)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM)]) {
      JavaxCryptoCipher *c = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(self, @"AES/CCM/NoPadding", keyBytes);
      IOSByteArray *encOut = [((JavaxCryptoCipher *) nil_chk(c)) doFinalWithByteArray:[storeData getEncoded]];
      JavaSecurityAlgorithmParameters *algorithmParameters = [c getParameters];
      LibOrgBouncycastleAsn1PkcsPBES2Parameters *pbeParams = new_LibOrgBouncycastleAsn1PkcsPBES2Parameters_initWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withLibOrgBouncycastleAsn1PkcsEncryptionScheme_(pbkdAlgId, new_LibOrgBouncycastleAsn1PkcsEncryptionScheme_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM), LibOrgBouncycastleAsn1CmsCmsCCMParameters_getInstanceWithId_([((JavaSecurityAlgorithmParameters *) nil_chk(algorithmParameters)) getEncoded])));
      encStoreData = new_LibOrgBouncycastleAsn1BcEncryptedObjectStoreData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2), pbeParams), encOut);
    }
    else {
      JavaxCryptoCipher *c = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_createCipherWithNSString_withByteArray_(self, @"AESKWP", keyBytes);
      IOSByteArray *encOut = [((JavaxCryptoCipher *) nil_chk(c)) doFinalWithByteArray:[storeData getEncoded]];
      LibOrgBouncycastleAsn1PkcsPBES2Parameters *pbeParams = new_LibOrgBouncycastleAsn1PkcsPBES2Parameters_initWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withLibOrgBouncycastleAsn1PkcsEncryptionScheme_(pbkdAlgId, new_LibOrgBouncycastleAsn1PkcsEncryptionScheme_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_wrap_pad)));
      encStoreData = new_LibOrgBouncycastleAsn1BcEncryptedObjectStoreData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2), pbeParams), encOut);
    }
  }
  @catch (JavaxCryptoNoSuchPaddingException *e) {
    @throw new_JavaSecurityNoSuchAlgorithmException_initWithNSString_([e description]);
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_JavaIoIOException_initWithNSString_([e description]);
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e) {
    @throw new_JavaIoIOException_initWithNSString_([e description]);
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_JavaIoIOException_initWithNSString_([e description]);
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw new_JavaIoIOException_initWithNSString_([e description]);
  }
  return encStoreData;
}

jboolean LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_isSimilarHmacPbkdWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleCryptoUtilPBKDFConfig *storePBKDFConfig, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *hmacPkbdAlgorithm) {
  if (![((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleCryptoUtilPBKDFConfig *) nil_chk(storePBKDFConfig)) getAlgorithm])) isEqual:[((LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *) nil_chk(hmacPkbdAlgorithm)) getAlgorithm]]) {
    return false;
  }
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt))) isEqual:[hmacPkbdAlgorithm getAlgorithm]]) {
    if (!([storePBKDFConfig isKindOfClass:[LibOrgBouncycastleCryptoUtilScryptConfig class]])) {
      return false;
    }
    LibOrgBouncycastleCryptoUtilScryptConfig *scryptConfig = (LibOrgBouncycastleCryptoUtilScryptConfig *) cast_chk(storePBKDFConfig, [LibOrgBouncycastleCryptoUtilScryptConfig class]);
    LibOrgBouncycastleAsn1MiscScryptParams *sParams = LibOrgBouncycastleAsn1MiscScryptParams_getInstanceWithId_([hmacPkbdAlgorithm getParameters]);
    if ([scryptConfig getSaltLength] != ((IOSByteArray *) nil_chk([((LibOrgBouncycastleAsn1MiscScryptParams *) nil_chk(sParams)) getSalt]))->size_ || [scryptConfig getBlockSize] != [((JavaMathBigInteger *) nil_chk([sParams getBlockSize])) intValue] || [scryptConfig getCostParameter] != [((JavaMathBigInteger *) nil_chk([sParams getCostParameter])) intValue] || [scryptConfig getParallelizationParameter] != [((JavaMathBigInteger *) nil_chk([sParams getParallelizationParameter])) intValue]) {
      return false;
    }
  }
  else {
    if (!([storePBKDFConfig isKindOfClass:[LibOrgBouncycastleCryptoUtilPBKDF2Config class]])) {
      return false;
    }
    LibOrgBouncycastleCryptoUtilPBKDF2Config *pbkdf2Config = (LibOrgBouncycastleCryptoUtilPBKDF2Config *) cast_chk(storePBKDFConfig, [LibOrgBouncycastleCryptoUtilPBKDF2Config class]);
    LibOrgBouncycastleAsn1PkcsPBKDF2Params *pbkdf2Params = LibOrgBouncycastleAsn1PkcsPBKDF2Params_getInstanceWithId_([hmacPkbdAlgorithm getParameters]);
    if ([pbkdf2Config getSaltLength] != ((IOSByteArray *) nil_chk([((LibOrgBouncycastleAsn1PkcsPBKDF2Params *) nil_chk(pbkdf2Params)) getSalt]))->size_ || [pbkdf2Config getIterationCount] != [((JavaMathBigInteger *) nil_chk([pbkdf2Params getIterationCount])) intValue]) {
      return false;
    }
  }
  return true;
}

IOSByteArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_decryptDataWithNSString_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withCharArray_withByteArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, NSString *purpose, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *protectAlgId, IOSCharArray *password, IOSByteArray *encryptedData) {
  if (![((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(protectAlgId)) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2)]) {
    @throw new_JavaIoIOException_initWithNSString_(@"BCFKS KeyStore cannot recognize protection algorithm.");
  }
  LibOrgBouncycastleAsn1PkcsPBES2Parameters *pbes2Parameters = LibOrgBouncycastleAsn1PkcsPBES2Parameters_getInstanceWithId_([protectAlgId getParameters]);
  LibOrgBouncycastleAsn1PkcsEncryptionScheme *algId = [((LibOrgBouncycastleAsn1PkcsPBES2Parameters *) nil_chk(pbes2Parameters)) getEncryptionScheme];
  @try {
    JavaxCryptoCipher *c;
    JavaSecurityAlgorithmParameters *algParams;
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsEncryptionScheme *) nil_chk(algId)) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CCM)]) {
      c = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createCipherWithNSString:@"AES/CCM/NoPadding"];
      algParams = [self->helper_ createAlgorithmParametersWithNSString:@"CCM"];
      LibOrgBouncycastleAsn1CmsCmsCCMParameters *ccmParameters = LibOrgBouncycastleAsn1CmsCmsCCMParameters_getInstanceWithId_([algId getParameters]);
      [((JavaSecurityAlgorithmParameters *) nil_chk(algParams)) init__WithByteArray:[((LibOrgBouncycastleAsn1CmsCmsCCMParameters *) nil_chk(ccmParameters)) getEncoded]];
    }
    else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_wrap_pad)]) {
      c = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createCipherWithNSString:@"AESKWP"];
      algParams = nil;
    }
    else {
      @throw new_JavaIoIOException_initWithNSString_(@"BCFKS KeyStore cannot recognize protection encryption algorithm.");
    }
    IOSByteArray *keyBytes = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateKeyWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withNSString_withCharArray_withInt_(self, [pbes2Parameters getKeyDerivationFunc], purpose, ((password != nil) ? password : [IOSCharArray newArrayWithLength:0]), 32);
    [((JavaxCryptoCipher *) nil_chk(c)) init__WithInt:JavaxCryptoCipher_DECRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(keyBytes, @"AES") withJavaSecurityAlgorithmParameters:algParams];
    IOSByteArray *rv = [c doFinalWithByteArray:encryptedData];
    return rv;
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_([e description]);
  }
}

LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generateSignatureAlgIdWithJavaSecurityKey_withLibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, id<JavaSecurityKey> key, LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm *sigAlg) {
  if (key == nil) {
    return nil;
  }
  if ([LibOrgBouncycastleJceInterfacesECKey_class_() isInstance:key]) {
    if (sigAlg == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm, SHA512withECDSA)) {
      return new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, ecdsa_with_SHA512));
    }
    else if (sigAlg == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm, SHA3_512withECDSA)) {
      return new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_ecdsa_with_sha3_512));
    }
  }
  if ([JavaSecurityInterfacesDSAKey_class_() isInstance:key]) {
    if (sigAlg == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm, SHA512withDSA)) {
      return new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, dsa_with_sha512));
    }
    else if (sigAlg == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm, SHA3_512withDSA)) {
      return new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_dsa_with_sha3_512));
    }
  }
  if ([JavaSecurityInterfacesRSAKey_class_() isInstance:key]) {
    if (sigAlg == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm, SHA512withRSA)) {
      return new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, sha512WithRSAEncryption), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
    }
    else if (sigAlg == JreLoadEnum(LibOrgBouncycastleJcajceBCFKSLoadStoreParameter_SignatureAlgorithm, SHA3_512withRSA)) {
      return new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_rsassa_pkcs1_v1_5_with_sha3_512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
    }
  }
  @throw new_JavaIoIOException_initWithNSString_(@"unknown signature algorithm");
}

LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleCryptoUtilPBKDFConfig_withInt_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleCryptoUtilPBKDFConfig *pbkdfConfig, jint keySizeInBytes) {
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt))) isEqual:[((LibOrgBouncycastleCryptoUtilPBKDFConfig *) nil_chk(pbkdfConfig)) getAlgorithm]]) {
    LibOrgBouncycastleCryptoUtilScryptConfig *scryptConfig = (LibOrgBouncycastleCryptoUtilScryptConfig *) cast_chk(pbkdfConfig, [LibOrgBouncycastleCryptoUtilScryptConfig class]);
    IOSByteArray *pbkdSalt = [IOSByteArray newArrayWithLength:[scryptConfig getSaltLength]];
    [((JavaSecuritySecureRandom *) nil_chk(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getDefaultSecureRandom(self))) nextBytesWithByteArray:pbkdSalt];
    LibOrgBouncycastleAsn1MiscScryptParams *params = new_LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_withInt_(pbkdSalt, [scryptConfig getCostParameter], [scryptConfig getBlockSize], [scryptConfig getParallelizationParameter], keySizeInBytes);
    return new_LibOrgBouncycastleAsn1PkcsKeyDerivationFunc_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt), params);
  }
  else {
    LibOrgBouncycastleCryptoUtilPBKDF2Config *pbkdf2Config = (LibOrgBouncycastleCryptoUtilPBKDF2Config *) cast_chk(pbkdfConfig, [LibOrgBouncycastleCryptoUtilPBKDF2Config class]);
    IOSByteArray *pbkdSalt = [IOSByteArray newArrayWithLength:[pbkdf2Config getSaltLength]];
    [((JavaSecuritySecureRandom *) nil_chk(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getDefaultSecureRandom(self))) nextBytesWithByteArray:pbkdSalt];
    return new_LibOrgBouncycastleAsn1PkcsKeyDerivationFunc_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBKDF2), new_LibOrgBouncycastleAsn1PkcsPBKDF2Params_initWithByteArray_withInt_withInt_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(pbkdSalt, [pbkdf2Config getIterationCount], keySizeInBytes, [pbkdf2Config getPRF]));
  }
}

LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1PkcsKeyDerivationFunc_withInt_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *baseAlg, jint keySizeInBytes) {
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt))) isEqual:[((LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *) nil_chk(baseAlg)) getAlgorithm]]) {
    LibOrgBouncycastleAsn1MiscScryptParams *oldParams = LibOrgBouncycastleAsn1MiscScryptParams_getInstanceWithId_([baseAlg getParameters]);
    IOSByteArray *pbkdSalt = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk([((LibOrgBouncycastleAsn1MiscScryptParams *) nil_chk(oldParams)) getSalt]))->size_];
    [((JavaSecuritySecureRandom *) nil_chk(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getDefaultSecureRandom(self))) nextBytesWithByteArray:pbkdSalt];
    LibOrgBouncycastleAsn1MiscScryptParams *params = new_LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(pbkdSalt, [oldParams getCostParameter], [oldParams getBlockSize], [oldParams getParallelizationParameter], JavaMathBigInteger_valueOfWithLong_(keySizeInBytes));
    return new_LibOrgBouncycastleAsn1PkcsKeyDerivationFunc_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_scrypt), params);
  }
  else {
    LibOrgBouncycastleAsn1PkcsPBKDF2Params *oldParams = LibOrgBouncycastleAsn1PkcsPBKDF2Params_getInstanceWithId_([baseAlg getParameters]);
    IOSByteArray *pbkdSalt = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk([((LibOrgBouncycastleAsn1PkcsPBKDF2Params *) nil_chk(oldParams)) getSalt]))->size_];
    [((JavaSecuritySecureRandom *) nil_chk(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getDefaultSecureRandom(self))) nextBytesWithByteArray:pbkdSalt];
    LibOrgBouncycastleAsn1PkcsPBKDF2Params *params = new_LibOrgBouncycastleAsn1PkcsPBKDF2Params_initWithByteArray_withInt_withInt_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(pbkdSalt, [((JavaMathBigInteger *) nil_chk([oldParams getIterationCount])) intValue], keySizeInBytes, [oldParams getPrf]);
    return new_LibOrgBouncycastleAsn1PkcsKeyDerivationFunc_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBKDF2), params);
  }
}

LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_generatePkbdAlgorithmIdentifierWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *derivationAlgorithm, jint keySizeInBytes) {
  IOSByteArray *pbkdSalt = [IOSByteArray newArrayWithLength:512 / 8];
  [((JavaSecuritySecureRandom *) nil_chk(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_getDefaultSecureRandom(self))) nextBytesWithByteArray:pbkdSalt];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBKDF2))) isEqual:derivationAlgorithm]) {
    return new_LibOrgBouncycastleAsn1PkcsKeyDerivationFunc_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBKDF2), new_LibOrgBouncycastleAsn1PkcsPBKDF2Params_initWithByteArray_withInt_withInt_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(pbkdSalt, 50 * 1024, keySizeInBytes, new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA512), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE))));
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"unknown derivation algorithm: ", derivationAlgorithm));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0 {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1_initWithJavaUtilIterator_(self, capture$0);
  return self;
}

- (jboolean)hasMoreElements {
  return [((id<JavaUtilIterator>) nil_chk(val$it_)) hasNext];
}

- (id)nextElement {
  return [((id<JavaUtilIterator>) nil_chk(val$it_)) next];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilIterator:);
  methods[1].selector = @selector(hasMoreElements);
  methods[2].selector = @selector(nextElement);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Iterator<Ljava/lang/String;>;", "LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi;", "engineAliases" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1 = { "", "lib.org.bouncycastle.jcajce.provider.keystore.bcfks", ptrTable, methods, fields, 7, 0x8010, 3, 1, 1, -1, 2, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1_initWithJavaUtilIterator_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1 *self, id<JavaUtilIterator> capture$0) {
  self->val$it_ = capture$0;
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1 *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1, initWithJavaUtilIterator_, capture$0)
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1 *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_1, initWithJavaUtilIterator_, capture$0)
}

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std = { "Std", "lib.org.bouncycastle.jcajce.provider.keystore.bcfks", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std_init(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std *self) {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(self, new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init());
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std, init)
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Std)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def = { "Def", "lib.org.bouncycastle.jcajce.provider.keystore.bcfks", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def_init(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def *self) {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(self, new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def, init)
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_Def)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi

- (instancetype)initWithLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)provider {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(self, provider);
  return self;
}

- (void)engineDeleteEntryWithNSString:(NSString *)alias {
  @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"delete operation not supported in shared mode");
}

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                  withJavaSecurityKey:(id<JavaSecurityKey>)key
                        withCharArray:(IOSCharArray *)password
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"set operation not supported in shared mode");
}

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                        withByteArray:(IOSByteArray *)keyEncoding
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"set operation not supported in shared mode");
}

- (void)engineSetCertificateEntryWithNSString:(NSString *)alias
              withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"set operation not supported in shared mode");
}

- (id<JavaSecurityKey>)engineGetKeyWithNSString:(NSString *)alias
                                  withCharArray:(IOSCharArray *)password {
  IOSByteArray *mac;
  @try {
    mac = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_calculateMacWithNSString_withCharArray_(self, alias, password);
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_JavaSecurityUnrecoverableKeyException_initWithNSString_(JreStrcat("$$$$", @"unable to recover key (", alias, @"): ", [e getMessage]));
  }
  if ([((id<JavaUtilMap>) nil_chk(cache_)) containsKeyWithId:alias]) {
    IOSByteArray *hash_ = [cache_ getWithId:alias];
    if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(hash_, mac)) {
      @throw new_JavaSecurityUnrecoverableKeyException_initWithNSString_(JreStrcat("$$C", @"unable to recover key (", alias, ')'));
    }
  }
  id<JavaSecurityKey> key = LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_engineGetKeyWithNSString_withCharArray_(self, alias, password);
  if (key != nil && ![cache_ containsKeyWithId:alias]) {
    (void) [cache_ putWithId:alias withId:mac];
  }
  return key;
}

- (IOSByteArray *)calculateMacWithNSString:(NSString *)alias
                             withCharArray:(IOSCharArray *)password {
  return LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_calculateMacWithNSString_withCharArray_(self, alias, password);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "[B", 0x2, 12, 10, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[1].selector = @selector(engineDeleteEntryWithNSString:);
  methods[2].selector = @selector(engineSetKeyEntryWithNSString:withJavaSecurityKey:withCharArray:withJavaSecurityCertCertificateArray:);
  methods[3].selector = @selector(engineSetKeyEntryWithNSString:withByteArray:withJavaSecurityCertCertificateArray:);
  methods[4].selector = @selector(engineSetCertificateEntryWithNSString:withJavaSecurityCertCertificate:);
  methods[5].selector = @selector(engineGetKeyWithNSString:withCharArray:);
  methods[6].selector = @selector(calculateMacWithNSString:withCharArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "seedKey_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "engineDeleteEntry", "LNSString;", "LJavaSecurityKeyStoreException;", "engineSetKeyEntry", "LNSString;LJavaSecurityKey;[C[LJavaSecurityCertCertificate;", "LNSString;[B[LJavaSecurityCertCertificate;", "engineSetCertificateEntry", "LNSString;LJavaSecurityCertCertificate;", "engineGetKey", "LNSString;[C", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityUnrecoverableKeyException;", "calculateMac", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;", "Ljava/util/Map<Ljava/lang/String;[B>;", "LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi = { "SharedKeyStoreSpi", "lib.org.bouncycastle.jcajce.provider.keystore.bcfks", ptrTable, methods, fields, 7, 0xa, 7, 2, 15, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi *self, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> provider) {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(self, provider);
  @try {
    self->seedKey_ = [IOSByteArray newArrayWithLength:32];
    [((JavaSecuritySecureRandom *) nil_chk([((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(provider)) createSecureRandomWithNSString:@"DEFAULT"])) nextBytesWithByteArray:self->seedKey_];
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"can't create random - ", [e description]));
  }
  self->cache_ = new_JavaUtilHashMap_init();
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<LibOrgBouncycastleJcajceUtilJcaJceHelper> provider) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi, initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_, provider)
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<LibOrgBouncycastleJcajceUtilJcaJceHelper> provider) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi, initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_, provider)
}

IOSByteArray *LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_calculateMacWithNSString_withCharArray_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi *self, NSString *alias, IOSCharArray *password) {
  IOSByteArray *encoding;
  if (password != nil) {
    encoding = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_(password), LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(alias));
  }
  else {
    encoding = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(self->seedKey_, LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(alias));
  }
  return LibOrgBouncycastleCryptoGeneratorsSCrypt_generateWithByteArray_withByteArray_withInt_withInt_withInt_withInt_(encoding, self->seedKey_, 16384, 8, 1, 32);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared = { "StdShared", "lib.org.bouncycastle.jcajce.provider.keystore.bcfks", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared_init(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared *self) {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(self, new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init());
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared, init)
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_StdShared)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared = { "DefShared", "lib.org.bouncycastle.jcajce.provider.keystore.bcfks", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared_init(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared *self) {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_SharedKeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(self, new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared, init)
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_DefShared)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException

- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(self, msg, cause);
  return self;
}

- (JavaLangThrowable *)getCause {
  return cause_ExtKeyStoreException_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaLangThrowable:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cause_ExtKeyStoreException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x12, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaLangThrowable;", "cause", "LLibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException = { "ExtKeyStoreException", "lib.org.bouncycastle.jcajce.provider.keystore.bcfks", ptrTable, methods, fields, 7, 0xa, 2, 1, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException *self, NSString *msg, JavaLangThrowable *cause) {
  JavaSecurityKeyStoreException_initWithNSString_(self, msg);
  self->cause_ExtKeyStoreException_ = cause;
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException *new_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException, initWithNSString_withJavaLangThrowable_, msg, cause)
}

LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException *create_LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException, initWithNSString_withJavaLangThrowable_, msg, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcfksBcFKSKeyStoreSpi_ExtKeyStoreException)
