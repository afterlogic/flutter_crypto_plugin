//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/DigestFactory.java
//

#ifndef DigestFactory_H
#define DigestFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastleCryptoUtilDigestFactory : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (id<LibOrgBouncycastleCryptoDigest>)createMD5;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA1;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA224;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA256;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA384;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA3_224;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA3_256;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA3_384;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA3_512;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA512;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA512_224;

+ (id<LibOrgBouncycastleCryptoDigest>)createSHA512_256;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilDigestFactory)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoUtilDigestFactory_init(LibOrgBouncycastleCryptoUtilDigestFactory *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoUtilDigestFactory *new_LibOrgBouncycastleCryptoUtilDigestFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoUtilDigestFactory *create_LibOrgBouncycastleCryptoUtilDigestFactory_init(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createMD5(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512_224(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512_256(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA3_224(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA3_256(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA3_384(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoUtilDigestFactory_createSHA3_512(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilDigestFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DigestFactory_H
