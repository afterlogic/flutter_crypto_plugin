//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/newhope/KeyAgreementSpi.java
//

#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BCNHPrivateKey.h"
#include "BCNHPublicKey.h"
#include "BaseAgreementSpi.h"
#include "CipherParameters.h"
#include "ExchangePair.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyAgreementSpi.h"
#include "NHAgreement.h"
#include "NHExchangePairGenerator.h"
#include "NHPublicKeyParameters.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/Key.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@interface LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi () {
 @public
  LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *agreement_;
  LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *otherPartyKey_;
  LibOrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator *exchangePairGenerator_;
  IOSByteArray *shared_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, agreement_, LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, otherPartyKey_, LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, exchangePairGenerator_, LibOrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, shared_, IOSByteArray *)

@implementation LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  if (key != nil) {
    agreement_ = new_LibOrgBouncycastlePqcCryptoNewhopeNHAgreement_init();
    [agreement_ init__WithLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPrivateKey *) cast_chk(key, [LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPrivateKey class])) getKeyParams]];
  }
  else {
    exchangePairGenerator_ = new_LibOrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(secureRandom);
  }
}

- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)algorithmParameterSpec
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"NewHope does not require parameters");
}

- (id<JavaSecurityKey>)engineDoPhaseWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                            withBoolean:(jboolean)lastPhase {
  if (!lastPhase) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"NewHope can only be between two parties.");
  }
  otherPartyKey_ = (LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *) cast_chk(key, [LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey class]);
  if (exchangePairGenerator_ != nil) {
    LibOrgBouncycastlePqcCryptoExchangePair *exchPair = [exchangePairGenerator_ generateExchangeWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk([((LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *) nil_chk(otherPartyKey_)) getKeyParams], [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class])];
    shared_ = [((LibOrgBouncycastlePqcCryptoExchangePair *) nil_chk(exchPair)) getSharedValue];
    return new_LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey_initWithLibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_((LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) cast_chk([exchPair getPublicKey], [LibOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters class]));
  }
  else {
    shared_ = [((LibOrgBouncycastlePqcCryptoNewhopeNHAgreement *) nil_chk(agreement_)) calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *) nil_chk(otherPartyKey_)) getKeyParams]];
    return nil;
  }
}

- (IOSByteArray *)engineGenerateSecret {
  IOSByteArray *rv = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(shared_);
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(shared_, (jbyte) 0);
  return rv;
}

- (jint)engineGenerateSecretWithByteArray:(IOSByteArray *)bytes
                                  withInt:(jint)offset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(shared_, 0, bytes, offset, ((IOSByteArray *) nil_chk(shared_))->size_);
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(shared_, (jbyte) 0);
  return ((IOSByteArray *) nil_chk(shared_))->size_;
}

- (IOSByteArray *)calcSecret {
  return [self engineGenerateSecret];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 3, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 5, 6, 7, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 8, -1, -1, -1 },
    { NULL, "I", 0x4, 9, 10, 11, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineInitWithJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(engineInitWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(engineDoPhaseWithJavaSecurityKey:withBoolean:);
  methods[4].selector = @selector(engineGenerateSecret);
  methods[5].selector = @selector(engineGenerateSecretWithByteArray:withInt:);
  methods[6].selector = @selector(calcSecret);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "agreement_", "LLibOrgBouncycastlePqcCryptoNewhopeNHAgreement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "otherPartyKey_", "LLibOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exchangePairGenerator_", "LLibOrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shared_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineInit", "LJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "engineDoPhase", "LJavaSecurityKey;Z", "LJavaSecurityInvalidKeyException;LJavaLangIllegalStateException;", "LJavaLangIllegalStateException;", "engineGenerateSecret", "[BI", "LJavaLangIllegalStateException;LJavaxCryptoShortBufferException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi = { "KeyAgreementSpi", "lib.org.bouncycastle.pqc.jcajce.provider.newhope", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi;
}

@end

void LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi_init(LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"NH", nil);
}

LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi *new_LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, init)
}

LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi *create_LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi)
