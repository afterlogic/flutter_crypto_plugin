//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ECPointFormat.java
//

#include "ECPointFormat.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleCryptoTlsECPointFormat

+ (jshort)uncompressed {
  return LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed;
}

+ (jshort)ansiX962_compressed_prime {
  return LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_prime;
}

+ (jshort)ansiX962_compressed_char2 {
  return LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_char2;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsECPointFormat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uncompressed", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed, 0x19, -1, -1, -1, -1 },
    { "ansiX962_compressed_prime", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_prime, 0x19, -1, -1, -1, -1 },
    { "ansiX962_compressed_char2", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_char2, 0x19, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsECPointFormat = { "ECPointFormat", "lib.org.bouncycastle.crypto.tls", NULL, methods, fields, 7, 0x1, 1, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsECPointFormat;
}

@end

void LibOrgBouncycastleCryptoTlsECPointFormat_init(LibOrgBouncycastleCryptoTlsECPointFormat *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsECPointFormat *new_LibOrgBouncycastleCryptoTlsECPointFormat_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsECPointFormat, init)
}

LibOrgBouncycastleCryptoTlsECPointFormat *create_LibOrgBouncycastleCryptoTlsECPointFormat_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsECPointFormat, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsECPointFormat)
