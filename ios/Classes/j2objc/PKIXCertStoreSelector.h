//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/PKIXCertStoreSelector.java
//

#ifndef PKIXCertStoreSelector_H
#define PKIXCertStoreSelector_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Selector.h"

@class JavaSecurityCertCertStore;
@class JavaSecurityCertCertificate;
@protocol JavaSecurityCertCertSelector;
@protocol JavaUtilCollection;

@interface LibOrgBouncycastleJcajcePKIXCertStoreSelector : NSObject < LibOrgBouncycastleUtilSelector >

#pragma mark Public

- (id)java_clone;

+ (id<JavaUtilCollection>)getCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector:(LibOrgBouncycastleJcajcePKIXCertStoreSelector *)selector
                                                             withJavaSecurityCertCertStore:(JavaSecurityCertCertStore *)certStore;

- (jboolean)matchWithId:(JavaSecurityCertCertificate *)cert;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajcePKIXCertStoreSelector)

FOUNDATION_EXPORT id<JavaUtilCollection> LibOrgBouncycastleJcajcePKIXCertStoreSelector_getCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaSecurityCertCertStore_(LibOrgBouncycastleJcajcePKIXCertStoreSelector *selector, JavaSecurityCertCertStore *certStore);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajcePKIXCertStoreSelector)

@interface LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithJavaSecurityCertCertSelector:(id<JavaSecurityCertCertSelector>)certSelector;

- (LibOrgBouncycastleJcajcePKIXCertStoreSelector *)build;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder *self, id<JavaSecurityCertCertSelector> certSelector);

FOUNDATION_EXPORT LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder *new_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(id<JavaSecurityCertCertSelector> certSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder *create_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(id<JavaSecurityCertCertSelector> certSelector);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PKIXCertStoreSelector_H
