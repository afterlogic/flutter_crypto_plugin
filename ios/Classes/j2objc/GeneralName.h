//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/GeneralName.java
//

#ifndef GeneralName_H
#define GeneralName_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1X500X500Name;
@class LibOrgBouncycastleAsn1X509X509Name;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1X509GeneralName : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >
@property (readonly, class) jint otherName NS_SWIFT_NAME(otherName);
@property (readonly, class) jint rfc822Name NS_SWIFT_NAME(rfc822Name);
@property (readonly, class) jint dNSName NS_SWIFT_NAME(dNSName);
@property (readonly, class) jint x400Address NS_SWIFT_NAME(x400Address);
@property (readonly, class) jint directoryName NS_SWIFT_NAME(directoryName);
@property (readonly, class) jint ediPartyName NS_SWIFT_NAME(ediPartyName);
@property (readonly, class) jint uniformResourceIdentifier NS_SWIFT_NAME(uniformResourceIdentifier);
@property (readonly, class) jint iPAddress NS_SWIFT_NAME(iPAddress);
@property (readonly, class) jint registeredID NS_SWIFT_NAME(registeredID);

+ (jint)otherName;

+ (jint)rfc822Name;

+ (jint)dNSName;

+ (jint)x400Address;

+ (jint)directoryName;

+ (jint)ediPartyName;

+ (jint)uniformResourceIdentifier;

+ (jint)iPAddress;

+ (jint)registeredID;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)tag
withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)name;

- (instancetype __nonnull)initWithInt:(jint)tag
                         withNSString:(NSString *)name;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)dirName;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509X509Name:(LibOrgBouncycastleAsn1X509X509Name *)dirName;

+ (LibOrgBouncycastleAsn1X509GeneralName *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)tagObj
                                                                                     withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1X509GeneralName *)getInstanceWithId:(id)obj;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getName;

- (jint)getTagNo;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509GeneralName)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_otherName(void);
#define LibOrgBouncycastleAsn1X509GeneralName_otherName 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, otherName, jint)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_rfc822Name(void);
#define LibOrgBouncycastleAsn1X509GeneralName_rfc822Name 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, rfc822Name, jint)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_dNSName(void);
#define LibOrgBouncycastleAsn1X509GeneralName_dNSName 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, dNSName, jint)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_x400Address(void);
#define LibOrgBouncycastleAsn1X509GeneralName_x400Address 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, x400Address, jint)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_directoryName(void);
#define LibOrgBouncycastleAsn1X509GeneralName_directoryName 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, directoryName, jint)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_ediPartyName(void);
#define LibOrgBouncycastleAsn1X509GeneralName_ediPartyName 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, ediPartyName, jint)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_uniformResourceIdentifier(void);
#define LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, uniformResourceIdentifier, jint)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_iPAddress(void);
#define LibOrgBouncycastleAsn1X509GeneralName_iPAddress 7
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, iPAddress, jint)

inline jint LibOrgBouncycastleAsn1X509GeneralName_get_registeredID(void);
#define LibOrgBouncycastleAsn1X509GeneralName_registeredID 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509GeneralName, registeredID, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X509X509Name_(LibOrgBouncycastleAsn1X509GeneralName *self, LibOrgBouncycastleAsn1X509X509Name *dirName);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *new_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X509X509Name_(LibOrgBouncycastleAsn1X509X509Name *dirName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *create_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X509X509Name_(LibOrgBouncycastleAsn1X509X509Name *dirName);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X509GeneralName *self, LibOrgBouncycastleAsn1X500X500Name *dirName);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *new_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name *dirName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *create_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name *dirName);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1X509GeneralName *self, jint tag, id<LibOrgBouncycastleAsn1ASN1Encodable> name);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(jint tag, id<LibOrgBouncycastleAsn1ASN1Encodable> name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *create_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(jint tag, id<LibOrgBouncycastleAsn1ASN1Encodable> name);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(LibOrgBouncycastleAsn1X509GeneralName *self, jint tag, NSString *name);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(jint tag, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *create_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(jint tag, NSString *name);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509GeneralName *LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *tagObj, jboolean explicit_);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509GeneralName)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // GeneralName_H
