//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/ECNRSigner.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "DataLengthException.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECKeyGenerationParameters.h"
#include "ECKeyPairGenerator.h"
#include "ECKeyParameters.h"
#include "ECNRSigner.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoSignersECNRSigner () {
 @public
  jboolean forSigning_;
  LibOrgBouncycastleCryptoParamsECKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersECNRSigner, key_, LibOrgBouncycastleCryptoParamsECKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersECNRSigner, random_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastleCryptoSignersECNRSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoSignersECNRSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  self->forSigning_ = forSigning;
  if (forSigning) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->random_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([rParam getParameters], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    }
    else {
      self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  }
}

- (JavaMathBigInteger *)getOrder {
  return [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters])) getN];
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)digest {
  if (!self->forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialised for signing");
  }
  JavaMathBigInteger *n = [self getOrder];
  jint nBitLength = [((JavaMathBigInteger *) nil_chk(n)) bitLength];
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, digest);
  jint eBitLength = [e bitLength];
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *privKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
  if (eBitLength > nBitLength) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input too large for ECNR key.");
  }
  JavaMathBigInteger *r = nil;
  JavaMathBigInteger *s = nil;
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *tempPair;
  do {
    LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator *keyGen = new_LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init();
    [keyGen init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_([((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(privKey)) getParameters], self->random_)];
    tempPair = [keyGen generateKeyPair];
    LibOrgBouncycastleCryptoParamsECPublicKeyParameters *V = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(tempPair)) getPublic], [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
    JavaMathBigInteger *Vx = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(V)) getQ])) getAffineXCoord])) toBigInteger];
    r = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vx)) addWithJavaMathBigInteger:e])) modWithJavaMathBigInteger:n];
  }
  while ([((JavaMathBigInteger *) nil_chk(r)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]);
  JavaMathBigInteger *x = [privKey getD];
  JavaMathBigInteger *u = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([tempPair getPrivate], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class])))) getD];
  s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(u)) subtractWithJavaMathBigInteger:[r multiplyWithJavaMathBigInteger:x]])) modWithJavaMathBigInteger:n];
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:2 type:JavaMathBigInteger_class_()];
  (void) IOSObjectArray_Set(res, 0, r);
  (void) IOSObjectArray_Set(res, 1, s);
  return res;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)digest
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  if (self->forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialised for verifying");
  }
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *pubKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(pubKey)) getParameters])) getN];
  jint nBitLength = [((JavaMathBigInteger *) nil_chk(n)) bitLength];
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, digest);
  jint eBitLength = [e bitLength];
  if (eBitLength > nBitLength) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input too large for ECNR key.");
  }
  if ([((JavaMathBigInteger *) nil_chk(r)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] < 0 || [r compareToWithId:n] >= 0) {
    return false;
  }
  if ([((JavaMathBigInteger *) nil_chk(s)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)] < 0 || [s compareToWithId:n] >= 0) {
    return false;
  }
  LibOrgBouncycastleMathEcECPoint *G = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([pubKey getParameters])) getG];
  LibOrgBouncycastleMathEcECPoint *W = [pubKey getQ];
  LibOrgBouncycastleMathEcECPoint *P = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(G, s, W, r))) normalize];
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(P)) isInfinity]) {
    return false;
  }
  JavaMathBigInteger *x = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([P getAffineXCoord])) toBigInteger];
  JavaMathBigInteger *t = [((JavaMathBigInteger *) nil_chk([r subtractWithJavaMathBigInteger:x])) modWithJavaMathBigInteger:n];
  return [((JavaMathBigInteger *) nil_chk(t)) isEqual:e];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getOrder);
  methods[3].selector = @selector(generateSignatureWithByteArray:);
  methods[4].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "forSigning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoSignersECNRSigner = { "ECNRSigner", "lib.org.bouncycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoSignersECNRSigner;
}

@end

void LibOrgBouncycastleCryptoSignersECNRSigner_init(LibOrgBouncycastleCryptoSignersECNRSigner *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoSignersECNRSigner *new_LibOrgBouncycastleCryptoSignersECNRSigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersECNRSigner, init)
}

LibOrgBouncycastleCryptoSignersECNRSigner *create_LibOrgBouncycastleCryptoSignersECNRSigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersECNRSigner, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoSignersECNRSigner)
