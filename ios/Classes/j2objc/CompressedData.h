//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cms/CompressedData.java
//

#ifndef CompressedData_H
#define CompressedData_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Integer;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1CmsAsn1CmsContentInfo;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;

@interface LibOrgBouncycastleAsn1CmsCompressedData : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)compressionAlgorithm
                                withLibOrgBouncycastleAsn1CmsAsn1CmsContentInfo:(LibOrgBouncycastleAsn1CmsAsn1CmsContentInfo *)encapContentInfo;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getCompressionAlgorithmIdentifier;

- (LibOrgBouncycastleAsn1CmsAsn1CmsContentInfo *)getEncapContentInfo;

+ (LibOrgBouncycastleAsn1CmsCompressedData *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)ato
                                                                                       withBoolean:(jboolean)isExplicit;

+ (LibOrgBouncycastleAsn1CmsCompressedData *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1ASN1Integer *)getVersion;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmsCompressedData)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmsCompressedData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CmsAsn1CmsContentInfo_(LibOrgBouncycastleAsn1CmsCompressedData *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *compressionAlgorithm, LibOrgBouncycastleAsn1CmsAsn1CmsContentInfo *encapContentInfo);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsCompressedData *new_LibOrgBouncycastleAsn1CmsCompressedData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CmsAsn1CmsContentInfo_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *compressionAlgorithm, LibOrgBouncycastleAsn1CmsAsn1CmsContentInfo *encapContentInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsCompressedData *create_LibOrgBouncycastleAsn1CmsCompressedData_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CmsAsn1CmsContentInfo_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *compressionAlgorithm, LibOrgBouncycastleAsn1CmsAsn1CmsContentInfo *encapContentInfo);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsCompressedData *LibOrgBouncycastleAsn1CmsCompressedData_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *ato, jboolean isExplicit);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsCompressedData *LibOrgBouncycastleAsn1CmsCompressedData_getInstanceWithId_(id obj);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmsCompressedData)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CompressedData_H
