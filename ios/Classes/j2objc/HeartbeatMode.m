//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/HeartbeatMode.java
//

#include "HeartbeatMode.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleCryptoTlsHeartbeatMode

+ (jshort)peer_allowed_to_send {
  return LibOrgBouncycastleCryptoTlsHeartbeatMode_peer_allowed_to_send;
}

+ (jshort)peer_not_allowed_to_send {
  return LibOrgBouncycastleCryptoTlsHeartbeatMode_peer_not_allowed_to_send;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsHeartbeatMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isValidWithShort:(jshort)heartbeatMode {
  return LibOrgBouncycastleCryptoTlsHeartbeatMode_isValidWithShort_(heartbeatMode);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isValidWithShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "peer_allowed_to_send", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHeartbeatMode_peer_allowed_to_send, 0x19, -1, -1, -1, -1 },
    { "peer_not_allowed_to_send", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHeartbeatMode_peer_not_allowed_to_send, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isValid", "S" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsHeartbeatMode = { "HeartbeatMode", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsHeartbeatMode;
}

@end

void LibOrgBouncycastleCryptoTlsHeartbeatMode_init(LibOrgBouncycastleCryptoTlsHeartbeatMode *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsHeartbeatMode *new_LibOrgBouncycastleCryptoTlsHeartbeatMode_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsHeartbeatMode, init)
}

LibOrgBouncycastleCryptoTlsHeartbeatMode *create_LibOrgBouncycastleCryptoTlsHeartbeatMode_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsHeartbeatMode, init)
}

jboolean LibOrgBouncycastleCryptoTlsHeartbeatMode_isValidWithShort_(jshort heartbeatMode) {
  LibOrgBouncycastleCryptoTlsHeartbeatMode_initialize();
  return heartbeatMode >= LibOrgBouncycastleCryptoTlsHeartbeatMode_peer_allowed_to_send && heartbeatMode <= LibOrgBouncycastleCryptoTlsHeartbeatMode_peer_not_allowed_to_send;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsHeartbeatMode)
