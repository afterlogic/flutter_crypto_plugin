//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/rsa/BCRSAPrivateCrtKey.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "BCRSAPrivateCrtKey.h"
#include "BCRSAPrivateKey.h"
#include "DERNull.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceUtilKeyUtil.h"
#include "PKCSObjectIdentifiers.h"
#include "PrivateKeyInfo.h"
#include "RSAPrivateCrtKeyParameters.h"
#include "RSAPrivateKey.h"
#include "RSAUtil.h"
#include "Strings.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigInteger.h"
#include "java/security/interfaces/RSAPrivateCrtKey.h"
#include "java/security/spec/RSAPrivateCrtKeySpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey () {
 @public
  JavaMathBigInteger *publicExponent_;
  JavaMathBigInteger *primeP_;
  JavaMathBigInteger *primeQ_;
  JavaMathBigInteger *primeExponentP_;
  JavaMathBigInteger *primeExponentQ_;
  JavaMathBigInteger *crtCoefficient_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, publicExponent_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, primeP_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, primeQ_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, primeExponentP_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, primeExponentQ_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, crtCoefficient_, JavaMathBigInteger *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey

+ (jlong)serialVersionUID {
  return LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_serialVersionUID;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters:(LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *)key {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_(self, key);
  return self;
}

- (instancetype)initWithJavaSecuritySpecRSAPrivateCrtKeySpec:(JavaSecuritySpecRSAPrivateCrtKeySpec *)spec {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecuritySpecRSAPrivateCrtKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithJavaSecurityInterfacesRSAPrivateCrtKey:(id<JavaSecurityInterfacesRSAPrivateCrtKey>)key {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecurityInterfacesRSAPrivateCrtKey_(self, key);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)info {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(self, info);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey:(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *)key {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(self, key);
  return self;
}

- (NSString *)getFormat {
  return @"PKCS#8";
}

- (IOSByteArray *)getEncoded {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilKeyUtil_getEncodedPrivateKeyInfoWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, rsaEncryption), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE)), new_LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([self getModulus], [self getPublicExponent], [self getPrivateExponent], [self getPrimeP], [self getPrimeQ], [self getPrimeExponentP], [self getPrimeExponentQ], [self getCrtCoefficient]));
}

- (JavaMathBigInteger *)getPublicExponent {
  return publicExponent_;
}

- (JavaMathBigInteger *)getPrimeP {
  return primeP_;
}

- (JavaMathBigInteger *)getPrimeQ {
  return primeQ_;
}

- (JavaMathBigInteger *)getPrimeExponentP {
  return primeExponentP_;
}

- (JavaMathBigInteger *)getPrimeExponentQ {
  return primeExponentQ_;
}

- (JavaMathBigInteger *)getCrtCoefficient {
  return crtCoefficient_;
}

- (NSUInteger)hash {
  return ((jint) [((JavaMathBigInteger *) nil_chk([self getModulus])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([self getPublicExponent])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([self getPrivateExponent])) hash]);
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([JavaSecurityInterfacesRSAPrivateCrtKey_class_() isInstance:o])) {
    return false;
  }
  id<JavaSecurityInterfacesRSAPrivateCrtKey> key = (id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(o, JavaSecurityInterfacesRSAPrivateCrtKey_class_());
  return [((JavaMathBigInteger *) nil_chk([self getModulus])) isEqual:[((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(key)) getModulus]] && [((JavaMathBigInteger *) nil_chk([self getPublicExponent])) isEqual:[key getPublicExponent]] && [((JavaMathBigInteger *) nil_chk([self getPrivateExponent])) isEqual:[key getPrivateExponent]] && [((JavaMathBigInteger *) nil_chk([self getPrimeP])) isEqual:[key getPrimeP]] && [((JavaMathBigInteger *) nil_chk([self getPrimeQ])) isEqual:[key getPrimeQ]] && [((JavaMathBigInteger *) nil_chk([self getPrimeExponentP])) isEqual:[key getPrimeExponentP]] && [((JavaMathBigInteger *) nil_chk([self getPrimeExponentQ])) isEqual:[key getPrimeExponentQ]] && [((JavaMathBigInteger *) nil_chk([self getCrtCoefficient])) isEqual:[key getCrtCoefficient]];
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = LibOrgBouncycastleUtilStrings_lineSeparator();
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"RSA Private CRT Key ["])) appendWithNSString:LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_generateKeyFingerprintWithJavaMathBigInteger_([self getModulus])])) appendWithNSString:@"]"])) appendWithNSString:@",["])) appendWithNSString:LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_generateExponentFingerprintWithJavaMathBigInteger_([self getPublicExponent])])) appendWithNSString:@"]"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"             modulus: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([self getModulus])) toStringWithInt:16]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"     public exponent: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([self getPublicExponent])) toStringWithInt:16]])) appendWithNSString:nl];
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, 4, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters:);
  methods[1].selector = @selector(initWithJavaSecuritySpecRSAPrivateCrtKeySpec:);
  methods[2].selector = @selector(initWithJavaSecurityInterfacesRSAPrivateCrtKey:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[4].selector = @selector(initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey:);
  methods[5].selector = @selector(getFormat);
  methods[6].selector = @selector(getEncoded);
  methods[7].selector = @selector(getPublicExponent);
  methods[8].selector = @selector(getPrimeP);
  methods[9].selector = @selector(getPrimeQ);
  methods[10].selector = @selector(getPrimeExponentP);
  methods[11].selector = @selector(getPrimeExponentQ);
  methods[12].selector = @selector(getCrtCoefficient);
  methods[13].selector = @selector(hash);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_serialVersionUID, 0x18, -1, -1, -1, -1 },
    { "publicExponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "primeP_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "primeQ_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "primeExponentP_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "primeExponentQ_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "crtCoefficient_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters;", "LJavaSecuritySpecRSAPrivateCrtKeySpec;", "LJavaSecurityInterfacesRSAPrivateCrtKey;", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "LJavaIoIOException;", "LLibOrgBouncycastleAsn1PkcsRSAPrivateKey;", "hashCode", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey = { "BCRSAPrivateCrtKey", "lib.org.bouncycastle.jcajce.provider.asymmetric.rsa", ptrTable, methods, fields, 7, 0x1, 16, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *key) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateKey_initWithLibOrgBouncycastleCryptoParamsRSAKeyParameters_(self, key);
  self->publicExponent_ = [((LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) nil_chk(key)) getPublicExponent];
  self->primeP_ = [key getP];
  self->primeQ_ = [key getQ];
  self->primeExponentP_ = [key getDP];
  self->primeExponentQ_ = [key getDQ];
  self->crtCoefficient_ = [key getQInv];
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_(LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_, key)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_(LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithLibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_, key)
}

void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecuritySpecRSAPrivateCrtKeySpec_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, JavaSecuritySpecRSAPrivateCrtKeySpec *spec) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateKey_init(self);
  self->modulus_ = [((JavaSecuritySpecRSAPrivateCrtKeySpec *) nil_chk(spec)) getModulus];
  self->publicExponent_ = [spec getPublicExponent];
  self->privateExponent_ = [spec getPrivateExponent];
  self->primeP_ = [spec getPrimeP];
  self->primeQ_ = [spec getPrimeQ];
  self->primeExponentP_ = [spec getPrimeExponentP];
  self->primeExponentQ_ = [spec getPrimeExponentQ];
  self->crtCoefficient_ = [spec getCrtCoefficient];
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecuritySpecRSAPrivateCrtKeySpec_(JavaSecuritySpecRSAPrivateCrtKeySpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithJavaSecuritySpecRSAPrivateCrtKeySpec_, spec)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecuritySpecRSAPrivateCrtKeySpec_(JavaSecuritySpecRSAPrivateCrtKeySpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithJavaSecuritySpecRSAPrivateCrtKeySpec_, spec)
}

void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecurityInterfacesRSAPrivateCrtKey_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, id<JavaSecurityInterfacesRSAPrivateCrtKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateKey_init(self);
  self->modulus_ = [((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(key)) getModulus];
  self->publicExponent_ = [key getPublicExponent];
  self->privateExponent_ = [key getPrivateExponent];
  self->primeP_ = [key getPrimeP];
  self->primeQ_ = [key getPrimeQ];
  self->primeExponentP_ = [key getPrimeExponentP];
  self->primeExponentQ_ = [key getPrimeExponentQ];
  self->crtCoefficient_ = [key getCrtCoefficient];
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecurityInterfacesRSAPrivateCrtKey_(id<JavaSecurityInterfacesRSAPrivateCrtKey> key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithJavaSecurityInterfacesRSAPrivateCrtKey_, key)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithJavaSecurityInterfacesRSAPrivateCrtKey_(id<JavaSecurityInterfacesRSAPrivateCrtKey> key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithJavaSecurityInterfacesRSAPrivateCrtKey_, key)
}

void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(self, LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(info)) parsePrivateKey]));
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_, info)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_, info)
}

void LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *self, LibOrgBouncycastleAsn1PkcsRSAPrivateKey *key) {
  LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateKey_init(self);
  self->modulus_ = [((LibOrgBouncycastleAsn1PkcsRSAPrivateKey *) nil_chk(key)) getModulus];
  self->publicExponent_ = [key getPublicExponent];
  self->privateExponent_ = [key getPrivateExponent];
  self->primeP_ = [key getPrime1];
  self->primeQ_ = [key getPrime2];
  self->primeExponentP_ = [key getExponent1];
  self->primeExponentQ_ = [key getExponent2];
  self->crtCoefficient_ = [key getCoefficient];
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_, key)
}

LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey_initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey, initWithLibOrgBouncycastleAsn1PkcsRSAPrivateKey_, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricRsaBCRSAPrivateCrtKey)
