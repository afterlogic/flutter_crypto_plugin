//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dsa/BCDSAPublicKey.java
//

#ifndef BCDSAPublicKey_H
#define BCDSAPublicKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/security/interfaces/DSAPublicKey.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecuritySpecDSAPublicKeySpec;
@class LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters;
@protocol JavaSecurityInterfacesDSAParams;

@interface LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey : NSObject < JavaSecurityInterfacesDSAPublicKey >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info;

- (jboolean)isEqual:(id)o;

- (NSString *)getAlgorithm;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (id<JavaSecurityInterfacesDSAParams>)getParams;

- (JavaMathBigInteger *)getY;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaSecurityInterfacesDSAPublicKey:(id<JavaSecurityInterfacesDSAPublicKey>)key;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters:(LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *)params;

- (instancetype __nonnull)initWithJavaSecuritySpecDSAPublicKeySpec:(JavaSecuritySpecDSAPublicKeySpec *)spec;

- (LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *)engineGetKeyParameters;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecuritySpecDSAPublicKeySpec_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, JavaSecuritySpecDSAPublicKeySpec *spec);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecuritySpecDSAPublicKeySpec_(JavaSecuritySpecDSAPublicKeySpec *spec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecuritySpecDSAPublicKeySpec_(JavaSecuritySpecDSAPublicKeySpec *spec);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, id<JavaSecurityInterfacesDSAPublicKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_(id<JavaSecurityInterfacesDSAPublicKey> key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_(id<JavaSecurityInterfacesDSAPublicKey> key);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_(LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_(LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *params);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BCDSAPublicKey_H
