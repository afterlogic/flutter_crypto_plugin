//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/HMac.java
//

#include "CipherParameters.h"
#include "Digest.h"
#include "ExtendedDigest.h"
#include "HMac.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "Memoable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Hashtable.h"

@interface LibOrgBouncycastleCryptoMacsHMac () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  jint digestSize_;
  jint blockLength_;
  id<LibOrgBouncycastleUtilMemoable> ipadState_;
  id<LibOrgBouncycastleUtilMemoable> opadState_;
  IOSByteArray *inputPad_;
  IOSByteArray *outputBuf_;
}

+ (jint)getByteLengthWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                               withInt:(jint)byteLength;

+ (void)xorPadWithByteArray:(IOSByteArray *)pad
                    withInt:(jint)len
                   withByte:(jbyte)n;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsHMac, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsHMac, ipadState_, id<LibOrgBouncycastleUtilMemoable>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsHMac, opadState_, id<LibOrgBouncycastleUtilMemoable>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsHMac, inputPad_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsHMac, outputBuf_, IOSByteArray *)

inline jbyte LibOrgBouncycastleCryptoMacsHMac_get_IPAD(void);
#define LibOrgBouncycastleCryptoMacsHMac_IPAD 54
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoMacsHMac, IPAD, jbyte)

inline jbyte LibOrgBouncycastleCryptoMacsHMac_get_OPAD(void);
#define LibOrgBouncycastleCryptoMacsHMac_OPAD 92
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoMacsHMac, OPAD, jbyte)

inline JavaUtilHashtable *LibOrgBouncycastleCryptoMacsHMac_get_blockLengths(void);
inline JavaUtilHashtable *LibOrgBouncycastleCryptoMacsHMac_set_blockLengths(JavaUtilHashtable *value);
static JavaUtilHashtable *LibOrgBouncycastleCryptoMacsHMac_blockLengths;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoMacsHMac, blockLengths, JavaUtilHashtable *)

__attribute__((unused)) static jint LibOrgBouncycastleCryptoMacsHMac_getByteLengthWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest);

__attribute__((unused)) static void LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_withInt_(LibOrgBouncycastleCryptoMacsHMac *self, id<LibOrgBouncycastleCryptoDigest> digest, jint byteLength);

__attribute__((unused)) static LibOrgBouncycastleCryptoMacsHMac *new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoDigest> digest, jint byteLength) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoMacsHMac *create_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoDigest> digest, jint byteLength);

__attribute__((unused)) static void LibOrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(IOSByteArray *pad, jint len, jbyte n);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoMacsHMac)

@implementation LibOrgBouncycastleCryptoMacsHMac

+ (jint)getByteLengthWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  return LibOrgBouncycastleCryptoMacsHMac_getByteLengthWithLibOrgBouncycastleCryptoDigest_(digest);
}

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                               withInt:(jint)byteLength {
  LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_withInt_(self, digest, byteLength);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getAlgorithmName], @"/HMAC");
}

- (id<LibOrgBouncycastleCryptoDigest>)getUnderlyingDigest {
  return digest_;
}

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  IOSByteArray *key = [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk(params, [LibOrgBouncycastleCryptoParamsKeyParameter class])))) getKey];
  jint keyLength = ((IOSByteArray *) nil_chk(key))->size_;
  if (keyLength > blockLength_) {
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:key withInt:0 withInt:keyLength];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:inputPad_ withInt:0];
    keyLength = digestSize_;
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, inputPad_, 0, keyLength);
  }
  for (jint i = keyLength; i < ((IOSByteArray *) nil_chk(inputPad_))->size_; i++) {
    *IOSByteArray_GetRef(inputPad_, i) = 0;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inputPad_, 0, outputBuf_, 0, blockLength_);
  LibOrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(inputPad_, blockLength_, LibOrgBouncycastleCryptoMacsHMac_IPAD);
  LibOrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(outputBuf_, blockLength_, LibOrgBouncycastleCryptoMacsHMac_OPAD);
  if ([LibOrgBouncycastleUtilMemoable_class_() isInstance:digest_]) {
    opadState_ = [((id<LibOrgBouncycastleUtilMemoable>) nil_chk(((id<LibOrgBouncycastleUtilMemoable>) cast_check(digest_, LibOrgBouncycastleUtilMemoable_class_())))) copy__];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(((id<LibOrgBouncycastleCryptoDigest>) cast_check(opadState_, LibOrgBouncycastleCryptoDigest_class_())))) updateWithByteArray:outputBuf_ withInt:0 withInt:blockLength_];
  }
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(inputPad_))->size_];
  if ([LibOrgBouncycastleUtilMemoable_class_() isInstance:digest_]) {
    ipadState_ = [((id<LibOrgBouncycastleUtilMemoable>) nil_chk(((id<LibOrgBouncycastleUtilMemoable>) cast_check(digest_, LibOrgBouncycastleUtilMemoable_class_())))) copy__];
  }
}

- (jint)getMacSize {
  return digestSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:inArg];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inArg withInt:inOff withInt:len];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:outputBuf_ withInt:blockLength_];
  if (opadState_ != nil) {
    [((id<LibOrgBouncycastleUtilMemoable>) nil_chk(((id<LibOrgBouncycastleUtilMemoable>) cast_check(digest_, LibOrgBouncycastleUtilMemoable_class_())))) resetWithLibOrgBouncycastleUtilMemoable:opadState_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:outputBuf_ withInt:blockLength_ withInt:[digest_ getDigestSize]];
  }
  else {
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:outputBuf_ withInt:0 withInt:((IOSByteArray *) nil_chk(outputBuf_))->size_];
  }
  jint len = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:outArg withInt:outOff];
  for (jint i = blockLength_; i < ((IOSByteArray *) nil_chk(outputBuf_))->size_; i++) {
    *IOSByteArray_GetRef(outputBuf_, i) = 0;
  }
  if (ipadState_ != nil) {
    [((id<LibOrgBouncycastleUtilMemoable>) nil_chk(((id<LibOrgBouncycastleUtilMemoable>) cast_check(digest_, LibOrgBouncycastleUtilMemoable_class_())))) resetWithLibOrgBouncycastleUtilMemoable:ipadState_];
  }
  else {
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(inputPad_))->size_];
  }
  return len;
}

- (void)reset {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(inputPad_))->size_];
}

+ (void)xorPadWithByteArray:(IOSByteArray *)pad
                    withInt:(jint)len
                   withByte:(jbyte)n {
  LibOrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(pad, len, n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getByteLengthWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:withInt:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getUnderlyingDigest);
  methods[5].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[6].selector = @selector(getMacSize);
  methods[7].selector = @selector(updateWithByte:);
  methods[8].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(reset);
  methods[11].selector = @selector(xorPadWithByteArray:withInt:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IPAD", "B", .constantValue.asChar = LibOrgBouncycastleCryptoMacsHMac_IPAD, 0x1a, -1, -1, -1, -1 },
    { "OPAD", "B", .constantValue.asChar = LibOrgBouncycastleCryptoMacsHMac_OPAD, 0x1a, -1, -1, -1, -1 },
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digestSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ipadState_", "LLibOrgBouncycastleUtilMemoable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "opadState_", "LLibOrgBouncycastleUtilMemoable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inputPad_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outputBuf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockLengths", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "getByteLength", "LLibOrgBouncycastleCryptoDigest;", "LLibOrgBouncycastleCryptoDigest;I", "init", "LLibOrgBouncycastleCryptoCipherParameters;", "update", "B", "[BII", "doFinal", "[BI", "xorPad", "[BIB", &LibOrgBouncycastleCryptoMacsHMac_blockLengths };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoMacsHMac = { "HMac", "lib.org.bouncycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 12, 10, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoMacsHMac;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoMacsHMac class]) {
    {
      LibOrgBouncycastleCryptoMacsHMac_blockLengths = new_JavaUtilHashtable_init();
      (void) [LibOrgBouncycastleCryptoMacsHMac_blockLengths putWithId:@"GOST3411" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(32)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"MD2" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(16)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"MD4" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"MD5" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"RIPEMD128" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"RIPEMD160" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-1" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-224" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-256" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-384" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(128)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-512" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(128)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"Tiger" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"Whirlpool" withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoMacsHMac)
  }
}

@end

jint LibOrgBouncycastleCryptoMacsHMac_getByteLengthWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastleCryptoMacsHMac_initialize();
  if ([LibOrgBouncycastleCryptoExtendedDigest_class_() isInstance:digest]) {
    return [((id<LibOrgBouncycastleCryptoExtendedDigest>) nil_chk(((id<LibOrgBouncycastleCryptoExtendedDigest>) cast_check(digest, LibOrgBouncycastleCryptoExtendedDigest_class_())))) getByteLength];
  }
  JavaLangInteger *b = (JavaLangInteger *) cast_chk([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoMacsHMac_blockLengths)) getWithId:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getAlgorithmName]], [JavaLangInteger class]);
  if (b == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown digest passed: ", [digest getAlgorithmName]));
  }
  return [b intValue];
}

void LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoMacsHMac *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_withInt_(self, digest, LibOrgBouncycastleCryptoMacsHMac_getByteLengthWithLibOrgBouncycastleCryptoDigest_(digest));
}

LibOrgBouncycastleCryptoMacsHMac *new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsHMac, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoMacsHMac *create_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsHMac, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

void LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_withInt_(LibOrgBouncycastleCryptoMacsHMac *self, id<LibOrgBouncycastleCryptoDigest> digest, jint byteLength) {
  NSObject_init(self);
  self->digest_ = digest;
  self->digestSize_ = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
  self->blockLength_ = byteLength;
  self->inputPad_ = [IOSByteArray newArrayWithLength:self->blockLength_];
  self->outputBuf_ = [IOSByteArray newArrayWithLength:self->blockLength_ + self->digestSize_];
}

LibOrgBouncycastleCryptoMacsHMac *new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoDigest> digest, jint byteLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsHMac, initWithLibOrgBouncycastleCryptoDigest_withInt_, digest, byteLength)
}

LibOrgBouncycastleCryptoMacsHMac *create_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_withInt_(id<LibOrgBouncycastleCryptoDigest> digest, jint byteLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsHMac, initWithLibOrgBouncycastleCryptoDigest_withInt_, digest, byteLength)
}

void LibOrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(IOSByteArray *pad, jint len, jbyte n) {
  LibOrgBouncycastleCryptoMacsHMac_initialize();
  for (jint i = 0; i < len; ++i) {
    *IOSByteArray_GetRef(nil_chk(pad), i) ^= n;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoMacsHMac)
