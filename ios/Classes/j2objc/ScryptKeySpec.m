//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/spec/ScryptKeySpec.java
//

#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ScryptKeySpec.h"

@interface LibOrgBouncycastleJcajceSpecScryptKeySpec () {
 @public
  IOSCharArray *password_;
  IOSByteArray *salt_;
  jint costParameter_;
  jint blockSize_;
  jint parallelizationParameter_;
  jint keySize_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceSpecScryptKeySpec, password_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceSpecScryptKeySpec, salt_, IOSByteArray *)

@implementation LibOrgBouncycastleJcajceSpecScryptKeySpec

- (instancetype)initWithCharArray:(IOSCharArray *)password
                    withByteArray:(IOSByteArray *)salt
                          withInt:(jint)costParameter
                          withInt:(jint)blockSize
                          withInt:(jint)parallelizationParameter
                          withInt:(jint)keySize {
  LibOrgBouncycastleJcajceSpecScryptKeySpec_initWithCharArray_withByteArray_withInt_withInt_withInt_withInt_(self, password, salt, costParameter, blockSize, parallelizationParameter, keySize);
  return self;
}

- (IOSCharArray *)getPassword {
  return password_;
}

- (IOSByteArray *)getSalt {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(salt_);
}

- (jint)getCostParameter {
  return costParameter_;
}

- (jint)getBlockSize {
  return blockSize_;
}

- (jint)getParallelizationParameter {
  return parallelizationParameter_;
}

- (jint)getKeyLength {
  return keySize_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:withByteArray:withInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(getPassword);
  methods[2].selector = @selector(getSalt);
  methods[3].selector = @selector(getCostParameter);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(getParallelizationParameter);
  methods[6].selector = @selector(getKeyLength);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "password_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "salt_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "costParameter_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parallelizationParameter_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[C[BIIII" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceSpecScryptKeySpec = { "ScryptKeySpec", "lib.org.bouncycastle.jcajce.spec", ptrTable, methods, fields, 7, 0x1, 7, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceSpecScryptKeySpec;
}

@end

void LibOrgBouncycastleJcajceSpecScryptKeySpec_initWithCharArray_withByteArray_withInt_withInt_withInt_withInt_(LibOrgBouncycastleJcajceSpecScryptKeySpec *self, IOSCharArray *password, IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter, jint keySize) {
  NSObject_init(self);
  self->password_ = password;
  self->salt_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(salt);
  self->costParameter_ = costParameter;
  self->blockSize_ = blockSize;
  self->parallelizationParameter_ = parallelizationParameter;
  self->keySize_ = keySize;
}

LibOrgBouncycastleJcajceSpecScryptKeySpec *new_LibOrgBouncycastleJcajceSpecScryptKeySpec_initWithCharArray_withByteArray_withInt_withInt_withInt_withInt_(IOSCharArray *password, IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter, jint keySize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceSpecScryptKeySpec, initWithCharArray_withByteArray_withInt_withInt_withInt_withInt_, password, salt, costParameter, blockSize, parallelizationParameter, keySize)
}

LibOrgBouncycastleJcajceSpecScryptKeySpec *create_LibOrgBouncycastleJcajceSpecScryptKeySpec_initWithCharArray_withByteArray_withInt_withInt_withInt_withInt_(IOSCharArray *password, IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter, jint keySize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceSpecScryptKeySpec, initWithCharArray_withByteArray_withInt_withInt_withInt_withInt_, password, salt, costParameter, blockSize, parallelizationParameter, keySize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceSpecScryptKeySpec)
