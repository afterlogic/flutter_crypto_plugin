//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/SM2Signer.java
//

#ifndef SM2Signer_H
#define SM2Signer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ECConstants.h"
#include "J2ObjC_header.h"
#include "Signer.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoSignersDSAEncoding;
@protocol LibOrgBouncycastleMathEcECMultiplier;

@interface LibOrgBouncycastleCryptoSignersSM2Signer : NSObject < LibOrgBouncycastleCryptoSigner, LibOrgBouncycastleMathEcECConstants >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoSignersDSAEncoding:(id<LibOrgBouncycastleCryptoSignersDSAEncoding>)encoding;

- (IOSByteArray *)generateSignature;

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)b;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)off
                    withInt:(jint)len;

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature;

#pragma mark Protected

- (JavaMathBigInteger *)calculateEWithByteArray:(IOSByteArray *)message;

- (id<LibOrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoSignersSM2Signer)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersSM2Signer_init(LibOrgBouncycastleCryptoSignersSM2Signer *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersSM2Signer *new_LibOrgBouncycastleCryptoSignersSM2Signer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersSM2Signer *create_LibOrgBouncycastleCryptoSignersSM2Signer_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoSignersSM2Signer_initWithLibOrgBouncycastleCryptoSignersDSAEncoding_(LibOrgBouncycastleCryptoSignersSM2Signer *self, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersSM2Signer *new_LibOrgBouncycastleCryptoSignersSM2Signer_initWithLibOrgBouncycastleCryptoSignersDSAEncoding_(id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoSignersSM2Signer *create_LibOrgBouncycastleCryptoSignersSM2Signer_initWithLibOrgBouncycastleCryptoSignersDSAEncoding_(id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoSignersSM2Signer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SM2Signer_H
