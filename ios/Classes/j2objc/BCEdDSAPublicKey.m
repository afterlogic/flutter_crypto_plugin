//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/edec/BCEdDSAPublicKey.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BCEdDSAPublicKey.h"
#include "DERBitString.h"
#include "Ed25519PublicKeyParameters.h"
#include "Ed448PublicKeyParameters.h"
#include "EdECObjectIdentifiers.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceEdecKeyFactorySpi.h"
#include "JcajceEdecUtils.h"
#include "SubjectPublicKeyInfo.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/System.h"
#include "java/security/spec/InvalidKeySpecException.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey () {
 @public
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *eddsaPublicKey_;
}

- (void)populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey, eddsaPublicKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, JavaIoObjectOutputStream *outArg);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey

+ (jlong)serialVersionUID {
  return LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_serialVersionUID;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)pubKey {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(self, pubKey);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, keyInfo);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)prefix
                    withByteArray:(IOSByteArray *)rawData {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithByteArray_withByteArray_(self, prefix, rawData);
  return self;
}

- (void)populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, keyInfo);
}

- (NSString *)getAlgorithm {
  return ([eddsaPublicKey_ isKindOfClass:[LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters class]]) ? @"Ed448" : @"Ed25519";
}

- (NSString *)getFormat {
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  if ([eddsaPublicKey_ isKindOfClass:[LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters class]]) {
    IOSByteArray *encoding = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(JreLoadStatic(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyFactorySpi, Ed448Prefix)))->size_ + LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters_KEY_SIZE];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(JreLoadStatic(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyFactorySpi, Ed448Prefix), 0, encoding, 0, JreLoadStatic(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyFactorySpi, Ed448Prefix)->size_);
    [((LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters *) eddsaPublicKey_))) encodeWithByteArray:encoding withInt:JreLoadStatic(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyFactorySpi, Ed448Prefix)->size_];
    return encoding;
  }
  else {
    IOSByteArray *encoding = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(JreLoadStatic(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyFactorySpi, Ed25519Prefix)))->size_ + LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters_KEY_SIZE];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(JreLoadStatic(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyFactorySpi, Ed25519Prefix), 0, encoding, 0, JreLoadStatic(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyFactorySpi, Ed25519Prefix)->size_);
    [((LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *) cast_chk(eddsaPublicKey_, [LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters class])))) encodeWithByteArray:encoding withInt:JreLoadStatic(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecKeyFactorySpi, Ed25519Prefix)->size_];
    return encoding;
  }
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)engineGetKeyParameters {
  return eddsaPublicKey_;
}

- (NSString *)description {
  return LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_keyToStringWithNSString_withNSString_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(@"Public Key", [self getAlgorithm], eddsaPublicKey_);
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([o isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey class]])) {
    return false;
  }
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *other = (LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *) cast_chk(o, [LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey class]);
  return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *) nil_chk(other)) getEncoded], [self getEncoded]);
}

- (NSUInteger)hash {
  return LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_([self getEncoded]);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[2].selector = @selector(initWithByteArray:withByteArray:);
  methods[3].selector = @selector(populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[4].selector = @selector(getAlgorithm);
  methods[5].selector = @selector(getFormat);
  methods[6].selector = @selector(getEncoded);
  methods[7].selector = @selector(engineGetKeyParameters);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[12].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_serialVersionUID, 0x18, -1, -1, -1, -1 },
    { "eddsaPublicKey_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "[B[B", "LJavaSecuritySpecInvalidKeySpecException;", "populateFromPubKeyInfo", "toString", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey = { "BCEdDSAPublicKey", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, fields, 7, 0x1, 13, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *pubKey) {
  NSObject_init(self);
  self->eddsaPublicKey_ = pubKey;
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *pubKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, pubKey)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *pubKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, pubKey)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  NSObject_init(self);
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, keyInfo);
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, keyInfo)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, keyInfo)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithByteArray_withByteArray_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, IOSByteArray *prefix, IOSByteArray *rawData) {
  NSObject_init(self);
  jint prefixLength = ((IOSByteArray *) nil_chk(prefix))->size_;
  if (LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_isValidPrefixWithByteArray_withByteArray_(prefix, rawData)) {
    if ((((IOSByteArray *) nil_chk(rawData))->size_ - prefixLength) == LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters_KEY_SIZE) {
      self->eddsaPublicKey_ = new_LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters_initWithByteArray_withInt_(rawData, prefixLength);
    }
    else if ((rawData->size_ - prefixLength) == LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters_KEY_SIZE) {
      self->eddsaPublicKey_ = new_LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters_initWithByteArray_withInt_(rawData, prefixLength);
    }
    else {
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"raw key data not recognised");
    }
  }
  else {
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"raw key data not recognised");
  }
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithByteArray_withByteArray_(IOSByteArray *prefix, IOSByteArray *rawData) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey, initWithByteArray_withByteArray_, prefix, rawData)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_initWithByteArray_withByteArray_(IOSByteArray *prefix, IOSByteArray *rawData) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey, initWithByteArray_withByteArray_, prefix, rawData)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_Ed448))) isEqual:[((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getAlgorithm]]) {
    self->eddsaPublicKey_ = new_LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters_initWithByteArray_withInt_([((LibOrgBouncycastleAsn1DERBitString *) nil_chk([keyInfo getPublicKeyData])) getOctets], 0);
  }
  else {
    self->eddsaPublicKey_ = new_LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters_initWithByteArray_withInt_([((LibOrgBouncycastleAsn1DERBitString *) nil_chk([keyInfo getPublicKeyData])) getOctets], 0);
  }
}

void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  IOSByteArray *enc = (IOSByteArray *) cast_chk([inArg readObject], [IOSByteArray class]);
  LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(enc));
}

void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCEdDSAPublicKey)
