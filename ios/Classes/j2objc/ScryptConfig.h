//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/ScryptConfig.java
//

#ifndef ScryptConfig_H
#define ScryptConfig_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PBKDFConfig.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;

@interface LibOrgBouncycastleCryptoUtilScryptConfig : LibOrgBouncycastleCryptoUtilPBKDFConfig

#pragma mark Public

- (jint)getBlockSize;

- (jint)getCostParameter;

- (jint)getParallelizationParameter;

- (jint)getSaltLength;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilScryptConfig)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilScryptConfig)

@interface LibOrgBouncycastleCryptoUtilScryptConfig_Builder : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)costParameter
                              withInt:(jint)blockSize
                              withInt:(jint)parallelizationParameter;

- (LibOrgBouncycastleCryptoUtilScryptConfig *)build;

- (LibOrgBouncycastleCryptoUtilScryptConfig_Builder *)withSaltLengthWithInt:(jint)saltLength;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilScryptConfig_Builder)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoUtilScryptConfig_Builder_initWithInt_withInt_withInt_(LibOrgBouncycastleCryptoUtilScryptConfig_Builder *self, jint costParameter, jint blockSize, jint parallelizationParameter);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoUtilScryptConfig_Builder *new_LibOrgBouncycastleCryptoUtilScryptConfig_Builder_initWithInt_withInt_withInt_(jint costParameter, jint blockSize, jint parallelizationParameter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoUtilScryptConfig_Builder *create_LibOrgBouncycastleCryptoUtilScryptConfig_Builder_initWithInt_withInt_withInt_(jint costParameter, jint blockSize, jint parallelizationParameter);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilScryptConfig_Builder)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ScryptConfig_H
