//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial.java
//

#include "Arrays.h"
#include "DenseTernaryPolynomial.h"
#include "IOSPrimitiveArray.h"
#include "IntegerPolynomial.h"
#include "J2ObjC_source.h"
#include "LongPolynomial5.h"
#include "Util.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial ()

- (void)checkTernarity;

@end

__attribute__((unused)) static void LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self);

@implementation LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial

- (instancetype)initWithInt:(jint)N {
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(self, N);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)intPoly {
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(self, intPoly);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)coeffs {
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(self, coeffs);
  return self;
}

- (void)checkTernarity {
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(self);
}

+ (LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                                                 withInt:(jint)numOnes
                                                                                 withInt:(jint)numNegOnes
                                                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
}

+ (LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withJavaSecuritySecureRandom_(N, random);
}

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                       withInt:(jint)modulus {
  if (modulus == 2048) {
    LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *poly2Pos = (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2)) java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]);
    [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2Pos)) modPositiveWithInt:2048];
    LibOrgBouncycastlePqcMathNtruPolynomialLongPolynomial5 *poly5 = new_LibOrgBouncycastlePqcMathNtruPolynomialLongPolynomial5_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(poly2Pos);
    return [((LibOrgBouncycastlePqcMathNtruPolynomialLongPolynomial5 *) nil_chk([poly5 multWithLibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial:self])) toIntegerPolynomial];
  }
  else {
    return [super multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:poly2 withInt:modulus];
  }
}

- (IOSIntArray *)getOnes {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  IOSIntArray *ones = [IOSIntArray newArrayWithLength:N];
  jint onesIdx = 0;
  for (jint i = 0; i < N; i++) {
    jint c = IOSIntArray_Get(coeffs_, i);
    if (c == 1) {
      *IOSIntArray_GetRef(ones, onesIdx++) = i;
    }
  }
  return LibOrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(ones, onesIdx);
}

- (IOSIntArray *)getNegOnes {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  IOSIntArray *negOnes = [IOSIntArray newArrayWithLength:N];
  jint negOnesIdx = 0;
  for (jint i = 0; i < N; i++) {
    jint c = IOSIntArray_Get(coeffs_, i);
    if (c == -1) {
      *IOSIntArray_GetRef(negOnes, negOnesIdx++) = i;
    }
  }
  return LibOrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(negOnes, negOnesIdx);
}

- (jint)size {
  return ((IOSIntArray *) nil_chk(coeffs_))->size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial;", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[2].selector = @selector(initWithIntArray:);
  methods[3].selector = @selector(checkTernarity);
  methods[4].selector = @selector(generateRandomWithInt:withInt:withInt:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(generateRandomWithInt:withJavaSecuritySecureRandom:);
  methods[6].selector = @selector(multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[7].selector = @selector(getOnes);
  methods[8].selector = @selector(getNegOnes);
  methods[9].selector = @selector(size);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", "[I", "generateRandom", "IIILJavaSecuritySecureRandom;", "ILJavaSecuritySecureRandom;", "mult", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;I" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial = { "DenseTernaryPolynomial", "lib.org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial;
}

@end

void LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, jint N) {
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(self, N);
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(self);
}

LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(jint N) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithInt_, N)
}

LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(jint N) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithInt_, N)
}

void LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(self, ((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(intPoly))->coeffs_);
}

LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_, intPoly)
}

LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_, intPoly)
}

void LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, IOSIntArray *coeffs) {
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(self, coeffs);
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(self);
}

LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithIntArray_, coeffs)
}

LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithIntArray_, coeffs)
}

void LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self) {
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(self->coeffs_))->size_; i++) {
    jint c = IOSIntArray_Get(self->coeffs_, i);
    if (c < -1 || c > 1) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"Illegal value: ", c, @", must be one of {-1, 0, 1}"));
    }
  }
}

LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initialize();
  IOSIntArray *coeffs = LibOrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
  return new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(coeffs);
}

LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withJavaSecuritySecureRandom_(jint N, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initialize();
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *poly = new_LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(N);
  for (jint i = 0; i < N; i++) {
    *IOSIntArray_GetRef(nil_chk(poly->coeffs_), i) = [((JavaSecuritySecureRandom *) nil_chk(random)) nextIntWithInt:3] - 1;
  }
  return poly;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial)
