//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/GOST3410Signer.java
//

#include "BigIntegers.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "GOST3410KeyParameters.h"
#include "GOST3410Parameters.h"
#include "GOST3410PrivateKeyParameters.h"
#include "GOST3410PublicKeyParameters.h"
#include "GOST3410Signer.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@implementation LibOrgBouncycastleCryptoSignersGOST3410Signer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoSignersGOST3410Signer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if (forSigning) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->random_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (LibOrgBouncycastleCryptoParamsGOST3410PrivateKeyParameters *) cast_chk([rParam getParameters], [LibOrgBouncycastleCryptoParamsGOST3410PrivateKeyParameters class]);
    }
    else {
      self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (LibOrgBouncycastleCryptoParamsGOST3410PrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsGOST3410PrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (LibOrgBouncycastleCryptoParamsGOST3410PublicKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsGOST3410PublicKeyParameters class]);
  }
}

- (JavaMathBigInteger *)getOrder {
  return [((LibOrgBouncycastleCryptoParamsGOST3410Parameters *) nil_chk([((LibOrgBouncycastleCryptoParamsGOST3410KeyParameters *) nil_chk(key_)) getParameters])) getQ];
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  IOSByteArray *mRev = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(message))->size_];
  for (jint i = 0; i != mRev->size_; i++) {
    *IOSByteArray_GetRef(mRev, i) = IOSByteArray_Get(message, mRev->size_ - 1 - i);
  }
  JavaMathBigInteger *m = new_JavaMathBigInteger_initWithInt_withByteArray_(1, mRev);
  LibOrgBouncycastleCryptoParamsGOST3410Parameters *params = [((LibOrgBouncycastleCryptoParamsGOST3410KeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *k;
  do {
    k = LibOrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsGOST3410Parameters *) nil_chk(params)) getQ])) bitLength], random_);
  }
  while ([((JavaMathBigInteger *) nil_chk(k)) compareToWithId:[params getQ]] >= 0);
  JavaMathBigInteger *r = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([params getA])) modPowWithJavaMathBigInteger:k withJavaMathBigInteger:[params getP]])) modWithJavaMathBigInteger:[params getQ]];
  JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([k multiplyWithJavaMathBigInteger:m])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsGOST3410PrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsGOST3410PrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsGOST3410PrivateKeyParameters class])))) getX])) multiplyWithJavaMathBigInteger:r]])) modWithJavaMathBigInteger:[params getQ]];
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:2 type:JavaMathBigInteger_class_()];
  (void) IOSObjectArray_Set(res, 0, r);
  (void) IOSObjectArray_Set(res, 1, s);
  return res;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  IOSByteArray *mRev = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(message))->size_];
  for (jint i = 0; i != mRev->size_; i++) {
    *IOSByteArray_GetRef(mRev, i) = IOSByteArray_Get(message, mRev->size_ - 1 - i);
  }
  JavaMathBigInteger *m = new_JavaMathBigInteger_initWithInt_withByteArray_(1, mRev);
  LibOrgBouncycastleCryptoParamsGOST3410Parameters *params = [((LibOrgBouncycastleCryptoParamsGOST3410KeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *zero = JavaMathBigInteger_valueOfWithLong_(0);
  if ([((JavaMathBigInteger *) nil_chk(zero)) compareToWithId:r] >= 0 || [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsGOST3410Parameters *) nil_chk(params)) getQ])) compareToWithId:r] <= 0) {
    return false;
  }
  if ([zero compareToWithId:s] >= 0 || [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsGOST3410Parameters *) nil_chk(params)) getQ])) compareToWithId:s] <= 0) {
    return false;
  }
  JavaMathBigInteger *v = [m modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsGOST3410Parameters *) nil_chk(params)) getQ])) subtractWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(@"2")] withJavaMathBigInteger:[params getQ]];
  JavaMathBigInteger *z1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s)) multiplyWithJavaMathBigInteger:v])) modWithJavaMathBigInteger:[params getQ]];
  JavaMathBigInteger *z2 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk([params getQ])) subtractWithJavaMathBigInteger:r]))) multiplyWithJavaMathBigInteger:v])) modWithJavaMathBigInteger:[params getQ]];
  z1 = [((JavaMathBigInteger *) nil_chk([params getA])) modPowWithJavaMathBigInteger:z1 withJavaMathBigInteger:[params getP]];
  z2 = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsGOST3410PublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsGOST3410PublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsGOST3410PublicKeyParameters class])))) getY])) modPowWithJavaMathBigInteger:z2 withJavaMathBigInteger:[params getP]];
  JavaMathBigInteger *u = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(z1)) multiplyWithJavaMathBigInteger:z2])) modWithJavaMathBigInteger:[params getP]])) modWithJavaMathBigInteger:[params getQ]];
  return [((JavaMathBigInteger *) nil_chk(u)) isEqual:r];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getOrder);
  methods[3].selector = @selector(generateSignatureWithByteArray:);
  methods[4].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LLibOrgBouncycastleCryptoParamsGOST3410KeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoSignersGOST3410Signer = { "GOST3410Signer", "lib.org.bouncycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoSignersGOST3410Signer;
}

@end

void LibOrgBouncycastleCryptoSignersGOST3410Signer_init(LibOrgBouncycastleCryptoSignersGOST3410Signer *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoSignersGOST3410Signer *new_LibOrgBouncycastleCryptoSignersGOST3410Signer_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersGOST3410Signer, init)
}

LibOrgBouncycastleCryptoSignersGOST3410Signer *create_LibOrgBouncycastleCryptoSignersGOST3410Signer_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersGOST3410Signer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoSignersGOST3410Signer)
