//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ec/GMSignatureSpi.java
//

#include "AsymmetricKeyParameter.h"
#include "BCJcaJceHelper.h"
#include "CipherParameters.h"
#include "CryptoException.h"
#include "ECUtils.h"
#include "GMSignatureSpi.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "JcajceUtilECUtil.h"
#include "ParametersWithID.h"
#include "ParametersWithRandom.h"
#include "SM2ParameterSpec.h"
#include "SM2Signer.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/SignatureException.h"
#include "java/security/SignatureSpi.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
  JavaSecurityAlgorithmParameters *engineParams_;
  LibOrgBouncycastleJcajceSpecSM2ParameterSpec *paramSpec_;
  LibOrgBouncycastleCryptoSignersSM2Signer *signer_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi, engineParams_, JavaSecurityAlgorithmParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi, paramSpec_, LibOrgBouncycastleJcajceSpecSM2ParameterSpec *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi, signer_, LibOrgBouncycastleCryptoSignersSM2Signer *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi

- (instancetype)initWithLibOrgBouncycastleCryptoSignersSM2Signer:(LibOrgBouncycastleCryptoSignersSM2Signer *)signer {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_initWithLibOrgBouncycastleCryptoSignersSM2Signer_(self, signer);
  return self;
}

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  id<LibOrgBouncycastleCryptoCipherParameters> param = LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
  if (paramSpec_ != nil) {
    param = new_LibOrgBouncycastleCryptoParamsParametersWithID_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(param, [paramSpec_ getID]);
  }
  [((LibOrgBouncycastleCryptoSignersSM2Signer *) nil_chk(signer_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param];
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey {
  id<LibOrgBouncycastleCryptoCipherParameters> param = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(privateKey);
  if (appRandom_ != nil) {
    param = new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(param, appRandom_);
  }
  if (paramSpec_ != nil) {
    [((LibOrgBouncycastleCryptoSignersSM2Signer *) nil_chk(signer_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithID_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(param, [paramSpec_ getID])];
  }
  else {
    [((LibOrgBouncycastleCryptoSignersSM2Signer *) nil_chk(signer_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param];
  }
}

- (void)engineUpdateWithByte:(jbyte)b {
  [((LibOrgBouncycastleCryptoSignersSM2Signer *) nil_chk(signer_)) updateWithByte:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)bytes
                          withInt:(jint)off
                          withInt:(jint)length {
  [((LibOrgBouncycastleCryptoSignersSM2Signer *) nil_chk(signer_)) updateWithByteArray:bytes withInt:off withInt:length];
}

- (IOSByteArray *)engineSign {
  @try {
    return [((LibOrgBouncycastleCryptoSignersSM2Signer *) nil_chk(signer_)) generateSignature];
  }
  @catch (LibOrgBouncycastleCryptoCryptoException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$$", @"unable to create signature: ", [e getMessage]));
  }
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)bytes {
  return [((LibOrgBouncycastleCryptoSignersSM2Signer *) nil_chk(signer_)) verifySignatureWithByteArray:bytes];
}

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  if ([params isKindOfClass:[LibOrgBouncycastleJcajceSpecSM2ParameterSpec class]]) {
    paramSpec_ = (LibOrgBouncycastleJcajceSpecSM2ParameterSpec *) params;
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"only SM2ParameterSpec supported");
  }
}

- (JavaSecurityAlgorithmParameters *)engineGetParameters {
  if (engineParams_ == nil) {
    if (paramSpec_ != nil) {
      @try {
        engineParams_ = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createAlgorithmParametersWithNSString:@"PSS"];
        [((JavaSecurityAlgorithmParameters *) nil_chk(engineParams_)) init__WithJavaSecuritySpecAlgorithmParameterSpec:paramSpec_];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaLangRuntimeException_initWithNSString_([e description]);
      }
    }
  }
  return engineParams_;
}

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)param {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineGetParameter unsupported");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 9, 8, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x4, 10, 11, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, 14, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoSignersSM2Signer:);
  methods[1].selector = @selector(engineInitVerifyWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:);
  methods[3].selector = @selector(engineUpdateWithByte:);
  methods[4].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(engineSign);
  methods[6].selector = @selector(engineVerifyWithByteArray:);
  methods[7].selector = @selector(engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[8].selector = @selector(engineGetParameters);
  methods[9].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[10].selector = @selector(engineGetParameterWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "engineParams_", "LJavaSecurityAlgorithmParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramSpec_", "LLibOrgBouncycastleJcajceSpecSM2ParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signer_", "LLibOrgBouncycastleCryptoSignersSM2Signer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoSignersSM2Signer;", "engineInitVerify", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "engineInitSign", "LJavaSecurityPrivateKey;", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "[B", "engineSetParameter", "LJavaSecuritySpecAlgorithmParameterSpec;", "LJavaSecurityInvalidAlgorithmParameterException;", "LNSString;LNSObject;", "engineGetParameter", "LNSString;", "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi = { "GMSignatureSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x1, 11, 4, -1, 18, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_initWithLibOrgBouncycastleCryptoSignersSM2Signer_(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi *self, LibOrgBouncycastleCryptoSignersSM2Signer *signer) {
  JavaSecuritySignatureSpi_init(self);
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->signer_ = signer;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_initWithLibOrgBouncycastleCryptoSignersSM2Signer_(LibOrgBouncycastleCryptoSignersSM2Signer *signer) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi, initWithLibOrgBouncycastleCryptoSignersSM2Signer_, signer)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_initWithLibOrgBouncycastleCryptoSignersSM2Signer_(LibOrgBouncycastleCryptoSignersSM2Signer *signer) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi, initWithLibOrgBouncycastleCryptoSignersSM2Signer_, signer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2 = { "sm3WithSM2", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2_init(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_initWithLibOrgBouncycastleCryptoSignersSM2Signer_(self, new_LibOrgBouncycastleCryptoSignersSM2Signer_init());
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcGMSignatureSpi_sm3WithSM2)
