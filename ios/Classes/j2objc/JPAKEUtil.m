//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/jpake/JPAKEUtil.java
//

#include "Arrays.h"
#include "BigIntegers.h"
#include "CryptoException.h"
#include "Digest.h"
#include "HMac.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JPAKEUtil.h"
#include "KeyParameter.h"
#include "Mac.h"
#include "Strings.h"
#include "java/lang/NullPointerException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil ()

+ (JavaMathBigInteger *)calculateHashForZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)g
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)gr
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)gx
                                                                    withNSString:(NSString *)participantId
                                              withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

+ (IOSByteArray *)calculateMacKeyWithJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
                     withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

+ (void)updateDigestWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger;

+ (void)updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                             withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger;

+ (void)updateDigestWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                          withNSString:(NSString *)string;

+ (void)updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                       withNSString:(NSString *)string;

+ (void)updateMacWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                          withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger;

+ (void)updateMacWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                                    withNSString:(NSString *)string;

+ (IOSByteArray *)intToByteArrayWithInt:(jint)value;

@end

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withLibOrgBouncycastleCryptoDigest_(JavaMathBigInteger *g, JavaMathBigInteger *gr, JavaMathBigInteger *gx, NSString *participantId, id<LibOrgBouncycastleCryptoDigest> digest);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateMacKeyWithJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_(JavaMathBigInteger *keyingMaterial, id<LibOrgBouncycastleCryptoDigest> digest);

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(id<LibOrgBouncycastleCryptoDigest> digest, JavaMathBigInteger *bigInteger);

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(id<LibOrgBouncycastleCryptoDigest> digest, JavaMathBigInteger *bigInteger);

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithLibOrgBouncycastleCryptoDigest_withNSString_(id<LibOrgBouncycastleCryptoDigest> digest, NSString *string);

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withNSString_(id<LibOrgBouncycastleCryptoDigest> digest, NSString *string);

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withJavaMathBigInteger_(id<LibOrgBouncycastleCryptoMac> mac, JavaMathBigInteger *bigInteger);

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withNSString_(id<LibOrgBouncycastleCryptoMac> mac, NSString *string);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(jint value);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil)

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ZERO;
JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE;

@implementation LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil

+ (JavaMathBigInteger *)ZERO {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ZERO;
}

+ (JavaMathBigInteger *)ONE {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaMathBigInteger *)generateX1WithJavaMathBigInteger:(JavaMathBigInteger *)q
                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_generateX1WithJavaMathBigInteger_withJavaSecuritySecureRandom_(q, random);
}

+ (JavaMathBigInteger *)generateX2WithJavaMathBigInteger:(JavaMathBigInteger *)q
                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_generateX2WithJavaMathBigInteger_withJavaSecuritySecureRandom_(q, random);
}

+ (JavaMathBigInteger *)calculateSWithCharArray:(IOSCharArray *)password {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateSWithCharArray_(password);
}

+ (JavaMathBigInteger *)calculateGxWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                   withJavaMathBigInteger:(JavaMathBigInteger *)g
                                   withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateGxWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, g, x);
}

+ (JavaMathBigInteger *)calculateGAWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx1
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx3
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx4 {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateGAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, gx1, gx3, gx4);
}

+ (JavaMathBigInteger *)calculateX2sWithJavaMathBigInteger:(JavaMathBigInteger *)q
                                    withJavaMathBigInteger:(JavaMathBigInteger *)x2
                                    withJavaMathBigInteger:(JavaMathBigInteger *)s {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateX2sWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q, x2, s);
}

+ (JavaMathBigInteger *)calculateAWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                  withJavaMathBigInteger:(JavaMathBigInteger *)q
                                  withJavaMathBigInteger:(JavaMathBigInteger *)gA
                                  withJavaMathBigInteger:(JavaMathBigInteger *)x2s {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, q, gA, x2s);
}

+ (IOSObjectArray *)calculateZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                               withJavaMathBigInteger:(JavaMathBigInteger *)q
                                               withJavaMathBigInteger:(JavaMathBigInteger *)g
                                               withJavaMathBigInteger:(JavaMathBigInteger *)gx
                                               withJavaMathBigInteger:(JavaMathBigInteger *)x
                                                         withNSString:(NSString *)participantId
                                   withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withLibOrgBouncycastleCryptoDigest_withJavaSecuritySecureRandom_(p, q, g, gx, x, participantId, digest, random);
}

+ (JavaMathBigInteger *)calculateHashForZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)g
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)gr
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)gx
                                                                    withNSString:(NSString *)participantId
                                              withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withLibOrgBouncycastleCryptoDigest_(g, gr, gx, participantId, digest);
}

+ (void)validateGx4WithJavaMathBigInteger:(JavaMathBigInteger *)gx4 {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateGx4WithJavaMathBigInteger_(gx4);
}

+ (void)validateGaWithJavaMathBigInteger:(JavaMathBigInteger *)ga {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateGaWithJavaMathBigInteger_(ga);
}

+ (void)validateZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                  withJavaMathBigInteger:(JavaMathBigInteger *)q
                                  withJavaMathBigInteger:(JavaMathBigInteger *)g
                                  withJavaMathBigInteger:(JavaMathBigInteger *)gx
                             withJavaMathBigIntegerArray:(IOSObjectArray *)zeroKnowledgeProof
                                            withNSString:(NSString *)participantId
                      withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withNSString_withLibOrgBouncycastleCryptoDigest_(p, q, g, gx, zeroKnowledgeProof, participantId, digest);
}

+ (JavaMathBigInteger *)calculateKeyingMaterialWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                               withJavaMathBigInteger:(JavaMathBigInteger *)q
                                               withJavaMathBigInteger:(JavaMathBigInteger *)gx4
                                               withJavaMathBigInteger:(JavaMathBigInteger *)x2
                                               withJavaMathBigInteger:(JavaMathBigInteger *)s
                                               withJavaMathBigInteger:(JavaMathBigInteger *)B {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateKeyingMaterialWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, q, gx4, x2, s, B);
}

+ (void)validateParticipantIdsDifferWithNSString:(NSString *)participantId1
                                    withNSString:(NSString *)participantId2 {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsDifferWithNSString_withNSString_(participantId1, participantId2);
}

+ (void)validateParticipantIdsEqualWithNSString:(NSString *)expectedParticipantId
                                   withNSString:(NSString *)actualParticipantId {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsEqualWithNSString_withNSString_(expectedParticipantId, actualParticipantId);
}

+ (void)validateNotNullWithId:(id)object
                 withNSString:(NSString *)description_ {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(object, description_);
}

+ (JavaMathBigInteger *)calculateMacTagWithNSString:(NSString *)participantId
                                       withNSString:(NSString *)partnerParticipantId
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx1
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx2
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx3
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx4
                             withJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
                 withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_(participantId, partnerParticipantId, gx1, gx2, gx3, gx4, keyingMaterial, digest);
}

+ (IOSByteArray *)calculateMacKeyWithJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
                     withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateMacKeyWithJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_(keyingMaterial, digest);
}

+ (void)validateMacTagWithNSString:(NSString *)participantId
                      withNSString:(NSString *)partnerParticipantId
            withJavaMathBigInteger:(JavaMathBigInteger *)gx1
            withJavaMathBigInteger:(JavaMathBigInteger *)gx2
            withJavaMathBigInteger:(JavaMathBigInteger *)gx3
            withJavaMathBigInteger:(JavaMathBigInteger *)gx4
            withJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
            withJavaMathBigInteger:(JavaMathBigInteger *)partnerMacTag {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(participantId, partnerParticipantId, gx1, gx2, gx3, gx4, keyingMaterial, digest, partnerMacTag);
}

+ (void)updateDigestWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(digest, bigInteger);
}

+ (void)updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                             withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(digest, bigInteger);
}

+ (void)updateDigestWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                          withNSString:(NSString *)string {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithLibOrgBouncycastleCryptoDigest_withNSString_(digest, string);
}

+ (void)updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                       withNSString:(NSString *)string {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withNSString_(digest, string);
}

+ (void)updateMacWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                          withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withJavaMathBigInteger_(mac, bigInteger);
}

+ (void)updateMacWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                                    withNSString:(NSString *)string {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withNSString_(mac, string);
}

+ (IOSByteArray *)intToByteArrayWithInt:(jint)value {
  return LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 9, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 10, 8, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, 17, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 24, 17, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 24, 17, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 32, 33, 17, -1, -1, -1 },
    { NULL, "V", 0xa, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 36, 35, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 34, 37, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 40, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 41, 42, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateX1WithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(generateX2WithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(calculateSWithCharArray:);
  methods[4].selector = @selector(calculateGxWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(calculateGAWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[6].selector = @selector(calculateX2sWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[7].selector = @selector(calculateAWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[8].selector = @selector(calculateZeroKnowledgeProofWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withNSString:withLibOrgBouncycastleCryptoDigest:withJavaSecuritySecureRandom:);
  methods[9].selector = @selector(calculateHashForZeroKnowledgeProofWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withNSString:withLibOrgBouncycastleCryptoDigest:);
  methods[10].selector = @selector(validateGx4WithJavaMathBigInteger:);
  methods[11].selector = @selector(validateGaWithJavaMathBigInteger:);
  methods[12].selector = @selector(validateZeroKnowledgeProofWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigIntegerArray:withNSString:withLibOrgBouncycastleCryptoDigest:);
  methods[13].selector = @selector(calculateKeyingMaterialWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[14].selector = @selector(validateParticipantIdsDifferWithNSString:withNSString:);
  methods[15].selector = @selector(validateParticipantIdsEqualWithNSString:withNSString:);
  methods[16].selector = @selector(validateNotNullWithId:withNSString:);
  methods[17].selector = @selector(calculateMacTagWithNSString:withNSString:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withLibOrgBouncycastleCryptoDigest:);
  methods[18].selector = @selector(calculateMacKeyWithJavaMathBigInteger:withLibOrgBouncycastleCryptoDigest:);
  methods[19].selector = @selector(validateMacTagWithNSString:withNSString:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withLibOrgBouncycastleCryptoDigest:withJavaMathBigInteger:);
  methods[20].selector = @selector(updateDigestWithLibOrgBouncycastleCryptoDigest:withJavaMathBigInteger:);
  methods[21].selector = @selector(updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest:withJavaMathBigInteger:);
  methods[22].selector = @selector(updateDigestWithLibOrgBouncycastleCryptoDigest:withNSString:);
  methods[23].selector = @selector(updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest:withNSString:);
  methods[24].selector = @selector(updateMacWithLibOrgBouncycastleCryptoMac:withJavaMathBigInteger:);
  methods[25].selector = @selector(updateMacWithLibOrgBouncycastleCryptoMac:withNSString:);
  methods[26].selector = @selector(intToByteArrayWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x18, -1, 43, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x18, -1, 44, -1, -1 },
  };
  static const void *ptrTable[] = { "generateX1", "LJavaMathBigInteger;LJavaSecuritySecureRandom;", "generateX2", "calculateS", "[C", "calculateGx", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "calculateGA", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "calculateX2s", "calculateA", "calculateZeroKnowledgeProof", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LNSString;LLibOrgBouncycastleCryptoDigest;LJavaSecuritySecureRandom;", "calculateHashForZeroKnowledgeProof", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LNSString;LLibOrgBouncycastleCryptoDigest;", "validateGx4", "LJavaMathBigInteger;", "LLibOrgBouncycastleCryptoCryptoException;", "validateGa", "validateZeroKnowledgeProof", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;[LJavaMathBigInteger;LNSString;LLibOrgBouncycastleCryptoDigest;", "calculateKeyingMaterial", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "validateParticipantIdsDiffer", "LNSString;LNSString;", "validateParticipantIdsEqual", "validateNotNull", "LNSObject;LNSString;", "calculateMacTag", "LNSString;LNSString;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LLibOrgBouncycastleCryptoDigest;", "calculateMacKey", "LJavaMathBigInteger;LLibOrgBouncycastleCryptoDigest;", "validateMacTag", "LNSString;LNSString;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LLibOrgBouncycastleCryptoDigest;LJavaMathBigInteger;", "updateDigest", "LLibOrgBouncycastleCryptoDigest;LJavaMathBigInteger;", "updateDigestIncludingSize", "LLibOrgBouncycastleCryptoDigest;LNSString;", "updateMac", "LLibOrgBouncycastleCryptoMac;LJavaMathBigInteger;", "LLibOrgBouncycastleCryptoMac;LNSString;", "intToByteArray", "I", &LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ZERO, &LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil = { "JPAKEUtil", "lib.org.bouncycastle.crypto.agreement.jpake", ptrTable, methods, fields, 7, 0x1, 27, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil class]) {
    LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil)
  }
}

@end

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_init(LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil *new_LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil, init)
}

LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil *create_LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil, init)
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_generateX1WithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *q, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  JavaMathBigInteger *min = LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ZERO;
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE];
  return LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(min, max, random);
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_generateX2WithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *q, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  JavaMathBigInteger *min = LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE;
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE];
  return LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(min, max, random);
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateSWithCharArray_(IOSCharArray *password) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return new_JavaMathBigInteger_initWithByteArray_(LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_(password));
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateGxWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *g, JavaMathBigInteger *x) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:x withJavaMathBigInteger:p];
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateGAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *gx1, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(gx1)) multiplyWithJavaMathBigInteger:gx3])) multiplyWithJavaMathBigInteger:gx4])) modWithJavaMathBigInteger:p];
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateX2sWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *x2, JavaMathBigInteger *s) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x2)) multiplyWithJavaMathBigInteger:s])) modWithJavaMathBigInteger:q];
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *gA, JavaMathBigInteger *x2s) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk(gA)) modPowWithJavaMathBigInteger:x2s withJavaMathBigInteger:p];
}

IOSObjectArray *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withLibOrgBouncycastleCryptoDigest_withJavaSecuritySecureRandom_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *gx, JavaMathBigInteger *x, NSString *participantId, id<LibOrgBouncycastleCryptoDigest> digest, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSObjectArray *zeroKnowledgeProof = [IOSObjectArray newArrayWithLength:2 type:JavaMathBigInteger_class_()];
  JavaMathBigInteger *vMin = LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ZERO;
  JavaMathBigInteger *vMax = [((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE];
  JavaMathBigInteger *v = LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(vMin, vMax, random);
  JavaMathBigInteger *gv = [((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:v withJavaMathBigInteger:p];
  JavaMathBigInteger *h = LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withLibOrgBouncycastleCryptoDigest_(g, gv, gx, participantId, digest);
  (void) IOSObjectArray_Set(zeroKnowledgeProof, 0, gv);
  (void) IOSObjectArray_Set(zeroKnowledgeProof, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(v)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x)) multiplyWithJavaMathBigInteger:h]])) modWithJavaMathBigInteger:q]);
  return zeroKnowledgeProof;
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withLibOrgBouncycastleCryptoDigest_(JavaMathBigInteger *g, JavaMathBigInteger *gr, JavaMathBigInteger *gx, NSString *participantId, id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) reset];
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(digest, g);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(digest, gr);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(digest, gx);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withNSString_(digest, participantId);
  IOSByteArray *output = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  [digest doFinalWithByteArray:output withInt:0];
  return new_JavaMathBigInteger_initWithByteArray_(output);
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateGx4WithJavaMathBigInteger_(JavaMathBigInteger *gx4) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(gx4)) isEqual:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE]) {
    @throw new_LibOrgBouncycastleCryptoCryptoException_initWithNSString_(@"g^x validation failed.  g^x should not be 1.");
  }
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateGaWithJavaMathBigInteger_(JavaMathBigInteger *ga) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(ga)) isEqual:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE]) {
    @throw new_LibOrgBouncycastleCryptoCryptoException_initWithNSString_(@"ga is equal to 1.  It should not be.  The chances of this happening are on the order of 2^160 for a 160-bit q.  Try again.");
  }
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withNSString_withLibOrgBouncycastleCryptoDigest_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *gx, IOSObjectArray *zeroKnowledgeProof, NSString *participantId, id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  JavaMathBigInteger *gv = IOSObjectArray_Get(nil_chk(zeroKnowledgeProof), 0);
  JavaMathBigInteger *r = IOSObjectArray_Get(zeroKnowledgeProof, 1);
  JavaMathBigInteger *h = LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withLibOrgBouncycastleCryptoDigest_(g, gv, gx, participantId, digest);
  if (!([((JavaMathBigInteger *) nil_chk(gx)) compareToWithId:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ZERO] == 1 && [gx compareToWithId:p] == -1 && [((JavaMathBigInteger *) nil_chk([gx modPowWithJavaMathBigInteger:q withJavaMathBigInteger:p])) compareToWithId:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_ONE] == 0 && [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:r withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:[gx modPowWithJavaMathBigInteger:h withJavaMathBigInteger:p]])) modWithJavaMathBigInteger:p])) compareToWithId:gv] == 0)) {
    @throw new_LibOrgBouncycastleCryptoCryptoException_initWithNSString_(@"Zero-knowledge proof validation failed");
  }
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateKeyingMaterialWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *gx4, JavaMathBigInteger *x2, JavaMathBigInteger *s, JavaMathBigInteger *B) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(gx4)) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x2)) multiplyWithJavaMathBigInteger:s])) negate])) modWithJavaMathBigInteger:q] withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:B])) modPowWithJavaMathBigInteger:x2 withJavaMathBigInteger:p];
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsDifferWithNSString_withNSString_(NSString *participantId1, NSString *participantId2) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if ([((NSString *) nil_chk(participantId1)) isEqual:participantId2]) {
    @throw new_LibOrgBouncycastleCryptoCryptoException_initWithNSString_(JreStrcat("$$$", @"Both participants are using the same participantId (", participantId1, @"). This is not allowed. Each participant must use a unique participantId."));
  }
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsEqualWithNSString_withNSString_(NSString *expectedParticipantId, NSString *actualParticipantId) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if (![((NSString *) nil_chk(expectedParticipantId)) isEqual:actualParticipantId]) {
    @throw new_LibOrgBouncycastleCryptoCryptoException_initWithNSString_(JreStrcat("$$$$C", @"Received payload from incorrect partner (", actualParticipantId, @"). Expected to receive payload from ", expectedParticipantId, '.'));
  }
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(id object, NSString *description_) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if (object == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$", description_, @" must not be null"));
  }
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_(NSString *participantId, NSString *partnerParticipantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4, JavaMathBigInteger *keyingMaterial, id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *macKey = LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateMacKeyWithJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_(keyingMaterial, digest);
  LibOrgBouncycastleCryptoMacsHMac *mac = new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(digest);
  IOSByteArray *macOutput = [IOSByteArray newArrayWithLength:[mac getMacSize]];
  [mac init__WithLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(macKey)];
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withNSString_(mac, @"KC_1_U");
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withNSString_(mac, participantId);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withNSString_(mac, partnerParticipantId);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withJavaMathBigInteger_(mac, gx1);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withJavaMathBigInteger_(mac, gx2);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withJavaMathBigInteger_(mac, gx3);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withJavaMathBigInteger_(mac, gx4);
  [mac doFinalWithByteArray:macOutput withInt:0];
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(macKey, (jbyte) 0);
  return new_JavaMathBigInteger_initWithByteArray_(macOutput);
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateMacKeyWithJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_(JavaMathBigInteger *keyingMaterial, id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) reset];
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(digest, keyingMaterial);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithLibOrgBouncycastleCryptoDigest_withNSString_(digest, @"JPAKE_KC");
  IOSByteArray *output = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  [digest doFinalWithByteArray:output withInt:0];
  return output;
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_validateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(NSString *participantId, NSString *partnerParticipantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4, JavaMathBigInteger *keyingMaterial, id<LibOrgBouncycastleCryptoDigest> digest, JavaMathBigInteger *partnerMacTag) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  JavaMathBigInteger *expectedMacTag = LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_calculateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoDigest_(partnerParticipantId, participantId, gx3, gx4, gx1, gx2, keyingMaterial, digest);
  if (![((JavaMathBigInteger *) nil_chk(expectedMacTag)) isEqual:partnerMacTag]) {
    @throw new_LibOrgBouncycastleCryptoCryptoException_initWithNSString_(@"Partner MacTag validation failed. Therefore, the password, MAC, or digest algorithm of each participant does not match.");
  }
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(id<LibOrgBouncycastleCryptoDigest> digest, JavaMathBigInteger *bigInteger) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(bigInteger);
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:byteArray withInt:0 withInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withJavaMathBigInteger_(id<LibOrgBouncycastleCryptoDigest> digest, JavaMathBigInteger *bigInteger) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(bigInteger);
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(((IOSByteArray *) nil_chk(byteArray))->size_) withInt:0 withInt:4];
  [digest updateWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithLibOrgBouncycastleCryptoDigest_withNSString_(id<LibOrgBouncycastleCryptoDigest> digest, NSString *string) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:byteArray withInt:0 withInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithLibOrgBouncycastleCryptoDigest_withNSString_(id<LibOrgBouncycastleCryptoDigest> digest, NSString *string) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(((IOSByteArray *) nil_chk(byteArray))->size_) withInt:0 withInt:4];
  [digest updateWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withJavaMathBigInteger_(id<LibOrgBouncycastleCryptoMac> mac, JavaMathBigInteger *bigInteger) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(bigInteger);
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac)) updateWithByteArray:byteArray withInt:0 withInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithLibOrgBouncycastleCryptoMac_withNSString_(id<LibOrgBouncycastleCryptoMac> mac, NSString *string) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac)) updateWithByteArray:byteArray withInt:0 withInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(jint value) {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (JreURShift32(value, 24)), (jbyte) (JreURShift32(value, 16)), (jbyte) (JreURShift32(value, 8)), (jbyte) value } count:4];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementJpakeJPAKEUtil)
