//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/DSTU7624Mac.java
//

#include "Arrays.h"
#include "CipherParameters.h"
#include "DSTU7624Engine.h"
#include "DSTU7624Mac.h"
#include "DataLengthException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OutputLengthException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoMacsDSTU7624Mac () {
 @public
  IOSByteArray *buf_;
  jint bufOff_;
  jint macSize_;
  jint blockSize_;
  LibOrgBouncycastleCryptoEnginesDSTU7624Engine *engine_;
  IOSByteArray *c_;
  IOSByteArray *cTemp_;
  IOSByteArray *kDelta_;
}

- (void)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff;

- (void)xor__WithByteArray:(IOSByteArray *)x
                   withInt:(jint)xOff
             withByteArray:(IOSByteArray *)y
                   withInt:(jint)yOff
             withByteArray:(IOSByteArray *)x_xor_y;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsDSTU7624Mac, buf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsDSTU7624Mac, engine_, LibOrgBouncycastleCryptoEnginesDSTU7624Engine *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsDSTU7624Mac, c_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsDSTU7624Mac, cTemp_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsDSTU7624Mac, kDelta_, IOSByteArray *)

inline jint LibOrgBouncycastleCryptoMacsDSTU7624Mac_get_BITS_IN_BYTE(void);
#define LibOrgBouncycastleCryptoMacsDSTU7624Mac_BITS_IN_BYTE 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoMacsDSTU7624Mac, BITS_IN_BYTE, jint)

__attribute__((unused)) static void LibOrgBouncycastleCryptoMacsDSTU7624Mac_processBlockWithByteArray_withInt_(LibOrgBouncycastleCryptoMacsDSTU7624Mac *self, IOSByteArray *inArg, jint inOff);

__attribute__((unused)) static void LibOrgBouncycastleCryptoMacsDSTU7624Mac_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_(LibOrgBouncycastleCryptoMacsDSTU7624Mac *self, IOSByteArray *x, jint xOff, IOSByteArray *y, jint yOff, IOSByteArray *x_xor_y);

@implementation LibOrgBouncycastleCryptoMacsDSTU7624Mac

- (instancetype)initWithInt:(jint)blockBitLength
                    withInt:(jint)q {
  LibOrgBouncycastleCryptoMacsDSTU7624Mac_initWithInt_withInt_(self, blockBitLength, q);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]]) {
    [((LibOrgBouncycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:params];
    [((LibOrgBouncycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) processBlockWithByteArray:kDelta_ withInt:0 withByteArray:kDelta_ withInt:0];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid parameter passed to DSTU7624Mac");
  }
}

- (NSString *)getAlgorithmName {
  return @"DSTU7624Mac";
}

- (jint)getMacSize {
  return macSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    LibOrgBouncycastleCryptoMacsDSTU7624Mac_processBlockWithByteArray_withInt_(self, buf_, 0);
    bufOff_ = 0;
  }
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"can't have a negative input length!");
  }
  jint blockSize = [((LibOrgBouncycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize];
  jint gapLen = blockSize - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    LibOrgBouncycastleCryptoMacsDSTU7624Mac_processBlockWithByteArray_withInt_(self, buf_, 0);
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > blockSize) {
      LibOrgBouncycastleCryptoMacsDSTU7624Mac_processBlockWithByteArray_withInt_(self, inArg, inOff);
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
}

- (void)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff {
  LibOrgBouncycastleCryptoMacsDSTU7624Mac_processBlockWithByteArray_withInt_(self, inArg, inOff);
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  if (bufOff_ % ((IOSByteArray *) nil_chk(buf_))->size_ != 0) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input must be a multiple of blocksize");
  }
  LibOrgBouncycastleCryptoMacsDSTU7624Mac_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_(self, c_, 0, buf_, 0, cTemp_);
  LibOrgBouncycastleCryptoMacsDSTU7624Mac_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_(self, cTemp_, 0, kDelta_, 0, c_);
  [((LibOrgBouncycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) processBlockWithByteArray:c_ withInt:0 withByteArray:c_ withInt:0];
  if (macSize_ + outOff > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c_, 0, outArg, outOff, macSize_);
  return macSize_;
}

- (void)reset {
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(c_, (jbyte) (jint) 0x00);
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(cTemp_, (jbyte) (jint) 0x00);
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(kDelta_, (jbyte) (jint) 0x00);
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(buf_, (jbyte) (jint) 0x00);
  [((LibOrgBouncycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) reset];
  [((LibOrgBouncycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) processBlockWithByteArray:kDelta_ withInt:0 withByteArray:kDelta_ withInt:0];
  bufOff_ = 0;
}

- (void)xor__WithByteArray:(IOSByteArray *)x
                   withInt:(jint)xOff
             withByteArray:(IOSByteArray *)y
                   withInt:(jint)yOff
             withByteArray:(IOSByteArray *)x_xor_y {
  LibOrgBouncycastleCryptoMacsDSTU7624Mac_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_(self, x, xOff, y, yOff, x_xor_y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 8, 10, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getMacSize);
  methods[4].selector = @selector(updateWithByte:);
  methods[5].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(processBlockWithByteArray:withInt:);
  methods[7].selector = @selector(doFinalWithByteArray:withInt:);
  methods[8].selector = @selector(reset);
  methods[9].selector = @selector(xor__WithByteArray:withInt:withByteArray:withInt:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BITS_IN_BYTE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoMacsDSTU7624Mac_BITS_IN_BYTE, 0x1a, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "engine_", "LLibOrgBouncycastleCryptoEnginesDSTU7624Engine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "c_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cTemp_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "kDelta_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "init", "LLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "update", "B", "[BII", "processBlock", "[BI", "doFinal", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "xor", "[BI[BI[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoMacsDSTU7624Mac = { "DSTU7624Mac", "lib.org.bouncycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 10, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoMacsDSTU7624Mac;
}

@end

void LibOrgBouncycastleCryptoMacsDSTU7624Mac_initWithInt_withInt_(LibOrgBouncycastleCryptoMacsDSTU7624Mac *self, jint blockBitLength, jint q) {
  NSObject_init(self);
  self->engine_ = new_LibOrgBouncycastleCryptoEnginesDSTU7624Engine_initWithInt_(blockBitLength);
  self->blockSize_ = blockBitLength / LibOrgBouncycastleCryptoMacsDSTU7624Mac_BITS_IN_BYTE;
  self->macSize_ = q / LibOrgBouncycastleCryptoMacsDSTU7624Mac_BITS_IN_BYTE;
  self->c_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->kDelta_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cTemp_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->buf_ = [IOSByteArray newArrayWithLength:self->blockSize_];
}

LibOrgBouncycastleCryptoMacsDSTU7624Mac *new_LibOrgBouncycastleCryptoMacsDSTU7624Mac_initWithInt_withInt_(jint blockBitLength, jint q) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsDSTU7624Mac, initWithInt_withInt_, blockBitLength, q)
}

LibOrgBouncycastleCryptoMacsDSTU7624Mac *create_LibOrgBouncycastleCryptoMacsDSTU7624Mac_initWithInt_withInt_(jint blockBitLength, jint q) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsDSTU7624Mac, initWithInt_withInt_, blockBitLength, q)
}

void LibOrgBouncycastleCryptoMacsDSTU7624Mac_processBlockWithByteArray_withInt_(LibOrgBouncycastleCryptoMacsDSTU7624Mac *self, IOSByteArray *inArg, jint inOff) {
  LibOrgBouncycastleCryptoMacsDSTU7624Mac_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_(self, self->c_, 0, inArg, inOff, self->cTemp_);
  [((LibOrgBouncycastleCryptoEnginesDSTU7624Engine *) nil_chk(self->engine_)) processBlockWithByteArray:self->cTemp_ withInt:0 withByteArray:self->c_ withInt:0];
}

void LibOrgBouncycastleCryptoMacsDSTU7624Mac_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_(LibOrgBouncycastleCryptoMacsDSTU7624Mac *self, IOSByteArray *x, jint xOff, IOSByteArray *y, jint yOff, IOSByteArray *x_xor_y) {
  if (((IOSByteArray *) nil_chk(x))->size_ - xOff < self->blockSize_ || ((IOSByteArray *) nil_chk(y))->size_ - yOff < self->blockSize_ || ((IOSByteArray *) nil_chk(x_xor_y))->size_ < self->blockSize_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"some of input buffers too short");
  }
  for (jint byteIndex = 0; byteIndex < self->blockSize_; byteIndex++) {
    *IOSByteArray_GetRef(nil_chk(x_xor_y), byteIndex) = (jbyte) (IOSByteArray_Get(x, byteIndex + xOff) ^ IOSByteArray_Get(nil_chk(y), byteIndex + yOff));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoMacsDSTU7624Mac)
