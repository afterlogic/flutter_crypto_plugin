//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/PolicyQualifierInfo.java
//

#ifndef PolicyQualifierInfo_H
#define PolicyQualifierInfo_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1X509PolicyQualifierInfo : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)policyQualifierId
                                     withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)qualifier;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)as;

- (instancetype __nonnull)initWithNSString:(NSString *)cps;

+ (LibOrgBouncycastleAsn1X509PolicyQualifierInfo *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getPolicyQualifierId;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getQualifier;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509PolicyQualifierInfo)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1X509PolicyQualifierInfo *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *policyQualifierId, id<LibOrgBouncycastleAsn1ASN1Encodable> qualifier);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyQualifierInfo *new_LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *policyQualifierId, id<LibOrgBouncycastleAsn1ASN1Encodable> qualifier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyQualifierInfo *create_LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *policyQualifierId, id<LibOrgBouncycastleAsn1ASN1Encodable> qualifier);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithNSString_(LibOrgBouncycastleAsn1X509PolicyQualifierInfo *self, NSString *cps);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyQualifierInfo *new_LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithNSString_(NSString *cps) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyQualifierInfo *create_LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithNSString_(NSString *cps);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509PolicyQualifierInfo *self, LibOrgBouncycastleAsn1ASN1Sequence *as);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyQualifierInfo *new_LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *as) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyQualifierInfo *create_LibOrgBouncycastleAsn1X509PolicyQualifierInfo_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *as);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509PolicyQualifierInfo *LibOrgBouncycastleAsn1X509PolicyQualifierInfo_getInstanceWithId_(id obj);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509PolicyQualifierInfo)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PolicyQualifierInfo_H
