//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPublicKey.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "BCECPublicKey.h"
#include "BouncyCastleProvider.h"
#include "DERBitString.h"
#include "DEROctetString.h"
#include "EC5Util.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECParameterSpec.h"
#include "ECPoint.h"
#include "ECPublicKeyParameters.h"
#include "ECPublicKeySpec.h"
#include "ECUtils.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceUtilECUtil.h"
#include "JcajceUtilKeyUtil.h"
#include "ProviderConfiguration.h"
#include "SubjectPublicKeyInfo.h"
#include "X962Parameters.h"
#include "X9ECPoint.h"
#include "X9IntegerConverter.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/ECPublicKeySpec.h"
#include "java/security/spec/EllipticCurve.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey () {
 @public
  NSString *algorithm_;
  jboolean withCompression_;
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ecPublicKey_;
  JavaSecuritySpecECParameterSpec *ecSpec_;
  id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration_;
}

- (JavaSecuritySpecECParameterSpec *)createSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                            withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)dp;

- (void)populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, algorithm_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, ecPublicKey_, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, ecSpec_, JavaSecuritySpecECParameterSpec *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, configuration_, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaSecuritySpecEllipticCurve *ellipticCurve, LibOrgBouncycastleCryptoParamsECDomainParameters *dp);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaIoObjectOutputStream *outArg);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey

+ (jlong)serialVersionUID {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_serialVersionUID;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey:(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *)key {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_(self, algorithm, key);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withJavaSecuritySpecECPublicKeySpec:(JavaSecuritySpecECPublicKeySpec *)spec
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, spec, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleJceSpecECPublicKeySpec:(LibOrgBouncycastleJceSpecECPublicKeySpec *)spec
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, spec, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)params
withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)spec
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, params, spec, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)params
withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, params, spec, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)params
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, params, configuration);
  return self;
}

- (instancetype)initWithJavaSecurityInterfacesECPublicKey:(id<JavaSecurityInterfacesECPublicKey>)key
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, key, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, info, configuration);
  return self;
}

- (JavaSecuritySpecECParameterSpec *)createSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                            withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)dp {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
}

- (void)populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
}

- (NSString *)getAlgorithm {
  return algorithm_;
}

- (NSString *)getFormat {
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  id<LibOrgBouncycastleAsn1ASN1Encodable> params = LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec_, withCompression_);
  LibOrgBouncycastleAsn1ASN1OctetString *p = LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECPoint_withBoolean_([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ], withCompression_) toASN1Primitive]);
  LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info = new_LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey), params), [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(p)) getOctets]);
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilKeyUtil_getEncodedSubjectPublicKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(info);
}

- (JavaSecuritySpecECParameterSpec *)getParams {
  return ecSpec_;
}

- (LibOrgBouncycastleJceSpecECParameterSpec *)getParameters {
  if (ecSpec_ == nil) {
    return nil;
  }
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec_, withCompression_);
}

- (JavaSecuritySpecECPoint *)getW {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECPoint_([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ]);
}

- (LibOrgBouncycastleMathEcECPoint *)getQ {
  LibOrgBouncycastleMathEcECPoint *q = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ];
  if (ecSpec_ == nil) {
    return [((LibOrgBouncycastleMathEcECPoint *) nil_chk(q)) getDetachedPoint];
  }
  return q;
}

- (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)engineGetKeyParameters {
  return ecPublicKey_;
}

- (LibOrgBouncycastleJceSpecECParameterSpec *)engineGetSpec {
  if (ecSpec_ != nil) {
    return LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec_, withCompression_);
  }
  return [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration_)) getEcImplicitlyCa];
}

- (NSString *)description {
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_publicKeyToStringWithNSString_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(@"EC", [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ], [self engineGetSpec]);
}

- (void)setPointFormatWithNSString:(NSString *)style {
  withCompression_ = !([@"UNCOMPRESSED" java_equalsIgnoreCase:style]);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey class]])) {
    return false;
  }
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *other = (LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) cast_chk(o, [LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey class]);
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ])) equalsWithLibOrgBouncycastleMathEcECPoint:[((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) nil_chk(other))->ecPublicKey_)) getQ]] && ([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([self engineGetSpec])) isEqual:[other engineGetSpec]]);
}

- (NSUInteger)hash {
  return ((jint) [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ])) hash]) ^ ((jint) [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([self engineGetSpec])) hash]);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceSpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceSpecECParameterSpec;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, 23, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey:);
  methods[1].selector = @selector(initWithNSString:withJavaSecuritySpecECPublicKeySpec:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[2].selector = @selector(initWithNSString:withLibOrgBouncycastleJceSpecECPublicKeySpec:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[3].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:withJavaSecuritySpecECParameterSpec:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[4].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:withLibOrgBouncycastleJceSpecECParameterSpec:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[5].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[6].selector = @selector(initWithJavaSecurityInterfacesECPublicKey:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[7].selector = @selector(initWithNSString:withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[8].selector = @selector(createSpecWithJavaSecuritySpecEllipticCurve:withLibOrgBouncycastleCryptoParamsECDomainParameters:);
  methods[9].selector = @selector(populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[10].selector = @selector(getAlgorithm);
  methods[11].selector = @selector(getFormat);
  methods[12].selector = @selector(getEncoded);
  methods[13].selector = @selector(getParams);
  methods[14].selector = @selector(getParameters);
  methods[15].selector = @selector(getW);
  methods[16].selector = @selector(getQ);
  methods[17].selector = @selector(engineGetKeyParameters);
  methods[18].selector = @selector(engineGetSpec);
  methods[19].selector = @selector(description);
  methods[20].selector = @selector(setPointFormatWithNSString:);
  methods[21].selector = @selector(isEqual:);
  methods[22].selector = @selector(hash);
  methods[23].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[24].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_serialVersionUID, 0x18, -1, -1, -1, -1 },
    { "algorithm_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "withCompression_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecPublicKey_", "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "ecSpec_", "LJavaSecuritySpecECParameterSpec;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "configuration_", "LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey;", "LNSString;LJavaSecuritySpecECPublicKeySpec;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LLibOrgBouncycastleJceSpecECPublicKeySpec;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;LJavaSecuritySpecECParameterSpec;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;LLibOrgBouncycastleJceSpecECParameterSpec;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LJavaSecurityInterfacesECPublicKey;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "createSpec", "LJavaSecuritySpecEllipticCurve;LLibOrgBouncycastleCryptoParamsECDomainParameters;", "populateFromPubKeyInfo", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "toString", "setPointFormat", "LNSString;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey = { "BCECPublicKey", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x1, 25, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *key) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->ecPublicKey_ = ((LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) nil_chk(key))->ecPublicKey_;
  self->ecSpec_ = key->ecSpec_;
  self->withCompression_ = key->withCompression_;
  self->configuration_ = key->configuration_;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_(NSString *algorithm, LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_, algorithm, key)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_(NSString *algorithm, LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_, algorithm, key)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->ecSpec_ = [((JavaSecuritySpecECPublicKeySpec *) nil_chk(spec)) getParams];
  self->ecPublicKey_ = new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_(self->ecSpec_, [spec getW], false), LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaSecuritySpecECParameterSpec_(configuration, [spec getParams]));
  self->configuration_ = configuration;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withJavaSecuritySpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, spec, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withJavaSecuritySpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, spec, configuration)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, LibOrgBouncycastleJceSpecECPublicKeySpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  if ([((LibOrgBouncycastleJceSpecECPublicKeySpec *) nil_chk(spec)) getParams] != nil) {
    LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([spec getParams])) getCurve];
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_(curve, [((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk([spec getParams])) getSeed]);
    self->ecPublicKey_ = new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([spec getQ], LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleJceSpecECParameterSpec_(configuration, [spec getParams]));
    self->ecSpec_ = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(ellipticCurve, [spec getParams]);
  }
  else {
    LibOrgBouncycastleJceSpecECParameterSpec *s = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
    self->ecPublicKey_ = new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve])) createPointWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([spec getQ])) getAffineXCoord])) toBigInteger] withJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([spec getQ])) getAffineYCoord])) toBigInteger]], LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaSecuritySpecECParameterSpec_(configuration, nil));
    self->ecSpec_ = nil;
  }
  self->configuration_ = configuration;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleJceSpecECPublicKeySpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, spec, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleJceSpecECPublicKeySpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, spec, configuration)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  LibOrgBouncycastleCryptoParamsECDomainParameters *dp = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getParameters];
  self->algorithm_ = algorithm;
  self->ecPublicKey_ = params;
  if (spec == nil) {
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getCurve], [dp getSeed]);
    self->ecSpec_ = LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
  }
  else {
    self->ecSpec_ = spec;
  }
  self->configuration_ = configuration;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, spec, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, spec, configuration)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, LibOrgBouncycastleJceSpecECParameterSpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  LibOrgBouncycastleCryptoParamsECDomainParameters *dp = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getParameters];
  self->algorithm_ = algorithm;
  if (spec == nil) {
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getCurve], [dp getSeed]);
    self->ecSpec_ = LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
  }
  else {
    JavaSecuritySpecEllipticCurve *ellipticCurve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([spec getCurve], [spec getSeed]);
    self->ecSpec_ = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(ellipticCurve, spec);
  }
  self->ecPublicKey_ = params;
  self->configuration_ = configuration;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, LibOrgBouncycastleJceSpecECParameterSpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, spec, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, LibOrgBouncycastleJceSpecECParameterSpec *spec, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, spec, configuration)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->ecPublicKey_ = params;
  self->ecSpec_ = nil;
  self->configuration_ = configuration;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *params, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, configuration)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, id<JavaSecurityInterfacesECPublicKey> key, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = [((id<JavaSecurityInterfacesECPublicKey>) nil_chk(key)) getAlgorithm];
  self->ecSpec_ = [key getParams];
  self->ecPublicKey_ = new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_(self->ecSpec_, [key getW], false), LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaSecuritySpecECParameterSpec_(configuration, [key getParams]));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(id<JavaSecurityInterfacesECPublicKey> key, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithJavaSecurityInterfacesECPublicKey_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, key, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(id<JavaSecurityInterfacesECPublicKey> key, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithJavaSecurityInterfacesECPublicKey_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, key, configuration)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->configuration_ = configuration;
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, info, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, info, configuration)
}

JavaSecuritySpecECParameterSpec *LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaSecuritySpecEllipticCurve *ellipticCurve, LibOrgBouncycastleCryptoParamsECDomainParameters *dp) {
  return new_JavaSecuritySpecECParameterSpec_initWithJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withInt_(ellipticCurve, LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECPoint_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getG]), [dp getN], [((JavaMathBigInteger *) nil_chk([dp getH])) intValue]);
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  LibOrgBouncycastleAsn1X9X962Parameters *params = LibOrgBouncycastleAsn1X9X962Parameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithm])) getParameters]);
  LibOrgBouncycastleMathEcECCurve *curve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getCurveWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleAsn1X9X962Parameters_(self->configuration_, params);
  self->ecSpec_ = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertToSpecWithLibOrgBouncycastleAsn1X9X962Parameters_withLibOrgBouncycastleMathEcECCurve_(params, curve);
  LibOrgBouncycastleAsn1DERBitString *bits = [info getPublicKeyData];
  IOSByteArray *data = [((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bits)) getBytes];
  LibOrgBouncycastleAsn1ASN1OctetString *key = new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(data);
  if (IOSByteArray_Get(nil_chk(data), 0) == (jint) 0x04 && IOSByteArray_Get(data, 1) == data->size_ - 2 && (IOSByteArray_Get(data, 2) == (jint) 0x02 || IOSByteArray_Get(data, 2) == (jint) 0x03)) {
    jint qLength = [new_LibOrgBouncycastleAsn1X9X9IntegerConverter_init() getByteLengthWithLibOrgBouncycastleMathEcECCurve:curve];
    if (qLength >= data->size_ - 3) {
      @try {
        key = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(data), [LibOrgBouncycastleAsn1ASN1OctetString class]);
      }
      @catch (JavaIoIOException *ex) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
      }
    }
  }
  LibOrgBouncycastleAsn1X9X9ECPoint *derQ = new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleAsn1ASN1OctetString_(curve, key);
  self->ecPublicKey_ = new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([derQ getPoint], LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleAsn1X9X962Parameters_(self->configuration_, params));
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  IOSByteArray *enc = (IOSByteArray *) cast_chk([inArg readObject], [IOSByteArray class]);
  self->configuration_ = JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION);
  LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(enc)));
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey)
