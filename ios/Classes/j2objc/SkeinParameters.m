//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/SkeinParameters.java
//

#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "SkeinParameters.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStreamWriter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/text/DateFormat.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Locale.h"

@interface LibOrgBouncycastleCryptoParamsSkeinParameters () {
 @public
  JavaUtilHashtable *parameters_;
}

- (instancetype)initWithJavaUtilHashtable:(JavaUtilHashtable *)parameters;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsSkeinParameters, parameters_, JavaUtilHashtable *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(LibOrgBouncycastleCryptoParamsSkeinParameters *self, JavaUtilHashtable *parameters);

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsSkeinParameters *new_LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(JavaUtilHashtable *parameters) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsSkeinParameters *create_LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(JavaUtilHashtable *parameters);

@interface LibOrgBouncycastleCryptoParamsSkeinParameters_Builder () {
 @public
  JavaUtilHashtable *parameters_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder, parameters_, JavaUtilHashtable *)

@implementation LibOrgBouncycastleCryptoParamsSkeinParameters

+ (jint)PARAM_TYPE_KEY {
  return LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY;
}

+ (jint)PARAM_TYPE_CONFIG {
  return LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_CONFIG;
}

+ (jint)PARAM_TYPE_PERSONALISATION {
  return LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PERSONALISATION;
}

+ (jint)PARAM_TYPE_PUBLIC_KEY {
  return LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PUBLIC_KEY;
}

+ (jint)PARAM_TYPE_KEY_IDENTIFIER {
  return LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY_IDENTIFIER;
}

+ (jint)PARAM_TYPE_NONCE {
  return LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_NONCE;
}

+ (jint)PARAM_TYPE_MESSAGE {
  return LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_MESSAGE;
}

+ (jint)PARAM_TYPE_OUTPUT {
  return LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_OUTPUT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoParamsSkeinParameters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilHashtable:(JavaUtilHashtable *)parameters {
  LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(self, parameters);
  return self;
}

- (JavaUtilHashtable *)getParameters {
  return parameters_;
}

- (IOSByteArray *)getKey {
  return (IOSByteArray *) cast_chk([((JavaUtilHashtable *) nil_chk(parameters_)) getWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY)], [IOSByteArray class]);
}

- (IOSByteArray *)getPersonalisation {
  return (IOSByteArray *) cast_chk([((JavaUtilHashtable *) nil_chk(parameters_)) getWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PERSONALISATION)], [IOSByteArray class]);
}

- (IOSByteArray *)getPublicKey {
  return (IOSByteArray *) cast_chk([((JavaUtilHashtable *) nil_chk(parameters_)) getWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PUBLIC_KEY)], [IOSByteArray class]);
}

- (IOSByteArray *)getKeyIdentifier {
  return (IOSByteArray *) cast_chk([((JavaUtilHashtable *) nil_chk(parameters_)) getWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY_IDENTIFIER)], [IOSByteArray class]);
}

- (IOSByteArray *)getNonce {
  return (IOSByteArray *) cast_chk([((JavaUtilHashtable *) nil_chk(parameters_)) getWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_NONCE)], [IOSByteArray class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilHashtable:);
  methods[2].selector = @selector(getParameters);
  methods[3].selector = @selector(getKey);
  methods[4].selector = @selector(getPersonalisation);
  methods[5].selector = @selector(getPublicKey);
  methods[6].selector = @selector(getKeyIdentifier);
  methods[7].selector = @selector(getNonce);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PARAM_TYPE_KEY", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY, 0x19, -1, -1, -1, -1 },
    { "PARAM_TYPE_CONFIG", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_CONFIG, 0x19, -1, -1, -1, -1 },
    { "PARAM_TYPE_PERSONALISATION", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PERSONALISATION, 0x19, -1, -1, -1, -1 },
    { "PARAM_TYPE_PUBLIC_KEY", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PUBLIC_KEY, 0x19, -1, -1, -1, -1 },
    { "PARAM_TYPE_KEY_IDENTIFIER", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY_IDENTIFIER, 0x19, -1, -1, -1, -1 },
    { "PARAM_TYPE_NONCE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_NONCE, 0x19, -1, -1, -1, -1 },
    { "PARAM_TYPE_MESSAGE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_MESSAGE, 0x19, -1, -1, -1, -1 },
    { "PARAM_TYPE_OUTPUT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_OUTPUT, 0x19, -1, -1, -1, -1 },
    { "parameters_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilHashtable;", "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsSkeinParameters = { "SkeinParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 8, 9, -1, 1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsSkeinParameters;
}

@end

void LibOrgBouncycastleCryptoParamsSkeinParameters_init(LibOrgBouncycastleCryptoParamsSkeinParameters *self) {
  LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(self, new_JavaUtilHashtable_init());
}

LibOrgBouncycastleCryptoParamsSkeinParameters *new_LibOrgBouncycastleCryptoParamsSkeinParameters_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters, init)
}

LibOrgBouncycastleCryptoParamsSkeinParameters *create_LibOrgBouncycastleCryptoParamsSkeinParameters_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters, init)
}

void LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(LibOrgBouncycastleCryptoParamsSkeinParameters *self, JavaUtilHashtable *parameters) {
  NSObject_init(self);
  self->parameters_ = parameters;
}

LibOrgBouncycastleCryptoParamsSkeinParameters *new_LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(JavaUtilHashtable *parameters) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters, initWithJavaUtilHashtable_, parameters)
}

LibOrgBouncycastleCryptoParamsSkeinParameters *create_LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(JavaUtilHashtable *parameters) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters, initWithJavaUtilHashtable_, parameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsSkeinParameters)

@implementation LibOrgBouncycastleCryptoParamsSkeinParameters_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilHashtable:(JavaUtilHashtable *)paramsMap {
  LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithJavaUtilHashtable_(self, paramsMap);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsSkeinParameters:(LibOrgBouncycastleCryptoParamsSkeinParameters *)params {
  LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithLibOrgBouncycastleCryptoParamsSkeinParameters_(self, params);
  return self;
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setWithInt:(jint)type
                                                        withByteArray:(IOSByteArray *)value {
  if (value == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Parameter value must not be null.");
  }
  if ((type != LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY) && (type < LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_CONFIG || type >= LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_OUTPUT || type == LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_MESSAGE)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Parameter types must be in the range 0,5..47,49..62.");
  }
  if (type == LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_CONFIG) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Parameter type ", LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_CONFIG, @" is reserved for internal use."));
  }
  (void) [((JavaUtilHashtable *) nil_chk(self->parameters_)) putWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(type) withId:value];
  return self;
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setKeyWithByteArray:(IOSByteArray *)key {
  return [self setWithInt:LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY withByteArray:key];
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setPersonalisationWithByteArray:(IOSByteArray *)personalisation {
  return [self setWithInt:LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PERSONALISATION withByteArray:personalisation];
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setPersonalisationWithJavaUtilDate:(JavaUtilDate *)date
                                                                                 withNSString:(NSString *)emailAddress
                                                                                 withNSString:(NSString *)distinguisher {
  @try {
    JavaIoByteArrayOutputStream *bout = new_JavaIoByteArrayOutputStream_init();
    JavaIoOutputStreamWriter *out = new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(bout, @"UTF-8");
    JavaTextDateFormat *format = new_JavaTextSimpleDateFormat_initWithNSString_(@"YYYYMMDD");
    [out writeWithNSString:[format formatWithJavaUtilDate:date]];
    [out writeWithNSString:@" "];
    [out writeWithNSString:emailAddress];
    [out writeWithNSString:@" "];
    [out writeWithNSString:distinguisher];
    [out close];
    return [self setWithInt:LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PERSONALISATION withByteArray:[bout toByteArray]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Byte I/O failed: ", e));
  }
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setPersonalisationWithJavaUtilDate:(JavaUtilDate *)date
                                                                           withJavaUtilLocale:(JavaUtilLocale *)dateLocale
                                                                                 withNSString:(NSString *)emailAddress
                                                                                 withNSString:(NSString *)distinguisher {
  @try {
    JavaIoByteArrayOutputStream *bout = new_JavaIoByteArrayOutputStream_init();
    JavaIoOutputStreamWriter *out = new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(bout, @"UTF-8");
    JavaTextDateFormat *format = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"YYYYMMDD", dateLocale);
    [out writeWithNSString:[format formatWithJavaUtilDate:date]];
    [out writeWithNSString:@" "];
    [out writeWithNSString:emailAddress];
    [out writeWithNSString:@" "];
    [out writeWithNSString:distinguisher];
    [out close];
    return [self setWithInt:LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PERSONALISATION withByteArray:[bout toByteArray]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Byte I/O failed: ", e));
  }
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setPublicKeyWithByteArray:(IOSByteArray *)publicKey {
  return [self setWithInt:LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_PUBLIC_KEY withByteArray:publicKey];
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setKeyIdentifierWithByteArray:(IOSByteArray *)keyIdentifier {
  return [self setWithInt:LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_KEY_IDENTIFIER withByteArray:keyIdentifier];
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *)setNonceWithByteArray:(IOSByteArray *)nonce {
  return [self setWithInt:LibOrgBouncycastleCryptoParamsSkeinParameters_PARAM_TYPE_NONCE withByteArray:nonce];
}

- (LibOrgBouncycastleCryptoParamsSkeinParameters *)build {
  return new_LibOrgBouncycastleCryptoParamsSkeinParameters_initWithJavaUtilHashtable_(parameters_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters_Builder;", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsSkeinParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilHashtable:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoParamsSkeinParameters:);
  methods[3].selector = @selector(setWithInt:withByteArray:);
  methods[4].selector = @selector(setKeyWithByteArray:);
  methods[5].selector = @selector(setPersonalisationWithByteArray:);
  methods[6].selector = @selector(setPersonalisationWithJavaUtilDate:withNSString:withNSString:);
  methods[7].selector = @selector(setPersonalisationWithJavaUtilDate:withJavaUtilLocale:withNSString:withNSString:);
  methods[8].selector = @selector(setPublicKeyWithByteArray:);
  methods[9].selector = @selector(setKeyIdentifierWithByteArray:);
  methods[10].selector = @selector(setNonceWithByteArray:);
  methods[11].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameters_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilHashtable;", "LLibOrgBouncycastleCryptoParamsSkeinParameters;", "set", "I[B", "setKey", "[B", "setPersonalisation", "LJavaUtilDate;LNSString;LNSString;", "LJavaUtilDate;LJavaUtilLocale;LNSString;LNSString;", "setPublicKey", "setKeyIdentifier", "setNonce" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsSkeinParameters_Builder = { "Builder", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x9, 12, 1, 1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder;
}

@end

void LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_init(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *self) {
  NSObject_init(self);
  self->parameters_ = new_JavaUtilHashtable_init();
}

LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *new_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder, init)
}

LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *create_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder, init)
}

void LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithJavaUtilHashtable_(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *self, JavaUtilHashtable *paramsMap) {
  NSObject_init(self);
  self->parameters_ = new_JavaUtilHashtable_init();
  id<JavaUtilEnumeration> keys = [((JavaUtilHashtable *) nil_chk(paramsMap)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    JavaLangInteger *key = (JavaLangInteger *) cast_chk([keys nextElement], [JavaLangInteger class]);
    (void) [((JavaUtilHashtable *) nil_chk(self->parameters_)) putWithId:key withId:[paramsMap getWithId:key]];
  }
}

LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *new_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithJavaUtilHashtable_(JavaUtilHashtable *paramsMap) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder, initWithJavaUtilHashtable_, paramsMap)
}

LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *create_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithJavaUtilHashtable_(JavaUtilHashtable *paramsMap) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder, initWithJavaUtilHashtable_, paramsMap)
}

void LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithLibOrgBouncycastleCryptoParamsSkeinParameters_(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *self, LibOrgBouncycastleCryptoParamsSkeinParameters *params) {
  NSObject_init(self);
  self->parameters_ = new_JavaUtilHashtable_init();
  id<JavaUtilEnumeration> keys = [((JavaUtilHashtable *) nil_chk(((LibOrgBouncycastleCryptoParamsSkeinParameters *) nil_chk(params))->parameters_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    JavaLangInteger *key = (JavaLangInteger *) cast_chk([keys nextElement], [JavaLangInteger class]);
    (void) [((JavaUtilHashtable *) nil_chk(self->parameters_)) putWithId:key withId:[((JavaUtilHashtable *) nil_chk(params->parameters_)) getWithId:key]];
  }
}

LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *new_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithLibOrgBouncycastleCryptoParamsSkeinParameters_(LibOrgBouncycastleCryptoParamsSkeinParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder, initWithLibOrgBouncycastleCryptoParamsSkeinParameters_, params)
}

LibOrgBouncycastleCryptoParamsSkeinParameters_Builder *create_LibOrgBouncycastleCryptoParamsSkeinParameters_Builder_initWithLibOrgBouncycastleCryptoParamsSkeinParameters_(LibOrgBouncycastleCryptoParamsSkeinParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder, initWithLibOrgBouncycastleCryptoParamsSkeinParameters_, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsSkeinParameters_Builder)
