//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CertificateRequest.java
//

#ifndef CertificateRequest_H
#define CertificateRequest_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsCertificateRequest : NSObject {
 @public
  IOSShortArray *certificateTypes_;
  JavaUtilVector *supportedSignatureAlgorithms_;
  JavaUtilVector *certificateAuthorities_;
}

#pragma mark Public

- (instancetype __nonnull)initWithShortArray:(IOSShortArray *)certificateTypes
                          withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
                          withJavaUtilVector:(JavaUtilVector *)certificateAuthorities;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (JavaUtilVector *)getCertificateAuthorities;

- (IOSShortArray *)getCertificateTypes;

- (JavaUtilVector *)getSupportedSignatureAlgorithms;

+ (LibOrgBouncycastleCryptoTlsCertificateRequest *)parseWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                            withJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsCertificateRequest)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCertificateRequest, certificateTypes_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCertificateRequest, supportedSignatureAlgorithms_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCertificateRequest, certificateAuthorities_, JavaUtilVector *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(LibOrgBouncycastleCryptoTlsCertificateRequest *self, IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateRequest *new_LibOrgBouncycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateRequest *create_LibOrgBouncycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateRequest *LibOrgBouncycastleCryptoTlsCertificateRequest_parseWithLibOrgBouncycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCertificateRequest)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificateRequest_H
