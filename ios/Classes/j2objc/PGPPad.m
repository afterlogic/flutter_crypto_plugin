//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/PGPPad.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PGPException.h"
#include "PGPPad.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleOpenpgpOperatorPGPPad ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorPGPPad_init(LibOrgBouncycastleOpenpgpOperatorPGPPad *self);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorPGPPad *new_LibOrgBouncycastleOpenpgpOperatorPGPPad_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorPGPPad *create_LibOrgBouncycastleOpenpgpOperatorPGPPad_init(void);

@implementation LibOrgBouncycastleOpenpgpOperatorPGPPad

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorPGPPad_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)padSessionDataWithByteArray:(IOSByteArray *)sessionInfo {
  return LibOrgBouncycastleOpenpgpOperatorPGPPad_padSessionDataWithByteArray_(sessionInfo);
}

+ (IOSByteArray *)unpadSessionDataWithByteArray:(IOSByteArray *)encoded {
  return LibOrgBouncycastleOpenpgpOperatorPGPPad_unpadSessionDataWithByteArray_(encoded);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(padSessionDataWithByteArray:);
  methods[2].selector = @selector(unpadSessionDataWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "padSessionData", "[B", "unpadSessionData", "LLibOrgBouncycastleOpenpgpPGPException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorPGPPad = { "PGPPad", "lib.org.bouncycastle.openpgp.operator", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorPGPPad;
}

@end

void LibOrgBouncycastleOpenpgpOperatorPGPPad_init(LibOrgBouncycastleOpenpgpOperatorPGPPad *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorPGPPad *new_LibOrgBouncycastleOpenpgpOperatorPGPPad_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorPGPPad, init)
}

LibOrgBouncycastleOpenpgpOperatorPGPPad *create_LibOrgBouncycastleOpenpgpOperatorPGPPad_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorPGPPad, init)
}

IOSByteArray *LibOrgBouncycastleOpenpgpOperatorPGPPad_padSessionDataWithByteArray_(IOSByteArray *sessionInfo) {
  LibOrgBouncycastleOpenpgpOperatorPGPPad_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:40];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sessionInfo, 0, result, 0, ((IOSByteArray *) nil_chk(sessionInfo))->size_);
  jbyte padValue = (jbyte) (result->size_ - sessionInfo->size_);
  for (jint i = sessionInfo->size_; i != result->size_; i++) {
    *IOSByteArray_GetRef(result, i) = padValue;
  }
  return result;
}

IOSByteArray *LibOrgBouncycastleOpenpgpOperatorPGPPad_unpadSessionDataWithByteArray_(IOSByteArray *encoded) {
  LibOrgBouncycastleOpenpgpOperatorPGPPad_initialize();
  jbyte padValue = IOSByteArray_Get(encoded, ((IOSByteArray *) nil_chk(encoded))->size_ - 1);
  for (jint i = encoded->size_ - padValue; i != encoded->size_; i++) {
    if (IOSByteArray_Get(encoded, i) != padValue) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"bad padding found in session data");
    }
  }
  IOSByteArray *taggedKey = [IOSByteArray newArrayWithLength:encoded->size_ - padValue];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(encoded, 0, taggedKey, 0, taggedKey->size_);
  return taggedKey;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorPGPPad)
