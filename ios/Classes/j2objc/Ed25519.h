//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/rfc8032/Ed25519.java
//

#ifndef Ed25519_H
#define Ed25519_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleMathEcRfc7748X25519_Friend;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastleMathEcRfc8032Ed25519 : NSObject
@property (readonly, class) jint PREHASH_SIZE NS_SWIFT_NAME(PREHASH_SIZE);
@property (readonly, class) jint PUBLIC_KEY_SIZE NS_SWIFT_NAME(PUBLIC_KEY_SIZE);
@property (readonly, class) jint SECRET_KEY_SIZE NS_SWIFT_NAME(SECRET_KEY_SIZE);
@property (readonly, class) jint SIGNATURE_SIZE NS_SWIFT_NAME(SIGNATURE_SIZE);

+ (jint)PREHASH_SIZE;

+ (jint)PUBLIC_KEY_SIZE;

+ (jint)SECRET_KEY_SIZE;

+ (jint)SIGNATURE_SIZE;

#pragma mark Public

- (instancetype __nonnull)init;

+ (id<LibOrgBouncycastleCryptoDigest>)createPrehash;

+ (void)generatePrivateKeyWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                         withByteArray:(IOSByteArray *)k;

+ (void)generatePublicKeyWithByteArray:(IOSByteArray *)sk
                               withInt:(jint)skOff
                         withByteArray:(IOSByteArray *)pk
                               withInt:(jint)pkOff;

+ (void)precompute;

+ (void)scalarMultBaseYZWithLibOrgBouncycastleMathEcRfc7748X25519_Friend:(LibOrgBouncycastleMathEcRfc7748X25519_Friend *)friend_
                                                           withByteArray:(IOSByteArray *)k
                                                                 withInt:(jint)kOff
                                                            withIntArray:(IOSIntArray *)y
                                                            withIntArray:(IOSIntArray *)z;

+ (void)signWithByteArray:(IOSByteArray *)sk
                  withInt:(jint)skOff
            withByteArray:(IOSByteArray *)ctx
            withByteArray:(IOSByteArray *)m
                  withInt:(jint)mOff
                  withInt:(jint)mLen
            withByteArray:(IOSByteArray *)sig
                  withInt:(jint)sigOff;

+ (void)signWithByteArray:(IOSByteArray *)sk
                  withInt:(jint)skOff
            withByteArray:(IOSByteArray *)pk
                  withInt:(jint)pkOff
            withByteArray:(IOSByteArray *)ctx
            withByteArray:(IOSByteArray *)m
                  withInt:(jint)mOff
                  withInt:(jint)mLen
            withByteArray:(IOSByteArray *)sig
                  withInt:(jint)sigOff;

+ (void)signWithByteArray:(IOSByteArray *)sk
                  withInt:(jint)skOff
            withByteArray:(IOSByteArray *)pk
                  withInt:(jint)pkOff
            withByteArray:(IOSByteArray *)m
                  withInt:(jint)mOff
                  withInt:(jint)mLen
            withByteArray:(IOSByteArray *)sig
                  withInt:(jint)sigOff;

+ (void)signWithByteArray:(IOSByteArray *)sk
                  withInt:(jint)skOff
            withByteArray:(IOSByteArray *)m
                  withInt:(jint)mOff
                  withInt:(jint)mLen
            withByteArray:(IOSByteArray *)sig
                  withInt:(jint)sigOff;

+ (void)signPrehashWithByteArray:(IOSByteArray *)sk
                         withInt:(jint)skOff
                   withByteArray:(IOSByteArray *)ctx
                   withByteArray:(IOSByteArray *)ph
                         withInt:(jint)phOff
                   withByteArray:(IOSByteArray *)sig
                         withInt:(jint)sigOff;

+ (void)signPrehashWithByteArray:(IOSByteArray *)sk
                         withInt:(jint)skOff
                   withByteArray:(IOSByteArray *)ctx
withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)ph
                   withByteArray:(IOSByteArray *)sig
                         withInt:(jint)sigOff;

+ (void)signPrehashWithByteArray:(IOSByteArray *)sk
                         withInt:(jint)skOff
                   withByteArray:(IOSByteArray *)pk
                         withInt:(jint)pkOff
                   withByteArray:(IOSByteArray *)ctx
                   withByteArray:(IOSByteArray *)ph
                         withInt:(jint)phOff
                   withByteArray:(IOSByteArray *)sig
                         withInt:(jint)sigOff;

+ (void)signPrehashWithByteArray:(IOSByteArray *)sk
                         withInt:(jint)skOff
                   withByteArray:(IOSByteArray *)pk
                         withInt:(jint)pkOff
                   withByteArray:(IOSByteArray *)ctx
withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)ph
                   withByteArray:(IOSByteArray *)sig
                         withInt:(jint)sigOff;

+ (jboolean)verifyWithByteArray:(IOSByteArray *)sig
                        withInt:(jint)sigOff
                  withByteArray:(IOSByteArray *)pk
                        withInt:(jint)pkOff
                  withByteArray:(IOSByteArray *)ctx
                  withByteArray:(IOSByteArray *)m
                        withInt:(jint)mOff
                        withInt:(jint)mLen;

+ (jboolean)verifyWithByteArray:(IOSByteArray *)sig
                        withInt:(jint)sigOff
                  withByteArray:(IOSByteArray *)pk
                        withInt:(jint)pkOff
                  withByteArray:(IOSByteArray *)m
                        withInt:(jint)mOff
                        withInt:(jint)mLen;

+ (jboolean)verifyPrehashWithByteArray:(IOSByteArray *)sig
                               withInt:(jint)sigOff
                         withByteArray:(IOSByteArray *)pk
                               withInt:(jint)pkOff
                         withByteArray:(IOSByteArray *)ctx
                         withByteArray:(IOSByteArray *)ph
                               withInt:(jint)phOff;

+ (jboolean)verifyPrehashWithByteArray:(IOSByteArray *)sig
                               withInt:(jint)sigOff
                         withByteArray:(IOSByteArray *)pk
                               withInt:(jint)pkOff
                         withByteArray:(IOSByteArray *)ctx
    withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)ph;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleMathEcRfc8032Ed25519)

inline jint LibOrgBouncycastleMathEcRfc8032Ed25519_get_PREHASH_SIZE(void);
#define LibOrgBouncycastleMathEcRfc8032Ed25519_PREHASH_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcRfc8032Ed25519, PREHASH_SIZE, jint)

inline jint LibOrgBouncycastleMathEcRfc8032Ed25519_get_PUBLIC_KEY_SIZE(void);
#define LibOrgBouncycastleMathEcRfc8032Ed25519_PUBLIC_KEY_SIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcRfc8032Ed25519, PUBLIC_KEY_SIZE, jint)

inline jint LibOrgBouncycastleMathEcRfc8032Ed25519_get_SECRET_KEY_SIZE(void);
#define LibOrgBouncycastleMathEcRfc8032Ed25519_SECRET_KEY_SIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcRfc8032Ed25519, SECRET_KEY_SIZE, jint)

inline jint LibOrgBouncycastleMathEcRfc8032Ed25519_get_SIGNATURE_SIZE(void);
#define LibOrgBouncycastleMathEcRfc8032Ed25519_SIGNATURE_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcRfc8032Ed25519, SIGNATURE_SIZE, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_init(LibOrgBouncycastleMathEcRfc8032Ed25519 *self);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleMathEcRfc8032Ed25519_createPrehash(void);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_generatePrivateKeyWithJavaSecuritySecureRandom_withByteArray_(JavaSecuritySecureRandom *random, IOSByteArray *k);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_generatePublicKeyWithByteArray_withInt_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *pk, jint pkOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_precompute(void);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_scalarMultBaseYZWithLibOrgBouncycastleMathEcRfc7748X25519_Friend_withByteArray_withInt_withIntArray_withIntArray_(LibOrgBouncycastleMathEcRfc7748X25519_Friend *friend_, IOSByteArray *k, jint kOff, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_signWithByteArray_withInt_withByteArray_withInt_withInt_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *m, jint mOff, jint mLen, IOSByteArray *sig, jint sigOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_signWithByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *pk, jint pkOff, IOSByteArray *m, jint mOff, jint mLen, IOSByteArray *sig, jint sigOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_signWithByteArray_withInt_withByteArray_withByteArray_withInt_withInt_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *ctx, IOSByteArray *m, jint mOff, jint mLen, IOSByteArray *sig, jint sigOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_signWithByteArray_withInt_withByteArray_withInt_withByteArray_withByteArray_withInt_withInt_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *pk, jint pkOff, IOSByteArray *ctx, IOSByteArray *m, jint mOff, jint mLen, IOSByteArray *sig, jint sigOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_signPrehashWithByteArray_withInt_withByteArray_withByteArray_withInt_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *ctx, IOSByteArray *ph, jint phOff, IOSByteArray *sig, jint sigOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_signPrehashWithByteArray_withInt_withByteArray_withInt_withByteArray_withByteArray_withInt_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *pk, jint pkOff, IOSByteArray *ctx, IOSByteArray *ph, jint phOff, IOSByteArray *sig, jint sigOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_signPrehashWithByteArray_withInt_withByteArray_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *ctx, id<LibOrgBouncycastleCryptoDigest> ph, IOSByteArray *sig, jint sigOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_signPrehashWithByteArray_withInt_withByteArray_withInt_withByteArray_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_(IOSByteArray *sk, jint skOff, IOSByteArray *pk, jint pkOff, IOSByteArray *ctx, id<LibOrgBouncycastleCryptoDigest> ph, IOSByteArray *sig, jint sigOff);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathEcRfc8032Ed25519_verifyWithByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *sig, jint sigOff, IOSByteArray *pk, jint pkOff, IOSByteArray *m, jint mOff, jint mLen);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathEcRfc8032Ed25519_verifyWithByteArray_withInt_withByteArray_withInt_withByteArray_withByteArray_withInt_withInt_(IOSByteArray *sig, jint sigOff, IOSByteArray *pk, jint pkOff, IOSByteArray *ctx, IOSByteArray *m, jint mOff, jint mLen);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathEcRfc8032Ed25519_verifyPrehashWithByteArray_withInt_withByteArray_withInt_withByteArray_withByteArray_withInt_(IOSByteArray *sig, jint sigOff, IOSByteArray *pk, jint pkOff, IOSByteArray *ctx, IOSByteArray *ph, jint phOff);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathEcRfc8032Ed25519_verifyPrehashWithByteArray_withInt_withByteArray_withInt_withByteArray_withLibOrgBouncycastleCryptoDigest_(IOSByteArray *sig, jint sigOff, IOSByteArray *pk, jint pkOff, IOSByteArray *ctx, id<LibOrgBouncycastleCryptoDigest> ph);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcRfc8032Ed25519)

@interface LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm : NSObject
@property (readonly, class) jint Ed25519 NS_SWIFT_NAME(Ed25519);
@property (readonly, class) jint Ed25519ctx NS_SWIFT_NAME(Ed25519ctx);
@property (readonly, class) jint Ed25519ph NS_SWIFT_NAME(Ed25519ph);

+ (jint)Ed25519;

+ (jint)Ed25519ctx;

+ (jint)Ed25519ph;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm)

inline jint LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_get_Ed25519(void);
#define LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_Ed25519 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm, Ed25519, jint)

inline jint LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_get_Ed25519ctx(void);
#define LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_Ed25519ctx 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm, Ed25519ctx, jint)

inline jint LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_get_Ed25519ph(void);
#define LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_Ed25519ph 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm, Ed25519ph, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_init(LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm *self);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm *new_LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm *create_LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Ed25519_H
