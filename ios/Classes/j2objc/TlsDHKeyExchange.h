//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsDHKeyExchange.java
//

#ifndef TlsDHKeyExchange_H
#define TlsDHKeyExchange_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsKeyExchange.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoParamsDHParameters;
@class LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters;
@class LibOrgBouncycastleCryptoParamsDHPublicKeyParameters;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@protocol LibOrgBouncycastleCryptoTlsTlsAgreementCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsDHVerifier;
@protocol LibOrgBouncycastleCryptoTlsTlsSigner;

@interface LibOrgBouncycastleCryptoTlsTlsDHKeyExchange : LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsSigner> tlsSigner_;
  id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier_;
  LibOrgBouncycastleCryptoParamsDHParameters *dhParameters_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *serverPublicKey_;
  id<LibOrgBouncycastleCryptoTlsTlsAgreementCredentials> agreementCredentials_;
  LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *dhAgreePrivateKey_;
  LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *dhAgreePublicKey_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters;

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier
withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters;

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)generatePremasterSecret;

- (IOSByteArray *)generateServerKeyExchange;

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)processClientCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)clientCertificate;

- (void)processClientCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (jboolean)requiresServerKeyExchange;

- (void)skipServerCredentials;

- (void)validateCertificateRequestWithLibOrgBouncycastleCryptoTlsCertificateRequest:(LibOrgBouncycastleCryptoTlsCertificateRequest *)certificateRequest;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0
                   withJavaUtilVector:(JavaUtilVector *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange, tlsSigner_, id<LibOrgBouncycastleCryptoTlsTlsSigner>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange, dhVerifier_, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange, dhParameters_, LibOrgBouncycastleCryptoParamsDHParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange, serverPublicKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange, agreementCredentials_, id<LibOrgBouncycastleCryptoTlsTlsAgreementCredentials>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange, dhAgreePrivateKey_, LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange, dhAgreePublicKey_, LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsDHKeyExchange)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsDHKeyExchange_H
