//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPOnePassSignature.java
//

#include "BCPGInputStream.h"
#include "BCPGOutputStream.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OnePassSignaturePacket.h"
#include "PGPContentVerifier.h"
#include "PGPContentVerifierBuilder.h"
#include "PGPContentVerifierBuilderProvider.h"
#include "PGPException.h"
#include "PGPOnePassSignature.h"
#include "PGPPublicKey.h"
#include "PGPRuntimeOperationException.h"
#include "PGPSignature.h"
#include "Packet.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"

@interface LibOrgBouncycastleOpenpgpPGPOnePassSignature () {
 @public
  LibOrgBouncycastleBcpgOnePassSignaturePacket *sigPack_;
  jint signatureType_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier> verifier_;
  jbyte lastb_;
  JavaIoOutputStream *sigOut_;
}

- (void)byteUpdateWithByte:(jbyte)b;

- (void)blockUpdateWithByteArray:(IOSByteArray *)block
                         withInt:(jint)off
                         withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPOnePassSignature, sigPack_, LibOrgBouncycastleBcpgOnePassSignaturePacket *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPOnePassSignature, verifier_, id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPOnePassSignature, sigOut_, JavaIoOutputStream *)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(LibOrgBouncycastleOpenpgpPGPOnePassSignature *self, jbyte b);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPOnePassSignature_blockUpdateWithByteArray_withInt_withInt_(LibOrgBouncycastleOpenpgpPGPOnePassSignature *self, IOSByteArray *block, jint off, jint len);

@implementation LibOrgBouncycastleOpenpgpPGPOnePassSignature

- (instancetype)initWithLibOrgBouncycastleBcpgBCPGInputStream:(LibOrgBouncycastleBcpgBCPGInputStream *)pIn {
  LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgBCPGInputStream_(self, pIn);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleBcpgOnePassSignaturePacket:(LibOrgBouncycastleBcpgOnePassSignaturePacket *)sigPack {
  LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgOnePassSignaturePacket_(self, sigPack);
  return self;
}

- (void)init__WithLibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilderProvider:(id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilderProvider>)verifierBuilderProvider
                                           withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey {
  id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilder> verifierBuilder = [((id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilderProvider>) nil_chk(verifierBuilderProvider)) getWithInt:[((LibOrgBouncycastleBcpgOnePassSignaturePacket *) nil_chk(sigPack_)) getKeyAlgorithm] withInt:[((LibOrgBouncycastleBcpgOnePassSignaturePacket *) nil_chk(sigPack_)) getHashAlgorithm]];
  verifier_ = [((id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilder>) nil_chk(verifierBuilder)) buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:pubKey];
  lastb_ = 0;
  sigOut_ = [((id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier>) nil_chk(verifier_)) getOutputStream];
}

- (void)updateWithByte:(jbyte)b {
  if (signatureType_ == LibOrgBouncycastleOpenpgpPGPSignature_CANONICAL_TEXT_DOCUMENT) {
    if (b == 0x000d) {
      LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(self, (jbyte) 0x000d);
      LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(self, (jbyte) 0x000a);
    }
    else if (b == 0x000a) {
      if (lastb_ != 0x000d) {
        LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(self, (jbyte) 0x000d);
        LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(self, (jbyte) 0x000a);
      }
    }
    else {
      LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(self, b);
    }
    lastb_ = b;
  }
  else {
    LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(self, b);
  }
}

- (void)updateWithByteArray:(IOSByteArray *)bytes {
  if (signatureType_ == LibOrgBouncycastleOpenpgpPGPSignature_CANONICAL_TEXT_DOCUMENT) {
    for (jint i = 0; i != ((IOSByteArray *) nil_chk(bytes))->size_; i++) {
      [self updateWithByte:IOSByteArray_Get(bytes, i)];
    }
  }
  else {
    LibOrgBouncycastleOpenpgpPGPOnePassSignature_blockUpdateWithByteArray_withInt_withInt_(self, bytes, 0, ((IOSByteArray *) nil_chk(bytes))->size_);
  }
}

- (void)updateWithByteArray:(IOSByteArray *)bytes
                    withInt:(jint)off
                    withInt:(jint)length {
  if (signatureType_ == LibOrgBouncycastleOpenpgpPGPSignature_CANONICAL_TEXT_DOCUMENT) {
    jint finish = off + length;
    for (jint i = off; i != finish; i++) {
      [self updateWithByte:IOSByteArray_Get(nil_chk(bytes), i)];
    }
  }
  else {
    LibOrgBouncycastleOpenpgpPGPOnePassSignature_blockUpdateWithByteArray_withInt_withInt_(self, bytes, off, length);
  }
}

- (void)byteUpdateWithByte:(jbyte)b {
  LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(self, b);
}

- (void)blockUpdateWithByteArray:(IOSByteArray *)block
                         withInt:(jint)off
                         withInt:(jint)len {
  LibOrgBouncycastleOpenpgpPGPOnePassSignature_blockUpdateWithByteArray_withInt_withInt_(self, block, off, len);
}

- (jboolean)verifyWithLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)pgpSig {
  @try {
    [((JavaIoOutputStream *) nil_chk(sigOut_)) writeWithByteArray:[((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(pgpSig)) getSignatureTrailer]];
    [((JavaIoOutputStream *) nil_chk(sigOut_)) close];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"unable to add trailer: ", [e getMessage]), e);
  }
  return [((id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier>) nil_chk(verifier_)) verifyWithByteArray:[pgpSig getSignature]];
}

- (jlong)getKeyID {
  return [((LibOrgBouncycastleBcpgOnePassSignaturePacket *) nil_chk(sigPack_)) getKeyID];
}

- (jint)getSignatureType {
  return [((LibOrgBouncycastleBcpgOnePassSignaturePacket *) nil_chk(sigPack_)) getSignatureType];
}

- (jint)getHashAlgorithm {
  return [((LibOrgBouncycastleBcpgOnePassSignaturePacket *) nil_chk(sigPack_)) getHashAlgorithm];
}

- (jint)getKeyAlgorithm {
  return [((LibOrgBouncycastleBcpgOnePassSignaturePacket *) nil_chk(sigPack_)) getKeyAlgorithm];
}

- (IOSByteArray *)getEncoded {
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [self encodeWithJavaIoOutputStream:bOut];
  return [bOut toByteArray];
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream {
  LibOrgBouncycastleBcpgBCPGOutputStream *out;
  if ([outStream isKindOfClass:[LibOrgBouncycastleBcpgBCPGOutputStream class]]) {
    out = (LibOrgBouncycastleBcpgBCPGOutputStream *) outStream;
  }
  else {
    out = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_(outStream);
  }
  [((LibOrgBouncycastleBcpgBCPGOutputStream *) nil_chk(out)) writePacketWithLibOrgBouncycastleBcpgContainedPacket:sigPack_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgBCPGInputStream:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleBcpgOnePassSignaturePacket:);
  methods[2].selector = @selector(init__WithLibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilderProvider:withLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[3].selector = @selector(updateWithByte:);
  methods[4].selector = @selector(updateWithByteArray:);
  methods[5].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(byteUpdateWithByte:);
  methods[7].selector = @selector(blockUpdateWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(verifyWithLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[9].selector = @selector(getKeyID);
  methods[10].selector = @selector(getSignatureType);
  methods[11].selector = @selector(getHashAlgorithm);
  methods[12].selector = @selector(getKeyAlgorithm);
  methods[13].selector = @selector(getEncoded);
  methods[14].selector = @selector(encodeWithJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sigPack_", "LLibOrgBouncycastleBcpgOnePassSignaturePacket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signatureType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verifier_", "LLibOrgBouncycastleOpenpgpOperatorPGPContentVerifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastb_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigOut_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleBcpgBCPGInputStream;", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleBcpgOnePassSignaturePacket;", "LLibOrgBouncycastleOpenpgpPGPException;", "init", "LLibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilderProvider;LLibOrgBouncycastleOpenpgpPGPPublicKey;", "update", "B", "[B", "[BII", "byteUpdate", "blockUpdate", "verify", "LLibOrgBouncycastleOpenpgpPGPSignature;", "LJavaIoIOException;", "encode", "LJavaIoOutputStream;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPOnePassSignature = { "PGPOnePassSignature", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 15, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPOnePassSignature;
}

@end

void LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleOpenpgpPGPOnePassSignature *self, LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgOnePassSignaturePacket_(self, (LibOrgBouncycastleBcpgOnePassSignaturePacket *) cast_chk([((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(pIn)) readPacket], [LibOrgBouncycastleBcpgOnePassSignaturePacket class]));
}

LibOrgBouncycastleOpenpgpPGPOnePassSignature *new_LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPOnePassSignature, initWithLibOrgBouncycastleBcpgBCPGInputStream_, pIn)
}

LibOrgBouncycastleOpenpgpPGPOnePassSignature *create_LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPOnePassSignature, initWithLibOrgBouncycastleBcpgBCPGInputStream_, pIn)
}

void LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgOnePassSignaturePacket_(LibOrgBouncycastleOpenpgpPGPOnePassSignature *self, LibOrgBouncycastleBcpgOnePassSignaturePacket *sigPack) {
  NSObject_init(self);
  self->sigPack_ = sigPack;
  self->signatureType_ = [((LibOrgBouncycastleBcpgOnePassSignaturePacket *) nil_chk(sigPack)) getSignatureType];
}

LibOrgBouncycastleOpenpgpPGPOnePassSignature *new_LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgOnePassSignaturePacket_(LibOrgBouncycastleBcpgOnePassSignaturePacket *sigPack) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPOnePassSignature, initWithLibOrgBouncycastleBcpgOnePassSignaturePacket_, sigPack)
}

LibOrgBouncycastleOpenpgpPGPOnePassSignature *create_LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgOnePassSignaturePacket_(LibOrgBouncycastleBcpgOnePassSignaturePacket *sigPack) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPOnePassSignature, initWithLibOrgBouncycastleBcpgOnePassSignaturePacket_, sigPack)
}

void LibOrgBouncycastleOpenpgpPGPOnePassSignature_byteUpdateWithByte_(LibOrgBouncycastleOpenpgpPGPOnePassSignature *self, jbyte b) {
  @try {
    [((JavaIoOutputStream *) nil_chk(self->sigOut_)) writeWithInt:b];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPRuntimeOperationException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

void LibOrgBouncycastleOpenpgpPGPOnePassSignature_blockUpdateWithByteArray_withInt_withInt_(LibOrgBouncycastleOpenpgpPGPOnePassSignature *self, IOSByteArray *block, jint off, jint len) {
  @try {
    [((JavaIoOutputStream *) nil_chk(self->sigOut_)) writeWithByteArray:block withInt:off withInt:len];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPRuntimeOperationException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPOnePassSignature)
