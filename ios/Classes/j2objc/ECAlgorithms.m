//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/ECAlgorithms.java
//

#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECEndomorphism.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "ECPointMap.h"
#include "FiniteField.h"
#include "GLVEndomorphism.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PolynomialExtensionField.h"
#include "WNafPreCompInfo.h"
#include "WNafUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleMathEcECAlgorithms ()

+ (LibOrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompP
                                                         withLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNegP
                                                                                    withByteArray:(IOSByteArray *)wnafP
                                                         withLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompQ
                                                         withLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNegQ
                                                                                    withByteArray:(IOSByteArray *)wnafQ;

+ (LibOrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithBooleanArray:(IOSBooleanArray *)negs
                        withLibOrgBouncycastleMathEcWNafPreCompInfoArray:(IOSObjectArray *)infos
                                                          withByteArray2:(IOSObjectArray *)wnafs;

@end

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_withLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_(IOSObjectArray *preCompP, IOSObjectArray *preCompNegP, IOSByteArray *wnafP, IOSObjectArray *preCompQ, IOSObjectArray *preCompNegQ, IOSByteArray *wnafQ);

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withLibOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(IOSBooleanArray *negs, IOSObjectArray *infos, IOSObjectArray *wnafs);

@implementation LibOrgBouncycastleMathEcECAlgorithms

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcECAlgorithms_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isF2mCurveWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c {
  return LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_(c);
}

+ (jboolean)isF2mFieldWithLibOrgBouncycastleMathFieldFiniteField:(id<LibOrgBouncycastleMathFieldFiniteField>)field {
  return LibOrgBouncycastleMathEcECAlgorithms_isF2mFieldWithLibOrgBouncycastleMathFieldFiniteField_(field);
}

+ (jboolean)isFpCurveWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c {
  return LibOrgBouncycastleMathEcECAlgorithms_isFpCurveWithLibOrgBouncycastleMathEcECCurve_(c);
}

+ (jboolean)isFpFieldWithLibOrgBouncycastleMathFieldFiniteField:(id<LibOrgBouncycastleMathFieldFiniteField>)field {
  return LibOrgBouncycastleMathEcECAlgorithms_isFpFieldWithLibOrgBouncycastleMathFieldFiniteField_(field);
}

+ (LibOrgBouncycastleMathEcECPoint *)sumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                                 withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return LibOrgBouncycastleMathEcECAlgorithms_sumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(ps, ks);
}

+ (LibOrgBouncycastleMathEcECPoint *)sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)P
                                                                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                                                       withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)Q
                                                                    withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, a, Q, b);
}

+ (LibOrgBouncycastleMathEcECPoint *)shamirsTrickWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)P
                                                              withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                 withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)Q
                                                              withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return LibOrgBouncycastleMathEcECAlgorithms_shamirsTrickWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}

+ (LibOrgBouncycastleMathEcECPoint *)importPointWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c
                                                withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  return LibOrgBouncycastleMathEcECAlgorithms_importPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(c, p);
}

+ (void)montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                               withInt:(jint)off
                                                               withInt:(jint)len {
  LibOrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_(zs, off, len);
}

+ (void)montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                               withInt:(jint)off
                                                               withInt:(jint)len
                            withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_ {
  LibOrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_(zs, off, len, scale_);
}

+ (LibOrgBouncycastleMathEcECPoint *)referenceMultiplyWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                                   withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return LibOrgBouncycastleMathEcECAlgorithms_referenceMultiplyWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(p, k);
}

+ (LibOrgBouncycastleMathEcECPoint *)validatePointWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  return LibOrgBouncycastleMathEcECAlgorithms_validatePointWithLibOrgBouncycastleMathEcECPoint_(p);
}

+ (LibOrgBouncycastleMathEcECPoint *)cleanPointWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c
                                               withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  return LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(c, p);
}

+ (LibOrgBouncycastleMathEcECPoint *)implCheckResultWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  return LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_(p);
}

+ (LibOrgBouncycastleMathEcECPoint *)implShamirsTrickJsfWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)P
                                                                     withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                        withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)Q
                                                                     withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickJsfWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}

+ (LibOrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)P
                                                                      withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                         withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)Q
                                                                      withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}

+ (LibOrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)P
                                                                      withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                      withLibOrgBouncycastleMathEcECPointMap:(id<LibOrgBouncycastleMathEcECPointMap>)pointMapQ
                                                                      withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPointMap_withJavaMathBigInteger_(P, k, pointMapQ, l);
}

+ (LibOrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompP
                                                         withLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNegP
                                                                                    withByteArray:(IOSByteArray *)wnafP
                                                         withLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompQ
                                                         withLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNegQ
                                                                                    withByteArray:(IOSByteArray *)wnafQ {
  return LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_withLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}

+ (LibOrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                                     withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(ps, ks);
}

+ (LibOrgBouncycastleMathEcECPoint *)implSumOfMultipliesGLVWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                                        withJavaMathBigIntegerArray:(IOSObjectArray *)ks
                                                    withLibOrgBouncycastleMathEcEndoGLVEndomorphism:(id<LibOrgBouncycastleMathEcEndoGLVEndomorphism>)glvEndomorphism {
  return LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withLibOrgBouncycastleMathEcEndoGLVEndomorphism_(ps, ks, glvEndomorphism);
}

+ (LibOrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                          withLibOrgBouncycastleMathEcECPointMap:(id<LibOrgBouncycastleMathEcECPointMap>)pointMap
                                                                     withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointMap_withJavaMathBigIntegerArray_(ps, pointMap, ks);
}

+ (LibOrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithBooleanArray:(IOSBooleanArray *)negs
                        withLibOrgBouncycastleMathEcWNafPreCompInfoArray:(IOSObjectArray *)infos
                                                          withByteArray2:(IOSObjectArray *)wnafs {
  return LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withLibOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 15, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 20, 12, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 21, 19, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 22, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 23, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 23, 24, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0xa, 23, 25, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 26, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 27, 28, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 26, 29, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0xa, 26, 30, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isF2mCurveWithLibOrgBouncycastleMathEcECCurve:);
  methods[2].selector = @selector(isF2mFieldWithLibOrgBouncycastleMathFieldFiniteField:);
  methods[3].selector = @selector(isFpCurveWithLibOrgBouncycastleMathEcECCurve:);
  methods[4].selector = @selector(isFpFieldWithLibOrgBouncycastleMathFieldFiniteField:);
  methods[5].selector = @selector(sumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray:withJavaMathBigIntegerArray:);
  methods[6].selector = @selector(sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[7].selector = @selector(shamirsTrickWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[8].selector = @selector(importPointWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:);
  methods[9].selector = @selector(montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray:withInt:withInt:);
  methods[10].selector = @selector(montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray:withInt:withInt:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[11].selector = @selector(referenceMultiplyWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[12].selector = @selector(validatePointWithLibOrgBouncycastleMathEcECPoint:);
  methods[13].selector = @selector(cleanPointWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:);
  methods[14].selector = @selector(implCheckResultWithLibOrgBouncycastleMathEcECPoint:);
  methods[15].selector = @selector(implShamirsTrickJsfWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[16].selector = @selector(implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[17].selector = @selector(implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withLibOrgBouncycastleMathEcECPointMap:withJavaMathBigInteger:);
  methods[18].selector = @selector(implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPointArray:withLibOrgBouncycastleMathEcECPointArray:withByteArray:withLibOrgBouncycastleMathEcECPointArray:withLibOrgBouncycastleMathEcECPointArray:withByteArray:);
  methods[19].selector = @selector(implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray:withJavaMathBigIntegerArray:);
  methods[20].selector = @selector(implSumOfMultipliesGLVWithLibOrgBouncycastleMathEcECPointArray:withJavaMathBigIntegerArray:withLibOrgBouncycastleMathEcEndoGLVEndomorphism:);
  methods[21].selector = @selector(implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray:withLibOrgBouncycastleMathEcECPointMap:withJavaMathBigIntegerArray:);
  methods[22].selector = @selector(implSumOfMultipliesWithBooleanArray:withLibOrgBouncycastleMathEcWNafPreCompInfoArray:withByteArray2:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isF2mCurve", "LLibOrgBouncycastleMathEcECCurve;", "isF2mField", "LLibOrgBouncycastleMathFieldFiniteField;", "isFpCurve", "isFpField", "sumOfMultiplies", "[LLibOrgBouncycastleMathEcECPoint;[LJavaMathBigInteger;", "sumOfTwoMultiplies", "LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "shamirsTrick", "importPoint", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECPoint;", "montgomeryTrick", "[LLibOrgBouncycastleMathEcECFieldElement;II", "[LLibOrgBouncycastleMathEcECFieldElement;IILLibOrgBouncycastleMathEcECFieldElement;", "referenceMultiply", "LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "validatePoint", "LLibOrgBouncycastleMathEcECPoint;", "cleanPoint", "implCheckResult", "implShamirsTrickJsf", "implShamirsTrickWNaf", "LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LLibOrgBouncycastleMathEcECPointMap;LJavaMathBigInteger;", "[LLibOrgBouncycastleMathEcECPoint;[LLibOrgBouncycastleMathEcECPoint;[B[LLibOrgBouncycastleMathEcECPoint;[LLibOrgBouncycastleMathEcECPoint;[B", "implSumOfMultiplies", "implSumOfMultipliesGLV", "[LLibOrgBouncycastleMathEcECPoint;[LJavaMathBigInteger;LLibOrgBouncycastleMathEcEndoGLVEndomorphism;", "[LLibOrgBouncycastleMathEcECPoint;LLibOrgBouncycastleMathEcECPointMap;[LJavaMathBigInteger;", "[Z[LLibOrgBouncycastleMathEcWNafPreCompInfo;[[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECAlgorithms = { "ECAlgorithms", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 23, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECAlgorithms;
}

@end

void LibOrgBouncycastleMathEcECAlgorithms_init(LibOrgBouncycastleMathEcECAlgorithms *self) {
  NSObject_init(self);
}

LibOrgBouncycastleMathEcECAlgorithms *new_LibOrgBouncycastleMathEcECAlgorithms_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECAlgorithms, init)
}

LibOrgBouncycastleMathEcECAlgorithms *create_LibOrgBouncycastleMathEcECAlgorithms_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECAlgorithms, init)
}

jboolean LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *c) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  return LibOrgBouncycastleMathEcECAlgorithms_isF2mFieldWithLibOrgBouncycastleMathFieldFiniteField_([((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getField]);
}

jboolean LibOrgBouncycastleMathEcECAlgorithms_isF2mFieldWithLibOrgBouncycastleMathFieldFiniteField_(id<LibOrgBouncycastleMathFieldFiniteField> field) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  return [((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk(field)) getDimension] > 1 && [((JavaMathBigInteger *) nil_chk([field getCharacteristic])) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, TWO)] && [LibOrgBouncycastleMathFieldPolynomialExtensionField_class_() isInstance:field];
}

jboolean LibOrgBouncycastleMathEcECAlgorithms_isFpCurveWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *c) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  return LibOrgBouncycastleMathEcECAlgorithms_isFpFieldWithLibOrgBouncycastleMathFieldFiniteField_([((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getField]);
}

jboolean LibOrgBouncycastleMathEcECAlgorithms_isFpFieldWithLibOrgBouncycastleMathFieldFiniteField_(id<LibOrgBouncycastleMathFieldFiniteField> field) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  return [((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk(field)) getDimension] == 1;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_sumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(IOSObjectArray *ps, IOSObjectArray *ks) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  if (ps == nil || ks == nil || ps->size_ != ks->size_ || ps->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"point and scalar arrays should be non-null, and of equal, non-zero, length");
  }
  jint count = ps->size_;
  switch (count) {
    case 1:
    return [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(ps, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(ks, 0)];
    case 2:
    return LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(IOSObjectArray_Get(ps, 0), IOSObjectArray_Get(ks, 0), IOSObjectArray_Get(ps, 1), IOSObjectArray_Get(ks, 1));
    default:
    break;
  }
  LibOrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(ps, 0);
  LibOrgBouncycastleMathEcECCurve *c = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  IOSObjectArray *imported = [IOSObjectArray newArrayWithLength:count type:LibOrgBouncycastleMathEcECPoint_class_()];
  (void) IOSObjectArray_Set(imported, 0, p);
  for (jint i = 1; i < count; ++i) {
    (void) IOSObjectArray_Set(imported, i, LibOrgBouncycastleMathEcECAlgorithms_importPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(c, IOSObjectArray_Get(ps, i)));
  }
  id<LibOrgBouncycastleMathEcEndoECEndomorphism> endomorphism = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getEndomorphism];
  if ([LibOrgBouncycastleMathEcEndoGLVEndomorphism_class_() isInstance:endomorphism]) {
    return LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withLibOrgBouncycastleMathEcEndoGLVEndomorphism_(imported, ks, (id<LibOrgBouncycastleMathEcEndoGLVEndomorphism>) cast_check(endomorphism, LibOrgBouncycastleMathEcEndoGLVEndomorphism_class_())));
  }
  return LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(imported, ks));
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *a, LibOrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *b) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  LibOrgBouncycastleMathEcECCurve *cp = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(P)) getCurve];
  Q = LibOrgBouncycastleMathEcECAlgorithms_importPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(cp, Q);
  if ([cp isKindOfClass:[LibOrgBouncycastleMathEcECCurve_AbstractF2m class]]) {
    LibOrgBouncycastleMathEcECCurve_AbstractF2m *f2mCurve = (LibOrgBouncycastleMathEcECCurve_AbstractF2m *) cp;
    if ([((LibOrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(f2mCurve)) isKoblitz]) {
      return LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_([((LibOrgBouncycastleMathEcECPoint *) nil_chk([P multiplyWithJavaMathBigInteger:a])) addWithLibOrgBouncycastleMathEcECPoint:[((LibOrgBouncycastleMathEcECPoint *) nil_chk(Q)) multiplyWithJavaMathBigInteger:b]]);
    }
  }
  id<LibOrgBouncycastleMathEcEndoECEndomorphism> endomorphism = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(cp)) getEndomorphism];
  if ([LibOrgBouncycastleMathEcEndoGLVEndomorphism_class_() isInstance:endomorphism]) {
    return LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withLibOrgBouncycastleMathEcEndoGLVEndomorphism_([IOSObjectArray newArrayWithObjects:(id[]){ P, Q } count:2 type:LibOrgBouncycastleMathEcECPoint_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ a, b } count:2 type:JavaMathBigInteger_class_()], (id<LibOrgBouncycastleMathEcEndoGLVEndomorphism>) cast_check(endomorphism, LibOrgBouncycastleMathEcEndoGLVEndomorphism_class_())));
  }
  return LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, a, Q, b));
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_shamirsTrickWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, LibOrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  LibOrgBouncycastleMathEcECCurve *cp = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(P)) getCurve];
  Q = LibOrgBouncycastleMathEcECAlgorithms_importPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(cp, Q);
  return LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickJsfWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l));
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_importPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *c, LibOrgBouncycastleMathEcECPoint *p) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  LibOrgBouncycastleMathEcECCurve *cp = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  if (![((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) equalsWithLibOrgBouncycastleMathEcECCurve:cp]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point must be on the same curve");
  }
  return [c importPointWithLibOrgBouncycastleMathEcECPoint:p];
}

void LibOrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_(IOSObjectArray *zs, jint off, jint len) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  LibOrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_(zs, off, len, nil);
}

void LibOrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_(IOSObjectArray *zs, jint off, jint len, LibOrgBouncycastleMathEcECFieldElement *scale_) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  IOSObjectArray *c = [IOSObjectArray newArrayWithLength:len type:LibOrgBouncycastleMathEcECFieldElement_class_()];
  (void) IOSObjectArray_Set(c, 0, IOSObjectArray_Get(nil_chk(zs), off));
  jint i = 0;
  while (++i < len) {
    (void) IOSObjectArray_Set(c, i, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i - 1))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:IOSObjectArray_Get(zs, off + i)]);
  }
  --i;
  if (scale_ != nil) {
    (void) IOSObjectArray_Set(c, i, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:scale_]);
  }
  LibOrgBouncycastleMathEcECFieldElement *u = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) invert];
  while (i > 0) {
    jint j = off + i--;
    LibOrgBouncycastleMathEcECFieldElement *tmp = IOSObjectArray_Get(zs, j);
    (void) IOSObjectArray_Set(zs, j, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) multiplyWithLibOrgBouncycastleMathEcECFieldElement:u]);
    u = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(u)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:tmp];
  }
  (void) IOSObjectArray_Set(zs, off, u);
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_referenceMultiplyWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECPoint *p, JavaMathBigInteger *k) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  JavaMathBigInteger *x = [((JavaMathBigInteger *) nil_chk(k)) abs];
  LibOrgBouncycastleMathEcECPoint *q = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  jint t = [((JavaMathBigInteger *) nil_chk(x)) bitLength];
  if (t > 0) {
    if ([x testBitWithInt:0]) {
      q = p;
    }
    for (jint i = 1; i < t; i++) {
      p = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) twice];
      if ([x testBitWithInt:i]) {
        q = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(q)) addWithLibOrgBouncycastleMathEcECPoint:p];
      }
    }
  }
  return [k signum] < 0 ? [((LibOrgBouncycastleMathEcECPoint *) nil_chk(q)) negate] : q;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_validatePointWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *p) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  if (![((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Invalid point");
  }
  return p;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *c, LibOrgBouncycastleMathEcECPoint *p) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  LibOrgBouncycastleMathEcECCurve *cp = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  if (![((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) equalsWithLibOrgBouncycastleMathEcECCurve:cp]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point must be on the same curve");
  }
  return [c decodePointWithByteArray:[p getEncodedWithBoolean:false]];
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *p) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  if (![((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) isValidPartial]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Invalid result");
  }
  return p;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickJsfWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, LibOrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(P)) getCurve];
  LibOrgBouncycastleMathEcECPoint *infinity = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  LibOrgBouncycastleMathEcECPoint *PaddQ = [P addWithLibOrgBouncycastleMathEcECPoint:Q];
  LibOrgBouncycastleMathEcECPoint *PsubQ = [P subtractWithLibOrgBouncycastleMathEcECPoint:Q];
  IOSObjectArray *points = [IOSObjectArray newArrayWithObjects:(id[]){ Q, PsubQ, P, PaddQ } count:4 type:LibOrgBouncycastleMathEcECPoint_class_()];
  [curve normalizeAllWithLibOrgBouncycastleMathEcECPointArray:points];
  IOSObjectArray *table = [IOSObjectArray newArrayWithObjects:(id[]){ [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 3))) negate], [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 2))) negate], [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 1))) negate], [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 0))) negate], infinity, IOSObjectArray_Get(points, 0), IOSObjectArray_Get(points, 1), IOSObjectArray_Get(points, 2), IOSObjectArray_Get(points, 3) } count:9 type:LibOrgBouncycastleMathEcECPoint_class_()];
  IOSByteArray *jsf = LibOrgBouncycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(k, l);
  LibOrgBouncycastleMathEcECPoint *R = infinity;
  jint i = ((IOSByteArray *) nil_chk(jsf))->size_;
  while (--i >= 0) {
    jint jsfi = IOSByteArray_Get(jsf, i);
    jint kDigit = (JreRShift32((JreLShift32(jsfi, 24)), 28));
    jint lDigit = (JreRShift32((JreLShift32(jsfi, 28)), 28));
    jint index = 4 + (kDigit * 3) + lDigit;
    R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithLibOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(table, index)];
  }
  return R;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, LibOrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  jboolean negK = [((JavaMathBigInteger *) nil_chk(k)) signum] < 0;
  jboolean negL = [((JavaMathBigInteger *) nil_chk(l)) signum] < 0;
  k = [k abs];
  l = [l abs];
  jint widthP = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_([((JavaMathBigInteger *) nil_chk(k)) bitLength])));
  jint widthQ = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_([((JavaMathBigInteger *) nil_chk(l)) bitLength])));
  LibOrgBouncycastleMathEcWNafPreCompInfo *infoP = LibOrgBouncycastleMathEcWNafUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_(P, widthP, true);
  LibOrgBouncycastleMathEcWNafPreCompInfo *infoQ = LibOrgBouncycastleMathEcWNafUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_(Q, widthQ, true);
  IOSObjectArray *preCompP = negK ? [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getPreCompNeg] : [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getPreComp];
  IOSObjectArray *preCompQ = negL ? [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getPreCompNeg] : [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getPreComp];
  IOSObjectArray *preCompNegP = negK ? [infoP getPreComp] : [infoP getPreCompNeg];
  IOSObjectArray *preCompNegQ = negL ? [infoQ getPreComp] : [infoQ getPreCompNeg];
  IOSByteArray *wnafP = LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthP, k);
  IOSByteArray *wnafQ = LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthQ, l);
  return LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_withLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPointMap_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, id<LibOrgBouncycastleMathEcECPointMap> pointMapQ, JavaMathBigInteger *l) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  jboolean negK = [((JavaMathBigInteger *) nil_chk(k)) signum] < 0;
  jboolean negL = [((JavaMathBigInteger *) nil_chk(l)) signum] < 0;
  k = [k abs];
  l = [l abs];
  jint width = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_(JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(k)) bitLength], [((JavaMathBigInteger *) nil_chk(l)) bitLength]))));
  LibOrgBouncycastleMathEcECPoint *Q = LibOrgBouncycastleMathEcWNafUtil_mapPointWithPrecompWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_withLibOrgBouncycastleMathEcECPointMap_(P, width, true, pointMapQ);
  LibOrgBouncycastleMathEcWNafPreCompInfo *infoP = LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcECPoint_(P);
  LibOrgBouncycastleMathEcWNafPreCompInfo *infoQ = LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcECPoint_(Q);
  IOSObjectArray *preCompP = negK ? [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getPreCompNeg] : [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getPreComp];
  IOSObjectArray *preCompQ = negL ? [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getPreCompNeg] : [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getPreComp];
  IOSObjectArray *preCompNegP = negK ? [infoP getPreComp] : [infoP getPreCompNeg];
  IOSObjectArray *preCompNegQ = negL ? [infoQ getPreComp] : [infoQ getPreCompNeg];
  IOSByteArray *wnafP = LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, k);
  IOSByteArray *wnafQ = LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, l);
  return LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_withLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_withLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointArray_withByteArray_(IOSObjectArray *preCompP, IOSObjectArray *preCompNegP, IOSByteArray *wnafP, IOSObjectArray *preCompQ, IOSObjectArray *preCompNegQ, IOSByteArray *wnafQ) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  jint len = JavaLangMath_maxWithInt_withInt_(((IOSByteArray *) nil_chk(wnafP))->size_, ((IOSByteArray *) nil_chk(wnafQ))->size_);
  LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(preCompP), 0))) getCurve];
  LibOrgBouncycastleMathEcECPoint *infinity = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  LibOrgBouncycastleMathEcECPoint *R = infinity;
  jint zeroes = 0;
  for (jint i = len - 1; i >= 0; --i) {
    jint wiP = i < wnafP->size_ ? IOSByteArray_Get(wnafP, i) : 0;
    jint wiQ = i < wnafQ->size_ ? IOSByteArray_Get(wnafQ, i) : 0;
    if ((wiP | wiQ) == 0) {
      ++zeroes;
      continue;
    }
    LibOrgBouncycastleMathEcECPoint *r = infinity;
    if (wiP != 0) {
      jint nP = JavaLangMath_absWithInt_(wiP);
      IOSObjectArray *tableP = wiP < 0 ? preCompNegP : preCompP;
      r = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(r)) addWithLibOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(tableP, JreURShift32(nP, 1))];
    }
    if (wiQ != 0) {
      jint nQ = JavaLangMath_absWithInt_(wiQ);
      IOSObjectArray *tableQ = wiQ < 0 ? preCompNegQ : preCompQ;
      r = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(r)) addWithLibOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(tableQ, JreURShift32(nQ, 1))];
    }
    if (zeroes > 0) {
      R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
      zeroes = 0;
    }
    R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithLibOrgBouncycastleMathEcECPoint:r];
  }
  if (zeroes > 0) {
    R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  return R;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(IOSObjectArray *ps, IOSObjectArray *ks) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  jint count = ((IOSObjectArray *) nil_chk(ps))->size_;
  IOSBooleanArray *negs = [IOSBooleanArray newArrayWithLength:count];
  IOSObjectArray *infos = [IOSObjectArray newArrayWithLength:count type:LibOrgBouncycastleMathEcWNafPreCompInfo_class_()];
  IOSObjectArray *wnafs = [IOSObjectArray newArrayWithLength:count type:IOSClass_byteArray(1)];
  for (jint i = 0; i < count; ++i) {
    JavaMathBigInteger *ki = IOSObjectArray_Get(nil_chk(ks), i);
    *IOSBooleanArray_GetRef(negs, i) = ([((JavaMathBigInteger *) nil_chk(ki)) signum] < 0);
    ki = [ki abs];
    jint width = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_([((JavaMathBigInteger *) nil_chk(ki)) bitLength])));
    (void) IOSObjectArray_Set(infos, i, LibOrgBouncycastleMathEcWNafUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_(IOSObjectArray_Get(ps, i), width, true));
    (void) IOSObjectArray_Set(wnafs, i, LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, ki));
  }
  return LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withLibOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withLibOrgBouncycastleMathEcEndoGLVEndomorphism_(IOSObjectArray *ps, IOSObjectArray *ks, id<LibOrgBouncycastleMathEcEndoGLVEndomorphism> glvEndomorphism) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  JavaMathBigInteger *n = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(ps), 0))) getCurve])) getOrder];
  jint len = ps->size_;
  IOSObjectArray *abs = [IOSObjectArray newArrayWithLength:JreLShift32(len, 1) type:JavaMathBigInteger_class_()];
  for (jint i = 0, j = 0; i < len; ++i) {
    IOSObjectArray *ab = [((id<LibOrgBouncycastleMathEcEndoGLVEndomorphism>) nil_chk(glvEndomorphism)) decomposeScalarWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(ks), i))) modWithJavaMathBigInteger:n]];
    (void) IOSObjectArray_Set(abs, j++, IOSObjectArray_Get(nil_chk(ab), 0));
    (void) IOSObjectArray_Set(abs, j++, IOSObjectArray_Get(ab, 1));
  }
  id<LibOrgBouncycastleMathEcECPointMap> pointMap = [((id<LibOrgBouncycastleMathEcEndoGLVEndomorphism>) nil_chk(glvEndomorphism)) getPointMap];
  if ([glvEndomorphism hasEfficientPointMap]) {
    return LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointMap_withJavaMathBigIntegerArray_(ps, pointMap, abs);
  }
  IOSObjectArray *pqs = [IOSObjectArray newArrayWithLength:JreLShift32(len, 1) type:LibOrgBouncycastleMathEcECPoint_class_()];
  for (jint i = 0, j = 0; i < len; ++i) {
    LibOrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(ps, i);
    LibOrgBouncycastleMathEcECPoint *q = [((id<LibOrgBouncycastleMathEcECPointMap>) nil_chk(pointMap)) mapWithLibOrgBouncycastleMathEcECPoint:p];
    (void) IOSObjectArray_Set(pqs, j++, p);
    (void) IOSObjectArray_Set(pqs, j++, q);
  }
  return LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(pqs, abs);
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithLibOrgBouncycastleMathEcECPointArray_withLibOrgBouncycastleMathEcECPointMap_withJavaMathBigIntegerArray_(IOSObjectArray *ps, id<LibOrgBouncycastleMathEcECPointMap> pointMap, IOSObjectArray *ks) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  jint halfCount = ((IOSObjectArray *) nil_chk(ps))->size_;
  jint fullCount = JreLShift32(halfCount, 1);
  IOSBooleanArray *negs = [IOSBooleanArray newArrayWithLength:fullCount];
  IOSObjectArray *infos = [IOSObjectArray newArrayWithLength:fullCount type:LibOrgBouncycastleMathEcWNafPreCompInfo_class_()];
  IOSObjectArray *wnafs = [IOSObjectArray newArrayWithLength:fullCount type:IOSClass_byteArray(1)];
  for (jint i = 0; i < halfCount; ++i) {
    jint j0 = JreLShift32(i, 1);
    jint j1 = j0 + 1;
    JavaMathBigInteger *kj0 = IOSObjectArray_Get(nil_chk(ks), j0);
    *IOSBooleanArray_GetRef(negs, j0) = ([((JavaMathBigInteger *) nil_chk(kj0)) signum] < 0);
    kj0 = [kj0 abs];
    JavaMathBigInteger *kj1 = IOSObjectArray_Get(ks, j1);
    *IOSBooleanArray_GetRef(negs, j1) = ([((JavaMathBigInteger *) nil_chk(kj1)) signum] < 0);
    kj1 = [kj1 abs];
    jint width = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_(JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(kj0)) bitLength], [((JavaMathBigInteger *) nil_chk(kj1)) bitLength]))));
    LibOrgBouncycastleMathEcECPoint *P = IOSObjectArray_Get(ps, i);
    LibOrgBouncycastleMathEcECPoint *Q = LibOrgBouncycastleMathEcWNafUtil_mapPointWithPrecompWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_withLibOrgBouncycastleMathEcECPointMap_(P, width, true, pointMap);
    (void) IOSObjectArray_Set(infos, j0, LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcECPoint_(P));
    (void) IOSObjectArray_Set(infos, j1, LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcECPoint_(Q));
    (void) IOSObjectArray_Set(wnafs, j0, LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, kj0));
    (void) IOSObjectArray_Set(wnafs, j1, LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, kj1));
  }
  return LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withLibOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withLibOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(IOSBooleanArray *negs, IOSObjectArray *infos, IOSObjectArray *wnafs) {
  LibOrgBouncycastleMathEcECAlgorithms_initialize();
  jint len = 0;
  jint count = ((IOSObjectArray *) nil_chk(wnafs))->size_;
  for (jint i = 0; i < count; ++i) {
    len = JavaLangMath_maxWithInt_withInt_(len, ((IOSByteArray *) nil_chk(IOSObjectArray_Get(wnafs, i)))->size_);
  }
  LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk([((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(IOSObjectArray_Get(nil_chk(infos), 0))) getPreComp]), 0))) getCurve];
  LibOrgBouncycastleMathEcECPoint *infinity = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  LibOrgBouncycastleMathEcECPoint *R = infinity;
  jint zeroes = 0;
  for (jint i = len - 1; i >= 0; --i) {
    LibOrgBouncycastleMathEcECPoint *r = infinity;
    for (jint j = 0; j < count; ++j) {
      IOSByteArray *wnaf = IOSObjectArray_Get(wnafs, j);
      jint wi = i < ((IOSByteArray *) nil_chk(wnaf))->size_ ? IOSByteArray_Get(wnaf, i) : 0;
      if (wi != 0) {
        jint n = JavaLangMath_absWithInt_(wi);
        LibOrgBouncycastleMathEcWNafPreCompInfo *info = IOSObjectArray_Get(infos, j);
        IOSObjectArray *table = (wi < 0 == IOSBooleanArray_Get(nil_chk(negs), j)) ? [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(info)) getPreComp] : [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(info)) getPreCompNeg];
        r = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(r)) addWithLibOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(table, JreURShift32(n, 1))];
      }
    }
    if (r == infinity) {
      ++zeroes;
      continue;
    }
    if (zeroes > 0) {
      R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
      zeroes = 0;
    }
    R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithLibOrgBouncycastleMathEcECPoint:r];
  }
  if (zeroes > 0) {
    R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  return R;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECAlgorithms)
