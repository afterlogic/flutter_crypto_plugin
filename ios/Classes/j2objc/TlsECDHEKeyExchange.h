//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java
//

#ifndef TlsECDHEKeyExchange_H
#define TlsECDHEKeyExchange_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsECDHKeyExchange.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@class LibOrgBouncycastleCryptoTlsSecurityParameters;
@class LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol LibOrgBouncycastleCryptoSigner;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsSigner;
@protocol LibOrgBouncycastleCryptoTlsTlsSignerCredentials;

@interface LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange : LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials> serverCredentials_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
                         withIntArray:(IOSIntArray *)namedCurves
                       withShortArray:(IOSShortArray *)clientECPointFormats
                       withShortArray:(IOSShortArray *)serverECPointFormats;

- (IOSByteArray *)generateServerKeyExchange;

- (void)processClientCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)validateCertificateRequestWithLibOrgBouncycastleCryptoTlsCertificateRequest:(LibOrgBouncycastleCryptoTlsCertificateRequest *)certificateRequest;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoSigner>)initVerifyerWithLibOrgBouncycastleCryptoTlsTlsSigner:(id<LibOrgBouncycastleCryptoTlsTlsSigner>)tlsSigner
                                  withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                         withLibOrgBouncycastleCryptoTlsSecurityParameters:(LibOrgBouncycastleCryptoTlsSecurityParameters *)securityParameters OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange, serverCredentials_, id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsECDHEKeyExchange_H
