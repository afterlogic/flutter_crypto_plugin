//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/sphincs/BCSphincs256PublicKey.java
//

#ifndef BCSphincs256PublicKey_H
#define BCSphincs256PublicKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "SPHINCSKey.h"
#include "java/security/PublicKey.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class LibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey : NSObject < JavaSecurityPublicKey, LibOrgBouncycastlePqcJcajceInterfacesSPHINCSKey >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)treeDigest
            withLibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters:(LibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *)params;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo;

- (jboolean)isEqual:(id)o;

- (NSString *)getAlgorithm;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (IOSByteArray *)getKeyData;

- (NSUInteger)hash;

#pragma mark Package-Private

- (id<LibOrgBouncycastleCryptoCipherParameters>)getKeyParams;

- (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getTreeDigest;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_(LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, LibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *new_LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, LibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *create_LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, LibOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *params);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo);

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *new_LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *create_LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BCSphincs256PublicKey_H
