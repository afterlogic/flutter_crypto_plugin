//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSVerifierUtil.java
//

#ifndef XMSSVerifierUtil_H
#define XMSSVerifierUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastlePqcCryptoXmssOTSHashAddress;
@class LibOrgBouncycastlePqcCryptoXmssWOTSPlus;
@class LibOrgBouncycastlePqcCryptoXmssXMSSNode;
@class LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature;

@interface LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (LibOrgBouncycastlePqcCryptoXmssXMSSNode *)getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus:(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                                                                                                         withInt:(jint)height
                                                                                                   withByteArray:(IOSByteArray *)messageDigest
                                                         withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature:(LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature *)signature
                                                               withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress
                                                                                                         withInt:(jint)indexLeaf;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_init(LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *new_LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *create_LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_init(void);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssXMSSNode *LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint height, IOSByteArray *messageDigest, LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature *signature, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint indexLeaf);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // XMSSVerifierUtil_H
