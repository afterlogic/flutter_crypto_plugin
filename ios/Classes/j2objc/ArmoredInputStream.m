//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/ArmoredInputStream.java
//

#include "ArmoredInputStream.h"
#include "CRC24.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "StringList.h"
#include "Strings.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/StringBuffer.h"

@interface LibOrgBouncycastleBcpgArmoredInputStream ()

- (jint)decodeWithInt:(jint)in0
              withInt:(jint)in1
              withInt:(jint)in2
              withInt:(jint)in3
         withIntArray:(IOSIntArray *)outArg;

- (jboolean)parseHeaders;

- (jint)readIgnoreSpace;

@end

inline IOSByteArray *LibOrgBouncycastleBcpgArmoredInputStream_get_decodingTable(void);
static IOSByteArray *LibOrgBouncycastleBcpgArmoredInputStream_decodingTable;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleBcpgArmoredInputStream, decodingTable, IOSByteArray *)

__attribute__((unused)) static jint LibOrgBouncycastleBcpgArmoredInputStream_decodeWithInt_withInt_withInt_withInt_withIntArray_(LibOrgBouncycastleBcpgArmoredInputStream *self, jint in0, jint in1, jint in2, jint in3, IOSIntArray *outArg);

__attribute__((unused)) static jboolean LibOrgBouncycastleBcpgArmoredInputStream_parseHeaders(LibOrgBouncycastleBcpgArmoredInputStream *self);

__attribute__((unused)) static jint LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(LibOrgBouncycastleBcpgArmoredInputStream *self);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleBcpgArmoredInputStream)

@implementation LibOrgBouncycastleBcpgArmoredInputStream

- (jint)decodeWithInt:(jint)in0
              withInt:(jint)in1
              withInt:(jint)in2
              withInt:(jint)in3
         withIntArray:(IOSIntArray *)outArg {
  return LibOrgBouncycastleBcpgArmoredInputStream_decodeWithInt_withInt_withInt_withInt_withIntArray_(self, in0, in1, in2, in3, outArg);
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_(self, inArg);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                              withBoolean:(jboolean)hasHeaders {
  LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_withBoolean_(self, inArg, hasHeaders);
  return self;
}

- (jint)available {
  return [((JavaIoInputStream *) nil_chk(in_)) available];
}

- (jboolean)parseHeaders {
  return LibOrgBouncycastleBcpgArmoredInputStream_parseHeaders(self);
}

- (jboolean)isClearText {
  return clearText_;
}

- (jboolean)isEndOfStream {
  return isEndOfStream_;
}

- (NSString *)getArmorHeaderLine {
  return header_;
}

- (IOSObjectArray *)getArmorHeaders {
  if ([((id<LibOrgBouncycastleUtilStringList>) nil_chk(headerList_)) size] <= 1) {
    return nil;
  }
  return [((id<LibOrgBouncycastleUtilStringList>) nil_chk(headerList_)) toStringArrayWithInt:1 withInt:[headerList_ size]];
}

- (jint)readIgnoreSpace {
  return LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self);
}

- (jint)read {
  jint c;
  if (start_) {
    if (hasHeaders_) {
      LibOrgBouncycastleBcpgArmoredInputStream_parseHeaders(self);
    }
    [((LibOrgBouncycastleBcpgCRC24 *) nil_chk(crc_)) reset];
    start_ = false;
  }
  if (clearText_) {
    c = [((JavaIoInputStream *) nil_chk(in_)) read];
    if (c == 0x000d || (c == 0x000a && lastC_ != 0x000d)) {
      newLineFound_ = true;
    }
    else if (newLineFound_ && c == '-') {
      c = [((JavaIoInputStream *) nil_chk(in_)) read];
      if (c == '-') {
        clearText_ = false;
        start_ = true;
        restart_ = true;
      }
      else {
        c = [((JavaIoInputStream *) nil_chk(in_)) read];
      }
      newLineFound_ = false;
    }
    else {
      if (c != 0x000a && lastC_ != 0x000d) {
        newLineFound_ = false;
      }
    }
    lastC_ = c;
    if (c < 0) {
      isEndOfStream_ = true;
    }
    return c;
  }
  if (bufPtr_ > 2 || crcFound_) {
    c = LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self);
    if (c == 0x000d || c == 0x000a) {
      c = LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self);
      while (c == 0x000a || c == 0x000d) {
        c = LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self);
      }
      if (c < 0) {
        isEndOfStream_ = true;
        return -1;
      }
      if (c == '=') {
        bufPtr_ = LibOrgBouncycastleBcpgArmoredInputStream_decodeWithInt_withInt_withInt_withInt_withIntArray_(self, LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), outBuf_);
        if (bufPtr_ == 0) {
          jint i = (JreLShift32((IOSIntArray_Get(nil_chk(outBuf_), 0) & (jint) 0xff), 16)) | (JreLShift32((IOSIntArray_Get(outBuf_, 1) & (jint) 0xff), 8)) | (IOSIntArray_Get(outBuf_, 2) & (jint) 0xff);
          crcFound_ = true;
          if (i != [((LibOrgBouncycastleBcpgCRC24 *) nil_chk(crc_)) getValue]) {
            @throw new_JavaIoIOException_initWithNSString_(@"crc check failed in armored message.");
          }
          return [self read];
        }
        else {
          @throw new_JavaIoIOException_initWithNSString_(@"no crc found in armored message.");
        }
      }
      else if (c == '-') {
        while ((c = [((JavaIoInputStream *) nil_chk(in_)) read]) >= 0) {
          if (c == 0x000a || c == 0x000d) {
            break;
          }
        }
        if (!crcFound_) {
          @throw new_JavaIoIOException_initWithNSString_(@"crc check not found.");
        }
        crcFound_ = false;
        start_ = true;
        bufPtr_ = 3;
        if (c < 0) {
          isEndOfStream_ = true;
        }
        return -1;
      }
      else {
        bufPtr_ = LibOrgBouncycastleBcpgArmoredInputStream_decodeWithInt_withInt_withInt_withInt_withIntArray_(self, c, LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), outBuf_);
      }
    }
    else {
      if (c >= 0) {
        bufPtr_ = LibOrgBouncycastleBcpgArmoredInputStream_decodeWithInt_withInt_withInt_withInt_withIntArray_(self, c, LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(self), outBuf_);
      }
      else {
        isEndOfStream_ = true;
        return -1;
      }
    }
  }
  c = IOSIntArray_Get(nil_chk(outBuf_), bufPtr_++);
  [((LibOrgBouncycastleBcpgCRC24 *) nil_chk(crc_)) updateWithInt:c];
  return c;
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(in_)) close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(decodeWithInt:withInt:withInt:withInt:withIntArray:);
  methods[1].selector = @selector(initWithJavaIoInputStream:);
  methods[2].selector = @selector(initWithJavaIoInputStream:withBoolean:);
  methods[3].selector = @selector(available);
  methods[4].selector = @selector(parseHeaders);
  methods[5].selector = @selector(isClearText);
  methods[6].selector = @selector(isEndOfStream);
  methods[7].selector = @selector(getArmorHeaderLine);
  methods[8].selector = @selector(getArmorHeaders);
  methods[9].selector = @selector(readIgnoreSpace);
  methods[10].selector = @selector(read);
  methods[11].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "decodingTable", "[B", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "in_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "start_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "outBuf_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufPtr_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "crc_", "LLibOrgBouncycastleBcpgCRC24;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "crcFound_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hasHeaders_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "header_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "newLineFound_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clearText_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "restart_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headerList_", "LLibOrgBouncycastleUtilStringList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastC_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isEndOfStream_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "decode", "IIII[I", "LJavaIoIOException;", "LJavaIoInputStream;", "LJavaIoInputStream;Z", &LibOrgBouncycastleBcpgArmoredInputStream_decodingTable };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgArmoredInputStream = { "ArmoredInputStream", "lib.org.bouncycastle.bcpg", ptrTable, methods, fields, 7, 0x1, 12, 15, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgArmoredInputStream;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleBcpgArmoredInputStream class]) {
    {
      LibOrgBouncycastleBcpgArmoredInputStream_decodingTable = [IOSByteArray newArrayWithLength:128];
      for (jint i = 0; i < LibOrgBouncycastleBcpgArmoredInputStream_decodingTable->size_; i++) {
        *IOSByteArray_GetRef(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, i) = (jbyte) (jint) 0xff;
      }
      for (jint i = 'A'; i <= 'Z'; i++) {
        *IOSByteArray_GetRef(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, i) = (jbyte) (i - 'A');
      }
      for (jint i = 'a'; i <= 'z'; i++) {
        *IOSByteArray_GetRef(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, i) = (jbyte) (i - 'a' + 26);
      }
      for (jint i = '0'; i <= '9'; i++) {
        *IOSByteArray_GetRef(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, i) = (jbyte) (i - '0' + 52);
      }
      *IOSByteArray_GetRef(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, '+') = 62;
      *IOSByteArray_GetRef(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, '/') = 63;
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleBcpgArmoredInputStream)
  }
}

@end

jint LibOrgBouncycastleBcpgArmoredInputStream_decodeWithInt_withInt_withInt_withInt_withIntArray_(LibOrgBouncycastleBcpgArmoredInputStream *self, jint in0, jint in1, jint in2, jint in3, IOSIntArray *outArg) {
  jint b1;
  jint b2;
  jint b3;
  jint b4;
  if (in3 < 0) {
    @throw new_JavaIoEOFException_initWithNSString_(@"unexpected end of file in armored stream.");
  }
  if (in2 == '=') {
    b1 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable), in0) & (jint) 0xff;
    b2 = IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, in1) & (jint) 0xff;
    if ((b1 | b2) < 0) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid armor");
    }
    *IOSIntArray_GetRef(nil_chk(outArg), 2) = ((JreLShift32(b1, 2)) | (JreRShift32(b2, 4))) & (jint) 0xff;
    return 2;
  }
  else if (in3 == '=') {
    b1 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable), in0);
    b2 = IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, in1);
    b3 = IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, in2);
    if ((b1 | b2 | b3) < 0) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid armor");
    }
    *IOSIntArray_GetRef(nil_chk(outArg), 1) = ((JreLShift32(b1, 2)) | (JreRShift32(b2, 4))) & (jint) 0xff;
    *IOSIntArray_GetRef(outArg, 2) = ((JreLShift32(b2, 4)) | (JreRShift32(b3, 2))) & (jint) 0xff;
    return 1;
  }
  else {
    b1 = IOSByteArray_Get(nil_chk(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable), in0);
    b2 = IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, in1);
    b3 = IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, in2);
    b4 = IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredInputStream_decodingTable, in3);
    if ((b1 | b2 | b3 | b4) < 0) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid armor");
    }
    *IOSIntArray_GetRef(nil_chk(outArg), 0) = ((JreLShift32(b1, 2)) | (JreRShift32(b2, 4))) & (jint) 0xff;
    *IOSIntArray_GetRef(outArg, 1) = ((JreLShift32(b2, 4)) | (JreRShift32(b3, 2))) & (jint) 0xff;
    *IOSIntArray_GetRef(outArg, 2) = ((JreLShift32(b3, 6)) | b4) & (jint) 0xff;
    return 0;
  }
}

void LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_(LibOrgBouncycastleBcpgArmoredInputStream *self, JavaIoInputStream *inArg) {
  LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_withBoolean_(self, inArg, true);
}

LibOrgBouncycastleBcpgArmoredInputStream *new_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgArmoredInputStream, initWithJavaIoInputStream_, inArg)
}

LibOrgBouncycastleBcpgArmoredInputStream *create_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgArmoredInputStream, initWithJavaIoInputStream_, inArg)
}

void LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_withBoolean_(LibOrgBouncycastleBcpgArmoredInputStream *self, JavaIoInputStream *inArg, jboolean hasHeaders) {
  JavaIoInputStream_init(self);
  self->start_ = true;
  self->outBuf_ = [IOSIntArray newArrayWithLength:3];
  self->bufPtr_ = 3;
  self->crc_ = new_LibOrgBouncycastleBcpgCRC24_init();
  self->crcFound_ = false;
  self->hasHeaders_ = true;
  self->header_ = nil;
  self->newLineFound_ = false;
  self->clearText_ = false;
  self->restart_ = false;
  self->headerList_ = LibOrgBouncycastleUtilStrings_newList();
  self->lastC_ = 0;
  self->in_ = inArg;
  self->hasHeaders_ = hasHeaders;
  if (hasHeaders) {
    LibOrgBouncycastleBcpgArmoredInputStream_parseHeaders(self);
  }
  self->start_ = false;
}

LibOrgBouncycastleBcpgArmoredInputStream *new_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_withBoolean_(JavaIoInputStream *inArg, jboolean hasHeaders) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgArmoredInputStream, initWithJavaIoInputStream_withBoolean_, inArg, hasHeaders)
}

LibOrgBouncycastleBcpgArmoredInputStream *create_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_withBoolean_(JavaIoInputStream *inArg, jboolean hasHeaders) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgArmoredInputStream, initWithJavaIoInputStream_withBoolean_, inArg, hasHeaders)
}

jboolean LibOrgBouncycastleBcpgArmoredInputStream_parseHeaders(LibOrgBouncycastleBcpgArmoredInputStream *self) {
  self->header_ = nil;
  jint c;
  jint last = 0;
  jboolean headerFound = false;
  self->headerList_ = LibOrgBouncycastleUtilStrings_newList();
  if (self->restart_) {
    headerFound = true;
  }
  else {
    while ((c = [((JavaIoInputStream *) nil_chk(self->in_)) read]) >= 0) {
      if (c == '-' && (last == 0 || last == 0x000a || last == 0x000d)) {
        headerFound = true;
        break;
      }
      last = c;
    }
  }
  if (headerFound) {
    JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(@"-");
    jboolean eolReached = false;
    jboolean crLf = false;
    if (self->restart_) {
      (void) [buf appendWithChar:'-'];
    }
    while ((c = [((JavaIoInputStream *) nil_chk(self->in_)) read]) >= 0) {
      if (last == 0x000d && c == 0x000a) {
        crLf = true;
      }
      if (eolReached && (last != 0x000d && c == 0x000a)) {
        break;
      }
      if (eolReached && c == 0x000d) {
        break;
      }
      if (c == 0x000d || (last != 0x000d && c == 0x000a)) {
        NSString *line = [buf description];
        if ([((NSString *) nil_chk([((NSString *) nil_chk(line)) java_trim])) java_length] == 0) {
          break;
        }
        [((id<LibOrgBouncycastleUtilStringList>) nil_chk(self->headerList_)) addWithNSString:line];
        [buf setLengthWithInt:0];
      }
      if (c != 0x000a && c != 0x000d) {
        (void) [buf appendWithChar:(jchar) c];
        eolReached = false;
      }
      else {
        if (c == 0x000d || (last != 0x000d && c == 0x000a)) {
          eolReached = true;
        }
      }
      last = c;
    }
    if (crLf) {
      [((JavaIoInputStream *) nil_chk(self->in_)) read];
    }
  }
  if ([((id<LibOrgBouncycastleUtilStringList>) nil_chk(self->headerList_)) size] > 0) {
    self->header_ = [((id<LibOrgBouncycastleUtilStringList>) nil_chk(self->headerList_)) getWithInt:0];
  }
  self->clearText_ = [@"-----BEGIN PGP SIGNED MESSAGE-----" isEqual:self->header_];
  self->newLineFound_ = true;
  return headerFound;
}

jint LibOrgBouncycastleBcpgArmoredInputStream_readIgnoreSpace(LibOrgBouncycastleBcpgArmoredInputStream *self) {
  jint c = [((JavaIoInputStream *) nil_chk(self->in_)) read];
  while (c == ' ' || c == 0x0009) {
    c = [((JavaIoInputStream *) nil_chk(self->in_)) read];
  }
  if (c >= 128) {
    @throw new_JavaIoIOException_initWithNSString_(@"invalid armor");
  }
  return c;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgArmoredInputStream)
