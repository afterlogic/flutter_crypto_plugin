//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/DHParametersGenerator.java
//

#include "DHParameters.h"
#include "DHParametersGenerator.h"
#include "DHParametersHelper.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator () {
 @public
  jint size_;
  jint certainty_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator, random_, JavaSecuritySecureRandom *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_get_TWO(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator, TWO, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator)

@implementation LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithInt:(jint)size
              withInt:(jint)certainty
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->size_ = size;
  self->certainty_ = certainty;
  self->random_ = random;
}

- (LibOrgBouncycastleCryptoParamsDHParameters *)generateParameters {
  IOSObjectArray *safePrimes = LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_generateSafePrimesWithInt_withInt_withJavaSecuritySecureRandom_(size_, certainty_, random_);
  JavaMathBigInteger *p = IOSObjectArray_Get(nil_chk(safePrimes), 0);
  JavaMathBigInteger *q = IOSObjectArray_Get(safePrimes, 1);
  JavaMathBigInteger *g = LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_selectGeneratorWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(p, q, random_);
  return new_LibOrgBouncycastleCryptoParamsDHParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDHValidationParameters_(p, g, q, LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_TWO, nil);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsDHParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithInt:withInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(generateParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certainty_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "IILJavaSecuritySecureRandom;", &LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_TWO };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator = { "DHParametersGenerator", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 3, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator class]) {
    LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_TWO = JavaMathBigInteger_valueOfWithLong_(2);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator)
  }
}

@end

void LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_init(LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator *new_LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator, init)
}

LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator *create_LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator)
