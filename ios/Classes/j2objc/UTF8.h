//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/encoders/UTF8.java
//

#ifndef UTF8_H
#define UTF8_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSCharArray;

@interface LibOrgBouncycastleUtilEncodersUTF8 : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (jint)transcodeToUTF16WithByteArray:(IOSByteArray *)utf8
                        withCharArray:(IOSCharArray *)utf16;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleUtilEncodersUTF8)

FOUNDATION_EXPORT void LibOrgBouncycastleUtilEncodersUTF8_init(LibOrgBouncycastleUtilEncodersUTF8 *self);

FOUNDATION_EXPORT LibOrgBouncycastleUtilEncodersUTF8 *new_LibOrgBouncycastleUtilEncodersUTF8_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilEncodersUTF8 *create_LibOrgBouncycastleUtilEncodersUTF8_init(void);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilEncodersUTF8_transcodeToUTF16WithByteArray_withCharArray_(IOSByteArray *utf8, IOSCharArray *utf16);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilEncodersUTF8)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // UTF8_H
