//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dsa/JcajceDsaKeyFactorySpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "AsymmetricKeyParameter.h"
#include "BCDSAPrivateKey.h"
#include "BCDSAPublicKey.h"
#include "BaseKeyFactorySpi.h"
#include "CipherParameters.h"
#include "DSAParameters.h"
#include "DSAPrivateKeyParameters.h"
#include "DSAPublicKeyParameters.h"
#include "DSAUtil.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceDsaKeyFactorySpi.h"
#include "OpenSSHPrivateKeySpec.h"
#include "OpenSSHPrivateKeyUtil.h"
#include "OpenSSHPublicKeySpec.h"
#include "OpenSSHPublicKeyUtil.h"
#include "PrivateKeyInfo.h"
#include "SubjectPublicKeyInfo.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/DSAParams.h"
#include "java/security/interfaces/DSAPrivateKey.h"
#include "java/security/interfaces/DSAPublicKey.h"
#include "java/security/spec/DSAPrivateKeySpec.h"
#include "java/security/spec/DSAPublicKeySpec.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1 : JavaSecuritySpecInvalidKeySpecException {
 @public
  JavaLangException *val$e_;
}

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0
                             withNSString:(NSString *)x0;

- (JavaLangThrowable *)getCause;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1_initWithJavaLangException_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1 *self, JavaLangException *capture$0, NSString *x0);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1 *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1 *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)spec {
  if ([((IOSClass *) nil_chk(spec)) isAssignableFrom:JavaSecuritySpecDSAPublicKeySpec_class_()] && [JavaSecurityInterfacesDSAPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesDSAPublicKey> k = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(key, JavaSecurityInterfacesDSAPublicKey_class_());
    return new_JavaSecuritySpecDSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(k)) getY], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getP], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getQ], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getG]);
  }
  else if ([spec isAssignableFrom:JavaSecuritySpecDSAPrivateKeySpec_class_()] && [JavaSecurityInterfacesDSAPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesDSAPrivateKey> k = (id<JavaSecurityInterfacesDSAPrivateKey>) cast_check(key, JavaSecurityInterfacesDSAPrivateKey_class_());
    return new_JavaSecuritySpecDSAPrivateKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesDSAPrivateKey>) nil_chk(k)) getX], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getP], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getQ], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getG]);
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_class_()] && [JavaSecurityInterfacesDSAPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesDSAPublicKey> k = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(key, JavaSecurityInterfacesDSAPublicKey_class_());
    @try {
      return new_LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_initWithByteArray_(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_([((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(k)) getY], new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getP], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getQ], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getG]))));
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to produce encoding: ", [e getMessage]));
    }
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_class_()] && [JavaSecurityInterfacesDSAPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesDSAPrivateKey> k = (id<JavaSecurityInterfacesDSAPrivateKey>) cast_check(key, JavaSecurityInterfacesDSAPrivateKey_class_());
    @try {
      return new_LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_initWithByteArray_(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_encodePrivateKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_([((id<JavaSecurityInterfacesDSAPrivateKey>) nil_chk(k)) getX], new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getP], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getQ], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getG]))));
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to produce encoding: ", [e getMessage]));
    }
  }
  return [super engineGetKeySpecWithJavaSecurityKey:key withIOSClass:spec];
}

- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  if ([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_((id<JavaSecurityInterfacesDSAPublicKey>) cast_check(key, JavaSecurityInterfacesDSAPublicKey_class_()));
  }
  else if ([JavaSecurityInterfacesDSAPrivateKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithJavaSecurityInterfacesDSAPrivateKey_((id<JavaSecurityInterfacesDSAPrivateKey>) cast_check(key, JavaSecurityInterfacesDSAPrivateKey_class_()));
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"key type unknown");
}

- (id<JavaSecurityPrivateKey>)generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) getPrivateKeyAlgorithm])) getAlgorithm];
  if (LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_isDsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(algOid)) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

- (id<JavaSecurityPublicKey>)generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getAlgorithm];
  if (LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_isDsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(algOid)) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[JavaSecuritySpecDSAPrivateKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithJavaSecuritySpecDSAPrivateKeySpec_((JavaSecuritySpecDSAPrivateKeySpec *) keySpec);
  }
  else if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec class]]) {
    id<LibOrgBouncycastleCryptoCipherParameters> params = LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_parsePrivateKeyBlobWithByteArray_([((LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *) nil_chk(((LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *) keySpec))) getEncoded]);
    if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters class]]) {
      return [self engineGeneratePrivateWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecDSAPrivateKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params))) getX], [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params))) getParameters])) getP], [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params))) getParameters])) getQ], [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params))) getParameters])) getG])];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"openssh private key is not dsa privare key");
    }
  }
  return [super engineGeneratePrivateWithJavaSecuritySpecKeySpec:keySpec];
}

- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[JavaSecuritySpecDSAPublicKeySpec class]]) {
    @try {
      return new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecuritySpecDSAPublicKeySpec_((JavaSecuritySpecDSAPublicKeySpec *) keySpec);
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1_initWithJavaLangException_withNSString_(e, JreStrcat("$$", @"invalid KeySpec: ", [e getMessage]));
    }
  }
  else if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec class]]) {
    id<LibOrgBouncycastleCryptoCipherParameters> parameters = LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithByteArray_([((LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *) nil_chk(((LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *) keySpec))) getEncoded]);
    if ([parameters isKindOfClass:[LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters class]]) {
      return [self engineGeneratePublicWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecDSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) parameters))) getY], [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) parameters))) getParameters])) getP], [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) parameters))) getParameters])) getQ], [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) parameters))) getParameters])) getG])];
    }
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"openssh public key is not dsa public key");
  }
  return [super engineGeneratePublicWithJavaSecuritySpecKeySpec:keySpec];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 3, 4, 5, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 9, 10, 8, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x4, 11, 12, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x4, 13, 12, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGetKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[2].selector = @selector(engineTranslateKeyWithJavaSecurityKey:);
  methods[3].selector = @selector(generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[4].selector = @selector(generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[5].selector = @selector(engineGeneratePrivateWithJavaSecuritySpecKeySpec:);
  methods[6].selector = @selector(engineGeneratePublicWithJavaSecuritySpecKeySpec:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "engineGetKeySpec", "LJavaSecurityKey;LIOSClass;", "LJavaSecuritySpecInvalidKeySpecException;", "engineTranslateKey", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "generatePrivate", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "LJavaIoIOException;", "generatePublic", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "engineGeneratePrivate", "LJavaSecuritySpecKeySpec;", "engineGeneratePublic" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi = { "JcajceDsaKeyFactorySpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.dsa", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_init(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseKeyFactorySpi_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0
                             withNSString:(NSString *)x0 {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1_initWithJavaLangException_withNSString_(self, capture$0, x0);
  return self;
}

- (JavaLangThrowable *)getCause {
  return val$e_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangException:withNSString:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LJavaLangException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LLibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi;", "engineGeneratePublicWithJavaSecuritySpecKeySpec:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1 = { "", "lib.org.bouncycastle.jcajce.provider.asymmetric.dsa", ptrTable, methods, fields, 7, 0x8010, 2, 1, 1, -1, 2, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1_initWithJavaLangException_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1 *self, JavaLangException *capture$0, NSString *x0) {
  self->val$e_ = capture$0;
  JavaSecuritySpecInvalidKeySpecException_initWithNSString_(self, x0);
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1 *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1, initWithJavaLangException_withNSString_, capture$0, x0)
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1 *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyFactorySpi_1, initWithJavaLangException_withNSString_, capture$0, x0)
}
