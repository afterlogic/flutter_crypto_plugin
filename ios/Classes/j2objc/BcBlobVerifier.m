//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/bc/BcBlobVerifier.java
//

#include "Arrays.h"
#include "BcBlobVerifier.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MD5Digest.h"
#include "SHA1Digest.h"

@interface LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier () {
 @public
  LibOrgBouncycastleCryptoDigestsSHA1Digest *sha1Digest_;
  LibOrgBouncycastleCryptoDigestsMD5Digest *md5Digest_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier, sha1Digest_, LibOrgBouncycastleCryptoDigestsSHA1Digest *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier, md5Digest_, LibOrgBouncycastleCryptoDigestsMD5Digest *)

@implementation LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isMatchedWithByteArray:(IOSByteArray *)blobData
                     withByteArray:(IOSByteArray *)blobDigest {
  [((LibOrgBouncycastleCryptoDigestsSHA1Digest *) nil_chk(sha1Digest_)) updateWithByteArray:blobData withInt:0 withInt:((IOSByteArray *) nil_chk(blobData))->size_];
  IOSByteArray *calculatedDigest = [IOSByteArray newArrayWithLength:[sha1Digest_ getDigestSize]];
  [sha1Digest_ doFinalWithByteArray:calculatedDigest withInt:0];
  if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(calculatedDigest, blobDigest)) {
    if (IOSByteArray_Get(nil_chk(blobDigest), 0) == 0 && IOSByteArray_Get(blobDigest, 1) == 0 && IOSByteArray_Get(blobDigest, 2) == 0 && IOSByteArray_Get(blobDigest, 3) == 0) {
      [((LibOrgBouncycastleCryptoDigestsMD5Digest *) nil_chk(md5Digest_)) updateWithByteArray:blobData withInt:0 withInt:blobData->size_];
      LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(calculatedDigest, (jbyte) 0);
      [md5Digest_ doFinalWithByteArray:calculatedDigest withInt:4];
      return LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(calculatedDigest, blobDigest);
    }
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isMatchedWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sha1Digest_", "LLibOrgBouncycastleCryptoDigestsSHA1Digest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "md5Digest_", "LLibOrgBouncycastleCryptoDigestsMD5Digest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatched", "[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier = { "BcBlobVerifier", "lib.org.bouncycastle.gpg.keybox.bc", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier;
}

@end

void LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier_init(LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier *self) {
  NSObject_init(self);
  self->sha1Digest_ = new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init();
  self->md5Digest_ = new_LibOrgBouncycastleCryptoDigestsMD5Digest_init();
}

LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier *new_LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier, init)
}

LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier *create_LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleGpgKeyboxBcBcBlobVerifier)
