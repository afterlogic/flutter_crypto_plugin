//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/PGPExampleUtil.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaKeyFingerprintCalculator.h"
#include "JcePBESecretKeyDecryptorBuilder.h"
#include "PBESecretKeyDecryptor.h"
#include "PGPCompressedDataGenerator.h"
#include "PGPExampleUtil.h"
#include "PGPLiteralData.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPPublicKeyRingCollection.h"
#include "PGPSecretKey.h"
#include "PGPSecretKeyRing.h"
#include "PGPSecretKeyRingCollection.h"
#include "PGPUtil.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Iterator.h"

@implementation LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)compressFileWithNSString:(NSString *)fileName
                                   withInt:(jint)algorithm {
  return LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_compressFileWithNSString_withInt_(fileName, algorithm);
}

+ (LibOrgBouncycastleOpenpgpPGPPrivateKey *)findSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection:(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *)pgpSec
                                                                                                        withLong:(jlong)keyID
                                                                                                   withCharArray:(IOSCharArray *)pass {
  return LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_findSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_withLong_withCharArray_(pgpSec, keyID, pass);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)readPublicKeyWithNSString:(NSString *)fileName {
  return LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readPublicKeyWithNSString_(fileName);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)readPublicKeyWithJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readPublicKeyWithJavaIoInputStream_(input);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKey *)readSecretKeyWithNSString:(NSString *)fileName {
  return LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithNSString_(fileName);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKey *)readSecretKeyWithJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithJavaIoInputStream_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPrivateKey;", 0x8, 3, 4, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x8, 6, 7, 8, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x8, 6, 9, 8, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x8, 10, 7, 8, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x8, 10, 9, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compressFileWithNSString:withInt:);
  methods[2].selector = @selector(findSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection:withLong:withCharArray:);
  methods[3].selector = @selector(readPublicKeyWithNSString:);
  methods[4].selector = @selector(readPublicKeyWithJavaIoInputStream:);
  methods[5].selector = @selector(readSecretKeyWithNSString:);
  methods[6].selector = @selector(readSecretKeyWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compressFile", "LNSString;I", "LJavaIoIOException;", "findSecretKey", "LLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection;J[C", "LLibOrgBouncycastleOpenpgpPGPException;LJavaSecurityNoSuchProviderException;", "readPublicKey", "LNSString;", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoInputStream;", "readSecretKey" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil = { "PGPExampleUtil", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x0, 7, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil;
}

@end

void LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_init(LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil *new_LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil, init)
}

LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil *create_LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil, init)
}

IOSByteArray *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_compressFileWithNSString_withInt_(NSString *fileName, jint algorithm) {
  LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_initialize();
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  LibOrgBouncycastleOpenpgpPGPCompressedDataGenerator *comData = new_LibOrgBouncycastleOpenpgpPGPCompressedDataGenerator_initWithInt_(algorithm);
  LibOrgBouncycastleOpenpgpPGPUtil_writeFileToLiteralDataWithJavaIoOutputStream_withChar_withJavaIoFile_([comData openWithJavaIoOutputStream:bOut], LibOrgBouncycastleOpenpgpPGPLiteralData_BINARY, new_JavaIoFile_initWithNSString_(fileName));
  [comData close];
  return [bOut toByteArray];
}

LibOrgBouncycastleOpenpgpPGPPrivateKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_findSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_withLong_withCharArray_(LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *pgpSec, jlong keyID, IOSCharArray *pass) {
  LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_initialize();
  LibOrgBouncycastleOpenpgpPGPSecretKey *pgpSecKey = [((LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *) nil_chk(pgpSec)) getSecretKeyWithLong:keyID];
  if (pgpSecKey == nil) {
    return nil;
  }
  return [pgpSecKey extractPrivateKeyWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyDecryptorBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyDecryptorBuilder_init() setProviderWithNSString:@"BC"])) buildWithCharArray:pass]];
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readPublicKeyWithNSString_(NSString *fileName) {
  LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_initialize();
  JavaIoInputStream *keyIn = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(fileName));
  LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey = LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readPublicKeyWithJavaIoInputStream_(keyIn);
  [keyIn close];
  return pubKey;
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readPublicKeyWithJavaIoInputStream_(JavaIoInputStream *input) {
  LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_initialize();
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *pgpPub = new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(input), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
  id<JavaUtilIterator> keyRingIter = [pgpPub getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(keyRingIter)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *keyRing = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([keyRingIter next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    id<JavaUtilIterator> keyIter = [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(keyRing)) getPublicKeys];
    while ([((id<JavaUtilIterator>) nil_chk(keyIter)) hasNext]) {
      LibOrgBouncycastleOpenpgpPGPPublicKey *key = (LibOrgBouncycastleOpenpgpPGPPublicKey *) cast_chk([keyIter next], [LibOrgBouncycastleOpenpgpPGPPublicKey class]);
      if ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(key)) isEncryptionKey]) {
        return key;
      }
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't find encryption key in key ring.");
}

LibOrgBouncycastleOpenpgpPGPSecretKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithNSString_(NSString *fileName) {
  LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_initialize();
  JavaIoInputStream *keyIn = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(fileName));
  LibOrgBouncycastleOpenpgpPGPSecretKey *secKey = LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithJavaIoInputStream_(keyIn);
  [keyIn close];
  return secKey;
}

LibOrgBouncycastleOpenpgpPGPSecretKey *LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithJavaIoInputStream_(JavaIoInputStream *input) {
  LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_initialize();
  LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *pgpSec = new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(input), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
  id<JavaUtilIterator> keyRingIter = [pgpSec getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(keyRingIter)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSecretKeyRing *keyRing = (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) cast_chk([keyRingIter next], [LibOrgBouncycastleOpenpgpPGPSecretKeyRing class]);
    id<JavaUtilIterator> keyIter = [((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(keyRing)) getSecretKeys];
    while ([((id<JavaUtilIterator>) nil_chk(keyIter)) hasNext]) {
      LibOrgBouncycastleOpenpgpPGPSecretKey *key = (LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([keyIter next], [LibOrgBouncycastleOpenpgpPGPSecretKey class]);
      if ([((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(key)) isSigningKey]) {
        return key;
      }
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't find signing key in key ring.");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil)
