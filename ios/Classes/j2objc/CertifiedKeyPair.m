//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/CertifiedKeyPair.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "CertOrEncCert.h"
#include "CertifiedKeyPair.h"
#include "DERSequence.h"
#include "DERTaggedObject.h"
#include "EncryptedValue.h"
#include "J2ObjC_source.h"
#include "PKIPublicationInfo.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleAsn1CmpCertifiedKeyPair () {
 @public
  LibOrgBouncycastleAsn1CmpCertOrEncCert *certOrEncCert_;
  LibOrgBouncycastleAsn1CrmfEncryptedValue *privateKey_;
  LibOrgBouncycastleAsn1CrmfPKIPublicationInfo *publicationInfo_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, certOrEncCert_, LibOrgBouncycastleAsn1CmpCertOrEncCert *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, privateKey_, LibOrgBouncycastleAsn1CrmfEncryptedValue *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, publicationInfo_, LibOrgBouncycastleAsn1CrmfPKIPublicationInfo *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CmpCertifiedKeyPair *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1CmpCertifiedKeyPair *new_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1CmpCertifiedKeyPair *create_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1CmpCertifiedKeyPair

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

+ (LibOrgBouncycastleAsn1CmpCertifiedKeyPair *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1CmpCertifiedKeyPair_getInstanceWithId_(o);
}

- (instancetype)initWithLibOrgBouncycastleAsn1CmpCertOrEncCert:(LibOrgBouncycastleAsn1CmpCertOrEncCert *)certOrEncCert {
  LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_(self, certOrEncCert);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1CmpCertOrEncCert:(LibOrgBouncycastleAsn1CmpCertOrEncCert *)certOrEncCert
                  withLibOrgBouncycastleAsn1CrmfEncryptedValue:(LibOrgBouncycastleAsn1CrmfEncryptedValue *)privateKey
              withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo:(LibOrgBouncycastleAsn1CrmfPKIPublicationInfo *)publicationInfo {
  LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_withLibOrgBouncycastleAsn1CrmfEncryptedValue_withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo_(self, certOrEncCert, privateKey, publicationInfo);
  return self;
}

- (LibOrgBouncycastleAsn1CmpCertOrEncCert *)getCertOrEncCert {
  return certOrEncCert_;
}

- (LibOrgBouncycastleAsn1CrmfEncryptedValue *)getPrivateKey {
  return privateKey_;
}

- (LibOrgBouncycastleAsn1CrmfPKIPublicationInfo *)getPublicationInfo {
  return publicationInfo_;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:certOrEncCert_];
  if (privateKey_ != nil) {
    [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(true, 0, privateKey_)];
  }
  if (publicationInfo_ != nil) {
    [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(true, 1, publicationInfo_)];
  }
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CmpCertifiedKeyPair;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CmpCertOrEncCert;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CrmfEncryptedValue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CrmfPKIPublicationInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleAsn1CmpCertOrEncCert:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1CmpCertOrEncCert:withLibOrgBouncycastleAsn1CrmfEncryptedValue:withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo:);
  methods[4].selector = @selector(getCertOrEncCert);
  methods[5].selector = @selector(getPrivateKey);
  methods[6].selector = @selector(getPublicationInfo);
  methods[7].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certOrEncCert_", "LLibOrgBouncycastleAsn1CmpCertOrEncCert;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "LLibOrgBouncycastleAsn1CrmfEncryptedValue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicationInfo_", "LLibOrgBouncycastleAsn1CrmfPKIPublicationInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1ASN1Sequence;", "getInstance", "LNSObject;", "LLibOrgBouncycastleAsn1CmpCertOrEncCert;", "LLibOrgBouncycastleAsn1CmpCertOrEncCert;LLibOrgBouncycastleAsn1CrmfEncryptedValue;LLibOrgBouncycastleAsn1CrmfPKIPublicationInfo;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1CmpCertifiedKeyPair = { "CertifiedKeyPair", "lib.org.bouncycastle.asn1.cmp", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1CmpCertifiedKeyPair;
}

@end

void LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CmpCertifiedKeyPair *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->certOrEncCert_ = LibOrgBouncycastleAsn1CmpCertOrEncCert_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0]);
  if ([seq size] >= 2) {
    if ([seq size] == 2) {
      LibOrgBouncycastleAsn1ASN1TaggedObject *tagged = LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithId_([seq getObjectAtWithInt:1]);
      if ([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(tagged)) getTagNo] == 0) {
        self->privateKey_ = LibOrgBouncycastleAsn1CrmfEncryptedValue_getInstanceWithId_([tagged getObject]);
      }
      else {
        self->publicationInfo_ = LibOrgBouncycastleAsn1CrmfPKIPublicationInfo_getInstanceWithId_([tagged getObject]);
      }
    }
    else {
      self->privateKey_ = LibOrgBouncycastleAsn1CrmfEncryptedValue_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithId_([seq getObjectAtWithInt:1]))) getObject]);
      self->publicationInfo_ = LibOrgBouncycastleAsn1CrmfPKIPublicationInfo_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithId_([seq getObjectAtWithInt:2]))) getObject]);
    }
  }
}

LibOrgBouncycastleAsn1CmpCertifiedKeyPair *new_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1CmpCertifiedKeyPair *create_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1CmpCertifiedKeyPair *LibOrgBouncycastleAsn1CmpCertifiedKeyPair_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initialize();
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1CmpCertifiedKeyPair class]]) {
    return (LibOrgBouncycastleAsn1CmpCertifiedKeyPair *) o;
  }
  if (o != nil) {
    return new_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(o));
  }
  return nil;
}

void LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_(LibOrgBouncycastleAsn1CmpCertifiedKeyPair *self, LibOrgBouncycastleAsn1CmpCertOrEncCert *certOrEncCert) {
  LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_withLibOrgBouncycastleAsn1CrmfEncryptedValue_withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo_(self, certOrEncCert, nil, nil);
}

LibOrgBouncycastleAsn1CmpCertifiedKeyPair *new_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_(LibOrgBouncycastleAsn1CmpCertOrEncCert *certOrEncCert) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_, certOrEncCert)
}

LibOrgBouncycastleAsn1CmpCertifiedKeyPair *create_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_(LibOrgBouncycastleAsn1CmpCertOrEncCert *certOrEncCert) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_, certOrEncCert)
}

void LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_withLibOrgBouncycastleAsn1CrmfEncryptedValue_withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo_(LibOrgBouncycastleAsn1CmpCertifiedKeyPair *self, LibOrgBouncycastleAsn1CmpCertOrEncCert *certOrEncCert, LibOrgBouncycastleAsn1CrmfEncryptedValue *privateKey, LibOrgBouncycastleAsn1CrmfPKIPublicationInfo *publicationInfo) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  if (certOrEncCert == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certOrEncCert' cannot be null");
  }
  self->certOrEncCert_ = certOrEncCert;
  self->privateKey_ = privateKey;
  self->publicationInfo_ = publicationInfo;
}

LibOrgBouncycastleAsn1CmpCertifiedKeyPair *new_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_withLibOrgBouncycastleAsn1CrmfEncryptedValue_withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo_(LibOrgBouncycastleAsn1CmpCertOrEncCert *certOrEncCert, LibOrgBouncycastleAsn1CrmfEncryptedValue *privateKey, LibOrgBouncycastleAsn1CrmfPKIPublicationInfo *publicationInfo) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_withLibOrgBouncycastleAsn1CrmfEncryptedValue_withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo_, certOrEncCert, privateKey, publicationInfo)
}

LibOrgBouncycastleAsn1CmpCertifiedKeyPair *create_LibOrgBouncycastleAsn1CmpCertifiedKeyPair_initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_withLibOrgBouncycastleAsn1CrmfEncryptedValue_withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo_(LibOrgBouncycastleAsn1CmpCertOrEncCert *certOrEncCert, LibOrgBouncycastleAsn1CrmfEncryptedValue *privateKey, LibOrgBouncycastleAsn1CrmfPKIPublicationInfo *publicationInfo) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmpCertifiedKeyPair, initWithLibOrgBouncycastleAsn1CmpCertOrEncCert_withLibOrgBouncycastleAsn1CrmfEncryptedValue_withLibOrgBouncycastleAsn1CrmfPKIPublicationInfo_, certOrEncCert, privateKey, publicationInfo)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1CmpCertifiedKeyPair)
