//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/elgamal/ElGamalUtil.java
//

#include "AsymmetricKeyParameter.h"
#include "ElGamalParameterSpec.h"
#include "ElGamalParameters.h"
#include "ElGamalPrivateKey.h"
#include "ElGamalPrivateKeyParameters.h"
#include "ElGamalPublicKey.h"
#include "ElGamalPublicKeyParameters.h"
#include "ElGamalUtil.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "javax/crypto/interfaces/DHPrivateKey.h"
#include "javax/crypto/interfaces/DHPublicKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"

@implementation LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(key);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(generatePrivateKeyParameterWithJavaSecurityPrivateKey:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "generatePrivateKeyParameter", "LJavaSecurityPrivateKey;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil = { "ElGamalUtil", "lib.org.bouncycastle.jcajce.provider.asymmetric.elgamal", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_init(LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil, init)
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_initialize();
  if ([LibOrgBouncycastleJceInterfacesElGamalPublicKey_class_() isInstance:key]) {
    id<LibOrgBouncycastleJceInterfacesElGamalPublicKey> k = (id<LibOrgBouncycastleJceInterfacesElGamalPublicKey>) cast_check(key, LibOrgBouncycastleJceInterfacesElGamalPublicKey_class_());
    return new_LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsElGamalParameters_([((id<LibOrgBouncycastleJceInterfacesElGamalPublicKey>) nil_chk(k)) getY], new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk([k getParameters])) getP], [((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk([k getParameters])) getG]));
  }
  else if ([JavaxCryptoInterfacesDHPublicKey_class_() isInstance:key]) {
    id<JavaxCryptoInterfacesDHPublicKey> k = (id<JavaxCryptoInterfacesDHPublicKey>) cast_check(key, JavaxCryptoInterfacesDHPublicKey_class_());
    return new_LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsElGamalParameters_([((id<JavaxCryptoInterfacesDHPublicKey>) nil_chk(k)) getY], new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaxCryptoSpecDHParameterSpec *) nil_chk([k getParams])) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([k getParams])) getG]));
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't identify public key for El Gamal.");
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil_initialize();
  if ([LibOrgBouncycastleJceInterfacesElGamalPrivateKey_class_() isInstance:key]) {
    id<LibOrgBouncycastleJceInterfacesElGamalPrivateKey> k = (id<LibOrgBouncycastleJceInterfacesElGamalPrivateKey>) cast_check(key, LibOrgBouncycastleJceInterfacesElGamalPrivateKey_class_());
    return new_LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsElGamalParameters_([((id<LibOrgBouncycastleJceInterfacesElGamalPrivateKey>) nil_chk(k)) getX], new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk([k getParameters])) getP], [((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk([k getParameters])) getG]));
  }
  else if ([JavaxCryptoInterfacesDHPrivateKey_class_() isInstance:key]) {
    id<JavaxCryptoInterfacesDHPrivateKey> k = (id<JavaxCryptoInterfacesDHPrivateKey>) cast_check(key, JavaxCryptoInterfacesDHPrivateKey_class_());
    return new_LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsElGamalParameters_([((id<JavaxCryptoInterfacesDHPrivateKey>) nil_chk(k)) getX], new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaxCryptoSpecDHParameterSpec *) nil_chk([k getParams])) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([k getParams])) getG]));
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't identify private key for El Gamal.");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricElgamalElGamalUtil)
