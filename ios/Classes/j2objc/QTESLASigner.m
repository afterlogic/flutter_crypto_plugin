//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/QTESLASigner.java
//

#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "PqcCryptoQTESLA.h"
#include "QTESLAPrivateKeyParameters.h"
#include "QTESLAPublicKeyParameters.h"
#include "QTESLASecurityCategory.h"
#include "QTESLASigner.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoQteslaQTESLASigner () {
 @public
  LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *publicKey_;
  LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *privateKey_;
  JavaSecuritySecureRandom *secureRandom_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoQteslaQTESLASigner, publicKey_, LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoQteslaQTESLASigner, privateKey_, LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoQteslaQTESLASigner, secureRandom_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastlePqcCryptoQteslaQTESLASigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoQteslaQTESLASigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if (forSigning) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      self->secureRandom_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithRandom *) param))) getRandom];
      privateKey_ = (LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithRandom *) param))) getParameters], [LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters class]);
    }
    else {
      self->secureRandom_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      privateKey_ = (LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters class]);
    }
    publicKey_ = nil;
    LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_validateWithInt_([((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecurityCategory]);
  }
  else {
    privateKey_ = nil;
    publicKey_ = (LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters class]);
    LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_validateWithInt_([((LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) nil_chk(publicKey_)) getSecurityCategory]);
  }
}

- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  IOSByteArray *sig = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getSignatureSizeWithInt_([((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecurityCategory])];
  switch ([((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecurityCategory]) {
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_I:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(sig, message, 0, ((IOSByteArray *) nil_chk(message))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecret], secureRandom_);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SIZE:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIISizeWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(sig, message, 0, ((IOSByteArray *) nil_chk(message))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecret], secureRandom_);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SPEED:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIISpeedWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(sig, message, 0, ((IOSByteArray *) nil_chk(message))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecret], secureRandom_);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_I:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIPWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(sig, message, 0, ((IOSByteArray *) nil_chk(message))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecret], secureRandom_);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_III:
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIIPWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(sig, message, 0, ((IOSByteArray *) nil_chk(message))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecret], secureRandom_);
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown security category: ", [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) nil_chk(privateKey_)) getSecurityCategory]));
  }
  return sig;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  jint status;
  switch ([((LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) nil_chk(publicKey_)) getSecurityCategory]) {
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_I:
    status = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, 0, ((IOSByteArray *) nil_chk(signature))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) nil_chk(publicKey_)) getPublicData]);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SIZE:
    status = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIIISizeWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, 0, ((IOSByteArray *) nil_chk(signature))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) nil_chk(publicKey_)) getPublicData]);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SPEED:
    status = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIIISpeedWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, 0, ((IOSByteArray *) nil_chk(signature))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) nil_chk(publicKey_)) getPublicData]);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_I:
    status = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingPIWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, 0, ((IOSByteArray *) nil_chk(signature))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) nil_chk(publicKey_)) getPublicData]);
    break;
    case LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_III:
    status = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingPIIIWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, 0, ((IOSByteArray *) nil_chk(signature))->size_, [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) nil_chk(publicKey_)) getPublicData]);
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown security category: ", [((LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) nil_chk(publicKey_)) getSecurityCategory]));
  }
  return 0 == status;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publicKey_", "LLibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "LLibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "secureRandom_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoQteslaQTESLASigner = { "QTESLASigner", "lib.org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoQteslaQTESLASigner;
}

@end

void LibOrgBouncycastlePqcCryptoQteslaQTESLASigner_init(LibOrgBouncycastlePqcCryptoQteslaQTESLASigner *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoQteslaQTESLASigner *new_LibOrgBouncycastlePqcCryptoQteslaQTESLASigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoQteslaQTESLASigner, init)
}

LibOrgBouncycastlePqcCryptoQteslaQTESLASigner *create_LibOrgBouncycastlePqcCryptoQteslaQTESLASigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoQteslaQTESLASigner, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoQteslaQTESLASigner)
