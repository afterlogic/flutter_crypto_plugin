//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/MQVPrivateParameters.java
//

#include "ECDomainParameters.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "J2ObjC_source.h"
#include "MQVPrivateParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoParamsMQVPrivateParameters () {
 @public
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey_;
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey_;
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemeralPublicKey_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsMQVPrivateParameters, staticPrivateKey_, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsMQVPrivateParameters, ephemeralPrivateKey_, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsMQVPrivateParameters, ephemeralPublicKey_, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)

@implementation LibOrgBouncycastleCryptoParamsMQVPrivateParameters

- (instancetype)initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)staticPrivateKey
                    withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)ephemeralPrivateKey {
  LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(self, staticPrivateKey, ephemeralPrivateKey);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)staticPrivateKey
                    withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)ephemeralPrivateKey
                     withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)ephemeralPublicKey {
  LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(self, staticPrivateKey, ephemeralPrivateKey, ephemeralPublicKey);
  return self;
}

- (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)getStaticPrivateKey {
  return staticPrivateKey_;
}

- (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)getEphemeralPrivateKey {
  return ephemeralPrivateKey_;
}

- (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)getEphemeralPublicKey {
  return ephemeralPublicKey_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:);
  methods[2].selector = @selector(getStaticPrivateKey);
  methods[3].selector = @selector(getEphemeralPrivateKey);
  methods[4].selector = @selector(getEphemeralPublicKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "staticPrivateKey_", "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ephemeralPrivateKey_", "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ephemeralPublicKey_", "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsMQVPrivateParameters = { "MQVPrivateParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsMQVPrivateParameters;
}

@end

void LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsMQVPrivateParameters *self, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey) {
  LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(self, staticPrivateKey, ephemeralPrivateKey, nil);
}

LibOrgBouncycastleCryptoParamsMQVPrivateParameters *new_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsMQVPrivateParameters, initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_, staticPrivateKey, ephemeralPrivateKey)
}

LibOrgBouncycastleCryptoParamsMQVPrivateParameters *create_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsMQVPrivateParameters, initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_, staticPrivateKey, ephemeralPrivateKey)
}

void LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoParamsMQVPrivateParameters *self, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemeralPublicKey) {
  NSObject_init(self);
  if (staticPrivateKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"staticPrivateKey cannot be null");
  }
  if (ephemeralPrivateKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"ephemeralPrivateKey cannot be null");
  }
  LibOrgBouncycastleCryptoParamsECDomainParameters *parameters = [staticPrivateKey getParameters];
  if (![((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(parameters)) isEqual:[ephemeralPrivateKey getParameters]]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Static and ephemeral private keys have different domain parameters");
  }
  if (ephemeralPublicKey == nil) {
    ephemeralPublicKey = new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleMathEcECPoint *) nil_chk([parameters getG])) multiplyWithJavaMathBigInteger:[ephemeralPrivateKey getD]], parameters);
  }
  else if (![parameters isEqual:[ephemeralPublicKey getParameters]]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Ephemeral public key has different domain parameters");
  }
  self->staticPrivateKey_ = staticPrivateKey;
  self->ephemeralPrivateKey_ = ephemeralPrivateKey;
  self->ephemeralPublicKey_ = ephemeralPublicKey;
}

LibOrgBouncycastleCryptoParamsMQVPrivateParameters *new_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemeralPublicKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsMQVPrivateParameters, initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_, staticPrivateKey, ephemeralPrivateKey, ephemeralPublicKey)
}

LibOrgBouncycastleCryptoParamsMQVPrivateParameters *create_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemeralPublicKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsMQVPrivateParameters, initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_, staticPrivateKey, ephemeralPrivateKey, ephemeralPublicKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsMQVPrivateParameters)
