//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsDSSSigner.java
//

#ifndef TlsDSSSigner_H
#define TlsDSSSigner_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsDSASigner.h"

@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@protocol LibOrgBouncycastleCryptoDSA;

@interface LibOrgBouncycastleCryptoTlsTlsDSSSigner : LibOrgBouncycastleCryptoTlsTlsDSASigner

#pragma mark Public

- (instancetype __nonnull)init;

- (jboolean)isValidPublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoDSA>)createDSAImplWithShort:(jshort)hashAlgorithm;

- (jshort)getSignatureAlgorithm;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsDSSSigner)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDSSSigner_init(LibOrgBouncycastleCryptoTlsTlsDSSSigner *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDSSSigner *new_LibOrgBouncycastleCryptoTlsTlsDSSSigner_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDSSSigner *create_LibOrgBouncycastleCryptoTlsTlsDSSSigner_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsDSSSigner)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsDSSSigner_H
