//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/OpenPgpOperatorPGPUtil.java
//

#include "HashAlgorithmTags.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OpenPgpOperatorPGPUtil.h"
#include "PGPDigestCalculator.h"
#include "PGPDigestCalculatorProvider.h"
#include "PGPException.h"
#include "S2K.h"
#include "Strings.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/System.h"

@implementation LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)digestCalculator
                                                                                        withInt:(jint)algorithm
                                                                  withLibOrgBouncycastleBcpgS2K:(LibOrgBouncycastleBcpgS2K *)s2k
                                                                                  withCharArray:(IOSCharArray *)passPhrase {
  return LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(digestCalculator, algorithm, s2k, passPhrase);
}

+ (IOSByteArray *)makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>)digCalcProvider
                                                                                                withInt:(jint)algorithm
                                                                          withLibOrgBouncycastleBcpgS2K:(LibOrgBouncycastleBcpgS2K *)s2k
                                                                                          withCharArray:(IOSCharArray *)passPhrase {
  return LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(digCalcProvider, algorithm, s2k, passPhrase);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 3, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withInt:withLibOrgBouncycastleBcpgS2K:withCharArray:);
  methods[2].selector = @selector(makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider:withInt:withLibOrgBouncycastleBcpgS2K:withCharArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "makeKeyFromPassPhrase", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;ILLibOrgBouncycastleBcpgS2K;[C", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider;ILLibOrgBouncycastleBcpgS2K;[C" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil = { "OpenPgpOperatorPGPUtil", "lib.org.bouncycastle.openpgp.operator", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil;
}

@end

void LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_init(LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil *new_LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil, init)
}

LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil *create_LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil, init)
}

IOSByteArray *LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalculator, jint algorithm, LibOrgBouncycastleBcpgS2K *s2k, IOSCharArray *passPhrase) {
  LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_initialize();
  NSString *algName = nil;
  jint keySize = 0;
  switch (algorithm) {
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_TRIPLE_DES:
    keySize = 192;
    algName = @"DES_EDE";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_IDEA:
    keySize = 128;
    algName = @"IDEA";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAST5:
    keySize = 128;
    algName = @"CAST5";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_BLOWFISH:
    keySize = 128;
    algName = @"Blowfish";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_SAFER:
    keySize = 128;
    algName = @"SAFER";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_DES:
    keySize = 64;
    algName = @"DES";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128:
    keySize = 128;
    algName = @"AES";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_192:
    keySize = 192;
    algName = @"AES";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256:
    keySize = 256;
    algName = @"AES";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_TWOFISH:
    keySize = 256;
    algName = @"Twofish";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_128:
    keySize = 128;
    algName = @"Camellia";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_192:
    keySize = 192;
    algName = @"Camellia";
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_256:
    keySize = 256;
    algName = @"Camellia";
    break;
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown symmetric algorithm: ", algorithm));
  }
  IOSByteArray *pBytes = LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_(passPhrase);
  IOSByteArray *keyBytes = [IOSByteArray newArrayWithLength:(keySize + 7) / 8];
  jint generatedBytes = 0;
  jint loopCount = 0;
  if (s2k != nil) {
    if ([s2k getHashAlgorithm] != [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(digestCalculator)) getAlgorithm]) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"s2k/digestCalculator mismatch");
    }
  }
  else {
    if ([((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(digestCalculator)) getAlgorithm] != LibOrgBouncycastleBcpgHashAlgorithmTags_MD5) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"digestCalculator not for MD5");
    }
  }
  JavaIoOutputStream *dOut = [digestCalculator getOutputStream];
  @try {
    while (generatedBytes < keyBytes->size_) {
      if (s2k != nil) {
        for (jint i = 0; i != loopCount; i++) {
          [((JavaIoOutputStream *) nil_chk(dOut)) writeWithInt:0];
        }
        IOSByteArray *iv = [s2k getIV];
        {
          jlong count;
          switch ([s2k getType]) {
            case LibOrgBouncycastleBcpgS2K_SIMPLE:
            [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:pBytes];
            break;
            case LibOrgBouncycastleBcpgS2K_SALTED:
            [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:iv];
            [dOut writeWithByteArray:pBytes];
            break;
            case LibOrgBouncycastleBcpgS2K_SALTED_AND_ITERATED:
            count = [s2k getIterationCount];
            [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:iv];
            [dOut writeWithByteArray:pBytes];
            count -= ((IOSByteArray *) nil_chk(iv))->size_ + ((IOSByteArray *) nil_chk(pBytes))->size_;
            while (count > 0) {
              if (count < iv->size_) {
                [dOut writeWithByteArray:iv withInt:0 withInt:(jint) count];
                break;
              }
              else {
                [dOut writeWithByteArray:iv];
                count -= iv->size_;
              }
              if (count < pBytes->size_) {
                [dOut writeWithByteArray:pBytes withInt:0 withInt:(jint) count];
                count = 0;
              }
              else {
                [dOut writeWithByteArray:pBytes];
                count -= pBytes->size_;
              }
            }
            break;
            default:
            @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown S2K type: ", [s2k getType]));
          }
        }
      }
      else {
        for (jint i = 0; i != loopCount; i++) {
          [((JavaIoOutputStream *) nil_chk(dOut)) writeWithInt:(jbyte) 0];
        }
        [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:pBytes];
      }
      [((JavaIoOutputStream *) nil_chk(dOut)) close];
      IOSByteArray *dig = [digestCalculator getDigest];
      if (((IOSByteArray *) nil_chk(dig))->size_ > (keyBytes->size_ - generatedBytes)) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dig, 0, keyBytes, generatedBytes, keyBytes->size_ - generatedBytes);
      }
      else {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dig, 0, keyBytes, generatedBytes, dig->size_);
      }
      generatedBytes += dig->size_;
      loopCount++;
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"exception calculating digest: ", [e getMessage]), e);
  }
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(pBytes))->size_; i++) {
    *IOSByteArray_GetRef(pBytes, i) = 0;
  }
  return keyBytes;
}

IOSByteArray *LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider> digCalcProvider, jint algorithm, LibOrgBouncycastleBcpgS2K *s2k, IOSCharArray *passPhrase) {
  LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_initialize();
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalculator;
  if (s2k != nil) {
    digestCalculator = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>) nil_chk(digCalcProvider)) getWithInt:[s2k getHashAlgorithm]];
  }
  else {
    digestCalculator = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>) nil_chk(digCalcProvider)) getWithInt:LibOrgBouncycastleBcpgHashAlgorithmTags_MD5];
  }
  return LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(digestCalculator, algorithm, s2k, passPhrase);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil)
