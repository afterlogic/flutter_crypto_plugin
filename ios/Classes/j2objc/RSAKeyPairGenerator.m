//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/RSAKeyPairGenerator.java
//

#include "ArmoredOutputStream.h"
#include "BouncyCastleProvider.h"
#include "HashAlgorithmTags.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaPGPContentSignerBuilder.h"
#include "JcaPGPDigestCalculatorProviderBuilder.h"
#include "JcaPGPKeyPair.h"
#include "JcePBESecretKeyEncryptorBuilder.h"
#include "PBESecretKeyEncryptor.h"
#include "PGPDigestCalculator.h"
#include "PGPDigestCalculatorProvider.h"
#include "PGPKeyPair.h"
#include "PGPPublicKey.h"
#include "PGPSecretKey.h"
#include "PGPSignature.h"
#include "PublicKeyAlgorithmTags.h"
#include "RSAKeyPairGenerator.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/FileOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/Security.h"
#include "java/util/Date.h"

@interface LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator ()

+ (void)exportKeyPairWithJavaIoOutputStream:(JavaIoOutputStream *)secretOut
                     withJavaIoOutputStream:(JavaIoOutputStream *)publicOut
                    withJavaSecurityKeyPair:(JavaSecurityKeyPair *)pair
                               withNSString:(NSString *)identity
                              withCharArray:(IOSCharArray *)passPhrase
                                withBoolean:(jboolean)armor;

@end

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_exportKeyPairWithJavaIoOutputStream_withJavaIoOutputStream_withJavaSecurityKeyPair_withNSString_withCharArray_withBoolean_(JavaIoOutputStream *secretOut, JavaIoOutputStream *publicOut, JavaSecurityKeyPair *pair, NSString *identity, IOSCharArray *passPhrase, jboolean armor);

@implementation LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)exportKeyPairWithJavaIoOutputStream:(JavaIoOutputStream *)secretOut
                     withJavaIoOutputStream:(JavaIoOutputStream *)publicOut
                    withJavaSecurityKeyPair:(JavaSecurityKeyPair *)pair
                               withNSString:(NSString *)identity
                              withCharArray:(IOSCharArray *)passPhrase
                                withBoolean:(jboolean)armor {
  LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_exportKeyPairWithJavaIoOutputStream_withJavaIoOutputStream_withJavaSecurityKeyPair_withNSString_withCharArray_withBoolean_(secretOut, publicOut, pair, identity, passPhrase, armor);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(exportKeyPairWithJavaIoOutputStream:withJavaIoOutputStream:withJavaSecurityKeyPair:withNSString:withCharArray:withBoolean:);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "exportKeyPair", "LJavaIoOutputStream;LJavaIoOutputStream;LJavaSecurityKeyPair;LNSString;[CZ", "LJavaIoIOException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;LJavaSecuritySignatureException;LLibOrgBouncycastleOpenpgpPGPException;", "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator = { "RSAKeyPairGenerator", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator;
}

@end

void LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_init(LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator *new_LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator, init)
}

LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator *create_LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator, init)
}

void LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_exportKeyPairWithJavaIoOutputStream_withJavaIoOutputStream_withJavaSecurityKeyPair_withNSString_withCharArray_withBoolean_(JavaIoOutputStream *secretOut, JavaIoOutputStream *publicOut, JavaSecurityKeyPair *pair, NSString *identity, IOSCharArray *passPhrase, jboolean armor) {
  LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_initialize();
  if (armor) {
    secretOut = new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(secretOut);
  }
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> sha1Calc = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPDigestCalculatorProviderBuilder_init() build])) getWithInt:LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1];
  LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair = new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyPair_initWithInt_withJavaSecurityKeyPair_withJavaUtilDate_(LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL, pair, new_JavaUtilDate_init());
  LibOrgBouncycastleOpenpgpPGPSecretKey *secretKey = new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSignature_DEFAULT_CERTIFICATION, keyPair, identity, sha1Calc, nil, nil, new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentSignerBuilder_initWithInt_withInt_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([keyPair getPublicKey])) getAlgorithm], LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1), [((LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAST5, sha1Calc) setProviderWithNSString:@"BC"])) buildWithCharArray:passPhrase]);
  [secretKey encodeWithJavaIoOutputStream:secretOut];
  [((JavaIoOutputStream *) nil_chk(secretOut)) close];
  if (armor) {
    publicOut = new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(publicOut);
  }
  LibOrgBouncycastleOpenpgpPGPPublicKey *key = [secretKey getPublicKey];
  [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(key)) encodeWithJavaIoOutputStream:publicOut];
  [((JavaIoOutputStream *) nil_chk(publicOut)) close];
}

void LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_initialize();
  JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_LibOrgBouncycastleJceProviderBouncyCastleProvider_init());
  JavaSecurityKeyPairGenerator *kpg = JavaSecurityKeyPairGenerator_getInstanceWithNSString_withNSString_(@"RSA", @"BC");
  [((JavaSecurityKeyPairGenerator *) nil_chk(kpg)) initialize__WithInt:1024];
  JavaSecurityKeyPair *kp = [kpg generateKeyPair];
  if (((IOSObjectArray *) nil_chk(args))->size_ < 2) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"CryptoRSAKeyPairGenerator [-a] identity passPhrase"];
    JavaLangSystem_exitWithInt_(0);
  }
  if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-a"]) {
    if (args->size_ < 3) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"CryptoRSAKeyPairGenerator [-a] identity passPhrase"];
      JavaLangSystem_exitWithInt_(0);
    }
    JavaIoFileOutputStream *out1 = new_JavaIoFileOutputStream_initWithNSString_(@"secret.asc");
    JavaIoFileOutputStream *out2 = new_JavaIoFileOutputStream_initWithNSString_(@"pub.asc");
    LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_exportKeyPairWithJavaIoOutputStream_withJavaIoOutputStream_withJavaSecurityKeyPair_withNSString_withCharArray_withBoolean_(out1, out2, kp, IOSObjectArray_Get(args, 1), [((NSString *) nil_chk(IOSObjectArray_Get(args, 2))) java_toCharArray], true);
  }
  else {
    JavaIoFileOutputStream *out1 = new_JavaIoFileOutputStream_initWithNSString_(@"secret.bpg");
    JavaIoFileOutputStream *out2 = new_JavaIoFileOutputStream_initWithNSString_(@"pub.bpg");
    LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator_exportKeyPairWithJavaIoOutputStream_withJavaIoOutputStream_withJavaSecurityKeyPair_withNSString_withCharArray_withBoolean_(out1, out2, kp, IOSObjectArray_Get(args, 0), [((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) java_toCharArray], false);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesRSAKeyPairGenerator)
