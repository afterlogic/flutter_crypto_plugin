//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/tsp/EvidenceRecord.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Integer.h"
#include "ASN1Object.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "AlgorithmIdentifier.h"
#include "ArchiveTimeStamp.h"
#include "ArchiveTimeStampChain.h"
#include "ArchiveTimeStampSequence.h"
#include "BigIntegers.h"
#include "CryptoInfos.h"
#include "DERSequence.h"
#include "EncryptionInfo.h"
#include "EvidenceRecord.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Enumeration.h"

@interface LibOrgBouncycastleAsn1TspEvidenceRecord () {
 @public
  LibOrgBouncycastleAsn1ASN1Integer *version__;
  LibOrgBouncycastleAsn1ASN1Sequence *digestAlgorithms_;
  LibOrgBouncycastleAsn1TspCryptoInfos *cryptoInfos_;
  LibOrgBouncycastleAsn1TspEncryptionInfo *encryptionInfo_;
  LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *archiveTimeStampSequence_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1TspEvidenceRecord:(LibOrgBouncycastleAsn1TspEvidenceRecord *)evidenceRecord
          withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence:(LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *)replacementSequence
                  withLibOrgBouncycastleAsn1TspArchiveTimeStamp:(LibOrgBouncycastleAsn1TspArchiveTimeStamp *)newChainTimeStamp;

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)sequence;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1TspEvidenceRecord, version__, LibOrgBouncycastleAsn1ASN1Integer *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1TspEvidenceRecord, digestAlgorithms_, LibOrgBouncycastleAsn1ASN1Sequence *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1TspEvidenceRecord, cryptoInfos_, LibOrgBouncycastleAsn1TspCryptoInfos *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1TspEvidenceRecord, encryptionInfo_, LibOrgBouncycastleAsn1TspEncryptionInfo *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1TspEvidenceRecord, archiveTimeStampSequence_, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *)

inline LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1TspEvidenceRecord_get_OID(void);
static LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1TspEvidenceRecord_OID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1TspEvidenceRecord, OID, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(LibOrgBouncycastleAsn1TspEvidenceRecord *self, LibOrgBouncycastleAsn1TspEvidenceRecord *evidenceRecord, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *replacementSequence, LibOrgBouncycastleAsn1TspArchiveTimeStamp *newChainTimeStamp);

__attribute__((unused)) static LibOrgBouncycastleAsn1TspEvidenceRecord *new_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(LibOrgBouncycastleAsn1TspEvidenceRecord *evidenceRecord, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *replacementSequence, LibOrgBouncycastleAsn1TspArchiveTimeStamp *newChainTimeStamp) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1TspEvidenceRecord *create_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(LibOrgBouncycastleAsn1TspEvidenceRecord *evidenceRecord, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *replacementSequence, LibOrgBouncycastleAsn1TspArchiveTimeStamp *newChainTimeStamp);

__attribute__((unused)) static void LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1TspEvidenceRecord *self, LibOrgBouncycastleAsn1ASN1Sequence *sequence);

__attribute__((unused)) static LibOrgBouncycastleAsn1TspEvidenceRecord *new_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *sequence) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1TspEvidenceRecord *create_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *sequence);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleAsn1TspEvidenceRecord)

@implementation LibOrgBouncycastleAsn1TspEvidenceRecord

+ (LibOrgBouncycastleAsn1TspEvidenceRecord *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1TspEvidenceRecord_getInstanceWithId_(obj);
}

- (instancetype)initWithLibOrgBouncycastleAsn1TspEvidenceRecord:(LibOrgBouncycastleAsn1TspEvidenceRecord *)evidenceRecord
          withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence:(LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *)replacementSequence
                  withLibOrgBouncycastleAsn1TspArchiveTimeStamp:(LibOrgBouncycastleAsn1TspArchiveTimeStamp *)newChainTimeStamp {
  LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(self, evidenceRecord, replacementSequence, newChainTimeStamp);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifierArray:(IOSObjectArray *)digestAlgorithms
                                  withLibOrgBouncycastleAsn1TspCryptoInfos:(LibOrgBouncycastleAsn1TspCryptoInfos *)cryptoInfos
                               withLibOrgBouncycastleAsn1TspEncryptionInfo:(LibOrgBouncycastleAsn1TspEncryptionInfo *)encryptionInfo
                     withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence:(LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *)archiveTimeStampSequence {
  LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifierArray_withLibOrgBouncycastleAsn1TspCryptoInfos_withLibOrgBouncycastleAsn1TspEncryptionInfo_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_(self, digestAlgorithms, cryptoInfos, encryptionInfo, archiveTimeStampSequence);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)sequence {
  LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, sequence);
  return self;
}

- (IOSObjectArray *)getDigestAlgorithms {
  IOSObjectArray *rv = [IOSObjectArray newArrayWithLength:[((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(digestAlgorithms_)) size] type:LibOrgBouncycastleAsn1X509AlgorithmIdentifier_class_()];
  for (jint i = 0; i != rv->size_; i++) {
    (void) IOSObjectArray_Set(rv, i, LibOrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(digestAlgorithms_)) getObjectAtWithInt:i]));
  }
  return rv;
}

- (LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *)getArchiveTimeStampSequence {
  return archiveTimeStampSequence_;
}

- (LibOrgBouncycastleAsn1TspEvidenceRecord *)addArchiveTimeStampWithLibOrgBouncycastleAsn1TspArchiveTimeStamp:(LibOrgBouncycastleAsn1TspArchiveTimeStamp *)ats
                                                                                                  withBoolean:(jboolean)newChain {
  if (newChain) {
    LibOrgBouncycastleAsn1TspArchiveTimeStampChain *chain = new_LibOrgBouncycastleAsn1TspArchiveTimeStampChain_initWithLibOrgBouncycastleAsn1TspArchiveTimeStamp_(ats);
    return new_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(self, [((LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *) nil_chk(archiveTimeStampSequence_)) appendWithLibOrgBouncycastleAsn1TspArchiveTimeStampChain:chain], ats);
  }
  else {
    IOSObjectArray *chains = [((LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *) nil_chk(archiveTimeStampSequence_)) getArchiveTimeStampChains];
    (void) IOSObjectArray_Set(chains, ((IOSObjectArray *) nil_chk(chains))->size_ - 1, [((LibOrgBouncycastleAsn1TspArchiveTimeStampChain *) nil_chk(IOSObjectArray_Get(chains, chains->size_ - 1))) appendWithLibOrgBouncycastleAsn1TspArchiveTimeStamp:ats]);
    return new_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(self, new_LibOrgBouncycastleAsn1TspArchiveTimeStampSequence_initWithLibOrgBouncycastleAsn1TspArchiveTimeStampChainArray_(chains), nil);
  }
}

- (NSString *)description {
  return (JreStrcat("$@C", @"EvidenceRecord: Oid(", LibOrgBouncycastleAsn1TspEvidenceRecord_OID, ')'));
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *vector = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [vector addWithLibOrgBouncycastleAsn1ASN1Encodable:version__];
  [vector addWithLibOrgBouncycastleAsn1ASN1Encodable:digestAlgorithms_];
  if (nil != cryptoInfos_) {
    [vector addWithLibOrgBouncycastleAsn1ASN1Encodable:cryptoInfos_];
  }
  if (nil != encryptionInfo_) {
    [vector addWithLibOrgBouncycastleAsn1ASN1Encodable:encryptionInfo_];
  }
  [vector addWithLibOrgBouncycastleAsn1ASN1Encodable:archiveTimeStampSequence_];
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(vector);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1TspEvidenceRecord;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1TspArchiveTimeStampSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1TspEvidenceRecord;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1TspEvidenceRecord:withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence:withLibOrgBouncycastleAsn1TspArchiveTimeStamp:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifierArray:withLibOrgBouncycastleAsn1TspCryptoInfos:withLibOrgBouncycastleAsn1TspEncryptionInfo:withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[4].selector = @selector(getDigestAlgorithms);
  methods[5].selector = @selector(getArchiveTimeStampSequence);
  methods[6].selector = @selector(addArchiveTimeStampWithLibOrgBouncycastleAsn1TspArchiveTimeStamp:withBoolean:);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "version__", "LLibOrgBouncycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x2, 9, -1, -1, -1 },
    { "digestAlgorithms_", "LLibOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cryptoInfos_", "LLibOrgBouncycastleAsn1TspCryptoInfos;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encryptionInfo_", "LLibOrgBouncycastleAsn1TspEncryptionInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "archiveTimeStampSequence_", "LLibOrgBouncycastleAsn1TspArchiveTimeStampSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LLibOrgBouncycastleAsn1TspEvidenceRecord;LLibOrgBouncycastleAsn1TspArchiveTimeStampSequence;LLibOrgBouncycastleAsn1TspArchiveTimeStamp;", "[LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;LLibOrgBouncycastleAsn1TspCryptoInfos;LLibOrgBouncycastleAsn1TspEncryptionInfo;LLibOrgBouncycastleAsn1TspArchiveTimeStampSequence;", "LLibOrgBouncycastleAsn1ASN1Sequence;", "addArchiveTimeStamp", "LLibOrgBouncycastleAsn1TspArchiveTimeStamp;Z", "toString", &LibOrgBouncycastleAsn1TspEvidenceRecord_OID, "version" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1TspEvidenceRecord = { "EvidenceRecord", "lib.org.bouncycastle.asn1.tsp", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1TspEvidenceRecord;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleAsn1TspEvidenceRecord class]) {
    LibOrgBouncycastleAsn1TspEvidenceRecord_OID = new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(@"1.3.6.1.5.5.11.0.2.1");
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleAsn1TspEvidenceRecord)
  }
}

@end

LibOrgBouncycastleAsn1TspEvidenceRecord *LibOrgBouncycastleAsn1TspEvidenceRecord_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1TspEvidenceRecord_initialize();
  if ([obj isKindOfClass:[LibOrgBouncycastleAsn1TspEvidenceRecord class]]) {
    return (LibOrgBouncycastleAsn1TspEvidenceRecord *) obj;
  }
  else if (obj != nil) {
    return new_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  return nil;
}

void LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(LibOrgBouncycastleAsn1TspEvidenceRecord *self, LibOrgBouncycastleAsn1TspEvidenceRecord *evidenceRecord, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *replacementSequence, LibOrgBouncycastleAsn1TspArchiveTimeStamp *newChainTimeStamp) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->version__ = new_LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(1);
  self->version__ = ((LibOrgBouncycastleAsn1TspEvidenceRecord *) nil_chk(evidenceRecord))->version__;
  if (newChainTimeStamp != nil) {
    LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId = [newChainTimeStamp getDigestAlgorithmIdentifier];
    LibOrgBouncycastleAsn1ASN1EncodableVector *vector = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
    id<JavaUtilEnumeration> enumeration = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(evidenceRecord->digestAlgorithms_)) getObjects];
    jboolean found = false;
    while ([((id<JavaUtilEnumeration>) nil_chk(enumeration)) hasMoreElements]) {
      LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier = LibOrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([enumeration nextElement]);
      [vector addWithLibOrgBouncycastleAsn1ASN1Encodable:algorithmIdentifier];
      if ([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algorithmIdentifier)) isEqual:algId]) {
        found = true;
        break;
      }
    }
    if (!found) {
      [vector addWithLibOrgBouncycastleAsn1ASN1Encodable:algId];
      self->digestAlgorithms_ = new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(vector);
    }
    else {
      self->digestAlgorithms_ = evidenceRecord->digestAlgorithms_;
    }
  }
  else {
    self->digestAlgorithms_ = evidenceRecord->digestAlgorithms_;
  }
  self->cryptoInfos_ = evidenceRecord->cryptoInfos_;
  self->encryptionInfo_ = evidenceRecord->encryptionInfo_;
  self->archiveTimeStampSequence_ = replacementSequence;
}

LibOrgBouncycastleAsn1TspEvidenceRecord *new_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(LibOrgBouncycastleAsn1TspEvidenceRecord *evidenceRecord, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *replacementSequence, LibOrgBouncycastleAsn1TspArchiveTimeStamp *newChainTimeStamp) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1TspEvidenceRecord, initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_, evidenceRecord, replacementSequence, newChainTimeStamp)
}

LibOrgBouncycastleAsn1TspEvidenceRecord *create_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_(LibOrgBouncycastleAsn1TspEvidenceRecord *evidenceRecord, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *replacementSequence, LibOrgBouncycastleAsn1TspArchiveTimeStamp *newChainTimeStamp) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1TspEvidenceRecord, initWithLibOrgBouncycastleAsn1TspEvidenceRecord_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_withLibOrgBouncycastleAsn1TspArchiveTimeStamp_, evidenceRecord, replacementSequence, newChainTimeStamp)
}

void LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifierArray_withLibOrgBouncycastleAsn1TspCryptoInfos_withLibOrgBouncycastleAsn1TspEncryptionInfo_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_(LibOrgBouncycastleAsn1TspEvidenceRecord *self, IOSObjectArray *digestAlgorithms, LibOrgBouncycastleAsn1TspCryptoInfos *cryptoInfos, LibOrgBouncycastleAsn1TspEncryptionInfo *encryptionInfo, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *archiveTimeStampSequence) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->version__ = new_LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(1);
  self->digestAlgorithms_ = new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableArray_(digestAlgorithms);
  self->cryptoInfos_ = cryptoInfos;
  self->encryptionInfo_ = encryptionInfo;
  self->archiveTimeStampSequence_ = archiveTimeStampSequence;
}

LibOrgBouncycastleAsn1TspEvidenceRecord *new_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifierArray_withLibOrgBouncycastleAsn1TspCryptoInfos_withLibOrgBouncycastleAsn1TspEncryptionInfo_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_(IOSObjectArray *digestAlgorithms, LibOrgBouncycastleAsn1TspCryptoInfos *cryptoInfos, LibOrgBouncycastleAsn1TspEncryptionInfo *encryptionInfo, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *archiveTimeStampSequence) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1TspEvidenceRecord, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifierArray_withLibOrgBouncycastleAsn1TspCryptoInfos_withLibOrgBouncycastleAsn1TspEncryptionInfo_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_, digestAlgorithms, cryptoInfos, encryptionInfo, archiveTimeStampSequence)
}

LibOrgBouncycastleAsn1TspEvidenceRecord *create_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifierArray_withLibOrgBouncycastleAsn1TspCryptoInfos_withLibOrgBouncycastleAsn1TspEncryptionInfo_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_(IOSObjectArray *digestAlgorithms, LibOrgBouncycastleAsn1TspCryptoInfos *cryptoInfos, LibOrgBouncycastleAsn1TspEncryptionInfo *encryptionInfo, LibOrgBouncycastleAsn1TspArchiveTimeStampSequence *archiveTimeStampSequence) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1TspEvidenceRecord, initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifierArray_withLibOrgBouncycastleAsn1TspCryptoInfos_withLibOrgBouncycastleAsn1TspEncryptionInfo_withLibOrgBouncycastleAsn1TspArchiveTimeStampSequence_, digestAlgorithms, cryptoInfos, encryptionInfo, archiveTimeStampSequence)
}

void LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1TspEvidenceRecord *self, LibOrgBouncycastleAsn1ASN1Sequence *sequence) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->version__ = new_LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(1);
  if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(sequence)) size] < 3 && [sequence size] > 5) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"wrong sequence size in constructor: ", [sequence size]));
  }
  LibOrgBouncycastleAsn1ASN1Integer *versionNumber = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([sequence getObjectAtWithInt:0]);
  if (![((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(versionNumber)) getValue])) isEqual:JreLoadStatic(LibOrgBouncycastleUtilBigIntegers, ONE)]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"incompatible version");
  }
  else {
    self->version__ = versionNumber;
  }
  self->digestAlgorithms_ = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([sequence getObjectAtWithInt:1]);
  for (jint i = 2; i != [sequence size] - 1; i++) {
    id<LibOrgBouncycastleAsn1ASN1Encodable> object = [sequence getObjectAtWithInt:i];
    if ([object isKindOfClass:[LibOrgBouncycastleAsn1ASN1TaggedObject class]]) {
      LibOrgBouncycastleAsn1ASN1TaggedObject *asn1TaggedObject = (LibOrgBouncycastleAsn1ASN1TaggedObject *) object;
      switch ([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(asn1TaggedObject)) getTagNo]) {
        case 0:
        self->cryptoInfos_ = LibOrgBouncycastleAsn1TspCryptoInfos_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(asn1TaggedObject, false);
        break;
        case 1:
        self->encryptionInfo_ = LibOrgBouncycastleAsn1TspEncryptionInfo_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(asn1TaggedObject, false);
        break;
        default:
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown tag in getInstance: ", [asn1TaggedObject getTagNo]));
      }
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown object in getInstance: ", [[((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(object)) java_getClass] getName]));
    }
  }
  self->archiveTimeStampSequence_ = LibOrgBouncycastleAsn1TspArchiveTimeStampSequence_getInstanceWithId_([sequence getObjectAtWithInt:[sequence size] - 1]);
}

LibOrgBouncycastleAsn1TspEvidenceRecord *new_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *sequence) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1TspEvidenceRecord, initWithLibOrgBouncycastleAsn1ASN1Sequence_, sequence)
}

LibOrgBouncycastleAsn1TspEvidenceRecord *create_LibOrgBouncycastleAsn1TspEvidenceRecord_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *sequence) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1TspEvidenceRecord, initWithLibOrgBouncycastleAsn1ASN1Sequence_, sequence)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1TspEvidenceRecord)
