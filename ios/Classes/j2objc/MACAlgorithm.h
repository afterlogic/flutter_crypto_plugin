//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/MACAlgorithm.java
//

#ifndef MACAlgorithm_H
#define MACAlgorithm_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsMACAlgorithm : NSObject
@property (readonly, class) jint _null NS_SWIFT_NAME(_null);
@property (readonly, class) jint md5 NS_SWIFT_NAME(md5);
@property (readonly, class) jint sha NS_SWIFT_NAME(sha);
@property (readonly, class) jint hmac_md5 NS_SWIFT_NAME(hmac_md5);
@property (readonly, class) jint hmac_sha1 NS_SWIFT_NAME(hmac_sha1);
@property (readonly, class) jint hmac_sha256 NS_SWIFT_NAME(hmac_sha256);
@property (readonly, class) jint hmac_sha384 NS_SWIFT_NAME(hmac_sha384);
@property (readonly, class) jint hmac_sha512 NS_SWIFT_NAME(hmac_sha512);

+ (jint)_null;

+ (jint)md5;

+ (jint)sha;

+ (jint)hmac_md5;

+ (jint)hmac_sha1;

+ (jint)hmac_sha256;

+ (jint)hmac_sha384;

+ (jint)hmac_sha512;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsMACAlgorithm)

inline jint LibOrgBouncycastleCryptoTlsMACAlgorithm_get__null(void);
#define LibOrgBouncycastleCryptoTlsMACAlgorithm__null 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsMACAlgorithm, _null, jint)

inline jint LibOrgBouncycastleCryptoTlsMACAlgorithm_get_md5(void);
#define LibOrgBouncycastleCryptoTlsMACAlgorithm_md5 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsMACAlgorithm, md5, jint)

inline jint LibOrgBouncycastleCryptoTlsMACAlgorithm_get_sha(void);
#define LibOrgBouncycastleCryptoTlsMACAlgorithm_sha 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsMACAlgorithm, sha, jint)

inline jint LibOrgBouncycastleCryptoTlsMACAlgorithm_get_hmac_md5(void);
#define LibOrgBouncycastleCryptoTlsMACAlgorithm_hmac_md5 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsMACAlgorithm, hmac_md5, jint)

inline jint LibOrgBouncycastleCryptoTlsMACAlgorithm_get_hmac_sha1(void);
#define LibOrgBouncycastleCryptoTlsMACAlgorithm_hmac_sha1 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsMACAlgorithm, hmac_sha1, jint)

inline jint LibOrgBouncycastleCryptoTlsMACAlgorithm_get_hmac_sha256(void);
#define LibOrgBouncycastleCryptoTlsMACAlgorithm_hmac_sha256 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsMACAlgorithm, hmac_sha256, jint)

inline jint LibOrgBouncycastleCryptoTlsMACAlgorithm_get_hmac_sha384(void);
#define LibOrgBouncycastleCryptoTlsMACAlgorithm_hmac_sha384 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsMACAlgorithm, hmac_sha384, jint)

inline jint LibOrgBouncycastleCryptoTlsMACAlgorithm_get_hmac_sha512(void);
#define LibOrgBouncycastleCryptoTlsMACAlgorithm_hmac_sha512 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsMACAlgorithm, hmac_sha512, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsMACAlgorithm_init(LibOrgBouncycastleCryptoTlsMACAlgorithm *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsMACAlgorithm *new_LibOrgBouncycastleCryptoTlsMACAlgorithm_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsMACAlgorithm *create_LibOrgBouncycastleCryptoTlsMACAlgorithm_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsMACAlgorithm)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // MACAlgorithm_H
