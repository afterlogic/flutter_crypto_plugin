//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsExtensionsUtils.java
//

#include "AlertDescription.h"
#include "CertificateStatusRequest.h"
#include "ExtensionType.h"
#include "HeartbeatExtension.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "ServerNameList.h"
#include "TlsExtensionsUtils.h"
#include "TlsFatalAlert.h"
#include "TlsProtocol.h"
#include "TlsUtils.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/Hashtable.h"

@interface LibOrgBouncycastleCryptoTlsTlsExtensionsUtils ()

+ (jboolean)readEmptyExtensionDataWithByteArray:(IOSByteArray *)extensionData;

@end

__attribute__((unused)) static jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEmptyExtensionDataWithByteArray_(IOSByteArray *extensionData);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils)

JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_encrypt_then_mac;
JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_extended_master_secret;
JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_heartbeat;
JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_max_fragment_length;
JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_padding;
JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_server_name;
JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_status_request;
JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_truncated_hmac;

@implementation LibOrgBouncycastleCryptoTlsTlsExtensionsUtils

+ (JavaLangInteger *)EXT_encrypt_then_mac {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_encrypt_then_mac;
}

+ (JavaLangInteger *)EXT_extended_master_secret {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_extended_master_secret;
}

+ (JavaLangInteger *)EXT_heartbeat {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_heartbeat;
}

+ (JavaLangInteger *)EXT_max_fragment_length {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_max_fragment_length;
}

+ (JavaLangInteger *)EXT_padding {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_padding;
}

+ (JavaLangInteger *)EXT_server_name {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_server_name;
}

+ (JavaLangInteger *)EXT_status_request {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_status_request;
}

+ (JavaLangInteger *)EXT_truncated_hmac {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_truncated_hmac;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaUtilHashtable *)ensureExtensionsInitialisedWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(extensions);
}

+ (void)addEncryptThenMACExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addEncryptThenMACExtensionWithJavaUtilHashtable_(extensions);
}

+ (void)addExtendedMasterSecretExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addExtendedMasterSecretExtensionWithJavaUtilHashtable_(extensions);
}

+ (void)addHeartbeatExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
 withLibOrgBouncycastleCryptoTlsHeartbeatExtension:(LibOrgBouncycastleCryptoTlsHeartbeatExtension *)heartbeatExtension {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addHeartbeatExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsHeartbeatExtension_(extensions, heartbeatExtension);
}

+ (void)addMaxFragmentLengthExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                 withShort:(jshort)maxFragmentLength {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addMaxFragmentLengthExtensionWithJavaUtilHashtable_withShort_(extensions, maxFragmentLength);
}

+ (void)addPaddingExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                         withInt:(jint)dataLength {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addPaddingExtensionWithJavaUtilHashtable_withInt_(extensions, dataLength);
}

+ (void)addServerNameExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
      withLibOrgBouncycastleCryptoTlsServerNameList:(LibOrgBouncycastleCryptoTlsServerNameList *)serverNameList {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addServerNameExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsServerNameList_(extensions, serverNameList);
}

+ (void)addStatusRequestExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
withLibOrgBouncycastleCryptoTlsCertificateStatusRequest:(LibOrgBouncycastleCryptoTlsCertificateStatusRequest *)statusRequest {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addStatusRequestExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsCertificateStatusRequest_(extensions, statusRequest);
}

+ (void)addTruncatedHMacExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addTruncatedHMacExtensionWithJavaUtilHashtable_(extensions);
}

+ (LibOrgBouncycastleCryptoTlsHeartbeatExtension *)getHeartbeatExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getHeartbeatExtensionWithJavaUtilHashtable_(extensions);
}

+ (jshort)getMaxFragmentLengthExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getMaxFragmentLengthExtensionWithJavaUtilHashtable_(extensions);
}

+ (jint)getPaddingExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getPaddingExtensionWithJavaUtilHashtable_(extensions);
}

+ (LibOrgBouncycastleCryptoTlsServerNameList *)getServerNameExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getServerNameExtensionWithJavaUtilHashtable_(extensions);
}

+ (LibOrgBouncycastleCryptoTlsCertificateStatusRequest *)getStatusRequestExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getStatusRequestExtensionWithJavaUtilHashtable_(extensions);
}

+ (jboolean)hasEncryptThenMACExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasEncryptThenMACExtensionWithJavaUtilHashtable_(extensions);
}

+ (jboolean)hasExtendedMasterSecretExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasExtendedMasterSecretExtensionWithJavaUtilHashtable_(extensions);
}

+ (jboolean)hasTruncatedHMacExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasTruncatedHMacExtensionWithJavaUtilHashtable_(extensions);
}

+ (IOSByteArray *)createEmptyExtensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEmptyExtensionData();
}

+ (IOSByteArray *)createEncryptThenMACExtension {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEncryptThenMACExtension();
}

+ (IOSByteArray *)createExtendedMasterSecretExtension {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createExtendedMasterSecretExtension();
}

+ (IOSByteArray *)createHeartbeatExtensionWithLibOrgBouncycastleCryptoTlsHeartbeatExtension:(LibOrgBouncycastleCryptoTlsHeartbeatExtension *)heartbeatExtension {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createHeartbeatExtensionWithLibOrgBouncycastleCryptoTlsHeartbeatExtension_(heartbeatExtension);
}

+ (IOSByteArray *)createMaxFragmentLengthExtensionWithShort:(jshort)maxFragmentLength {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createMaxFragmentLengthExtensionWithShort_(maxFragmentLength);
}

+ (IOSByteArray *)createPaddingExtensionWithInt:(jint)dataLength {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createPaddingExtensionWithInt_(dataLength);
}

+ (IOSByteArray *)createServerNameExtensionWithLibOrgBouncycastleCryptoTlsServerNameList:(LibOrgBouncycastleCryptoTlsServerNameList *)serverNameList {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createServerNameExtensionWithLibOrgBouncycastleCryptoTlsServerNameList_(serverNameList);
}

+ (IOSByteArray *)createStatusRequestExtensionWithLibOrgBouncycastleCryptoTlsCertificateStatusRequest:(LibOrgBouncycastleCryptoTlsCertificateStatusRequest *)statusRequest {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createStatusRequestExtensionWithLibOrgBouncycastleCryptoTlsCertificateStatusRequest_(statusRequest);
}

+ (IOSByteArray *)createTruncatedHMacExtension {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createTruncatedHMacExtension();
}

+ (jboolean)readEmptyExtensionDataWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEmptyExtensionDataWithByteArray_(extensionData);
}

+ (jboolean)readEncryptThenMACExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEncryptThenMACExtensionWithByteArray_(extensionData);
}

+ (jboolean)readExtendedMasterSecretExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readExtendedMasterSecretExtensionWithByteArray_(extensionData);
}

+ (LibOrgBouncycastleCryptoTlsHeartbeatExtension *)readHeartbeatExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readHeartbeatExtensionWithByteArray_(extensionData);
}

+ (jshort)readMaxFragmentLengthExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readMaxFragmentLengthExtensionWithByteArray_(extensionData);
}

+ (jint)readPaddingExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readPaddingExtensionWithByteArray_(extensionData);
}

+ (LibOrgBouncycastleCryptoTlsServerNameList *)readServerNameExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readServerNameExtensionWithByteArray_(extensionData);
}

+ (LibOrgBouncycastleCryptoTlsCertificateStatusRequest *)readStatusRequestExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readStatusRequestExtensionWithByteArray_(extensionData);
}

+ (jboolean)readTruncatedHMacExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readTruncatedHMacExtensionWithByteArray_(extensionData);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, 6, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 12, 6, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, 6, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsHeartbeatExtension;", 0x9, 16, 1, 6, -1, -1, -1 },
    { NULL, "S", 0x9, 17, 1, 6, -1, -1, -1 },
    { NULL, "I", 0x9, 18, 1, 6, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsServerNameList;", 0x9, 19, 1, 6, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsCertificateStatusRequest;", 0x9, 20, 1, 6, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 1, 6, -1, -1, -1 },
    { NULL, "Z", 0x9, 22, 1, 6, -1, -1, -1 },
    { NULL, "Z", 0x9, 23, 1, 6, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 24, 25, 6, -1, -1, -1 },
    { NULL, "[B", 0x9, 26, 27, 6, -1, -1, -1 },
    { NULL, "[B", 0x9, 28, 29, 6, -1, -1, -1 },
    { NULL, "[B", 0x9, 30, 31, 6, -1, -1, -1 },
    { NULL, "[B", 0x9, 32, 33, 6, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 34, 35, 6, -1, -1, -1 },
    { NULL, "Z", 0x9, 36, 35, 6, -1, -1, -1 },
    { NULL, "Z", 0x9, 37, 35, 6, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsHeartbeatExtension;", 0x9, 38, 35, 6, -1, -1, -1 },
    { NULL, "S", 0x9, 39, 35, 6, -1, -1, -1 },
    { NULL, "I", 0x9, 40, 35, 6, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsServerNameList;", 0x9, 41, 35, 6, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsCertificateStatusRequest;", 0x9, 42, 35, 6, -1, -1, -1 },
    { NULL, "Z", 0x9, 43, 35, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ensureExtensionsInitialisedWithJavaUtilHashtable:);
  methods[2].selector = @selector(addEncryptThenMACExtensionWithJavaUtilHashtable:);
  methods[3].selector = @selector(addExtendedMasterSecretExtensionWithJavaUtilHashtable:);
  methods[4].selector = @selector(addHeartbeatExtensionWithJavaUtilHashtable:withLibOrgBouncycastleCryptoTlsHeartbeatExtension:);
  methods[5].selector = @selector(addMaxFragmentLengthExtensionWithJavaUtilHashtable:withShort:);
  methods[6].selector = @selector(addPaddingExtensionWithJavaUtilHashtable:withInt:);
  methods[7].selector = @selector(addServerNameExtensionWithJavaUtilHashtable:withLibOrgBouncycastleCryptoTlsServerNameList:);
  methods[8].selector = @selector(addStatusRequestExtensionWithJavaUtilHashtable:withLibOrgBouncycastleCryptoTlsCertificateStatusRequest:);
  methods[9].selector = @selector(addTruncatedHMacExtensionWithJavaUtilHashtable:);
  methods[10].selector = @selector(getHeartbeatExtensionWithJavaUtilHashtable:);
  methods[11].selector = @selector(getMaxFragmentLengthExtensionWithJavaUtilHashtable:);
  methods[12].selector = @selector(getPaddingExtensionWithJavaUtilHashtable:);
  methods[13].selector = @selector(getServerNameExtensionWithJavaUtilHashtable:);
  methods[14].selector = @selector(getStatusRequestExtensionWithJavaUtilHashtable:);
  methods[15].selector = @selector(hasEncryptThenMACExtensionWithJavaUtilHashtable:);
  methods[16].selector = @selector(hasExtendedMasterSecretExtensionWithJavaUtilHashtable:);
  methods[17].selector = @selector(hasTruncatedHMacExtensionWithJavaUtilHashtable:);
  methods[18].selector = @selector(createEmptyExtensionData);
  methods[19].selector = @selector(createEncryptThenMACExtension);
  methods[20].selector = @selector(createExtendedMasterSecretExtension);
  methods[21].selector = @selector(createHeartbeatExtensionWithLibOrgBouncycastleCryptoTlsHeartbeatExtension:);
  methods[22].selector = @selector(createMaxFragmentLengthExtensionWithShort:);
  methods[23].selector = @selector(createPaddingExtensionWithInt:);
  methods[24].selector = @selector(createServerNameExtensionWithLibOrgBouncycastleCryptoTlsServerNameList:);
  methods[25].selector = @selector(createStatusRequestExtensionWithLibOrgBouncycastleCryptoTlsCertificateStatusRequest:);
  methods[26].selector = @selector(createTruncatedHMacExtension);
  methods[27].selector = @selector(readEmptyExtensionDataWithByteArray:);
  methods[28].selector = @selector(readEncryptThenMACExtensionWithByteArray:);
  methods[29].selector = @selector(readExtendedMasterSecretExtensionWithByteArray:);
  methods[30].selector = @selector(readHeartbeatExtensionWithByteArray:);
  methods[31].selector = @selector(readMaxFragmentLengthExtensionWithByteArray:);
  methods[32].selector = @selector(readPaddingExtensionWithByteArray:);
  methods[33].selector = @selector(readServerNameExtensionWithByteArray:);
  methods[34].selector = @selector(readStatusRequestExtensionWithByteArray:);
  methods[35].selector = @selector(readTruncatedHMacExtensionWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXT_encrypt_then_mac", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "EXT_extended_master_secret", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "EXT_heartbeat", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "EXT_max_fragment_length", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "EXT_padding", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "EXT_server_name", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "EXT_status_request", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "EXT_truncated_hmac", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
  };
  static const void *ptrTable[] = { "ensureExtensionsInitialised", "LJavaUtilHashtable;", "addEncryptThenMACExtension", "addExtendedMasterSecretExtension", "addHeartbeatExtension", "LJavaUtilHashtable;LLibOrgBouncycastleCryptoTlsHeartbeatExtension;", "LJavaIoIOException;", "addMaxFragmentLengthExtension", "LJavaUtilHashtable;S", "addPaddingExtension", "LJavaUtilHashtable;I", "addServerNameExtension", "LJavaUtilHashtable;LLibOrgBouncycastleCryptoTlsServerNameList;", "addStatusRequestExtension", "LJavaUtilHashtable;LLibOrgBouncycastleCryptoTlsCertificateStatusRequest;", "addTruncatedHMacExtension", "getHeartbeatExtension", "getMaxFragmentLengthExtension", "getPaddingExtension", "getServerNameExtension", "getStatusRequestExtension", "hasEncryptThenMACExtension", "hasExtendedMasterSecretExtension", "hasTruncatedHMacExtension", "createHeartbeatExtension", "LLibOrgBouncycastleCryptoTlsHeartbeatExtension;", "createMaxFragmentLengthExtension", "S", "createPaddingExtension", "I", "createServerNameExtension", "LLibOrgBouncycastleCryptoTlsServerNameList;", "createStatusRequestExtension", "LLibOrgBouncycastleCryptoTlsCertificateStatusRequest;", "readEmptyExtensionData", "[B", "readEncryptThenMACExtension", "readExtendedMasterSecretExtension", "readHeartbeatExtension", "readMaxFragmentLengthExtension", "readPaddingExtension", "readServerNameExtension", "readStatusRequestExtension", "readTruncatedHMacExtension", &LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_encrypt_then_mac, &LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_extended_master_secret, &LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_heartbeat, &LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_max_fragment_length, &LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_padding, &LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_server_name, &LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_status_request, &LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_truncated_hmac };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsExtensionsUtils = { "TlsExtensionsUtils", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 36, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsExtensionsUtils;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoTlsTlsExtensionsUtils class]) {
    LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_encrypt_then_mac = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_encrypt_then_mac);
    LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_extended_master_secret = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_extended_master_secret);
    LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_heartbeat = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_heartbeat);
    LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_max_fragment_length = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_max_fragment_length);
    LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_padding = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_padding);
    LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_server_name = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_server_name);
    LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_status_request = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_status_request);
    LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_truncated_hmac = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_truncated_hmac);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils)
  }
}

@end

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_init(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsTlsExtensionsUtils *new_LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, init)
}

LibOrgBouncycastleCryptoTlsTlsExtensionsUtils *create_LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, init)
}

JavaUtilHashtable *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  return extensions == nil ? new_JavaUtilHashtable_init() : extensions;
}

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addEncryptThenMACExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_encrypt_then_mac withId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEncryptThenMACExtension()];
}

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addExtendedMasterSecretExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_extended_master_secret withId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createExtendedMasterSecretExtension()];
}

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addHeartbeatExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsHeartbeatExtension_(JavaUtilHashtable *extensions, LibOrgBouncycastleCryptoTlsHeartbeatExtension *heartbeatExtension) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_heartbeat withId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createHeartbeatExtensionWithLibOrgBouncycastleCryptoTlsHeartbeatExtension_(heartbeatExtension)];
}

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addMaxFragmentLengthExtensionWithJavaUtilHashtable_withShort_(JavaUtilHashtable *extensions, jshort maxFragmentLength) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_max_fragment_length withId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createMaxFragmentLengthExtensionWithShort_(maxFragmentLength)];
}

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addPaddingExtensionWithJavaUtilHashtable_withInt_(JavaUtilHashtable *extensions, jint dataLength) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_padding withId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createPaddingExtensionWithInt_(dataLength)];
}

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addServerNameExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsServerNameList_(JavaUtilHashtable *extensions, LibOrgBouncycastleCryptoTlsServerNameList *serverNameList) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_server_name withId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createServerNameExtensionWithLibOrgBouncycastleCryptoTlsServerNameList_(serverNameList)];
}

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addStatusRequestExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsCertificateStatusRequest_(JavaUtilHashtable *extensions, LibOrgBouncycastleCryptoTlsCertificateStatusRequest *statusRequest) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_status_request withId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createStatusRequestExtensionWithLibOrgBouncycastleCryptoTlsCertificateStatusRequest_(statusRequest)];
}

void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addTruncatedHMacExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_truncated_hmac withId:LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createTruncatedHMacExtension()];
}

LibOrgBouncycastleCryptoTlsHeartbeatExtension *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getHeartbeatExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_heartbeat);
  return extensionData == nil ? nil : LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readHeartbeatExtensionWithByteArray_(extensionData);
}

jshort LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getMaxFragmentLengthExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_max_fragment_length);
  return extensionData == nil ? -1 : LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readMaxFragmentLengthExtensionWithByteArray_(extensionData);
}

jint LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getPaddingExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_padding);
  return extensionData == nil ? -1 : LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readPaddingExtensionWithByteArray_(extensionData);
}

LibOrgBouncycastleCryptoTlsServerNameList *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getServerNameExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_server_name);
  return extensionData == nil ? nil : LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readServerNameExtensionWithByteArray_(extensionData);
}

LibOrgBouncycastleCryptoTlsCertificateStatusRequest *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getStatusRequestExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_status_request);
  return extensionData == nil ? nil : LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readStatusRequestExtensionWithByteArray_(extensionData);
}

jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasEncryptThenMACExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_encrypt_then_mac);
  return extensionData == nil ? false : LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEncryptThenMACExtensionWithByteArray_(extensionData);
}

jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasExtendedMasterSecretExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_extended_master_secret);
  return extensionData == nil ? false : LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readExtendedMasterSecretExtensionWithByteArray_(extensionData);
}

jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasTruncatedHMacExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_truncated_hmac);
  return extensionData == nil ? false : LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readTruncatedHMacExtensionWithByteArray_(extensionData);
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEmptyExtensionData() {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  return JreLoadStatic(LibOrgBouncycastleCryptoTlsTlsUtils, EMPTY_BYTES);
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEncryptThenMACExtension() {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEmptyExtensionData();
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createExtendedMasterSecretExtension() {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEmptyExtensionData();
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createHeartbeatExtensionWithLibOrgBouncycastleCryptoTlsHeartbeatExtension_(LibOrgBouncycastleCryptoTlsHeartbeatExtension *heartbeatExtension) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (heartbeatExtension == nil) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  [heartbeatExtension encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createMaxFragmentLengthExtensionWithShort_(jshort maxFragmentLength) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  LibOrgBouncycastleCryptoTlsTlsUtils_checkUint8WithShort_(maxFragmentLength);
  IOSByteArray *extensionData = [IOSByteArray newArrayWithLength:1];
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(maxFragmentLength, extensionData, 0);
  return extensionData;
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createPaddingExtensionWithInt_(jint dataLength) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  LibOrgBouncycastleCryptoTlsTlsUtils_checkUint16WithInt_(dataLength);
  return [IOSByteArray newArrayWithLength:dataLength];
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createServerNameExtensionWithLibOrgBouncycastleCryptoTlsServerNameList_(LibOrgBouncycastleCryptoTlsServerNameList *serverNameList) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (serverNameList == nil) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  [serverNameList encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createStatusRequestExtensionWithLibOrgBouncycastleCryptoTlsCertificateStatusRequest_(LibOrgBouncycastleCryptoTlsCertificateStatusRequest *statusRequest) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (statusRequest == nil) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  [statusRequest encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createTruncatedHMacExtension() {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEmptyExtensionData();
}

jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEmptyExtensionDataWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  if (extensionData->size_ != 0) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return true;
}

jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEncryptThenMACExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEmptyExtensionDataWithByteArray_(extensionData);
}

jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readExtendedMasterSecretExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEmptyExtensionDataWithByteArray_(extensionData);
}

LibOrgBouncycastleCryptoTlsHeartbeatExtension *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readHeartbeatExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  LibOrgBouncycastleCryptoTlsHeartbeatExtension *heartbeatExtension = LibOrgBouncycastleCryptoTlsHeartbeatExtension_parseWithJavaIoInputStream_(buf);
  LibOrgBouncycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  return heartbeatExtension;
}

jshort LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readMaxFragmentLengthExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  if (extensionData->size_ != 1) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decode_error);
  }
  return LibOrgBouncycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(extensionData, 0);
}

jint LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readPaddingExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  for (jint i = 0; i < extensionData->size_; ++i) {
    if (IOSByteArray_Get(extensionData, i) != 0) {
      @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  return extensionData->size_;
}

LibOrgBouncycastleCryptoTlsServerNameList *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readServerNameExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  LibOrgBouncycastleCryptoTlsServerNameList *serverNameList = LibOrgBouncycastleCryptoTlsServerNameList_parseWithJavaIoInputStream_(buf);
  LibOrgBouncycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  return serverNameList;
}

LibOrgBouncycastleCryptoTlsCertificateStatusRequest *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readStatusRequestExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  LibOrgBouncycastleCryptoTlsCertificateStatusRequest *statusRequest = LibOrgBouncycastleCryptoTlsCertificateStatusRequest_parseWithJavaIoInputStream_(buf);
  LibOrgBouncycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  return statusRequest;
}

jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readTruncatedHMacExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEmptyExtensionDataWithByteArray_(extensionData);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils)
