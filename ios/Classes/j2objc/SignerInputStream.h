//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/io/SignerInputStream.java
//

#ifndef SignerInputStream_H
#define SignerInputStream_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/io/FilterInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@protocol LibOrgBouncycastleCryptoSigner;

@interface LibOrgBouncycastleCryptoIoSignerInputStream : JavaIoFilterInputStream {
 @public
  id<LibOrgBouncycastleCryptoSigner> signer_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                 withLibOrgBouncycastleCryptoSigner:(id<LibOrgBouncycastleCryptoSigner>)signer;

- (id<LibOrgBouncycastleCryptoSigner>)getSigner;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoIoSignerInputStream)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoIoSignerInputStream, signer_, id<LibOrgBouncycastleCryptoSigner>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoSignerInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoSigner_(LibOrgBouncycastleCryptoIoSignerInputStream *self, JavaIoInputStream *stream, id<LibOrgBouncycastleCryptoSigner> signer);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoSignerInputStream *new_LibOrgBouncycastleCryptoIoSignerInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoSigner_(JavaIoInputStream *stream, id<LibOrgBouncycastleCryptoSigner> signer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoSignerInputStream *create_LibOrgBouncycastleCryptoIoSignerInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoSigner_(JavaIoInputStream *stream, id<LibOrgBouncycastleCryptoSigner> signer);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoIoSignerInputStream)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SignerInputStream_H
