//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/rainbow/RainbowSigner.java
//

#include "CipherParameters.h"
#include "ComputeInField.h"
#include "CryptoServicesRegistrar.h"
#include "GF2Field.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Layer.h"
#include "ParametersWithRandom.h"
#include "RainbowKeyParameters.h"
#include "RainbowPrivateKeyParameters.h"
#include "RainbowPublicKeyParameters.h"
#include "RainbowSigner.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoRainbowRainbowSigner () {
 @public
  JavaSecuritySecureRandom *random_;
  IOSShortArray *x_;
  LibOrgBouncycastlePqcCryptoRainbowUtilComputeInField *cf_;
}

- (IOSShortArray *)initSignWithLibOrgBouncycastlePqcCryptoRainbowLayerArray:(IOSObjectArray *)layer
                                                             withShortArray:(IOSShortArray *)msg OBJC_METHOD_FAMILY_NONE;

- (IOSShortArray *)verifySignatureInternWithShortArray:(IOSShortArray *)signature;

- (IOSShortArray *)makeMessageRepresentativeWithByteArray:(IOSByteArray *)message;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner, x_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner, cf_, LibOrgBouncycastlePqcCryptoRainbowUtilComputeInField *)

inline jint LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_get_MAXITS(void);
#define LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_MAXITS 65536
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner, MAXITS, jint)

__attribute__((unused)) static IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_initSignWithLibOrgBouncycastlePqcCryptoRainbowLayerArray_withShortArray_(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSObjectArray *layer, IOSShortArray *msg);

__attribute__((unused)) static IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_verifySignatureInternWithShortArray_(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSShortArray *signature);

__attribute__((unused)) static IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSByteArray *message);

@implementation LibOrgBouncycastlePqcCryptoRainbowRainbowSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if (forSigning) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->random_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk([rParam getParameters], [LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class]);
    }
    else {
      self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class]);
  }
  self->signableDocumentLength_ = [((LibOrgBouncycastlePqcCryptoRainbowRainbowKeyParameters *) nil_chk(self->key_)) getDocLength];
}

- (IOSShortArray *)initSignWithLibOrgBouncycastlePqcCryptoRainbowLayerArray:(IOSObjectArray *)layer
                                                             withShortArray:(IOSShortArray *)msg {
  return LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_initSignWithLibOrgBouncycastlePqcCryptoRainbowLayerArray_withShortArray_(self, layer, msg);
}

- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  IOSObjectArray *layer = [((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getLayers];
  jint numberOfLayers = ((IOSObjectArray *) nil_chk(layer))->size_;
  x_ = [IOSShortArray newArrayWithLength:((IOSObjectArray *) nil_chk([((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getInvA2]))->size_];
  IOSShortArray *Y_;
  IOSShortArray *y_i;
  jint counter;
  IOSShortArray *solVec;
  IOSShortArray *tmpVec;
  IOSShortArray *signature;
  IOSByteArray *S = [IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, numberOfLayers - 1))) getViNext]];
  IOSShortArray *msgHashVals = LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(self, message);
  jint itCount = 0;
  jboolean ok;
  do {
    ok = true;
    counter = 0;
    @try {
      Y_ = LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_initSignWithLibOrgBouncycastlePqcCryptoRainbowLayerArray_withShortArray_(self, layer, msgHashVals);
      for (jint i = 0; i < numberOfLayers; i++) {
        y_i = [IOSShortArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) getOi]];
        solVec = [IOSShortArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) getOi]];
        for (jint k = 0; k < [((LibOrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) getOi]; k++) {
          *IOSShortArray_GetRef(y_i, k) = IOSShortArray_Get(nil_chk(Y_), counter);
          counter++;
        }
        solVec = [((LibOrgBouncycastlePqcCryptoRainbowUtilComputeInField *) nil_chk(cf_)) solveEquationWithShortArray2:[((LibOrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) plugInVinegarsWithShortArray:x_] withShortArray:y_i];
        if (solVec == nil) {
          @throw new_JavaLangException_initWithNSString_(@"LES is not solveable!");
        }
        for (jint j = 0; j < solVec->size_; j++) {
          *IOSShortArray_GetRef(nil_chk(x_), [((LibOrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) getVi] + j) = IOSShortArray_Get(solVec, j);
        }
      }
      tmpVec = [((LibOrgBouncycastlePqcCryptoRainbowUtilComputeInField *) nil_chk(cf_)) addVectWithShortArray:[((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getB2] withShortArray:x_];
      signature = [((LibOrgBouncycastlePqcCryptoRainbowUtilComputeInField *) nil_chk(cf_)) multiplyMatrixWithShortArray2:[((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getInvA2] withShortArray:tmpVec];
      for (jint i = 0; i < S->size_; i++) {
        *IOSByteArray_GetRef(S, i) = ((jbyte) IOSShortArray_Get(nil_chk(signature), i));
      }
    }
    @catch (JavaLangException *se) {
      ok = false;
    }
  }
  while (!ok && ++itCount < LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_MAXITS);
  if (itCount == LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_MAXITS) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unable to generate signature - LES not solvable");
  }
  return S;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  IOSShortArray *sigInt = [IOSShortArray newArrayWithLength:((IOSByteArray *) nil_chk(signature))->size_];
  jshort tmp;
  for (jint i = 0; i < signature->size_; i++) {
    tmp = (jshort) IOSByteArray_Get(signature, i);
    tmp &= (jshort) (jint) 0xff;
    *IOSShortArray_GetRef(sigInt, i) = tmp;
  }
  IOSShortArray *msgHashVal = LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(self, message);
  IOSShortArray *verificationResult = LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_verifySignatureInternWithShortArray_(self, sigInt);
  jboolean verified = true;
  if (((IOSShortArray *) nil_chk(msgHashVal))->size_ != ((IOSShortArray *) nil_chk(verificationResult))->size_) {
    return false;
  }
  for (jint i = 0; i < msgHashVal->size_; i++) {
    verified = (verified && IOSShortArray_Get(msgHashVal, i) == IOSShortArray_Get(verificationResult, i));
  }
  return verified;
}

- (IOSShortArray *)verifySignatureInternWithShortArray:(IOSShortArray *)signature {
  return LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_verifySignatureInternWithShortArray_(self, signature);
}

- (IOSShortArray *)makeMessageRepresentativeWithByteArray:(IOSByteArray *)message {
  return LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(self, message);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 10, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(initSignWithLibOrgBouncycastlePqcCryptoRainbowLayerArray:withShortArray:);
  methods[3].selector = @selector(generateSignatureWithByteArray:);
  methods[4].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[5].selector = @selector(verifySignatureInternWithShortArray:);
  methods[6].selector = @selector(makeMessageRepresentativeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAXITS", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_MAXITS, 0x1a, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signableDocumentLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "x_", "[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cf_", "LLibOrgBouncycastlePqcCryptoRainbowUtilComputeInField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastlePqcCryptoRainbowRainbowKeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "initSign", "[LLibOrgBouncycastlePqcCryptoRainbowLayer;[S", "generateSignature", "[B", "verifySignature", "[B[B", "verifySignatureIntern", "[S", "makeMessageRepresentative" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoRainbowRainbowSigner = { "RainbowSigner", "lib.org.bouncycastle.pqc.crypto.rainbow", ptrTable, methods, fields, 7, 0x1, 7, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoRainbowRainbowSigner;
}

@end

void LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_init(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *self) {
  NSObject_init(self);
  self->cf_ = new_LibOrgBouncycastlePqcCryptoRainbowUtilComputeInField_init();
}

LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *new_LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner, init)
}

LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *create_LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner, init)
}

IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_initSignWithLibOrgBouncycastlePqcCryptoRainbowLayerArray_withShortArray_(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSObjectArray *layer, IOSShortArray *msg) {
  IOSShortArray *tmpVec = [IOSShortArray newArrayWithLength:((IOSShortArray *) nil_chk(msg))->size_];
  tmpVec = [((LibOrgBouncycastlePqcCryptoRainbowUtilComputeInField *) nil_chk(self->cf_)) addVectWithShortArray:[((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getB1] withShortArray:msg];
  IOSShortArray *Y_ = [((LibOrgBouncycastlePqcCryptoRainbowUtilComputeInField *) nil_chk(self->cf_)) multiplyMatrixWithShortArray2:[((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getInvA1] withShortArray:tmpVec];
  for (jint i = 0; i < [((LibOrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(nil_chk(layer), 0))) getVi]; i++) {
    *IOSShortArray_GetRef(nil_chk(self->x_), i) = (jshort) [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextInt];
    *IOSShortArray_GetRef(nil_chk(self->x_), i) = (jshort) (IOSShortArray_Get(self->x_, i) & LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_MASK);
  }
  return Y_;
}

IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_verifySignatureInternWithShortArray_(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSShortArray *signature) {
  IOSObjectArray *coeff_quadratic = [((LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class])))) getCoeffQuadratic];
  IOSObjectArray *coeff_singular = [((LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class])))) getCoeffSingular];
  IOSShortArray *coeff_scalar = [((LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk(self->key_, [LibOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class])))) getCoeffScalar];
  IOSShortArray *rslt = [IOSShortArray newArrayWithLength:((IOSObjectArray *) nil_chk(coeff_quadratic))->size_];
  jint n = ((IOSShortArray *) nil_chk(IOSObjectArray_Get(nil_chk(coeff_singular), 0)))->size_;
  jint offset = 0;
  jshort tmp = 0;
  for (jint p = 0; p < coeff_quadratic->size_; p++) {
    offset = 0;
    for (jint x = 0; x < n; x++) {
      for (jint y = x; y < n; y++) {
        tmp = LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(coeff_quadratic, p)), offset), LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(signature), x), IOSShortArray_Get(signature, y)));
        *IOSShortArray_GetRef(rslt, p) = LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(rslt, p), tmp);
        offset++;
      }
      tmp = LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(coeff_singular, p)), x), IOSShortArray_Get(nil_chk(signature), x));
      *IOSShortArray_GetRef(rslt, p) = LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(rslt, p), tmp);
    }
    *IOSShortArray_GetRef(rslt, p) = LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(rslt, p), IOSShortArray_Get(nil_chk(coeff_scalar), p));
  }
  return rslt;
}

IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSByteArray *message) {
  IOSShortArray *output = [IOSShortArray newArrayWithLength:self->signableDocumentLength_];
  jint h = 0;
  jint i = 0;
  do {
    if (i >= ((IOSByteArray *) nil_chk(message))->size_) {
      break;
    }
    *IOSShortArray_GetRef(output, i) = (jshort) IOSByteArray_Get(message, h);
    *IOSShortArray_GetRef(output, i) &= (jshort) (jint) 0xff;
    h++;
    i++;
  }
  while (i < output->size_);
  return output;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoRainbowRainbowSigner)
