//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/PBKDF2Config.java
//

#ifndef PBKDF2Config_H
#define PBKDF2Config_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PBKDFConfig.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;

@interface LibOrgBouncycastleCryptoUtilPBKDF2Config : LibOrgBouncycastleCryptoUtilPBKDFConfig
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *PRF_SHA1 NS_SWIFT_NAME(PRF_SHA1);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *PRF_SHA256 NS_SWIFT_NAME(PRF_SHA256);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *PRF_SHA512 NS_SWIFT_NAME(PRF_SHA512);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *PRF_SHA3_256 NS_SWIFT_NAME(PRF_SHA3_256);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *PRF_SHA3_512 NS_SWIFT_NAME(PRF_SHA3_512);

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)PRF_SHA1;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)PRF_SHA256;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)PRF_SHA512;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)PRF_SHA3_256;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)PRF_SHA3_512;

#pragma mark Public

- (jint)getIterationCount;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getPRF;

- (jint)getSaltLength;

#pragma mark Package-Private

+ (jint)getSaltSizeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)algorithm;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoUtilPBKDF2Config)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_get_PRF_SHA1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_PRF_SHA1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilPBKDF2Config, PRF_SHA1, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_get_PRF_SHA256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_PRF_SHA256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilPBKDF2Config, PRF_SHA256, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_get_PRF_SHA512(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_PRF_SHA512;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilPBKDF2Config, PRF_SHA512, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_get_PRF_SHA3_256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_PRF_SHA3_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilPBKDF2Config, PRF_SHA3_256, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_get_PRF_SHA3_512(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilPBKDF2Config_PRF_SHA3_512;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilPBKDF2Config, PRF_SHA3_512, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoUtilPBKDF2Config_getSaltSizeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPBKDF2Config)

@interface LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (LibOrgBouncycastleCryptoUtilPBKDF2Config *)build;

- (LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder *)withIterationCountWithInt:(jint)iterationCount;

- (LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder *)withPRFWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)prf;

- (LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder *)withSaltLengthWithInt:(jint)saltLength;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder_init(LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder *new_LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder *create_LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPBKDF2Config_Builder)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PBKDF2Config_H
