//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.java
//

#include "J2ObjC_source.h"
#include "SPHINCS256Config.h"

@implementation LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config

+ (jint)SUBTREE_HEIGHT {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT;
}

+ (jint)TOTALTREE_HEIGHT {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT;
}

+ (jint)N_LEVELS {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS;
}

+ (jint)SEED_BYTES {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES;
}

+ (jint)SK_RAND_SEED_BYTES {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES;
}

+ (jint)MESSAGE_HASH_SEED_BYTES {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
}

+ (jint)HASH_BYTES {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
}

+ (jint)MSGHASH_BYTES {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MSGHASH_BYTES;
}

+ (jint)CRYPTO_PUBLICKEYBYTES {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES;
}

+ (jint)CRYPTO_SECRETKEYBYTES {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES;
}

+ (jint)CRYPTO_BYTES {
  return LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SUBTREE_HEIGHT", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT, 0x18, -1, -1, -1, -1 },
    { "TOTALTREE_HEIGHT", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT, 0x18, -1, -1, -1, -1 },
    { "N_LEVELS", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS, 0x18, -1, -1, -1, -1 },
    { "SEED_BYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES, 0x18, -1, -1, -1, -1 },
    { "SK_RAND_SEED_BYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES, 0x18, -1, -1, -1, -1 },
    { "MESSAGE_HASH_SEED_BYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES, 0x18, -1, -1, -1, -1 },
    { "HASH_BYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, 0x18, -1, -1, -1, -1 },
    { "MSGHASH_BYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MSGHASH_BYTES, 0x18, -1, -1, -1, -1 },
    { "CRYPTO_PUBLICKEYBYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES, 0x18, -1, -1, -1, -1 },
    { "CRYPTO_SECRETKEYBYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES, 0x18, -1, -1, -1, -1 },
    { "CRYPTO_BYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES, 0x18, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config = { "SPHINCS256Config", "lib.org.bouncycastle.pqc.crypto.sphincs", NULL, methods, fields, 7, 0x0, 1, 11, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config;
}

@end

void LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_init(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config *new_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, init)
}

LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config *create_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config)
