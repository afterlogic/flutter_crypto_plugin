//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/DSTU4145KeyPairGenerator.java
//

#ifndef DSTU4145KeyPairGenerator_H
#define DSTU4145KeyPairGenerator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ECKeyPairGenerator.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;

@interface LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator : LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator

#pragma mark Public

- (instancetype __nonnull)init;

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator_init(LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator *new_LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator *create_LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoGeneratorsDSTU4145KeyPairGenerator)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DSTU4145KeyPairGenerator_H
