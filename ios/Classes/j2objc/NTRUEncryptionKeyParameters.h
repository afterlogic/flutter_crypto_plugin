//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/ntru/NTRUEncryptionKeyParameters.java
//

#ifndef NTRUEncryptionKeyParameters_H
#define NTRUEncryptionKeyParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricKeyParameter.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters;

@interface LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters : LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter {
 @public
  LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters *params_;
}

#pragma mark Public

- (instancetype __nonnull)initWithBoolean:(jboolean)privateKey
withLibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters *)params;

- (LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters *)getParameters;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters)

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters, params_, LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters_initWithBoolean_withLibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters *self, jboolean privateKey, LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters *new_LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters_initWithBoolean_withLibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters_(jboolean privateKey, LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters *create_LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters_initWithBoolean_withLibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters_(jboolean privateKey, LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // NTRUEncryptionKeyParameters_H
