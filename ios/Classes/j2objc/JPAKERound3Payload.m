//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/jpake/JPAKERound3Payload.java
//

#include "J2ObjC_source.h"
#include "JPAKERound3Payload.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload () {
 @public
  NSString *participantId_;
  JavaMathBigInteger *macTag_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload, participantId_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload, macTag_, JavaMathBigInteger *)

@implementation LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload

- (instancetype)initWithNSString:(NSString *)participantId
          withJavaMathBigInteger:(JavaMathBigInteger *)magTag {
  LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload_initWithNSString_withJavaMathBigInteger_(self, participantId, magTag);
  return self;
}

- (NSString *)getParticipantId {
  return participantId_;
}

- (JavaMathBigInteger *)getMacTag {
  return macTag_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaMathBigInteger:);
  methods[1].selector = @selector(getParticipantId);
  methods[2].selector = @selector(getMacTag);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "participantId_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "macTag_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload = { "JPAKERound3Payload", "lib.org.bouncycastle.crypto.agreement.jpake", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload;
}

@end

void LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload_initWithNSString_withJavaMathBigInteger_(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload *self, NSString *participantId, JavaMathBigInteger *magTag) {
  NSObject_init(self);
  self->participantId_ = participantId;
  self->macTag_ = magTag;
}

LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload *new_LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload_initWithNSString_withJavaMathBigInteger_(NSString *participantId, JavaMathBigInteger *magTag) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload, initWithNSString_withJavaMathBigInteger_, participantId, magTag)
}

LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload *create_LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload_initWithNSString_withJavaMathBigInteger_(NSString *participantId, JavaMathBigInteger *magTag) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload, initWithNSString_withJavaMathBigInteger_, participantId, magTag)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload)
