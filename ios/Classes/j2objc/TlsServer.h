//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsServer.java
//

#ifndef TlsServer_H
#define TlsServer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsPeer.h"

@class IOSIntArray;
@class IOSShortArray;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@class LibOrgBouncycastleCryptoTlsCertificateStatus;
@class LibOrgBouncycastleCryptoTlsNewSessionTicket;
@class LibOrgBouncycastleCryptoTlsProtocolVersion;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;
@protocol LibOrgBouncycastleCryptoTlsTlsServerContext;

@protocol LibOrgBouncycastleCryptoTlsTlsServer < LibOrgBouncycastleCryptoTlsTlsPeer, JavaObject >

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsServerContext:(id<LibOrgBouncycastleCryptoTlsTlsServerContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)notifyClientVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)clientVersion;

- (void)notifyFallbackWithBoolean:(jboolean)isFallback;

- (void)notifyOfferedCipherSuitesWithIntArray:(IOSIntArray *)offeredCipherSuites;

- (void)notifyOfferedCompressionMethodsWithShortArray:(IOSShortArray *)offeredCompressionMethods;

- (void)processClientExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions;

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getServerVersion;

- (jint)getSelectedCipherSuite;

- (jshort)getSelectedCompressionMethod;

- (JavaUtilHashtable *)getServerExtensions;

- (JavaUtilVector *)getServerSupplementalData;

- (id<LibOrgBouncycastleCryptoTlsTlsCredentials>)getCredentials;

- (LibOrgBouncycastleCryptoTlsCertificateStatus *)getCertificateStatus;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange;

- (LibOrgBouncycastleCryptoTlsCertificateRequest *)getCertificateRequest;

- (void)processClientSupplementalDataWithJavaUtilVector:(JavaUtilVector *)clientSupplementalData;

- (void)notifyClientCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)clientCertificate;

- (LibOrgBouncycastleCryptoTlsNewSessionTicket *)getNewSessionTicket;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsServer)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsServer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsServer_H
