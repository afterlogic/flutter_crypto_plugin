//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/jcajce/JcaBlobVerifier.java
//

#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaBlobVerifier.h"
#include "JcaJceHelper.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/DigestException.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"

@interface LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier () {
 @public
  JavaSecurityMessageDigest *sha1Digest_;
  JavaSecurityMessageDigest *md5Digest_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier, sha1Digest_, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier, md5Digest_, JavaSecurityMessageDigest *)

@implementation LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier

- (instancetype)initWithLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(self, helper);
  return self;
}

- (jboolean)isMatchedWithByteArray:(IOSByteArray *)blobData
                     withByteArray:(IOSByteArray *)blobDigest {
  [((JavaSecurityMessageDigest *) nil_chk(sha1Digest_)) updateWithByteArray:blobData withInt:0 withInt:((IOSByteArray *) nil_chk(blobData))->size_];
  IOSByteArray *calculatedDigest = [sha1Digest_ digest];
  if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(calculatedDigest, blobDigest)) {
    if (IOSByteArray_Get(nil_chk(blobDigest), 0) == 0 && IOSByteArray_Get(blobDigest, 1) == 0 && IOSByteArray_Get(blobDigest, 2) == 0 && IOSByteArray_Get(blobDigest, 3) == 0) {
      [((JavaSecurityMessageDigest *) nil_chk(md5Digest_)) updateWithByteArray:blobData withInt:0 withInt:blobData->size_];
      LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(calculatedDigest, (jbyte) 0);
      @try {
        [md5Digest_ digestWithByteArray:calculatedDigest withInt:4 withInt:[md5Digest_ getDigestLength]];
      }
      @catch (JavaSecurityDigestException *e) {
        @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"internal buffer to small: ", [e getMessage]), e);
      }
      return LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(calculatedDigest, blobDigest);
    }
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[1].selector = @selector(isMatchedWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sha1Digest_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "md5Digest_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "LJavaSecurityNoSuchProviderException;LJavaSecurityNoSuchAlgorithmException;", "isMatched", "[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier = { "JcaBlobVerifier", "lib.org.bouncycastle.gpg.keybox.jcajce", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier;
}

@end

void LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier *self, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  NSObject_init(self);
  self->sha1Digest_ = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper)) createDigestWithNSString:@"SHA-1"];
  JavaSecurityMessageDigest *md5;
  @try {
    md5 = [helper createDigestWithNSString:@"MD5"];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    md5 = nil;
  }
  self->md5Digest_ = md5;
}

LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier *new_LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier, initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_, helper)
}

LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier *create_LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier, initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_, helper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleGpgKeyboxJcajceJcaBlobVerifier)
