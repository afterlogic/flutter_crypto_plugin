//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/CMacWithIV.java
//

#include "BlockCipher.h"
#include "CMac.h"
#include "CMacWithIV.h"
#include "CipherParameters.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleCryptoMacsCMacWithIV

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoMacsCMacWithIV_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                    withInt:(jint)macSizeInBits {
  LibOrgBouncycastleCryptoMacsCMacWithIV_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, macSizeInBits);
  return self;
}

- (void)validateWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withInt:);
  methods[2].selector = @selector(validateWithLibOrgBouncycastleCryptoCipherParameters:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "LLibOrgBouncycastleCryptoBlockCipher;I", "validate", "LLibOrgBouncycastleCryptoCipherParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoMacsCMacWithIV = { "CMacWithIV", "lib.org.bouncycastle.crypto.macs", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoMacsCMacWithIV;
}

@end

void LibOrgBouncycastleCryptoMacsCMacWithIV_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoMacsCMacWithIV *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
}

LibOrgBouncycastleCryptoMacsCMacWithIV *new_LibOrgBouncycastleCryptoMacsCMacWithIV_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsCMacWithIV, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoMacsCMacWithIV *create_LibOrgBouncycastleCryptoMacsCMacWithIV_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsCMacWithIV, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

void LibOrgBouncycastleCryptoMacsCMacWithIV_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleCryptoMacsCMacWithIV *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, macSizeInBits);
}

LibOrgBouncycastleCryptoMacsCMacWithIV *new_LibOrgBouncycastleCryptoMacsCMacWithIV_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsCMacWithIV, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, macSizeInBits)
}

LibOrgBouncycastleCryptoMacsCMacWithIV *create_LibOrgBouncycastleCryptoMacsCMacWithIV_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsCMacWithIV, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, macSizeInBits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoMacsCMacWithIV)
