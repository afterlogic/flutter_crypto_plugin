//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/util/PqcCryptoPrivateKeyInfoFactory.java
//

#ifndef PqcCryptoPrivateKeyInfoFactory_H
#define PqcCryptoPrivateKeyInfoFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Set;
@class LibOrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyInfoFactory : NSObject

#pragma mark Public

+ (LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)createPrivateKeyInfoWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey;

+ (LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)createPrivateKeyInfoWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey
                                                                                         withLibOrgBouncycastleAsn1ASN1Set:(LibOrgBouncycastleAsn1ASN1Set *)attributes;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyInfoFactory)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyInfoFactory_createPrivateKeyInfoWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyInfoFactory_createPrivateKeyInfoWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleAsn1ASN1Set_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey, LibOrgBouncycastleAsn1ASN1Set *attributes);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyInfoFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PqcCryptoPrivateKeyInfoFactory_H
