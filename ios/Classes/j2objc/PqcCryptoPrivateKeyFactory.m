//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/util/PqcCryptoPrivateKeyFactory.java
//

#include "ASN1Encodable.h"
#include "ASN1InputStream.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "AsymmetricKeyParameter.h"
#include "BCObjectIdentifiers.h"
#include "BDS.h"
#include "BDSStateMap.h"
#include "Digest.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NHPrivateKeyParameters.h"
#include "PQCObjectIdentifiers.h"
#include "Pack.h"
#include "PqcAsn1XMSSPrivateKey.h"
#include "PqcCryptoPrivateKeyFactory.h"
#include "PqcCryptoUtilUtils.h"
#include "PrivateKeyInfo.h"
#include "QTESLAPrivateKeyParameters.h"
#include "SPHINCS256KeyParams.h"
#include "SPHINCSPrivateKeyParameters.h"
#include "XMSSKeyParams.h"
#include "XMSSMTKeyParams.h"
#include "XMSSMTParameters.h"
#include "XMSSMTPrivateKeyParameters.h"
#include "XMSSParameters.h"
#include "XMSSPrivateKeyParameters.h"
#include "XMSSUtil.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/RuntimeException.h"

@interface LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory ()

+ (IOSShortArray *)convertWithByteArray:(IOSByteArray *)octets;

@end

__attribute__((unused)) static IOSShortArray *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_convertWithByteArray_(IOSByteArray *octets);

@implementation LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)privateKeyInfoData {
  return LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithByteArray_(privateKeyInfoData);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithJavaIoInputStream_(inStr);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo {
  return LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
}

+ (IOSShortArray *)convertWithByteArray:(IOSByteArray *)octets {
  return LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_convertWithByteArray_(octets);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "[S", 0xa, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createKeyWithByteArray:);
  methods[2].selector = @selector(createKeyWithJavaIoInputStream:);
  methods[3].selector = @selector(createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[4].selector = @selector(convertWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createKey", "[B", "LJavaIoIOException;", "LJavaIoInputStream;", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "convert" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory = { "PqcCryptoPrivateKeyFactory", "lib.org.bouncycastle.pqc.crypto.util", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory;
}

@end

void LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_init(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory *new_LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory, init)
}

LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory *create_LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory, init)
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithByteArray_(IOSByteArray *privateKeyInfoData) {
  LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_initialize();
  return LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(privateKeyInfoData)));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_initialize();
  return LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_([new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inStr) readObject]));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo) {
  LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_initialize();
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId = [((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) getPrivateKeyAlgorithm];
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOID = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOID)) onWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1BcBCObjectIdentifiers, qTESLA)]) {
    LibOrgBouncycastleAsn1ASN1OctetString *qTESLAPriv = LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]);
    return new_LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters_initWithInt_withByteArray_(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_qTeslaLookupSecurityCategoryWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_([keyInfo getPrivateKeyAlgorithm]), [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(qTESLAPriv)) getOctets]);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1BcBCObjectIdentifiers, sphincs256)]) {
    return new_LibOrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_withNSString_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]))) getOctets], LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_sphincs256LookupTreeAlgNameWithLibOrgBouncycastlePqcAsn1SPHINCS256KeyParams_(LibOrgBouncycastlePqcAsn1SPHINCS256KeyParams_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getParameters])));
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1BcBCObjectIdentifiers, newHope)]) {
    return new_LibOrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters_initWithShortArray_(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_convertWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]))) getOctets]));
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1BcBCObjectIdentifiers, xmss)]) {
    LibOrgBouncycastlePqcAsn1XMSSKeyParams *keyParams = LibOrgBouncycastlePqcAsn1XMSSKeyParams_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getParameters]);
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastlePqcAsn1XMSSKeyParams *) nil_chk(keyParams)) getTreeDigest])) getAlgorithm];
    LibOrgBouncycastlePqcAsn1PqcAsn1XMSSPrivateKey *xmssPrivateKey = LibOrgBouncycastlePqcAsn1PqcAsn1XMSSPrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
    @try {
      LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *keyBuilder = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(new_LibOrgBouncycastlePqcCryptoXmssXMSSParameters_initWithInt_withLibOrgBouncycastleCryptoDigest_([keyParams getHeight], LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(treeDigest))) withIndexWithInt:[((LibOrgBouncycastlePqcAsn1PqcAsn1XMSSPrivateKey *) nil_chk(xmssPrivateKey)) getIndex]])) withSecretKeySeedWithByteArray:[xmssPrivateKey getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[xmssPrivateKey getSecretKeyPRF]])) withPublicSeedWithByteArray:[xmssPrivateKey getPublicSeed]])) withRootWithByteArray:[xmssPrivateKey getRoot]];
      if ([xmssPrivateKey getBdsState] != nil) {
        LibOrgBouncycastlePqcCryptoXmssBDS *bds = (LibOrgBouncycastlePqcCryptoXmssBDS *) cast_chk(LibOrgBouncycastlePqcCryptoXmssXMSSUtil_deserializeWithByteArray_withIOSClass_([xmssPrivateKey getBdsState], LibOrgBouncycastlePqcCryptoXmssBDS_class_()), [LibOrgBouncycastlePqcCryptoXmssBDS class]);
        (void) [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk(keyBuilder)) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDS:[((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk(bds)) withWOTSDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:treeDigest]];
      }
      return [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk(keyBuilder)) build];
    }
    @catch (JavaLangClassNotFoundException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"ClassNotFoundException processing BDS state: ", [e getMessage]));
    }
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastlePqcAsn1PQCObjectIdentifiers, xmss_mt)]) {
    LibOrgBouncycastlePqcAsn1XMSSMTKeyParams *keyParams = LibOrgBouncycastlePqcAsn1XMSSMTKeyParams_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getParameters]);
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastlePqcAsn1XMSSMTKeyParams *) nil_chk(keyParams)) getTreeDigest])) getAlgorithm];
    @try {
      LibOrgBouncycastlePqcAsn1PqcAsn1XMSSPrivateKey *xmssMtPrivateKey = LibOrgBouncycastlePqcAsn1PqcAsn1XMSSPrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
      LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *keyBuilder = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(new_LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_initWithInt_withInt_withLibOrgBouncycastleCryptoDigest_([keyParams getHeight], [keyParams getLayers], LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(treeDigest))) withIndexWithLong:[((LibOrgBouncycastlePqcAsn1PqcAsn1XMSSPrivateKey *) nil_chk(xmssMtPrivateKey)) getIndex]])) withSecretKeySeedWithByteArray:[xmssMtPrivateKey getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[xmssMtPrivateKey getSecretKeyPRF]])) withPublicSeedWithByteArray:[xmssMtPrivateKey getPublicSeed]])) withRootWithByteArray:[xmssMtPrivateKey getRoot]];
      if ([xmssMtPrivateKey getBdsState] != nil) {
        LibOrgBouncycastlePqcCryptoXmssBDSStateMap *bdsState = (LibOrgBouncycastlePqcCryptoXmssBDSStateMap *) cast_chk(LibOrgBouncycastlePqcCryptoXmssXMSSUtil_deserializeWithByteArray_withIOSClass_([xmssMtPrivateKey getBdsState], LibOrgBouncycastlePqcCryptoXmssBDSStateMap_class_()), [LibOrgBouncycastlePqcCryptoXmssBDSStateMap class]);
        (void) [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk(keyBuilder)) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDSStateMap:[((LibOrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(bdsState)) withWOTSDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:treeDigest]];
      }
      return [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk(keyBuilder)) build];
    }
    @catch (JavaLangClassNotFoundException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"ClassNotFoundException processing BDS state: ", [e getMessage]));
    }
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"algorithm identifier in private key not recognised");
  }
}

IOSShortArray *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_convertWithByteArray_(IOSByteArray *octets) {
  LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory_initialize();
  IOSShortArray *rv = [IOSShortArray newArrayWithLength:((IOSByteArray *) nil_chk(octets))->size_ / 2];
  for (jint i = 0; i != rv->size_; i++) {
    *IOSShortArray_GetRef(rv, i) = LibOrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(octets, i * 2);
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPrivateKeyFactory)
