//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/OOBCertHash.java
//

#ifndef OOBCertHash_H
#define OOBCertHash_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CrmfCertId;
@class LibOrgBouncycastleAsn1DERBitString;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;

@interface LibOrgBouncycastleAsn1CmpOOBCertHash : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)hashAlg
                                           withLibOrgBouncycastleAsn1CrmfCertId:(LibOrgBouncycastleAsn1CrmfCertId *)certId
                                                                  withByteArray:(IOSByteArray *)hashVal;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)hashAlg
                                           withLibOrgBouncycastleAsn1CrmfCertId:(LibOrgBouncycastleAsn1CrmfCertId *)certId
                                         withLibOrgBouncycastleAsn1DERBitString:(LibOrgBouncycastleAsn1DERBitString *)hashVal;

- (LibOrgBouncycastleAsn1CrmfCertId *)getCertId;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getHashAlg;

- (LibOrgBouncycastleAsn1DERBitString *)getHashVal;

+ (LibOrgBouncycastleAsn1CmpOOBCertHash *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmpOOBCertHash)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpOOBCertHash *LibOrgBouncycastleAsn1CmpOOBCertHash_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpOOBCertHash_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CrmfCertId_withByteArray_(LibOrgBouncycastleAsn1CmpOOBCertHash *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlg, LibOrgBouncycastleAsn1CrmfCertId *certId, IOSByteArray *hashVal);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpOOBCertHash *new_LibOrgBouncycastleAsn1CmpOOBCertHash_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CrmfCertId_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlg, LibOrgBouncycastleAsn1CrmfCertId *certId, IOSByteArray *hashVal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpOOBCertHash *create_LibOrgBouncycastleAsn1CmpOOBCertHash_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CrmfCertId_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlg, LibOrgBouncycastleAsn1CrmfCertId *certId, IOSByteArray *hashVal);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpOOBCertHash_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CrmfCertId_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1CmpOOBCertHash *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlg, LibOrgBouncycastleAsn1CrmfCertId *certId, LibOrgBouncycastleAsn1DERBitString *hashVal);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpOOBCertHash *new_LibOrgBouncycastleAsn1CmpOOBCertHash_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CrmfCertId_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlg, LibOrgBouncycastleAsn1CrmfCertId *certId, LibOrgBouncycastleAsn1DERBitString *hashVal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpOOBCertHash *create_LibOrgBouncycastleAsn1CmpOOBCertHash_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1CrmfCertId_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlg, LibOrgBouncycastleAsn1CrmfCertId *certId, LibOrgBouncycastleAsn1DERBitString *hashVal);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmpOOBCertHash)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OOBCertHash_H
