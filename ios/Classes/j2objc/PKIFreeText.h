//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/PKIFreeText.java
//

#ifndef PKIFreeText_H
#define PKIFreeText_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1DERUTF8String;

@interface LibOrgBouncycastleAsn1CmpPKIFreeText : LibOrgBouncycastleAsn1ASN1Object {
 @public
  LibOrgBouncycastleAsn1ASN1Sequence *strings_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1DERUTF8String:(LibOrgBouncycastleAsn1DERUTF8String *)p;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1DERUTF8StringArray:(IOSObjectArray *)strs;

- (instancetype __nonnull)initWithNSString:(NSString *)p;

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)strs;

+ (LibOrgBouncycastleAsn1CmpPKIFreeText *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                    withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1CmpPKIFreeText *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1DERUTF8String *)getStringAtWithInt:(jint)i;

- (jint)size;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmpPKIFreeText)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmpPKIFreeText, strings_, LibOrgBouncycastleAsn1ASN1Sequence *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *LibOrgBouncycastleAsn1CmpPKIFreeText_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *LibOrgBouncycastleAsn1CmpPKIFreeText_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpPKIFreeText_initWithLibOrgBouncycastleAsn1DERUTF8String_(LibOrgBouncycastleAsn1CmpPKIFreeText *self, LibOrgBouncycastleAsn1DERUTF8String *p);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *new_LibOrgBouncycastleAsn1CmpPKIFreeText_initWithLibOrgBouncycastleAsn1DERUTF8String_(LibOrgBouncycastleAsn1DERUTF8String *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *create_LibOrgBouncycastleAsn1CmpPKIFreeText_initWithLibOrgBouncycastleAsn1DERUTF8String_(LibOrgBouncycastleAsn1DERUTF8String *p);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpPKIFreeText_initWithNSString_(LibOrgBouncycastleAsn1CmpPKIFreeText *self, NSString *p);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *new_LibOrgBouncycastleAsn1CmpPKIFreeText_initWithNSString_(NSString *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *create_LibOrgBouncycastleAsn1CmpPKIFreeText_initWithNSString_(NSString *p);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpPKIFreeText_initWithLibOrgBouncycastleAsn1DERUTF8StringArray_(LibOrgBouncycastleAsn1CmpPKIFreeText *self, IOSObjectArray *strs);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *new_LibOrgBouncycastleAsn1CmpPKIFreeText_initWithLibOrgBouncycastleAsn1DERUTF8StringArray_(IOSObjectArray *strs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *create_LibOrgBouncycastleAsn1CmpPKIFreeText_initWithLibOrgBouncycastleAsn1DERUTF8StringArray_(IOSObjectArray *strs);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpPKIFreeText_initWithNSStringArray_(LibOrgBouncycastleAsn1CmpPKIFreeText *self, IOSObjectArray *strs);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *new_LibOrgBouncycastleAsn1CmpPKIFreeText_initWithNSStringArray_(IOSObjectArray *strs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPKIFreeText *create_LibOrgBouncycastleAsn1CmpPKIFreeText_initWithNSStringArray_(IOSObjectArray *strs);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmpPKIFreeText)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PKIFreeText_H
