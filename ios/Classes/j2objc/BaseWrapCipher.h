//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/BaseWrapCipher.java
//

#ifndef BaseWrapCipher_H
#define BaseWrapCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PBE.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/security/InvalidKeyException.h"
#include "javax/crypto/CipherSpi.h"

@class IOSByteArray;
@class JavaLangThrowable;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoWrapper;

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher : JavaxCryptoCipherSpi < LibOrgBouncycastleJcajceProviderSymmetricUtilPBE > {
 @public
  jint pbeType_;
  jint pbeHash_;
  jint pbeKeySize_;
  jint pbeIvSize_;
  JavaSecurityAlgorithmParameters *engineParams_;
  id<LibOrgBouncycastleCryptoWrapper> wrapEngine_;
}

#pragma mark Protected

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoWrapper:(id<LibOrgBouncycastleCryptoWrapper>)wrapEngine;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoWrapper:(id<LibOrgBouncycastleCryptoWrapper>)wrapEngine
                                                          withInt:(jint)ivSize;

- (JavaSecurityAlgorithmParameters *)createParametersInstanceWithNSString:(NSString *)algorithm;

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen;

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset;

- (jint)engineGetBlockSize;

- (IOSByteArray *)engineGetIV;

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (jint)engineGetOutputSizeWithInt:(jint)inputLen;

- (JavaSecurityAlgorithmParameters *)engineGetParameters;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineSetModeWithNSString:(NSString *)mode;

- (void)engineSetPaddingWithNSString:(NSString *)padding;

- (id<JavaSecurityKey>)engineUnwrapWithByteArray:(IOSByteArray *)wrappedKey
                                    withNSString:(NSString *)wrappedKeyAlgorithm
                                         withInt:(jint)wrappedKeyType;

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen;

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset;

- (IOSByteArray *)engineWrapWithJavaSecurityKey:(id<JavaSecurityKey>)key;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher, engineParams_, JavaSecurityAlgorithmParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher, wrapEngine_, id<LibOrgBouncycastleCryptoWrapper>)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_init(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher *self);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_initWithLibOrgBouncycastleCryptoWrapper_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher *self, id<LibOrgBouncycastleCryptoWrapper> wrapEngine);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_initWithLibOrgBouncycastleCryptoWrapper_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher *self, id<LibOrgBouncycastleCryptoWrapper> wrapEngine, jint ivSize);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher)

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream : JavaIoByteArrayOutputStream

#pragma mark Public

- (instancetype __nonnull)init;

- (void)erase;

- (IOSByteArray *)getBuf;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream_init(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_ErasableOutputStream)

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException : JavaSecurityInvalidKeyException

#pragma mark Public

- (JavaLangThrowable *)getCause;

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString *)msg
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException_initWithNSString_withJavaLangThrowable_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException *self, NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher_InvalidKeyOrParametersException)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BaseWrapCipher_H
