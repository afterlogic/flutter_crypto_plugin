//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/OpenSSHPrivateKeyUtil.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BigIntegers.h"
#include "DERSequence.h"
#include "DERTaggedObject.h"
#include "DSAParameters.h"
#include "DSAPrivateKeyParameters.h"
#include "ECCurve.h"
#include "ECNamedCurveTable.h"
#include "ECNamedDomainParameters.h"
#include "ECPoint.h"
#include "ECPrivateKey.h"
#include "ECPrivateKeyParameters.h"
#include "Ed25519PrivateKeyParameters.h"
#include "Ed25519PublicKeyParameters.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OpenSSHPrivateKeyUtil.h"
#include "OpenSSHPublicKeyUtil.h"
#include "PrivateKeyInfo.h"
#include "PrivateKeyInfoFactory.h"
#include "RSAPrivateCrtKeyParameters.h"
#include "RSAPrivateKey.h"
#include "SSHBuffer.h"
#include "SSHBuilder.h"
#include "Strings.h"
#include "X9ECParameters.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil ()

- (instancetype)init;

+ (jboolean)allIntegersWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)sequence;

@end

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_init(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil *new_LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil *create_LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_init(void);

__attribute__((unused)) static jboolean LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_allIntegersWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *sequence);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil)

IOSByteArray *LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_AUTH_MAGIC;

@implementation LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil

+ (IOSByteArray *)AUTH_MAGIC {
  return LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_AUTH_MAGIC;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)encodePrivateKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)params {
  return LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_encodePrivateKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(params);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)parsePrivateKeyBlobWithByteArray:(IOSByteArray *)blob {
  return LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_parsePrivateKeyBlobWithByteArray_(blob);
}

+ (jboolean)allIntegersWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)sequence {
  return LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_allIntegersWithLibOrgBouncycastleAsn1ASN1Sequence_(sequence);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodePrivateKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[2].selector = @selector(parsePrivateKeyBlobWithByteArray:);
  methods[3].selector = @selector(allIntegersWithLibOrgBouncycastleAsn1ASN1Sequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "AUTH_MAGIC", "[B", .constantValue.asLong = 0, 0x18, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "encodePrivateKey", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "LJavaIoIOException;", "parsePrivateKeyBlob", "[B", "allIntegers", "LLibOrgBouncycastleAsn1ASN1Sequence;", &LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_AUTH_MAGIC };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil = { "OpenSSHPrivateKeyUtil", "lib.org.bouncycastle.crypto.util", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil class]) {
    LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_AUTH_MAGIC = LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@"openssh-key-v1\x00");
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil)
  }
}

@end

void LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_init(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil *new_LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil, init)
}

LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil *create_LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil, init)
}

IOSByteArray *LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_encodePrivateKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *params) {
  LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_initialize();
  if (params == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"param is null");
  }
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]]) {
    LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *pInfo = LibOrgBouncycastleCryptoUtilPrivateKeyInfoFactory_createPrivateKeyInfoWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(params);
    return [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(pInfo)) parsePrivateKey])) toASN1Primitive])) getEncoded];
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]]) {
    LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *pInfo = LibOrgBouncycastleCryptoUtilPrivateKeyInfoFactory_createPrivateKeyInfoWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(params);
    return [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(pInfo)) parsePrivateKey])) toASN1Primitive])) getEncoded];
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters class]]) {
    LibOrgBouncycastleAsn1ASN1EncodableVector *vec = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
    [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(0)];
    [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params) getParameters])) getP])];
    [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params) getParameters])) getQ])];
    [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params) getParameters])) getG])];
    JavaMathBigInteger *pubKey = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params) getParameters])) getG])) modPowWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params) getX] withJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params) getParameters])) getP]];
    [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(pubKey)];
    [vec addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) params) getX])];
    @try {
      return [new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(vec) getEncoded];
    }
    @catch (JavaLangException *ex) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"unable to encode DSAPrivateKeyParameters ", [ex getMessage]));
    }
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters class]]) {
    LibOrgBouncycastleCryptoUtilSSHBuilder *builder = new_LibOrgBouncycastleCryptoUtilSSHBuilder_init();
    [builder writeWithByteArray:LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_AUTH_MAGIC];
    [builder writeStringWithNSString:@"none"];
    [builder writeStringWithNSString:@"none"];
    [builder u32WithLong:0];
    [builder u32WithLong:1];
    LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *publicKeyParameters = [((LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters *) params) generatePublicKey];
    IOSByteArray *pkEncoded = LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(publicKeyParameters);
    [builder rawArrayWithByteArray:pkEncoded];
    LibOrgBouncycastleCryptoUtilSSHBuilder *pkBuild = new_LibOrgBouncycastleCryptoUtilSSHBuilder_init();
    [pkBuild u32WithLong:(jint) 0x00ff00ff];
    [pkBuild u32WithLong:(jint) 0x00ff00ff];
    [pkBuild writeStringWithNSString:@"ssh-ed25519"];
    IOSByteArray *pubKeyEncoded = [((LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters *) params) generatePublicKey])) getEncoded];
    [pkBuild rawArrayWithByteArray:pubKeyEncoded];
    [pkBuild rawArrayWithByteArray:LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_([((LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters *) params) getEncoded], pubKeyEncoded)];
    [pkBuild u32WithLong:0];
    [builder rawArrayWithByteArray:[pkBuild getBytes]];
    return [builder getBytes];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"unable to convert ", [[params java_getClass] getName], @" to openssh private key"));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_parsePrivateKeyBlobWithByteArray_(IOSByteArray *blob) {
  LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_initialize();
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *result = nil;
  if (IOSByteArray_Get(nil_chk(blob), 0) == (jint) 0x30) {
    LibOrgBouncycastleAsn1ASN1Sequence *sequence = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(blob);
    if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(sequence)) size] == 6) {
      if (LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_allIntegersWithLibOrgBouncycastleAsn1ASN1Sequence_(sequence) && [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([sequence getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1Integer class])))) getPositiveValue])) isEqual:JreLoadStatic(LibOrgBouncycastleUtilBigIntegers, ZERO)]) {
        result = new_LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([sequence getObjectAtWithInt:5], [LibOrgBouncycastleAsn1ASN1Integer class])))) getPositiveValue], new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([sequence getObjectAtWithInt:1], [LibOrgBouncycastleAsn1ASN1Integer class])))) getPositiveValue], [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([sequence getObjectAtWithInt:2], [LibOrgBouncycastleAsn1ASN1Integer class])))) getPositiveValue], [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([sequence getObjectAtWithInt:3], [LibOrgBouncycastleAsn1ASN1Integer class])))) getPositiveValue]));
      }
    }
    else if ([sequence size] == 9) {
      if (LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_allIntegersWithLibOrgBouncycastleAsn1ASN1Sequence_(sequence) && [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([sequence getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1Integer class])))) getPositiveValue])) isEqual:JreLoadStatic(LibOrgBouncycastleUtilBigIntegers, ZERO)]) {
        LibOrgBouncycastleAsn1PkcsRSAPrivateKey *rsaPrivateKey = LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_(sequence);
        result = new_LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1PkcsRSAPrivateKey *) nil_chk(rsaPrivateKey)) getModulus], [rsaPrivateKey getPublicExponent], [rsaPrivateKey getPrivateExponent], [rsaPrivateKey getPrime1], [rsaPrivateKey getPrime2], [rsaPrivateKey getExponent1], [rsaPrivateKey getExponent2], [rsaPrivateKey getCoefficient]);
      }
    }
    else if ([sequence size] == 4) {
      if ([[sequence getObjectAtWithInt:3] isKindOfClass:[LibOrgBouncycastleAsn1DERTaggedObject class]] && [[sequence getObjectAtWithInt:2] isKindOfClass:[LibOrgBouncycastleAsn1DERTaggedObject class]]) {
        LibOrgBouncycastleAsn1SecECPrivateKey *ecPrivateKey = LibOrgBouncycastleAsn1SecECPrivateKey_getInstanceWithId_(sequence);
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOID = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([((LibOrgBouncycastleAsn1SecECPrivateKey *) nil_chk(ecPrivateKey)) getParameters], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        LibOrgBouncycastleAsn1X9X9ECParameters *x9Params = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOID);
        result = new_LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_([ecPrivateKey getKey], new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curveOID, [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9Params)) getCurve], [x9Params getG], [x9Params getN], [x9Params getH], [x9Params getSeed]));
      }
    }
  }
  else {
    LibOrgBouncycastleCryptoUtilSSHBuffer *kIn = new_LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_withByteArray_(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_AUTH_MAGIC, blob);
    NSString *cipherName = LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_([kIn readString]);
    if (![@"none" isEqual:cipherName]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"encrypted keys not supported");
    }
    (void) [kIn readString];
    (void) [kIn readString];
    jlong publicKeyCount = [kIn readU32];
    for (jint l = 0; l != publicKeyCount; l++) {
      (void) LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithByteArray_([kIn readString]);
    }
    LibOrgBouncycastleCryptoUtilSSHBuffer *pkIn = new_LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_([kIn readPaddedString]);
    jint check1 = [pkIn readU32];
    jint check2 = [pkIn readU32];
    if (check1 != check2) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"private key check values are not the same");
    }
    NSString *keyType = LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_([pkIn readString]);
    if ([@"ssh-ed25519" isEqual:keyType]) {
      (void) [pkIn readString];
      IOSByteArray *edPrivateKey = [pkIn readString];
      result = new_LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters_initWithByteArray_withInt_(edPrivateKey, 0);
    }
    else {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"can not parse private key of type ", keyType));
    }
  }
  if (result == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unable to parse key");
  }
  return result;
}

jboolean LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_allIntegersWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *sequence) {
  LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil_initialize();
  for (jint t = 0; t < [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(sequence)) size]; t++) {
    if (!([[sequence getObjectAtWithInt:t] isKindOfClass:[LibOrgBouncycastleAsn1ASN1Integer class]])) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilOpenSSHPrivateKeyUtil)
