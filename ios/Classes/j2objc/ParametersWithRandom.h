//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/ParametersWithRandom.java
//

#ifndef ParametersWithRandom_H
#define ParametersWithRandom_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CipherParameters.h"
#include "J2ObjC_header.h"

@class JavaSecuritySecureRandom;

@interface LibOrgBouncycastleCryptoParamsParametersWithRandom : NSObject < LibOrgBouncycastleCryptoCipherParameters >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters
                                              withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (id<LibOrgBouncycastleCryptoCipherParameters>)getParameters;

- (JavaSecuritySecureRandom *)getRandom;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsParametersWithRandom)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoParamsParametersWithRandom *self, id<LibOrgBouncycastleCryptoCipherParameters> parameters, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsParametersWithRandom *new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(id<LibOrgBouncycastleCryptoCipherParameters> parameters, JavaSecuritySecureRandom *random) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsParametersWithRandom *create_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(id<LibOrgBouncycastleCryptoCipherParameters> parameters, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_(LibOrgBouncycastleCryptoParamsParametersWithRandom *self, id<LibOrgBouncycastleCryptoCipherParameters> parameters);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsParametersWithRandom *new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_(id<LibOrgBouncycastleCryptoCipherParameters> parameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsParametersWithRandom *create_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_(id<LibOrgBouncycastleCryptoCipherParameters> parameters);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsParametersWithRandom)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ParametersWithRandom_H
