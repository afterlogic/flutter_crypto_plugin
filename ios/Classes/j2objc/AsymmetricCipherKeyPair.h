//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/AsymmetricCipherKeyPair.java
//

#ifndef AsymmetricCipherKeyPair_H
#define AsymmetricCipherKeyPair_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoAsymmetricCipherKeyPair : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicParam
                              withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateParam;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)publicParam
                              withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)privateParam;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPrivate;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublic;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *self, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicParam, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateParam);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicParam, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateParam) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *create_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicParam, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateParam);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *self, id<LibOrgBouncycastleCryptoCipherParameters> publicParam, id<LibOrgBouncycastleCryptoCipherParameters> privateParam);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_(id<LibOrgBouncycastleCryptoCipherParameters> publicParam, id<LibOrgBouncycastleCryptoCipherParameters> privateParam) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *create_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_(id<LibOrgBouncycastleCryptoCipherParameters> publicParam, id<LibOrgBouncycastleCryptoCipherParameters> privateParam);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // AsymmetricCipherKeyPair_H
