//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPEncryptedDataList.java
//

#include "BCPGInputStream.h"
#include "InputStreamPacket.h"
#include "J2ObjC_source.h"
#include "PGPEncryptedDataList.h"
#include "PGPPBEEncryptedData.h"
#include "PGPPublicKeyEncryptedData.h"
#include "Packet.h"
#include "PacketTags.h"
#include "PublicKeyEncSessionPacket.h"
#include "SymmetricKeyEncSessionPacket.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@implementation LibOrgBouncycastleOpenpgpPGPEncryptedDataList

- (instancetype)initWithLibOrgBouncycastleBcpgBCPGInputStream:(LibOrgBouncycastleBcpgBCPGInputStream *)pIn {
  LibOrgBouncycastleOpenpgpPGPEncryptedDataList_initWithLibOrgBouncycastleBcpgBCPGInputStream_(self, pIn);
  return self;
}

- (id)getWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(list_)) getWithInt:index];
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(list_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilList>) nil_chk(list_)) isEmpty];
}

- (id<JavaUtilIterator>)getEncryptedDataObjects {
  return [((id<JavaUtilList>) nil_chk(list_)) iterator];
}

- (id<JavaUtilIterator>)iterator {
  return [self getEncryptedDataObjects];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgBCPGInputStream:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(getEncryptedDataObjects);
  methods[5].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "data_", "LLibOrgBouncycastleBcpgInputStreamPacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleBcpgBCPGInputStream;", "LJavaIoIOException;", "get", "I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPEncryptedDataList = { "PGPEncryptedDataList", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPEncryptedDataList;
}

@end

void LibOrgBouncycastleOpenpgpPGPEncryptedDataList_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleOpenpgpPGPEncryptedDataList *self, LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  NSObject_init(self);
  self->list_ = new_JavaUtilArrayList_init();
  while ([((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(pIn)) nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_PUBLIC_KEY_ENC_SESSION || [pIn nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_SYMMETRIC_KEY_ENC_SESSION) {
    [((id<JavaUtilList>) nil_chk(self->list_)) addWithId:[pIn readPacket]];
  }
  self->data_ = (LibOrgBouncycastleBcpgInputStreamPacket *) cast_chk([pIn readPacket], [LibOrgBouncycastleBcpgInputStreamPacket class]);
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(self->list_)) size]; i++) {
    if ([[((id<JavaUtilList>) nil_chk(self->list_)) getWithInt:i] isKindOfClass:[LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket class]]) {
      (void) [((id<JavaUtilList>) nil_chk(self->list_)) setWithInt:i withId:new_LibOrgBouncycastleOpenpgpPGPPBEEncryptedData_initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) cast_chk([self->list_ getWithInt:i], [LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket class]), self->data_)];
    }
    else {
      (void) [((id<JavaUtilList>) nil_chk(self->list_)) setWithInt:i withId:new_LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_((LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *) cast_chk([self->list_ getWithInt:i], [LibOrgBouncycastleBcpgPublicKeyEncSessionPacket class]), self->data_)];
    }
  }
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataList *new_LibOrgBouncycastleOpenpgpPGPEncryptedDataList_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataList, initWithLibOrgBouncycastleBcpgBCPGInputStream_, pIn)
}

LibOrgBouncycastleOpenpgpPGPEncryptedDataList *create_LibOrgBouncycastleOpenpgpPGPEncryptedDataList_initWithLibOrgBouncycastleBcpgBCPGInputStream_(LibOrgBouncycastleBcpgBCPGInputStream *pIn) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPEncryptedDataList, initWithLibOrgBouncycastleBcpgBCPGInputStream_, pIn)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPEncryptedDataList)
