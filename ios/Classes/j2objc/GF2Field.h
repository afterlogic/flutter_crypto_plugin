//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/rainbow/util/GF2Field.java
//

#ifndef GF2Field_H
#define GF2Field_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSShortArray;

@interface LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field : NSObject
@property (readonly, class) jint MASK NS_SWIFT_NAME(MASK);
@property (readonly, class) IOSShortArray *exps NS_SWIFT_NAME(exps);
@property (readonly, class) IOSShortArray *logs NS_SWIFT_NAME(logs);

+ (jint)MASK;

+ (IOSShortArray *)exps;

+ (IOSShortArray *)logs;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jshort)addElemWithShort:(jshort)x
                 withShort:(jshort)y;

+ (jshort)getExpWithShort:(jshort)x;

+ (jshort)getLogWithShort:(jshort)x;

+ (jshort)invElemWithShort:(jshort)x;

+ (jshort)multElemWithShort:(jshort)x
                  withShort:(jshort)y;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field)

inline jint LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_get_MASK(void);
#define LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_MASK 255
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field, MASK, jint)

inline IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_get_exps(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_exps;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field, exps, IOSShortArray *)

inline IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_get_logs(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_logs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field, logs, IOSShortArray *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_init(LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field *new_LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field *create_LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_init(void);

FOUNDATION_EXPORT jshort LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(jshort x, jshort y);

FOUNDATION_EXPORT jshort LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_invElemWithShort_(jshort x);

FOUNDATION_EXPORT jshort LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(jshort x, jshort y);

FOUNDATION_EXPORT jshort LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_getExpWithShort_(jshort x);

FOUNDATION_EXPORT jshort LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field_getLogWithShort_(jshort x);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoRainbowUtilGF2Field)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // GF2Field_H
