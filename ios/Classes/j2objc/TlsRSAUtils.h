//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsRSAUtils.java
//

#ifndef TlsRSAUtils_H
#define TlsRSAUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoOutputStream;
@class LibOrgBouncycastleCryptoParamsRSAKeyParameters;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsTlsRSAUtils : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (IOSByteArray *)generateEncryptedPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                         withLibOrgBouncycastleCryptoParamsRSAKeyParameters:(LibOrgBouncycastleCryptoParamsRSAKeyParameters *)rsaServerPublicKey
                                                                     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (IOSByteArray *)safeDecryptPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                   withLibOrgBouncycastleCryptoParamsRSAKeyParameters:(LibOrgBouncycastleCryptoParamsRSAKeyParameters *)rsaServerPrivateKey
                                                                        withByteArray:(IOSByteArray *)encryptedPreMasterSecret;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsRSAUtils)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsRSAUtils_init(LibOrgBouncycastleCryptoTlsTlsRSAUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsRSAUtils *new_LibOrgBouncycastleCryptoTlsTlsRSAUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsRSAUtils *create_LibOrgBouncycastleCryptoTlsTlsRSAUtils_init(void);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsRSAUtils_generateEncryptedPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoParamsRSAKeyParameters_withJavaIoOutputStream_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoParamsRSAKeyParameters *rsaServerPublicKey, JavaIoOutputStream *output);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsRSAUtils_safeDecryptPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoParamsRSAKeyParameters_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoParamsRSAKeyParameters *rsaServerPrivateKey, IOSByteArray *encryptedPreMasterSecret);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsRSAUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsRSAUtils_H
