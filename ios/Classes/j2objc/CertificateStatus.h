//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CertificateStatus.java
//

#ifndef CertificateStatus_H
#define CertificateStatus_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaIoInputStream;
@class JavaIoOutputStream;
@class LibOrgBouncycastleAsn1OcspOCSPResponse;

@interface LibOrgBouncycastleCryptoTlsCertificateStatus : NSObject {
 @public
  jshort statusType_;
  id response_;
}

#pragma mark Public

- (instancetype __nonnull)initWithShort:(jshort)statusType
                                 withId:(id)response;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (LibOrgBouncycastleAsn1OcspOCSPResponse *)getOCSPResponse;

- (id)getResponse;

- (jshort)getStatusType;

+ (LibOrgBouncycastleCryptoTlsCertificateStatus *)parseWithJavaIoInputStream:(JavaIoInputStream *)input;

#pragma mark Protected

+ (jboolean)isCorrectTypeWithShort:(jshort)statusType
                            withId:(id)response;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsCertificateStatus)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCertificateStatus, response_, id)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCertificateStatus_initWithShort_withId_(LibOrgBouncycastleCryptoTlsCertificateStatus *self, jshort statusType, id response);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateStatus *new_LibOrgBouncycastleCryptoTlsCertificateStatus_initWithShort_withId_(jshort statusType, id response) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateStatus *create_LibOrgBouncycastleCryptoTlsCertificateStatus_initWithShort_withId_(jshort statusType, id response);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateStatus *LibOrgBouncycastleCryptoTlsCertificateStatus_parseWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsCertificateStatus_isCorrectTypeWithShort_withId_(jshort statusType, id response);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCertificateStatus)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificateStatus_H
