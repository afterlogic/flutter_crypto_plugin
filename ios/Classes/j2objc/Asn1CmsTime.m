//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cms/Asn1CmsTime.java
//

#include "ASN1GeneralizedTime.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1TaggedObject.h"
#include "ASN1UTCTime.h"
#include "Asn1CmsTime.h"
#include "DERGeneralizedTime.h"
#include "DERUTCTime.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"

@implementation LibOrgBouncycastleAsn1CmsAsn1CmsTime

+ (LibOrgBouncycastleAsn1CmsAsn1CmsTime *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                    withBoolean:(jboolean)explicit_ {
  return LibOrgBouncycastleAsn1CmsAsn1CmsTime_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Primitive:(LibOrgBouncycastleAsn1ASN1Primitive *)time {
  LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithLibOrgBouncycastleAsn1ASN1Primitive_(self, time);
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time {
  LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithJavaUtilDate_(self, time);
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithJavaUtilDate_withJavaUtilLocale_(self, time, locale);
  return self;
}

+ (LibOrgBouncycastleAsn1CmsAsn1CmsTime *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1CmsAsn1CmsTime_getInstanceWithId_(obj);
}

- (NSString *)getTime {
  if ([time_ isKindOfClass:[LibOrgBouncycastleAsn1ASN1UTCTime class]]) {
    return [((LibOrgBouncycastleAsn1ASN1UTCTime *) nil_chk(((LibOrgBouncycastleAsn1ASN1UTCTime *) time_))) getAdjustedTime];
  }
  else {
    return [((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk(((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) cast_chk(time_, [LibOrgBouncycastleAsn1ASN1GeneralizedTime class])))) getTime];
  }
}

- (JavaUtilDate *)getDate {
  @try {
    if ([time_ isKindOfClass:[LibOrgBouncycastleAsn1ASN1UTCTime class]]) {
      return [((LibOrgBouncycastleAsn1ASN1UTCTime *) nil_chk(((LibOrgBouncycastleAsn1ASN1UTCTime *) time_))) getAdjustedDate];
    }
    else {
      return [((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk(((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) cast_chk(time_, [LibOrgBouncycastleAsn1ASN1GeneralizedTime class])))) getDate];
    }
  }
  @catch (JavaTextParseException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"invalid date string: ", [e getMessage]));
  }
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return time_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1CmsAsn1CmsTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CmsAsn1CmsTime;", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Primitive:);
  methods[2].selector = @selector(initWithJavaUtilDate:);
  methods[3].selector = @selector(initWithJavaUtilDate:withJavaUtilLocale:);
  methods[4].selector = @selector(getInstanceWithId:);
  methods[5].selector = @selector(getTime);
  methods[6].selector = @selector(getDate);
  methods[7].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "time_", "LLibOrgBouncycastleAsn1ASN1Primitive;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LLibOrgBouncycastleAsn1ASN1TaggedObject;Z", "LLibOrgBouncycastleAsn1ASN1Primitive;", "LJavaUtilDate;", "LJavaUtilDate;LJavaUtilLocale;", "LNSObject;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1CmsAsn1CmsTime = { "Asn1CmsTime", "lib.org.bouncycastle.asn1.cms", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1CmsAsn1CmsTime;
}

@end

LibOrgBouncycastleAsn1CmsAsn1CmsTime *LibOrgBouncycastleAsn1CmsAsn1CmsTime_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  LibOrgBouncycastleAsn1CmsAsn1CmsTime_initialize();
  return LibOrgBouncycastleAsn1CmsAsn1CmsTime_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(obj)) getObject]);
}

void LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithLibOrgBouncycastleAsn1ASN1Primitive_(LibOrgBouncycastleAsn1CmsAsn1CmsTime *self, LibOrgBouncycastleAsn1ASN1Primitive *time) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  if (!([time isKindOfClass:[LibOrgBouncycastleAsn1ASN1UTCTime class]]) && !([time isKindOfClass:[LibOrgBouncycastleAsn1ASN1GeneralizedTime class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown object passed to Asn1CmsTime");
  }
  self->time_ = time;
}

LibOrgBouncycastleAsn1CmsAsn1CmsTime *new_LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithLibOrgBouncycastleAsn1ASN1Primitive_(LibOrgBouncycastleAsn1ASN1Primitive *time) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmsAsn1CmsTime, initWithLibOrgBouncycastleAsn1ASN1Primitive_, time)
}

LibOrgBouncycastleAsn1CmsAsn1CmsTime *create_LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithLibOrgBouncycastleAsn1ASN1Primitive_(LibOrgBouncycastleAsn1ASN1Primitive *time) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmsAsn1CmsTime, initWithLibOrgBouncycastleAsn1ASN1Primitive_, time)
}

void LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithJavaUtilDate_(LibOrgBouncycastleAsn1CmsAsn1CmsTime *self, JavaUtilDate *time) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  JavaUtilSimpleTimeZone *tz = new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z");
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss");
  [dateF setTimeZoneWithJavaUtilTimeZone:tz];
  NSString *d = JreStrcat("$C", [dateF formatWithJavaUtilDate:time], 'Z');
  jint year = JavaLangInteger_parseIntWithNSString_([d java_substring:0 endIndex:4]);
  if (year < 1950 || year > 2049) {
    self->time_ = new_LibOrgBouncycastleAsn1DERGeneralizedTime_initWithNSString_(d);
  }
  else {
    self->time_ = new_LibOrgBouncycastleAsn1DERUTCTime_initWithNSString_([d java_substring:2]);
  }
}

LibOrgBouncycastleAsn1CmsAsn1CmsTime *new_LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmsAsn1CmsTime, initWithJavaUtilDate_, time)
}

LibOrgBouncycastleAsn1CmsAsn1CmsTime *create_LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmsAsn1CmsTime, initWithJavaUtilDate_, time)
}

void LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithJavaUtilDate_withJavaUtilLocale_(LibOrgBouncycastleAsn1CmsAsn1CmsTime *self, JavaUtilDate *time, JavaUtilLocale *locale) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  JavaUtilSimpleTimeZone *tz = new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z");
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyyMMddHHmmss", locale);
  [dateF setTimeZoneWithJavaUtilTimeZone:tz];
  NSString *d = JreStrcat("$C", [dateF formatWithJavaUtilDate:time], 'Z');
  jint year = JavaLangInteger_parseIntWithNSString_([d java_substring:0 endIndex:4]);
  if (year < 1950 || year > 2049) {
    self->time_ = new_LibOrgBouncycastleAsn1DERGeneralizedTime_initWithNSString_(d);
  }
  else {
    self->time_ = new_LibOrgBouncycastleAsn1DERUTCTime_initWithNSString_([d java_substring:2]);
  }
}

LibOrgBouncycastleAsn1CmsAsn1CmsTime *new_LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmsAsn1CmsTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}

LibOrgBouncycastleAsn1CmsAsn1CmsTime *create_LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmsAsn1CmsTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}

LibOrgBouncycastleAsn1CmsAsn1CmsTime *LibOrgBouncycastleAsn1CmsAsn1CmsTime_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1CmsAsn1CmsTime_initialize();
  if (obj == nil || [obj isKindOfClass:[LibOrgBouncycastleAsn1CmsAsn1CmsTime class]]) {
    return (LibOrgBouncycastleAsn1CmsAsn1CmsTime *) cast_chk(obj, [LibOrgBouncycastleAsn1CmsAsn1CmsTime class]);
  }
  else if ([obj isKindOfClass:[LibOrgBouncycastleAsn1ASN1UTCTime class]]) {
    return new_LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithLibOrgBouncycastleAsn1ASN1Primitive_((LibOrgBouncycastleAsn1ASN1UTCTime *) obj);
  }
  else if ([obj isKindOfClass:[LibOrgBouncycastleAsn1ASN1GeneralizedTime class]]) {
    return new_LibOrgBouncycastleAsn1CmsAsn1CmsTime_initWithLibOrgBouncycastleAsn1ASN1Primitive_((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) obj);
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown object in factory: ", [[obj java_getClass] getName]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1CmsAsn1CmsTime)
