//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ProtocolVersion.java
//

#ifndef ProtocolVersion_H
#define ProtocolVersion_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsProtocolVersion : NSObject
@property (readonly, class) LibOrgBouncycastleCryptoTlsProtocolVersion *SSLv3 NS_SWIFT_NAME(SSLv3);
@property (readonly, class) LibOrgBouncycastleCryptoTlsProtocolVersion *TLSv10 NS_SWIFT_NAME(TLSv10);
@property (readonly, class) LibOrgBouncycastleCryptoTlsProtocolVersion *TLSv11 NS_SWIFT_NAME(TLSv11);
@property (readonly, class) LibOrgBouncycastleCryptoTlsProtocolVersion *TLSv12 NS_SWIFT_NAME(TLSv12);
@property (readonly, class) LibOrgBouncycastleCryptoTlsProtocolVersion *DTLSv10 NS_SWIFT_NAME(DTLSv10);
@property (readonly, class) LibOrgBouncycastleCryptoTlsProtocolVersion *DTLSv12 NS_SWIFT_NAME(DTLSv12);

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)SSLv3;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)TLSv10;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)TLSv11;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)TLSv12;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)DTLSv10;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)DTLSv12;

#pragma mark Public

- (jboolean)isEqual:(id)other;

- (jboolean)equalsWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)other;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)getWithInt:(jint)major
                                                   withInt:(jint)minor;

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getEquivalentTLSVersion;

- (jint)getFullVersion;

- (jint)getMajorVersion;

- (jint)getMinorVersion;

- (NSUInteger)hash;

- (jboolean)isDTLS;

- (jboolean)isEqualOrEarlierVersionOfWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)version_;

- (jboolean)isLaterVersionOfWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)version_;

- (jboolean)isSSL;

- (jboolean)isTLS;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsProtocolVersion)

inline LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_get_SSLv3(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_SSLv3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsProtocolVersion, SSLv3, LibOrgBouncycastleCryptoTlsProtocolVersion *)

inline LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_get_TLSv10(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_TLSv10;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsProtocolVersion, TLSv10, LibOrgBouncycastleCryptoTlsProtocolVersion *)

inline LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_get_TLSv11(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_TLSv11;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsProtocolVersion, TLSv11, LibOrgBouncycastleCryptoTlsProtocolVersion *)

inline LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_get_TLSv12(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_TLSv12;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsProtocolVersion, TLSv12, LibOrgBouncycastleCryptoTlsProtocolVersion *)

inline LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_get_DTLSv10(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_DTLSv10;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsProtocolVersion, DTLSv10, LibOrgBouncycastleCryptoTlsProtocolVersion *)

inline LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_get_DTLSv12(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_DTLSv12;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsProtocolVersion, DTLSv12, LibOrgBouncycastleCryptoTlsProtocolVersion *)

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsProtocolVersion_getWithInt_withInt_(jint major, jint minor);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsProtocolVersion)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ProtocolVersion_H
