//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/GOFBBlockCipher.java
//

#include "BlockCipher.h"
#include "CipherParameters.h"
#include "GOFBBlockCipher.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithIV.h"
#include "StreamBlockCipher.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoModesGOFBBlockCipher () {
 @public
  IOSByteArray *IV_;
  IOSByteArray *ofbV_;
  IOSByteArray *ofbOutV_;
  jint byteCount_;
  jint blockSize_;
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_GOFBBlockCipher_;
}

- (jint)bytesTointWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff;

- (void)intTobytesWithInt:(jint)num
            withByteArray:(IOSByteArray *)outArg
                  withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesGOFBBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesGOFBBlockCipher, ofbV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesGOFBBlockCipher, ofbOutV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesGOFBBlockCipher, cipher_GOFBBlockCipher_, id<LibOrgBouncycastleCryptoBlockCipher>)

__attribute__((unused)) static jint LibOrgBouncycastleCryptoModesGOFBBlockCipher_bytesTointWithByteArray_withInt_(LibOrgBouncycastleCryptoModesGOFBBlockCipher *self, IOSByteArray *inArg, jint inOff);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesGOFBBlockCipher_intTobytesWithInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesGOFBBlockCipher *self, jint num, IOSByteArray *outArg, jint outOff);

@implementation LibOrgBouncycastleCryptoModesGOFBBlockCipher

+ (jint)C1 {
  return LibOrgBouncycastleCryptoModesGOFBBlockCipher_C1;
}

+ (jint)C2 {
  return LibOrgBouncycastleCryptoModesGOFBBlockCipher_C2;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoModesGOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (void)init__WithBoolean:(jboolean)encrypting
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  firstStep_ = true;
  N3_ = 0;
  N4_ = 0;
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithIV *ivParam = (LibOrgBouncycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    if (((IOSByteArray *) nil_chk(iv))->size_ < ((IOSByteArray *) nil_chk(IV_))->size_) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, IV_->size_ - iv->size_, iv->size_);
      for (jint i = 0; i < ((IOSByteArray *) nil_chk(IV_))->size_ - iv->size_; i++) {
        *IOSByteArray_GetRef(IV_, i) = 0;
      }
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, 0, IV_->size_);
    }
    [self reset];
    if ([ivParam getParameters] != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_GOFBBlockCipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:[ivParam getParameters]];
    }
  }
  else {
    [self reset];
    if (params != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_GOFBBlockCipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:params];
    }
  }
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_GOFBBlockCipher_)) getAlgorithmName], @"/GCTR");
}

- (jint)getBlockSize {
  return blockSize_;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:blockSize_ withByteArray:outArg withInt:outOff];
  return blockSize_;
}

- (void)reset {
  firstStep_ = true;
  N3_ = 0;
  N4_ = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, ofbV_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  byteCount_ = 0;
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_GOFBBlockCipher_)) reset];
}

- (jint)bytesTointWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff {
  return LibOrgBouncycastleCryptoModesGOFBBlockCipher_bytesTointWithByteArray_withInt_(self, inArg, inOff);
}

- (void)intTobytesWithInt:(jint)num
            withByteArray:(IOSByteArray *)outArg
                  withInt:(jint)outOff {
  LibOrgBouncycastleCryptoModesGOFBBlockCipher_intTobytesWithInt_withByteArray_withInt_(self, num, outArg, outOff);
}

- (jbyte)calculateByteWithByte:(jbyte)b {
  if (byteCount_ == 0) {
    if (firstStep_) {
      firstStep_ = false;
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_GOFBBlockCipher_)) processBlockWithByteArray:ofbV_ withInt:0 withByteArray:ofbOutV_ withInt:0];
      N3_ = LibOrgBouncycastleCryptoModesGOFBBlockCipher_bytesTointWithByteArray_withInt_(self, ofbOutV_, 0);
      N4_ = LibOrgBouncycastleCryptoModesGOFBBlockCipher_bytesTointWithByteArray_withInt_(self, ofbOutV_, 4);
    }
    N3_ += LibOrgBouncycastleCryptoModesGOFBBlockCipher_C2;
    N4_ += LibOrgBouncycastleCryptoModesGOFBBlockCipher_C1;
    if (N4_ < LibOrgBouncycastleCryptoModesGOFBBlockCipher_C1) {
      if (N4_ > 0) {
        N4_++;
      }
    }
    LibOrgBouncycastleCryptoModesGOFBBlockCipher_intTobytesWithInt_withByteArray_withInt_(self, N3_, ofbV_, 0);
    LibOrgBouncycastleCryptoModesGOFBBlockCipher_intTobytesWithInt_withByteArray_withInt_(self, N4_, ofbV_, 4);
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_GOFBBlockCipher_)) processBlockWithByteArray:ofbV_ withInt:0 withByteArray:ofbOutV_ withInt:0];
  }
  jbyte rv = (jbyte) (IOSByteArray_Get(nil_chk(ofbOutV_), byteCount_++) ^ b);
  if (byteCount_ == blockSize_) {
    byteCount_ = 0;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ofbV_, blockSize_, ofbV_, 0, ((IOSByteArray *) nil_chk(ofbV_))->size_ - blockSize_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ofbOutV_, 0, ofbV_, ((IOSByteArray *) nil_chk(ofbV_))->size_ - blockSize_, blockSize_);
  }
  return rv;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "B", 0x4, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(bytesTointWithByteArray:withInt:);
  methods[7].selector = @selector(intTobytesWithInt:withByteArray:withInt:);
  methods[8].selector = @selector(calculateByteWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ofbV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ofbOutV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "byteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cipher_GOFBBlockCipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x12, 13, -1, -1, -1 },
    { "firstStep_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "N3_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "N4_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "C1", "I", .constantValue.asInt = LibOrgBouncycastleCryptoModesGOFBBlockCipher_C1, 0x18, -1, -1, -1, -1 },
    { "C2", "I", .constantValue.asInt = LibOrgBouncycastleCryptoModesGOFBBlockCipher_C2, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "bytesToint", "[BI", "intTobytes", "I[BI", "calculateByte", "B", "cipher" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesGOFBBlockCipher = { "GOFBBlockCipher", "lib.org.bouncycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 9, 11, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesGOFBBlockCipher;
}

@end

void LibOrgBouncycastleCryptoModesGOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesGOFBBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  LibOrgBouncycastleCryptoStreamBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  self->firstStep_ = true;
  self->cipher_GOFBBlockCipher_ = cipher;
  self->blockSize_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  if (self->blockSize_ != 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"GCTR only for 64 bit block ciphers");
  }
  self->IV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->ofbV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->ofbOutV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
}

LibOrgBouncycastleCryptoModesGOFBBlockCipher *new_LibOrgBouncycastleCryptoModesGOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesGOFBBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoModesGOFBBlockCipher *create_LibOrgBouncycastleCryptoModesGOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesGOFBBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

jint LibOrgBouncycastleCryptoModesGOFBBlockCipher_bytesTointWithByteArray_withInt_(LibOrgBouncycastleCryptoModesGOFBBlockCipher *self, IOSByteArray *inArg, jint inOff) {
  return ((JreLShift32(IOSByteArray_Get(nil_chk(inArg), inOff + 3), 24)) & (jint) 0xff000000) + ((JreLShift32(IOSByteArray_Get(inArg, inOff + 2), 16)) & (jint) 0xff0000) + ((JreLShift32(IOSByteArray_Get(inArg, inOff + 1), 8)) & (jint) 0xff00) + (IOSByteArray_Get(inArg, inOff) & (jint) 0xff);
}

void LibOrgBouncycastleCryptoModesGOFBBlockCipher_intTobytesWithInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesGOFBBlockCipher *self, jint num, IOSByteArray *outArg, jint outOff) {
  *IOSByteArray_GetRef(nil_chk(outArg), outOff + 3) = (jbyte) (JreURShift32(num, 24));
  *IOSByteArray_GetRef(outArg, outOff + 2) = (jbyte) (JreURShift32(num, 16));
  *IOSByteArray_GetRef(outArg, outOff + 1) = (jbyte) (JreURShift32(num, 8));
  *IOSByteArray_GetRef(outArg, outOff) = (jbyte) num;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesGOFBBlockCipher)
