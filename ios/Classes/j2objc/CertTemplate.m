//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/CertTemplate.java
//

#include "ASN1Integer.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "AlgorithmIdentifier.h"
#include "CertTemplate.h"
#include "DERBitString.h"
#include "Extensions.h"
#include "J2ObjC_source.h"
#include "OptionalValidity.h"
#include "SubjectPublicKeyInfo.h"
#include "X500Name.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Enumeration.h"

@interface LibOrgBouncycastleAsn1CrmfCertTemplate () {
 @public
  LibOrgBouncycastleAsn1ASN1Sequence *seq_;
  LibOrgBouncycastleAsn1ASN1Integer *version__;
  LibOrgBouncycastleAsn1ASN1Integer *serialNumber_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *signingAlg_;
  LibOrgBouncycastleAsn1X500X500Name *issuer_;
  LibOrgBouncycastleAsn1CrmfOptionalValidity *validity_;
  LibOrgBouncycastleAsn1X500X500Name *subject_;
  LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *publicKey_;
  LibOrgBouncycastleAsn1DERBitString *issuerUID_;
  LibOrgBouncycastleAsn1DERBitString *subjectUID_;
  LibOrgBouncycastleAsn1X509Extensions *extensions_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, seq_, LibOrgBouncycastleAsn1ASN1Sequence *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, version__, LibOrgBouncycastleAsn1ASN1Integer *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, serialNumber_, LibOrgBouncycastleAsn1ASN1Integer *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, signingAlg_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, issuer_, LibOrgBouncycastleAsn1X500X500Name *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, validity_, LibOrgBouncycastleAsn1CrmfOptionalValidity *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, subject_, LibOrgBouncycastleAsn1X500X500Name *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, publicKey_, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, issuerUID_, LibOrgBouncycastleAsn1DERBitString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, subjectUID_, LibOrgBouncycastleAsn1DERBitString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertTemplate, extensions_, LibOrgBouncycastleAsn1X509Extensions *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1CrmfCertTemplate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CrmfCertTemplate *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1CrmfCertTemplate *new_LibOrgBouncycastleAsn1CrmfCertTemplate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1CrmfCertTemplate *create_LibOrgBouncycastleAsn1CrmfCertTemplate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1CrmfCertTemplate

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1CrmfCertTemplate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

+ (LibOrgBouncycastleAsn1CrmfCertTemplate *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1CrmfCertTemplate_getInstanceWithId_(o);
}

- (jint)getVersion {
  if (version__ != nil) {
    return [((JavaMathBigInteger *) nil_chk([version__ getValue])) intValue];
  }
  return -1;
}

- (LibOrgBouncycastleAsn1ASN1Integer *)getSerialNumber {
  return serialNumber_;
}

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getSigningAlg {
  return signingAlg_;
}

- (LibOrgBouncycastleAsn1X500X500Name *)getIssuer {
  return issuer_;
}

- (LibOrgBouncycastleAsn1CrmfOptionalValidity *)getValidity {
  return validity_;
}

- (LibOrgBouncycastleAsn1X500X500Name *)getSubject {
  return subject_;
}

- (LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)getPublicKey {
  return publicKey_;
}

- (LibOrgBouncycastleAsn1DERBitString *)getIssuerUID {
  return issuerUID_;
}

- (LibOrgBouncycastleAsn1DERBitString *)getSubjectUID {
  return subjectUID_;
}

- (LibOrgBouncycastleAsn1X509Extensions *)getExtensions {
  return extensions_;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return seq_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CrmfCertTemplate;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CrmfOptionalValidity;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1DERBitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1DERBitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(getVersion);
  methods[3].selector = @selector(getSerialNumber);
  methods[4].selector = @selector(getSigningAlg);
  methods[5].selector = @selector(getIssuer);
  methods[6].selector = @selector(getValidity);
  methods[7].selector = @selector(getSubject);
  methods[8].selector = @selector(getPublicKey);
  methods[9].selector = @selector(getIssuerUID);
  methods[10].selector = @selector(getSubjectUID);
  methods[11].selector = @selector(getExtensions);
  methods[12].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seq_", "LLibOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "version__", "LLibOrgBouncycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x2, 3, -1, -1, -1 },
    { "serialNumber_", "LLibOrgBouncycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signingAlg_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "issuer_", "LLibOrgBouncycastleAsn1X500X500Name;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "validity_", "LLibOrgBouncycastleAsn1CrmfOptionalValidity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subject_", "LLibOrgBouncycastleAsn1X500X500Name;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "issuerUID_", "LLibOrgBouncycastleAsn1DERBitString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subjectUID_", "LLibOrgBouncycastleAsn1DERBitString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extensions_", "LLibOrgBouncycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1ASN1Sequence;", "getInstance", "LNSObject;", "version" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1CrmfCertTemplate = { "CertTemplate", "lib.org.bouncycastle.asn1.crmf", ptrTable, methods, fields, 7, 0x1, 13, 11, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1CrmfCertTemplate;
}

@end

void LibOrgBouncycastleAsn1CrmfCertTemplate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CrmfCertTemplate *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->seq_ = seq;
  id<JavaUtilEnumeration> en = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjects];
  while ([((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]) {
    LibOrgBouncycastleAsn1ASN1TaggedObject *tObj = (LibOrgBouncycastleAsn1ASN1TaggedObject *) cast_chk([en nextElement], [LibOrgBouncycastleAsn1ASN1TaggedObject class]);
    switch ([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(tObj)) getTagNo]) {
      case 0:
      self->version__ = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, false);
      break;
      case 1:
      self->serialNumber_ = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, false);
      break;
      case 2:
      self->signingAlg_ = LibOrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, false);
      break;
      case 3:
      self->issuer_ = LibOrgBouncycastleAsn1X500X500Name_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, true);
      break;
      case 4:
      self->validity_ = LibOrgBouncycastleAsn1CrmfOptionalValidity_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, false));
      break;
      case 5:
      self->subject_ = LibOrgBouncycastleAsn1X500X500Name_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, true);
      break;
      case 6:
      self->publicKey_ = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, false);
      break;
      case 7:
      self->issuerUID_ = LibOrgBouncycastleAsn1DERBitString_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, false);
      break;
      case 8:
      self->subjectUID_ = LibOrgBouncycastleAsn1DERBitString_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, false);
      break;
      case 9:
      self->extensions_ = LibOrgBouncycastleAsn1X509Extensions_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, false);
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown tag: ", [tObj getTagNo]));
    }
  }
}

LibOrgBouncycastleAsn1CrmfCertTemplate *new_LibOrgBouncycastleAsn1CrmfCertTemplate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CrmfCertTemplate, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1CrmfCertTemplate *create_LibOrgBouncycastleAsn1CrmfCertTemplate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CrmfCertTemplate, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1CrmfCertTemplate *LibOrgBouncycastleAsn1CrmfCertTemplate_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1CrmfCertTemplate_initialize();
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1CrmfCertTemplate class]]) {
    return (LibOrgBouncycastleAsn1CrmfCertTemplate *) o;
  }
  else if (o != nil) {
    return new_LibOrgBouncycastleAsn1CrmfCertTemplate_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(o));
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1CrmfCertTemplate)
