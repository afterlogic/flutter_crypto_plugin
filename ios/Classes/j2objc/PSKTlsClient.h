//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/PSKTlsClient.java
//

#ifndef PSKTlsClient_H
#define PSKTlsClient_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsClient.h"
#include "J2ObjC_header.h"

@class IOSIntArray;
@protocol LibOrgBouncycastleCryptoTlsTlsAuthentication;
@protocol LibOrgBouncycastleCryptoTlsTlsCipherFactory;
@protocol LibOrgBouncycastleCryptoTlsTlsDHVerifier;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;
@protocol LibOrgBouncycastleCryptoTlsTlsPSKIdentity;

@interface LibOrgBouncycastleCryptoTlsPSKTlsClient : LibOrgBouncycastleCryptoTlsAbstractTlsClient {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier_;
  id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                                 withLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier
                                withLibOrgBouncycastleCryptoTlsTlsPSKIdentity:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)pskIdentity;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                                withLibOrgBouncycastleCryptoTlsTlsPSKIdentity:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)pskIdentity;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)pskIdentity;

- (id<LibOrgBouncycastleCryptoTlsTlsAuthentication>)getAuthentication;

- (IOSIntArray *)getCipherSuites;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createPSKKeyExchangeWithInt:(jint)keyExchange;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsPSKTlsClient)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsPSKTlsClient, dhVerifier_, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsPSKTlsClient, pskIdentity_, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(LibOrgBouncycastleCryptoTlsPSKTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsPSKTlsClient *new_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsPSKTlsClient *create_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(LibOrgBouncycastleCryptoTlsPSKTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsPSKTlsClient *new_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsPSKTlsClient *create_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(LibOrgBouncycastleCryptoTlsPSKTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsPSKTlsClient *new_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsPSKTlsClient *create_LibOrgBouncycastleCryptoTlsPSKTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsPSKTlsClient)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PSKTlsClient_H
