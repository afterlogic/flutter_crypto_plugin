//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmc/LraPopWitness.java
//

#ifndef LraPopWitness_H
#define LraPopWitness_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1CmcBodyPartID;

@interface LibOrgBouncycastleAsn1CmcLraPopWitness : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmcBodyPartID:(LibOrgBouncycastleAsn1CmcBodyPartID *)pkiDataBodyid
                               withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)bodyIds;

- (IOSObjectArray *)getBodyIds;

+ (LibOrgBouncycastleAsn1CmcLraPopWitness *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1CmcBodyPartID *)getPkiDataBodyid;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmcLraPopWitness)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmcLraPopWitness_initWithLibOrgBouncycastleAsn1CmcBodyPartID_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CmcLraPopWitness *self, LibOrgBouncycastleAsn1CmcBodyPartID *pkiDataBodyid, LibOrgBouncycastleAsn1ASN1Sequence *bodyIds);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcLraPopWitness *new_LibOrgBouncycastleAsn1CmcLraPopWitness_initWithLibOrgBouncycastleAsn1CmcBodyPartID_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CmcBodyPartID *pkiDataBodyid, LibOrgBouncycastleAsn1ASN1Sequence *bodyIds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcLraPopWitness *create_LibOrgBouncycastleAsn1CmcLraPopWitness_initWithLibOrgBouncycastleAsn1CmcBodyPartID_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CmcBodyPartID *pkiDataBodyid, LibOrgBouncycastleAsn1ASN1Sequence *bodyIds);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcLraPopWitness *LibOrgBouncycastleAsn1CmcLraPopWitness_getInstanceWithId_(id o);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmcLraPopWitness)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // LraPopWitness_H
