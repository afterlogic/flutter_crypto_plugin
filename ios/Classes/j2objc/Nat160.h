//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/raw/Nat160.java
//

#ifndef Nat160_H
#define Nat160_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSIntArray;
@class JavaMathBigInteger;

@interface LibOrgBouncycastleMathRawNat160 : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (jint)addWithIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y
           withIntArray:(IOSIntArray *)z;

+ (jint)addBothToWithIntArray:(IOSIntArray *)x
                 withIntArray:(IOSIntArray *)y
                 withIntArray:(IOSIntArray *)z;

+ (jint)addToWithIntArray:(IOSIntArray *)x
                  withInt:(jint)xOff
             withIntArray:(IOSIntArray *)z
                  withInt:(jint)zOff
                  withInt:(jint)cIn;

+ (jint)addToWithIntArray:(IOSIntArray *)x
             withIntArray:(IOSIntArray *)z;

+ (jint)addToEachOtherWithIntArray:(IOSIntArray *)u
                           withInt:(jint)uOff
                      withIntArray:(IOSIntArray *)v
                           withInt:(jint)vOff;

+ (void)copy__WithIntArray:(IOSIntArray *)x
                   withInt:(jint)xOff
              withIntArray:(IOSIntArray *)z
                   withInt:(jint)zOff OBJC_METHOD_FAMILY_NONE;

+ (void)copy__WithIntArray:(IOSIntArray *)x
              withIntArray:(IOSIntArray *)z OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)create;

+ (IOSIntArray *)createExt;

+ (jboolean)diffWithIntArray:(IOSIntArray *)x
                     withInt:(jint)xOff
                withIntArray:(IOSIntArray *)y
                     withInt:(jint)yOff
                withIntArray:(IOSIntArray *)z
                     withInt:(jint)zOff;

+ (jboolean)eqWithIntArray:(IOSIntArray *)x
              withIntArray:(IOSIntArray *)y;

+ (IOSIntArray *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (jint)getBitWithIntArray:(IOSIntArray *)x
                   withInt:(jint)bit;

+ (jboolean)gteWithIntArray:(IOSIntArray *)x
                    withInt:(jint)xOff
               withIntArray:(IOSIntArray *)y
                    withInt:(jint)yOff;

+ (jboolean)gteWithIntArray:(IOSIntArray *)x
               withIntArray:(IOSIntArray *)y;

+ (jboolean)isOneWithIntArray:(IOSIntArray *)x;

+ (jboolean)isZeroWithIntArray:(IOSIntArray *)x;

+ (void)mulWithIntArray:(IOSIntArray *)x
                withInt:(jint)xOff
           withIntArray:(IOSIntArray *)y
                withInt:(jint)yOff
           withIntArray:(IOSIntArray *)zz
                withInt:(jint)zzOff;

+ (void)mulWithIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y
           withIntArray:(IOSIntArray *)zz;

+ (jlong)mul33AddWithInt:(jint)w
            withIntArray:(IOSIntArray *)x
                 withInt:(jint)xOff
            withIntArray:(IOSIntArray *)y
                 withInt:(jint)yOff
            withIntArray:(IOSIntArray *)z
                 withInt:(jint)zOff;

+ (jint)mul33DWordAddWithInt:(jint)x
                    withLong:(jlong)y
                withIntArray:(IOSIntArray *)z
                     withInt:(jint)zOff;

+ (jint)mul33WordAddWithInt:(jint)x
                    withInt:(jint)y
               withIntArray:(IOSIntArray *)z
                    withInt:(jint)zOff;

+ (jint)mulAddToWithIntArray:(IOSIntArray *)x
                     withInt:(jint)xOff
                withIntArray:(IOSIntArray *)y
                     withInt:(jint)yOff
                withIntArray:(IOSIntArray *)zz
                     withInt:(jint)zzOff;

+ (jint)mulAddToWithIntArray:(IOSIntArray *)x
                withIntArray:(IOSIntArray *)y
                withIntArray:(IOSIntArray *)zz;

+ (jint)mulWordWithInt:(jint)x
          withIntArray:(IOSIntArray *)y
          withIntArray:(IOSIntArray *)z
               withInt:(jint)zOff;

+ (jint)mulWordAddExtWithInt:(jint)x
                withIntArray:(IOSIntArray *)yy
                     withInt:(jint)yyOff
                withIntArray:(IOSIntArray *)zz
                     withInt:(jint)zzOff;

+ (jint)mulWordDwordAddWithInt:(jint)x
                      withLong:(jlong)y
                  withIntArray:(IOSIntArray *)z
                       withInt:(jint)zOff;

+ (jint)mulWordsAddWithInt:(jint)x
                   withInt:(jint)y
              withIntArray:(IOSIntArray *)z
                   withInt:(jint)zOff;

+ (void)squareWithIntArray:(IOSIntArray *)x
                   withInt:(jint)xOff
              withIntArray:(IOSIntArray *)zz
                   withInt:(jint)zzOff;

+ (void)squareWithIntArray:(IOSIntArray *)x
              withIntArray:(IOSIntArray *)zz;

+ (jint)subWithIntArray:(IOSIntArray *)x
                withInt:(jint)xOff
           withIntArray:(IOSIntArray *)y
                withInt:(jint)yOff
           withIntArray:(IOSIntArray *)z
                withInt:(jint)zOff;

+ (jint)subWithIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y
           withIntArray:(IOSIntArray *)z;

+ (jint)subBothFromWithIntArray:(IOSIntArray *)x
                   withIntArray:(IOSIntArray *)y
                   withIntArray:(IOSIntArray *)z;

+ (jint)subFromWithIntArray:(IOSIntArray *)x
                    withInt:(jint)xOff
               withIntArray:(IOSIntArray *)z
                    withInt:(jint)zOff;

+ (jint)subFromWithIntArray:(IOSIntArray *)x
               withIntArray:(IOSIntArray *)z;

+ (JavaMathBigInteger *)toBigIntegerWithIntArray:(IOSIntArray *)x;

+ (void)zeroWithIntArray:(IOSIntArray *)z;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathRawNat160)

FOUNDATION_EXPORT void LibOrgBouncycastleMathRawNat160_init(LibOrgBouncycastleMathRawNat160 *self);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_addWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_addBothToWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_addToWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *z);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_addToWithIntArray_withInt_withIntArray_withInt_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff, jint cIn);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_addToEachOtherWithIntArray_withInt_withIntArray_withInt_(IOSIntArray *u, jint uOff, IOSIntArray *v, jint vOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathRawNat160_copy__WithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *z);

FOUNDATION_EXPORT void LibOrgBouncycastleMathRawNat160_copy__WithIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleMathRawNat160_create(void);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleMathRawNat160_createExt(void);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathRawNat160_diffWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathRawNat160_eqWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleMathRawNat160_fromBigIntegerWithJavaMathBigInteger_(JavaMathBigInteger *x);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_getBitWithIntArray_withInt_(IOSIntArray *x, jint bit);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathRawNat160_gteWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathRawNat160_gteWithIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathRawNat160_isOneWithIntArray_(IOSIntArray *x);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathRawNat160_isZeroWithIntArray_(IOSIntArray *x);

FOUNDATION_EXPORT void LibOrgBouncycastleMathRawNat160_mulWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *zz);

FOUNDATION_EXPORT void LibOrgBouncycastleMathRawNat160_mulWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *zz, jint zzOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_mulAddToWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *zz);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_mulAddToWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *zz, jint zzOff);

FOUNDATION_EXPORT jlong LibOrgBouncycastleMathRawNat160_mul33AddWithInt_withIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(jint w, IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_mulWordAddExtWithInt_withIntArray_withInt_withIntArray_withInt_(jint x, IOSIntArray *yy, jint yyOff, IOSIntArray *zz, jint zzOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_mul33DWordAddWithInt_withLong_withIntArray_withInt_(jint x, jlong y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_mul33WordAddWithInt_withInt_withIntArray_withInt_(jint x, jint y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_mulWordDwordAddWithInt_withLong_withIntArray_withInt_(jint x, jlong y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_mulWordsAddWithInt_withInt_withIntArray_withInt_(jint x, jint y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_mulWordWithInt_withIntArray_withIntArray_withInt_(jint x, IOSIntArray *y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT void LibOrgBouncycastleMathRawNat160_squareWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *zz);

FOUNDATION_EXPORT void LibOrgBouncycastleMathRawNat160_squareWithIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *zz, jint zzOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_subWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_subWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_subBothFromWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_subFromWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *z);

FOUNDATION_EXPORT jint LibOrgBouncycastleMathRawNat160_subFromWithIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleMathRawNat160_toBigIntegerWithIntArray_(IOSIntArray *x);

FOUNDATION_EXPORT void LibOrgBouncycastleMathRawNat160_zeroWithIntArray_(IOSIntArray *z);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathRawNat160)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Nat160_H
