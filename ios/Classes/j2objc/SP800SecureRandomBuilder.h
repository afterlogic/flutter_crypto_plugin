//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/prng/SP800SecureRandomBuilder.java
//

#ifndef SP800SecureRandomBuilder_H
#define SP800SecureRandomBuilder_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoPrngSP800SecureRandom;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoMac;
@protocol LibOrgBouncycastleCryptoPrngEntropySourceProvider;

@interface LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider:(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider>)entropySourceProvider;

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)entropySource
                                               withBoolean:(jboolean)predictionResistant;

- (LibOrgBouncycastleCryptoPrngSP800SecureRandom *)buildCTRWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                                                           withInt:(jint)keySizeInBits
                                                                                     withByteArray:(IOSByteArray *)nonce
                                                                                       withBoolean:(jboolean)predictionResistant;

- (LibOrgBouncycastleCryptoPrngSP800SecureRandom *)buildHashWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                                                 withByteArray:(IOSByteArray *)nonce
                                                                                   withBoolean:(jboolean)predictionResistant;

- (LibOrgBouncycastleCryptoPrngSP800SecureRandom *)buildHMACWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)hMac
                                                                              withByteArray:(IOSByteArray *)nonce
                                                                                withBoolean:(jboolean)predictionResistant;

- (LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *)setEntropyBitsRequiredWithInt:(jint)entropyBitsRequired;

- (LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *)setPersonalizationStringWithByteArray:(IOSByteArray *)personalizationString;

- (LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *)setSecurityStrengthWithInt:(jint)securityStrength;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_init(LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *self, JavaSecuritySecureRandom *entropySource, jboolean predictionResistant);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(JavaSecuritySecureRandom *entropySource, jboolean predictionResistant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(JavaSecuritySecureRandom *entropySource, jboolean predictionResistant);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *self, id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoPrngSP800SecureRandomBuilder)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SP800SecureRandomBuilder_H
