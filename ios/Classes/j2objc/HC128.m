//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/HC128.java
//

#include "AlgorithmProvider.h"
#include "BaseKeyGenerator.h"
#include "BaseStreamCipher.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "HC128.h"
#include "HC128Engine.h"
#include "IOSClass.h"
#include "IvAlgorithmParameters.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricHC128 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricHC128_init(LibOrgBouncycastleJcajceProviderSymmetricHC128 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricHC128 *new_LibOrgBouncycastleJcajceProviderSymmetricHC128_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricHC128 *create_LibOrgBouncycastleJcajceProviderSymmetricHC128_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricHC128

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricHC128_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricHC128_Base;LLibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams;LLibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricHC128 = { "HC128", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricHC128;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricHC128_init(LibOrgBouncycastleJcajceProviderSymmetricHC128 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricHC128 *new_LibOrgBouncycastleJcajceProviderSymmetricHC128_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128, init)
}

LibOrgBouncycastleJcajceProviderSymmetricHC128 *create_LibOrgBouncycastleJcajceProviderSymmetricHC128_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricHC128)

@implementation LibOrgBouncycastleJcajceProviderSymmetricHC128_Base

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricHC128_Base_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricHC128;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricHC128_Base = { "Base", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricHC128_Base;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricHC128_Base_init(LibOrgBouncycastleJcajceProviderSymmetricHC128_Base *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(self, new_LibOrgBouncycastleCryptoEnginesHC128Engine_init(), 16);
}

LibOrgBouncycastleJcajceProviderSymmetricHC128_Base *new_LibOrgBouncycastleJcajceProviderSymmetricHC128_Base_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128_Base, init)
}

LibOrgBouncycastleJcajceProviderSymmetricHC128_Base *create_LibOrgBouncycastleJcajceProviderSymmetricHC128_Base_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128_Base, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricHC128_Base)

@implementation LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricHC128;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HC128", 128, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricHC128_KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)engineToString {
  return @"HC128 IV";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricHC128;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams = { "AlgParams", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams_init(LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilIvAlgorithmParameters_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams *new_LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams, init)
}

LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams *create_LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricHC128_AlgParams)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"Cipher.HC128" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_PREFIX, @"$Base")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.HC128" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.HC128" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_PREFIX, @"$AlgParams")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricHC128;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricHC128_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricHC128_Mappings)
