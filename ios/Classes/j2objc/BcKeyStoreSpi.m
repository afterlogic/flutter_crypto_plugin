//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java
//

#include "Arrays.h"
#include "BCJcaJceHelper.h"
#include "BcKeyStoreSpi.h"
#include "BouncyCastleProvider.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "Digest.h"
#include "DigestInputStream.h"
#include "DigestOutputStream.h"
#include "HMac.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "MacInputStream.h"
#include "MacOutputStream.h"
#include "PBEParametersGenerator.h"
#include "PKCS12ParametersGenerator.h"
#include "PrivateKeyInfo.h"
#include "SHA1Digest.h"
#include "Streams.h"
#include "SubjectPublicKeyInfo.h"
#include "TeeOutputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/security/Key.h"
#include "java/security/KeyStoreException.h"
#include "java/security/KeyStoreSpi.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/UnrecoverableKeyException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/spec/KeySpec.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/CipherInputStream.h"
#include "javax/crypto/CipherOutputStream.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/SecretKeyFactory.h"
#include "javax/crypto/spec/PBEKeySpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"
#include "javax/crypto/spec/SecretKeySpec.h"

@interface LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
}

- (void)encodeCertificateWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                              withJavaIoDataOutputStream:(JavaIoDataOutputStream *)dOut;

- (JavaSecurityCertCertificate *)decodeCertificateWithJavaIoDataInputStream:(JavaIoDataInputStream *)dIn;

- (void)encodeKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key
          withJavaIoDataOutputStream:(JavaIoDataOutputStream *)dOut;

- (id<JavaSecurityKey>)decodeKeyWithJavaIoDataInputStream:(JavaIoDataInputStream *)dIn;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_STORE_VERSION(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_VERSION 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, STORE_VERSION, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_STORE_SALT_SIZE(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_SALT_SIZE 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, STORE_SALT_SIZE, jint)

inline NSString *LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_STORE_CIPHER(void);
static NSString *LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_CIPHER = @"PBEWithSHAAndTwofish-CBC";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, STORE_CIPHER, NSString *)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_KEY_SALT_SIZE(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_SALT_SIZE 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, KEY_SALT_SIZE, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_MIN_ITERATIONS(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_MIN_ITERATIONS 1024
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, MIN_ITERATIONS, jint)

inline NSString *LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_KEY_CIPHER(void);
static NSString *LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_CIPHER = @"PBEWithSHAAnd3-KeyTripleDES-CBC";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, KEY_CIPHER, NSString *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeCertificateWithJavaSecurityCertCertificate_withJavaIoDataOutputStream_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, JavaSecurityCertCertificate *cert, JavaIoDataOutputStream *dOut);

__attribute__((unused)) static JavaSecurityCertCertificate *LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeCertificateWithJavaIoDataInputStream_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, JavaIoDataInputStream *dIn);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeKeyWithJavaSecurityKey_withJavaIoDataOutputStream_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, id<JavaSecurityKey> key, JavaIoDataOutputStream *dOut);

__attribute__((unused)) static id<JavaSecurityKey> LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeKeyWithJavaIoDataInputStream_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, JavaIoDataInputStream *dIn);

@interface LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry : NSObject {
 @public
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *this$0_;
  jint type_;
  NSString *alias_;
  id obj_;
  IOSObjectArray *certChain_;
  JavaUtilDate *date_;
}

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)obj;

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                                  withByteArray:(IOSByteArray *)obj
                                           withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain;

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                            withJavaSecurityKey:(id<JavaSecurityKey>)key
                                                                  withCharArray:(IOSCharArray *)password
                                           withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain;

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                               withJavaUtilDate:(JavaUtilDate *)date
                                                                        withInt:(jint)type
                                                                         withId:(id)obj;

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                               withJavaUtilDate:(JavaUtilDate *)date
                                                                        withInt:(jint)type
                                                                         withId:(id)obj
                                           withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain;

- (jint)getType;

- (NSString *)getAlias;

- (id)getObject;

- (id)getObjectWithCharArray:(IOSCharArray *)password;

- (IOSObjectArray *)getCertificateChain;

- (JavaUtilDate *)getDate;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, alias_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, obj_, id)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, certChain_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, date_, JavaUtilDate *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaSecurityCertCertificate *obj);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaSecurityCertCertificate *obj) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaSecurityCertCertificate *obj);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, IOSByteArray *obj, IOSObjectArray *certChain);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, IOSByteArray *obj, IOSObjectArray *certChain) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, IOSByteArray *obj, IOSObjectArray *certChain);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, id<JavaSecurityKey> key, IOSCharArray *password, IOSObjectArray *certChain);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, id<JavaSecurityKey> key, IOSCharArray *password, IOSObjectArray *certChain) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, id<JavaSecurityKey> key, IOSCharArray *password, IOSObjectArray *certChain);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj, IOSObjectArray *certChain);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj, IOSObjectArray *certChain) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj, IOSObjectArray *certChain);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi

+ (jint)NULL_ {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_NULL;
}

+ (jint)CERTIFICATE {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE;
}

+ (jint)KEY {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY;
}

+ (jint)SECRET {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SECRET;
}

+ (jint)SEALED {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SEALED;
}

+ (jint)KEY_PRIVATE {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PRIVATE;
}

+ (jint)KEY_PUBLIC {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PUBLIC;
}

+ (jint)KEY_SECRET {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_SECRET;
}

- (instancetype)initWithInt:(jint)version_ {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(self, version_);
  return self;
}

- (void)encodeCertificateWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                              withJavaIoDataOutputStream:(JavaIoDataOutputStream *)dOut {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeCertificateWithJavaSecurityCertCertificate_withJavaIoDataOutputStream_(self, cert, dOut);
}

- (JavaSecurityCertCertificate *)decodeCertificateWithJavaIoDataInputStream:(JavaIoDataInputStream *)dIn {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeCertificateWithJavaIoDataInputStream_(self, dIn);
}

- (void)encodeKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key
          withJavaIoDataOutputStream:(JavaIoDataOutputStream *)dOut {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeKeyWithJavaSecurityKey_withJavaIoDataOutputStream_(self, key, dOut);
}

- (id<JavaSecurityKey>)decodeKeyWithJavaIoDataInputStream:(JavaIoDataInputStream *)dIn {
  return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeKeyWithJavaIoDataInputStream_(self, dIn);
}

- (JavaxCryptoCipher *)makePBECipherWithNSString:(NSString *)algorithm
                                         withInt:(jint)mode
                                   withCharArray:(IOSCharArray *)password
                                   withByteArray:(IOSByteArray *)salt
                                         withInt:(jint)iterationCount {
  @try {
    JavaxCryptoSpecPBEKeySpec *pbeSpec = new_JavaxCryptoSpecPBEKeySpec_initWithCharArray_(password);
    JavaxCryptoSecretKeyFactory *keyFact = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createSecretKeyFactoryWithNSString:algorithm];
    JavaxCryptoSpecPBEParameterSpec *defParams = new_JavaxCryptoSpecPBEParameterSpec_initWithByteArray_withInt_(salt, iterationCount);
    JavaxCryptoCipher *cipher = [helper_ createCipherWithNSString:algorithm];
    [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:mode withJavaSecurityKey:[((JavaxCryptoSecretKeyFactory *) nil_chk(keyFact)) generateSecretWithJavaSecuritySpecKeySpec:pbeSpec] withJavaSecuritySpecAlgorithmParameterSpec:defParams];
    return cipher;
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Error initialising store of key store: ", e));
  }
}

- (void)setRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand {
  self->random_ = rand;
}

- (id<JavaUtilEnumeration>)engineAliases {
  return [((JavaUtilHashtable *) nil_chk(table_)) keys];
}

- (jboolean)engineContainsAliasWithNSString:(NSString *)alias {
  return ([((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias] != nil);
}

- (void)engineDeleteEntryWithNSString:(NSString *)alias {
  id entry_ = [((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias];
  if (entry_ == nil) {
    return;
  }
  (void) [((JavaUtilHashtable *) nil_chk(table_)) removeWithId:alias];
}

- (JavaSecurityCertCertificate *)engineGetCertificateWithNSString:(NSString *)alias {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
  if (entry_ != nil) {
    if ([entry_ getType] == LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE) {
      return (JavaSecurityCertCertificate *) cast_chk([entry_ getObject], [JavaSecurityCertCertificate class]);
    }
    else {
      IOSObjectArray *chain = [entry_ getCertificateChain];
      if (chain != nil) {
        return IOSObjectArray_Get(chain, 0);
      }
    }
  }
  return nil;
}

- (NSString *)engineGetCertificateAliasWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(table_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([e nextElement], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
    if ([[((LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) nil_chk(entry_)) getObject] isKindOfClass:[JavaSecurityCertCertificate class]]) {
      JavaSecurityCertCertificate *c = (JavaSecurityCertCertificate *) cast_chk([entry_ getObject], [JavaSecurityCertCertificate class]);
      if ([((JavaSecurityCertCertificate *) nil_chk(c)) isEqual:cert]) {
        return [entry_ getAlias];
      }
    }
    else {
      IOSObjectArray *chain = [entry_ getCertificateChain];
      if (chain != nil && [((JavaSecurityCertCertificate *) nil_chk(IOSObjectArray_Get(chain, 0))) isEqual:cert]) {
        return [entry_ getAlias];
      }
    }
  }
  return nil;
}

- (IOSObjectArray *)engineGetCertificateChainWithNSString:(NSString *)alias {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
  if (entry_ != nil) {
    return [entry_ getCertificateChain];
  }
  return nil;
}

- (JavaUtilDate *)engineGetCreationDateWithNSString:(NSString *)alias {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
  if (entry_ != nil) {
    return [entry_ getDate];
  }
  return nil;
}

- (id<JavaSecurityKey>)engineGetKeyWithNSString:(NSString *)alias
                                  withCharArray:(IOSCharArray *)password {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
  if (entry_ == nil || [entry_ getType] == LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE) {
    return nil;
  }
  return (id<JavaSecurityKey>) cast_check([entry_ getObjectWithCharArray:password], JavaSecurityKey_class_());
}

- (jboolean)engineIsCertificateEntryWithNSString:(NSString *)alias {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
  if (entry_ != nil && [entry_ getType] == LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE) {
    return true;
  }
  return false;
}

- (jboolean)engineIsKeyEntryWithNSString:(NSString *)alias {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
  if (entry_ != nil && [entry_ getType] != LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE) {
    return true;
  }
  return false;
}

- (void)engineSetCertificateEntryWithNSString:(NSString *)alias
              withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([((JavaUtilHashtable *) nil_chk(table_)) getWithId:alias], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
  if (entry_ != nil && [entry_ getType] != LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE) {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_(JreStrcat("$$", @"key store already has a key entry with alias ", alias));
  }
  (void) [((JavaUtilHashtable *) nil_chk(table_)) putWithId:alias withId:new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_(self, alias, cert)];
}

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                        withByteArray:(IOSByteArray *)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  (void) [((JavaUtilHashtable *) nil_chk(table_)) putWithId:alias withId:new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_(self, alias, key, chain)];
}

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                  withJavaSecurityKey:(id<JavaSecurityKey>)key
                        withCharArray:(IOSCharArray *)password
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  if (([JavaSecurityPrivateKey_class_() isInstance:key]) && (chain == nil)) {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"no certificate chain for private key");
  }
  @try {
    (void) [((JavaUtilHashtable *) nil_chk(table_)) putWithId:alias withId:new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_(self, alias, key, password, chain)];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_([e description]);
  }
}

- (jint)engineSize {
  return [((JavaUtilHashtable *) nil_chk(table_)) size];
}

- (void)loadStoreWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  JavaIoDataInputStream *dIn = new_JavaIoDataInputStream_initWithJavaIoInputStream_(inArg);
  jint type = [dIn read];
  while (type > LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_NULL) {
    NSString *alias = [dIn readUTF];
    JavaUtilDate *date = new_JavaUtilDate_initWithLong_([dIn readLong]);
    jint chainLength = [dIn readInt];
    IOSObjectArray *chain = nil;
    if (chainLength != 0) {
      chain = [IOSObjectArray newArrayWithLength:chainLength type:JavaSecurityCertCertificate_class_()];
      for (jint i = 0; i != chainLength; i++) {
        (void) IOSObjectArray_Set(chain, i, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeCertificateWithJavaIoDataInputStream_(self, dIn));
      }
    }
    {
      JavaSecurityCertCertificate *cert;
      id<JavaSecurityKey> key;
      IOSByteArray *b;
      switch (type) {
        case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE:
        cert = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeCertificateWithJavaIoDataInputStream_(self, dIn);
        (void) [((JavaUtilHashtable *) nil_chk(table_)) putWithId:alias withId:new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_(self, alias, date, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE, cert)];
        break;
        case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY:
        key = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeKeyWithJavaIoDataInputStream_(self, dIn);
        (void) [((JavaUtilHashtable *) nil_chk(table_)) putWithId:alias withId:new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(self, alias, date, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY, key, chain)];
        break;
        case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SECRET:
        case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SEALED:
        b = [IOSByteArray newArrayWithLength:[dIn readInt]];
        [dIn readFullyWithByteArray:b];
        (void) [((JavaUtilHashtable *) nil_chk(table_)) putWithId:alias withId:new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(self, alias, date, type, b, chain)];
        break;
        default:
        @throw new_JavaIoIOException_initWithNSString_(@"Unknown object type in store.");
      }
    }
    type = [dIn read];
  }
}

- (void)saveStoreWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(table_)) elements];
  JavaIoDataOutputStream *dOut = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(outArg);
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *entry_ = (LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) cast_chk([e nextElement], [LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry class]);
    [dOut writeWithInt:[((LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *) nil_chk(entry_)) getType]];
    [dOut writeUTFWithNSString:[entry_ getAlias]];
    [dOut writeLongWithLong:[((JavaUtilDate *) nil_chk([entry_ getDate])) getTime]];
    IOSObjectArray *chain = [entry_ getCertificateChain];
    if (chain == nil) {
      [dOut writeIntWithInt:0];
    }
    else {
      [dOut writeIntWithInt:chain->size_];
      for (jint i = 0; i != chain->size_; i++) {
        LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeCertificateWithJavaSecurityCertCertificate_withJavaIoDataOutputStream_(self, IOSObjectArray_Get(chain, i), dOut);
      }
    }
    {
      IOSByteArray *b;
      switch ([entry_ getType]) {
        case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE:
        LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeCertificateWithJavaSecurityCertCertificate_withJavaIoDataOutputStream_(self, (JavaSecurityCertCertificate *) cast_chk([entry_ getObject], [JavaSecurityCertCertificate class]), dOut);
        break;
        case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY:
        LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeKeyWithJavaSecurityKey_withJavaIoDataOutputStream_(self, (id<JavaSecurityKey>) cast_check([entry_ getObject], JavaSecurityKey_class_()), dOut);
        break;
        case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SEALED:
        case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SECRET:
        b = (IOSByteArray *) cast_chk([entry_ getObject], [IOSByteArray class]);
        [dOut writeIntWithInt:((IOSByteArray *) nil_chk(b))->size_];
        [dOut writeWithByteArray:b];
        break;
        default:
        @throw new_JavaIoIOException_initWithNSString_(@"Unknown object type in store.");
      }
    }
  }
  [dOut writeWithInt:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_NULL];
}

- (void)engineLoadWithJavaIoInputStream:(JavaIoInputStream *)stream
                          withCharArray:(IOSCharArray *)password {
  [((JavaUtilHashtable *) nil_chk(table_)) clear];
  if (stream == nil) {
    return;
  }
  JavaIoDataInputStream *dIn = new_JavaIoDataInputStream_initWithJavaIoInputStream_(stream);
  jint version_ = [dIn readInt];
  if (version_ != LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_VERSION) {
    if (version_ != 0 && version_ != 1) {
      @throw new_JavaIoIOException_initWithNSString_(@"Wrong version of key store.");
    }
  }
  jint saltLength = [dIn readInt];
  if (saltLength <= 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Invalid salt detected");
  }
  IOSByteArray *salt = [IOSByteArray newArrayWithLength:saltLength];
  [dIn readFullyWithByteArray:salt];
  jint iterationCount = [dIn readInt];
  LibOrgBouncycastleCryptoMacsHMac *hMac = new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
  if (password != nil && password->size_ != 0) {
    IOSByteArray *passKey = LibOrgBouncycastleCryptoPBEParametersGenerator_PKCS12PasswordToBytesWithCharArray_(password);
    LibOrgBouncycastleCryptoPBEParametersGenerator *pbeGen = new_LibOrgBouncycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
    [pbeGen init__WithByteArray:passKey withByteArray:salt withInt:iterationCount];
    id<LibOrgBouncycastleCryptoCipherParameters> macParams;
    if (version_ != 2) {
      macParams = [pbeGen generateDerivedMacParametersWithInt:[hMac getMacSize]];
    }
    else {
      macParams = [pbeGen generateDerivedMacParametersWithInt:[hMac getMacSize] * 8];
    }
    LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(passKey, (jbyte) 0);
    [hMac init__WithLibOrgBouncycastleCryptoCipherParameters:macParams];
    LibOrgBouncycastleCryptoIoMacInputStream *mIn = new_LibOrgBouncycastleCryptoIoMacInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoMac_(dIn, hMac);
    [self loadStoreWithJavaIoInputStream:mIn];
    IOSByteArray *mac = [IOSByteArray newArrayWithLength:[hMac getMacSize]];
    [hMac doFinalWithByteArray:mac withInt:0];
    IOSByteArray *oldMac = [IOSByteArray newArrayWithLength:[hMac getMacSize]];
    [dIn readFullyWithByteArray:oldMac];
    if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(mac, oldMac)) {
      [((JavaUtilHashtable *) nil_chk(table_)) clear];
      @throw new_JavaIoIOException_initWithNSString_(@"KeyStore integrity check failed.");
    }
  }
  else {
    [self loadStoreWithJavaIoInputStream:dIn];
    IOSByteArray *oldMac = [IOSByteArray newArrayWithLength:[hMac getMacSize]];
    [dIn readFullyWithByteArray:oldMac];
  }
}

- (void)engineStoreWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                            withCharArray:(IOSCharArray *)password {
  JavaIoDataOutputStream *dOut = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(stream);
  IOSByteArray *salt = [IOSByteArray newArrayWithLength:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_SALT_SIZE];
  jint iterationCount = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_MIN_ITERATIONS + ([((JavaSecuritySecureRandom *) nil_chk(random_)) nextInt] & (jint) 0x3ff);
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:salt];
  [dOut writeIntWithInt:version__];
  [dOut writeIntWithInt:salt->size_];
  [dOut writeWithByteArray:salt];
  [dOut writeIntWithInt:iterationCount];
  LibOrgBouncycastleCryptoMacsHMac *hMac = new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
  LibOrgBouncycastleCryptoIoMacOutputStream *mOut = new_LibOrgBouncycastleCryptoIoMacOutputStream_initWithLibOrgBouncycastleCryptoMac_(hMac);
  LibOrgBouncycastleCryptoPBEParametersGenerator *pbeGen = new_LibOrgBouncycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
  IOSByteArray *passKey = LibOrgBouncycastleCryptoPBEParametersGenerator_PKCS12PasswordToBytesWithCharArray_(password);
  [pbeGen init__WithByteArray:passKey withByteArray:salt withInt:iterationCount];
  if (version__ < 2) {
    [hMac init__WithLibOrgBouncycastleCryptoCipherParameters:[pbeGen generateDerivedMacParametersWithInt:[hMac getMacSize]]];
  }
  else {
    [hMac init__WithLibOrgBouncycastleCryptoCipherParameters:[pbeGen generateDerivedMacParametersWithInt:[hMac getMacSize] * 8]];
  }
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(passKey))->size_; i++) {
    *IOSByteArray_GetRef(passKey, i) = 0;
  }
  [self saveStoreWithJavaIoOutputStream:new_LibOrgBouncycastleUtilIoTeeOutputStream_initWithJavaIoOutputStream_withJavaIoOutputStream_(dOut, mOut)];
  IOSByteArray *mac = [IOSByteArray newArrayWithLength:[hMac getMacSize]];
  [hMac doFinalWithByteArray:mac withInt:0];
  [dOut writeWithByteArray:mac];
  [dOut close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x2, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x2, 8, 5, 3, -1, -1, -1 },
    { NULL, "LJavaxCryptoCipher;", 0x4, 9, 10, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, 16, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x1, 17, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertCertificate;", 0x1, 20, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 21, 14, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x1, 22, 23, 24, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 26, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 16, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, 16, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 31, 16, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 32, 33, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 34, 35, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(encodeCertificateWithJavaSecurityCertCertificate:withJavaIoDataOutputStream:);
  methods[2].selector = @selector(decodeCertificateWithJavaIoDataInputStream:);
  methods[3].selector = @selector(encodeKeyWithJavaSecurityKey:withJavaIoDataOutputStream:);
  methods[4].selector = @selector(decodeKeyWithJavaIoDataInputStream:);
  methods[5].selector = @selector(makePBECipherWithNSString:withInt:withCharArray:withByteArray:withInt:);
  methods[6].selector = @selector(setRandomWithJavaSecuritySecureRandom:);
  methods[7].selector = @selector(engineAliases);
  methods[8].selector = @selector(engineContainsAliasWithNSString:);
  methods[9].selector = @selector(engineDeleteEntryWithNSString:);
  methods[10].selector = @selector(engineGetCertificateWithNSString:);
  methods[11].selector = @selector(engineGetCertificateAliasWithJavaSecurityCertCertificate:);
  methods[12].selector = @selector(engineGetCertificateChainWithNSString:);
  methods[13].selector = @selector(engineGetCreationDateWithNSString:);
  methods[14].selector = @selector(engineGetKeyWithNSString:withCharArray:);
  methods[15].selector = @selector(engineIsCertificateEntryWithNSString:);
  methods[16].selector = @selector(engineIsKeyEntryWithNSString:);
  methods[17].selector = @selector(engineSetCertificateEntryWithNSString:withJavaSecurityCertCertificate:);
  methods[18].selector = @selector(engineSetKeyEntryWithNSString:withByteArray:withJavaSecurityCertCertificateArray:);
  methods[19].selector = @selector(engineSetKeyEntryWithNSString:withJavaSecurityKey:withCharArray:withJavaSecurityCertCertificateArray:);
  methods[20].selector = @selector(engineSize);
  methods[21].selector = @selector(loadStoreWithJavaIoInputStream:);
  methods[22].selector = @selector(saveStoreWithJavaIoOutputStream:);
  methods[23].selector = @selector(engineLoadWithJavaIoInputStream:withCharArray:);
  methods[24].selector = @selector(engineStoreWithJavaIoOutputStream:withCharArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STORE_VERSION", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_VERSION, 0x1a, -1, -1, -1, -1 },
    { "STORE_SALT_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_SALT_SIZE, 0x1a, -1, -1, -1, -1 },
    { "STORE_CIPHER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "KEY_SALT_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_SALT_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MIN_ITERATIONS", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_MIN_ITERATIONS, 0x1a, -1, -1, -1, -1 },
    { "KEY_CIPHER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "NULL", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_NULL, 0x18, -1, -1, -1, -1 },
    { "CERTIFICATE", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE, 0x18, -1, -1, -1, -1 },
    { "KEY", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY, 0x18, -1, -1, -1, -1 },
    { "SECRET", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SECRET, 0x18, -1, -1, -1, -1 },
    { "SEALED", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SEALED, 0x18, -1, -1, -1, -1 },
    { "KEY_PRIVATE", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PRIVATE, 0x18, -1, -1, -1, -1 },
    { "KEY_PUBLIC", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PUBLIC, 0x18, -1, -1, -1, -1 },
    { "KEY_SECRET", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_SECRET, 0x18, -1, -1, -1, -1 },
    { "table_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x4, 42, -1, -1, -1 },
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "encodeCertificate", "LJavaSecurityCertCertificate;LJavaIoDataOutputStream;", "LJavaIoIOException;", "decodeCertificate", "LJavaIoDataInputStream;", "encodeKey", "LJavaSecurityKey;LJavaIoDataOutputStream;", "decodeKey", "makePBECipher", "LNSString;I[C[BI", "setRandom", "LJavaSecuritySecureRandom;", "engineContainsAlias", "LNSString;", "engineDeleteEntry", "LJavaSecurityKeyStoreException;", "engineGetCertificate", "engineGetCertificateAlias", "LJavaSecurityCertCertificate;", "engineGetCertificateChain", "engineGetCreationDate", "engineGetKey", "LNSString;[C", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityUnrecoverableKeyException;", "engineIsCertificateEntry", "engineIsKeyEntry", "engineSetCertificateEntry", "LNSString;LJavaSecurityCertCertificate;", "engineSetKeyEntry", "LNSString;[B[LJavaSecurityCertCertificate;", "LNSString;LJavaSecurityKey;[C[LJavaSecurityCertCertificate;", "loadStore", "LJavaIoInputStream;", "saveStore", "LJavaIoOutputStream;", "engineLoad", "LJavaIoInputStream;[C", "engineStore", "LJavaIoOutputStream;[C", &LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_CIPHER, &LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_CIPHER, "version", "LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry;LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore;LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std;LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi = { "BcKeyStoreSpi", "lib.org.bouncycastle.jcajce.provider.keystore.bc", ptrTable, methods, fields, 7, 0x1, 25, 18, -1, 43, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, jint version_) {
  JavaSecurityKeyStoreSpi_init(self);
  self->table_ = new_JavaUtilHashtable_init();
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->version__ = version_;
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(jint version_) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, initWithInt_, version_)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(jint version_) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, initWithInt_, version_)
}

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeCertificateWithJavaSecurityCertCertificate_withJavaIoDataOutputStream_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, JavaSecurityCertCertificate *cert, JavaIoDataOutputStream *dOut) {
  @try {
    IOSByteArray *cEnc = [((JavaSecurityCertCertificate *) nil_chk(cert)) getEncoded];
    [((JavaIoDataOutputStream *) nil_chk(dOut)) writeUTFWithNSString:[cert getType]];
    [dOut writeIntWithInt:((IOSByteArray *) nil_chk(cEnc))->size_];
    [dOut writeWithByteArray:cEnc];
  }
  @catch (JavaSecurityCertCertificateEncodingException *ex) {
    @throw new_JavaIoIOException_initWithNSString_([ex description]);
  }
}

JavaSecurityCertCertificate *LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeCertificateWithJavaIoDataInputStream_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, JavaIoDataInputStream *dIn) {
  NSString *type = [((JavaIoDataInputStream *) nil_chk(dIn)) readUTF];
  IOSByteArray *cEnc = [IOSByteArray newArrayWithLength:[dIn readInt]];
  [dIn readFullyWithByteArray:cEnc];
  @try {
    JavaSecurityCertCertificateFactory *cFact = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createCertificateFactoryWithNSString:type];
    JavaIoByteArrayInputStream *bIn = new_JavaIoByteArrayInputStream_initWithByteArray_(cEnc);
    return [((JavaSecurityCertCertificateFactory *) nil_chk(cFact)) generateCertificateWithJavaIoInputStream:bIn];
  }
  @catch (JavaSecurityNoSuchProviderException *ex) {
    @throw new_JavaIoIOException_initWithNSString_([ex description]);
  }
  @catch (JavaSecurityCertCertificateException *ex) {
    @throw new_JavaIoIOException_initWithNSString_([ex description]);
  }
}

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeKeyWithJavaSecurityKey_withJavaIoDataOutputStream_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, id<JavaSecurityKey> key, JavaIoDataOutputStream *dOut) {
  IOSByteArray *enc = [((id<JavaSecurityKey>) nil_chk(key)) getEncoded];
  if ([JavaSecurityPrivateKey_class_() isInstance:key]) {
    [((JavaIoDataOutputStream *) nil_chk(dOut)) writeWithInt:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PRIVATE];
  }
  else if ([JavaSecurityPublicKey_class_() isInstance:key]) {
    [((JavaIoDataOutputStream *) nil_chk(dOut)) writeWithInt:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PUBLIC];
  }
  else {
    [((JavaIoDataOutputStream *) nil_chk(dOut)) writeWithInt:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_SECRET];
  }
  [dOut writeUTFWithNSString:[key getFormat]];
  [dOut writeUTFWithNSString:[key getAlgorithm]];
  [dOut writeIntWithInt:((IOSByteArray *) nil_chk(enc))->size_];
  [dOut writeWithByteArray:enc];
}

id<JavaSecurityKey> LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeKeyWithJavaIoDataInputStream_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, JavaIoDataInputStream *dIn) {
  jint keyType = [((JavaIoDataInputStream *) nil_chk(dIn)) read];
  NSString *format = [dIn readUTF];
  NSString *algorithm = [dIn readUTF];
  IOSByteArray *enc = [IOSByteArray newArrayWithLength:[dIn readInt]];
  id<JavaSecuritySpecKeySpec> spec;
  [dIn readFullyWithByteArray:enc];
  if ([((NSString *) nil_chk(format)) isEqual:@"PKCS#8"] || [format isEqual:@"PKCS8"]) {
    spec = new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_(enc);
  }
  else if ([format isEqual:@"X.509"] || [format isEqual:@"X509"]) {
    spec = new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_(enc);
  }
  else if ([format isEqual:@"RAW"]) {
    return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(enc, algorithm);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Key format ", format, @" not recognised!"));
  }
  @try {
    switch (keyType) {
      case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PRIVATE:
      return LibOrgBouncycastleJceProviderBouncyCastleProvider_getPrivateKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(enc));
      case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PUBLIC:
      return LibOrgBouncycastleJceProviderBouncyCastleProvider_getPublicKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(enc));
      case LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_SECRET:
      return [((JavaxCryptoSecretKeyFactory *) nil_chk([((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createSecretKeyFactoryWithNSString:algorithm])) generateSecretWithJavaSecuritySpecKeySpec:spec];
      default:
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$", @"Key type ", keyType, @" not recognised!"));
    }
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Exception creating key: ", [e description]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)obj {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_(self, outer$, alias, obj);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                                  withByteArray:(IOSByteArray *)obj
                                           withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_(self, outer$, alias, obj, certChain);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                            withJavaSecurityKey:(id<JavaSecurityKey>)key
                                                                  withCharArray:(IOSCharArray *)password
                                           withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_(self, outer$, alias, key, password, certChain);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                               withJavaUtilDate:(JavaUtilDate *)date
                                                                        withInt:(jint)type
                                                                         withId:(id)obj {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_(self, outer$, alias, date, type, obj);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *)outer$
                                                                   withNSString:(NSString *)alias
                                                               withJavaUtilDate:(JavaUtilDate *)date
                                                                        withInt:(jint)type
                                                                         withId:(id)obj
                                           withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(self, outer$, alias, date, type, obj, certChain);
  return self;
}

- (jint)getType {
  return type_;
}

- (NSString *)getAlias {
  return alias_;
}

- (id)getObject {
  return obj_;
}

- (id)getObjectWithCharArray:(IOSCharArray *)password {
  if (password == nil || password->size_ == 0) {
    if ([JavaSecurityKey_class_() isInstance:obj_]) {
      return obj_;
    }
  }
  if (type_ == LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SEALED) {
    JavaIoByteArrayInputStream *bIn = new_JavaIoByteArrayInputStream_initWithByteArray_((IOSByteArray *) cast_chk(obj_, [IOSByteArray class]));
    JavaIoDataInputStream *dIn = new_JavaIoDataInputStream_initWithJavaIoInputStream_(bIn);
    @try {
      IOSByteArray *salt = [IOSByteArray newArrayWithLength:[dIn readInt]];
      [dIn readFullyWithByteArray:salt];
      jint iterationCount = [dIn readInt];
      JavaxCryptoCipher *cipher = [this$0_ makePBECipherWithNSString:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_CIPHER withInt:JavaxCryptoCipher_DECRYPT_MODE withCharArray:password withByteArray:salt withInt:iterationCount];
      JavaxCryptoCipherInputStream *cIn = new_JavaxCryptoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(dIn, cipher);
      @try {
        return LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeKeyWithJavaIoDataInputStream_(this$0_, new_JavaIoDataInputStream_initWithJavaIoInputStream_(cIn));
      }
      @catch (JavaLangException *x) {
        bIn = new_JavaIoByteArrayInputStream_initWithByteArray_((IOSByteArray *) cast_chk(obj_, [IOSByteArray class]));
        dIn = new_JavaIoDataInputStream_initWithJavaIoInputStream_(bIn);
        salt = [IOSByteArray newArrayWithLength:[dIn readInt]];
        [dIn readFullyWithByteArray:salt];
        iterationCount = [dIn readInt];
        cipher = [this$0_ makePBECipherWithNSString:JreStrcat("$$", @"Broken", LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_CIPHER) withInt:JavaxCryptoCipher_DECRYPT_MODE withCharArray:password withByteArray:salt withInt:iterationCount];
        cIn = new_JavaxCryptoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(dIn, cipher);
        id<JavaSecurityKey> k = nil;
        @try {
          k = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeKeyWithJavaIoDataInputStream_(this$0_, new_JavaIoDataInputStream_initWithJavaIoInputStream_(cIn));
        }
        @catch (JavaLangException *y) {
          bIn = new_JavaIoByteArrayInputStream_initWithByteArray_((IOSByteArray *) cast_chk(obj_, [IOSByteArray class]));
          dIn = new_JavaIoDataInputStream_initWithJavaIoInputStream_(bIn);
          salt = [IOSByteArray newArrayWithLength:[dIn readInt]];
          [dIn readFullyWithByteArray:salt];
          iterationCount = [dIn readInt];
          cipher = [this$0_ makePBECipherWithNSString:JreStrcat("$$", @"Old", LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_CIPHER) withInt:JavaxCryptoCipher_DECRYPT_MODE withCharArray:password withByteArray:salt withInt:iterationCount];
          cIn = new_JavaxCryptoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(dIn, cipher);
          k = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_decodeKeyWithJavaIoDataInputStream_(this$0_, new_JavaIoDataInputStream_initWithJavaIoInputStream_(cIn));
        }
        if (k != nil) {
          JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
          JavaIoDataOutputStream *dOut = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(bOut);
          [dOut writeIntWithInt:salt->size_];
          [dOut writeWithByteArray:salt];
          [dOut writeIntWithInt:iterationCount];
          JavaxCryptoCipher *out = [this$0_ makePBECipherWithNSString:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_CIPHER withInt:JavaxCryptoCipher_ENCRYPT_MODE withCharArray:password withByteArray:salt withInt:iterationCount];
          JavaxCryptoCipherOutputStream *cOut = new_JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(dOut, out);
          dOut = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(cOut);
          LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeKeyWithJavaSecurityKey_withJavaIoDataOutputStream_(this$0_, k, dOut);
          [dOut close];
          obj_ = [bOut toByteArray];
          return k;
        }
        else {
          @throw new_JavaSecurityUnrecoverableKeyException_initWithNSString_(@"no match");
        }
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityUnrecoverableKeyException_initWithNSString_(@"no match");
    }
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"forget something!");
  }
}

- (IOSObjectArray *)getCertificateChain {
  return certChain_;
}

- (JavaUtilDate *)getDate {
  return date_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 3, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 6, 7, 8, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertCertificate;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:withNSString:withJavaSecurityCertCertificate:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:withNSString:withByteArray:withJavaSecurityCertCertificateArray:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:withNSString:withJavaSecurityKey:withCharArray:withJavaSecurityCertCertificateArray:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:withNSString:withJavaUtilDate:withInt:withId:);
  methods[4].selector = @selector(initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi:withNSString:withJavaUtilDate:withInt:withId:withJavaSecurityCertCertificateArray:);
  methods[5].selector = @selector(getType);
  methods[6].selector = @selector(getAlias);
  methods[7].selector = @selector(getObject);
  methods[8].selector = @selector(getObjectWithCharArray:);
  methods[9].selector = @selector(getCertificateChain);
  methods[10].selector = @selector(getDate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "alias_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "obj_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "certChain_", "[LJavaSecurityCertCertificate;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "date_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaSecurityCertCertificate;", "LNSString;[B[LJavaSecurityCertCertificate;", "LNSString;LJavaSecurityKey;[C[LJavaSecurityCertCertificate;", "LJavaLangException;", "LNSString;LJavaUtilDate;ILNSObject;", "LNSString;LJavaUtilDate;ILNSObject;[LJavaSecurityCertCertificate;", "getObject", "[C", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityUnrecoverableKeyException;", "LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry = { "StoreEntry", "lib.org.bouncycastle.jcajce.provider.keystore.bc", ptrTable, methods, fields, 7, 0x2, 11, 6, 9, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaSecurityCertCertificate *obj) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->date_ = new_JavaUtilDate_init();
  self->type_ = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE;
  self->alias_ = alias;
  self->obj_ = obj;
  self->certChain_ = nil;
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaSecurityCertCertificate *obj) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_, outer$, alias, obj)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaSecurityCertCertificate *obj) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityCertCertificate_, outer$, alias, obj)
}

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, IOSByteArray *obj, IOSObjectArray *certChain) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->date_ = new_JavaUtilDate_init();
  self->type_ = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SECRET;
  self->alias_ = alias;
  self->obj_ = obj;
  self->certChain_ = certChain;
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, IOSByteArray *obj, IOSObjectArray *certChain) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_, outer$, alias, obj, certChain)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, IOSByteArray *obj, IOSObjectArray *certChain) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withByteArray_withJavaSecurityCertCertificateArray_, outer$, alias, obj, certChain)
}

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, id<JavaSecurityKey> key, IOSCharArray *password, IOSObjectArray *certChain) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->date_ = new_JavaUtilDate_init();
  self->type_ = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SEALED;
  self->alias_ = alias;
  self->certChain_ = certChain;
  IOSByteArray *salt = [IOSByteArray newArrayWithLength:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_SALT_SIZE];
  [((JavaSecuritySecureRandom *) nil_chk(outer$->random_)) setSeedWithLong:JavaLangSystem_currentTimeMillis()];
  [((JavaSecuritySecureRandom *) nil_chk(outer$->random_)) nextBytesWithByteArray:salt];
  jint iterationCount = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_MIN_ITERATIONS + ([((JavaSecuritySecureRandom *) nil_chk(outer$->random_)) nextInt] & (jint) 0x3ff);
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  JavaIoDataOutputStream *dOut = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(bOut);
  [dOut writeIntWithInt:salt->size_];
  [dOut writeWithByteArray:salt];
  [dOut writeIntWithInt:iterationCount];
  JavaxCryptoCipher *cipher = [outer$ makePBECipherWithNSString:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_CIPHER withInt:JavaxCryptoCipher_ENCRYPT_MODE withCharArray:password withByteArray:salt withInt:iterationCount];
  JavaxCryptoCipherOutputStream *cOut = new_JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(dOut, cipher);
  dOut = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(cOut);
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_encodeKeyWithJavaSecurityKey_withJavaIoDataOutputStream_(outer$, key, dOut);
  [dOut close];
  self->obj_ = [bOut toByteArray];
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, id<JavaSecurityKey> key, IOSCharArray *password, IOSObjectArray *certChain) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_, outer$, alias, key, password, certChain)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, id<JavaSecurityKey> key, IOSCharArray *password, IOSObjectArray *certChain) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaSecurityKey_withCharArray_withJavaSecurityCertCertificateArray_, outer$, alias, key, password, certChain)
}

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->date_ = new_JavaUtilDate_init();
  self->alias_ = alias;
  self->date_ = date;
  self->type_ = type;
  self->obj_ = obj;
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_, outer$, alias, date, type, obj)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_, outer$, alias, date, type, obj)
}

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj, IOSObjectArray *certChain) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->date_ = new_JavaUtilDate_init();
  self->alias_ = alias;
  self->date_ = date;
  self->type_ = type;
  self->obj_ = obj;
  self->certChain_ = certChain;
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj, IOSObjectArray *certChain) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_, outer$, alias, date, type, obj, certChain)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry_initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *outer$, NSString *alias, JavaUtilDate *date, jint type, id obj, IOSObjectArray *certChain) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry, initWithLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_withNSString_withJavaUtilDate_withInt_withId_withJavaSecurityCertCertificateArray_, outer$, alias, date, type, obj, certChain)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_StoreEntry)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)engineLoadWithJavaIoInputStream:(JavaIoInputStream *)stream
                          withCharArray:(IOSCharArray *)password {
  [((JavaUtilHashtable *) nil_chk(table_)) clear];
  if (stream == nil) {
    return;
  }
  JavaIoDataInputStream *dIn = new_JavaIoDataInputStream_initWithJavaIoInputStream_(stream);
  jint version_ = [dIn readInt];
  if (version_ != LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_VERSION) {
    if (version_ != 0 && version_ != 1) {
      @throw new_JavaIoIOException_initWithNSString_(@"Wrong version of key store.");
    }
  }
  IOSByteArray *salt = [IOSByteArray newArrayWithLength:[dIn readInt]];
  if (salt->size_ != LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_SALT_SIZE) {
    @throw new_JavaIoIOException_initWithNSString_(@"Key store corrupted.");
  }
  [dIn readFullyWithByteArray:salt];
  jint iterationCount = [dIn readInt];
  if ((iterationCount < 0) || (iterationCount > (JreLShift32(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_MIN_ITERATIONS, 6)))) {
    @throw new_JavaIoIOException_initWithNSString_(@"Key store corrupted.");
  }
  NSString *cipherAlg;
  if (version_ == 0) {
    cipherAlg = JreStrcat("$$", @"Old", LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_CIPHER);
  }
  else {
    cipherAlg = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_CIPHER;
  }
  JavaxCryptoCipher *cipher = [self makePBECipherWithNSString:cipherAlg withInt:JavaxCryptoCipher_DECRYPT_MODE withCharArray:password withByteArray:salt withInt:iterationCount];
  JavaxCryptoCipherInputStream *cIn = new_JavaxCryptoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(dIn, cipher);
  id<LibOrgBouncycastleCryptoDigest> dig = new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init();
  LibOrgBouncycastleCryptoIoDigestInputStream *dgIn = new_LibOrgBouncycastleCryptoIoDigestInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoDigest_(cIn, dig);
  [self loadStoreWithJavaIoInputStream:dgIn];
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[dig getDigestSize]];
  [dig doFinalWithByteArray:hash_ withInt:0];
  IOSByteArray *oldHash = [IOSByteArray newArrayWithLength:[dig getDigestSize]];
  LibOrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(cIn, oldHash);
  if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(hash_, oldHash)) {
    [((JavaUtilHashtable *) nil_chk(table_)) clear];
    @throw new_JavaIoIOException_initWithNSString_(@"KeyStore integrity check failed.");
  }
}

- (void)engineStoreWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                            withCharArray:(IOSCharArray *)password {
  JavaxCryptoCipher *cipher;
  JavaIoDataOutputStream *dOut = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(stream);
  IOSByteArray *salt = [IOSByteArray newArrayWithLength:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_SALT_SIZE];
  jint iterationCount = LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_MIN_ITERATIONS + ([((JavaSecuritySecureRandom *) nil_chk(random_)) nextInt] & (jint) 0x3ff);
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:salt];
  [dOut writeIntWithInt:version__];
  [dOut writeIntWithInt:salt->size_];
  [dOut writeWithByteArray:salt];
  [dOut writeIntWithInt:iterationCount];
  cipher = [self makePBECipherWithNSString:LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_CIPHER withInt:JavaxCryptoCipher_ENCRYPT_MODE withCharArray:password withByteArray:salt withInt:iterationCount];
  JavaxCryptoCipherOutputStream *cOut = new_JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(dOut, cipher);
  LibOrgBouncycastleCryptoIoDigestOutputStream *dgOut = new_LibOrgBouncycastleCryptoIoDigestOutputStream_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
  [self saveStoreWithJavaIoOutputStream:new_LibOrgBouncycastleUtilIoTeeOutputStream_initWithJavaIoOutputStream_withJavaIoOutputStream_(cOut, dgOut)];
  IOSByteArray *dig = [dgOut getDigest];
  [cOut writeWithByteArray:dig];
  [cOut close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineLoadWithJavaIoInputStream:withCharArray:);
  methods[2].selector = @selector(engineStoreWithJavaIoOutputStream:withCharArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "engineLoad", "LJavaIoInputStream;[C", "LJavaIoIOException;", "engineStore", "LJavaIoOutputStream;[C", "LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore = { "BouncyCastleStore", "lib.org.bouncycastle.jcajce.provider.keystore.bc", ptrTable, methods, NULL, 7, 0x9, 3, 0, 5, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore_init(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore *self) {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(self, 1);
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore, init)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std = { "Std", "lib.org.bouncycastle.jcajce.provider.keystore.bc", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std_init(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std *self) {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(self, LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_STORE_VERSION);
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std, init)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std)

@implementation LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1 = { "Version1", "lib.org.bouncycastle.jcajce.provider.keystore.bc", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1;
}

@end

void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1_init(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1 *self) {
  LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(self, 1);
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1 *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1, init)
}

LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1 *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1)
