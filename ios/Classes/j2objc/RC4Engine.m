//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/RC4Engine.java
//

#include "CipherParameters.h"
#include "DataLengthException.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OutputLengthException.h"
#include "RC4Engine.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleCryptoEnginesRC4Engine () {
 @public
  IOSByteArray *engineState_;
  jint x_;
  jint y_;
  IOSByteArray *workingKey_;
}

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRC4Engine, engineState_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRC4Engine, workingKey_, IOSByteArray *)

inline jint LibOrgBouncycastleCryptoEnginesRC4Engine_get_STATE_LENGTH(void);
#define LibOrgBouncycastleCryptoEnginesRC4Engine_STATE_LENGTH 256
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesRC4Engine, STATE_LENGTH, jint)

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesRC4Engine_setKeyWithByteArray_(LibOrgBouncycastleCryptoEnginesRC4Engine *self, IOSByteArray *keyBytes);

@implementation LibOrgBouncycastleCryptoEnginesRC4Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesRC4Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]]) {
    workingKey_ = [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) params))) getKey];
    LibOrgBouncycastleCryptoEnginesRC4Engine_setKeyWithByteArray_(self, workingKey_);
    return;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to RC4 init - ", [[((id<LibOrgBouncycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
}

- (NSString *)getAlgorithmName {
  return @"RC4";
}

- (jbyte)returnByteWithByte:(jbyte)inArg {
  x_ = (x_ + 1) & (jint) 0xff;
  y_ = (IOSByteArray_Get(nil_chk(engineState_), x_) + y_) & (jint) 0xff;
  jbyte tmp = IOSByteArray_Get(engineState_, x_);
  *IOSByteArray_GetRef(engineState_, x_) = IOSByteArray_Get(engineState_, y_);
  *IOSByteArray_GetRef(engineState_, y_) = tmp;
  return (jbyte) (inArg ^ IOSByteArray_Get(engineState_, (IOSByteArray_Get(engineState_, x_) + IOSByteArray_Get(engineState_, y_)) & (jint) 0xff));
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if ((inOff + len) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + len) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  for (jint i = 0; i < len; i++) {
    x_ = (x_ + 1) & (jint) 0xff;
    y_ = (IOSByteArray_Get(nil_chk(engineState_), x_) + y_) & (jint) 0xff;
    jbyte tmp = IOSByteArray_Get(engineState_, x_);
    *IOSByteArray_GetRef(engineState_, x_) = IOSByteArray_Get(engineState_, y_);
    *IOSByteArray_GetRef(engineState_, y_) = tmp;
    *IOSByteArray_GetRef(outArg, i + outOff) = (jbyte) (IOSByteArray_Get(inArg, i + inOff) ^ IOSByteArray_Get(engineState_, (IOSByteArray_Get(engineState_, x_) + IOSByteArray_Get(engineState_, y_)) & (jint) 0xff));
  }
  return len;
}

- (void)reset {
  LibOrgBouncycastleCryptoEnginesRC4Engine_setKeyWithByteArray_(self, workingKey_);
}

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes {
  LibOrgBouncycastleCryptoEnginesRC4Engine_setKeyWithByteArray_(self, keyBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(returnByteWithByte:);
  methods[4].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(setKeyWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STATE_LENGTH", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesRC4Engine_STATE_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "engineState_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "x_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "y_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workingKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "returnByte", "B", "processBytes", "[BII[BI", "setKey", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesRC4Engine = { "RC4Engine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesRC4Engine;
}

@end

void LibOrgBouncycastleCryptoEnginesRC4Engine_init(LibOrgBouncycastleCryptoEnginesRC4Engine *self) {
  NSObject_init(self);
  self->engineState_ = nil;
  self->x_ = 0;
  self->y_ = 0;
  self->workingKey_ = nil;
}

LibOrgBouncycastleCryptoEnginesRC4Engine *new_LibOrgBouncycastleCryptoEnginesRC4Engine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesRC4Engine, init)
}

LibOrgBouncycastleCryptoEnginesRC4Engine *create_LibOrgBouncycastleCryptoEnginesRC4Engine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesRC4Engine, init)
}

void LibOrgBouncycastleCryptoEnginesRC4Engine_setKeyWithByteArray_(LibOrgBouncycastleCryptoEnginesRC4Engine *self, IOSByteArray *keyBytes) {
  self->workingKey_ = keyBytes;
  self->x_ = 0;
  self->y_ = 0;
  if (self->engineState_ == nil) {
    self->engineState_ = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoEnginesRC4Engine_STATE_LENGTH];
  }
  for (jint i = 0; i < LibOrgBouncycastleCryptoEnginesRC4Engine_STATE_LENGTH; i++) {
    *IOSByteArray_GetRef(self->engineState_, i) = (jbyte) i;
  }
  jint i1 = 0;
  jint i2 = 0;
  for (jint i = 0; i < LibOrgBouncycastleCryptoEnginesRC4Engine_STATE_LENGTH; i++) {
    i2 = ((IOSByteArray_Get(nil_chk(keyBytes), i1) & (jint) 0xff) + IOSByteArray_Get(self->engineState_, i) + i2) & (jint) 0xff;
    jbyte tmp = IOSByteArray_Get(self->engineState_, i);
    *IOSByteArray_GetRef(self->engineState_, i) = IOSByteArray_Get(self->engineState_, i2);
    *IOSByteArray_GetRef(self->engineState_, i2) = tmp;
    i1 = (i1 + 1) % keyBytes->size_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesRC4Engine)
