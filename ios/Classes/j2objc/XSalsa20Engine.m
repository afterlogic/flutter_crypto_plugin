//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/XSalsa20Engine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pack.h"
#include "Salsa20Engine.h"
#include "XSalsa20Engine.h"
#include "java/lang/IllegalArgumentException.h"

@implementation LibOrgBouncycastleCryptoEnginesXSalsa20Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesXSalsa20Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"XSalsa20";
}

- (jint)getNonceSize {
  return 24;
}

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes {
  if (keyBytes == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" doesn't support re-init with null key"));
  }
  if (keyBytes->size_ != 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" requires a 256 bit key"));
  }
  [super setKeyWithByteArray:keyBytes withByteArray:ivBytes];
  LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(ivBytes, 8, engineState_, 8, 2);
  IOSIntArray *hsalsa20Out = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(engineState_))->size_];
  LibOrgBouncycastleCryptoEnginesSalsa20Engine_salsaCoreWithInt_withIntArray_withIntArray_(20, engineState_, hsalsa20Out);
  *IOSIntArray_GetRef(nil_chk(engineState_), 1) = IOSIntArray_Get(hsalsa20Out, 0) - IOSIntArray_Get(engineState_, 0);
  *IOSIntArray_GetRef(engineState_, 2) = IOSIntArray_Get(hsalsa20Out, 5) - IOSIntArray_Get(engineState_, 5);
  *IOSIntArray_GetRef(engineState_, 3) = IOSIntArray_Get(hsalsa20Out, 10) - IOSIntArray_Get(engineState_, 10);
  *IOSIntArray_GetRef(engineState_, 4) = IOSIntArray_Get(hsalsa20Out, 15) - IOSIntArray_Get(engineState_, 15);
  *IOSIntArray_GetRef(engineState_, 11) = IOSIntArray_Get(hsalsa20Out, 6) - IOSIntArray_Get(engineState_, 6);
  *IOSIntArray_GetRef(engineState_, 12) = IOSIntArray_Get(hsalsa20Out, 7) - IOSIntArray_Get(engineState_, 7);
  *IOSIntArray_GetRef(engineState_, 13) = IOSIntArray_Get(hsalsa20Out, 8) - IOSIntArray_Get(engineState_, 8);
  *IOSIntArray_GetRef(engineState_, 14) = IOSIntArray_Get(hsalsa20Out, 9) - IOSIntArray_Get(engineState_, 9);
  LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(ivBytes, 16, engineState_, 6, 2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(getNonceSize);
  methods[3].selector = @selector(setKeyWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setKey", "[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesXSalsa20Engine = { "XSalsa20Engine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesXSalsa20Engine;
}

@end

void LibOrgBouncycastleCryptoEnginesXSalsa20Engine_init(LibOrgBouncycastleCryptoEnginesXSalsa20Engine *self) {
  LibOrgBouncycastleCryptoEnginesSalsa20Engine_init(self);
}

LibOrgBouncycastleCryptoEnginesXSalsa20Engine *new_LibOrgBouncycastleCryptoEnginesXSalsa20Engine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesXSalsa20Engine, init)
}

LibOrgBouncycastleCryptoEnginesXSalsa20Engine *create_LibOrgBouncycastleCryptoEnginesXSalsa20Engine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesXSalsa20Engine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesXSalsa20Engine)
