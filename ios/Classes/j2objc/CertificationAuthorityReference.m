//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/eac/CertificationAuthorityReference.java
//

#include "CertificateHolderReference.h"
#include "CertificationAuthorityReference.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleAsn1EacCertificationAuthorityReference

- (instancetype)initWithNSString:(NSString *)countryCode
                    withNSString:(NSString *)holderMnemonic
                    withNSString:(NSString *)sequenceNumber {
  LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithNSString_withNSString_withNSString_(self, countryCode, holderMnemonic, sequenceNumber);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)contents {
  LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithByteArray_(self, contents);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:);
  methods[1].selector = @selector(initWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1EacCertificationAuthorityReference = { "CertificationAuthorityReference", "lib.org.bouncycastle.asn1.eac", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1EacCertificationAuthorityReference;
}

@end

void LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithNSString_withNSString_withNSString_(LibOrgBouncycastleAsn1EacCertificationAuthorityReference *self, NSString *countryCode, NSString *holderMnemonic, NSString *sequenceNumber) {
  LibOrgBouncycastleAsn1EacCertificateHolderReference_initWithNSString_withNSString_withNSString_(self, countryCode, holderMnemonic, sequenceNumber);
}

LibOrgBouncycastleAsn1EacCertificationAuthorityReference *new_LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithNSString_withNSString_withNSString_(NSString *countryCode, NSString *holderMnemonic, NSString *sequenceNumber) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EacCertificationAuthorityReference, initWithNSString_withNSString_withNSString_, countryCode, holderMnemonic, sequenceNumber)
}

LibOrgBouncycastleAsn1EacCertificationAuthorityReference *create_LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithNSString_withNSString_withNSString_(NSString *countryCode, NSString *holderMnemonic, NSString *sequenceNumber) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EacCertificationAuthorityReference, initWithNSString_withNSString_withNSString_, countryCode, holderMnemonic, sequenceNumber)
}

void LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithByteArray_(LibOrgBouncycastleAsn1EacCertificationAuthorityReference *self, IOSByteArray *contents) {
  LibOrgBouncycastleAsn1EacCertificateHolderReference_initWithByteArray_(self, contents);
}

LibOrgBouncycastleAsn1EacCertificationAuthorityReference *new_LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithByteArray_(IOSByteArray *contents) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EacCertificationAuthorityReference, initWithByteArray_, contents)
}

LibOrgBouncycastleAsn1EacCertificationAuthorityReference *create_LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithByteArray_(IOSByteArray *contents) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EacCertificationAuthorityReference, initWithByteArray_, contents)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1EacCertificationAuthorityReference)
