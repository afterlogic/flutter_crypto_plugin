//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/util/DSABase.java
//

#include "DSABase.h"
#include "DSAEncoding.h"
#include "DSAExt.h"
#include "Digest.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigInteger.h"
#include "java/security/SignatureException.h"
#include "java/security/SignatureSpi.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@implementation LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                    withLibOrgBouncycastleCryptoDSAExt:(id<LibOrgBouncycastleCryptoDSAExt>)signer
        withLibOrgBouncycastleCryptoSignersDSAEncoding:(id<LibOrgBouncycastleCryptoSignersDSAEncoding>)encoding {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoSignersDSAEncoding_(self, digest, signer, encoding);
  return self;
}

- (void)engineUpdateWithByte:(jbyte)b {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:b withInt:off withInt:len];
}

- (IOSByteArray *)engineSign {
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  @try {
    IOSObjectArray *sig = [((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) generateSignatureWithByteArray:hash_];
    return [((id<LibOrgBouncycastleCryptoSignersDSAEncoding>) nil_chk(encoding_)) encodeWithJavaMathBigInteger:[((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) getOrder] withJavaMathBigInteger:IOSObjectArray_Get(nil_chk(sig), 0) withJavaMathBigInteger:IOSObjectArray_Get(sig, 1)];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_([e description]);
  }
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes {
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  IOSObjectArray *sig;
  @try {
    sig = [((id<LibOrgBouncycastleCryptoSignersDSAEncoding>) nil_chk(encoding_)) decodeWithJavaMathBigInteger:[((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) getOrder] withByteArray:sigBytes];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"error decoding signature bytes.");
  }
  return [((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) verifySignatureWithByteArray:hash_ withJavaMathBigInteger:IOSObjectArray_Get(nil_chk(sig), 0) withJavaMathBigInteger:IOSObjectArray_Get(sig, 1)];
}

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)param {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 4, 3, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x4, 5, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleCryptoDSAExt:withLibOrgBouncycastleCryptoSignersDSAEncoding:);
  methods[1].selector = @selector(engineUpdateWithByte:);
  methods[2].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(engineSign);
  methods[4].selector = @selector(engineVerifyWithByteArray:);
  methods[5].selector = @selector(engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[6].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[7].selector = @selector(engineGetParameterWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "signer_", "LLibOrgBouncycastleCryptoDSAExt;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encoding_", "LLibOrgBouncycastleCryptoSignersDSAEncoding;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleCryptoDSAExt;LLibOrgBouncycastleCryptoSignersDSAEncoding;", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "[B", "engineSetParameter", "LJavaSecuritySpecAlgorithmParameterSpec;", "LNSString;LNSObject;", "engineGetParameter", "LNSString;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase = { "DSABase", "lib.org.bouncycastle.jcajce.provider.asymmetric.util", ptrTable, methods, fields, 7, 0x401, 8, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoSignersDSAEncoding_(LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase *self, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoDSAExt> signer, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) {
  JavaSecuritySignatureSpi_init(self);
  self->digest_ = digest;
  self->signer_ = signer;
  self->encoding_ = encoding;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase)
