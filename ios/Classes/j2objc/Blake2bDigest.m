//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/Blake2bDigest.java
//

#include "Arrays.h"
#include "Blake2bDigest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pack.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoDigestsBlake2bDigest () {
 @public
  jint digestLength_;
  jint keyLength_;
  IOSByteArray *salt_;
  IOSByteArray *personalization_;
  IOSByteArray *key_;
  IOSByteArray *buffer_;
  jint bufferPos_;
  IOSLongArray *internalState_;
  IOSLongArray *chainValue_;
  jlong t0_;
  jlong t1_;
  jlong f0_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)initializeInternalState OBJC_METHOD_FAMILY_NONE;

- (void)compressWithByteArray:(IOSByteArray *)message
                      withInt:(jint)messagePos;

- (void)GWithLong:(jlong)m1
         withLong:(jlong)m2
          withInt:(jint)posA
          withInt:(jint)posB
          withInt:(jint)posC
          withInt:(jint)posD;

+ (jlong)rotr64WithLong:(jlong)x
                withInt:(jint)rot;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsBlake2bDigest, salt_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsBlake2bDigest, personalization_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsBlake2bDigest, key_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsBlake2bDigest, buffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsBlake2bDigest, internalState_, IOSLongArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsBlake2bDigest, chainValue_, IOSLongArray *)

inline IOSLongArray *LibOrgBouncycastleCryptoDigestsBlake2bDigest_get_blake2b_IV(void);
static IOSLongArray *LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, blake2b_IV, IOSLongArray *)

inline IOSObjectArray *LibOrgBouncycastleCryptoDigestsBlake2bDigest_get_blake2b_sigma(void);
static IOSObjectArray *LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, blake2b_sigma, IOSObjectArray *)

inline jint LibOrgBouncycastleCryptoDigestsBlake2bDigest_get_ROUNDS(void);
inline jint LibOrgBouncycastleCryptoDigestsBlake2bDigest_set_ROUNDS(jint value);
inline jint *LibOrgBouncycastleCryptoDigestsBlake2bDigest_getRef_ROUNDS(void);
static jint LibOrgBouncycastleCryptoDigestsBlake2bDigest_ROUNDS = 12;
J2OBJC_STATIC_FIELD_PRIMITIVE(LibOrgBouncycastleCryptoDigestsBlake2bDigest, ROUNDS, jint)

inline jint LibOrgBouncycastleCryptoDigestsBlake2bDigest_get_BLOCK_LENGTH_BYTES(void);
#define LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES 128
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsBlake2bDigest, BLOCK_LENGTH_BYTES, jint)

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsBlake2bDigest_init__(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsBlake2bDigest_initializeInternalState(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsBlake2bDigest_compressWithByteArray_withInt_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self, IOSByteArray *message, jint messagePos);

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self, jlong m1, jlong m2, jint posA, jint posB, jint posC, jint posD);

__attribute__((unused)) static jlong LibOrgBouncycastleCryptoDigestsBlake2bDigest_rotr64WithLong_withInt_(jlong x, jint rot);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoDigestsBlake2bDigest)

@implementation LibOrgBouncycastleCryptoDigestsBlake2bDigest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoDigestsBlake2bDigest:(LibOrgBouncycastleCryptoDigestsBlake2bDigest *)digest {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithLibOrgBouncycastleCryptoDigestsBlake2bDigest_(self, digest);
  return self;
}

- (instancetype)initWithInt:(jint)digestSize {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(self, digestSize);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)key {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithByteArray_(self, key);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)key
                          withInt:(jint)digestLength
                    withByteArray:(IOSByteArray *)salt
                    withByteArray:(IOSByteArray *)personalization {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithByteArray_withInt_withByteArray_withByteArray_(self, key, digestLength, salt, personalization);
  return self;
}

- (void)init__ {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_init__(self);
}

- (void)initializeInternalState {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_initializeInternalState(self);
}

- (void)updateWithByte:(jbyte)b {
  jint remainingLength = 0;
  remainingLength = LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES - bufferPos_;
  if (remainingLength == 0) {
    t0_ += LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES;
    if (t0_ == 0) {
      t1_++;
    }
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_compressWithByteArray_withInt_(self, buffer_, 0);
    LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(buffer_, (jbyte) 0);
    *IOSByteArray_GetRef(nil_chk(buffer_), 0) = b;
    bufferPos_ = 1;
  }
  else {
    *IOSByteArray_GetRef(nil_chk(buffer_), bufferPos_) = b;
    bufferPos_++;
    return;
  }
}

- (void)updateWithByteArray:(IOSByteArray *)message
                    withInt:(jint)offset
                    withInt:(jint)len {
  if (message == nil || len == 0) {
    return;
  }
  jint remainingLength = 0;
  if (bufferPos_ != 0) {
    remainingLength = LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES - bufferPos_;
    if (remainingLength < len) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(message, offset, buffer_, bufferPos_, remainingLength);
      t0_ += LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES;
      if (t0_ == 0) {
        t1_++;
      }
      LibOrgBouncycastleCryptoDigestsBlake2bDigest_compressWithByteArray_withInt_(self, buffer_, 0);
      bufferPos_ = 0;
      LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(buffer_, (jbyte) 0);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(message, offset, buffer_, bufferPos_, len);
      bufferPos_ += len;
      return;
    }
  }
  jint messagePos;
  jint blockWiseLastPos = offset + len - LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES;
  for (messagePos = offset + remainingLength; messagePos < blockWiseLastPos; messagePos += LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES) {
    t0_ += LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES;
    if (t0_ == 0) {
      t1_++;
    }
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_compressWithByteArray_withInt_(self, message, messagePos);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(message, messagePos, buffer_, 0, offset + len - messagePos);
  bufferPos_ += offset + len - messagePos;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOffset {
  f0_ = (jlong) 0xFFFFFFFFFFFFFFFFLL;
  t0_ += bufferPos_;
  if (bufferPos_ > 0 && t0_ == 0) {
    t1_++;
  }
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_compressWithByteArray_withInt_(self, buffer_, 0);
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(buffer_, (jbyte) 0);
  LibOrgBouncycastleUtilArrays_fillWithLongArray_withLong_(internalState_, 0LL);
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(chainValue_))->size_ && (i * 8 < digestLength_); i++) {
    IOSByteArray *bytes = LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_(IOSLongArray_Get(chainValue_, i));
    if (i * 8 < digestLength_ - 8) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, outArg, outOffset + i * 8, 8);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, outArg, outOffset + i * 8, digestLength_ - (i * 8));
    }
  }
  LibOrgBouncycastleUtilArrays_fillWithLongArray_withLong_(chainValue_, 0LL);
  [self reset];
  return digestLength_;
}

- (void)reset {
  bufferPos_ = 0;
  f0_ = 0LL;
  t0_ = 0LL;
  t1_ = 0LL;
  chainValue_ = nil;
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(buffer_, (jbyte) 0);
  if (key_ != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key_, 0, buffer_, 0, key_->size_);
    bufferPos_ = LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES;
  }
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_init__(self);
}

- (void)compressWithByteArray:(IOSByteArray *)message
                      withInt:(jint)messagePos {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_compressWithByteArray_withInt_(self, message, messagePos);
}

- (void)GWithLong:(jlong)m1
         withLong:(jlong)m2
          withInt:(jint)posA
          withInt:(jint)posB
          withInt:(jint)posC
          withInt:(jint)posD {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, m1, m2, posA, posB, posC, posD);
}

+ (jlong)rotr64WithLong:(jlong)x
                withInt:(jint)rot {
  return LibOrgBouncycastleCryptoDigestsBlake2bDigest_rotr64WithLong_withInt_(x, rot);
}

- (NSString *)getAlgorithmName {
  return @"BLAKE2b";
}

- (jint)getDigestSize {
  return digestLength_;
}

- (jint)getByteLength {
  return LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES;
}

- (void)clearKey {
  if (key_ != nil) {
    LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(key_, (jbyte) 0);
    LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(buffer_, (jbyte) 0);
  }
}

- (void)clearSalt {
  if (salt_ != nil) {
    LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(salt_, (jbyte) 0);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoDigestsBlake2bDigest:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithByteArray:);
  methods[4].selector = @selector(initWithByteArray:withInt:withByteArray:withByteArray:);
  methods[5].selector = @selector(init__);
  methods[6].selector = @selector(initializeInternalState);
  methods[7].selector = @selector(updateWithByte:);
  methods[8].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(reset);
  methods[11].selector = @selector(compressWithByteArray:withInt:);
  methods[12].selector = @selector(GWithLong:withLong:withInt:withInt:withInt:withInt:);
  methods[13].selector = @selector(rotr64WithLong:withInt:);
  methods[14].selector = @selector(getAlgorithmName);
  methods[15].selector = @selector(getDigestSize);
  methods[16].selector = @selector(getByteLength);
  methods[17].selector = @selector(clearKey);
  methods[18].selector = @selector(clearSalt);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "blake2b_IV", "[J", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "blake2b_sigma", "[[B", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "ROUNDS", "I", .constantValue.asLong = 0, 0xa, -1, 17, -1, -1 },
    { "BLOCK_LENGTH_BYTES", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES, 0x1a, -1, -1, -1, -1 },
    { "digestLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "salt_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "personalization_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "internalState_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "chainValue_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t0_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t1_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "f0_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigestsBlake2bDigest;", "I", "[B", "[BI[B[B", "init", "update", "B", "[BII", "doFinal", "[BI", "compress", "G", "JJIIII", "rotr64", "JI", &LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, &LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, &LibOrgBouncycastleCryptoDigestsBlake2bDigest_ROUNDS };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsBlake2bDigest = { "Blake2bDigest", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 19, 16, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsBlake2bDigest;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoDigestsBlake2bDigest class]) {
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV = [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0x6a09e667f3bcc908LL, (jlong) 0xbb67ae8584caa73bLL, (jlong) 0x3c6ef372fe94f82bLL, (jlong) 0xa54ff53a5f1d36f1LL, (jlong) 0x510e527fade682d1LL, (jlong) 0x9b05688c2b3e6c1fLL, (jlong) 0x1f83d9abfb41bd6bLL, (jlong) 0x5be0cd19137e2179LL } count:8];
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSByteArray newArrayWithBytes:(jbyte[]){ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 } count:16], [IOSByteArray newArrayWithBytes:(jbyte[]){ 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 } count:16] } count:12 type:IOSClass_byteArray(1)];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoDigestsBlake2bDigest)
  }
}

@end

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_init(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self) {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(self, 512);
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, init)
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *create_LibOrgBouncycastleCryptoDigestsBlake2bDigest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, init)
}

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithLibOrgBouncycastleCryptoDigestsBlake2bDigest_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self, LibOrgBouncycastleCryptoDigestsBlake2bDigest *digest) {
  NSObject_init(self);
  self->digestLength_ = 64;
  self->keyLength_ = 0;
  self->salt_ = nil;
  self->personalization_ = nil;
  self->key_ = nil;
  self->buffer_ = nil;
  self->bufferPos_ = 0;
  self->internalState_ = [IOSLongArray newArrayWithLength:16];
  self->chainValue_ = nil;
  self->t0_ = 0LL;
  self->t1_ = 0LL;
  self->f0_ = 0LL;
  self->bufferPos_ = ((LibOrgBouncycastleCryptoDigestsBlake2bDigest *) nil_chk(digest))->bufferPos_;
  self->buffer_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(digest->buffer_);
  self->keyLength_ = digest->keyLength_;
  self->key_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(digest->key_);
  self->digestLength_ = digest->digestLength_;
  self->chainValue_ = LibOrgBouncycastleUtilArrays_cloneWithLongArray_(digest->chainValue_);
  self->personalization_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(digest->personalization_);
  self->salt_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(digest->salt_);
  self->t0_ = digest->t0_;
  self->t1_ = digest->t1_;
  self->f0_ = digest->f0_;
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithLibOrgBouncycastleCryptoDigestsBlake2bDigest_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, initWithLibOrgBouncycastleCryptoDigestsBlake2bDigest_, digest)
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *create_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithLibOrgBouncycastleCryptoDigestsBlake2bDigest_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, initWithLibOrgBouncycastleCryptoDigestsBlake2bDigest_, digest)
}

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self, jint digestSize) {
  NSObject_init(self);
  self->digestLength_ = 64;
  self->keyLength_ = 0;
  self->salt_ = nil;
  self->personalization_ = nil;
  self->key_ = nil;
  self->buffer_ = nil;
  self->bufferPos_ = 0;
  self->internalState_ = [IOSLongArray newArrayWithLength:16];
  self->chainValue_ = nil;
  self->t0_ = 0LL;
  self->t1_ = 0LL;
  self->f0_ = 0LL;
  if (digestSize < 8 || digestSize > 512 || digestSize % 8 != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"BLAKE2b digest bit length must be a multiple of 8 and not greater than 512");
  }
  self->buffer_ = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES];
  self->keyLength_ = 0;
  self->digestLength_ = digestSize / 8;
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_init__(self);
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(jint digestSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, initWithInt_, digestSize)
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *create_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithInt_(jint digestSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, initWithInt_, digestSize)
}

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithByteArray_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self, IOSByteArray *key) {
  NSObject_init(self);
  self->digestLength_ = 64;
  self->keyLength_ = 0;
  self->salt_ = nil;
  self->personalization_ = nil;
  self->key_ = nil;
  self->buffer_ = nil;
  self->bufferPos_ = 0;
  self->internalState_ = [IOSLongArray newArrayWithLength:16];
  self->chainValue_ = nil;
  self->t0_ = 0LL;
  self->t1_ = 0LL;
  self->f0_ = 0LL;
  self->buffer_ = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES];
  if (key != nil) {
    self->key_ = [IOSByteArray newArrayWithLength:key->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, self->key_, 0, key->size_);
    if (key->size_ > 64) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Keys > 64 are not supported");
    }
    self->keyLength_ = key->size_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, self->buffer_, 0, key->size_);
    self->bufferPos_ = LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES;
  }
  self->digestLength_ = 64;
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_init__(self);
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithByteArray_(IOSByteArray *key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, initWithByteArray_, key)
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *create_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithByteArray_(IOSByteArray *key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, initWithByteArray_, key)
}

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithByteArray_withInt_withByteArray_withByteArray_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self, IOSByteArray *key, jint digestLength, IOSByteArray *salt, IOSByteArray *personalization) {
  NSObject_init(self);
  self->digestLength_ = 64;
  self->keyLength_ = 0;
  self->salt_ = nil;
  self->personalization_ = nil;
  self->key_ = nil;
  self->buffer_ = nil;
  self->bufferPos_ = 0;
  self->internalState_ = [IOSLongArray newArrayWithLength:16];
  self->chainValue_ = nil;
  self->t0_ = 0LL;
  self->t1_ = 0LL;
  self->f0_ = 0LL;
  self->buffer_ = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES];
  if (digestLength < 1 || digestLength > 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid digest length (required: 1 - 64)");
  }
  self->digestLength_ = digestLength;
  if (salt != nil) {
    if (salt->size_ != 16) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"salt length must be exactly 16 bytes");
    }
    self->salt_ = [IOSByteArray newArrayWithLength:16];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(salt, 0, self->salt_, 0, salt->size_);
  }
  if (personalization != nil) {
    if (personalization->size_ != 16) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"personalization length must be exactly 16 bytes");
    }
    self->personalization_ = [IOSByteArray newArrayWithLength:16];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(personalization, 0, self->personalization_, 0, personalization->size_);
  }
  if (key != nil) {
    self->key_ = [IOSByteArray newArrayWithLength:key->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, self->key_, 0, key->size_);
    if (key->size_ > 64) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Keys > 64 are not supported");
    }
    self->keyLength_ = key->size_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, self->buffer_, 0, key->size_);
    self->bufferPos_ = LibOrgBouncycastleCryptoDigestsBlake2bDigest_BLOCK_LENGTH_BYTES;
  }
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_init__(self);
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *new_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithByteArray_withInt_withByteArray_withByteArray_(IOSByteArray *key, jint digestLength, IOSByteArray *salt, IOSByteArray *personalization) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, initWithByteArray_withInt_withByteArray_withByteArray_, key, digestLength, salt, personalization)
}

LibOrgBouncycastleCryptoDigestsBlake2bDigest *create_LibOrgBouncycastleCryptoDigestsBlake2bDigest_initWithByteArray_withInt_withByteArray_withByteArray_(IOSByteArray *key, jint digestLength, IOSByteArray *salt, IOSByteArray *personalization) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsBlake2bDigest, initWithByteArray_withInt_withByteArray_withByteArray_, key, digestLength, salt, personalization)
}

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_init__(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self) {
  if (self->chainValue_ == nil) {
    self->chainValue_ = [IOSLongArray newArrayWithLength:8];
    *IOSLongArray_GetRef(self->chainValue_, 0) = IOSLongArray_Get(nil_chk(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV), 0) ^ (self->digestLength_ | (JreLShift32(self->keyLength_, 8)) | (jint) 0x1010000);
    *IOSLongArray_GetRef(self->chainValue_, 1) = IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 1);
    *IOSLongArray_GetRef(self->chainValue_, 2) = IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 2);
    *IOSLongArray_GetRef(self->chainValue_, 3) = IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 3);
    *IOSLongArray_GetRef(self->chainValue_, 4) = IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 4);
    *IOSLongArray_GetRef(self->chainValue_, 5) = IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 5);
    if (self->salt_ != nil) {
      *IOSLongArray_GetRef(self->chainValue_, 4) ^= LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(self->salt_, 0);
      *IOSLongArray_GetRef(nil_chk(self->chainValue_), 5) ^= LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(self->salt_, 8);
    }
    *IOSLongArray_GetRef(nil_chk(self->chainValue_), 6) = IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 6);
    *IOSLongArray_GetRef(self->chainValue_, 7) = IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 7);
    if (self->personalization_ != nil) {
      *IOSLongArray_GetRef(self->chainValue_, 6) ^= LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(self->personalization_, 0);
      *IOSLongArray_GetRef(nil_chk(self->chainValue_), 7) ^= LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(self->personalization_, 8);
    }
  }
}

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_initializeInternalState(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self) {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->chainValue_, 0, self->internalState_, 0, ((IOSLongArray *) nil_chk(self->chainValue_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 0, self->internalState_, ((IOSLongArray *) nil_chk(self->chainValue_))->size_, 4);
  *IOSLongArray_GetRef(nil_chk(self->internalState_), 12) = self->t0_ ^ IOSLongArray_Get(nil_chk(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV), 4);
  *IOSLongArray_GetRef(self->internalState_, 13) = self->t1_ ^ IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 5);
  *IOSLongArray_GetRef(self->internalState_, 14) = self->f0_ ^ IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 6);
  *IOSLongArray_GetRef(self->internalState_, 15) = IOSLongArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_IV, 7);
}

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_compressWithByteArray_withInt_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self, IOSByteArray *message, jint messagePos) {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_initializeInternalState(self);
  IOSLongArray *m = [IOSLongArray newArrayWithLength:16];
  for (jint j = 0; j < 16; j++) {
    *IOSLongArray_GetRef(m, j) = LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(message, messagePos + j * 8);
  }
  for (jint round = 0; round < LibOrgBouncycastleCryptoDigestsBlake2bDigest_ROUNDS; round++) {
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma), round)), 0)), IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 1)), 0, 4, 8, 12);
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 2)), IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 3)), 1, 5, 9, 13);
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 4)), IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 5)), 2, 6, 10, 14);
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 6)), IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 7)), 3, 7, 11, 15);
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 8)), IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 9)), 0, 5, 10, 15);
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 10)), IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 11)), 1, 6, 11, 12);
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 12)), IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 13)), 2, 7, 8, 13);
    LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(self, IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 14)), IOSLongArray_Get(m, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(LibOrgBouncycastleCryptoDigestsBlake2bDigest_blake2b_sigma, round)), 15)), 3, 4, 9, 14);
  }
  for (jint offset = 0; offset < ((IOSLongArray *) nil_chk(self->chainValue_))->size_; offset++) {
    *IOSLongArray_GetRef(self->chainValue_, offset) = IOSLongArray_Get(self->chainValue_, offset) ^ IOSLongArray_Get(nil_chk(self->internalState_), offset) ^ IOSLongArray_Get(self->internalState_, offset + 8);
  }
}

void LibOrgBouncycastleCryptoDigestsBlake2bDigest_GWithLong_withLong_withInt_withInt_withInt_withInt_(LibOrgBouncycastleCryptoDigestsBlake2bDigest *self, jlong m1, jlong m2, jint posA, jint posB, jint posC, jint posD) {
  *IOSLongArray_GetRef(nil_chk(self->internalState_), posA) = IOSLongArray_Get(self->internalState_, posA) + IOSLongArray_Get(self->internalState_, posB) + m1;
  *IOSLongArray_GetRef(self->internalState_, posD) = LibOrgBouncycastleCryptoDigestsBlake2bDigest_rotr64WithLong_withInt_(IOSLongArray_Get(self->internalState_, posD) ^ IOSLongArray_Get(self->internalState_, posA), 32);
  *IOSLongArray_GetRef(nil_chk(self->internalState_), posC) = IOSLongArray_Get(self->internalState_, posC) + IOSLongArray_Get(self->internalState_, posD);
  *IOSLongArray_GetRef(self->internalState_, posB) = LibOrgBouncycastleCryptoDigestsBlake2bDigest_rotr64WithLong_withInt_(IOSLongArray_Get(self->internalState_, posB) ^ IOSLongArray_Get(self->internalState_, posC), 24);
  *IOSLongArray_GetRef(nil_chk(self->internalState_), posA) = IOSLongArray_Get(self->internalState_, posA) + IOSLongArray_Get(self->internalState_, posB) + m2;
  *IOSLongArray_GetRef(self->internalState_, posD) = LibOrgBouncycastleCryptoDigestsBlake2bDigest_rotr64WithLong_withInt_(IOSLongArray_Get(self->internalState_, posD) ^ IOSLongArray_Get(self->internalState_, posA), 16);
  *IOSLongArray_GetRef(nil_chk(self->internalState_), posC) = IOSLongArray_Get(self->internalState_, posC) + IOSLongArray_Get(self->internalState_, posD);
  *IOSLongArray_GetRef(self->internalState_, posB) = LibOrgBouncycastleCryptoDigestsBlake2bDigest_rotr64WithLong_withInt_(IOSLongArray_Get(self->internalState_, posB) ^ IOSLongArray_Get(self->internalState_, posC), 63);
}

jlong LibOrgBouncycastleCryptoDigestsBlake2bDigest_rotr64WithLong_withInt_(jlong x, jint rot) {
  LibOrgBouncycastleCryptoDigestsBlake2bDigest_initialize();
  return (JreURShift64(x, rot)) | (JreLShift64(x, (64 - rot)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsBlake2bDigest)
