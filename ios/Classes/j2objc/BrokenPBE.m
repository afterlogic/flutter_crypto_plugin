//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/BrokenPBE.java
//

#include "BCPBEKey.h"
#include "BrokenPBE.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "MD5Digest.h"
#include "PBEParametersGenerator.h"
#include "PKCS12ParametersGenerator.h"
#include "PKCS5S1ParametersGenerator.h"
#include "PKCS5S2ParametersGenerator.h"
#include "ParametersWithIV.h"
#include "RIPEMD160Digest.h"
#include "SHA1Digest.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"

@interface LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  jint u_;
  jint v_;
}

- (void)adjustWithByteArray:(IOSByteArray *)a
                    withInt:(jint)aOff
              withByteArray:(IOSByteArray *)b;

- (IOSByteArray *)generateDerivedKeyWithInt:(jint)idByte
                                    withInt:(jint)n;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator, digest_, id<LibOrgBouncycastleCryptoDigest>)

__attribute__((unused)) static void LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_adjustWithByteArray_withInt_withByteArray_(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *self, IOSByteArray *a, jint aOff, IOSByteArray *b);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_generateDerivedKeyWithInt_withInt_(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *self, jint idByte, jint n);

@interface LibOrgBouncycastleJceProviderBrokenPBE_Util ()

+ (void)setOddParityWithByteArray:(IOSByteArray *)bytes;

+ (LibOrgBouncycastleCryptoPBEParametersGenerator *)makePBEGeneratorWithInt:(jint)type
                                                                    withInt:(jint)hash_;

@end

__attribute__((unused)) static void LibOrgBouncycastleJceProviderBrokenPBE_Util_setOddParityWithByteArray_(IOSByteArray *bytes);

__attribute__((unused)) static LibOrgBouncycastleCryptoPBEParametersGenerator *LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEGeneratorWithInt_withInt_(jint type, jint hash_);

@implementation LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator

+ (jint)KEY_MATERIAL {
  return LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_KEY_MATERIAL;
}

+ (jint)IV_MATERIAL {
  return LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_IV_MATERIAL;
}

+ (jint)MAC_MATERIAL {
  return LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_MAC_MATERIAL;
}

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)adjustWithByteArray:(IOSByteArray *)a
                    withInt:(jint)aOff
              withByteArray:(IOSByteArray *)b {
  LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_adjustWithByteArray_withInt_withByteArray_(self, a, aOff, b);
}

- (IOSByteArray *)generateDerivedKeyWithInt:(jint)idByte
                                    withInt:(jint)n {
  return LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_generateDerivedKeyWithInt_withInt_(self, idByte, n);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedParametersWithInt:(jint)keySize {
  keySize = keySize / 8;
  IOSByteArray *dKey = LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_generateDerivedKeyWithInt_withInt_(self, LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_KEY_MATERIAL, keySize);
  return new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(dKey, 0, keySize);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedParametersWithInt:(jint)keySize
                                                                         withInt:(jint)ivSize {
  keySize = keySize / 8;
  ivSize = ivSize / 8;
  IOSByteArray *dKey = LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_generateDerivedKeyWithInt_withInt_(self, LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_KEY_MATERIAL, keySize);
  IOSByteArray *iv = LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_generateDerivedKeyWithInt_withInt_(self, LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_IV_MATERIAL, ivSize);
  return new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_withInt_withInt_(new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(dKey, 0, keySize), iv, 0, ivSize);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedMacParametersWithInt:(jint)keySize {
  keySize = keySize / 8;
  IOSByteArray *dKey = LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_generateDerivedKeyWithInt_withInt_(self, LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_MAC_MATERIAL, keySize);
  return new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(dKey, 0, keySize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(adjustWithByteArray:withInt:withByteArray:);
  methods[2].selector = @selector(generateDerivedKeyWithInt:withInt:);
  methods[3].selector = @selector(generateDerivedParametersWithInt:);
  methods[4].selector = @selector(generateDerivedParametersWithInt:withInt:);
  methods[5].selector = @selector(generateDerivedMacParametersWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KEY_MATERIAL", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_KEY_MATERIAL, 0x19, -1, -1, -1, -1 },
    { "IV_MATERIAL", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_IV_MATERIAL, 0x19, -1, -1, -1, -1 },
    { "MAC_MATERIAL", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_MAC_MATERIAL, 0x19, -1, -1, -1, -1 },
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "u_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "v_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "adjust", "[BI[B", "generateDerivedKey", "II", "generateDerivedParameters", "I", "generateDerivedMacParameters" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator = { "OldPKCS12ParametersGenerator", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 6, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator;
}

@end

void LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastleCryptoPBEParametersGenerator_init(self);
  self->digest_ = digest;
  if ([digest isKindOfClass:[LibOrgBouncycastleCryptoDigestsMD5Digest class]]) {
    self->u_ = 128 / 8;
    self->v_ = 512 / 8;
  }
  else if ([digest isKindOfClass:[LibOrgBouncycastleCryptoDigestsSHA1Digest class]]) {
    self->u_ = 160 / 8;
    self->v_ = 512 / 8;
  }
  else if ([digest isKindOfClass:[LibOrgBouncycastleCryptoDigestsRIPEMD160Digest class]]) {
    self->u_ = 160 / 8;
    self->v_ = 512 / 8;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Digest ", [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getAlgorithmName], @" unsupported"));
  }
}

LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *new_LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *create_LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

void LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_adjustWithByteArray_withInt_withByteArray_(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *self, IOSByteArray *a, jint aOff, IOSByteArray *b) {
  jint x = (IOSByteArray_Get(b, ((IOSByteArray *) nil_chk(b))->size_ - 1) & (jint) 0xff) + (IOSByteArray_Get(nil_chk(a), aOff + b->size_ - 1) & (jint) 0xff) + 1;
  *IOSByteArray_GetRef(a, aOff + b->size_ - 1) = (jbyte) x;
  JreURShiftAssignInt(&x, 8);
  for (jint i = b->size_ - 2; i >= 0; i--) {
    x += (IOSByteArray_Get(b, i) & (jint) 0xff) + (IOSByteArray_Get(a, aOff + i) & (jint) 0xff);
    *IOSByteArray_GetRef(a, aOff + i) = (jbyte) x;
    JreURShiftAssignInt(&x, 8);
  }
}

IOSByteArray *LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_generateDerivedKeyWithInt_withInt_(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *self, jint idByte, jint n) {
  IOSByteArray *D = [IOSByteArray newArrayWithLength:self->v_];
  IOSByteArray *dKey = [IOSByteArray newArrayWithLength:n];
  for (jint i = 0; i != D->size_; i++) {
    *IOSByteArray_GetRef(D, i) = (jbyte) idByte;
  }
  IOSByteArray *S;
  if ((self->salt_ != nil) && (((IOSByteArray *) nil_chk(self->salt_))->size_ != 0)) {
    S = [IOSByteArray newArrayWithLength:self->v_ * ((((IOSByteArray *) nil_chk(self->salt_))->size_ + self->v_ - 1) / self->v_)];
    for (jint i = 0; i != S->size_; i++) {
      *IOSByteArray_GetRef(S, i) = IOSByteArray_Get(self->salt_, i % self->salt_->size_);
    }
  }
  else {
    S = [IOSByteArray newArrayWithLength:0];
  }
  IOSByteArray *P;
  if ((self->password_ != nil) && (((IOSByteArray *) nil_chk(self->password_))->size_ != 0)) {
    P = [IOSByteArray newArrayWithLength:self->v_ * ((((IOSByteArray *) nil_chk(self->password_))->size_ + self->v_ - 1) / self->v_)];
    for (jint i = 0; i != P->size_; i++) {
      *IOSByteArray_GetRef(P, i) = IOSByteArray_Get(self->password_, i % self->password_->size_);
    }
  }
  else {
    P = [IOSByteArray newArrayWithLength:0];
  }
  IOSByteArray *I = [IOSByteArray newArrayWithLength:S->size_ + P->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(S, 0, I, 0, S->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(P, 0, I, S->size_, P->size_);
  IOSByteArray *B = [IOSByteArray newArrayWithLength:self->v_];
  jint c = (n + self->u_ - 1) / self->u_;
  for (jint i = 1; i <= c; i++) {
    IOSByteArray *A = [IOSByteArray newArrayWithLength:self->u_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:D withInt:0 withInt:D->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:I withInt:0 withInt:I->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:A withInt:0];
    for (jint j = 1; j != self->iterationCount_; j++) {
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:A withInt:0 withInt:A->size_];
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:A withInt:0];
    }
    for (jint j = 0; j != B->size_; j++) {
      *IOSByteArray_GetRef(B, i) = IOSByteArray_Get(A, j % A->size_);
    }
    for (jint j = 0; j != I->size_ / self->v_; j++) {
      LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_adjustWithByteArray_withInt_withByteArray_(self, I, j * self->v_, B);
    }
    if (i == c) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(A, 0, dKey, (i - 1) * self->u_, dKey->size_ - ((i - 1) * self->u_));
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(A, 0, dKey, (i - 1) * self->u_, A->size_);
    }
  }
  return dKey;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator)

@implementation LibOrgBouncycastleJceProviderBrokenPBE

+ (jint)MD5 {
  return LibOrgBouncycastleJceProviderBrokenPBE_MD5;
}

+ (jint)SHA1 {
  return LibOrgBouncycastleJceProviderBrokenPBE_SHA1;
}

+ (jint)RIPEMD160 {
  return LibOrgBouncycastleJceProviderBrokenPBE_RIPEMD160;
}

+ (jint)PKCS5S1 {
  return LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S1;
}

+ (jint)PKCS5S2 {
  return LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S2;
}

+ (jint)PKCS12 {
  return LibOrgBouncycastleJceProviderBrokenPBE_PKCS12;
}

+ (jint)OLD_PKCS12 {
  return LibOrgBouncycastleJceProviderBrokenPBE_OLD_PKCS12;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "MD5", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderBrokenPBE_MD5, 0x19, -1, -1, -1, -1 },
    { "SHA1", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderBrokenPBE_SHA1, 0x19, -1, -1, -1, -1 },
    { "RIPEMD160", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderBrokenPBE_RIPEMD160, 0x19, -1, -1, -1, -1 },
    { "PKCS5S1", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S1, 0x19, -1, -1, -1, -1 },
    { "PKCS5S2", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S2, 0x19, -1, -1, -1, -1 },
    { "PKCS12", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderBrokenPBE_PKCS12, 0x19, -1, -1, -1, -1 },
    { "OLD_PKCS12", "I", .constantValue.asInt = LibOrgBouncycastleJceProviderBrokenPBE_OLD_PKCS12, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleJceProviderBrokenPBE_Util;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenPBE = { "BrokenPBE", "lib.org.bouncycastle.jce.provider", ptrTable, NULL, fields, 7, 0x609, 0, 7, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenPBE;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenPBE)

@implementation LibOrgBouncycastleJceProviderBrokenPBE_Util

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderBrokenPBE_Util_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setOddParityWithByteArray:(IOSByteArray *)bytes {
  LibOrgBouncycastleJceProviderBrokenPBE_Util_setOddParityWithByteArray_(bytes);
}

+ (LibOrgBouncycastleCryptoPBEParametersGenerator *)makePBEGeneratorWithInt:(jint)type
                                                                    withInt:(jint)hash_ {
  return LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEGeneratorWithInt_withInt_(type, hash_);
}

+ (id<LibOrgBouncycastleCryptoCipherParameters>)makePBEParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey:(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *)pbeKey
                                                                                withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec
                                                                                                                   withInt:(jint)type
                                                                                                                   withInt:(jint)hash_
                                                                                                              withNSString:(NSString *)targetAlgorithm
                                                                                                                   withInt:(jint)keySize
                                                                                                                   withInt:(jint)ivSize {
  return LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withInt_withInt_withNSString_withInt_withInt_(pbeKey, spec, type, hash_, targetAlgorithm, keySize, ivSize);
}

+ (id<LibOrgBouncycastleCryptoCipherParameters>)makePBEMacParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey:(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *)pbeKey
                                                                                   withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec
                                                                                                                      withInt:(jint)type
                                                                                                                      withInt:(jint)hash_
                                                                                                                      withInt:(jint)keySize {
  return LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEMacParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withInt_withInt_withInt_(pbeKey, spec, type, hash_, keySize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoPBEParametersGenerator;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x8, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setOddParityWithByteArray:);
  methods[2].selector = @selector(makePBEGeneratorWithInt:withInt:);
  methods[3].selector = @selector(makePBEParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey:withJavaSecuritySpecAlgorithmParameterSpec:withInt:withInt:withNSString:withInt:withInt:);
  methods[4].selector = @selector(makePBEMacParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey:withJavaSecuritySpecAlgorithmParameterSpec:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setOddParity", "[B", "makePBEGenerator", "II", "makePBEParameters", "LLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey;LJavaSecuritySpecAlgorithmParameterSpec;IILNSString;II", "makePBEMacParameters", "LLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey;LJavaSecuritySpecAlgorithmParameterSpec;III", "LLibOrgBouncycastleJceProviderBrokenPBE;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderBrokenPBE_Util = { "Util", "lib.org.bouncycastle.jce.provider", ptrTable, methods, NULL, 7, 0x9, 5, 0, 8, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderBrokenPBE_Util;
}

@end

void LibOrgBouncycastleJceProviderBrokenPBE_Util_init(LibOrgBouncycastleJceProviderBrokenPBE_Util *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJceProviderBrokenPBE_Util *new_LibOrgBouncycastleJceProviderBrokenPBE_Util_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderBrokenPBE_Util, init)
}

LibOrgBouncycastleJceProviderBrokenPBE_Util *create_LibOrgBouncycastleJceProviderBrokenPBE_Util_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderBrokenPBE_Util, init)
}

void LibOrgBouncycastleJceProviderBrokenPBE_Util_setOddParityWithByteArray_(IOSByteArray *bytes) {
  LibOrgBouncycastleJceProviderBrokenPBE_Util_initialize();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(bytes))->size_; i++) {
    jint b = IOSByteArray_Get(bytes, i);
    *IOSByteArray_GetRef(bytes, i) = (jbyte) ((b & (jint) 0xfe) | (((JreRShift32(b, 1)) ^ (JreRShift32(b, 2)) ^ (JreRShift32(b, 3)) ^ (JreRShift32(b, 4)) ^ (JreRShift32(b, 5)) ^ (JreRShift32(b, 6)) ^ (JreRShift32(b, 7))) ^ (jint) 0x01));
  }
}

LibOrgBouncycastleCryptoPBEParametersGenerator *LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEGeneratorWithInt_withInt_(jint type, jint hash_) {
  LibOrgBouncycastleJceProviderBrokenPBE_Util_initialize();
  LibOrgBouncycastleCryptoPBEParametersGenerator *generator;
  if (type == LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S1) {
    switch (hash_) {
      case LibOrgBouncycastleJceProviderBrokenPBE_MD5:
      generator = new_LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsMD5Digest_init());
      break;
      case LibOrgBouncycastleJceProviderBrokenPBE_SHA1:
      generator = new_LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"PKCS5 scheme 1 only supports only MD5 and SHA1.");
    }
  }
  else if (type == LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S2) {
    generator = new_LibOrgBouncycastleCryptoGeneratorsPKCS5S2ParametersGenerator_init();
  }
  else if (type == LibOrgBouncycastleJceProviderBrokenPBE_OLD_PKCS12) {
    switch (hash_) {
      case LibOrgBouncycastleJceProviderBrokenPBE_MD5:
      generator = new_LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsMD5Digest_init());
      break;
      case LibOrgBouncycastleJceProviderBrokenPBE_SHA1:
      generator = new_LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
      break;
      case LibOrgBouncycastleJceProviderBrokenPBE_RIPEMD160:
      generator = new_LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsRIPEMD160Digest_init());
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unknown digest scheme for PBE encryption.");
    }
  }
  else {
    switch (hash_) {
      case LibOrgBouncycastleJceProviderBrokenPBE_MD5:
      generator = new_LibOrgBouncycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsMD5Digest_init());
      break;
      case LibOrgBouncycastleJceProviderBrokenPBE_SHA1:
      generator = new_LibOrgBouncycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
      break;
      case LibOrgBouncycastleJceProviderBrokenPBE_RIPEMD160:
      generator = new_LibOrgBouncycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsRIPEMD160Digest_init());
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unknown digest scheme for PBE encryption.");
    }
  }
  return generator;
}

id<LibOrgBouncycastleCryptoCipherParameters> LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withInt_withInt_withNSString_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *pbeKey, id<JavaSecuritySpecAlgorithmParameterSpec> spec, jint type, jint hash_, NSString *targetAlgorithm, jint keySize, jint ivSize) {
  LibOrgBouncycastleJceProviderBrokenPBE_Util_initialize();
  if ((spec == nil) || !([spec isKindOfClass:[JavaxCryptoSpecPBEParameterSpec class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Need a PBEParameter spec with a PBE key.");
  }
  JavaxCryptoSpecPBEParameterSpec *pbeParam = (JavaxCryptoSpecPBEParameterSpec *) cast_chk(spec, [JavaxCryptoSpecPBEParameterSpec class]);
  LibOrgBouncycastleCryptoPBEParametersGenerator *generator = LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEGeneratorWithInt_withInt_(type, hash_);
  IOSByteArray *key = [((LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *) nil_chk(pbeKey)) getEncoded];
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  [((LibOrgBouncycastleCryptoPBEParametersGenerator *) nil_chk(generator)) init__WithByteArray:key withByteArray:[((JavaxCryptoSpecPBEParameterSpec *) nil_chk(pbeParam)) getSalt] withInt:[pbeParam getIterationCount]];
  if (ivSize != 0) {
    param = [generator generateDerivedParametersWithInt:keySize withInt:ivSize];
  }
  else {
    param = [generator generateDerivedParametersWithInt:keySize];
  }
  if ([((NSString *) nil_chk(targetAlgorithm)) java_hasPrefix:@"DES"]) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
      LibOrgBouncycastleCryptoParamsKeyParameter *kParam = (LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithIV *) param))) getParameters], [LibOrgBouncycastleCryptoParamsKeyParameter class]);
      LibOrgBouncycastleJceProviderBrokenPBE_Util_setOddParityWithByteArray_([((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(kParam)) getKey]);
    }
    else {
      LibOrgBouncycastleCryptoParamsKeyParameter *kParam = (LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk(param, [LibOrgBouncycastleCryptoParamsKeyParameter class]);
      LibOrgBouncycastleJceProviderBrokenPBE_Util_setOddParityWithByteArray_([((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(kParam)) getKey]);
    }
  }
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(key))->size_; i++) {
    *IOSByteArray_GetRef(key, i) = 0;
  }
  return param;
}

id<LibOrgBouncycastleCryptoCipherParameters> LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEMacParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withInt_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *pbeKey, id<JavaSecuritySpecAlgorithmParameterSpec> spec, jint type, jint hash_, jint keySize) {
  LibOrgBouncycastleJceProviderBrokenPBE_Util_initialize();
  if ((spec == nil) || !([spec isKindOfClass:[JavaxCryptoSpecPBEParameterSpec class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Need a PBEParameter spec with a PBE key.");
  }
  JavaxCryptoSpecPBEParameterSpec *pbeParam = (JavaxCryptoSpecPBEParameterSpec *) cast_chk(spec, [JavaxCryptoSpecPBEParameterSpec class]);
  LibOrgBouncycastleCryptoPBEParametersGenerator *generator = LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEGeneratorWithInt_withInt_(type, hash_);
  IOSByteArray *key = [((LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *) nil_chk(pbeKey)) getEncoded];
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  [((LibOrgBouncycastleCryptoPBEParametersGenerator *) nil_chk(generator)) init__WithByteArray:key withByteArray:[((JavaxCryptoSpecPBEParameterSpec *) nil_chk(pbeParam)) getSalt] withInt:[pbeParam getIterationCount]];
  param = [generator generateDerivedMacParametersWithInt:keySize];
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(key))->size_; i++) {
    *IOSByteArray_GetRef(key, i) = 0;
  }
  return param;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderBrokenPBE_Util)
