//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SignatureAndHashAlgorithm.java
//

#ifndef SignatureAndHashAlgorithm_H
#define SignatureAndHashAlgorithm_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaIoInputStream;
@class JavaIoOutputStream;

@interface LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm : NSObject {
 @public
  jshort hash__;
  jshort signature_;
}

#pragma mark Public

- (instancetype __nonnull)initWithShort:(jshort)hash_
                              withShort:(jshort)signature;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (jboolean)isEqual:(id)obj;

- (jshort)getHash;

- (jshort)getSignature;

- (NSUInteger)hash;

+ (LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)parseWithJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *self, jshort hash_, jshort signature);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *new_LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(jshort hash_, jshort signature) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *create_LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(jshort hash_, jshort signature);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_parseWithJavaIoInputStream_(JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SignatureAndHashAlgorithm_H
