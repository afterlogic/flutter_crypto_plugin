//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/OldIESEngine.java
//

#ifndef OldIESEngine_H
#define OldIESEngine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "IESEngine.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoBufferedBlockCipher;
@protocol LibOrgBouncycastleCryptoBasicAgreement;
@protocol LibOrgBouncycastleCryptoDerivationFunction;
@protocol LibOrgBouncycastleCryptoMac;

@interface LibOrgBouncycastleCryptoEnginesOldIESEngine : LibOrgBouncycastleCryptoEnginesIESEngine

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBasicAgreement:(id<LibOrgBouncycastleCryptoBasicAgreement>)agree
                          withLibOrgBouncycastleCryptoDerivationFunction:(id<LibOrgBouncycastleCryptoDerivationFunction>)kdf
                                         withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBasicAgreement:(id<LibOrgBouncycastleCryptoBasicAgreement>)agree
                          withLibOrgBouncycastleCryptoDerivationFunction:(id<LibOrgBouncycastleCryptoDerivationFunction>)kdf
                                         withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                         withLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)cipher;

#pragma mark Protected

- (IOSByteArray *)getLengthTagWithByteArray:(IOSByteArray *)p2;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEnginesOldIESEngine)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesOldIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoEnginesOldIESEngine *self, id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesOldIESEngine *new_LibOrgBouncycastleCryptoEnginesOldIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesOldIESEngine *create_LibOrgBouncycastleCryptoEnginesOldIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesOldIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_withLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoEnginesOldIESEngine *self, id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesOldIESEngine *new_LibOrgBouncycastleCryptoEnginesOldIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_withLibOrgBouncycastleCryptoBufferedBlockCipher_(id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesOldIESEngine *create_LibOrgBouncycastleCryptoEnginesOldIESEngine_initWithLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_withLibOrgBouncycastleCryptoMac_withLibOrgBouncycastleCryptoBufferedBlockCipher_(id<LibOrgBouncycastleCryptoBasicAgreement> agree, id<LibOrgBouncycastleCryptoDerivationFunction> kdf, id<LibOrgBouncycastleCryptoMac> mac, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesOldIESEngine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OldIESEngine_H
