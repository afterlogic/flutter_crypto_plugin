//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPPBEEncryptedData.java
//

#include "BCPGInputStream.h"
#include "IOSPrimitiveArray.h"
#include "InputStreamPacket.h"
#include "J2ObjC_source.h"
#include "PBEDataDecryptorFactory.h"
#include "PGPDataDecryptor.h"
#include "PGPDataValidationException.h"
#include "PGPDigestCalculator.h"
#include "PGPEncryptedData.h"
#include "PGPException.h"
#include "PGPPBEEncryptedData.h"
#include "S2K.h"
#include "SymmetricEncIntegrityPacket.h"
#include "SymmetricKeyEncSessionPacket.h"
#include "TeeInputStream.h"
#include "java/io/EOFException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"

@implementation LibOrgBouncycastleOpenpgpPGPPBEEncryptedData

- (instancetype)initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket:(LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *)keyData
                               withLibOrgBouncycastleBcpgInputStreamPacket:(LibOrgBouncycastleBcpgInputStreamPacket *)encData {
  LibOrgBouncycastleOpenpgpPGPPBEEncryptedData_initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_(self, keyData, encData);
  return self;
}

- (jint)getSymmetricAlgorithmWithLibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory:(LibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory *)dataDecryptorFactory {
  IOSByteArray *key = [((LibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory *) nil_chk(dataDecryptorFactory)) makeKeyFromPassPhraseWithInt:[((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) nil_chk(keyData_)) getEncAlgorithm] withLibOrgBouncycastleBcpgS2K:[((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) nil_chk(keyData_)) getS2K]];
  IOSByteArray *sessionData = [dataDecryptorFactory recoverSessionDataWithInt:[((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) nil_chk(keyData_)) getEncAlgorithm] withByteArray:key withByteArray:[((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) nil_chk(keyData_)) getSecKeyData]];
  return IOSByteArray_Get(nil_chk(sessionData), 0);
}

- (JavaIoInputStream *)getDataStreamWithLibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory:(LibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory *)dataDecryptorFactory {
  @try {
    jint keyAlgorithm = [((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) nil_chk(keyData_)) getEncAlgorithm];
    IOSByteArray *key = [((LibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory *) nil_chk(dataDecryptorFactory)) makeKeyFromPassPhraseWithInt:keyAlgorithm withLibOrgBouncycastleBcpgS2K:[((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) nil_chk(keyData_)) getS2K]];
    jboolean withIntegrityPacket = [encData_ isKindOfClass:[LibOrgBouncycastleBcpgSymmetricEncIntegrityPacket class]];
    IOSByteArray *sessionData = [dataDecryptorFactory recoverSessionDataWithInt:[((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) nil_chk(keyData_)) getEncAlgorithm] withByteArray:key withByteArray:[((LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *) nil_chk(keyData_)) getSecKeyData]];
    IOSByteArray *sessionKey = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(sessionData))->size_ - 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sessionData, 1, sessionKey, 0, sessionKey->size_);
    id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor> dataDecryptor = [dataDecryptorFactory createDataDecryptorWithBoolean:withIntegrityPacket withInt:IOSByteArray_Get(sessionData, 0) & (jint) 0xff withByteArray:sessionKey];
    encStream_ = new_LibOrgBouncycastleBcpgBCPGInputStream_initWithJavaIoInputStream_([((id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor>) nil_chk(dataDecryptor)) getInputStreamWithJavaIoInputStream:[((LibOrgBouncycastleBcpgInputStreamPacket *) nil_chk(encData_)) getInputStream]]);
    if (withIntegrityPacket) {
      truncStream_ = new_LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(self, encStream_);
      integrityCalculator_ = [dataDecryptor getIntegrityCalculator];
      encStream_ = new_LibOrgBouncycastleUtilIoTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(truncStream_, [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(integrityCalculator_)) getOutputStream]);
    }
    IOSByteArray *iv = [IOSByteArray newArrayWithLength:[dataDecryptor getBlockSize]];
    for (jint i = 0; i != iv->size_; i++) {
      jint ch = [((JavaIoInputStream *) nil_chk(encStream_)) read];
      if (ch < 0) {
        @throw new_JavaIoEOFException_initWithNSString_(@"unexpected end of stream.");
      }
      *IOSByteArray_GetRef(iv, i) = (jbyte) ch;
    }
    jint v1 = [((JavaIoInputStream *) nil_chk(encStream_)) read];
    jint v2 = [((JavaIoInputStream *) nil_chk(encStream_)) read];
    if (v1 < 0 || v2 < 0) {
      @throw new_JavaIoEOFException_initWithNSString_(@"unexpected end of stream.");
    }
    jboolean repeatCheckPassed = IOSByteArray_Get(iv, iv->size_ - 2) == (jbyte) v1 && IOSByteArray_Get(iv, iv->size_ - 1) == (jbyte) v2;
    jboolean zeroesCheckPassed = v1 == 0 && v2 == 0;
    if (!repeatCheckPassed && !zeroesCheckPassed) {
      @throw new_LibOrgBouncycastleOpenpgpPGPDataValidationException_initWithNSString_(@"data check failed.");
    }
    return encStream_;
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"Exception creating cipher", e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, 4, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket:withLibOrgBouncycastleBcpgInputStreamPacket:);
  methods[1].selector = @selector(getSymmetricAlgorithmWithLibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory:);
  methods[2].selector = @selector(getDataStreamWithLibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyData_", "LLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket;LLibOrgBouncycastleBcpgInputStreamPacket;", "getSymmetricAlgorithm", "LLibOrgBouncycastleOpenpgpOperatorPBEDataDecryptorFactory;", "LLibOrgBouncycastleOpenpgpPGPException;", "getDataStream" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPPBEEncryptedData = { "PGPPBEEncryptedData", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPPBEEncryptedData;
}

@end

void LibOrgBouncycastleOpenpgpPGPPBEEncryptedData_initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_(LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *self, LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *keyData, LibOrgBouncycastleBcpgInputStreamPacket *encData) {
  LibOrgBouncycastleOpenpgpPGPEncryptedData_initWithLibOrgBouncycastleBcpgInputStreamPacket_(self, encData);
  self->keyData_ = keyData;
}

LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *new_LibOrgBouncycastleOpenpgpPGPPBEEncryptedData_initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_(LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *keyData, LibOrgBouncycastleBcpgInputStreamPacket *encData) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPBEEncryptedData, initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_, keyData, encData)
}

LibOrgBouncycastleOpenpgpPGPPBEEncryptedData *create_LibOrgBouncycastleOpenpgpPGPPBEEncryptedData_initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_(LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket *keyData, LibOrgBouncycastleBcpgInputStreamPacket *encData) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPBEEncryptedData, initWithLibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_, keyData, encData)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPPBEEncryptedData)
