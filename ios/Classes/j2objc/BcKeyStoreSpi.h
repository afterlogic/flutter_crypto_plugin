//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java
//

#ifndef BcKeyStoreSpi_H
#define BcKeyStoreSpi_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BCKeyStore.h"
#include "J2ObjC_header.h"
#include "java/security/KeyStoreSpi.h"

@class IOSByteArray;
@class IOSCharArray;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecurityCertCertificate;
@class JavaSecuritySecureRandom;
@class JavaUtilDate;
@class JavaUtilHashtable;
@class JavaxCryptoCipher;
@protocol JavaSecurityKey;
@protocol JavaUtilEnumeration;

@interface LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi : JavaSecurityKeyStoreSpi < LibOrgBouncycastleJceInterfacesBCKeyStore > {
 @public
  JavaUtilHashtable *table_;
  JavaSecuritySecureRandom *random_;
  jint version__;
}
@property (readonly, class) jint NULL_ NS_SWIFT_NAME(NULL_);
@property (readonly, class) jint CERTIFICATE NS_SWIFT_NAME(CERTIFICATE);
@property (readonly, class) jint KEY NS_SWIFT_NAME(KEY);
@property (readonly, class) jint SECRET NS_SWIFT_NAME(SECRET);
@property (readonly, class) jint SEALED NS_SWIFT_NAME(SEALED);
@property (readonly, class) jint KEY_PRIVATE NS_SWIFT_NAME(KEY_PRIVATE);
@property (readonly, class) jint KEY_PUBLIC NS_SWIFT_NAME(KEY_PUBLIC);
@property (readonly, class) jint KEY_SECRET NS_SWIFT_NAME(KEY_SECRET);

+ (jint)NULL_;

+ (jint)CERTIFICATE;

+ (jint)KEY;

+ (jint)SECRET;

+ (jint)SEALED;

+ (jint)KEY_PRIVATE;

+ (jint)KEY_PUBLIC;

+ (jint)KEY_SECRET;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)version_;

- (id<JavaUtilEnumeration>)engineAliases;

- (jboolean)engineContainsAliasWithNSString:(NSString *)alias;

- (void)engineDeleteEntryWithNSString:(NSString *)alias;

- (JavaSecurityCertCertificate *)engineGetCertificateWithNSString:(NSString *)alias;

- (NSString *)engineGetCertificateAliasWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

- (IOSObjectArray *)engineGetCertificateChainWithNSString:(NSString *)alias;

- (JavaUtilDate *)engineGetCreationDateWithNSString:(NSString *)alias;

- (id<JavaSecurityKey>)engineGetKeyWithNSString:(NSString *)alias
                                  withCharArray:(IOSCharArray *)password;

- (jboolean)engineIsCertificateEntryWithNSString:(NSString *)alias;

- (jboolean)engineIsKeyEntryWithNSString:(NSString *)alias;

- (void)engineLoadWithJavaIoInputStream:(JavaIoInputStream *)stream
                          withCharArray:(IOSCharArray *)password;

- (void)engineSetCertificateEntryWithNSString:(NSString *)alias
              withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                        withByteArray:(IOSByteArray *)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                  withJavaSecurityKey:(id<JavaSecurityKey>)key
                        withCharArray:(IOSCharArray *)password
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

- (jint)engineSize;

- (void)engineStoreWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                            withCharArray:(IOSCharArray *)password;

- (void)setRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand;

#pragma mark Protected

- (void)loadStoreWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (JavaxCryptoCipher *)makePBECipherWithNSString:(NSString *)algorithm
                                         withInt:(jint)mode
                                   withCharArray:(IOSCharArray *)password
                                   withByteArray:(IOSByteArray *)salt
                                         withInt:(jint)iterationCount;

- (void)saveStoreWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, table_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, random_, JavaSecuritySecureRandom *)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_NULL(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_NULL 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, NULL, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_CERTIFICATE(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_CERTIFICATE 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, CERTIFICATE, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_KEY(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, KEY, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_SECRET(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SECRET 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, SECRET, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_SEALED(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_SEALED 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, SEALED, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_KEY_PRIVATE(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PRIVATE 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, KEY_PRIVATE, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_KEY_PUBLIC(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_PUBLIC 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, KEY_PUBLIC, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_get_KEY_SECRET(void);
#define LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_KEY_SECRET 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi, KEY_SECRET, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *self, jint version_);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(jint version_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_initWithInt_(jint version_);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi)

@interface LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore : LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi

#pragma mark Public

- (instancetype __nonnull)init;

- (void)engineLoadWithJavaIoInputStream:(JavaIoInputStream *)stream
                          withCharArray:(IOSCharArray *)password;

- (void)engineStoreWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                            withCharArray:(IOSCharArray *)password;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore_init(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_BouncyCastleStore)

@interface LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std : LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std_init(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Std)

@interface LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1 : LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1_init(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1 *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1 *new_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1 *create_LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystoreBcBcKeyStoreSpi_Version1)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BcKeyStoreSpi_H
