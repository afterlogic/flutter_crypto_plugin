//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/PqcCryptoQteslaPolynomial.java
//

#include "Arrays.h"
#include "CommonFunction.h"
#include "Const.h"
#include "HashUtils.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Parameter.h"
#include "PolynomialHeuristic.h"
#include "PolynomialProvablySecure.h"
#include "PqcCryptoQteslaPolynomial.h"

@interface LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial ()

+ (jint)montgomeryWithLong:(jlong)number
                   withInt:(jint)q
                  withLong:(jlong)qInverse;

+ (jlong)montgomeryPWithLong:(jlong)number
                     withInt:(jint)q
                    withLong:(jlong)qInverse;

+ (void)numberTheoreticTransformWithIntArray:(IOSIntArray *)destination
                                withIntArray:(IOSIntArray *)source
                                     withInt:(jint)n
                                     withInt:(jint)q
                                    withLong:(jlong)qInverse;

+ (void)numberTheoreticTransformIPWithLongArray:(IOSLongArray *)destination
                                  withLongArray:(IOSLongArray *)source;

+ (void)numberTheoreticTransformIIIPWithLongArray:(IOSLongArray *)destination
                                    withLongArray:(IOSLongArray *)source;

+ (void)inverseNumberTheoreticTransformIWithIntArray:(IOSIntArray *)destination
                                        withIntArray:(IOSIntArray *)source;

+ (void)inverseNumberTheoreticTransformWithIntArray:(IOSIntArray *)destination
                                       withIntArray:(IOSIntArray *)source
                                            withInt:(jint)n
                                            withInt:(jint)q
                                           withLong:(jlong)qInverse
                                            withInt:(jint)r
                                            withInt:(jint)barrettMultiplication
                                            withInt:(jint)barrettDivision;

+ (void)inverseNumberTheoreticTransformIPWithLongArray:(IOSLongArray *)destination
                                               withInt:(jint)destinationOffset
                                         withLongArray:(IOSLongArray *)source
                                               withInt:(jint)sourceOffset;

+ (void)inverseNumberTheoreticTransformIIIPWithLongArray:(IOSLongArray *)destination
                                                 withInt:(jint)destinationOffset
                                           withLongArray:(IOSLongArray *)source
                                                 withInt:(jint)sourceOffset;

+ (void)componentWisePolynomialMultiplicationWithIntArray:(IOSIntArray *)product
                                             withIntArray:(IOSIntArray *)multiplicand
                                             withIntArray:(IOSIntArray *)multiplier
                                                  withInt:(jint)n
                                                  withInt:(jint)q
                                                 withLong:(jlong)qInverse;

+ (void)componentWisePolynomialMultiplicationWithLongArray:(IOSLongArray *)product
                                                   withInt:(jint)productOffset
                                             withLongArray:(IOSLongArray *)multiplicand
                                                   withInt:(jint)multiplicandOffset
                                             withLongArray:(IOSLongArray *)multiplier
                                                   withInt:(jint)multiplierOffset
                                                   withInt:(jint)n
                                                   withInt:(jint)q
                                                  withLong:(jlong)qInverse;

@end

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_(jlong number, jint q, jlong qInverse);

__attribute__((unused)) static jlong LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(jlong number, jint q, jlong qInverse);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_(IOSIntArray *destination, IOSIntArray *source, jint n, jint q, jlong qInverse);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformIPWithLongArray_withLongArray_(IOSLongArray *destination, IOSLongArray *source);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformIIIPWithLongArray_withLongArray_(IOSLongArray *destination, IOSLongArray *source);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIWithIntArray_withIntArray_(IOSIntArray *destination, IOSIntArray *source);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_withInt_withInt_withInt_(IOSIntArray *destination, IOSIntArray *source, jint n, jint q, jlong qInverse, jint r, jint barrettMultiplication, jint barrettDivision);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIPWithLongArray_withInt_withLongArray_withInt_(IOSLongArray *destination, jint destinationOffset, IOSLongArray *source, jint sourceOffset);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIIIPWithLongArray_withInt_withLongArray_withInt_(IOSLongArray *destination, jint destinationOffset, IOSLongArray *source, jint sourceOffset);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_componentWisePolynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_(IOSIntArray *product, IOSIntArray *multiplicand, IOSIntArray *multiplier, jint n, jint q, jlong qInverse);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_componentWisePolynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(IOSLongArray *product, jint productOffset, IOSLongArray *multiplicand, jint multiplicandOffset, IOSLongArray *multiplier, jint multiplierOffset, jint n, jint q, jlong qInverse);

@implementation LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial

+ (jint)RANDOM {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM;
}

+ (jint)SEED {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED;
}

+ (jint)HASH {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH;
}

+ (jint)MESSAGE {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE;
}

+ (jint)SIGNATURE_I {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_I;
}

+ (jint)SIGNATURE_III_SIZE {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_SIZE;
}

+ (jint)SIGNATURE_III_SPEED {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_SPEED;
}

+ (jint)SIGNATURE_I_P {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_I_P;
}

+ (jint)SIGNATURE_III_P {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_P;
}

+ (jint)PUBLIC_KEY_I {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_I;
}

+ (jint)PUBLIC_KEY_III_SIZE {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_III_SIZE;
}

+ (jint)PUBLIC_KEY_III_SPEED {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_III_SPEED;
}

+ (jint)PUBLIC_KEY_I_P {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_I_P;
}

+ (jint)PUBLIC_KEY_III_P {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_III_P;
}

+ (jint)PRIVATE_KEY_I {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_I;
}

+ (jint)PRIVATE_KEY_III_SIZE {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_III_SIZE;
}

+ (jint)PRIVATE_KEY_III_SPEED {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_III_SPEED;
}

+ (jint)PRIVATE_KEY_I_P {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_I_P;
}

+ (jint)PRIVATE_KEY_III_P {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_III_P;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)montgomeryWithLong:(jlong)number
                   withInt:(jint)q
                  withLong:(jlong)qInverse {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_(number, q, qInverse);
}

+ (jlong)montgomeryPWithLong:(jlong)number
                     withInt:(jint)q
                    withLong:(jlong)qInverse {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(number, q, qInverse);
}

+ (jint)barrettWithInt:(jint)number
               withInt:(jint)q
               withInt:(jint)barrettMultiplication
               withInt:(jint)barrettDivision {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithInt_withInt_withInt_withInt_(number, q, barrettMultiplication, barrettDivision);
}

+ (jlong)barrettWithLong:(jlong)number
                 withInt:(jint)q
                 withInt:(jint)barrettMultiplication
                 withInt:(jint)barrettDivision {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(number, q, barrettMultiplication, barrettDivision);
}

+ (void)numberTheoreticTransformWithIntArray:(IOSIntArray *)destination
                                withIntArray:(IOSIntArray *)source
                                     withInt:(jint)n
                                     withInt:(jint)q
                                    withLong:(jlong)qInverse {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_(destination, source, n, q, qInverse);
}

+ (void)numberTheoreticTransformIPWithLongArray:(IOSLongArray *)destination
                                  withLongArray:(IOSLongArray *)source {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformIPWithLongArray_withLongArray_(destination, source);
}

+ (void)numberTheoreticTransformIIIPWithLongArray:(IOSLongArray *)destination
                                    withLongArray:(IOSLongArray *)source {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformIIIPWithLongArray_withLongArray_(destination, source);
}

+ (void)inverseNumberTheoreticTransformIWithIntArray:(IOSIntArray *)destination
                                        withIntArray:(IOSIntArray *)source {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIWithIntArray_withIntArray_(destination, source);
}

+ (void)inverseNumberTheoreticTransformWithIntArray:(IOSIntArray *)destination
                                       withIntArray:(IOSIntArray *)source
                                            withInt:(jint)n
                                            withInt:(jint)q
                                           withLong:(jlong)qInverse
                                            withInt:(jint)r
                                            withInt:(jint)barrettMultiplication
                                            withInt:(jint)barrettDivision {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_withInt_withInt_withInt_(destination, source, n, q, qInverse, r, barrettMultiplication, barrettDivision);
}

+ (void)inverseNumberTheoreticTransformIPWithLongArray:(IOSLongArray *)destination
                                               withInt:(jint)destinationOffset
                                         withLongArray:(IOSLongArray *)source
                                               withInt:(jint)sourceOffset {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIPWithLongArray_withInt_withLongArray_withInt_(destination, destinationOffset, source, sourceOffset);
}

+ (void)inverseNumberTheoreticTransformIIIPWithLongArray:(IOSLongArray *)destination
                                                 withInt:(jint)destinationOffset
                                           withLongArray:(IOSLongArray *)source
                                                 withInt:(jint)sourceOffset {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIIIPWithLongArray_withInt_withLongArray_withInt_(destination, destinationOffset, source, sourceOffset);
}

+ (void)componentWisePolynomialMultiplicationWithIntArray:(IOSIntArray *)product
                                             withIntArray:(IOSIntArray *)multiplicand
                                             withIntArray:(IOSIntArray *)multiplier
                                                  withInt:(jint)n
                                                  withInt:(jint)q
                                                 withLong:(jlong)qInverse {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_componentWisePolynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_(product, multiplicand, multiplier, n, q, qInverse);
}

+ (void)componentWisePolynomialMultiplicationWithLongArray:(IOSLongArray *)product
                                                   withInt:(jint)productOffset
                                             withLongArray:(IOSLongArray *)multiplicand
                                                   withInt:(jint)multiplicandOffset
                                             withLongArray:(IOSLongArray *)multiplier
                                                   withInt:(jint)multiplierOffset
                                                   withInt:(jint)n
                                                   withInt:(jint)q
                                                  withLong:(jlong)qInverse {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_componentWisePolynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(product, productOffset, multiplicand, multiplicandOffset, multiplier, multiplierOffset, n, q, qInverse);
}

+ (void)polynomialNumberTheoreticTransformWithLongArray:(IOSLongArray *)arrayNumberTheoreticTransform
                                          withLongArray:(IOSLongArray *)array
                                                withInt:(jint)n {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialNumberTheoreticTransformWithLongArray_withLongArray_withInt_(arrayNumberTheoreticTransform, array, n);
}

+ (void)polynomialMultiplicationWithIntArray:(IOSIntArray *)product
                                withIntArray:(IOSIntArray *)multiplicand
                                withIntArray:(IOSIntArray *)multiplier
                                     withInt:(jint)n
                                     withInt:(jint)q
                                    withLong:(jlong)qInverse
                                withIntArray:(IOSIntArray *)zeta {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_withIntArray_(product, multiplicand, multiplier, n, q, qInverse, zeta);
}

+ (void)polynomialMultiplicationWithLongArray:(IOSLongArray *)product
                                      withInt:(jint)productOffset
                                withLongArray:(IOSLongArray *)multiplicand
                                      withInt:(jint)multiplicandOffset
                                withLongArray:(IOSLongArray *)multiplier
                                      withInt:(jint)multiplierOffset
                                      withInt:(jint)n
                                      withInt:(jint)q
                                     withLong:(jlong)qInverse {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(product, productOffset, multiplicand, multiplicandOffset, multiplier, multiplierOffset, n, q, qInverse);
}

+ (void)polynomialAdditionWithIntArray:(IOSIntArray *)summation
                          withIntArray:(IOSIntArray *)augend
                          withIntArray:(IOSIntArray *)addend
                               withInt:(jint)n {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionWithIntArray_withIntArray_withIntArray_withInt_(summation, augend, addend, n);
}

+ (void)polynomialAdditionWithLongArray:(IOSLongArray *)summation
                                withInt:(jint)summationOffset
                          withLongArray:(IOSLongArray *)augend
                                withInt:(jint)augendOffset
                          withLongArray:(IOSLongArray *)addend
                                withInt:(jint)addendOffset
                                withInt:(jint)n {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(summation, summationOffset, augend, augendOffset, addend, addendOffset, n);
}

+ (void)polynomialAdditionCorrectionWithIntArray:(IOSIntArray *)summation
                                    withIntArray:(IOSIntArray *)augend
                                    withIntArray:(IOSIntArray *)addend
                                         withInt:(jint)n
                                         withInt:(jint)q {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionCorrectionWithIntArray_withIntArray_withIntArray_withInt_withInt_(summation, augend, addend, n, q);
}

+ (void)polynomialSubtractionCorrectionWithIntArray:(IOSIntArray *)difference
                                       withIntArray:(IOSIntArray *)minuend
                                       withIntArray:(IOSIntArray *)subtrahend
                                            withInt:(jint)n
                                            withInt:(jint)q {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionCorrectionWithIntArray_withIntArray_withIntArray_withInt_withInt_(difference, minuend, subtrahend, n, q);
}

+ (void)polynomialSubtractionMontgomeryWithIntArray:(IOSIntArray *)difference
                                       withIntArray:(IOSIntArray *)minuend
                                       withIntArray:(IOSIntArray *)subtrahend
                                            withInt:(jint)n
                                            withInt:(jint)q
                                           withLong:(jlong)qInverse
                                            withInt:(jint)r {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionMontgomeryWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_withInt_(difference, minuend, subtrahend, n, q, qInverse, r);
}

+ (void)polynomialSubtractionWithLongArray:(IOSLongArray *)difference
                                   withInt:(jint)differenceOffset
                             withLongArray:(IOSLongArray *)minuend
                                   withInt:(jint)minuendOffset
                             withLongArray:(IOSLongArray *)subtrahend
                                   withInt:(jint)subtrahendOffset
                                   withInt:(jint)n
                                   withInt:(jint)q
                                   withInt:(jint)barrettMultiplication
                                   withInt:(jint)barrettDivision {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withInt_withInt_(difference, differenceOffset, minuend, minuendOffset, subtrahend, subtrahendOffset, n, q, barrettMultiplication, barrettDivision);
}

+ (void)polynomialUniformWithIntArray:(IOSIntArray *)A
                        withByteArray:(IOSByteArray *)seed
                              withInt:(jint)seedOffset
                              withInt:(jint)n
                              withInt:(jint)q
                             withLong:(jlong)qInverse
                              withInt:(jint)qLogarithm
                              withInt:(jint)generatorA
                              withInt:(jint)inverseNumberTheoreticTransform {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithIntArray_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(A, seed, seedOffset, n, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform);
}

+ (void)polynomialUniformWithLongArray:(IOSLongArray *)A
                         withByteArray:(IOSByteArray *)seed
                               withInt:(jint)seedOffset
                               withInt:(jint)n
                               withInt:(jint)k
                               withInt:(jint)q
                              withLong:(jlong)qInverse
                               withInt:(jint)qLogarithm
                               withInt:(jint)generatorA
                               withInt:(jint)inverseNumberTheoreticTransform {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithLongArray_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(A, seed, seedOffset, n, k, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform);
}

+ (void)sparsePolynomialMultiplication16WithIntArray:(IOSIntArray *)product
                                      withShortArray:(IOSShortArray *)privateKey
                                        withIntArray:(IOSIntArray *)positionList
                                      withShortArray:(IOSShortArray *)signList
                                             withInt:(jint)n
                                             withInt:(jint)h {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication16WithIntArray_withShortArray_withIntArray_withShortArray_withInt_withInt_(product, privateKey, positionList, signList, n, h);
}

+ (void)sparsePolynomialMultiplication8WithLongArray:(IOSLongArray *)product
                                             withInt:(jint)productOffset
                                       withByteArray:(IOSByteArray *)privateKey
                                             withInt:(jint)privateKeyOffset
                                        withIntArray:(IOSIntArray *)positionList
                                      withShortArray:(IOSShortArray *)signList
                                             withInt:(jint)n
                                             withInt:(jint)h {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication8WithLongArray_withInt_withByteArray_withInt_withIntArray_withShortArray_withInt_withInt_(product, productOffset, privateKey, privateKeyOffset, positionList, signList, n, h);
}

+ (void)sparsePolynomialMultiplication32WithIntArray:(IOSIntArray *)product
                                        withIntArray:(IOSIntArray *)publicKey
                                        withIntArray:(IOSIntArray *)positionList
                                      withShortArray:(IOSShortArray *)signList
                                             withInt:(jint)n
                                             withInt:(jint)h {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication32WithIntArray_withIntArray_withIntArray_withShortArray_withInt_withInt_(product, publicKey, positionList, signList, n, h);
}

+ (void)sparsePolynomialMultiplication32WithLongArray:(IOSLongArray *)product
                                              withInt:(jint)productOffset
                                         withIntArray:(IOSIntArray *)publicKey
                                              withInt:(jint)publicKeyOffset
                                         withIntArray:(IOSIntArray *)positionList
                                       withShortArray:(IOSShortArray *)signList
                                              withInt:(jint)n
                                              withInt:(jint)h
                                              withInt:(jint)q
                                              withInt:(jint)barrettMultiplication
                                              withInt:(jint)barrettDivision {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication32WithLongArray_withInt_withIntArray_withInt_withIntArray_withShortArray_withInt_withInt_withInt_withInt_withInt_(product, productOffset, publicKey, publicKeyOffset, positionList, signList, n, h, q, barrettMultiplication, barrettDivision);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 35, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 42, 44, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(montgomeryWithLong:withInt:withLong:);
  methods[2].selector = @selector(montgomeryPWithLong:withInt:withLong:);
  methods[3].selector = @selector(barrettWithInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(barrettWithLong:withInt:withInt:withInt:);
  methods[5].selector = @selector(numberTheoreticTransformWithIntArray:withIntArray:withInt:withInt:withLong:);
  methods[6].selector = @selector(numberTheoreticTransformIPWithLongArray:withLongArray:);
  methods[7].selector = @selector(numberTheoreticTransformIIIPWithLongArray:withLongArray:);
  methods[8].selector = @selector(inverseNumberTheoreticTransformIWithIntArray:withIntArray:);
  methods[9].selector = @selector(inverseNumberTheoreticTransformWithIntArray:withIntArray:withInt:withInt:withLong:withInt:withInt:withInt:);
  methods[10].selector = @selector(inverseNumberTheoreticTransformIPWithLongArray:withInt:withLongArray:withInt:);
  methods[11].selector = @selector(inverseNumberTheoreticTransformIIIPWithLongArray:withInt:withLongArray:withInt:);
  methods[12].selector = @selector(componentWisePolynomialMultiplicationWithIntArray:withIntArray:withIntArray:withInt:withInt:withLong:);
  methods[13].selector = @selector(componentWisePolynomialMultiplicationWithLongArray:withInt:withLongArray:withInt:withLongArray:withInt:withInt:withInt:withLong:);
  methods[14].selector = @selector(polynomialNumberTheoreticTransformWithLongArray:withLongArray:withInt:);
  methods[15].selector = @selector(polynomialMultiplicationWithIntArray:withIntArray:withIntArray:withInt:withInt:withLong:withIntArray:);
  methods[16].selector = @selector(polynomialMultiplicationWithLongArray:withInt:withLongArray:withInt:withLongArray:withInt:withInt:withInt:withLong:);
  methods[17].selector = @selector(polynomialAdditionWithIntArray:withIntArray:withIntArray:withInt:);
  methods[18].selector = @selector(polynomialAdditionWithLongArray:withInt:withLongArray:withInt:withLongArray:withInt:withInt:);
  methods[19].selector = @selector(polynomialAdditionCorrectionWithIntArray:withIntArray:withIntArray:withInt:withInt:);
  methods[20].selector = @selector(polynomialSubtractionCorrectionWithIntArray:withIntArray:withIntArray:withInt:withInt:);
  methods[21].selector = @selector(polynomialSubtractionMontgomeryWithIntArray:withIntArray:withIntArray:withInt:withInt:withLong:withInt:);
  methods[22].selector = @selector(polynomialSubtractionWithLongArray:withInt:withLongArray:withInt:withLongArray:withInt:withInt:withInt:withInt:withInt:);
  methods[23].selector = @selector(polynomialUniformWithIntArray:withByteArray:withInt:withInt:withInt:withLong:withInt:withInt:withInt:);
  methods[24].selector = @selector(polynomialUniformWithLongArray:withByteArray:withInt:withInt:withInt:withInt:withLong:withInt:withInt:withInt:);
  methods[25].selector = @selector(sparsePolynomialMultiplication16WithIntArray:withShortArray:withIntArray:withShortArray:withInt:withInt:);
  methods[26].selector = @selector(sparsePolynomialMultiplication8WithLongArray:withInt:withByteArray:withInt:withIntArray:withShortArray:withInt:withInt:);
  methods[27].selector = @selector(sparsePolynomialMultiplication32WithIntArray:withIntArray:withIntArray:withShortArray:withInt:withInt:);
  methods[28].selector = @selector(sparsePolynomialMultiplication32WithLongArray:withInt:withIntArray:withInt:withIntArray:withShortArray:withInt:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RANDOM", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM, 0x19, -1, -1, -1, -1 },
    { "SEED", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, 0x19, -1, -1, -1, -1 },
    { "HASH", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH, 0x19, -1, -1, -1, -1 },
    { "MESSAGE", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, 0x19, -1, -1, -1, -1 },
    { "SIGNATURE_I", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_I, 0x19, -1, -1, -1, -1 },
    { "SIGNATURE_III_SIZE", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_SIZE, 0x19, -1, -1, -1, -1 },
    { "SIGNATURE_III_SPEED", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_SPEED, 0x19, -1, -1, -1, -1 },
    { "SIGNATURE_I_P", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_I_P, 0x19, -1, -1, -1, -1 },
    { "SIGNATURE_III_P", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_P, 0x19, -1, -1, -1, -1 },
    { "PUBLIC_KEY_I", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_I, 0x19, -1, -1, -1, -1 },
    { "PUBLIC_KEY_III_SIZE", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_III_SIZE, 0x19, -1, -1, -1, -1 },
    { "PUBLIC_KEY_III_SPEED", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_III_SPEED, 0x19, -1, -1, -1, -1 },
    { "PUBLIC_KEY_I_P", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_I_P, 0x19, -1, -1, -1, -1 },
    { "PUBLIC_KEY_III_P", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PUBLIC_KEY_III_P, 0x19, -1, -1, -1, -1 },
    { "PRIVATE_KEY_I", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_I, 0x19, -1, -1, -1, -1 },
    { "PRIVATE_KEY_III_SIZE", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_III_SIZE, 0x19, -1, -1, -1, -1 },
    { "PRIVATE_KEY_III_SPEED", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_III_SPEED, 0x19, -1, -1, -1, -1 },
    { "PRIVATE_KEY_I_P", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_I_P, 0x19, -1, -1, -1, -1 },
    { "PRIVATE_KEY_III_P", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_III_P, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "montgomery", "JIJ", "montgomeryP", "barrett", "IIII", "JIII", "numberTheoreticTransform", "[I[IIIJ", "numberTheoreticTransformIP", "[J[J", "numberTheoreticTransformIIIP", "inverseNumberTheoreticTransformI", "[I[I", "inverseNumberTheoreticTransform", "[I[IIIJIII", "inverseNumberTheoreticTransformIP", "[JI[JI", "inverseNumberTheoreticTransformIIIP", "componentWisePolynomialMultiplication", "[I[I[IIIJ", "[JI[JI[JIIIJ", "polynomialNumberTheoreticTransform", "[J[JI", "polynomialMultiplication", "[I[I[IIIJ[I", "polynomialAddition", "[I[I[II", "[JI[JI[JII", "polynomialAdditionCorrection", "[I[I[III", "polynomialSubtractionCorrection", "polynomialSubtractionMontgomery", "[I[I[IIIJI", "polynomialSubtraction", "[JI[JI[JIIIII", "polynomialUniform", "[I[BIIIJIII", "[J[BIIIIJIII", "sparsePolynomialMultiplication16", "[I[S[I[SII", "sparsePolynomialMultiplication8", "[JI[BI[I[SII", "sparsePolynomialMultiplication32", "[I[I[I[SII", "[JI[II[I[SIIIII" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial = { "PqcCryptoQteslaPolynomial", "lib.org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x0, 29, 19, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial;
}

@end

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_init(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial *new_LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial, init)
}

LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial *create_LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial, init)
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_(jlong number, jint q, jlong qInverse) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  return (jint) (JreRShift64((number + ((number * qInverse) & (jlong) 0xFFFFFFFFLL) * q), 32));
}

jlong LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(jlong number, jint q, jlong qInverse) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  return JreRShift64((number + ((number * qInverse) & (jlong) 0xFFFFFFFFLL) * q), 32);
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithInt_withInt_withInt_withInt_(jint number, jint q, jint barrettMultiplication, jint barrettDivision) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  return number - (jint) (JreRShift64(((jlong) number * barrettMultiplication), barrettDivision)) * q;
}

jlong LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(jlong number, jint q, jint barrettMultiplication, jint barrettDivision) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  return number - (JreRShift64((number * barrettMultiplication), barrettDivision)) * q;
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_(IOSIntArray *destination, IOSIntArray *source, jint n, jint q, jlong qInverse) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint jTwiddle = 0;
  jint numberOfProblem = JreRShift32(n, 1);
  for (; numberOfProblem > 0; JreRShiftAssignInt(&numberOfProblem, 1)) {
    jint j = 0;
    jint jFirst;
    for (jFirst = 0; jFirst < n; jFirst = j + numberOfProblem) {
      jlong omega = IOSIntArray_Get(nil_chk(source), jTwiddle++);
      for (j = jFirst; j < jFirst + numberOfProblem; j++) {
        jint temporary = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_(omega * IOSIntArray_Get(nil_chk(destination), j + numberOfProblem), q, qInverse);
        *IOSIntArray_GetRef(destination, j + numberOfProblem) = IOSIntArray_Get(destination, j) - temporary;
        *IOSIntArray_GetRef(destination, j) = IOSIntArray_Get(destination, j) + temporary;
      }
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformIPWithLongArray_withLongArray_(IOSLongArray *destination, IOSLongArray *source) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint numberOfProblem = JreRShift32(LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P, 1);
  jint jTwiddle = 0;
  for (; numberOfProblem > 0; JreRShiftAssignInt(&numberOfProblem, 1)) {
    jint j = 0;
    jint jFirst;
    for (jFirst = 0; jFirst < LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P; jFirst = j + numberOfProblem) {
      jlong omega = IOSLongArray_Get(nil_chk(source), jTwiddle++);
      for (j = jFirst; j < jFirst + numberOfProblem; j++) {
        jlong temporary = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(omega * IOSLongArray_Get(nil_chk(destination), j + numberOfProblem), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I_P);
        *IOSLongArray_GetRef(destination, j + numberOfProblem) = IOSLongArray_Get(destination, j) + (LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P - temporary);
        *IOSLongArray_GetRef(destination, j) = IOSLongArray_Get(destination, j) + temporary;
      }
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformIIIPWithLongArray_withLongArray_(IOSLongArray *destination, IOSLongArray *source) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint jTwiddle = 0;
  jint numberOfProblem = JreRShift32(LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_P, 1);
  for (; numberOfProblem > 0; JreRShiftAssignInt(&numberOfProblem, 1)) {
    jint j = 0;
    jint jFirst;
    for (jFirst = 0; jFirst < LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_P; jFirst = j + numberOfProblem) {
      jint omega = (jint) IOSLongArray_Get(nil_chk(source), jTwiddle++);
      for (j = jFirst; j < jFirst + numberOfProblem; j++) {
        jlong temporary = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(omega * IOSLongArray_Get(nil_chk(destination), j + numberOfProblem), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_P), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_P);
        *IOSLongArray_GetRef(destination, j + numberOfProblem) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(IOSLongArray_Get(destination, j) + (2LL * LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P - temporary), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_P);
        *IOSLongArray_GetRef(destination, j) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(IOSLongArray_Get(destination, j) + temporary, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_P);
      }
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIWithIntArray_withIntArray_(IOSIntArray *destination, IOSIntArray *source) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint jTwiddle = 0;
  for (jint numberOfProblem = 1; numberOfProblem < LibOrgBouncycastlePqcCryptoQteslaParameter_N_I; numberOfProblem *= 2) {
    jint j = 0;
    jint jFirst;
    for (jFirst = 0; jFirst < LibOrgBouncycastlePqcCryptoQteslaParameter_N_I; jFirst = j + numberOfProblem) {
      jlong omega = IOSIntArray_Get(nil_chk(source), jTwiddle++);
      for (j = jFirst; j < jFirst + numberOfProblem; j++) {
        jint temporary = IOSIntArray_Get(nil_chk(destination), j);
        *IOSIntArray_GetRef(destination, j) = temporary + IOSIntArray_Get(destination, j + numberOfProblem);
        *IOSIntArray_GetRef(destination, j + numberOfProblem) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_(omega * (temporary - IOSIntArray_Get(destination, j + numberOfProblem)), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I);
      }
    }
  }
  for (jint i = 0; i < LibOrgBouncycastlePqcCryptoQteslaParameter_N_I / 2; i++) {
    *IOSIntArray_GetRef(nil_chk(destination), i) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_((jlong) LibOrgBouncycastlePqcCryptoQteslaParameter_R_I * IOSIntArray_Get(destination, i), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_withInt_withInt_withInt_(IOSIntArray *destination, IOSIntArray *source, jint n, jint q, jlong qInverse, jint r, jint barrettMultiplication, jint barrettDivision) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint jTwiddle = 0;
  for (jint numberOfProblem = 1; numberOfProblem < n; numberOfProblem *= 2) {
    jint j = 0;
    for (jint jFirst = 0; jFirst < n; jFirst = j + numberOfProblem) {
      jlong omega = IOSIntArray_Get(nil_chk(source), jTwiddle++);
      for (j = jFirst; j < jFirst + numberOfProblem; j++) {
        jint temporary = IOSIntArray_Get(nil_chk(destination), j);
        if (numberOfProblem == 16) {
          *IOSIntArray_GetRef(destination, j) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithInt_withInt_withInt_withInt_(temporary + IOSIntArray_Get(destination, j + numberOfProblem), q, barrettMultiplication, barrettDivision);
        }
        else {
          *IOSIntArray_GetRef(destination, j) = temporary + IOSIntArray_Get(destination, j + numberOfProblem);
        }
        *IOSIntArray_GetRef(destination, j + numberOfProblem) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_(omega * (temporary - IOSIntArray_Get(destination, j + numberOfProblem)), q, qInverse);
      }
    }
  }
  for (jint i = 0; i < n / 2; i++) {
    *IOSIntArray_GetRef(nil_chk(destination), i) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_((jlong) r * IOSIntArray_Get(destination, i), q, qInverse);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIPWithLongArray_withInt_withLongArray_withInt_(IOSLongArray *destination, jint destinationOffset, IOSLongArray *source, jint sourceOffset) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint jTwiddle = 0;
  for (jint numberOfProblem = 1; numberOfProblem < LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P; numberOfProblem *= 2) {
    jint j = 0;
    jint jFirst;
    for (jFirst = 0; jFirst < LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P; jFirst = j + numberOfProblem) {
      jlong omega = IOSLongArray_Get(nil_chk(source), sourceOffset + (jTwiddle++));
      for (j = jFirst; j < jFirst + numberOfProblem; j++) {
        jlong temporary = IOSLongArray_Get(nil_chk(destination), destinationOffset + j);
        *IOSLongArray_GetRef(destination, destinationOffset + j) = temporary + IOSLongArray_Get(destination, destinationOffset + j + numberOfProblem);
        *IOSLongArray_GetRef(destination, destinationOffset + j + numberOfProblem) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(omega * (temporary + (2LL * LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P - IOSLongArray_Get(destination, destinationOffset + j + numberOfProblem))), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I_P);
      }
    }
    numberOfProblem *= 2;
    for (jFirst = 0; jFirst < LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P; jFirst = j + numberOfProblem) {
      jlong omega = IOSLongArray_Get(nil_chk(source), sourceOffset + (jTwiddle++));
      for (j = jFirst; j < jFirst + numberOfProblem; j++) {
        jlong temporary = IOSLongArray_Get(nil_chk(destination), destinationOffset + j);
        *IOSLongArray_GetRef(destination, destinationOffset + j) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(temporary + IOSLongArray_Get(destination, destinationOffset + j + numberOfProblem), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_I_P);
        *IOSLongArray_GetRef(destination, destinationOffset + j + numberOfProblem) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(omega * (temporary + (2LL * LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P - IOSLongArray_Get(destination, destinationOffset + j + numberOfProblem))), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I_P);
      }
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIIIPWithLongArray_withInt_withLongArray_withInt_(IOSLongArray *destination, jint destinationOffset, IOSLongArray *source, jint sourceOffset) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint jTwiddle = 0;
  for (jint numberOfProblem = 1; numberOfProblem < LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_P; numberOfProblem *= 2) {
    jint j = 0;
    jint jFirst;
    for (jFirst = 0; jFirst < LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_P; jFirst = j + numberOfProblem) {
      jlong omega = IOSLongArray_Get(nil_chk(source), sourceOffset + (jTwiddle++));
      for (j = jFirst; j < jFirst + numberOfProblem; j++) {
        jlong temporary = IOSLongArray_Get(nil_chk(destination), destinationOffset + j);
        *IOSLongArray_GetRef(destination, destinationOffset + j) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(temporary + IOSLongArray_Get(destination, destinationOffset + j + numberOfProblem), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_P);
        *IOSLongArray_GetRef(destination, destinationOffset + j + numberOfProblem) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(omega * (temporary + (2LL * LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P - IOSLongArray_Get(destination, destinationOffset + j + numberOfProblem))), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_P), LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_P);
      }
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_componentWisePolynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_(IOSIntArray *product, IOSIntArray *multiplicand, IOSIntArray *multiplier, jint n, jint q, jlong qInverse) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(nil_chk(product), i) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_((jlong) IOSIntArray_Get(nil_chk(multiplicand), i) * IOSIntArray_Get(nil_chk(multiplier), i), q, qInverse);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_componentWisePolynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(IOSLongArray *product, jint productOffset, IOSLongArray *multiplicand, jint multiplicandOffset, IOSLongArray *multiplier, jint multiplierOffset, jint n, jint q, jlong qInverse) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSLongArray_GetRef(nil_chk(product), productOffset + i) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_(IOSLongArray_Get(nil_chk(multiplicand), multiplicandOffset + i) * IOSLongArray_Get(nil_chk(multiplier), multiplierOffset + i), q, qInverse);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialNumberTheoreticTransformWithLongArray_withLongArray_withInt_(IOSLongArray *arrayNumberTheoreticTransform, IOSLongArray *array, jint n) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSLongArray_GetRef(nil_chk(arrayNumberTheoreticTransform), i) = IOSLongArray_Get(nil_chk(array), i);
  }
  if (n == LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformIPWithLongArray_withLongArray_(arrayNumberTheoreticTransform, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_I_P));
  }
  if (n == LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformIIIPWithLongArray_withLongArray_(arrayNumberTheoreticTransform, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_III_P));
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_withIntArray_(IOSIntArray *product, IOSIntArray *multiplicand, IOSIntArray *multiplier, jint n, jint q, jlong qInverse, IOSIntArray *zeta) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  IOSIntArray *multiplierNumberTheoreticTransform = [IOSIntArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(multiplierNumberTheoreticTransform, i) = IOSIntArray_Get(nil_chk(multiplier), i);
  }
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_numberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_(multiplierNumberTheoreticTransform, zeta, n, q, qInverse);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_componentWisePolynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_(product, multiplicand, multiplierNumberTheoreticTransform, n, q, qInverse);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIWithIntArray_withIntArray_(product, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_INVERSE_I));
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_withInt_withInt_withInt_(product, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_INVERSE_III_SIZE), LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_R_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_SIZE);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformWithIntArray_withIntArray_withInt_withInt_withLong_withInt_withInt_withInt_(product, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_INVERSE_III_SPEED), LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_R_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_SPEED);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(IOSLongArray *product, jint productOffset, IOSLongArray *multiplicand, jint multiplicandOffset, IOSLongArray *multiplier, jint multiplierOffset, jint n, jint q, jlong qInverse) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_componentWisePolynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(product, productOffset, multiplicand, multiplicandOffset, multiplier, multiplierOffset, n, q, qInverse);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIPWithLongArray_withInt_withLongArray_withInt_(product, productOffset, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_INVERSE_I_P), 0);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_inverseNumberTheoreticTransformIIIPWithLongArray_withInt_withLongArray_withInt_(product, productOffset, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_INVERSE_III_P), 0);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionWithIntArray_withIntArray_withIntArray_withInt_(IOSIntArray *summation, IOSIntArray *augend, IOSIntArray *addend, jint n) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(nil_chk(summation), i) = IOSIntArray_Get(nil_chk(augend), i) + IOSIntArray_Get(nil_chk(addend), i);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *summation, jint summationOffset, IOSLongArray *augend, jint augendOffset, IOSLongArray *addend, jint addendOffset, jint n) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSLongArray_GetRef(nil_chk(summation), summationOffset + i) = IOSLongArray_Get(nil_chk(augend), augendOffset + i) + IOSLongArray_Get(nil_chk(addend), addendOffset + i);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionCorrectionWithIntArray_withIntArray_withIntArray_withInt_withInt_(IOSIntArray *summation, IOSIntArray *augend, IOSIntArray *addend, jint n, jint q) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(nil_chk(summation), i) = IOSIntArray_Get(nil_chk(augend), i) + IOSIntArray_Get(nil_chk(addend), i);
    *IOSIntArray_GetRef(summation, i) += (JreRShift32(IOSIntArray_Get(summation, i), 31)) & q;
    *IOSIntArray_GetRef(summation, i) -= q;
    *IOSIntArray_GetRef(summation, i) += (JreRShift32(IOSIntArray_Get(summation, i), 31)) & q;
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionCorrectionWithIntArray_withIntArray_withIntArray_withInt_withInt_(IOSIntArray *difference, IOSIntArray *minuend, IOSIntArray *subtrahend, jint n, jint q) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(nil_chk(difference), i) = IOSIntArray_Get(nil_chk(minuend), i) - IOSIntArray_Get(nil_chk(subtrahend), i);
    *IOSIntArray_GetRef(difference, i) += (JreRShift32(IOSIntArray_Get(difference, i), 31)) & q;
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionMontgomeryWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_withInt_(IOSIntArray *difference, IOSIntArray *minuend, IOSIntArray *subtrahend, jint n, jint q, jlong qInverse, jint r) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(nil_chk(difference), i) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_((jlong) r * (IOSIntArray_Get(nil_chk(minuend), i) - IOSIntArray_Get(nil_chk(subtrahend), i)), q, qInverse);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withInt_withInt_(IOSLongArray *difference, jint differenceOffset, IOSLongArray *minuend, jint minuendOffset, IOSLongArray *subtrahend, jint subtrahendOffset, jint n, jint q, jint barrettMultiplication, jint barrettDivision) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  for (jint i = 0; i < n; i++) {
    *IOSLongArray_GetRef(nil_chk(difference), differenceOffset + i) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(IOSLongArray_Get(nil_chk(minuend), minuendOffset + i) - IOSLongArray_Get(nil_chk(subtrahend), subtrahendOffset + i), q, barrettMultiplication, barrettDivision);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithIntArray_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(IOSIntArray *A, IOSByteArray *seed, jint seedOffset, jint n, jint q, jlong qInverse, jint qLogarithm, jint generatorA, jint inverseNumberTheoreticTransform) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint position = 0;
  jint i = 0;
  jint numberOfByte = (qLogarithm + 7) / 8;
  jint numberOfBlock = generatorA;
  jshort dualModeSampler = 0;
  jint value1;
  jint value2;
  jint value3;
  jint value4;
  jint mask = (JreLShift32(1, qLogarithm)) - 1;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * generatorA];
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(buffer, 0, LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * generatorA, dualModeSampler++, seed, seedOffset, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
  while (i < n) {
    if (position > (LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * numberOfBlock - LibOrgBouncycastlePqcCryptoQteslaConst_INT_SIZE / LibOrgBouncycastlePqcCryptoQteslaConst_BC_BYTE_SIZE * numberOfByte)) {
      numberOfBlock = 1;
      LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(buffer, 0, LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * numberOfBlock, dualModeSampler++, seed, seedOffset, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
      position = 0;
    }
    value1 = LibOrgBouncycastlePqcCryptoQteslaCommonFunction_load32WithByteArray_withInt_(buffer, position) & mask;
    position += numberOfByte;
    value2 = LibOrgBouncycastlePqcCryptoQteslaCommonFunction_load32WithByteArray_withInt_(buffer, position) & mask;
    position += numberOfByte;
    value3 = LibOrgBouncycastlePqcCryptoQteslaCommonFunction_load32WithByteArray_withInt_(buffer, position) & mask;
    position += numberOfByte;
    value4 = LibOrgBouncycastlePqcCryptoQteslaCommonFunction_load32WithByteArray_withInt_(buffer, position) & mask;
    position += numberOfByte;
    if (value1 < q && i < n) {
      *IOSIntArray_GetRef(nil_chk(A), i++) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_((jlong) value1 * inverseNumberTheoreticTransform, q, qInverse);
    }
    if (value2 < q && i < n) {
      *IOSIntArray_GetRef(nil_chk(A), i++) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_((jlong) value2 * inverseNumberTheoreticTransform, q, qInverse);
    }
    if (value3 < q && i < n) {
      *IOSIntArray_GetRef(nil_chk(A), i++) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_((jlong) value3 * inverseNumberTheoreticTransform, q, qInverse);
    }
    if (value4 < q && i < n) {
      *IOSIntArray_GetRef(nil_chk(A), i++) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryWithLong_withInt_withLong_((jlong) value4 * inverseNumberTheoreticTransform, q, qInverse);
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithLongArray_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(IOSLongArray *A, IOSByteArray *seed, jint seedOffset, jint n, jint k, jint q, jlong qInverse, jint qLogarithm, jint generatorA, jint inverseNumberTheoreticTransform) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint position = 0;
  jint i = 0;
  jint numberOfByte = (qLogarithm + 7) / 8;
  jint numberOfBlock = generatorA;
  jshort dualModeSampler = 0;
  jint value1;
  jint value2;
  jint value3;
  jint value4;
  jint mask = (JreLShift32(1, qLogarithm)) - 1;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * numberOfBlock];
  LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(buffer, 0, LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * numberOfBlock, dualModeSampler++, seed, seedOffset, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
  while (i < n * k) {
    if (position > (LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * numberOfBlock - LibOrgBouncycastlePqcCryptoQteslaConst_INT_SIZE / LibOrgBouncycastlePqcCryptoQteslaConst_BC_BYTE_SIZE * numberOfByte)) {
      numberOfBlock = 1;
      LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(buffer, 0, LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * numberOfBlock, dualModeSampler++, seed, seedOffset, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
      position = 0;
    }
    value1 = LibOrgBouncycastlePqcCryptoQteslaCommonFunction_load32WithByteArray_withInt_(buffer, position) & mask;
    position += numberOfByte;
    value2 = LibOrgBouncycastlePqcCryptoQteslaCommonFunction_load32WithByteArray_withInt_(buffer, position) & mask;
    position += numberOfByte;
    value3 = LibOrgBouncycastlePqcCryptoQteslaCommonFunction_load32WithByteArray_withInt_(buffer, position) & mask;
    position += numberOfByte;
    value4 = LibOrgBouncycastlePqcCryptoQteslaCommonFunction_load32WithByteArray_withInt_(buffer, position) & mask;
    position += numberOfByte;
    if (value1 < q && i < n * k) {
      *IOSLongArray_GetRef(nil_chk(A), i++) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_((jlong) value1 * inverseNumberTheoreticTransform, q, qInverse);
    }
    if (value2 < q && i < n * k) {
      *IOSLongArray_GetRef(nil_chk(A), i++) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_((jlong) value2 * inverseNumberTheoreticTransform, q, qInverse);
    }
    if (value3 < q && i < n * k) {
      *IOSLongArray_GetRef(nil_chk(A), i++) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_((jlong) value3 * inverseNumberTheoreticTransform, q, qInverse);
    }
    if (value4 < q && i < n * k) {
      *IOSLongArray_GetRef(nil_chk(A), i++) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_montgomeryPWithLong_withInt_withLong_((jlong) value4 * inverseNumberTheoreticTransform, q, qInverse);
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication16WithIntArray_withShortArray_withIntArray_withShortArray_withInt_withInt_(IOSIntArray *product, IOSShortArray *privateKey, IOSIntArray *positionList, IOSShortArray *signList, jint n, jint h) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint position;
  LibOrgBouncycastleUtilArrays_fillWithIntArray_withInt_(product, 0);
  for (jint i = 0; i < h; i++) {
    position = IOSIntArray_Get(nil_chk(positionList), i);
    for (jint j = 0; j < position; j++) {
      *IOSIntArray_GetRef(nil_chk(product), j) -= IOSShortArray_Get(nil_chk(signList), i) * IOSShortArray_Get(nil_chk(privateKey), n + j - position);
    }
    for (jint j = position; j < n; j++) {
      *IOSIntArray_GetRef(nil_chk(product), j) += IOSShortArray_Get(nil_chk(signList), i) * IOSShortArray_Get(nil_chk(privateKey), j - position);
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication8WithLongArray_withInt_withByteArray_withInt_withIntArray_withShortArray_withInt_withInt_(IOSLongArray *product, jint productOffset, IOSByteArray *privateKey, jint privateKeyOffset, IOSIntArray *positionList, IOSShortArray *signList, jint n, jint h) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint position;
  LibOrgBouncycastleUtilArrays_fillWithLongArray_withLong_(product, 0LL);
  for (jint i = 0; i < h; i++) {
    position = IOSIntArray_Get(nil_chk(positionList), i);
    for (jint j = 0; j < position; j++) {
      *IOSLongArray_GetRef(nil_chk(product), productOffset + j) -= IOSShortArray_Get(nil_chk(signList), i) * IOSByteArray_Get(nil_chk(privateKey), privateKeyOffset + n + j - position);
    }
    for (jint j = position; j < n; j++) {
      *IOSLongArray_GetRef(nil_chk(product), productOffset + j) += IOSShortArray_Get(nil_chk(signList), i) * IOSByteArray_Get(nil_chk(privateKey), privateKeyOffset + j - position);
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication32WithIntArray_withIntArray_withIntArray_withShortArray_withInt_withInt_(IOSIntArray *product, IOSIntArray *publicKey, IOSIntArray *positionList, IOSShortArray *signList, jint n, jint h) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint position;
  LibOrgBouncycastleUtilArrays_fillWithIntArray_withInt_(product, 0);
  for (jint i = 0; i < h; i++) {
    position = IOSIntArray_Get(nil_chk(positionList), i);
    for (jint j = 0; j < position; j++) {
      *IOSIntArray_GetRef(nil_chk(product), j) -= IOSShortArray_Get(nil_chk(signList), i) * IOSIntArray_Get(nil_chk(publicKey), n + j - position);
    }
    for (jint j = position; j < n; j++) {
      *IOSIntArray_GetRef(nil_chk(product), j) += IOSShortArray_Get(nil_chk(signList), i) * IOSIntArray_Get(nil_chk(publicKey), j - position);
    }
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication32WithLongArray_withInt_withIntArray_withInt_withIntArray_withShortArray_withInt_withInt_withInt_withInt_withInt_(IOSLongArray *product, jint productOffset, IOSIntArray *publicKey, jint publicKeyOffset, IOSIntArray *positionList, IOSShortArray *signList, jint n, jint h, jint q, jint barrettMultiplication, jint barrettDivision) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_initialize();
  jint position;
  LibOrgBouncycastleUtilArrays_fillWithLongArray_withLong_(product, 0LL);
  for (jint i = 0; i < h; i++) {
    position = IOSIntArray_Get(nil_chk(positionList), i);
    for (jint j = 0; j < position; j++) {
      *IOSLongArray_GetRef(nil_chk(product), productOffset + j) -= IOSShortArray_Get(nil_chk(signList), i) * IOSIntArray_Get(nil_chk(publicKey), publicKeyOffset + n + j - position);
    }
    for (jint j = position; j < n; j++) {
      *IOSLongArray_GetRef(nil_chk(product), productOffset + j) += IOSShortArray_Get(nil_chk(signList), i) * IOSIntArray_Get(nil_chk(publicKey), publicKeyOffset + j - position);
    }
  }
  for (jint i = 0; i < n; i++) {
    *IOSLongArray_GetRef(nil_chk(product), productOffset + i) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_barrettWithLong_withInt_withInt_withInt_(IOSLongArray_Get(product, productOffset + i), q, barrettMultiplication, barrettDivision);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial)
