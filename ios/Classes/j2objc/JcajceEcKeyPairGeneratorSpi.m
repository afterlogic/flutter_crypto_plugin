//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ec/JcajceEcKeyPairGeneratorSpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BCECPrivateKey.h"
#include "BCECPublicKey.h"
#include "BouncyCastleProvider.h"
#include "CryptoServicesRegistrar.h"
#include "EC5Util.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECKeyGenerationParameters.h"
#include "ECKeyPairGenerator.h"
#include "ECNamedCurveGenParameterSpec.h"
#include "ECNamedCurveSpec.h"
#include "ECNamedCurveTable.h"
#include "ECParameterSpec.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "ECUtils.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "JcajceEcKeyPairGeneratorSpi.h"
#include "ProviderConfiguration.h"
#include "X9ECParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/ECGenParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/EllipticCurve.h"
#include "java/util/Hashtable.h"
#include "java/util/Map.h"

inline JavaUtilHashtable *LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_get_ecParameters(void);
inline JavaUtilHashtable *LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_set_ecParameters(JavaUtilHashtable *value);
static JavaUtilHashtable *LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC, ecParameters, JavaUtilHashtable *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi

- (instancetype)initWithNSString:(NSString *)algorithmName {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_initWithNSString_(self, algorithmName);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi = { "JcajceEcKeyPairGeneratorSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x401, 1, 0, -1, 1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_initWithNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi *self, NSString *algorithmName) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self, algorithmName);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, configuration);
  return self;
}

- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->strength_ = strength;
  self->random_ = random;
  JavaSecuritySpecECGenParameterSpec *ecParams = (JavaSecuritySpecECGenParameterSpec *) cast_chk([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters)) getWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(strength)], [JavaSecuritySpecECGenParameterSpec class]);
  if (ecParams == nil) {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"unknown key size.");
  }
  @try {
    [self initialize__WithJavaSecuritySpecAlgorithmParameterSpec:ecParams withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"key size not configurable.");
  }
}

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (params == nil) {
    LibOrgBouncycastleJceSpecECParameterSpec *implicitCA = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration_)) getEcImplicitlyCa];
    if (implicitCA == nil) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"null parameter passed but no implicitCA set");
    }
    self->ecParams_ = nil;
    self->param_ = [self createKeyGenParamsBCWithLibOrgBouncycastleJceSpecECParameterSpec:implicitCA withJavaSecuritySecureRandom:random];
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleJceSpecECParameterSpec class]]) {
    self->ecParams_ = params;
    self->param_ = [self createKeyGenParamsBCWithLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *) params withJavaSecuritySecureRandom:random];
  }
  else if ([params isKindOfClass:[JavaSecuritySpecECParameterSpec class]]) {
    self->ecParams_ = params;
    self->param_ = [self createKeyGenParamsJCEWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *) params withJavaSecuritySecureRandom:random];
  }
  else if ([params isKindOfClass:[JavaSecuritySpecECGenParameterSpec class]]) {
    [self initializeNamedCurveWithNSString:[((JavaSecuritySpecECGenParameterSpec *) params) getName] withJavaSecuritySecureRandom:random];
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleJceSpecECNamedCurveGenParameterSpec class]]) {
    [self initializeNamedCurveWithNSString:[((LibOrgBouncycastleJceSpecECNamedCurveGenParameterSpec *) params) getName] withJavaSecuritySecureRandom:random];
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not a ECParameterSpec");
  }
  [((LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param_];
  initialised_ = true;
}

- (JavaSecurityKeyPair *)generateKeyPair {
  if (!initialised_) {
    [self initialize__WithInt:strength_ withJavaSecuritySecureRandom:new_JavaSecuritySecureRandom_init()];
  }
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *pub = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *priv = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([pair getPrivate], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
  if ([ecParams_ isKindOfClass:[LibOrgBouncycastleJceSpecECParameterSpec class]]) {
    LibOrgBouncycastleJceSpecECParameterSpec *p = (LibOrgBouncycastleJceSpecECParameterSpec *) ecParams_;
    LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *pubKey = new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJceSpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, pub, p, configuration_);
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(pubKey, new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_withLibOrgBouncycastleJceSpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, priv, pubKey, p, configuration_));
  }
  else if (ecParams_ == nil) {
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, pub, configuration_), new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, priv, configuration_));
  }
  else {
    JavaSecuritySpecECParameterSpec *p = (JavaSecuritySpecECParameterSpec *) cast_chk(ecParams_, [JavaSecuritySpecECParameterSpec class]);
    LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *pubKey = new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, pub, p, configuration_);
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(pubKey, new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_withJavaSecuritySpecECParameterSpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, priv, pubKey, p, configuration_));
  }
}

- (LibOrgBouncycastleCryptoParamsECKeyGenerationParameters *)createKeyGenParamsBCWithLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)p
                                                                                                 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  return new_LibOrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(p)) getCurve], [p getG], [p getN], [p getH]), r);
}

- (LibOrgBouncycastleCryptoParamsECKeyGenerationParameters *)createKeyGenParamsJCEWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)p
                                                                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  LibOrgBouncycastleMathEcECCurve *curve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([((JavaSecuritySpecECParameterSpec *) nil_chk(p)) getCurve]);
  LibOrgBouncycastleMathEcECPoint *g = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECCurve_withJavaSecuritySpecECPoint_withBoolean_(curve, [p getGenerator], false);
  JavaMathBigInteger *n = [p getOrder];
  JavaMathBigInteger *h = JavaMathBigInteger_valueOfWithLong_([p getCofactor]);
  LibOrgBouncycastleCryptoParamsECDomainParameters *dp = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(curve, g, n, h);
  return new_LibOrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(dp, r);
}

- (LibOrgBouncycastleJceSpecECNamedCurveSpec *)createNamedCurveSpecWithNSString:(NSString *)curveName {
  LibOrgBouncycastleAsn1X9X9ECParameters *p = LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_(curveName);
  if (p == nil) {
    @try {
      p = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(curveName));
      if (p == nil) {
        id<JavaUtilMap> extraCurves = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration_)) getAdditionalECParameters];
        p = (LibOrgBouncycastleAsn1X9X9ECParameters *) cast_chk([((id<JavaUtilMap>) nil_chk(extraCurves)) getWithId:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(curveName)], [LibOrgBouncycastleAsn1X9X9ECParameters class]);
        if (p == nil) {
          @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"unknown curve OID: ", curveName));
        }
      }
    }
    @catch (JavaLangIllegalArgumentException *ex) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"unknown curve name: ", curveName));
    }
  }
  IOSByteArray *seed = nil;
  return new_LibOrgBouncycastleJceSpecECNamedCurveSpec_initWithNSString_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curveName, [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(p)) getCurve], [p getG], [p getN], [p getH], seed);
}

- (void)initializeNamedCurveWithNSString:(NSString *)curveName
            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastleJceSpecECNamedCurveSpec *namedCurve = [self createNamedCurveSpecWithNSString:curveName];
  self->ecParams_ = namedCurve;
  self->param_ = [self createKeyGenParamsJCEWithJavaSecuritySpecECParameterSpec:namedCurve withJavaSecuritySecureRandom:random];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECKeyGenerationParameters;", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECKeyGenerationParameters;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceSpecECNamedCurveSpec;", 0x4, 9, 10, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[2].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(generateKeyPair);
  methods[5].selector = @selector(createKeyGenParamsBCWithLibOrgBouncycastleJceSpecECParameterSpec:withJavaSecuritySecureRandom:);
  methods[6].selector = @selector(createKeyGenParamsJCEWithJavaSecuritySpecECParameterSpec:withJavaSecuritySecureRandom:);
  methods[7].selector = @selector(createNamedCurveSpecWithNSString:);
  methods[8].selector = @selector(initializeNamedCurveWithNSString:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "param_", "LLibOrgBouncycastleCryptoParamsECKeyGenerationParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "engine_", "LLibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ecParams_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "algorithm_EC_", "LNSString;", .constantValue.asLong = 0, 0x0, 13, -1, -1, -1 },
    { "configuration_", "LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ecParameters", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", "createKeyGenParamsBC", "LLibOrgBouncycastleJceSpecECParameterSpec;LJavaSecuritySecureRandom;", "createKeyGenParamsJCE", "LJavaSecuritySpecECParameterSpec;LJavaSecuritySecureRandom;", "createNamedCurveSpec", "LNSString;", "initializeNamedCurve", "LNSString;LJavaSecuritySecureRandom;", "algorithm", &LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters, "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC = { "EC", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x9, 9, 9, 15, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC class]) {
    {
      LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters = new_JavaUtilHashtable_init();
      (void) [LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters putWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(192) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"prime192v1")];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(239) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"prime239v1")];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(256) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"prime256v1")];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(224) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"P-224")];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(384) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"P-384")];
      (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(521) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"P-521")];
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC)
  }
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_initWithNSString_(self, @"EC");
  self->engine_ = new_LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init();
  self->ecParams_ = nil;
  self->strength_ = 239;
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
  self->algorithm_EC_ = @"EC";
  self->configuration_ = JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC, init)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC *self, NSString *algorithm, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_initWithNSString_(self, algorithm);
  self->engine_ = new_LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init();
  self->ecParams_ = nil;
  self->strength_ = 239;
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
  self->algorithm_EC_ = algorithm;
  self->configuration_ = configuration;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC, initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC, initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, configuration)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA = { "ECDSA", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECDSA", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDSA)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH = { "ECDH", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECDH", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDH)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC = { "ECDHC", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECDHC", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECDHC)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV = { "ECMQV", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_EC_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECMQV", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyPairGeneratorSpi_ECMQV)
