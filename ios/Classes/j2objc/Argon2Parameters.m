//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/Argon2Parameters.java
//

#include "Argon2Parameters.h"
#include "Arrays.h"
#include "CharToByteConverter.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PasswordConverter.h"

@interface LibOrgBouncycastleCryptoParamsArgon2Parameters () {
 @public
  IOSByteArray *salt_;
  IOSByteArray *secret_;
  IOSByteArray *additional_;
  jint iterations_;
  jint memory_;
  jint lanes_;
  jint version__;
  jint type_;
  id<LibOrgBouncycastleCryptoCharToByteConverter> converter_;
}

- (instancetype)initWithInt:(jint)type
              withByteArray:(IOSByteArray *)salt
              withByteArray:(IOSByteArray *)secret
              withByteArray:(IOSByteArray *)additional
                    withInt:(jint)iterations
                    withInt:(jint)memory
                    withInt:(jint)lanes
                    withInt:(jint)version_
withLibOrgBouncycastleCryptoCharToByteConverter:(id<LibOrgBouncycastleCryptoCharToByteConverter>)converter;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsArgon2Parameters, salt_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsArgon2Parameters, secret_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsArgon2Parameters, additional_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsArgon2Parameters, converter_, id<LibOrgBouncycastleCryptoCharToByteConverter>)

inline jint LibOrgBouncycastleCryptoParamsArgon2Parameters_get_DEFAULT_ITERATIONS(void);
#define LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_ITERATIONS 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsArgon2Parameters, DEFAULT_ITERATIONS, jint)

inline jint LibOrgBouncycastleCryptoParamsArgon2Parameters_get_DEFAULT_MEMORY_COST(void);
#define LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_MEMORY_COST 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsArgon2Parameters, DEFAULT_MEMORY_COST, jint)

inline jint LibOrgBouncycastleCryptoParamsArgon2Parameters_get_DEFAULT_LANES(void);
#define LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_LANES 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsArgon2Parameters, DEFAULT_LANES, jint)

inline jint LibOrgBouncycastleCryptoParamsArgon2Parameters_get_DEFAULT_TYPE(void);
#define LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_TYPE 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsArgon2Parameters, DEFAULT_TYPE, jint)

inline jint LibOrgBouncycastleCryptoParamsArgon2Parameters_get_DEFAULT_VERSION(void);
#define LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_VERSION 19
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsArgon2Parameters, DEFAULT_VERSION, jint)

__attribute__((unused)) static void LibOrgBouncycastleCryptoParamsArgon2Parameters_initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_(LibOrgBouncycastleCryptoParamsArgon2Parameters *self, jint type, IOSByteArray *salt, IOSByteArray *secret, IOSByteArray *additional, jint iterations, jint memory, jint lanes, jint version_, id<LibOrgBouncycastleCryptoCharToByteConverter> converter);

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsArgon2Parameters *new_LibOrgBouncycastleCryptoParamsArgon2Parameters_initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_(jint type, IOSByteArray *salt, IOSByteArray *secret, IOSByteArray *additional, jint iterations, jint memory, jint lanes, jint version_, id<LibOrgBouncycastleCryptoCharToByteConverter> converter) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsArgon2Parameters *create_LibOrgBouncycastleCryptoParamsArgon2Parameters_initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_(jint type, IOSByteArray *salt, IOSByteArray *secret, IOSByteArray *additional, jint iterations, jint memory, jint lanes, jint version_, id<LibOrgBouncycastleCryptoCharToByteConverter> converter);

@interface LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder () {
 @public
  IOSByteArray *salt_;
  IOSByteArray *secret_;
  IOSByteArray *additional_;
  jint iterations_;
  jint memory_;
  jint lanes_;
  jint version__;
  jint type_;
  id<LibOrgBouncycastleCryptoCharToByteConverter> converter_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder, salt_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder, secret_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder, additional_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder, converter_, id<LibOrgBouncycastleCryptoCharToByteConverter>)

@implementation LibOrgBouncycastleCryptoParamsArgon2Parameters

+ (jint)ARGON2_d {
  return LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_d;
}

+ (jint)ARGON2_i {
  return LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_i;
}

+ (jint)ARGON2_id {
  return LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_id;
}

+ (jint)ARGON2_VERSION_10 {
  return LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_VERSION_10;
}

+ (jint)ARGON2_VERSION_13 {
  return LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_VERSION_13;
}

- (instancetype)initWithInt:(jint)type
              withByteArray:(IOSByteArray *)salt
              withByteArray:(IOSByteArray *)secret
              withByteArray:(IOSByteArray *)additional
                    withInt:(jint)iterations
                    withInt:(jint)memory
                    withInt:(jint)lanes
                    withInt:(jint)version_
withLibOrgBouncycastleCryptoCharToByteConverter:(id<LibOrgBouncycastleCryptoCharToByteConverter>)converter {
  LibOrgBouncycastleCryptoParamsArgon2Parameters_initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_(self, type, salt, secret, additional, iterations, memory, lanes, version_, converter);
  return self;
}

- (IOSByteArray *)getSalt {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(salt_);
}

- (IOSByteArray *)getSecret {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(secret_);
}

- (IOSByteArray *)getAdditional {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(additional_);
}

- (jint)getIterations {
  return iterations_;
}

- (jint)getMemory {
  return memory_;
}

- (jint)getLanes {
  return lanes_;
}

- (jint)getVersion {
  return version__;
}

- (jint)getType {
  return type_;
}

- (id<LibOrgBouncycastleCryptoCharToByteConverter>)getCharToByteConverter {
  return converter_;
}

- (void)clear {
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(salt_);
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(secret_);
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(additional_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCharToByteConverter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withByteArray:withByteArray:withByteArray:withInt:withInt:withInt:withInt:withLibOrgBouncycastleCryptoCharToByteConverter:);
  methods[1].selector = @selector(getSalt);
  methods[2].selector = @selector(getSecret);
  methods[3].selector = @selector(getAdditional);
  methods[4].selector = @selector(getIterations);
  methods[5].selector = @selector(getMemory);
  methods[6].selector = @selector(getLanes);
  methods[7].selector = @selector(getVersion);
  methods[8].selector = @selector(getType);
  methods[9].selector = @selector(getCharToByteConverter);
  methods[10].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ARGON2_d", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_d, 0x19, -1, -1, -1, -1 },
    { "ARGON2_i", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_i, 0x19, -1, -1, -1, -1 },
    { "ARGON2_id", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_id, 0x19, -1, -1, -1, -1 },
    { "ARGON2_VERSION_10", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_VERSION_10, 0x19, -1, -1, -1, -1 },
    { "ARGON2_VERSION_13", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_ARGON2_VERSION_13, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_ITERATIONS", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_ITERATIONS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MEMORY_COST", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_MEMORY_COST, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_LANES", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_LANES, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_TYPE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_TYPE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_VERSION", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_VERSION, 0x1a, -1, -1, -1, -1 },
    { "salt_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "secret_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "additional_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iterations_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "memory_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lanes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x12, 1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "converter_", "LLibOrgBouncycastleCryptoCharToByteConverter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[B[B[BIIIILLibOrgBouncycastleCryptoCharToByteConverter;", "version", "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsArgon2Parameters = { "Argon2Parameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 11, 19, -1, 2, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsArgon2Parameters;
}

@end

void LibOrgBouncycastleCryptoParamsArgon2Parameters_initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_(LibOrgBouncycastleCryptoParamsArgon2Parameters *self, jint type, IOSByteArray *salt, IOSByteArray *secret, IOSByteArray *additional, jint iterations, jint memory, jint lanes, jint version_, id<LibOrgBouncycastleCryptoCharToByteConverter> converter) {
  NSObject_init(self);
  self->salt_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(salt);
  self->secret_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(secret);
  self->additional_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(additional);
  self->iterations_ = iterations;
  self->memory_ = memory;
  self->lanes_ = lanes;
  self->version__ = version_;
  self->type_ = type;
  self->converter_ = converter;
}

LibOrgBouncycastleCryptoParamsArgon2Parameters *new_LibOrgBouncycastleCryptoParamsArgon2Parameters_initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_(jint type, IOSByteArray *salt, IOSByteArray *secret, IOSByteArray *additional, jint iterations, jint memory, jint lanes, jint version_, id<LibOrgBouncycastleCryptoCharToByteConverter> converter) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsArgon2Parameters, initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_, type, salt, secret, additional, iterations, memory, lanes, version_, converter)
}

LibOrgBouncycastleCryptoParamsArgon2Parameters *create_LibOrgBouncycastleCryptoParamsArgon2Parameters_initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_(jint type, IOSByteArray *salt, IOSByteArray *secret, IOSByteArray *additional, jint iterations, jint memory, jint lanes, jint version_, id<LibOrgBouncycastleCryptoCharToByteConverter> converter) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsArgon2Parameters, initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_, type, salt, secret, additional, iterations, memory, lanes, version_, converter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsArgon2Parameters)

@implementation LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)type {
  LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_initWithInt_(self, type);
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withParallelismWithInt:(jint)parallelism {
  self->lanes_ = parallelism;
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withSaltWithByteArray:(IOSByteArray *)salt {
  self->salt_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(salt);
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withSecretWithByteArray:(IOSByteArray *)secret {
  self->secret_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(secret);
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withAdditionalWithByteArray:(IOSByteArray *)additional {
  self->additional_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(additional);
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withIterationsWithInt:(jint)iterations {
  self->iterations_ = iterations;
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withMemoryAsKBWithInt:(jint)memory {
  self->memory_ = memory;
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withMemoryPowOfTwoWithInt:(jint)memory {
  self->memory_ = JreLShift32(1, memory);
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withVersionWithInt:(jint)version_ {
  self->version__ = version_;
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *)withCharToByteConverterWithLibOrgBouncycastleCryptoCharToByteConverter:(id<LibOrgBouncycastleCryptoCharToByteConverter>)converter {
  self->converter_ = converter;
  return self;
}

- (LibOrgBouncycastleCryptoParamsArgon2Parameters *)build {
  return new_LibOrgBouncycastleCryptoParamsArgon2Parameters_initWithInt_withByteArray_withByteArray_withByteArray_withInt_withInt_withInt_withInt_withLibOrgBouncycastleCryptoCharToByteConverter_(type_, salt_, secret_, additional_, iterations_, memory_, lanes_, version__, converter_);
}

- (void)clear {
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(salt_);
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(secret_);
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(additional_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 9, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsArgon2Parameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(withParallelismWithInt:);
  methods[3].selector = @selector(withSaltWithByteArray:);
  methods[4].selector = @selector(withSecretWithByteArray:);
  methods[5].selector = @selector(withAdditionalWithByteArray:);
  methods[6].selector = @selector(withIterationsWithInt:);
  methods[7].selector = @selector(withMemoryAsKBWithInt:);
  methods[8].selector = @selector(withMemoryPowOfTwoWithInt:);
  methods[9].selector = @selector(withVersionWithInt:);
  methods[10].selector = @selector(withCharToByteConverterWithLibOrgBouncycastleCryptoCharToByteConverter:);
  methods[11].selector = @selector(build);
  methods[12].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "salt_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "secret_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "additional_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iterations_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "memory_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lanes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x2, 12, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "converter_", "LLibOrgBouncycastleCryptoCharToByteConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "withParallelism", "withSalt", "[B", "withSecret", "withAdditional", "withIterations", "withMemoryAsKB", "withMemoryPowOfTwo", "withVersion", "withCharToByteConverter", "LLibOrgBouncycastleCryptoCharToByteConverter;", "version", "LLibOrgBouncycastleCryptoParamsArgon2Parameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder = { "Builder", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x9, 13, 9, 13, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder;
}

@end

void LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_init(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *self) {
  LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_initWithInt_(self, LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_TYPE);
}

LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *new_LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder, init)
}

LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *create_LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder, init)
}

void LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_initWithInt_(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *self, jint type) {
  NSObject_init(self);
  self->converter_ = JreLoadEnum(LibOrgBouncycastleCryptoPasswordConverter, UTF8);
  self->type_ = type;
  self->lanes_ = LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_LANES;
  self->memory_ = JreLShift32(1, LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_MEMORY_COST);
  self->iterations_ = LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_ITERATIONS;
  self->version__ = LibOrgBouncycastleCryptoParamsArgon2Parameters_DEFAULT_VERSION;
}

LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *new_LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_initWithInt_(jint type) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder, initWithInt_, type)
}

LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder *create_LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder_initWithInt_(jint type) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder, initWithInt_, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsArgon2Parameters_Builder)
