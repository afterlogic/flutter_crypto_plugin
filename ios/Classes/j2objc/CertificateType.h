//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CertificateType.java
//

#ifndef CertificateType_H
#define CertificateType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsCertificateType : NSObject
@property (readonly, class) jshort X509 NS_SWIFT_NAME(X509);
@property (readonly, class) jshort OpenPGP NS_SWIFT_NAME(OpenPGP);
@property (readonly, class) jshort RawPublicKey NS_SWIFT_NAME(RawPublicKey);

+ (jshort)X509;

+ (jshort)OpenPGP;

+ (jshort)RawPublicKey;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsCertificateType)

inline jshort LibOrgBouncycastleCryptoTlsCertificateType_get_X509(void);
#define LibOrgBouncycastleCryptoTlsCertificateType_X509 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsCertificateType, X509, jshort)

inline jshort LibOrgBouncycastleCryptoTlsCertificateType_get_OpenPGP(void);
#define LibOrgBouncycastleCryptoTlsCertificateType_OpenPGP 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsCertificateType, OpenPGP, jshort)

inline jshort LibOrgBouncycastleCryptoTlsCertificateType_get_RawPublicKey(void);
#define LibOrgBouncycastleCryptoTlsCertificateType_RawPublicKey 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsCertificateType, RawPublicKey, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCertificateType_init(LibOrgBouncycastleCryptoTlsCertificateType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateType *new_LibOrgBouncycastleCryptoTlsCertificateType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateType *create_LibOrgBouncycastleCryptoTlsCertificateType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCertificateType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificateType_H
