//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/SICBlockCipher.java
//

#include "Arrays.h"
#include "BlockCipher.h"
#include "CipherParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pack.h"
#include "ParametersWithIV.h"
#include "SICBlockCipher.h"
#include "StreamBlockCipher.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoModesSICBlockCipher () {
 @public
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_SICBlockCipher_;
  jint blockSize_;
  IOSByteArray *IV_;
  IOSByteArray *counter_;
  IOSByteArray *counterOut_;
  jint byteCount_;
}

- (void)checkCounter;

- (void)incrementCounterAtWithInt:(jint)pos;

- (void)incrementCounterWithInt:(jint)offSet;

- (void)decrementCounterAtWithInt:(jint)pos;

- (void)adjustCounterWithLong:(jlong)n;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesSICBlockCipher, cipher_SICBlockCipher_, id<LibOrgBouncycastleCryptoBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesSICBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesSICBlockCipher, counter_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesSICBlockCipher, counterOut_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesSICBlockCipher_checkCounter(LibOrgBouncycastleCryptoModesSICBlockCipher *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterAtWithInt_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, jint pos);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterWithInt_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, jint offSet);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesSICBlockCipher_decrementCounterAtWithInt_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, jint pos);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesSICBlockCipher_adjustCounterWithLong_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, jlong n);

@implementation LibOrgBouncycastleCryptoModesSICBlockCipher

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)c {
  LibOrgBouncycastleCryptoModesSICBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, c);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithIV *ivParam = (LibOrgBouncycastleCryptoParamsParametersWithIV *) params;
    self->IV_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_([((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV]);
    if (blockSize_ < ((IOSByteArray *) nil_chk(IV_))->size_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"CTR/SIC mode requires IV no greater than: ", blockSize_, @" bytes."));
    }
    jint maxCounterSize = (8 > blockSize_ / 2) ? blockSize_ / 2 : 8;
    if (blockSize_ - IV_->size_ > maxCounterSize) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"CTR/SIC mode requires IV of at least: ", (blockSize_ - maxCounterSize), @" bytes."));
    }
    if ([ivParam getParameters] != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_SICBlockCipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:[ivParam getParameters]];
    }
    [self reset];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"CTR/SIC mode requires ParametersWithIV");
  }
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_SICBlockCipher_)) getAlgorithmName], @"/SIC");
}

- (jint)getBlockSize {
  return [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_SICBlockCipher_)) getBlockSize];
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:blockSize_ withByteArray:outArg withInt:outOff];
  return blockSize_;
}

- (jbyte)calculateByteWithByte:(jbyte)inArg {
  if (byteCount_ == 0) {
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_SICBlockCipher_)) processBlockWithByteArray:counter_ withInt:0 withByteArray:counterOut_ withInt:0];
    return (jbyte) (IOSByteArray_Get(nil_chk(counterOut_), byteCount_++) ^ inArg);
  }
  jbyte rv = (jbyte) (IOSByteArray_Get(nil_chk(counterOut_), byteCount_++) ^ inArg);
  if (byteCount_ == ((IOSByteArray *) nil_chk(counter_))->size_) {
    byteCount_ = 0;
    LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterAtWithInt_(self, 0);
    LibOrgBouncycastleCryptoModesSICBlockCipher_checkCounter(self);
  }
  return rv;
}

- (void)checkCounter {
  LibOrgBouncycastleCryptoModesSICBlockCipher_checkCounter(self);
}

- (void)incrementCounterAtWithInt:(jint)pos {
  LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterAtWithInt_(self, pos);
}

- (void)incrementCounterWithInt:(jint)offSet {
  LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterWithInt_(self, offSet);
}

- (void)decrementCounterAtWithInt:(jint)pos {
  LibOrgBouncycastleCryptoModesSICBlockCipher_decrementCounterAtWithInt_(self, pos);
}

- (void)adjustCounterWithLong:(jlong)n {
  LibOrgBouncycastleCryptoModesSICBlockCipher_adjustCounterWithLong_(self, n);
}

- (void)reset {
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(counter_, (jbyte) 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, counter_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_SICBlockCipher_)) reset];
  self->byteCount_ = 0;
}

- (jlong)skipWithLong:(jlong)numberOfBytes {
  LibOrgBouncycastleCryptoModesSICBlockCipher_adjustCounterWithLong_(self, numberOfBytes);
  LibOrgBouncycastleCryptoModesSICBlockCipher_checkCounter(self);
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_SICBlockCipher_)) processBlockWithByteArray:counter_ withInt:0 withByteArray:counterOut_ withInt:0];
  return numberOfBytes;
}

- (jlong)seekToWithLong:(jlong)position {
  [self reset];
  return [self skipWithLong:position];
}

- (jlong)getPosition {
  IOSByteArray *res = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(counter_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(counter_, 0, res, 0, res->size_);
  for (jint i = res->size_ - 1; i >= 1; i--) {
    jint v;
    if (i < ((IOSByteArray *) nil_chk(IV_))->size_) {
      v = (IOSByteArray_Get(res, i) & (jint) 0xff) - (IOSByteArray_Get(IV_, i) & (jint) 0xff);
    }
    else {
      v = (IOSByteArray_Get(res, i) & (jint) 0xff);
    }
    if (v < 0) {
      (*IOSByteArray_GetRef(res, i - 1))--;
      v += 256;
    }
    *IOSByteArray_GetRef(res, i) = (jbyte) v;
  }
  return LibOrgBouncycastleUtilPack_bigEndianToLongWithByteArray_withInt_(res, res->size_ - 8) * blockSize_ + byteCount_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x4, 7, 8, 6, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(calculateByteWithByte:);
  methods[6].selector = @selector(checkCounter);
  methods[7].selector = @selector(incrementCounterAtWithInt:);
  methods[8].selector = @selector(incrementCounterWithInt:);
  methods[9].selector = @selector(decrementCounterAtWithInt:);
  methods[10].selector = @selector(adjustCounterWithLong:);
  methods[11].selector = @selector(reset);
  methods[12].selector = @selector(skipWithLong:);
  methods[13].selector = @selector(seekToWithLong:);
  methods[14].selector = @selector(getPosition);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipher_SICBlockCipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x12, 17, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counter_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counterOut_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "byteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "calculateByte", "B", "incrementCounterAt", "I", "incrementCounter", "decrementCounterAt", "adjustCounter", "J", "skip", "seekTo", "cipher" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesSICBlockCipher = { "SICBlockCipher", "lib.org.bouncycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 15, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesSICBlockCipher;
}

@end

void LibOrgBouncycastleCryptoModesSICBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> c) {
  LibOrgBouncycastleCryptoStreamBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, c);
  self->cipher_SICBlockCipher_ = c;
  self->blockSize_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_SICBlockCipher_)) getBlockSize];
  self->IV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->counter_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->counterOut_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->byteCount_ = 0;
}

LibOrgBouncycastleCryptoModesSICBlockCipher *new_LibOrgBouncycastleCryptoModesSICBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> c) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesSICBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, c)
}

LibOrgBouncycastleCryptoModesSICBlockCipher *create_LibOrgBouncycastleCryptoModesSICBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> c) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesSICBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, c)
}

void LibOrgBouncycastleCryptoModesSICBlockCipher_checkCounter(LibOrgBouncycastleCryptoModesSICBlockCipher *self) {
  if (((IOSByteArray *) nil_chk(self->IV_))->size_ < self->blockSize_) {
    for (jint i = 0; i != self->IV_->size_; i++) {
      if (IOSByteArray_Get(nil_chk(self->counter_), i) != IOSByteArray_Get(self->IV_, i)) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"Counter in CTR/SIC mode out of range.");
      }
    }
  }
}

void LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterAtWithInt_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, jint pos) {
  jint i = ((IOSByteArray *) nil_chk(self->counter_))->size_ - pos;
  while (--i >= 0) {
    if (++(*IOSByteArray_GetRef(self->counter_, i)) != 0) {
      break;
    }
  }
}

void LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterWithInt_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, jint offSet) {
  jbyte old = IOSByteArray_Get(self->counter_, ((IOSByteArray *) nil_chk(self->counter_))->size_ - 1);
  *IOSByteArray_GetRef(self->counter_, self->counter_->size_ - 1) += offSet;
  if (old != 0 && IOSByteArray_Get(self->counter_, self->counter_->size_ - 1) < old) {
    LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterAtWithInt_(self, 1);
  }
}

void LibOrgBouncycastleCryptoModesSICBlockCipher_decrementCounterAtWithInt_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, jint pos) {
  jint i = ((IOSByteArray *) nil_chk(self->counter_))->size_ - pos;
  while (--i >= 0) {
    if (--(*IOSByteArray_GetRef(self->counter_, i)) != -1) {
      return;
    }
  }
}

void LibOrgBouncycastleCryptoModesSICBlockCipher_adjustCounterWithLong_(LibOrgBouncycastleCryptoModesSICBlockCipher *self, jlong n) {
  if (n >= 0) {
    jlong numBlocks = (n + self->byteCount_) / self->blockSize_;
    jlong rem = numBlocks;
    if (rem > 255) {
      for (jint i = 5; i >= 1; i--) {
        jlong diff = JreLShift64(1LL, (8 * i));
        while (rem >= diff) {
          LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterAtWithInt_(self, i);
          rem -= diff;
        }
      }
    }
    LibOrgBouncycastleCryptoModesSICBlockCipher_incrementCounterWithInt_(self, (jint) rem);
    self->byteCount_ = (jint) ((n + self->byteCount_) - (self->blockSize_ * numBlocks));
  }
  else {
    jlong numBlocks = (-n - self->byteCount_) / self->blockSize_;
    jlong rem = numBlocks;
    if (rem > 255) {
      for (jint i = 5; i >= 1; i--) {
        jlong diff = JreLShift64(1LL, (8 * i));
        while (rem > diff) {
          LibOrgBouncycastleCryptoModesSICBlockCipher_decrementCounterAtWithInt_(self, i);
          rem -= diff;
        }
      }
    }
    for (jlong i = 0; i != rem; i++) {
      LibOrgBouncycastleCryptoModesSICBlockCipher_decrementCounterAtWithInt_(self, 0);
    }
    jint gap = (jint) (self->byteCount_ + n + (self->blockSize_ * numBlocks));
    if (gap >= 0) {
      self->byteCount_ = 0;
    }
    else {
      LibOrgBouncycastleCryptoModesSICBlockCipher_decrementCounterAtWithInt_(self, 0);
      self->byteCount_ = self->blockSize_ + gap;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesSICBlockCipher)
