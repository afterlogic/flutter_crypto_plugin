//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/PolynomialProvablySecure.java
//

#ifndef PolynomialProvablySecure_H
#define PolynomialProvablySecure_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSLongArray;

@interface LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure : NSObject
@property (readonly, class) IOSLongArray *ZETA_I_P NS_SWIFT_NAME(ZETA_I_P);
@property (readonly, class) IOSLongArray *ZETA_INVERSE_I_P NS_SWIFT_NAME(ZETA_INVERSE_I_P);
@property (readonly, class) IOSLongArray *ZETA_III_P NS_SWIFT_NAME(ZETA_III_P);
@property (readonly, class) IOSLongArray *ZETA_INVERSE_III_P NS_SWIFT_NAME(ZETA_INVERSE_III_P);

+ (IOSLongArray *)ZETA_I_P;

+ (IOSLongArray *)ZETA_INVERSE_I_P;

+ (IOSLongArray *)ZETA_III_P;

+ (IOSLongArray *)ZETA_INVERSE_III_P;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure)

inline IOSLongArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_get_ZETA_I_P(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_ZETA_I_P;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_I_P, IOSLongArray *)

inline IOSLongArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_get_ZETA_INVERSE_I_P(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_ZETA_INVERSE_I_P;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_INVERSE_I_P, IOSLongArray *)

inline IOSLongArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_get_ZETA_III_P(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_ZETA_III_P;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_III_P, IOSLongArray *)

inline IOSLongArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_get_ZETA_INVERSE_III_P(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_ZETA_INVERSE_III_P;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_INVERSE_III_P, IOSLongArray *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_init(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure *new_LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure *create_LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PolynomialProvablySecure_H
