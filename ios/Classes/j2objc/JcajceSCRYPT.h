//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/JcajceSCRYPT.java
//

#ifndef JcajceSCRYPT_H
#define JcajceSCRYPT_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AlgorithmProvider.h"
#include "BaseSecretKeyFactory.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@protocol JavaSecuritySpecKeySpec;
@protocol JavaxCryptoSecretKey;
@protocol LibOrgBouncycastleJcajceProviderConfigConfigurableProvider;

@interface LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT)

@interface LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 : LibOrgBouncycastleJcajceProviderSymmetricUtilBaseSecretKeyFactory

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)scheme;

#pragma mark Protected

- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2_initWithNSString_withInt_(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 *self, NSString *name, jint scheme);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2_initWithNSString_withInt_(NSString *name, jint scheme) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2 *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2_initWithNSString_withInt_(NSString *name, jint scheme);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2)

@interface LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8 : LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_BasePBKDF2

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                                   withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8 *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8 *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8 *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_ScryptWithUTF8)

@interface LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings : LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider

#pragma mark Public

- (instancetype __nonnull)init;

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricJcajceSCRYPT_Mappings)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // JcajceSCRYPT_H
