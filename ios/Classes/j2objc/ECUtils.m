//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ec/ECUtils.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricKeyParameter.h"
#include "BCECPublicKey.h"
#include "DERNull.h"
#include "EC5Util.h"
#include "ECCurve.h"
#include "ECNamedCurveSpec.h"
#include "ECPoint.h"
#include "ECPublicKeyParameters.h"
#include "ECUtils.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceUtilECUtil.h"
#include "X962Parameters.h"
#include "X9ECParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/PublicKey.h"
#include "java/security/spec/ECGenParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/EllipticCurve.h"

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

+ (LibOrgBouncycastleAsn1X9X9ECParameters *)getDomainParametersFromGenSpecWithJavaSecuritySpecECGenParameterSpec:(JavaSecuritySpecECGenParameterSpec *)genSpec {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromGenSpecWithJavaSecuritySpecECGenParameterSpec_(genSpec);
}

+ (LibOrgBouncycastleAsn1X9X9ECParameters *)getDomainParametersFromNameWithNSString:(NSString *)curveName {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_(curveName);
}

+ (LibOrgBouncycastleAsn1X9X962Parameters *)getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)ecSpec
                                                                                               withBoolean:(jboolean)withCompression {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec, withCompression);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X9X9ECParameters;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X9X9ECParameters;", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X9X962Parameters;", 0x8, 5, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(getDomainParametersFromGenSpecWithJavaSecuritySpecECGenParameterSpec:);
  methods[3].selector = @selector(getDomainParametersFromNameWithNSString:);
  methods[4].selector = @selector(getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "getDomainParametersFromGenSpec", "LJavaSecuritySpecECGenParameterSpec;", "getDomainParametersFromName", "LNSString;", "LJavaSecuritySpecECParameterSpec;Z" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils = { "ECUtils", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x0, 5, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_init(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils *new_LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils *create_LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils, init)
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  return ([key isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey class]]) ? [((LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) nil_chk(((LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) cast_chk(key, [LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey class])))) engineGetKeyParameters] : LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

LibOrgBouncycastleAsn1X9X9ECParameters *LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromGenSpecWithJavaSecuritySpecECGenParameterSpec_(JavaSecuritySpecECGenParameterSpec *genSpec) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  return LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_([((JavaSecuritySpecECGenParameterSpec *) nil_chk(genSpec)) getName]);
}

LibOrgBouncycastleAsn1X9X9ECParameters *LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_(NSString *curveName) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  LibOrgBouncycastleAsn1X9X9ECParameters *domainParameters;
  @try {
    if ([((NSString *) nil_chk(curveName)) charAtWithInt:0] >= '0' && [curveName charAtWithInt:0] <= '2') {
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oidID = new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(curveName);
      domainParameters = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oidID);
    }
    else {
      if ([curveName java_indexOf:' '] > 0) {
        curveName = [curveName java_substring:[curveName java_indexOf:' '] + 1];
        domainParameters = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByNameWithNSString_(curveName);
      }
      else {
        domainParameters = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByNameWithNSString_(curveName);
      }
    }
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    domainParameters = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByNameWithNSString_(curveName);
  }
  return domainParameters;
}

LibOrgBouncycastleAsn1X9X962Parameters *LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec_withBoolean_(JavaSecuritySpecECParameterSpec *ecSpec, jboolean withCompression) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  LibOrgBouncycastleAsn1X9X962Parameters *params;
  if ([ecSpec isKindOfClass:[LibOrgBouncycastleJceSpecECNamedCurveSpec class]]) {
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithNSString_([((LibOrgBouncycastleJceSpecECNamedCurveSpec *) nil_chk(((LibOrgBouncycastleJceSpecECNamedCurveSpec *) ecSpec))) getName]);
    if (curveOid == nil) {
      curveOid = new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_([((LibOrgBouncycastleJceSpecECNamedCurveSpec *) nil_chk(((LibOrgBouncycastleJceSpecECNamedCurveSpec *) ecSpec))) getName]);
    }
    params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOid);
  }
  else if (ecSpec == nil) {
    params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1ASN1Null_(JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
  }
  else {
    LibOrgBouncycastleMathEcECCurve *curve = LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([ecSpec getCurve]);
    LibOrgBouncycastleAsn1X9X9ECParameters *ecP = new_LibOrgBouncycastleAsn1X9X9ECParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curve, LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECCurve_withJavaSecuritySpecECPoint_withBoolean_(curve, [ecSpec getGenerator], withCompression), [ecSpec getOrder], JavaMathBigInteger_valueOfWithLong_([ecSpec getCofactor]), [((JavaSecuritySpecEllipticCurve *) nil_chk([ecSpec getCurve])) getSeed]);
    params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1X9X9ECParameters_(ecP);
  }
  return params;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils)
