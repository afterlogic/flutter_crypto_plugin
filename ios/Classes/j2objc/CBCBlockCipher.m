//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/CBCBlockCipher.java
//

#include "Arrays.h"
#include "BlockCipher.h"
#include "CBCBlockCipher.h"
#include "CipherParameters.h"
#include "DataLengthException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithIV.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoModesCBCBlockCipher () {
 @public
  IOSByteArray *IV_;
  IOSByteArray *cbcV_;
  IOSByteArray *cbcNextV_;
  jint blockSize_;
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_;
  jboolean encrypting_;
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesCBCBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesCBCBlockCipher, cbcV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesCBCBlockCipher, cbcNextV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesCBCBlockCipher, cipher_, id<LibOrgBouncycastleCryptoBlockCipher>)

__attribute__((unused)) static jint LibOrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

@implementation LibOrgBouncycastleCryptoModesCBCBlockCipher

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (id<LibOrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher {
  return cipher_;
}

- (void)init__WithBoolean:(jboolean)encrypting
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  jboolean oldEncrypting = self->encrypting_;
  self->encrypting_ = encrypting;
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithIV *ivParam = (LibOrgBouncycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    if (((IOSByteArray *) nil_chk(iv))->size_ != blockSize_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"initialisation vector must be the same length as block size");
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, 0, iv->size_);
    [self reset];
    if ([ivParam getParameters] != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:encrypting withLibOrgBouncycastleCryptoCipherParameters:[ivParam getParameters]];
    }
    else if (oldEncrypting != encrypting) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot change encrypting state without providing key.");
    }
  }
  else {
    [self reset];
    if (params != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:encrypting withLibOrgBouncycastleCryptoCipherParameters:params];
    }
    else if (oldEncrypting != encrypting) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot change encrypting state without providing key.");
    }
  }
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getAlgorithmName], @"/CBC");
}

- (jint)getBlockSize {
  return [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return (encrypting_) ? LibOrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : LibOrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)reset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, cbcV_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(cbcNextV_, (jbyte) 0);
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return LibOrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return LibOrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 5, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(getUnderlyingCipher);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cbcV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cbcNextV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encrypting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "encryptBlock", "decryptBlock" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesCBCBlockCipher = { "CBCBlockCipher", "lib.org.bouncycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesCBCBlockCipher;
}

@end

void LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesCBCBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  NSObject_init(self);
  self->cipher_ = nil;
  self->cipher_ = cipher;
  self->blockSize_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  self->IV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cbcV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cbcNextV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
}

LibOrgBouncycastleCryptoModesCBCBlockCipher *new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesCBCBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoModesCBCBlockCipher *create_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesCBCBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

jint LibOrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  if ((inOff + self->blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  for (jint i = 0; i < self->blockSize_; i++) {
    *IOSByteArray_GetRef(nil_chk(self->cbcV_), i) ^= IOSByteArray_Get(inArg, inOff + i);
  }
  jint length = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->cbcV_ withInt:0 withByteArray:outArg withInt:outOff];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outArg, outOff, self->cbcV_, 0, ((IOSByteArray *) nil_chk(self->cbcV_))->size_);
  return length;
}

jint LibOrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  if ((inOff + self->blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, self->cbcNextV_, 0, self->blockSize_);
  jint length = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff];
  for (jint i = 0; i < self->blockSize_; i++) {
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + i) ^= IOSByteArray_Get(nil_chk(self->cbcV_), i);
  }
  IOSByteArray *tmp;
  tmp = self->cbcV_;
  self->cbcV_ = self->cbcNextV_;
  self->cbcNextV_ = tmp;
  return length;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesCBCBlockCipher)
