//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/Twofish.java
//

#include "BaseBlockCipher.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "BlockCipher.h"
#include "BlockCipherProvider.h"
#include "CBCBlockCipher.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "GCMBlockCipher.h"
#include "GMac.h"
#include "IOSClass.h"
#include "IvAlgorithmParameters.h"
#include "J2ObjC_source.h"
#include "PBE.h"
#include "PBESecretKeyFactory.h"
#include "Poly1305.h"
#include "Poly1305KeyGenerator.h"
#include "SymmetricAlgorithmProvider.h"
#include "Twofish.h"
#include "TwofishEngine.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricTwofish ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricTwofish_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricTwofish *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricTwofish *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_init(void);

@interface LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1 : NSObject < LibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider >

- (instancetype)init;

- (id<LibOrgBouncycastleCryptoBlockCipher>)get;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1 *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1 *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB;LLibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC;LLibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305;LLibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory;LLibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA;LLibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams;LLibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish = { "Twofish", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB = { "ECB", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleJcajceProviderSymmetricUtilBlockCipherProvider_(self, new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1_init());
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<LibOrgBouncycastleCryptoBlockCipher>)get {
  return new_LibOrgBouncycastleCryptoEnginesTwofishEngine_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB;", "init" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1 = { "", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 0, -1, 1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1 *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1 *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_ECB_1, init)
}

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"Twofish", 256, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC = { "GMAC", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsGMac_initWithLibOrgBouncycastleCryptoModesGCMBlockCipher_(new_LibOrgBouncycastleCryptoModesGCMBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesTwofishEngine_init())));
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_GMAC)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305 = { "Poly1305", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsPoly1305_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesTwofishEngine_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305 *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305 *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen = { "Poly1305KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"Poly1305-Twofish", 256, new_LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Poly1305KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory = { "PBEWithSHAKeyFactory", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(self, @"PBEwithSHAandTwofish-CBC", nil, true, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_PKCS12, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_SHA1, 256, 128);
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHAKeyFactory)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA = { "PBEWithSHA", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesTwofishEngine_init()), LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_PKCS12, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_SHA1, 256, 16);
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_PBEWithSHA)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)engineToString {
  return @"Twofish IV";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams = { "AlgParams", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilIvAlgorithmParameters_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_AlgParams)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"Cipher.Twofish" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$ECB")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.Twofish" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.Twofish" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$AlgParams")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDTWOFISH" withNSString:@"PKCS12PBE"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDTWOFISH-CBC" withNSString:@"PKCS12PBE"];
  [provider addAlgorithmWithNSString:@"Cipher.PBEWITHSHAANDTWOFISH-CBC" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$PBEWithSHA")];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.PBEWITHSHAANDTWOFISH-CBC" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$PBEWithSHAKeyFactory")];
  [self addGMacAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"Twofish" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$GMAC") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$KeyGen")];
  [self addPoly1305AlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"Twofish" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$Poly1305") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, @"$Poly1305KeyGen")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricTwofish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricTwofish_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings *self) {
  LibOrgBouncycastleJcajceProviderSymmetricSymmetricAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricTwofish_Mappings)
