//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/ECKeyPairGenerator.java
//

#ifndef ECKeyPairGenerator_H
#define ECKeyPairGenerator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricCipherKeyPairGenerator.h"
#include "ECConstants.h"
#include "J2ObjC_header.h"

@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;
@class LibOrgBouncycastleCryptoKeyGenerationParameters;
@class LibOrgBouncycastleCryptoParamsECDomainParameters;
@protocol LibOrgBouncycastleMathEcECMultiplier;

@interface LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator : NSObject < LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator, LibOrgBouncycastleMathEcECConstants > {
 @public
  LibOrgBouncycastleCryptoParamsECDomainParameters *params_;
  JavaSecuritySecureRandom *random_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair;

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

- (id<LibOrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator, params_, LibOrgBouncycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator, random_, JavaSecuritySecureRandom *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator *new_LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator *create_LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ECKeyPairGenerator_H
