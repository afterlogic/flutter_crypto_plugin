//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/HashUtils.java
//

#ifndef HashUtils_H
#define HashUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;

@interface LibOrgBouncycastlePqcCryptoQteslaHashUtils : NSObject
@property (readonly, class) jint SECURE_HASH_ALGORITHM_KECCAK_128_RATE NS_SWIFT_NAME(SECURE_HASH_ALGORITHM_KECCAK_128_RATE);
@property (readonly, class) jint SECURE_HASH_ALGORITHM_KECCAK_256_RATE NS_SWIFT_NAME(SECURE_HASH_ALGORITHM_KECCAK_256_RATE);

+ (jint)SECURE_HASH_ALGORITHM_KECCAK_128_RATE;

+ (jint)SECURE_HASH_ALGORITHM_KECCAK_256_RATE;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (void)customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray:(IOSByteArray *)output
                                                            withInt:(jint)outputOffset
                                                            withInt:(jint)outputLength
                                                          withShort:(jshort)continuousTimeStochasticModelling
                                                      withByteArray:(IOSByteArray *)input
                                                            withInt:(jint)inputOffset
                                                            withInt:(jint)inputLength;

+ (void)customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray:(IOSByteArray *)output
                                                            withInt:(jint)outputOffset
                                                            withInt:(jint)outputLength
                                                          withShort:(jshort)continuousTimeStochasticModelling
                                                      withByteArray:(IOSByteArray *)input
                                                            withInt:(jint)inputOffset
                                                            withInt:(jint)inputLength;

+ (void)secureHashAlgorithmKECCAK128WithByteArray:(IOSByteArray *)output
                                          withInt:(jint)outputOffset
                                          withInt:(jint)outputLength
                                    withByteArray:(IOSByteArray *)input
                                          withInt:(jint)inputOffset
                                          withInt:(jint)inputLength;

+ (void)secureHashAlgorithmKECCAK256WithByteArray:(IOSByteArray *)output
                                          withInt:(jint)outputOffset
                                          withInt:(jint)outputLength
                                    withByteArray:(IOSByteArray *)input
                                          withInt:(jint)inputOffset
                                          withInt:(jint)inputLength;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoQteslaHashUtils)

inline jint LibOrgBouncycastlePqcCryptoQteslaHashUtils_get_SECURE_HASH_ALGORITHM_KECCAK_128_RATE(void);
#define LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE 168
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoQteslaHashUtils, SECURE_HASH_ALGORITHM_KECCAK_128_RATE, jint)

inline jint LibOrgBouncycastlePqcCryptoQteslaHashUtils_get_SECURE_HASH_ALGORITHM_KECCAK_256_RATE(void);
#define LibOrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_256_RATE 136
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoQteslaHashUtils, SECURE_HASH_ALGORITHM_KECCAK_256_RATE, jint)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaHashUtils_init(LibOrgBouncycastlePqcCryptoQteslaHashUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoQteslaHashUtils *new_LibOrgBouncycastlePqcCryptoQteslaHashUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoQteslaHashUtils *create_LibOrgBouncycastlePqcCryptoQteslaHashUtils_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, IOSByteArray *input, jint inputOffset, jint inputLength);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, IOSByteArray *input, jint inputOffset, jint inputLength);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, jshort continuousTimeStochasticModelling, IOSByteArray *input, jint inputOffset, jint inputLength);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, jshort continuousTimeStochasticModelling, IOSByteArray *input, jint inputOffset, jint inputLength);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoQteslaHashUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // HashUtils_H
