//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/CryptoProWrapEngine.java
//

#include "CipherParameters.h"
#include "CryptoProWrapEngine.h"
#include "GCFBBlockCipher.h"
#include "GOST28147Engine.h"
#include "GOST28147WrapEngine.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "Pack.h"
#include "ParametersWithIV.h"
#include "ParametersWithRandom.h"
#include "ParametersWithSBox.h"
#include "ParametersWithUKM.h"

@interface LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine ()

+ (IOSByteArray *)cryptoProDiversifyWithByteArray:(IOSByteArray *)K
                                    withByteArray:(IOSByteArray *)ukm
                                    withByteArray:(IOSByteArray *)sBox;

+ (jboolean)bitSetWithByte:(jbyte)v
                   withInt:(jint)bitNo;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_cryptoProDiversifyWithByteArray_withByteArray_withByteArray_(IOSByteArray *K, IOSByteArray *ukm, IOSByteArray *sBox);

__attribute__((unused)) static jboolean LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_bitSetWithByte_withInt_(jbyte v, jint bitNo);

@implementation LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forWrapping
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *pr = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
    param = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(pr)) getParameters];
  }
  LibOrgBouncycastleCryptoParamsParametersWithUKM *pU = (LibOrgBouncycastleCryptoParamsParametersWithUKM *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithUKM class]);
  IOSByteArray *sBox = nil;
  LibOrgBouncycastleCryptoParamsKeyParameter *kParam;
  if ([[((LibOrgBouncycastleCryptoParamsParametersWithUKM *) nil_chk(pU)) getParameters] isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithSBox class]]) {
    kParam = (LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithSBox *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithSBox *) cast_chk([pU getParameters], [LibOrgBouncycastleCryptoParamsParametersWithSBox class])))) getParameters], [LibOrgBouncycastleCryptoParamsKeyParameter class]);
    sBox = [((LibOrgBouncycastleCryptoParamsParametersWithSBox *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithSBox *) cast_chk([pU getParameters], [LibOrgBouncycastleCryptoParamsParametersWithSBox class])))) getSBox];
  }
  else {
    kParam = (LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([pU getParameters], [LibOrgBouncycastleCryptoParamsKeyParameter class]);
  }
  kParam = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_cryptoProDiversifyWithByteArray_withByteArray_withByteArray_([((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(kParam)) getKey], [pU getUKM], sBox));
  if (sBox != nil) {
    [super init__WithBoolean:forWrapping withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithUKM_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(new_LibOrgBouncycastleCryptoParamsParametersWithSBox_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(kParam, sBox), [pU getUKM])];
  }
  else {
    [super init__WithBoolean:forWrapping withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithUKM_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(kParam, [pU getUKM])];
  }
}

+ (IOSByteArray *)cryptoProDiversifyWithByteArray:(IOSByteArray *)K
                                    withByteArray:(IOSByteArray *)ukm
                                    withByteArray:(IOSByteArray *)sBox {
  return LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_cryptoProDiversifyWithByteArray_withByteArray_withByteArray_(K, ukm, sBox);
}

+ (jboolean)bitSetWithByte:(jbyte)v
                   withInt:(jint)bitNo {
  return LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_bitSetWithByte_withInt_(v, bitNo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(cryptoProDiversifyWithByteArray:withByteArray:withByteArray:);
  methods[3].selector = @selector(bitSetWithByte:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "cryptoProDiversify", "[B[B[B", "bitSet", "BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine = { "CryptoProWrapEngine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine;
}

@end

void LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_init(LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine *self) {
  LibOrgBouncycastleCryptoEnginesGOST28147WrapEngine_init(self);
}

LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine *new_LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine, init)
}

LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine *create_LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine, init)
}

IOSByteArray *LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_cryptoProDiversifyWithByteArray_withByteArray_withByteArray_(IOSByteArray *K, IOSByteArray *ukm, IOSByteArray *sBox) {
  LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_initialize();
  for (jint i = 0; i != 8; i++) {
    jint sOn = 0;
    jint sOff = 0;
    for (jint j = 0; j != 8; j++) {
      jint kj = LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(K, j * 4);
      if (LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_bitSetWithByte_withInt_(IOSByteArray_Get(nil_chk(ukm), i), j)) {
        sOn += kj;
      }
      else {
        sOff += kj;
      }
    }
    IOSByteArray *s = [IOSByteArray newArrayWithLength:8];
    LibOrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(sOn, s, 0);
    LibOrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(sOff, s, 4);
    LibOrgBouncycastleCryptoModesGCFBBlockCipher *c = new_LibOrgBouncycastleCryptoModesGCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesGOST28147Engine_init());
    [c init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(new_LibOrgBouncycastleCryptoParamsParametersWithSBox_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(K), sBox), s)];
    [c processBlockWithByteArray:K withInt:0 withByteArray:K withInt:0];
    [c processBlockWithByteArray:K withInt:8 withByteArray:K withInt:8];
    [c processBlockWithByteArray:K withInt:16 withByteArray:K withInt:16];
    [c processBlockWithByteArray:K withInt:24 withByteArray:K withInt:24];
  }
  return K;
}

jboolean LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_bitSetWithByte_withInt_(jbyte v, jint bitNo) {
  LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine_initialize();
  return (v & (JreLShift32(1, bitNo))) != 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesCryptoProWrapEngine)
