//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ClientCertificateType.java
//

#ifndef ClientCertificateType_H
#define ClientCertificateType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsClientCertificateType : NSObject
@property (readonly, class) jshort rsa_sign NS_SWIFT_NAME(rsa_sign);
@property (readonly, class) jshort dss_sign NS_SWIFT_NAME(dss_sign);
@property (readonly, class) jshort rsa_fixed_dh NS_SWIFT_NAME(rsa_fixed_dh);
@property (readonly, class) jshort dss_fixed_dh NS_SWIFT_NAME(dss_fixed_dh);
@property (readonly, class) jshort rsa_ephemeral_dh_RESERVED NS_SWIFT_NAME(rsa_ephemeral_dh_RESERVED);
@property (readonly, class) jshort dss_ephemeral_dh_RESERVED NS_SWIFT_NAME(dss_ephemeral_dh_RESERVED);
@property (readonly, class) jshort fortezza_dms_RESERVED NS_SWIFT_NAME(fortezza_dms_RESERVED);
@property (readonly, class) jshort ecdsa_sign NS_SWIFT_NAME(ecdsa_sign);
@property (readonly, class) jshort rsa_fixed_ecdh NS_SWIFT_NAME(rsa_fixed_ecdh);
@property (readonly, class) jshort ecdsa_fixed_ecdh NS_SWIFT_NAME(ecdsa_fixed_ecdh);

+ (jshort)rsa_sign;

+ (jshort)dss_sign;

+ (jshort)rsa_fixed_dh;

+ (jshort)dss_fixed_dh;

+ (jshort)rsa_ephemeral_dh_RESERVED;

+ (jshort)dss_ephemeral_dh_RESERVED;

+ (jshort)fortezza_dms_RESERVED;

+ (jshort)ecdsa_sign;

+ (jshort)rsa_fixed_ecdh;

+ (jshort)ecdsa_fixed_ecdh;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsClientCertificateType)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_rsa_sign(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_sign 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, rsa_sign, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_dss_sign(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_dss_sign 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, dss_sign, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_rsa_fixed_dh(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_fixed_dh 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, rsa_fixed_dh, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_dss_fixed_dh(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_dss_fixed_dh 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, dss_fixed_dh, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_rsa_ephemeral_dh_RESERVED(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_ephemeral_dh_RESERVED 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, rsa_ephemeral_dh_RESERVED, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_dss_ephemeral_dh_RESERVED(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_dss_ephemeral_dh_RESERVED 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, dss_ephemeral_dh_RESERVED, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_fortezza_dms_RESERVED(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_fortezza_dms_RESERVED 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, fortezza_dms_RESERVED, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_ecdsa_sign(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_ecdsa_sign 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, ecdsa_sign, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_rsa_fixed_ecdh(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_rsa_fixed_ecdh 65
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, rsa_fixed_ecdh, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientCertificateType_get_ecdsa_fixed_ecdh(void);
#define LibOrgBouncycastleCryptoTlsClientCertificateType_ecdsa_fixed_ecdh 66
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientCertificateType, ecdsa_fixed_ecdh, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsClientCertificateType_init(LibOrgBouncycastleCryptoTlsClientCertificateType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsClientCertificateType *new_LibOrgBouncycastleCryptoTlsClientCertificateType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsClientCertificateType *create_LibOrgBouncycastleCryptoTlsClientCertificateType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsClientCertificateType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ClientCertificateType_H
