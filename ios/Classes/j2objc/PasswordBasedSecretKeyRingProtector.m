//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/key/protection/PasswordBasedSecretKeyRingProtector.java
//

#include "BcPBESecretKeyDecryptorBuilder.h"
#include "BcPBESecretKeyEncryptorBuilder.h"
#include "BcPGPDigestCalculatorProvider.h"
#include "HashAlgorithmUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyRingProtectionSettings.h"
#include "PBESecretKeyDecryptor.h"
#include "PBESecretKeyEncryptor.h"
#include "PGPDigestCalculator.h"
#include "PGPDigestCalculatorProvider.h"
#include "Passphrase.h"
#include "PasswordBasedSecretKeyRingProtector.h"
#include "SecretKeyPassphraseProvider.h"
#include "SymmetricKeyAlgorithm.h"
#include "java/lang/Long.h"

inline id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider> LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_get_calculatorProvider(void);
static id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider> LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_calculatorProvider;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector, calculatorProvider, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>)

J2OBJC_INITIALIZED_DEFN(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector)

@implementation LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector

- (instancetype)initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings:(LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *)settings
                  withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider:(id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider>)passphraseProvider {
  LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(self, settings, passphraseProvider);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)getDecryptorWithJavaLangLong:(JavaLangLong *)keyId {
  LibComAfterlogicPgpUtilPassphrase *passphrase = [((id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider>) nil_chk(passphraseProvider_)) getPassphraseForWithJavaLangLong:keyId];
  return [new_LibOrgBouncycastleOpenpgpOperatorBcBcPBESecretKeyDecryptorBuilder_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_calculatorProvider) buildWithCharArray:passphrase != nil ? [passphrase getChars] : nil];
}

- (LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)getEncryptorWithJavaLangLong:(JavaLangLong *)keyId {
  LibComAfterlogicPgpUtilPassphrase *passphrase = [((id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider>) nil_chk(passphraseProvider_)) getPassphraseForWithJavaLangLong:keyId];
  return [new_LibOrgBouncycastleOpenpgpOperatorBcBcPBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_([((LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *) nil_chk([((LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *) nil_chk(protectionSettings_)) getEncryptionAlgorithm])) getAlgorithmId], [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>) nil_chk(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_calculatorProvider)) getWithInt:[((LibComAfterlogicPgpAlgorithmHashAlgorithmUtil *) nil_chk([protectionSettings_ getHashAlgorithmUtil])) getAlgorithmId]], [protectionSettings_ getS2kCount]) buildWithCharArray:passphrase != nil ? [passphrase getChars] : nil];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", 0x1, 3, 2, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings:withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider:);
  methods[1].selector = @selector(getDecryptorWithJavaLangLong:);
  methods[2].selector = @selector(getEncryptorWithJavaLangLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "calculatorProvider", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "protectionSettings_", "LLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "passphraseProvider_", "LLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings;LLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider;", "getDecryptor", "LJavaLangLong;", "getEncryptor", "LLibOrgBouncycastleOpenpgpPGPException;", &LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_calculatorProvider };
  static const J2ObjcClassInfo _LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector = { "PasswordBasedSecretKeyRingProtector", "lib.com.afterlogic.pgp.key.protection", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector;
}

+ (void)initialize {
  if (self == [LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector class]) {
    LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_calculatorProvider = new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDigestCalculatorProvider_init();
    J2OBJC_SET_INITIALIZED(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector)
  }
}

@end

void LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector *self, LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *settings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> passphraseProvider) {
  NSObject_init(self);
  self->protectionSettings_ = settings;
  self->passphraseProvider_ = passphraseProvider;
}

LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector *new_LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *settings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> passphraseProvider) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector, initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_, settings, passphraseProvider)
}

LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector *create_LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector_initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_(LibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings *settings, id<LibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider> passphraseProvider) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector, initWithLibComAfterlogicPgpKeyProtectionKeyRingProtectionSettings_withLibComAfterlogicPgpKeyProtectionSecretKeyPassphraseProvider_, settings, passphraseProvider)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpKeyProtectionPasswordBasedSecretKeyRingProtector)
