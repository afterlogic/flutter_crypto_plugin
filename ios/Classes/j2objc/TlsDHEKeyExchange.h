//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsDHEKeyExchange.java
//

#ifndef TlsDHEKeyExchange_H
#define TlsDHEKeyExchange_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsDHKeyExchange.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoParamsDHParameters;
@class LibOrgBouncycastleCryptoTlsSecurityParameters;
@class LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol LibOrgBouncycastleCryptoSigner;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsDHVerifier;
@protocol LibOrgBouncycastleCryptoTlsTlsSigner;
@protocol LibOrgBouncycastleCryptoTlsTlsSignerCredentials;

@interface LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange : LibOrgBouncycastleCryptoTlsTlsDHKeyExchange {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials> serverCredentials_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters;

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier
withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters;

- (IOSByteArray *)generateServerKeyExchange;

- (void)processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoSigner>)initVerifyerWithLibOrgBouncycastleCryptoTlsTlsSigner:(id<LibOrgBouncycastleCryptoTlsTlsSigner>)tlsSigner
                                  withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                         withLibOrgBouncycastleCryptoTlsSecurityParameters:(LibOrgBouncycastleCryptoTlsSecurityParameters *)securityParameters OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange, serverCredentials_, id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsDHEKeyExchange_H
