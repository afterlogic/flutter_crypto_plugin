//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/MD2.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCMessageDigest.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestAlgorithmProvider.h"
#include "HMac.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MD2.h"
#include "MD2Digest.h"
#include "PKCSObjectIdentifiers.h"

@interface LibOrgBouncycastleJcajceProviderDigestMD2 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderDigestMD2_init(LibOrgBouncycastleJcajceProviderDigestMD2 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestMD2 *new_LibOrgBouncycastleJcajceProviderDigestMD2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestMD2 *create_LibOrgBouncycastleJcajceProviderDigestMD2_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderDigestMD2_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderDigestMD2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestMD2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestMD2_Digest;LLibOrgBouncycastleJcajceProviderDigestMD2_HashMac;LLibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator;LLibOrgBouncycastleJcajceProviderDigestMD2_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestMD2 = { "MD2", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestMD2;
}

@end

void LibOrgBouncycastleJcajceProviderDigestMD2_init(LibOrgBouncycastleJcajceProviderDigestMD2 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderDigestMD2 *new_LibOrgBouncycastleJcajceProviderDigestMD2_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2, init)
}

LibOrgBouncycastleJcajceProviderDigestMD2 *create_LibOrgBouncycastleJcajceProviderDigestMD2_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestMD2)

@implementation LibOrgBouncycastleJcajceProviderDigestMD2_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestMD2_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestMD2_Digest *d = (LibOrgBouncycastleJcajceProviderDigestMD2_Digest *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestMD2_Digest class]);
  ((LibOrgBouncycastleJcajceProviderDigestMD2_Digest *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsMD2Digest_initWithLibOrgBouncycastleCryptoDigestsMD2Digest_((LibOrgBouncycastleCryptoDigestsMD2Digest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsMD2Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestMD2;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestMD2_Digest = { "Digest", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestMD2_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestMD2_Digest_init(LibOrgBouncycastleJcajceProviderDigestMD2_Digest *self) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsMD2Digest_init());
}

LibOrgBouncycastleJcajceProviderDigestMD2_Digest *new_LibOrgBouncycastleJcajceProviderDigestMD2_Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2_Digest, init)
}

LibOrgBouncycastleJcajceProviderDigestMD2_Digest *create_LibOrgBouncycastleJcajceProviderDigestMD2_Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestMD2_Digest)

@implementation LibOrgBouncycastleJcajceProviderDigestMD2_HashMac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestMD2_HashMac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestMD2;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestMD2_HashMac = { "HashMac", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestMD2_HashMac;
}

@end

void LibOrgBouncycastleJcajceProviderDigestMD2_HashMac_init(LibOrgBouncycastleJcajceProviderDigestMD2_HashMac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsMD2Digest_init()));
}

LibOrgBouncycastleJcajceProviderDigestMD2_HashMac *new_LibOrgBouncycastleJcajceProviderDigestMD2_HashMac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2_HashMac, init)
}

LibOrgBouncycastleJcajceProviderDigestMD2_HashMac *create_LibOrgBouncycastleJcajceProviderDigestMD2_HashMac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2_HashMac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestMD2_HashMac)

@implementation LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestMD2;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator = { "KeyGenerator", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator;
}

@end

void LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator_init(LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACMD2", 128, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator *new_LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator, init)
}

LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator *create_LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestMD2_KeyGenerator)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderDigestMD2_Mappings)

@implementation LibOrgBouncycastleJcajceProviderDigestMD2_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.MD2" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, md2)) withNSString:@"MD2"];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"MD2" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_PREFIX, @"$HashMac") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_PREFIX, @"$KeyGenerator")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderDigestMD2;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestMD2_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestMD2_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderDigestMD2_Mappings class]) {
    LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderDigestMD2_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderDigestMD2_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_init(LibOrgBouncycastleJcajceProviderDigestMD2_Mappings *self) {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderDigestMD2_Mappings *new_LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2_Mappings, init)
}

LibOrgBouncycastleJcajceProviderDigestMD2_Mappings *create_LibOrgBouncycastleJcajceProviderDigestMD2_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestMD2_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestMD2_Mappings)
