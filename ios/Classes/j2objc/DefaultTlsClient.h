//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsClient.java
//

#ifndef DefaultTlsClient_H
#define DefaultTlsClient_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsClient.h"
#include "J2ObjC_header.h"

@class IOSIntArray;
@protocol LibOrgBouncycastleCryptoTlsTlsCipherFactory;
@protocol LibOrgBouncycastleCryptoTlsTlsDHVerifier;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;

@interface LibOrgBouncycastleCryptoTlsDefaultTlsClient : LibOrgBouncycastleCryptoTlsAbstractTlsClient {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                                 withLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier;

- (IOSIntArray *)getCipherSuites;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createDHEKeyExchangeWithInt:(jint)keyExchange;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createDHKeyExchangeWithInt:(jint)keyExchange;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createECDHEKeyExchangeWithInt:(jint)keyExchange;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createECDHKeyExchangeWithInt:(jint)keyExchange;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createRSAKeyExchange;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDefaultTlsClient)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsClient, dhVerifier_, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsClient_init(LibOrgBouncycastleCryptoTlsDefaultTlsClient *self);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(LibOrgBouncycastleCryptoTlsDefaultTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_(LibOrgBouncycastleCryptoTlsDefaultTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDefaultTlsClient)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DefaultTlsClient_H
