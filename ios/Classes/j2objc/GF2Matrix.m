//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.java
//

#include "Arrays.h"
#include "GF2Matrix.h"
#include "GF2Vector.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntUtils.h"
#include "J2ObjC_source.h"
#include "LittleEndianConversions.h"
#include "Matrix.h"
#include "Permutation.h"
#include "Vector.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix () {
 @public
  IOSObjectArray *matrix_;
  jint length_;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)n;

- (void)assignZeroMatrixWithInt:(jint)m
                        withInt:(jint)n;

- (void)assignUnitMatrixWithInt:(jint)n;

- (void)assignRandomLowerTriangularMatrixWithInt:(jint)n
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

- (void)assignRandomUpperTriangularMatrixWithInt:(jint)n
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

- (void)assignRandomRegularMatrixWithInt:(jint)n
            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

+ (void)swapRowsWithIntArray2:(IOSObjectArray *)matrix
                      withInt:(jint)first
                      withInt:(jint)second;

+ (void)addToRowWithIntArray:(IOSIntArray *)fromRow
                withIntArray:(IOSIntArray *)toRow
                     withInt:(jint)startIndex;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, matrix_, IOSObjectArray *)

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint m, jint n);

__attribute__((unused)) static LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(jint m, jint n) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(jint m, jint n);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignZeroMatrixWithInt_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint m, jint n);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignUnitMatrixWithInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomLowerTriangularMatrixWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, JavaSecuritySecureRandom *sr);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomUpperTriangularMatrixWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, JavaSecuritySecureRandom *sr);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomRegularMatrixWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, JavaSecuritySecureRandom *sr);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_swapRowsWithIntArray2_withInt_withInt_(IOSObjectArray *matrix, jint first, jint second);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_addToRowWithIntArray_withIntArray_withInt_(IOSIntArray *fromRow, IOSIntArray *toRow, jint startIndex);

@implementation LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix

- (instancetype)initWithByteArray:(IOSByteArray *)enc {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithByteArray_(self, enc);
  return self;
}

- (instancetype)initWithInt:(jint)numColumns
              withIntArray2:(IOSObjectArray *)matrix {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(self, numColumns, matrix);
  return self;
}

- (instancetype)initWithInt:(jint)n
                   withChar:(jchar)typeOfMatrix {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(self, n, typeOfMatrix);
  return self;
}

- (instancetype)initWithInt:(jint)n
                   withChar:(jchar)typeOfMatrix
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(self, n, typeOfMatrix, sr);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix:(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *)a {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(self, a);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)n {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(self, m, n);
  return self;
}

- (void)assignZeroMatrixWithInt:(jint)m
                        withInt:(jint)n {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignZeroMatrixWithInt_withInt_(self, m, n);
}

- (void)assignUnitMatrixWithInt:(jint)n {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignUnitMatrixWithInt_(self, n);
}

- (void)assignRandomLowerTriangularMatrixWithInt:(jint)n
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomLowerTriangularMatrixWithInt_withJavaSecuritySecureRandom_(self, n, sr);
}

- (void)assignRandomUpperTriangularMatrixWithInt:(jint)n
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomUpperTriangularMatrixWithInt_withJavaSecuritySecureRandom_(self, n, sr);
}

- (void)assignRandomRegularMatrixWithInt:(jint)n
            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomRegularMatrixWithInt_withJavaSecuritySecureRandom_(self, n, sr);
}

+ (IOSObjectArray *)createRandomRegularMatrixAndItsInverseWithInt:(jint)n
                                     withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  return LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_createRandomRegularMatrixAndItsInverseWithInt_withJavaSecuritySecureRandom_(n, sr);
}

- (IOSObjectArray *)getIntArray {
  return matrix_;
}

- (jint)getLength {
  return length_;
}

- (IOSIntArray *)getRowWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(matrix_), index);
}

- (IOSByteArray *)getEncoded {
  jint n = JreURShift32((numColumns_ + 7), 3);
  n *= numRows_;
  n += 8;
  IOSByteArray *enc = [IOSByteArray newArrayWithLength:n];
  LibOrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_(numRows_, enc, 0);
  LibOrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_(numColumns_, enc, 4);
  jint q = JreURShift32(numColumns_, 5);
  jint r = numColumns_ & (jint) 0x1f;
  jint count = 8;
  for (jint i = 0; i < numRows_; i++) {
    for (jint j = 0; j < q; j++, count += 4) {
      LibOrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j), enc, count);
    }
    for (jint j = 0; j < r; j += 8) {
      *IOSByteArray_GetRef(enc, count++) = (jbyte) ((JreURShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), q), j)) & (jint) 0xff);
    }
  }
  return enc;
}

- (jdouble)getHammingWeight {
  jdouble counter = 0.0;
  jdouble elementCounter = 0.0;
  jint rest = numColumns_ & (jint) 0x1f;
  jint d;
  if (rest == 0) {
    d = length_;
  }
  else {
    d = length_ - 1;
  }
  for (jint i = 0; i < numRows_; i++) {
    for (jint j = 0; j < d; j++) {
      jint a = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j);
      for (jint k = 0; k < 32; k++) {
        jint b = (JreURShift32(a, k)) & 1;
        counter = counter + b;
        elementCounter = elementCounter + 1;
      }
    }
    jint a = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), length_ - 1);
    for (jint k = 0; k < rest; k++) {
      jint b = (JreURShift32(a, k)) & 1;
      counter = counter + b;
      elementCounter = elementCounter + 1;
    }
  }
  return counter / elementCounter;
}

- (jboolean)isZero {
  for (jint i = 0; i < numRows_; i++) {
    for (jint j = 0; j < length_; j++) {
      if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j) != 0) {
        return false;
      }
    }
  }
  return true;
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *)getLeftSubMatrix {
  if (numColumns_ <= numRows_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"empty submatrix");
  }
  jint length = JreRShift32((numRows_ + 31), 5);
  IOSObjectArray *result = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ numRows_, length }];
  jint bitMask = (JreLShift32(1, (numRows_ & (jint) 0x1f))) - 1;
  if (bitMask == 0) {
    bitMask = -1;
  }
  for (jint i = numRows_ - 1; i >= 0; i--) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(matrix_), i), 0, IOSObjectArray_Get(result, i), 0, length);
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result, i)), length - 1) &= bitMask;
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(numRows_, result);
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *)extendLeftCompactForm {
  jint newNumColumns = numColumns_ + numRows_;
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(numRows_, newNumColumns);
  jint ind = numRows_ - 1 + numColumns_;
  for (jint i = numRows_ - 1; i >= 0; i--, ind--) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(matrix_), i), 0, IOSObjectArray_Get(result->matrix_, i), 0, length_);
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(result->matrix_), i)), JreRShift32(ind, 5)) |= JreLShift32(1, (ind & (jint) 0x1f));
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *)getRightSubMatrix {
  if (numColumns_ <= numRows_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"empty submatrix");
  }
  jint q = JreRShift32(numRows_, 5);
  jint r = numRows_ & (jint) 0x1f;
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(numRows_, numColumns_ - numRows_);
  for (jint i = numRows_ - 1; i >= 0; i--) {
    if (r != 0) {
      jint ind = q;
      for (jint j = 0; j < result->length_ - 1; j++) {
        jint unseq$1 = ind++;
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(result->matrix_), i)), j) = (JreURShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, i)), unseq$1), r)) | (JreLShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, i)), ind), (32 - r)));
      }
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(result->matrix_), i)), result->length_ - 1) = JreURShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, i)), ind++), r);
      if (ind < length_) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result->matrix_, i)), result->length_ - 1) |= JreLShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, i)), ind), (32 - r));
      }
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(matrix_), i), q, IOSObjectArray_Get(result->matrix_, i), 0, result->length_);
    }
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *)extendRightCompactForm {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(numRows_, numRows_ + numColumns_);
  jint q = JreRShift32(numRows_, 5);
  jint r = numRows_ & (jint) 0x1f;
  for (jint i = numRows_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(result->matrix_), i)), JreRShift32(i, 5)) |= JreLShift32(1, (i & (jint) 0x1f));
    if (r != 0) {
      jint ind = q;
      for (jint j = 0; j < length_ - 1; j++) {
        jint mw = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, i)), j);
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result->matrix_, i)), ind++) |= JreLShift32(mw, r);
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result->matrix_, i)), ind) |= JreURShift32(mw, (32 - r));
      }
      jint mw = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, i)), length_ - 1);
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result->matrix_, i)), ind++) |= JreLShift32(mw, r);
      if (ind < result->length_) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result->matrix_, i)), ind) |= JreURShift32(mw, (32 - r));
      }
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(matrix_, i), 0, IOSObjectArray_Get(result->matrix_, i), q, length_);
    }
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)computeTranspose {
  IOSObjectArray *result = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ numColumns_, JreURShift32((numRows_ + 31), 5) }];
  for (jint i = 0; i < numRows_; i++) {
    for (jint j = 0; j < numColumns_; j++) {
      jint qs = JreURShift32(j, 5);
      jint rs = j & (jint) 0x1f;
      jint b = (JreURShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), qs), rs)) & 1;
      jint qt = JreURShift32(i, 5);
      jint rt = i & (jint) 0x1f;
      if (b == 1) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result, j)), qt) |= JreLShift32(1, rt);
      }
    }
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(numRows_, result);
}

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)computeInverse {
  if (numRows_ != numColumns_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Matrix is not invertible.");
  }
  IOSObjectArray *tmpMatrix = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ numRows_, length_ }];
  for (jint i = numRows_ - 1; i >= 0; i--) {
    (void) IOSObjectArray_Set(tmpMatrix, i, LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(IOSObjectArray_Get(nil_chk(matrix_), i)));
  }
  IOSObjectArray *invMatrix = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ numRows_, length_ }];
  for (jint i = numRows_ - 1; i >= 0; i--) {
    jint q = JreRShift32(i, 5);
    jint r = i & (jint) 0x1f;
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(invMatrix, i)), q) = JreLShift32(1, r);
  }
  for (jint i = 0; i < numRows_; i++) {
    jint q = JreRShift32(i, 5);
    jint bitMask = JreLShift32(1, (i & (jint) 0x1f));
    if ((IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, i)), q) & bitMask) == 0) {
      jboolean foundNonZero = false;
      for (jint j = i + 1; j < numRows_; j++) {
        if ((IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, j)), q) & bitMask) != 0) {
          foundNonZero = true;
          LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_swapRowsWithIntArray2_withInt_withInt_(tmpMatrix, i, j);
          LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_swapRowsWithIntArray2_withInt_withInt_(invMatrix, i, j);
          j = numRows_;
          continue;
        }
      }
      if (!foundNonZero) {
        @throw new_JavaLangArithmeticException_initWithNSString_(@"Matrix is not invertible.");
      }
    }
    for (jint j = numRows_ - 1; j >= 0; j--) {
      if ((j != i) && ((IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, j)), q) & bitMask) != 0)) {
        LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_addToRowWithIntArray_withIntArray_withInt_(IOSObjectArray_Get(tmpMatrix, i), IOSObjectArray_Get(tmpMatrix, j), q);
        LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_addToRowWithIntArray_withIntArray_withInt_(IOSObjectArray_Get(invMatrix, i), IOSObjectArray_Get(invMatrix, j), 0);
      }
    }
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(numColumns_, invMatrix);
}

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:(LibOrgBouncycastlePqcMathLinearalgebraPermutation *)p {
  IOSIntArray *pVec = [((LibOrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p)) getVector];
  if (((IOSIntArray *) nil_chk(pVec))->size_ != numRows_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:numRows_ type:IOSClass_intArray(1)];
  for (jint i = numRows_ - 1; i >= 0; i--) {
    (void) IOSObjectArray_Set(result, i, LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(IOSObjectArray_Get(nil_chk(matrix_), IOSIntArray_Get(pVec, i))));
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(numRows_, result);
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)vec {
  if (!([vec isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]])) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"vector is not defined over GF(2)");
  }
  if (((LibOrgBouncycastlePqcMathLinearalgebraVector *) nil_chk(vec))->length_ != numRows_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  IOSIntArray *v = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk(vec, [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class])) getVecArray];
  IOSIntArray *res = [IOSIntArray newArrayWithLength:length_];
  jint q = JreRShift32(numRows_, 5);
  jint r = JreLShift32(1, (numRows_ & (jint) 0x1f));
  jint row = 0;
  for (jint i = 0; i < q; i++) {
    jint bitMask = 1;
    do {
      jint b = IOSIntArray_Get(nil_chk(v), i) & bitMask;
      if (b != 0) {
        for (jint j = 0; j < length_; j++) {
          *IOSIntArray_GetRef(res, j) ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), row)), j);
        }
      }
      row++;
      JreLShiftAssignInt(&bitMask, 1);
    }
    while (bitMask != 0);
  }
  jint bitMask = 1;
  while (bitMask != r) {
    jint b = IOSIntArray_Get(nil_chk(v), q) & bitMask;
    if (b != 0) {
      for (jint j = 0; j < length_; j++) {
        *IOSIntArray_GetRef(res, j) ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), row)), j);
      }
    }
    row++;
    JreLShiftAssignInt(&bitMask, 1);
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(res, numColumns_);
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)leftMultiplyLeftCompactFormWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)vec {
  if (!([vec isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]])) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"vector is not defined over GF(2)");
  }
  if (((LibOrgBouncycastlePqcMathLinearalgebraVector *) nil_chk(vec))->length_ != numRows_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  IOSIntArray *v = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk(vec, [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class])) getVecArray];
  IOSIntArray *res = [IOSIntArray newArrayWithLength:JreURShift32((numRows_ + numColumns_ + 31), 5)];
  jint words = JreURShift32(numRows_, 5);
  jint row = 0;
  for (jint i = 0; i < words; i++) {
    jint bitMask = 1;
    do {
      jint b = IOSIntArray_Get(nil_chk(v), i) & bitMask;
      if (b != 0) {
        for (jint j = 0; j < length_; j++) {
          *IOSIntArray_GetRef(res, j) ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), row)), j);
        }
        jint q = JreURShift32((numColumns_ + row), 5);
        jint r = (numColumns_ + row) & (jint) 0x1f;
        *IOSIntArray_GetRef(res, q) |= JreLShift32(1, r);
      }
      row++;
      JreLShiftAssignInt(&bitMask, 1);
    }
    while (bitMask != 0);
  }
  jint rem = JreLShift32(1, (numRows_ & (jint) 0x1f));
  jint bitMask = 1;
  while (bitMask != rem) {
    jint b = IOSIntArray_Get(nil_chk(v), words) & bitMask;
    if (b != 0) {
      for (jint j = 0; j < length_; j++) {
        *IOSIntArray_GetRef(res, j) ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), row)), j);
      }
      jint q = JreURShift32((numColumns_ + row), 5);
      jint r = (numColumns_ + row) & (jint) 0x1f;
      *IOSIntArray_GetRef(res, q) |= JreLShift32(1, r);
    }
    row++;
    JreLShiftAssignInt(&bitMask, 1);
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(res, numRows_ + numColumns_);
}

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:(LibOrgBouncycastlePqcMathLinearalgebraMatrix *)mat {
  if (!([mat isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]])) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"matrix is not defined over GF(2)");
  }
  if (((LibOrgBouncycastlePqcMathLinearalgebraMatrix *) nil_chk(mat))->numRows_ != numColumns_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *a = (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk(mat, [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(numRows_, mat->numColumns_);
  jint d;
  jint rest = numColumns_ & (jint) 0x1f;
  if (rest == 0) {
    d = length_;
  }
  else {
    d = length_ - 1;
  }
  for (jint i = 0; i < numRows_; i++) {
    jint count = 0;
    for (jint j = 0; j < d; j++) {
      jint e = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j);
      for (jint h = 0; h < 32; h++) {
        jint b = e & (JreLShift32(1, h));
        if (b != 0) {
          for (jint g = 0; g < a->length_; g++) {
            *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result->matrix_, i)), g) ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(a->matrix_, count)), g);
          }
        }
        count++;
      }
    }
    jint e = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), length_ - 1);
    for (jint h = 0; h < rest; h++) {
      jint b = e & (JreLShift32(1, h));
      if (b != 0) {
        for (jint g = 0; g < a->length_; g++) {
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result->matrix_, i)), g) ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(a->matrix_, count)), g);
        }
      }
      count++;
    }
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:(LibOrgBouncycastlePqcMathLinearalgebraPermutation *)p {
  IOSIntArray *pVec = [((LibOrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p)) getVector];
  if (((IOSIntArray *) nil_chk(pVec))->size_ != numColumns_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *result = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(numRows_, numColumns_);
  for (jint i = numColumns_ - 1; i >= 0; i--) {
    jint q = JreURShift32(i, 5);
    jint r = i & (jint) 0x1f;
    jint pq = JreURShift32(IOSIntArray_Get(pVec, i), 5);
    jint pr = IOSIntArray_Get(pVec, i) & (jint) 0x1f;
    for (jint j = numRows_ - 1; j >= 0; j--) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(result->matrix_), j)), q) |= JreLShift32(((JreURShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, j)), pq), pr)) & 1), r);
    }
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)vec {
  if (!([vec isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]])) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"vector is not defined over GF(2)");
  }
  if (((LibOrgBouncycastlePqcMathLinearalgebraVector *) nil_chk(vec))->length_ != numColumns_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  IOSIntArray *v = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk(vec, [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class])) getVecArray];
  IOSIntArray *res = [IOSIntArray newArrayWithLength:JreURShift32((numRows_ + 31), 5)];
  for (jint i = 0; i < numRows_; i++) {
    jint help = 0;
    for (jint j = 0; j < length_; j++) {
      help ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j) & IOSIntArray_Get(nil_chk(v), j);
    }
    jint bitValue = 0;
    for (jint j = 0; j < 32; j++) {
      bitValue ^= (JreURShift32(help, j)) & 1;
    }
    if (bitValue == 1) {
      *IOSIntArray_GetRef(res, JreURShift32(i, 5)) |= JreLShift32(1, (i & (jint) 0x1f));
    }
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(res, numRows_);
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)rightMultiplyRightCompactFormWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)vec {
  if (!([vec isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]])) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"vector is not defined over GF(2)");
  }
  if (((LibOrgBouncycastlePqcMathLinearalgebraVector *) nil_chk(vec))->length_ != numColumns_ + numRows_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"length mismatch");
  }
  IOSIntArray *v = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk(vec, [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class])) getVecArray];
  IOSIntArray *res = [IOSIntArray newArrayWithLength:JreURShift32((numRows_ + 31), 5)];
  jint q = JreRShift32(numRows_, 5);
  jint r = numRows_ & (jint) 0x1f;
  for (jint i = 0; i < numRows_; i++) {
    jint help = (JreURShift32(IOSIntArray_Get(nil_chk(v), JreRShift32(i, 5)), (i & (jint) 0x1f))) & 1;
    jint vInd = q;
    if (r != 0) {
      jint vw = 0;
      for (jint j = 0; j < length_ - 1; j++) {
        jint unseq$1 = vInd++;
        vw = (JreURShift32(IOSIntArray_Get(v, unseq$1), r)) | (JreLShift32(IOSIntArray_Get(v, vInd), (32 - r)));
        help ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j) & vw;
      }
      vw = JreURShift32(IOSIntArray_Get(v, vInd++), r);
      if (vInd < v->size_) {
        vw |= JreLShift32(IOSIntArray_Get(v, vInd), (32 - r));
      }
      help ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), length_ - 1) & vw;
    }
    else {
      for (jint j = 0; j < length_; j++) {
        help ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j) & IOSIntArray_Get(v, vInd++);
      }
    }
    jint bitValue = 0;
    for (jint j = 0; j < 32; j++) {
      bitValue ^= help & 1;
      JreURShiftAssignInt(&help, 1);
    }
    if (bitValue == 1) {
      *IOSIntArray_GetRef(res, JreRShift32(i, 5)) |= JreLShift32(1, (i & (jint) 0x1f));
    }
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(res, numRows_);
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]])) {
    return false;
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *otherMatrix = (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk(other, [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  if ((numRows_ != ((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(otherMatrix))->numRows_) || (numColumns_ != otherMatrix->numColumns_) || (length_ != otherMatrix->length_)) {
    return false;
  }
  for (jint i = 0; i < numRows_; i++) {
    if (!LibOrgBouncycastlePqcMathLinearalgebraIntUtils_equalsWithIntArray_withIntArray_(IOSObjectArray_Get(nil_chk(matrix_), i), IOSObjectArray_Get(otherMatrix->matrix_, i))) {
      return false;
    }
  }
  return true;
}

- (NSUInteger)hash {
  jint hash_ = (numRows_ * 31 + numColumns_) * 31 + length_;
  for (jint i = 0; i < numRows_; i++) {
    hash_ = hash_ * 31 + LibOrgBouncycastleUtilArrays_hashCodeWithIntArray_(IOSObjectArray_Get(nil_chk(matrix_), i));
  }
  return hash_;
}

- (NSString *)description {
  jint rest = numColumns_ & (jint) 0x1f;
  jint d;
  if (rest == 0) {
    d = length_;
  }
  else {
    d = length_ - 1;
  }
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < numRows_; i++) {
    (void) [buf appendWithNSString:JreStrcat("I$", i, @": ")];
    for (jint j = 0; j < d; j++) {
      jint a = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j);
      for (jint k = 0; k < 32; k++) {
        jint b = (JreURShift32(a, k)) & 1;
        if (b == 0) {
          (void) [buf appendWithChar:'0'];
        }
        else {
          (void) [buf appendWithChar:'1'];
        }
      }
      (void) [buf appendWithChar:' '];
    }
    jint a = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), length_ - 1);
    for (jint k = 0; k < rest; k++) {
      jint b = (JreURShift32(a, k)) & 1;
      if (b == 0) {
        (void) [buf appendWithChar:'0'];
      }
      else {
        (void) [buf appendWithChar:'1'];
      }
    }
    (void) [buf appendWithChar:0x000a];
  }
  return [buf description];
}

+ (void)swapRowsWithIntArray2:(IOSObjectArray *)matrix
                      withInt:(jint)first
                      withInt:(jint)second {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_swapRowsWithIntArray2_withInt_withInt_(matrix, first, second);
}

+ (void)addToRowWithIntArray:(IOSIntArray *)fromRow
                withIntArray:(IOSIntArray *)toRow
                     withInt:(jint)startIndex {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_addToRowWithIntArray_withIntArray_withInt_(fromRow, toRow, startIndex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 10, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix;", 0x9, 13, 10, -1, -1, -1, -1 },
    { NULL, "[[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 15, 17, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, 19, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 19, 17, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 21, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithInt:withIntArray2:);
  methods[2].selector = @selector(initWithInt:withChar:);
  methods[3].selector = @selector(initWithInt:withChar:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix:);
  methods[5].selector = @selector(initWithInt:withInt:);
  methods[6].selector = @selector(assignZeroMatrixWithInt:withInt:);
  methods[7].selector = @selector(assignUnitMatrixWithInt:);
  methods[8].selector = @selector(assignRandomLowerTriangularMatrixWithInt:withJavaSecuritySecureRandom:);
  methods[9].selector = @selector(assignRandomUpperTriangularMatrixWithInt:withJavaSecuritySecureRandom:);
  methods[10].selector = @selector(assignRandomRegularMatrixWithInt:withJavaSecuritySecureRandom:);
  methods[11].selector = @selector(createRandomRegularMatrixAndItsInverseWithInt:withJavaSecuritySecureRandom:);
  methods[12].selector = @selector(getIntArray);
  methods[13].selector = @selector(getLength);
  methods[14].selector = @selector(getRowWithInt:);
  methods[15].selector = @selector(getEncoded);
  methods[16].selector = @selector(getHammingWeight);
  methods[17].selector = @selector(isZero);
  methods[18].selector = @selector(getLeftSubMatrix);
  methods[19].selector = @selector(extendLeftCompactForm);
  methods[20].selector = @selector(getRightSubMatrix);
  methods[21].selector = @selector(extendRightCompactForm);
  methods[22].selector = @selector(computeTranspose);
  methods[23].selector = @selector(computeInverse);
  methods[24].selector = @selector(leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:);
  methods[25].selector = @selector(leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[26].selector = @selector(leftMultiplyLeftCompactFormWithLibOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[27].selector = @selector(rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:);
  methods[28].selector = @selector(rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:);
  methods[29].selector = @selector(rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[30].selector = @selector(rightMultiplyRightCompactFormWithLibOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[31].selector = @selector(isEqual:);
  methods[32].selector = @selector(hash);
  methods[33].selector = @selector(description);
  methods[34].selector = @selector(swapRowsWithIntArray2:withInt:withInt:);
  methods[35].selector = @selector(addToRowWithIntArray:withIntArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matrix_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "I[[I", "IC", "ICLJavaSecuritySecureRandom;", "LLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix;", "II", "assignZeroMatrix", "assignUnitMatrix", "I", "assignRandomLowerTriangularMatrix", "ILJavaSecuritySecureRandom;", "assignRandomUpperTriangularMatrix", "assignRandomRegularMatrix", "createRandomRegularMatrixAndItsInverse", "getRow", "leftMultiply", "LLibOrgBouncycastlePqcMathLinearalgebraPermutation;", "LLibOrgBouncycastlePqcMathLinearalgebraVector;", "leftMultiplyLeftCompactForm", "rightMultiply", "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", "rightMultiplyRightCompactForm", "equals", "LNSObject;", "hashCode", "toString", "swapRows", "[[III", "addToRow", "[I[II" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix = { "GF2Matrix", "lib.org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 36, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix;
}

@end

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, IOSByteArray *enc) {
  LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  if (((IOSByteArray *) nil_chk(enc))->size_ < 9) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"given array is not an encoded matrix over GF(2)");
  }
  self->numRows_ = LibOrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_(enc, 0);
  self->numColumns_ = LibOrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_(enc, 4);
  jint n = (JreURShift32((self->numColumns_ + 7), 3)) * self->numRows_;
  if ((self->numRows_ <= 0) || (n != (enc->size_ - 8))) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"given array is not an encoded matrix over GF(2)");
  }
  self->length_ = JreURShift32((self->numColumns_ + 31), 5);
  self->matrix_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->numRows_, self->length_ }];
  jint q = JreRShift32(self->numColumns_, 5);
  jint r = self->numColumns_ & (jint) 0x1f;
  jint count = 8;
  for (jint i = 0; i < self->numRows_; i++) {
    for (jint j = 0; j < q; j++, count += 4) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j) = LibOrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_(enc, count);
    }
    for (jint j = 0; j < r; j += 8) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), q) ^= JreLShift32((IOSByteArray_Get(enc, count++) & (jint) 0xff), j);
    }
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithByteArray_(IOSByteArray *enc) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithByteArray_, enc)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithByteArray_(IOSByteArray *enc) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithByteArray_, enc)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint numColumns, IOSObjectArray *matrix) {
  LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  if (((IOSIntArray *) nil_chk(IOSObjectArray_Get(nil_chk(matrix), 0)))->size_ != JreRShift32((numColumns + 31), 5)) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Int array does not match given number of columns.");
  }
  self->numColumns_ = numColumns;
  self->numRows_ = matrix->size_;
  self->length_ = ((IOSIntArray *) nil_chk(IOSObjectArray_Get(matrix, 0)))->size_;
  jint rest = numColumns & (jint) 0x1f;
  jint bitMask;
  if (rest == 0) {
    bitMask = (jint) 0xffffffff;
  }
  else {
    bitMask = (JreLShift32(1, rest)) - 1;
  }
  for (jint i = 0; i < self->numRows_; i++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix, i)), self->length_ - 1) &= bitMask;
  }
  self->matrix_ = matrix;
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(jint numColumns, IOSObjectArray *matrix) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithInt_withIntArray2_, numColumns, matrix)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(jint numColumns, IOSObjectArray *matrix) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithInt_withIntArray2_, numColumns, matrix)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, jchar typeOfMatrix) {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(self, n, typeOfMatrix, new_JavaSecuritySecureRandom_init());
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(jint n, jchar typeOfMatrix) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithInt_withChar_, n, typeOfMatrix)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(jint n, jchar typeOfMatrix) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithInt_withChar_, n, typeOfMatrix)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, jchar typeOfMatrix, JavaSecuritySecureRandom *sr) {
  LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  if (n <= 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Size of matrix is non-positive.");
  }
  switch (typeOfMatrix) {
    case LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_ZERO:
    LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignZeroMatrixWithInt_withInt_(self, n, n);
    break;
    case LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_UNIT:
    LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignUnitMatrixWithInt_(self, n);
    break;
    case LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_LT:
    LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomLowerTriangularMatrixWithInt_withJavaSecuritySecureRandom_(self, n, sr);
    break;
    case LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_UT:
    LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomUpperTriangularMatrixWithInt_withJavaSecuritySecureRandom_(self, n, sr);
    break;
    case LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_REGULAR:
    LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomRegularMatrixWithInt_withJavaSecuritySecureRandom_(self, n, sr);
    break;
    default:
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Unknown matrix type.");
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(jint n, jchar typeOfMatrix, JavaSecuritySecureRandom *sr) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithInt_withChar_withJavaSecuritySecureRandom_, n, typeOfMatrix, sr)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(jint n, jchar typeOfMatrix, JavaSecuritySecureRandom *sr) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithInt_withChar_withJavaSecuritySecureRandom_, n, typeOfMatrix, sr)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *a) {
  LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  self->numColumns_ = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(a)) getNumColumns];
  self->numRows_ = [a getNumRows];
  self->length_ = a->length_;
  self->matrix_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(a->matrix_))->size_ type:IOSClass_intArray(1)];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->matrix_))->size_; i++) {
    (void) IOSObjectArray_Set(self->matrix_, i, LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(IOSObjectArray_Get(a->matrix_, i)));
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *a) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_, a)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *a) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_, a)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint m, jint n) {
  LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  if ((n <= 0) || (m <= 0)) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"size of matrix is non-positive");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignZeroMatrixWithInt_withInt_(self, m, n);
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(jint m, jint n) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithInt_withInt_, m, n)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withInt_(jint m, jint n) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix, initWithInt_withInt_, m, n)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignZeroMatrixWithInt_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint m, jint n) {
  self->numRows_ = m;
  self->numColumns_ = n;
  self->length_ = JreURShift32((n + 31), 5);
  self->matrix_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->numRows_, self->length_ }];
  for (jint i = 0; i < self->numRows_; i++) {
    for (jint j = 0; j < self->length_; j++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, i)), j) = 0;
    }
  }
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignUnitMatrixWithInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n) {
  self->numRows_ = n;
  self->numColumns_ = n;
  self->length_ = JreURShift32((n + 31), 5);
  self->matrix_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->numRows_, self->length_ }];
  for (jint i = 0; i < self->numRows_; i++) {
    for (jint j = 0; j < self->length_; j++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, i)), j) = 0;
    }
  }
  for (jint i = 0; i < self->numRows_; i++) {
    jint rest = i & (jint) 0x1f;
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, i)), JreURShift32(i, 5)) = JreLShift32(1, rest);
  }
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomLowerTriangularMatrixWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, JavaSecuritySecureRandom *sr) {
  self->numRows_ = n;
  self->numColumns_ = n;
  self->length_ = JreURShift32((n + 31), 5);
  self->matrix_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->numRows_, self->length_ }];
  for (jint i = 0; i < self->numRows_; i++) {
    jint q = JreURShift32(i, 5);
    jint r = i & (jint) 0x1f;
    jint s = 31 - r;
    r = JreLShift32(1, r);
    for (jint j = 0; j < q; j++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j) = [((JavaSecuritySecureRandom *) nil_chk(sr)) nextInt];
    }
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), q) = (JreURShift32([((JavaSecuritySecureRandom *) nil_chk(sr)) nextInt], s)) | r;
    for (jint j = q + 1; j < self->length_; j++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j) = 0;
    }
  }
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomUpperTriangularMatrixWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, JavaSecuritySecureRandom *sr) {
  self->numRows_ = n;
  self->numColumns_ = n;
  self->length_ = JreURShift32((n + 31), 5);
  self->matrix_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->numRows_, self->length_ }];
  jint rest = n & (jint) 0x1f;
  jint help;
  if (rest == 0) {
    help = (jint) 0xffffffff;
  }
  else {
    help = (JreLShift32(1, rest)) - 1;
  }
  for (jint i = 0; i < self->numRows_; i++) {
    jint q = JreURShift32(i, 5);
    jint r = i & (jint) 0x1f;
    jint s = r;
    r = JreLShift32(1, r);
    for (jint j = 0; j < q; j++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, i)), j) = 0;
    }
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, i)), q) = (JreLShift32([((JavaSecuritySecureRandom *) nil_chk(sr)) nextInt], s)) | r;
    for (jint j = q + 1; j < self->length_; j++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j) = [sr nextInt];
    }
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), self->length_ - 1) &= help;
  }
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_assignRandomRegularMatrixWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, JavaSecuritySecureRandom *sr) {
  self->numRows_ = n;
  self->numColumns_ = n;
  self->length_ = JreURShift32((n + 31), 5);
  self->matrix_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->numRows_, self->length_ }];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *lm = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(n, LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_LT, sr);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *um = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(n, LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_UT, sr);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *rm = (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([lm rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:um], [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *perm = new_LibOrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(n, sr);
  IOSIntArray *p = [perm getVector];
  for (jint i = 0; i < n; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(rm))->matrix_), i), 0, IOSObjectArray_Get(self->matrix_, IOSIntArray_Get(nil_chk(p), i)), 0, self->length_);
  }
}

IOSObjectArray *LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_createRandomRegularMatrixAndItsInverseWithInt_withJavaSecuritySecureRandom_(jint n, JavaSecuritySecureRandom *sr) {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:2 type:LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_class_()];
  jint length = JreRShift32((n + 31), 5);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *lm = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(n, LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_LT, sr);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *um = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(n, LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_UT, sr);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *rm = (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([lm rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:um], [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *p = new_LibOrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(n, sr);
  IOSIntArray *pVec = [p getVector];
  IOSObjectArray *matrix = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ n, length }];
  for (jint i = 0; i < n; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(rm))->matrix_), IOSIntArray_Get(nil_chk(pVec), i)), 0, IOSObjectArray_Get(matrix, i), 0, length);
  }
  (void) IOSObjectArray_SetAndConsume(result, 0, new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(n, matrix));
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *invLm = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(n, LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_UNIT);
  for (jint i = 0; i < n; i++) {
    jint rest = i & (jint) 0x1f;
    jint q = JreURShift32(i, 5);
    jint r = JreLShift32(1, rest);
    for (jint j = i + 1; j < n; j++) {
      jint b = (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(lm->matrix_), j)), q)) & r;
      if (b != 0) {
        for (jint k = 0; k <= q; k++) {
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(invLm->matrix_, j)), k) ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(invLm->matrix_, i)), k);
        }
      }
    }
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *invUm = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(n, LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_UNIT);
  for (jint i = n - 1; i >= 0; i--) {
    jint rest = i & (jint) 0x1f;
    jint q = JreURShift32(i, 5);
    jint r = JreLShift32(1, rest);
    for (jint j = i - 1; j >= 0; j--) {
      jint b = (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(um->matrix_), j)), q)) & r;
      if (b != 0) {
        for (jint k = q; k < length; k++) {
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(invUm->matrix_, j)), k) ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(invUm->matrix_, i)), k);
        }
      }
    }
  }
  (void) IOSObjectArray_Set(result, 1, (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([invUm rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:[invLm rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:p]], [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]));
  return result;
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_swapRowsWithIntArray2_withInt_withInt_(IOSObjectArray *matrix, jint first, jint second) {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initialize();
  IOSIntArray *tmp = IOSObjectArray_Get(nil_chk(matrix), first);
  (void) IOSObjectArray_Set(matrix, first, IOSObjectArray_Get(matrix, second));
  (void) IOSObjectArray_Set(matrix, second, tmp);
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_addToRowWithIntArray_withIntArray_withInt_(IOSIntArray *fromRow, IOSIntArray *toRow, jint startIndex) {
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_initialize();
  for (jint i = ((IOSIntArray *) nil_chk(toRow))->size_ - 1; i >= startIndex; i--) {
    *IOSIntArray_GetRef(toRow, i) = IOSIntArray_Get(nil_chk(fromRow), i) ^ IOSIntArray_Get(toRow, i);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix)
