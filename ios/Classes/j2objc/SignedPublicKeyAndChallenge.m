//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/mozilla/SignedPublicKeyAndChallenge.java
//

#include "ASN1Encodable.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "DERBitString.h"
#include "J2ObjC_source.h"
#include "PublicKeyAndChallenge.h"
#include "SignedPublicKeyAndChallenge.h"

@interface LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge () {
 @public
  LibOrgBouncycastleAsn1MozillaPublicKeyAndChallenge *pubKeyAndChal_;
  LibOrgBouncycastleAsn1ASN1Sequence *pkacSeq_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge, pubKeyAndChal_, LibOrgBouncycastleAsn1MozillaPublicKeyAndChallenge *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge, pkacSeq_, LibOrgBouncycastleAsn1ASN1Sequence *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *new_LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *create_LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge

+ (LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_getInstanceWithId_(obj);
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return pkacSeq_;
}

- (LibOrgBouncycastleAsn1MozillaPublicKeyAndChallenge *)getPublicKeyAndChallenge {
  return pubKeyAndChal_;
}

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm {
  return LibOrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(pkacSeq_)) getObjectAtWithInt:1]);
}

- (LibOrgBouncycastleAsn1DERBitString *)getSignature {
  return LibOrgBouncycastleAsn1DERBitString_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(pkacSeq_)) getObjectAtWithInt:2]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1MozillaPublicKeyAndChallenge;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1DERBitString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[2].selector = @selector(toASN1Primitive);
  methods[3].selector = @selector(getPublicKeyAndChallenge);
  methods[4].selector = @selector(getSignatureAlgorithm);
  methods[5].selector = @selector(getSignature);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pubKeyAndChal_", "LLibOrgBouncycastleAsn1MozillaPublicKeyAndChallenge;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pkacSeq_", "LLibOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LLibOrgBouncycastleAsn1ASN1Sequence;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge = { "SignedPublicKeyAndChallenge", "lib.org.bouncycastle.asn1.mozilla", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge;
}

@end

LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initialize();
  if ([obj isKindOfClass:[LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge class]]) {
    return (LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *) obj;
  }
  else if (obj != nil) {
    return new_LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  return nil;
}

void LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->pkacSeq_ = seq;
  self->pubKeyAndChal_ = LibOrgBouncycastleAsn1MozillaPublicKeyAndChallenge_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0]);
}

LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *new_LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge *create_LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1MozillaSignedPublicKeyAndChallenge)
