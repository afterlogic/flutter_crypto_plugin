//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcPublicKeyKeyEncryptionMethodGenerator.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricBlockCipher.h"
#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BCPGKey.h"
#include "BcImplProvider.h"
#include "BcKeyFingerprintCalculator.h"
#include "BcPGPDigestCalculatorProvider.h"
#include "BcPGPKeyConverter.h"
#include "BcPublicKeyKeyEncryptionMethodGenerator.h"
#include "BcUtil.h"
#include "ECCurve.h"
#include "ECDHPublicBCPGKey.h"
#include "ECDomainParameters.h"
#include "ECKeyGenerationParameters.h"
#include "ECKeyPairGenerator.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "EphemeralKeyPair.h"
#include "EphemeralKeyPairGenerator.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "KeyEncoder.h"
#include "KeyParameter.h"
#include "MPInteger.h"
#include "OpenPgpBcRFC6637KDFCalculator.h"
#include "PGPDigestCalculator.h"
#include "PGPException.h"
#include "PGPPad.h"
#include "PGPPublicKey.h"
#include "ParametersWithRandom.h"
#include "PublicKeyAlgorithmTags.h"
#include "PublicKeyKeyEncryptionMethodGenerator.h"
#include "PublicKeyPacket.h"
#include "RFC6637Utils.h"
#include "Wrapper.h"
#include "X9ECParameters.h"
#include "java/io/IOException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator () {
 @public
  JavaSecuritySecureRandom *random_;
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *keyConverter_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator, keyConverter_, LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *)

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1 : NSObject < LibOrgBouncycastleCryptoKeyEncoder >

- (instancetype)init;

- (IOSByteArray *)getEncodedWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)keyParameter;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1_init(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1 *self);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1 *new_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1 *create_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1_init(void);

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key {
  LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(self, key);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  return self;
}

- (IOSByteArray *)encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
                                                                withByteArray:(IOSByteArray *)sessionInfo {
  @try {
    if ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey)) getAlgorithm] != LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH) {
      id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> c = LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createPublicKeyCipherWithInt_([pubKey getAlgorithm]);
      LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *key = [((LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter *) nil_chk(keyConverter_)) getPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:pubKey];
      if (random_ == nil) {
        random_ = new_JavaSecuritySecureRandom_init();
      }
      [((id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(c)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(key, random_)];
      return [c processBlockWithByteArray:sessionInfo withInt:0 withInt:((IOSByteArray *) nil_chk(sessionInfo))->size_];
    }
    else {
      LibOrgBouncycastleBcpgECDHPublicBCPGKey *ecKey = (LibOrgBouncycastleBcpgECDHPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk([pubKey getPublicKeyPacket])) getKey], [LibOrgBouncycastleBcpgECDHPublicBCPGKey class]);
      LibOrgBouncycastleAsn1X9X9ECParameters *x9Params = LibOrgBouncycastleOpenpgpOperatorBcBcUtil_getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleBcpgECDHPublicBCPGKey *) nil_chk(ecKey)) getCurveOID]);
      LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9Params)) getCurve], [x9Params getG], [x9Params getN]);
      LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator *gen = new_LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init();
      [gen init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(ecParams, random_)];
      LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator *kGen = new_LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_withLibOrgBouncycastleCryptoKeyEncoder_(gen, new_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1_init());
      LibOrgBouncycastleCryptoEphemeralKeyPair *ephKp = [kGen generate];
      LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephPriv = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk([((LibOrgBouncycastleCryptoEphemeralKeyPair *) nil_chk(ephKp)) getKeyPair])) getPrivate], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
      LibOrgBouncycastleMathEcECPoint *S = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(LibOrgBouncycastleOpenpgpOperatorBcBcUtil_decodePointWithJavaMathBigInteger_withLibOrgBouncycastleMathEcECCurve_([ecKey getEncodedPoint], [x9Params getCurve]))) multiplyWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(ephPriv)) getD]])) normalize];
      LibOrgBouncycastleOpenpgpOperatorBcOpenPgpBcRFC6637KDFCalculator *rfc6637KDFCalculator = new_LibOrgBouncycastleOpenpgpOperatorBcOpenPgpBcRFC6637KDFCalculator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_([new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPDigestCalculatorProvider_init() getWithInt:[ecKey getHashAlgorithm]], [ecKey getSymmetricKeyAlgorithm]);
      LibOrgBouncycastleCryptoParamsKeyParameter *key = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_([rfc6637KDFCalculator createKeyWithLibOrgBouncycastleMathEcECPoint:S withByteArray:LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_createUserKeyingMaterialWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_([pubKey getPublicKeyPacket], new_LibOrgBouncycastleOpenpgpOperatorBcBcKeyFingerprintCalculator_init())]);
      id<LibOrgBouncycastleCryptoWrapper> c = LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createWrapperWithInt_([ecKey getSymmetricKeyAlgorithm]);
      [((id<LibOrgBouncycastleCryptoWrapper>) nil_chk(c)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(key, random_)];
      IOSByteArray *paddedSessionData = LibOrgBouncycastleOpenpgpOperatorPGPPad_padSessionDataWithByteArray_(sessionInfo);
      IOSByteArray *C = [c wrapWithByteArray:paddedSessionData withInt:0 withInt:((IOSByteArray *) nil_chk(paddedSessionData))->size_];
      IOSByteArray *VB = [new_LibOrgBouncycastleBcpgMPInteger_initWithJavaMathBigInteger_(new_JavaMathBigInteger_initWithInt_withByteArray_(1, [ephKp getEncodedPublicKey])) getEncoded];
      IOSByteArray *rv = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(VB))->size_ + 1 + ((IOSByteArray *) nil_chk(C))->size_];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(VB, 0, rv, 0, VB->size_);
      *IOSByteArray_GetRef(rv, VB->size_) = (jbyte) C->size_;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(C, 0, rv, VB->size_ + 1, C->size_);
      return rv;
    }
  }
  @catch (LibOrgBouncycastleCryptoInvalidCipherTextException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"exception encrypting session info: ", [e getMessage]), e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"exception encrypting session info: ", [e getMessage]), e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[1].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[2].selector = @selector(encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyConverter_", "LLibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleOpenpgpPGPPublicKey;", "setSecureRandom", "LJavaSecuritySecureRandom;", "encryptSessionInfo", "LLibOrgBouncycastleOpenpgpPGPPublicKey;[B", "LLibOrgBouncycastleOpenpgpPGPException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator = { "BcPublicKeyKeyEncryptionMethodGenerator", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator *self, LibOrgBouncycastleOpenpgpPGPPublicKey *key) {
  LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(self, key);
  self->keyConverter_ = new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter_init();
}

LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator *new_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator, initWithLibOrgBouncycastleOpenpgpPGPPublicKey_, key)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator *create_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator, initWithLibOrgBouncycastleOpenpgpPGPPublicKey_, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator)

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)getEncodedWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)keyParameter {
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(keyParameter, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class])))) getQ])) getEncodedWithBoolean:false];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getEncodedWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getEncoded", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "LLibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator;", "encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:withByteArray:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1 = { "", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1_init(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1 *new_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1, init)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1 *create_LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPublicKeyKeyEncryptionMethodGenerator_1, init)
}
