//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/WOTSPlusParameters.java
//

#include "Digest.h"
#include "J2ObjC_source.h"
#include "WOTSPlusOid.h"
#include "WOTSPlusParameters.h"
#include "XMSSOid.h"
#include "XMSSUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"

@interface LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters () {
 @public
  id<LibOrgBouncycastlePqcCryptoXmssXMSSOid> oid_;
  id<LibOrgBouncycastleCryptoDigest> digest_;
  jint digestSize_;
  jint winternitzParameter_;
  jint len_;
  jint len1_;
  jint len2_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters, oid_, id<LibOrgBouncycastlePqcCryptoXmssXMSSOid>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters, digest_, id<LibOrgBouncycastleCryptoDigest>)

@implementation LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (id<LibOrgBouncycastlePqcCryptoXmssXMSSOid>)getOid {
  return oid_;
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return digest_;
}

- (jint)getDigestSize {
  return digestSize_;
}

- (jint)getWinternitzParameter {
  return winternitzParameter_;
}

- (jint)getLen {
  return len_;
}

- (jint)getLen1 {
  return len1_;
}

- (jint)getLen2 {
  return len2_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSOid;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(getOid);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(getDigestSize);
  methods[4].selector = @selector(getWinternitzParameter);
  methods[5].selector = @selector(getLen);
  methods[6].selector = @selector(getLen1);
  methods[7].selector = @selector(getLen2);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "oid_", "LLibOrgBouncycastlePqcCryptoXmssXMSSOid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "digestSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "winternitzParameter_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len1_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len2_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters = { "WOTSPlusParameters", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x10, 8, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters;
}

@end

void LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  if (digest == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"digest == null");
  }
  self->digest_ = digest;
  self->digestSize_ = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getDigestSizeWithLibOrgBouncycastleCryptoDigest_(digest);
  self->winternitzParameter_ = 16;
  self->len1_ = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (8 * self->digestSize_) / LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_(self->winternitzParameter_)));
  self->len2_ = JreFpToInt(JavaLangMath_floorWithDouble_(LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_(self->len1_ * (self->winternitzParameter_ - 1)) / LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_(self->winternitzParameter_))) + 1;
  self->len_ = self->len1_ + self->len2_;
  self->oid_ = LibOrgBouncycastlePqcCryptoXmssWOTSPlusOid_lookupWithNSString_withInt_withInt_withInt_([digest getAlgorithmName], self->digestSize_, self->winternitzParameter_, self->len_);
  if (self->oid_ == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"cannot find OID for digest algorithm: ", [digest getAlgorithmName]));
  }
}

LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *new_LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *create_LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters)
