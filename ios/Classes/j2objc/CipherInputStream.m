//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/io/CipherInputStream.java
//

#include "CipherInputStream.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextIOException.h"
#include "J2ObjC_source.h"
#include "java/io/FilterInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/GeneralSecurityException.h"
#include "javax/crypto/Cipher.h"

@interface LibOrgBouncycastleJcajceIoCipherInputStream () {
 @public
  JavaxCryptoCipher *cipher_;
  IOSByteArray *inputBuffer_;
  jboolean finalized_;
  IOSByteArray *buf_;
  jint maxBuf_;
  jint bufOff_;
}

- (jint)nextChunk;

- (IOSByteArray *)finaliseCipher;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceIoCipherInputStream, cipher_, JavaxCryptoCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceIoCipherInputStream, inputBuffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceIoCipherInputStream, buf_, IOSByteArray *)

__attribute__((unused)) static jint LibOrgBouncycastleJcajceIoCipherInputStream_nextChunk(LibOrgBouncycastleJcajceIoCipherInputStream *self);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceIoCipherInputStream_finaliseCipher(LibOrgBouncycastleJcajceIoCipherInputStream *self);

@implementation LibOrgBouncycastleJcajceIoCipherInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                    withJavaxCryptoCipher:(JavaxCryptoCipher *)cipher {
  LibOrgBouncycastleJcajceIoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(self, input, cipher);
  return self;
}

- (jint)nextChunk {
  return LibOrgBouncycastleJcajceIoCipherInputStream_nextChunk(self);
}

- (IOSByteArray *)finaliseCipher {
  return LibOrgBouncycastleJcajceIoCipherInputStream_finaliseCipher(self);
}

- (jint)read {
  if (bufOff_ >= maxBuf_) {
    if (LibOrgBouncycastleJcajceIoCipherInputStream_nextChunk(self) < 0) {
      return -1;
    }
  }
  return IOSByteArray_Get(nil_chk(buf_), bufOff_++) & (jint) 0xff;
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  if (bufOff_ >= maxBuf_) {
    if (LibOrgBouncycastleJcajceIoCipherInputStream_nextChunk(self) < 0) {
      return -1;
    }
  }
  jint toSupply = JavaLangMath_minWithInt_withInt_(len, [self available]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, bufOff_, b, off, toSupply);
  bufOff_ += toSupply;
  return toSupply;
}

- (jlong)skipWithLong:(jlong)n {
  if (n <= 0) {
    return 0;
  }
  jint skip = (jint) JavaLangMath_minWithLong_withLong_(n, [self available]);
  bufOff_ += skip;
  return skip;
}

- (jint)available {
  return maxBuf_ - bufOff_;
}

- (void)close {
  @try {
    [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) close];
  }
  @finally {
    if (!finalized_) {
      (void) LibOrgBouncycastleJcajceIoCipherInputStream_finaliseCipher(self);
    }
  }
  maxBuf_ = bufOff_ = 0;
}

- (void)markWithInt:(jint)readlimit {
}

- (void)reset {
}

- (jboolean)markSupported {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withJavaxCryptoCipher:);
  methods[1].selector = @selector(nextChunk);
  methods[2].selector = @selector(finaliseCipher);
  methods[3].selector = @selector(read);
  methods[4].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(skipWithLong:);
  methods[6].selector = @selector(available);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(markWithInt:);
  methods[9].selector = @selector(reset);
  methods[10].selector = @selector(markSupported);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipher_", "LJavaxCryptoCipher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "inputBuffer_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "finalized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxBuf_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LJavaxCryptoCipher;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoIoInvalidCipherTextIOException;", "read", "[BII", "skip", "J", "mark", "I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceIoCipherInputStream = { "CipherInputStream", "lib.org.bouncycastle.jcajce.io", ptrTable, methods, fields, 7, 0x1, 11, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceIoCipherInputStream;
}

@end

void LibOrgBouncycastleJcajceIoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(LibOrgBouncycastleJcajceIoCipherInputStream *self, JavaIoInputStream *input, JavaxCryptoCipher *cipher) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, input);
  self->inputBuffer_ = [IOSByteArray newArrayWithLength:512];
  self->finalized_ = false;
  self->cipher_ = cipher;
}

LibOrgBouncycastleJcajceIoCipherInputStream *new_LibOrgBouncycastleJcajceIoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(JavaIoInputStream *input, JavaxCryptoCipher *cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceIoCipherInputStream, initWithJavaIoInputStream_withJavaxCryptoCipher_, input, cipher)
}

LibOrgBouncycastleJcajceIoCipherInputStream *create_LibOrgBouncycastleJcajceIoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(JavaIoInputStream *input, JavaxCryptoCipher *cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceIoCipherInputStream, initWithJavaIoInputStream_withJavaxCryptoCipher_, input, cipher)
}

jint LibOrgBouncycastleJcajceIoCipherInputStream_nextChunk(LibOrgBouncycastleJcajceIoCipherInputStream *self) {
  if (self->finalized_) {
    return -1;
  }
  self->bufOff_ = 0;
  self->maxBuf_ = 0;
  while (self->maxBuf_ == 0) {
    jint read = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) readWithByteArray:self->inputBuffer_];
    if (read == -1) {
      self->buf_ = LibOrgBouncycastleJcajceIoCipherInputStream_finaliseCipher(self);
      if ((self->buf_ == nil) || (((IOSByteArray *) nil_chk(self->buf_))->size_ == 0)) {
        return -1;
      }
      self->maxBuf_ = ((IOSByteArray *) nil_chk(self->buf_))->size_;
      return self->maxBuf_;
    }
    self->buf_ = [((JavaxCryptoCipher *) nil_chk(self->cipher_)) updateWithByteArray:self->inputBuffer_ withInt:0 withInt:read];
    if (self->buf_ != nil) {
      self->maxBuf_ = self->buf_->size_;
    }
  }
  return self->maxBuf_;
}

IOSByteArray *LibOrgBouncycastleJcajceIoCipherInputStream_finaliseCipher(LibOrgBouncycastleJcajceIoCipherInputStream *self) {
  @try {
    self->finalized_ = true;
    return [((JavaxCryptoCipher *) nil_chk(self->cipher_)) doFinal];
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    @throw new_LibOrgBouncycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(@"Error finalising cipher", e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceIoCipherInputStream)
