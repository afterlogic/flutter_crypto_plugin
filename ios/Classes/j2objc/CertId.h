//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/CertId.java
//

#ifndef CertId_H
#define CertId_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1Integer;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1X509GeneralName;

@interface LibOrgBouncycastleAsn1CrmfCertId : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)issuer
                                  withLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)serialNumber;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)issuer
                                                 withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber;

+ (LibOrgBouncycastleAsn1CrmfCertId *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                withBoolean:(jboolean)isExplicit;

+ (LibOrgBouncycastleAsn1CrmfCertId *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1X509GeneralName *)getIssuer;

- (LibOrgBouncycastleAsn1ASN1Integer *)getSerialNumber;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CrmfCertId)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertId *LibOrgBouncycastleAsn1CrmfCertId_getInstanceWithId_(id o);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertId *LibOrgBouncycastleAsn1CrmfCertId_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean isExplicit);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_(LibOrgBouncycastleAsn1CrmfCertId *self, LibOrgBouncycastleAsn1X509GeneralName *issuer, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertId *new_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X509GeneralName *issuer, JavaMathBigInteger *serialNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertId *create_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X509GeneralName *issuer, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1CrmfCertId *self, LibOrgBouncycastleAsn1X509GeneralName *issuer, LibOrgBouncycastleAsn1ASN1Integer *serialNumber);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertId *new_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1X509GeneralName *issuer, LibOrgBouncycastleAsn1ASN1Integer *serialNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertId *create_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1X509GeneralName *issuer, LibOrgBouncycastleAsn1ASN1Integer *serialNumber);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfCertId)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertId_H
