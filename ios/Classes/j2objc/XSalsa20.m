//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/XSalsa20.java
//

#include "AlgorithmProvider.h"
#include "BaseKeyGenerator.h"
#include "BaseStreamCipher.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "IOSClass.h"
#include "IvAlgorithmParameters.h"
#include "J2ObjC_source.h"
#include "XSalsa20.h"
#include "XSalsa20Engine.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricXSalsa20 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_init(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricXSalsa20 *new_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricXSalsa20 *create_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXSalsa20

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base;LLibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams;LLibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXSalsa20 = { "XSalsa20", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_init(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20 *new_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20 *create_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricXSalsa20;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base = { "Base", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base_init(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(self, new_LibOrgBouncycastleCryptoEnginesXSalsa20Engine_init(), 24);
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base *new_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base *create_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Base)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricXSalsa20;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"XSalsa20", 256, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)engineToString {
  return @"XSalsa20 IV";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricXSalsa20;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams = { "AlgParams", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams_init(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilIvAlgorithmParameters_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams *new_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams *create_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_AlgParams)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"Cipher.XSALSA20" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_PREFIX, @"$Base")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.XSALSA20" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.XSALSA20" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_PREFIX, @"$AlgParams")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricXSalsa20;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXSalsa20_Mappings)
