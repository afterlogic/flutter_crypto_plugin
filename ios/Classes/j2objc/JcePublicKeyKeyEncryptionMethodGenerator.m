//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcePublicKeyKeyEncryptionMethodGenerator.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCPGKey.h"
#include "DERBitString.h"
#include "DefaultJcaJceHelper.h"
#include "ECCurve.h"
#include "ECDHPublicBCPGKey.h"
#include "ECPoint.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJcePGPUtil.h"
#include "JcaKeyFingerprintCalculator.h"
#include "JcaPGPKeyConverter.h"
#include "JcePublicKeyKeyEncryptionMethodGenerator.h"
#include "MPInteger.h"
#include "NamedJcaJceHelper.h"
#include "OperatorHelper.h"
#include "PGPException.h"
#include "PGPPad.h"
#include "PGPPublicKey.h"
#include "PGPUtil.h"
#include "ProviderJcaJceHelper.h"
#include "PublicKeyAlgorithmTags.h"
#include "PublicKeyKeyEncryptionMethodGenerator.h"
#include "PublicKeyPacket.h"
#include "RFC6637Utils.h"
#include "SubjectPublicKeyInfo.h"
#include "UserKeyingMaterialSpec.h"
#include "X962Parameters.h"
#include "X9ECParameters.h"
#include "X9ECPoint.h"
#include "java/io/IOException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/PrivateKey.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/IllegalBlockSizeException.h"
#include "javax/crypto/KeyAgreement.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/spec/SecretKeySpec.h"

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator () {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *helper_;
  JavaSecuritySecureRandom *random_;
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *keyConverter_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator, helper_, LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator, keyConverter_, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *)

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(self, key);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  (void) [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(keyConverter_)) setProviderWithJavaSecurityProvider:provider];
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *)setProviderWithNSString:(NSString *)providerName {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  (void) [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(keyConverter_)) setProviderWithNSString:providerName];
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  return self;
}

- (IOSByteArray *)encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
                                                                withByteArray:(IOSByteArray *)sessionInfo {
  @try {
    if ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey)) getAlgorithm] == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH) {
      LibOrgBouncycastleBcpgECDHPublicBCPGKey *ecKey = (LibOrgBouncycastleBcpgECDHPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk([pubKey getPublicKeyPacket])) getKey], [LibOrgBouncycastleBcpgECDHPublicBCPGKey class]);
      LibOrgBouncycastleAsn1X9X9ECParameters *x9Params = LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleBcpgECDHPublicBCPGKey *) nil_chk(ecKey)) getCurveOID]);
      JavaSecurityAlgorithmParameters *ecAlgParams = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createAlgorithmParametersWithNSString:@"EC"];
      [((JavaSecurityAlgorithmParameters *) nil_chk(ecAlgParams)) init__WithByteArray:[new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([ecKey getCurveOID]) getEncoded]];
      JavaSecurityKeyPairGenerator *kpGen = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyPairGeneratorWithNSString:@"EC"];
      [((JavaSecurityKeyPairGenerator *) nil_chk(kpGen)) initialize__WithJavaSecuritySpecAlgorithmParameterSpec:[ecAlgParams getParameterSpecWithIOSClass:JavaSecuritySpecAlgorithmParameterSpec_class_()]];
      JavaSecurityKeyPair *ephKP = [kpGen generateKeyPair];
      JavaxCryptoKeyAgreement *agreement = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyAgreementWithNSString:LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getAgreementAlgorithmWithLibOrgBouncycastleBcpgPublicKeyPacket_([pubKey getPublicKeyPacket])];
      [((JavaxCryptoKeyAgreement *) nil_chk(agreement)) init__WithJavaSecurityKey:[((JavaSecurityKeyPair *) nil_chk(ephKP)) getPrivate] withJavaSecuritySpecAlgorithmParameterSpec:new_LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec_initWithByteArray_(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_createUserKeyingMaterialWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_([pubKey getPublicKeyPacket], new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init()))];
      (void) [agreement doPhaseWithJavaSecurityKey:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(keyConverter_)) getPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:pubKey] withBoolean:true];
      id<JavaSecurityKey> key = [agreement generateSecretWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(LibOrgBouncycastleOpenpgpOperatorRFC6637Utils_getKeyEncryptionOIDWithInt_([ecKey getSymmetricKeyAlgorithm]))) getId]];
      JavaxCryptoCipher *c = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyWrapperWithInt:[ecKey getSymmetricKeyAlgorithm]];
      [((JavaxCryptoCipher *) nil_chk(c)) init__WithInt:JavaxCryptoCipher_WRAP_MODE withJavaSecurityKey:key withJavaSecuritySecureRandom:random_];
      IOSByteArray *paddedSessionData = LibOrgBouncycastleOpenpgpOperatorPGPPad_padSessionDataWithByteArray_(sessionInfo);
      IOSByteArray *C = [c wrapWithJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(paddedSessionData, LibOrgBouncycastleOpenpgpPGPUtil_getSymmetricCipherNameWithInt_(IOSByteArray_Get(nil_chk(sessionInfo), 0)))];
      LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *epPubKey = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([((id<JavaSecurityPublicKey>) nil_chk([ephKP getPublic])) getEncoded]);
      LibOrgBouncycastleAsn1X9X9ECPoint *derQ = new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9Params)) getCurve], [((LibOrgBouncycastleAsn1DERBitString *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(epPubKey)) getPublicKeyData])) getBytes]);
      LibOrgBouncycastleMathEcECPoint *publicPoint = [derQ getPoint];
      IOSByteArray *VB = [new_LibOrgBouncycastleBcpgMPInteger_initWithJavaMathBigInteger_(new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(publicPoint)) getEncodedWithBoolean:false])) getEncoded];
      IOSByteArray *rv = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(VB))->size_ + 1 + ((IOSByteArray *) nil_chk(C))->size_];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(VB, 0, rv, 0, VB->size_);
      *IOSByteArray_GetRef(rv, VB->size_) = (jbyte) C->size_;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(C, 0, rv, VB->size_ + 1, C->size_);
      return rv;
    }
    else {
      JavaxCryptoCipher *c = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createPublicKeyCipherWithInt:[pubKey getAlgorithm]];
      id<JavaSecurityKey> key = [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(keyConverter_)) getPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:pubKey];
      [((JavaxCryptoCipher *) nil_chk(c)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:key withJavaSecuritySecureRandom:random_];
      return [c doFinalWithByteArray:sessionInfo];
    }
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"illegal block size: ", [e getMessage]), e);
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"bad padding: ", [e getMessage]), e);
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"key invalid: ", [e getMessage]), e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"unable to encode MPI: ", [e getMessage]), e);
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"unable to set up ephemeral keys: ", [e getMessage]), e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[1].selector = @selector(setProviderWithJavaSecurityProvider:);
  methods[2].selector = @selector(setProviderWithNSString:);
  methods[3].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[4].selector = @selector(encryptSessionInfoWithLibOrgBouncycastleOpenpgpPGPPublicKey:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyConverter_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleOpenpgpPGPPublicKey;", "setProvider", "LJavaSecurityProvider;", "LNSString;", "setSecureRandom", "LJavaSecuritySecureRandom;", "encryptSessionInfo", "LLibOrgBouncycastleOpenpgpPGPPublicKey;[B", "LLibOrgBouncycastleOpenpgpPGPException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator = { "JcePublicKeyKeyEncryptionMethodGenerator", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *self, LibOrgBouncycastleOpenpgpPGPPublicKey *key) {
  LibOrgBouncycastleOpenpgpOperatorPublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(self, key);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
  self->keyConverter_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_init();
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator, initWithLibOrgBouncycastleOpenpgpPGPPublicKey_, key)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator, initWithLibOrgBouncycastleOpenpgpPGPPublicKey_, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator)
