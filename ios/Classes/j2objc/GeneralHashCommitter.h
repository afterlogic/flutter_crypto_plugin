//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/commitments/GeneralHashCommitter.java
//

#ifndef GeneralHashCommitter_H
#define GeneralHashCommitter_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "Committer.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoCommitment;
@protocol LibOrgBouncycastleCryptoExtendedDigest;

@interface LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter : NSObject < LibOrgBouncycastleCryptoCommitter >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoExtendedDigest:(id<LibOrgBouncycastleCryptoExtendedDigest>)digest
                                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (LibOrgBouncycastleCryptoCommitment *)commitWithByteArray:(IOSByteArray *)message;

- (jboolean)isRevealedWithLibOrgBouncycastleCryptoCommitment:(LibOrgBouncycastleCryptoCommitment *)commitment
                                               withByteArray:(IOSByteArray *)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter_initWithLibOrgBouncycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter *self, id<LibOrgBouncycastleCryptoExtendedDigest> digest, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter *new_LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter_initWithLibOrgBouncycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_(id<LibOrgBouncycastleCryptoExtendedDigest> digest, JavaSecuritySecureRandom *random) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter *create_LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter_initWithLibOrgBouncycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_(id<LibOrgBouncycastleCryptoExtendedDigest> digest, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoCommitmentsGeneralHashCommitter)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // GeneralHashCommitter_H
