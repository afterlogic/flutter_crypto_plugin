//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/Salsa20Engine.java
//

#ifndef Salsa20Engine_H
#define Salsa20Engine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "SkippingStreamCipher.h"

@class IOSByteArray;
@class IOSIntArray;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoEnginesSalsa20Engine : NSObject < LibOrgBouncycastleCryptoSkippingStreamCipher > {
 @public
  jint rounds_;
  IOSIntArray *engineState_;
  IOSIntArray *x_;
}
@property (readonly, class) jint DEFAULT_ROUNDS NS_SWIFT_NAME(DEFAULT_ROUNDS);
@property (readonly, class) IOSByteArray *sigma NS_SWIFT_NAME(sigma);
@property (readonly, class) IOSByteArray *tau NS_SWIFT_NAME(tau);

+ (jint)DEFAULT_ROUNDS;

+ (IOSByteArray *)sigma;

+ (IOSByteArray *)tau;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)rounds;

- (NSString *)getAlgorithmName;

- (jlong)getPosition;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

- (jbyte)returnByteWithByte:(jbyte)inArg;

+ (void)salsaCoreWithInt:(jint)rounds
            withIntArray:(IOSIntArray *)input
            withIntArray:(IOSIntArray *)x;

- (jlong)seekToWithLong:(jlong)position;

- (jlong)skipWithLong:(jlong)numberOfBytes;

#pragma mark Protected

- (void)advanceCounter;

- (void)advanceCounterWithLong:(jlong)diff;

- (void)generateKeyStreamWithByteArray:(IOSByteArray *)output;

- (jlong)getCounter;

- (jint)getNonceSize;

- (void)packTauOrSigmaWithInt:(jint)keyLength
                 withIntArray:(IOSIntArray *)state
                      withInt:(jint)stateOffset;

- (void)resetCounter;

- (void)retreatCounter;

- (void)retreatCounterWithLong:(jlong)diff;

+ (jint)rotlWithInt:(jint)x
            withInt:(jint)y;

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoEnginesSalsa20Engine)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesSalsa20Engine, engineState_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesSalsa20Engine, x_, IOSIntArray *)

inline jint LibOrgBouncycastleCryptoEnginesSalsa20Engine_get_DEFAULT_ROUNDS(void);
#define LibOrgBouncycastleCryptoEnginesSalsa20Engine_DEFAULT_ROUNDS 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesSalsa20Engine, DEFAULT_ROUNDS, jint)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesSalsa20Engine_get_sigma(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoEnginesSalsa20Engine_sigma;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesSalsa20Engine, sigma, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesSalsa20Engine_get_tau(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoEnginesSalsa20Engine_tau;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesSalsa20Engine, tau, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesSalsa20Engine_init(LibOrgBouncycastleCryptoEnginesSalsa20Engine *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSalsa20Engine *new_LibOrgBouncycastleCryptoEnginesSalsa20Engine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSalsa20Engine *create_LibOrgBouncycastleCryptoEnginesSalsa20Engine_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesSalsa20Engine_initWithInt_(LibOrgBouncycastleCryptoEnginesSalsa20Engine *self, jint rounds);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSalsa20Engine *new_LibOrgBouncycastleCryptoEnginesSalsa20Engine_initWithInt_(jint rounds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSalsa20Engine *create_LibOrgBouncycastleCryptoEnginesSalsa20Engine_initWithInt_(jint rounds);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesSalsa20Engine_salsaCoreWithInt_withIntArray_withIntArray_(jint rounds, IOSIntArray *input, IOSIntArray *x);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(jint x, jint y);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesSalsa20Engine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Salsa20Engine_H
