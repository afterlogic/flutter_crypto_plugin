//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPUtil.java
//

#include "ASN1Encodable.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ArmoredInputStream.h"
#include "Arrays.h"
#include "Base64.h"
#include "DecoderException.h"
#include "HashAlgorithmTags.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MPInteger.h"
#include "PGPException.h"
#include "PGPLiteralDataGenerator.h"
#include "PGPUtil.h"
#include "PublicKeyAlgorithmTags.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Date.h"

@interface LibOrgBouncycastleOpenpgpPGPUtil ()

+ (void)pipeFileContentsWithJavaIoFile:(JavaIoFile *)file
                withJavaIoOutputStream:(JavaIoOutputStream *)pOut
                               withInt:(jint)bufferSize;

+ (jboolean)isPossiblyBase64WithInt:(jint)ch;

@end

inline NSString *LibOrgBouncycastleOpenpgpPGPUtil_get_defProvider(void);
inline NSString *LibOrgBouncycastleOpenpgpPGPUtil_set_defProvider(NSString *value);
static NSString *LibOrgBouncycastleOpenpgpPGPUtil_defProvider = @"BC";
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleOpenpgpPGPUtil, defProvider, NSString *)

inline jint LibOrgBouncycastleOpenpgpPGPUtil_get_READ_AHEAD(void);
#define LibOrgBouncycastleOpenpgpPGPUtil_READ_AHEAD 60
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleOpenpgpPGPUtil, READ_AHEAD, jint)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPUtil_pipeFileContentsWithJavaIoFile_withJavaIoOutputStream_withInt_(JavaIoFile *file, JavaIoOutputStream *pOut, jint bufferSize);

__attribute__((unused)) static jboolean LibOrgBouncycastleOpenpgpPGPUtil_isPossiblyBase64WithInt_(jint ch);

@implementation LibOrgBouncycastleOpenpgpPGPUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpPGPUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getDigestNameWithInt:(jint)hashAlgorithm {
  return LibOrgBouncycastleOpenpgpPGPUtil_getDigestNameWithInt_(hashAlgorithm);
}

+ (NSString *)getSignatureNameWithInt:(jint)keyAlgorithm
                              withInt:(jint)hashAlgorithm {
  return LibOrgBouncycastleOpenpgpPGPUtil_getSignatureNameWithInt_withInt_(keyAlgorithm, hashAlgorithm);
}

+ (NSString *)getSymmetricCipherNameWithInt:(jint)algorithm {
  return LibOrgBouncycastleOpenpgpPGPUtil_getSymmetricCipherNameWithInt_(algorithm);
}

+ (NSString *)getDefaultProvider {
  return LibOrgBouncycastleOpenpgpPGPUtil_getDefaultProvider();
}

+ (void)setDefaultProviderWithNSString:(NSString *)provider {
  LibOrgBouncycastleOpenpgpPGPUtil_setDefaultProviderWithNSString_(provider);
}

+ (IOSObjectArray *)dsaSigToMpiWithByteArray:(IOSByteArray *)encoding {
  return LibOrgBouncycastleOpenpgpPGPUtil_dsaSigToMpiWithByteArray_(encoding);
}

+ (IOSByteArray *)makeRandomKeyWithInt:(jint)algorithm
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastleOpenpgpPGPUtil_makeRandomKeyWithInt_withJavaSecuritySecureRandom_(algorithm, random);
}

+ (void)writeFileToLiteralDataWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                            withChar:(jchar)fileType
                                      withJavaIoFile:(JavaIoFile *)file {
  LibOrgBouncycastleOpenpgpPGPUtil_writeFileToLiteralDataWithJavaIoOutputStream_withChar_withJavaIoFile_(outArg, fileType, file);
}

+ (void)writeFileToLiteralDataWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                            withChar:(jchar)fileType
                                      withJavaIoFile:(JavaIoFile *)file
                                       withByteArray:(IOSByteArray *)buffer {
  LibOrgBouncycastleOpenpgpPGPUtil_writeFileToLiteralDataWithJavaIoOutputStream_withChar_withJavaIoFile_withByteArray_(outArg, fileType, file, buffer);
}

+ (void)pipeFileContentsWithJavaIoFile:(JavaIoFile *)file
                withJavaIoOutputStream:(JavaIoOutputStream *)pOut
                               withInt:(jint)bufferSize {
  LibOrgBouncycastleOpenpgpPGPUtil_pipeFileContentsWithJavaIoFile_withJavaIoOutputStream_withInt_(file, pOut, bufferSize);
}

+ (jboolean)isPossiblyBase64WithInt:(jint)ch {
  return LibOrgBouncycastleOpenpgpPGPUtil_isPossiblyBase64WithInt_(ch);
}

+ (JavaIoInputStream *)getDecoderStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(inArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 4, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleBcpgMPInteger;", 0x8, 8, 9, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 11, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 13, 14, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 15, 14, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 17, 14, -1, -1, -1 },
    { NULL, "Z", 0xa, 18, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x9, 19, 20, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDigestNameWithInt:);
  methods[2].selector = @selector(getSignatureNameWithInt:withInt:);
  methods[3].selector = @selector(getSymmetricCipherNameWithInt:);
  methods[4].selector = @selector(getDefaultProvider);
  methods[5].selector = @selector(setDefaultProviderWithNSString:);
  methods[6].selector = @selector(dsaSigToMpiWithByteArray:);
  methods[7].selector = @selector(makeRandomKeyWithInt:withJavaSecuritySecureRandom:);
  methods[8].selector = @selector(writeFileToLiteralDataWithJavaIoOutputStream:withChar:withJavaIoFile:);
  methods[9].selector = @selector(writeFileToLiteralDataWithJavaIoOutputStream:withChar:withJavaIoFile:withByteArray:);
  methods[10].selector = @selector(pipeFileContentsWithJavaIoFile:withJavaIoOutputStream:withInt:);
  methods[11].selector = @selector(isPossiblyBase64WithInt:);
  methods[12].selector = @selector(getDecoderStreamWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defProvider", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 21, -1, -1 },
    { "READ_AHEAD", "I", .constantValue.asInt = LibOrgBouncycastleOpenpgpPGPUtil_READ_AHEAD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getDigestName", "I", "LLibOrgBouncycastleOpenpgpPGPException;", "getSignatureName", "II", "getSymmetricCipherName", "setDefaultProvider", "LNSString;", "dsaSigToMpi", "[B", "makeRandomKey", "ILJavaSecuritySecureRandom;", "writeFileToLiteralData", "LJavaIoOutputStream;CLJavaIoFile;", "LJavaIoIOException;", "LJavaIoOutputStream;CLJavaIoFile;[B", "pipeFileContents", "LJavaIoFile;LJavaIoOutputStream;I", "isPossiblyBase64", "getDecoderStream", "LJavaIoInputStream;", &LibOrgBouncycastleOpenpgpPGPUtil_defProvider, "LLibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPUtil = { "PGPUtil", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 13, 2, -1, 22, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPUtil;
}

@end

void LibOrgBouncycastleOpenpgpPGPUtil_init(LibOrgBouncycastleOpenpgpPGPUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpPGPUtil *new_LibOrgBouncycastleOpenpgpPGPUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPUtil, init)
}

LibOrgBouncycastleOpenpgpPGPUtil *create_LibOrgBouncycastleOpenpgpPGPUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPUtil, init)
}

NSString *LibOrgBouncycastleOpenpgpPGPUtil_getDigestNameWithInt_(jint hashAlgorithm) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  switch (hashAlgorithm) {
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1:
    return @"SHA1";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_MD2:
    return @"MD2";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_MD5:
    return @"MD5";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_RIPEMD160:
    return @"RIPEMD160";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA256:
    return @"SHA256";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA384:
    return @"SHA384";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA512:
    return @"SHA512";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA224:
    return @"SHA224";
    case LibOrgBouncycastleBcpgHashAlgorithmTags_TIGER_192:
    return @"TIGER";
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown hash algorithm tag in getDigestName: ", hashAlgorithm));
  }
}

NSString *LibOrgBouncycastleOpenpgpPGPUtil_getSignatureNameWithInt_withInt_(jint keyAlgorithm, jint hashAlgorithm) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  NSString *encAlg;
  switch (keyAlgorithm) {
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN:
    encAlg = @"RSA";
    break;
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
    encAlg = @"DSA";
    break;
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
    encAlg = @"ElGamal";
    break;
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown algorithm tag in signature:", keyAlgorithm));
  }
  return JreStrcat("$$$", LibOrgBouncycastleOpenpgpPGPUtil_getDigestNameWithInt_(hashAlgorithm), @"with", encAlg);
}

NSString *LibOrgBouncycastleOpenpgpPGPUtil_getSymmetricCipherNameWithInt_(jint algorithm) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  switch (algorithm) {
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL:
    return nil;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_TRIPLE_DES:
    return @"DESEDE";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_IDEA:
    return @"IDEA";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAST5:
    return @"CAST5";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_BLOWFISH:
    return @"Blowfish";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_SAFER:
    return @"SAFER";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_DES:
    return @"DES";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128:
    return @"AES";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_192:
    return @"AES";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256:
    return @"AES";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_128:
    return @"Camellia";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_192:
    return @"Camellia";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_256:
    return @"Camellia";
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_TWOFISH:
    return @"Twofish";
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown symmetric algorithm: ", algorithm));
  }
}

NSString *LibOrgBouncycastleOpenpgpPGPUtil_getDefaultProvider() {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  return LibOrgBouncycastleOpenpgpPGPUtil_defProvider;
}

void LibOrgBouncycastleOpenpgpPGPUtil_setDefaultProviderWithNSString_(NSString *provider) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  LibOrgBouncycastleOpenpgpPGPUtil_defProvider = provider;
}

IOSObjectArray *LibOrgBouncycastleOpenpgpPGPUtil_dsaSigToMpiWithByteArray_(IOSByteArray *encoding) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(encoding);
  LibOrgBouncycastleAsn1ASN1Integer *i1;
  LibOrgBouncycastleAsn1ASN1Integer *i2;
  @try {
    LibOrgBouncycastleAsn1ASN1Sequence *s = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([aIn readObject], [LibOrgBouncycastleAsn1ASN1Sequence class]);
    i1 = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(s)) getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1Integer class]);
    i2 = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([s getObjectAtWithInt:1], [LibOrgBouncycastleAsn1ASN1Integer class]);
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"exception encoding signature", e);
  }
  IOSObjectArray *values = [IOSObjectArray newArrayWithLength:2 type:LibOrgBouncycastleBcpgMPInteger_class_()];
  (void) IOSObjectArray_SetAndConsume(values, 0, new_LibOrgBouncycastleBcpgMPInteger_initWithJavaMathBigInteger_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(i1)) getValue]));
  (void) IOSObjectArray_SetAndConsume(values, 1, new_LibOrgBouncycastleBcpgMPInteger_initWithJavaMathBigInteger_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(i2)) getValue]));
  return values;
}

IOSByteArray *LibOrgBouncycastleOpenpgpPGPUtil_makeRandomKeyWithInt_withJavaSecuritySecureRandom_(jint algorithm, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  jint keySize = 0;
  switch (algorithm) {
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_TRIPLE_DES:
    keySize = 192;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_IDEA:
    keySize = 128;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAST5:
    keySize = 128;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_BLOWFISH:
    keySize = 128;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_SAFER:
    keySize = 128;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_DES:
    keySize = 64;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128:
    keySize = 128;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_192:
    keySize = 192;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256:
    keySize = 256;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_128:
    keySize = 128;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_192:
    keySize = 192;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_256:
    keySize = 256;
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_TWOFISH:
    keySize = 256;
    break;
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown symmetric algorithm: ", algorithm));
  }
  IOSByteArray *keyBytes = [IOSByteArray newArrayWithLength:(keySize + 7) / 8];
  [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:keyBytes];
  return keyBytes;
}

void LibOrgBouncycastleOpenpgpPGPUtil_writeFileToLiteralDataWithJavaIoOutputStream_withChar_withJavaIoFile_(JavaIoOutputStream *outArg, jchar fileType, JavaIoFile *file) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  LibOrgBouncycastleOpenpgpPGPLiteralDataGenerator *lData = new_LibOrgBouncycastleOpenpgpPGPLiteralDataGenerator_init();
  JavaIoOutputStream *pOut = [lData openWithJavaIoOutputStream:outArg withChar:fileType withJavaIoFile:file];
  LibOrgBouncycastleOpenpgpPGPUtil_pipeFileContentsWithJavaIoFile_withJavaIoOutputStream_withInt_(file, pOut, 32768);
}

void LibOrgBouncycastleOpenpgpPGPUtil_writeFileToLiteralDataWithJavaIoOutputStream_withChar_withJavaIoFile_withByteArray_(JavaIoOutputStream *outArg, jchar fileType, JavaIoFile *file, IOSByteArray *buffer) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  LibOrgBouncycastleOpenpgpPGPLiteralDataGenerator *lData = new_LibOrgBouncycastleOpenpgpPGPLiteralDataGenerator_init();
  JavaIoOutputStream *pOut = [lData openWithJavaIoOutputStream:outArg withChar:fileType withNSString:[((JavaIoFile *) nil_chk(file)) getName] withJavaUtilDate:new_JavaUtilDate_initWithLong_([file lastModified]) withByteArray:buffer];
  LibOrgBouncycastleOpenpgpPGPUtil_pipeFileContentsWithJavaIoFile_withJavaIoOutputStream_withInt_(file, pOut, ((IOSByteArray *) nil_chk(buffer))->size_);
}

void LibOrgBouncycastleOpenpgpPGPUtil_pipeFileContentsWithJavaIoFile_withJavaIoOutputStream_withInt_(JavaIoFile *file, JavaIoOutputStream *pOut, jint bufferSize) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:bufferSize];
  JavaIoFileInputStream *in = new_JavaIoFileInputStream_initWithJavaIoFile_(file);
  @try {
    jint len;
    while ((len = [in readWithByteArray:buf]) > 0) {
      [((JavaIoOutputStream *) nil_chk(pOut)) writeWithByteArray:buf withInt:0 withInt:len];
    }
    [((JavaIoOutputStream *) nil_chk(pOut)) close];
  }
  @finally {
    LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(buf, (jbyte) 0);
    @try {
      [in close];
    }
    @catch (JavaIoIOException *ignored) {
    }
  }
}

jboolean LibOrgBouncycastleOpenpgpPGPUtil_isPossiblyBase64WithInt_(jint ch) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || (ch == '+') || (ch == '/') || (ch == 0x000d) || (ch == 0x000a);
}

JavaIoInputStream *LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  LibOrgBouncycastleOpenpgpPGPUtil_initialize();
  if (![((JavaIoInputStream *) nil_chk(inArg)) markSupported]) {
    inArg = new_LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt_initWithJavaIoInputStream_(inArg);
  }
  [inArg markWithInt:LibOrgBouncycastleOpenpgpPGPUtil_READ_AHEAD];
  jint ch = [inArg read];
  if ((ch & (jint) 0x80) != 0) {
    [inArg reset];
    return inArg;
  }
  else {
    if (!LibOrgBouncycastleOpenpgpPGPUtil_isPossiblyBase64WithInt_(ch)) {
      [inArg reset];
      return new_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_(inArg);
    }
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:LibOrgBouncycastleOpenpgpPGPUtil_READ_AHEAD];
    jint count = 1;
    jint index = 1;
    *IOSByteArray_GetRef(buf, 0) = (jbyte) ch;
    while (count != LibOrgBouncycastleOpenpgpPGPUtil_READ_AHEAD && (ch = [inArg read]) >= 0) {
      if (!LibOrgBouncycastleOpenpgpPGPUtil_isPossiblyBase64WithInt_(ch)) {
        [inArg reset];
        return new_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_(inArg);
      }
      if (ch != 0x000a && ch != 0x000d) {
        *IOSByteArray_GetRef(buf, index++) = (jbyte) ch;
      }
      count++;
    }
    [inArg reset];
    if (count < 4) {
      return new_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_(inArg);
    }
    IOSByteArray *firstBlock = [IOSByteArray newArrayWithLength:8];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, firstBlock, 0, firstBlock->size_);
    @try {
      IOSByteArray *decoded = LibOrgBouncycastleUtilEncodersBase64_decodeWithByteArray_(firstBlock);
      if ((IOSByteArray_Get(nil_chk(decoded), 0) & (jint) 0x80) != 0) {
        return new_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_withBoolean_(inArg, false);
      }
      return new_LibOrgBouncycastleBcpgArmoredInputStream_initWithJavaIoInputStream_(inArg);
    }
    @catch (LibOrgBouncycastleUtilEncodersDecoderException *e) {
      @throw new_JavaIoIOException_initWithNSString_([e getMessage]);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPUtil)

@implementation LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input {
  LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt_initWithJavaIoInputStream_(self, input);
  return self;
}

- (jint)available {
  @synchronized(self) {
    jint result = [super available];
    if (result < 0) {
      result = JavaLangInteger_MAX_VALUE;
    }
    return result;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(available);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "LLibOrgBouncycastleOpenpgpPGPUtil;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt = { "BufferedInputStreamExt", "lib.org.bouncycastle.openpgp", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt;
}

@end

void LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt_initWithJavaIoInputStream_(LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt *self, JavaIoInputStream *input) {
  JavaIoBufferedInputStream_initWithJavaIoInputStream_(self, input);
}

LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt *new_LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt_initWithJavaIoInputStream_(JavaIoInputStream *input) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt, initWithJavaIoInputStream_, input)
}

LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt *create_LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt_initWithJavaIoInputStream_(JavaIoInputStream *input) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt, initWithJavaIoInputStream_, input)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPUtil_BufferedInputStreamExt)
