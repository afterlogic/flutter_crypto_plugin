//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsDSASigner.java
//

#include "AbstractTlsSigner.h"
#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "DSA.h"
#include "DSADigestSigner.h"
#include "Digest.h"
#include "HashAlgorithm.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NullDigest.h"
#include "ParametersWithRandom.h"
#include "SignatureAndHashAlgorithm.h"
#include "Signer.h"
#include "TlsContext.h"
#include "TlsDSASigner.h"
#include "TlsUtils.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"

@implementation LibOrgBouncycastleCryptoTlsTlsDSASigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsTlsDSASigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)generateRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                      withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey
                                                                                 withByteArray:(IOSByteArray *)hash_ {
  id<LibOrgBouncycastleCryptoSigner> signer = [self makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:true withBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(privateKey, [((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(self->context_)) getSecureRandom])];
  if (algorithm == nil) {
    [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:16 withInt:20];
  }
  else {
    [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:0 withInt:((IOSByteArray *) nil_chk(hash_))->size_];
  }
  return [signer generateSignature];
}

- (jboolean)verifyRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                         withByteArray:(IOSByteArray *)sigBytes
                              withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey
                                                                         withByteArray:(IOSByteArray *)hash_ {
  id<LibOrgBouncycastleCryptoSigner> signer = [self makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:true withBoolean:false withLibOrgBouncycastleCryptoCipherParameters:publicKey];
  if (algorithm == nil) {
    [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:16 withInt:20];
  }
  else {
    [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:0 withInt:((IOSByteArray *) nil_chk(hash_))->size_];
  }
  return [signer verifySignatureWithByteArray:sigBytes];
}

- (id<LibOrgBouncycastleCryptoSigner>)createSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                  withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey {
  return [self makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:false withBoolean:true withLibOrgBouncycastleCryptoCipherParameters:privateKey];
}

- (id<LibOrgBouncycastleCryptoSigner>)createVerifyerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                    withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey {
  return [self makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:false withBoolean:false withLibOrgBouncycastleCryptoCipherParameters:publicKey];
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)makeInitParametersWithBoolean:(jboolean)forSigning
                                 withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)cp {
  return cp;
}

- (id<LibOrgBouncycastleCryptoSigner>)makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                                             withBoolean:(jboolean)raw
                                                                                             withBoolean:(jboolean)forSigning
                                                            withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)cp {
  if ((algorithm != nil) != LibOrgBouncycastleCryptoTlsTlsUtils_isTLSv12WithLibOrgBouncycastleCryptoTlsTlsContext_(context_)) {
    @throw new_JavaLangIllegalStateException_init();
  }
  if (algorithm != nil && [algorithm getSignature] != [self getSignatureAlgorithm]) {
    @throw new_JavaLangIllegalStateException_init();
  }
  jshort hashAlgorithm = algorithm == nil ? LibOrgBouncycastleCryptoTlsHashAlgorithm_sha1 : [algorithm getHash];
  id<LibOrgBouncycastleCryptoDigest> d = raw ? new_LibOrgBouncycastleCryptoDigestsNullDigest_init() : LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_(hashAlgorithm);
  id<LibOrgBouncycastleCryptoSigner> s = new_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_([self createDSAImplWithShort:hashAlgorithm], d);
  [s init__WithBoolean:forSigning withLibOrgBouncycastleCryptoCipherParameters:[self makeInitParametersWithBoolean:forSigning withLibOrgBouncycastleCryptoCipherParameters:cp]];
  return s;
}

- (jshort)getSignatureAlgorithm {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<LibOrgBouncycastleCryptoDSA>)createDSAImplWithShort:(jshort)hashAlgorithm {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "S", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDSA;", 0x404, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[2].selector = @selector(verifyRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withByteArray:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[3].selector = @selector(createSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[4].selector = @selector(createVerifyerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[5].selector = @selector(makeInitParametersWithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[6].selector = @selector(makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withBoolean:withBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[7].selector = @selector(getSignatureAlgorithm);
  methods[8].selector = @selector(createDSAImplWithShort:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generateRawSignature", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B", "LLibOrgBouncycastleCryptoCryptoException;", "verifyRawSignature", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;[BLLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B", "createSigner", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "createVerifyer", "makeInitParameters", "ZLLibOrgBouncycastleCryptoCipherParameters;", "makeSigner", "LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;ZZLLibOrgBouncycastleCryptoCipherParameters;", "createDSAImpl", "S" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsDSASigner = { "TlsDSASigner", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsDSASigner;
}

@end

void LibOrgBouncycastleCryptoTlsTlsDSASigner_init(LibOrgBouncycastleCryptoTlsTlsDSASigner *self) {
  LibOrgBouncycastleCryptoTlsAbstractTlsSigner_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsDSASigner)
