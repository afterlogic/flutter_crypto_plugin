//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/BufferedBlockCipher.java
//

#include "BlockCipher.h"
#include "BufferedBlockCipher.h"
#include "CipherParameters.h"
#include "DataLengthException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OutputLengthException.h"
#include "StreamCipher.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@implementation LibOrgBouncycastleCryptoBufferedBlockCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoBufferedBlockCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (id<LibOrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher {
  return cipher_;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  self->forEncryption_ = forEncryption;
  [self reset];
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:params];
}

- (jint)getBlockSize {
  return [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
}

- (jint)getUpdateOutputSizeWithInt:(jint)len {
  jint total = len + bufOff_;
  jint leftOver;
  if (pgpCFB_) {
    if (forEncryption_) {
      leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_ - ([((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize] + 2);
    }
    else {
      leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_;
    }
  }
  else {
    leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_;
  }
  return total - leftOver;
}

- (jint)getOutputSizeWithInt:(jint)length {
  return length + bufOff_;
}

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  jint resultLen = 0;
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  if (bufOff_ == buf_->size_) {
    resultLen = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
  }
  return resultLen;
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  jint blockSize = [self getBlockSize];
  jint length = [self getUpdateOutputSizeWithInt:len];
  if (length > 0) {
    if ((outOff + length) > ((IOSByteArray *) nil_chk(outArg))->size_) {
      @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
    }
  }
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    resultLen += [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > ((IOSByteArray *) nil_chk(buf_))->size_) {
      resultLen += [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff + resultLen];
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    resultLen += [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff + resultLen];
    bufOff_ = 0;
  }
  return resultLen;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  @try {
    jint resultLen = 0;
    if (outOff + bufOff_ > ((IOSByteArray *) nil_chk(outArg))->size_) {
      @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short for doFinal()");
    }
    if (bufOff_ != 0) {
      if (!partialBlockOkay_) {
        @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"data not block size aligned");
      }
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:buf_ withInt:0];
      resultLen = bufOff_;
      bufOff_ = 0;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, outArg, outOff, resultLen);
    }
    return resultLen;
  }
  @finally {
    [self reset];
  }
}

- (void)reset {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i++) {
    *IOSByteArray_GetRef(buf_, i) = 0;
  }
  bufOff_ = 0;
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 11, 9, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[2].selector = @selector(getUnderlyingCipher);
  methods[3].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[6].selector = @selector(getOutputSizeWithInt:);
  methods[7].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[8].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buf_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "partialBlockOkay_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pgpCFB_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "getUpdateOutputSize", "I", "getOutputSize", "processByte", "B[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "processBytes", "[BII[BI", "doFinal", "[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;LLibOrgBouncycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoBufferedBlockCipher = { "BufferedBlockCipher", "lib.org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x1, 11, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoBufferedBlockCipher;
}

@end

void LibOrgBouncycastleCryptoBufferedBlockCipher_init(LibOrgBouncycastleCryptoBufferedBlockCipher *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoBufferedBlockCipher *new_LibOrgBouncycastleCryptoBufferedBlockCipher_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoBufferedBlockCipher, init)
}

LibOrgBouncycastleCryptoBufferedBlockCipher *create_LibOrgBouncycastleCryptoBufferedBlockCipher_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoBufferedBlockCipher, init)
}

void LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoBufferedBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  NSObject_init(self);
  self->cipher_ = cipher;
  self->buf_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->bufOff_ = 0;
  NSString *name = [cipher getAlgorithmName];
  jint idx = [((NSString *) nil_chk(name)) java_indexOf:'/'] + 1;
  self->pgpCFB_ = (idx > 0 && [name java_hasPrefix:@"PGP" offset:idx]);
  if (self->pgpCFB_ || [LibOrgBouncycastleCryptoStreamCipher_class_() isInstance:cipher]) {
    self->partialBlockOkay_ = true;
  }
  else {
    self->partialBlockOkay_ = (idx > 0 && ([name java_hasPrefix:@"OpenPGP" offset:idx]));
  }
}

LibOrgBouncycastleCryptoBufferedBlockCipher *new_LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoBufferedBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoBufferedBlockCipher *create_LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoBufferedBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoBufferedBlockCipher)
