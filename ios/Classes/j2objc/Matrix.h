//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/linearalgebra/Matrix.java
//

#ifndef Matrix_H
#define Matrix_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastlePqcMathLinearalgebraPermutation;
@class LibOrgBouncycastlePqcMathLinearalgebraVector;

@interface LibOrgBouncycastlePqcMathLinearalgebraMatrix : NSObject {
 @public
  jint numRows_;
  jint numColumns_;
}
@property (readonly, class) jchar MATRIX_TYPE_ZERO NS_SWIFT_NAME(MATRIX_TYPE_ZERO);
@property (readonly, class) jchar MATRIX_TYPE_UNIT NS_SWIFT_NAME(MATRIX_TYPE_UNIT);
@property (readonly, class) jchar MATRIX_TYPE_RANDOM_LT NS_SWIFT_NAME(MATRIX_TYPE_RANDOM_LT);
@property (readonly, class) jchar MATRIX_TYPE_RANDOM_UT NS_SWIFT_NAME(MATRIX_TYPE_RANDOM_UT);
@property (readonly, class) jchar MATRIX_TYPE_RANDOM_REGULAR NS_SWIFT_NAME(MATRIX_TYPE_RANDOM_REGULAR);

+ (jchar)MATRIX_TYPE_ZERO;

+ (jchar)MATRIX_TYPE_UNIT;

+ (jchar)MATRIX_TYPE_RANDOM_LT;

+ (jchar)MATRIX_TYPE_RANDOM_UT;

+ (jchar)MATRIX_TYPE_RANDOM_REGULAR;

#pragma mark Public

- (instancetype __nonnull)init;

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)computeInverse;

- (IOSByteArray *)getEncoded;

- (jint)getNumColumns;

- (jint)getNumRows;

- (jboolean)isZero;

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)vector;

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:(LibOrgBouncycastlePqcMathLinearalgebraMatrix *)a;

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:(LibOrgBouncycastlePqcMathLinearalgebraPermutation *)p;

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)vector;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcMathLinearalgebraMatrix)

inline jchar LibOrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_ZERO(void);
#define LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_ZERO 'Z'
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_ZERO, jchar)

inline jchar LibOrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_UNIT(void);
#define LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_UNIT 'I'
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_UNIT, jchar)

inline jchar LibOrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_RANDOM_LT(void);
#define LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_LT 'L'
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_RANDOM_LT, jchar)

inline jchar LibOrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_RANDOM_UT(void);
#define LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_UT 'U'
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_RANDOM_UT, jchar)

inline jchar LibOrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_RANDOM_REGULAR(void);
#define LibOrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_REGULAR 'R'
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_RANDOM_REGULAR, jchar)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(LibOrgBouncycastlePqcMathLinearalgebraMatrix *self);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcMathLinearalgebraMatrix)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Matrix_H
