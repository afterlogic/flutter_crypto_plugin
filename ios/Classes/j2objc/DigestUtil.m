//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/DigestUtil.java
//

#include "ASN1ObjectIdentifier.h"
#include "Digest.h"
#include "DigestUtil.h"
#include "J2ObjC_source.h"
#include "NISTObjectIdentifiers.h"
#include "SHA256Digest.h"
#include "SHA512Digest.h"
#include "SHAKEDigest.h"
#include "Xof.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

inline id<JavaUtilMap> LibOrgBouncycastlePqcCryptoXmssDigestUtil_get_nameToOid(void);
inline id<JavaUtilMap> LibOrgBouncycastlePqcCryptoXmssDigestUtil_set_nameToOid(id<JavaUtilMap> value);
static id<JavaUtilMap> LibOrgBouncycastlePqcCryptoXmssDigestUtil_nameToOid;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastlePqcCryptoXmssDigestUtil, nameToOid, id<JavaUtilMap>)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastlePqcCryptoXmssDigestUtil)

@implementation LibOrgBouncycastlePqcCryptoXmssDigestUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoXmssDigestUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<LibOrgBouncycastleCryptoDigest>)getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return LibOrgBouncycastlePqcCryptoXmssDigestUtil_getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getDigestOIDWithNSString:(NSString *)name {
  return LibOrgBouncycastlePqcCryptoXmssDigestUtil_getDigestOIDWithNSString_(name);
}

+ (jint)getDigestSizeWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  return LibOrgBouncycastlePqcCryptoXmssDigestUtil_getDigestSizeWithLibOrgBouncycastleCryptoDigest_(digest);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[2].selector = @selector(getDigestOIDWithNSString:);
  methods[3].selector = @selector(getDigestSizeWithLibOrgBouncycastleCryptoDigest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nameToOid", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 6, 7, -1 },
  };
  static const void *ptrTable[] = { "getDigest", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "getDigestOID", "LNSString;", "getDigestSize", "LLibOrgBouncycastleCryptoDigest;", &LibOrgBouncycastlePqcCryptoXmssDigestUtil_nameToOid, "Ljava/util/Map<Ljava/lang/String;Llib/org/bouncycastle/asn1/ASN1ObjectIdentifier;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssDigestUtil = { "DigestUtil", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x0, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssDigestUtil;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastlePqcCryptoXmssDigestUtil class]) {
    LibOrgBouncycastlePqcCryptoXmssDigestUtil_nameToOid = new_JavaUtilHashMap_init();
    {
      (void) [LibOrgBouncycastlePqcCryptoXmssDigestUtil_nameToOid putWithId:@"SHA-256" withId:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256)];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastlePqcCryptoXmssDigestUtil_nameToOid)) putWithId:@"SHA-512" withId:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512)];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastlePqcCryptoXmssDigestUtil_nameToOid)) putWithId:@"SHAKE128" withId:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake128)];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastlePqcCryptoXmssDigestUtil_nameToOid)) putWithId:@"SHAKE256" withId:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake256)];
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastlePqcCryptoXmssDigestUtil)
  }
}

@end

void LibOrgBouncycastlePqcCryptoXmssDigestUtil_init(LibOrgBouncycastlePqcCryptoXmssDigestUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoXmssDigestUtil *new_LibOrgBouncycastlePqcCryptoXmssDigestUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssDigestUtil, init)
}

LibOrgBouncycastlePqcCryptoXmssDigestUtil *create_LibOrgBouncycastlePqcCryptoXmssDigestUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssDigestUtil, init)
}

id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastlePqcCryptoXmssDigestUtil_getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid) {
  LibOrgBouncycastlePqcCryptoXmssDigestUtil_initialize();
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256)]) {
    return new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init();
  }
  if ([oid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512)]) {
    return new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init();
  }
  if ([oid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake128)]) {
    return new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(128);
  }
  if ([oid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake256)]) {
    return new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unrecognized digest OID: ", oid));
}

LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastlePqcCryptoXmssDigestUtil_getDigestOIDWithNSString_(NSString *name) {
  LibOrgBouncycastlePqcCryptoXmssDigestUtil_initialize();
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastlePqcCryptoXmssDigestUtil_nameToOid)) getWithId:name];
  if (oid != nil) {
    return oid;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unrecognized digest name: ", name));
}

jint LibOrgBouncycastlePqcCryptoXmssDigestUtil_getDigestSizeWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastlePqcCryptoXmssDigestUtil_initialize();
  if ([LibOrgBouncycastleCryptoXof_class_() isInstance:digest]) {
    return [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize] * 2;
  }
  return [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssDigestUtil)
