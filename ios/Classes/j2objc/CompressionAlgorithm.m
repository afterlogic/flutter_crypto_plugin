//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/algorithm/CompressionAlgorithm.java
//

#include "CompressionAlgorithm.h"
#include "CompressionAlgorithmTags.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface LibComAfterlogicPgpAlgorithmCompressionAlgorithm () {
 @public
  jint algorithmId_;
}

@end

inline id<JavaUtilMap> LibComAfterlogicPgpAlgorithmCompressionAlgorithm_get_MAP(void);
static id<JavaUtilMap> LibComAfterlogicPgpAlgorithmCompressionAlgorithm_MAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, MAP, id<JavaUtilMap>)

__attribute__((unused)) static void LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initWithInt_withNSString_withInt_(LibComAfterlogicPgpAlgorithmCompressionAlgorithm *self, jint id_, NSString *__name, jint __ordinal);

__attribute__((unused)) static LibComAfterlogicPgpAlgorithmCompressionAlgorithm *new_LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initWithInt_withNSString_withInt_(jint id_, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(LibComAfterlogicPgpAlgorithmCompressionAlgorithm)

LibComAfterlogicPgpAlgorithmCompressionAlgorithm *LibComAfterlogicPgpAlgorithmCompressionAlgorithm_values_[4];

@implementation LibComAfterlogicPgpAlgorithmCompressionAlgorithm

+ (LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)UNCOMPRESSED {
  return JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, UNCOMPRESSED);
}

+ (LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)ZIP {
  return JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, ZIP);
}

+ (LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)ZLIB {
  return JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, ZLIB);
}

+ (LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)BZIP2 {
  return JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, BZIP2);
}

+ (LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)fromIdWithInt:(jint)id_ {
  return LibComAfterlogicPgpAlgorithmCompressionAlgorithm_fromIdWithInt_(id_);
}

- (jint)getAlgorithmId {
  return algorithmId_;
}

+ (IOSObjectArray *)values {
  return LibComAfterlogicPgpAlgorithmCompressionAlgorithm_values();
}

+ (LibComAfterlogicPgpAlgorithmCompressionAlgorithm *)valueOfWithNSString:(NSString *)name {
  return LibComAfterlogicPgpAlgorithmCompressionAlgorithm_valueOfWithNSString_(name);
}

- (LibComAfterlogicPgpAlgorithmCompressionAlgorithm_Enum)toNSEnum {
  return (LibComAfterlogicPgpAlgorithmCompressionAlgorithm_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(fromIdWithInt:);
  methods[1].selector = @selector(getAlgorithmId);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNCOMPRESSED", "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "ZIP", "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "ZLIB", "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "BZIP2", "LLibComAfterlogicPgpAlgorithmCompressionAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "MAP", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 8, 9, -1 },
    { "algorithmId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromId", "I", "valueOf", "LNSString;", &JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, UNCOMPRESSED), &JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, ZIP), &JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, ZLIB), &JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, BZIP2), &LibComAfterlogicPgpAlgorithmCompressionAlgorithm_MAP, "Ljava/util/Map<Ljava/lang/Integer;Llib/com/afterlogic/pgp/algorithm/CompressionAlgorithm;>;", "Ljava/lang/Enum<Llib/com/afterlogic/pgp/algorithm/CompressionAlgorithm;>;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpAlgorithmCompressionAlgorithm = { "CompressionAlgorithm", "lib.com.afterlogic.pgp.algorithm", ptrTable, methods, fields, 7, 0x4011, 4, 6, -1, -1, -1, 10, -1 };
  return &_LibComAfterlogicPgpAlgorithmCompressionAlgorithm;
}

+ (void)initialize {
  if (self == [LibComAfterlogicPgpAlgorithmCompressionAlgorithm class]) {
    JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, UNCOMPRESSED) = new_LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgCompressionAlgorithmTags_UNCOMPRESSED, JreEnumConstantName(LibComAfterlogicPgpAlgorithmCompressionAlgorithm_class_(), 0), 0);
    JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, ZIP) = new_LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgCompressionAlgorithmTags_ZIP, JreEnumConstantName(LibComAfterlogicPgpAlgorithmCompressionAlgorithm_class_(), 1), 1);
    JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, ZLIB) = new_LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgCompressionAlgorithmTags_ZLIB, JreEnumConstantName(LibComAfterlogicPgpAlgorithmCompressionAlgorithm_class_(), 2), 2);
    JreEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, BZIP2) = new_LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgCompressionAlgorithmTags_BZIP2, JreEnumConstantName(LibComAfterlogicPgpAlgorithmCompressionAlgorithm_class_(), 3), 3);
    LibComAfterlogicPgpAlgorithmCompressionAlgorithm_MAP = new_JavaUtilHashMap_init();
    {
      {
        IOSObjectArray *a__ = LibComAfterlogicPgpAlgorithmCompressionAlgorithm_values();
        LibComAfterlogicPgpAlgorithmCompressionAlgorithm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        LibComAfterlogicPgpAlgorithmCompressionAlgorithm * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          LibComAfterlogicPgpAlgorithmCompressionAlgorithm *c = *b__++;
          (void) [LibComAfterlogicPgpAlgorithmCompressionAlgorithm_MAP putWithId:JavaLangInteger_valueOfWithInt_(((LibComAfterlogicPgpAlgorithmCompressionAlgorithm *) nil_chk(c))->algorithmId_) withId:c];
        }
      }
    }
    J2OBJC_SET_INITIALIZED(LibComAfterlogicPgpAlgorithmCompressionAlgorithm)
  }
}

@end

LibComAfterlogicPgpAlgorithmCompressionAlgorithm *LibComAfterlogicPgpAlgorithmCompressionAlgorithm_fromIdWithInt_(jint id_) {
  LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initialize();
  return [((id<JavaUtilMap>) nil_chk(LibComAfterlogicPgpAlgorithmCompressionAlgorithm_MAP)) getWithId:JavaLangInteger_valueOfWithInt_(id_)];
}

void LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initWithInt_withNSString_withInt_(LibComAfterlogicPgpAlgorithmCompressionAlgorithm *self, jint id_, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->algorithmId_ = id_;
}

LibComAfterlogicPgpAlgorithmCompressionAlgorithm *new_LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initWithInt_withNSString_withInt_(jint id_, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, initWithInt_withNSString_withInt_, id_, __name, __ordinal)
}

IOSObjectArray *LibComAfterlogicPgpAlgorithmCompressionAlgorithm_values() {
  LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initialize();
  return [IOSObjectArray arrayWithObjects:LibComAfterlogicPgpAlgorithmCompressionAlgorithm_values_ count:4 type:LibComAfterlogicPgpAlgorithmCompressionAlgorithm_class_()];
}

LibComAfterlogicPgpAlgorithmCompressionAlgorithm *LibComAfterlogicPgpAlgorithmCompressionAlgorithm_valueOfWithNSString_(NSString *name) {
  LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initialize();
  for (int i = 0; i < 4; i++) {
    LibComAfterlogicPgpAlgorithmCompressionAlgorithm *e = LibComAfterlogicPgpAlgorithmCompressionAlgorithm_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

LibComAfterlogicPgpAlgorithmCompressionAlgorithm *LibComAfterlogicPgpAlgorithmCompressionAlgorithm_fromOrdinal(NSUInteger ordinal) {
  LibComAfterlogicPgpAlgorithmCompressionAlgorithm_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return LibComAfterlogicPgpAlgorithmCompressionAlgorithm_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpAlgorithmCompressionAlgorithm)
