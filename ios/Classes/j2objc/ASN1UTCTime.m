//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ASN1UTCTime.java
//

#include "ASN1Object.h"
#include "ASN1OctetString.h"
#include "ASN1OutputStream.h"
#include "ASN1Primitive.h"
#include "ASN1TaggedObject.h"
#include "ASN1UTCTime.h"
#include "Arrays.h"
#include "BERTags.h"
#include "DateUtil.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "StreamUtil.h"
#include "Strings.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"

@interface LibOrgBouncycastleAsn1ASN1UTCTime () {
 @public
  IOSByteArray *time_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1ASN1UTCTime, time_, IOSByteArray *)

@implementation LibOrgBouncycastleAsn1ASN1UTCTime

+ (LibOrgBouncycastleAsn1ASN1UTCTime *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1ASN1UTCTime_getInstanceWithId_(obj);
}

+ (LibOrgBouncycastleAsn1ASN1UTCTime *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                 withBoolean:(jboolean)explicit_ {
  return LibOrgBouncycastleAsn1ASN1UTCTime_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}

- (instancetype)initWithNSString:(NSString *)time {
  LibOrgBouncycastleAsn1ASN1UTCTime_initWithNSString_(self, time);
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time {
  LibOrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(self, time);
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  LibOrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(self, time, locale);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)time {
  LibOrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(self, time);
  return self;
}

- (JavaUtilDate *)getDate {
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyMMddHHmmssz");
  return LibOrgBouncycastleAsn1DateUtil_epochAdjustWithJavaUtilDate_([dateF parseWithNSString:[self getTime]]);
}

- (JavaUtilDate *)getAdjustedDate {
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmssz");
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  return LibOrgBouncycastleAsn1DateUtil_epochAdjustWithJavaUtilDate_([dateF parseWithNSString:[self getAdjustedTime]]);
}

- (NSString *)getTime {
  NSString *stime = LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(time_);
  if ([((NSString *) nil_chk(stime)) java_indexOf:'-'] < 0 && [stime java_indexOf:'+'] < 0) {
    if ([stime java_length] == 11) {
      return JreStrcat("$$", [stime java_substring:0 endIndex:10], @"00GMT+00:00");
    }
    else {
      return JreStrcat("$$", [stime java_substring:0 endIndex:12], @"GMT+00:00");
    }
  }
  else {
    jint index = [stime java_indexOf:'-'];
    if (index < 0) {
      index = [stime java_indexOf:'+'];
    }
    NSString *d = stime;
    if (index == [stime java_length] - 3) {
      (void) JreStrAppendStrong(&d, "$", @"00");
    }
    if (index == 10) {
      return JreStrcat("$$$C$", [d java_substring:0 endIndex:10], @"00GMT", [d java_substring:10 endIndex:13], ':', [d java_substring:13 endIndex:15]);
    }
    else {
      return JreStrcat("$$$C$", [d java_substring:0 endIndex:12], @"GMT", [d java_substring:12 endIndex:15], ':', [d java_substring:15 endIndex:17]);
    }
  }
}

- (NSString *)getAdjustedTime {
  NSString *d = [self getTime];
  if ([((NSString *) nil_chk(d)) charAtWithInt:0] < '5') {
    return JreStrcat("$$", @"20", d);
  }
  else {
    return JreStrcat("$$", @"19", d);
  }
}

- (jboolean)isConstructed {
  return false;
}

- (jint)encodedLength {
  jint length = ((IOSByteArray *) nil_chk(time_))->size_;
  return 1 + LibOrgBouncycastleAsn1StreamUtil_calculateBodyLengthWithInt_(length) + length;
}

- (void)encodeWithLibOrgBouncycastleAsn1ASN1OutputStream:(LibOrgBouncycastleAsn1ASN1OutputStream *)outArg {
  [((LibOrgBouncycastleAsn1ASN1OutputStream *) nil_chk(outArg)) writeWithInt:LibOrgBouncycastleAsn1BERTags_UTC_TIME];
  jint length = ((IOSByteArray *) nil_chk(time_))->size_;
  [outArg writeLengthWithInt:length];
  for (jint i = 0; i != length; i++) {
    [outArg writeWithInt:(jbyte) IOSByteArray_Get(nil_chk(time_), i)];
  }
}

- (jboolean)asn1EqualsWithLibOrgBouncycastleAsn1ASN1Primitive:(LibOrgBouncycastleAsn1ASN1Primitive *)o {
  if (!([o isKindOfClass:[LibOrgBouncycastleAsn1ASN1UTCTime class]])) {
    return false;
  }
  return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(time_, ((LibOrgBouncycastleAsn1ASN1UTCTime *) nil_chk(((LibOrgBouncycastleAsn1ASN1UTCTime *) cast_chk(o, [LibOrgBouncycastleAsn1ASN1UTCTime class]))))->time_);
}

- (NSUInteger)hash {
  return LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_(time_);
}

- (NSString *)description {
  return LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(time_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1ASN1UTCTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1UTCTime;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, 10, -1, -1, -1 },
    { NULL, "Z", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithJavaUtilDate:);
  methods[4].selector = @selector(initWithJavaUtilDate:withJavaUtilLocale:);
  methods[5].selector = @selector(initWithByteArray:);
  methods[6].selector = @selector(getDate);
  methods[7].selector = @selector(getAdjustedDate);
  methods[8].selector = @selector(getTime);
  methods[9].selector = @selector(getAdjustedTime);
  methods[10].selector = @selector(isConstructed);
  methods[11].selector = @selector(encodedLength);
  methods[12].selector = @selector(encodeWithLibOrgBouncycastleAsn1ASN1OutputStream:);
  methods[13].selector = @selector(asn1EqualsWithLibOrgBouncycastleAsn1ASN1Primitive:);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "time_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LLibOrgBouncycastleAsn1ASN1TaggedObject;Z", "LNSString;", "LJavaUtilDate;", "LJavaUtilDate;LJavaUtilLocale;", "[B", "LJavaTextParseException;", "encode", "LLibOrgBouncycastleAsn1ASN1OutputStream;", "LJavaIoIOException;", "asn1Equals", "LLibOrgBouncycastleAsn1ASN1Primitive;", "hashCode", "toString" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1ASN1UTCTime = { "ASN1UTCTime", "lib.org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x1, 16, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1ASN1UTCTime;
}

@end

LibOrgBouncycastleAsn1ASN1UTCTime *LibOrgBouncycastleAsn1ASN1UTCTime_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1ASN1UTCTime_initialize();
  if (obj == nil || [obj isKindOfClass:[LibOrgBouncycastleAsn1ASN1UTCTime class]]) {
    return (LibOrgBouncycastleAsn1ASN1UTCTime *) cast_chk(obj, [LibOrgBouncycastleAsn1ASN1UTCTime class]);
  }
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    @try {
      return (LibOrgBouncycastleAsn1ASN1UTCTime *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_((IOSByteArray *) cast_chk(obj, [IOSByteArray class])), [LibOrgBouncycastleAsn1ASN1UTCTime class]);
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"encoding error in getInstance: ", [e description]));
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"illegal object in getInstance: ", [[obj java_getClass] getName]));
}

LibOrgBouncycastleAsn1ASN1UTCTime *LibOrgBouncycastleAsn1ASN1UTCTime_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  LibOrgBouncycastleAsn1ASN1UTCTime_initialize();
  LibOrgBouncycastleAsn1ASN1Object *o = [((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(obj)) getObject];
  if (explicit_ || [o isKindOfClass:[LibOrgBouncycastleAsn1ASN1UTCTime class]]) {
    return LibOrgBouncycastleAsn1ASN1UTCTime_getInstanceWithId_(o);
  }
  else {
    return new_LibOrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(((LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(o, [LibOrgBouncycastleAsn1ASN1OctetString class])))) getOctets]);
  }
}

void LibOrgBouncycastleAsn1ASN1UTCTime_initWithNSString_(LibOrgBouncycastleAsn1ASN1UTCTime *self, NSString *time) {
  LibOrgBouncycastleAsn1ASN1Primitive_init(self);
  self->time_ = LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(time);
  @try {
    (void) [self getDate];
  }
  @catch (JavaTextParseException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid date string: ", [e getMessage]));
  }
}

LibOrgBouncycastleAsn1ASN1UTCTime *new_LibOrgBouncycastleAsn1ASN1UTCTime_initWithNSString_(NSString *time) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1ASN1UTCTime, initWithNSString_, time)
}

LibOrgBouncycastleAsn1ASN1UTCTime *create_LibOrgBouncycastleAsn1ASN1UTCTime_initWithNSString_(NSString *time) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1ASN1UTCTime, initWithNSString_, time)
}

void LibOrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(LibOrgBouncycastleAsn1ASN1UTCTime *self, JavaUtilDate *time) {
  LibOrgBouncycastleAsn1ASN1Primitive_init(self);
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyMMddHHmmss'Z'", JreLoadStatic(LibOrgBouncycastleAsn1DateUtil, EN_Locale));
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  self->time_ = LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
}

LibOrgBouncycastleAsn1ASN1UTCTime *new_LibOrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1ASN1UTCTime, initWithJavaUtilDate_, time)
}

LibOrgBouncycastleAsn1ASN1UTCTime *create_LibOrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1ASN1UTCTime, initWithJavaUtilDate_, time)
}

void LibOrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(LibOrgBouncycastleAsn1ASN1UTCTime *self, JavaUtilDate *time, JavaUtilLocale *locale) {
  LibOrgBouncycastleAsn1ASN1Primitive_init(self);
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyMMddHHmmss'Z'", locale);
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  self->time_ = LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
}

LibOrgBouncycastleAsn1ASN1UTCTime *new_LibOrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1ASN1UTCTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}

LibOrgBouncycastleAsn1ASN1UTCTime *create_LibOrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1ASN1UTCTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}

void LibOrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(LibOrgBouncycastleAsn1ASN1UTCTime *self, IOSByteArray *time) {
  LibOrgBouncycastleAsn1ASN1Primitive_init(self);
  self->time_ = time;
}

LibOrgBouncycastleAsn1ASN1UTCTime *new_LibOrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(IOSByteArray *time) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1ASN1UTCTime, initWithByteArray_, time)
}

LibOrgBouncycastleAsn1ASN1UTCTime *create_LibOrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(IOSByteArray *time) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1ASN1UTCTime, initWithByteArray_, time)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1ASN1UTCTime)
