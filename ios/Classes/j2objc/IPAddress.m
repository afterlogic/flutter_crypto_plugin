//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/IPAddress.java
//

#include "IPAddress.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"

@interface LibOrgBouncycastleUtilIPAddress ()

+ (jboolean)isMaskValueWithNSString:(NSString *)component
                            withInt:(jint)size;

@end

__attribute__((unused)) static jboolean LibOrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(NSString *component, jint size);

@implementation LibOrgBouncycastleUtilIPAddress

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleUtilIPAddress_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isValidWithNSString:(NSString *)address {
  return LibOrgBouncycastleUtilIPAddress_isValidWithNSString_(address);
}

+ (jboolean)isValidWithNetMaskWithNSString:(NSString *)address {
  return LibOrgBouncycastleUtilIPAddress_isValidWithNetMaskWithNSString_(address);
}

+ (jboolean)isValidIPv4WithNSString:(NSString *)address {
  return LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(address);
}

+ (jboolean)isValidIPv4WithNetmaskWithNSString:(NSString *)address {
  return LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(address);
}

+ (jboolean)isValidIPv6WithNetmaskWithNSString:(NSString *)address {
  return LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(address);
}

+ (jboolean)isMaskValueWithNSString:(NSString *)component
                            withInt:(jint)size {
  return LibOrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(component, size);
}

+ (jboolean)isValidIPv6WithNSString:(NSString *)address {
  return LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(address);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 8, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isValidWithNSString:);
  methods[2].selector = @selector(isValidWithNetMaskWithNSString:);
  methods[3].selector = @selector(isValidIPv4WithNSString:);
  methods[4].selector = @selector(isValidIPv4WithNetmaskWithNSString:);
  methods[5].selector = @selector(isValidIPv6WithNetmaskWithNSString:);
  methods[6].selector = @selector(isMaskValueWithNSString:withInt:);
  methods[7].selector = @selector(isValidIPv6WithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isValid", "LNSString;", "isValidWithNetMask", "isValidIPv4", "isValidIPv4WithNetmask", "isValidIPv6WithNetmask", "isMaskValue", "LNSString;I", "isValidIPv6" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilIPAddress = { "IPAddress", "lib.org.bouncycastle.util", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilIPAddress;
}

@end

void LibOrgBouncycastleUtilIPAddress_init(LibOrgBouncycastleUtilIPAddress *self) {
  NSObject_init(self);
}

LibOrgBouncycastleUtilIPAddress *new_LibOrgBouncycastleUtilIPAddress_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilIPAddress, init)
}

LibOrgBouncycastleUtilIPAddress *create_LibOrgBouncycastleUtilIPAddress_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilIPAddress, init)
}

jboolean LibOrgBouncycastleUtilIPAddress_isValidWithNSString_(NSString *address) {
  LibOrgBouncycastleUtilIPAddress_initialize();
  return LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(address) || LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(address);
}

jboolean LibOrgBouncycastleUtilIPAddress_isValidWithNetMaskWithNSString_(NSString *address) {
  LibOrgBouncycastleUtilIPAddress_initialize();
  return LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(address) || LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(address);
}

jboolean LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(NSString *address) {
  LibOrgBouncycastleUtilIPAddress_initialize();
  if ([((NSString *) nil_chk(address)) java_length] == 0) {
    return false;
  }
  jint octet;
  jint octets = 0;
  NSString *temp = JreStrcat("$C", address, '.');
  jint pos;
  jint start = 0;
  while (start < [temp java_length] && (pos = [temp java_indexOf:'.' fromIndex:start]) > start) {
    if (octets == 4) {
      return false;
    }
    @try {
      octet = JavaLangInteger_parseIntWithNSString_([temp java_substring:start endIndex:pos]);
    }
    @catch (JavaLangNumberFormatException *ex) {
      return false;
    }
    if (octet < 0 || octet > 255) {
      return false;
    }
    start = pos + 1;
    octets++;
  }
  return octets == 4;
}

jboolean LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(NSString *address) {
  LibOrgBouncycastleUtilIPAddress_initialize();
  jint index = [((NSString *) nil_chk(address)) java_indexOfString:@"/"];
  NSString *mask = [address java_substring:index + 1];
  return (index > 0) && LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_([address java_substring:0 endIndex:index]) && (LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(mask) || LibOrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(mask, 32));
}

jboolean LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(NSString *address) {
  LibOrgBouncycastleUtilIPAddress_initialize();
  jint index = [((NSString *) nil_chk(address)) java_indexOfString:@"/"];
  NSString *mask = [address java_substring:index + 1];
  return (index > 0) && (LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_([address java_substring:0 endIndex:index]) && (LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(mask) || LibOrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(mask, 128)));
}

jboolean LibOrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(NSString *component, jint size) {
  LibOrgBouncycastleUtilIPAddress_initialize();
  @try {
    jint value = JavaLangInteger_parseIntWithNSString_(component);
    return value >= 0 && value <= size;
  }
  @catch (JavaLangNumberFormatException *e) {
    return false;
  }
}

jboolean LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(NSString *address) {
  LibOrgBouncycastleUtilIPAddress_initialize();
  if ([((NSString *) nil_chk(address)) java_length] == 0) {
    return false;
  }
  jint octet;
  jint octets = 0;
  NSString *temp = JreStrcat("$C", address, ':');
  jboolean doubleColonFound = false;
  jint pos;
  jint start = 0;
  while (start < [temp java_length] && (pos = [temp java_indexOf:':' fromIndex:start]) >= start) {
    if (octets == 8) {
      return false;
    }
    if (start != pos) {
      NSString *value = [temp java_substring:start endIndex:pos];
      if (pos == ([temp java_length] - 1) && [((NSString *) nil_chk(value)) java_indexOf:'.'] > 0) {
        if (!LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(value)) {
          return false;
        }
        octets++;
      }
      else {
        @try {
          octet = JavaLangInteger_parseIntWithNSString_withInt_([temp java_substring:start endIndex:pos], 16);
        }
        @catch (JavaLangNumberFormatException *ex) {
          return false;
        }
        if (octet < 0 || octet > (jint) 0xffff) {
          return false;
        }
      }
    }
    else {
      if (pos != 1 && pos != [temp java_length] - 1 && doubleColonFound) {
        return false;
      }
      doubleColonFound = true;
    }
    start = pos + 1;
    octets++;
  }
  return octets == 8 || doubleColonFound;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilIPAddress)
