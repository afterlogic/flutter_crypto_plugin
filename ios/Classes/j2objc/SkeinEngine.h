//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/SkeinEngine.java
//

#ifndef SkeinEngine_H
#define SkeinEngine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Memoable.h"

@class IOSByteArray;
@class IOSLongArray;
@class LibOrgBouncycastleCryptoEnginesThreefishEngine;
@class LibOrgBouncycastleCryptoParamsSkeinParameters;

@interface LibOrgBouncycastleCryptoDigestsSkeinEngine : NSObject < LibOrgBouncycastleUtilMemoable > {
 @public
  LibOrgBouncycastleCryptoEnginesThreefishEngine *threefish_;
  IOSLongArray *chain_;
}
@property (readonly, class) jint SKEIN_256 NS_SWIFT_NAME(SKEIN_256);
@property (readonly, class) jint SKEIN_512 NS_SWIFT_NAME(SKEIN_512);
@property (readonly, class) jint SKEIN_1024 NS_SWIFT_NAME(SKEIN_1024);

+ (jint)SKEIN_256;

+ (jint)SKEIN_512;

+ (jint)SKEIN_1024;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)blockSizeBits
                              withInt:(jint)outputSizeBits;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigestsSkeinEngine:(LibOrgBouncycastleCryptoDigestsSkeinEngine *)engine;

- (id<LibOrgBouncycastleUtilMemoable>)copy__ OBJC_METHOD_FAMILY_NONE;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (jint)getBlockSize;

- (jint)getOutputSize;

- (void)init__WithLibOrgBouncycastleCryptoParamsSkeinParameters:(LibOrgBouncycastleCryptoParamsSkeinParameters *)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)resetWithLibOrgBouncycastleUtilMemoable:(id<LibOrgBouncycastleUtilMemoable>)other;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoDigestsSkeinEngine)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine, threefish_, LibOrgBouncycastleCryptoEnginesThreefishEngine *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsSkeinEngine, chain_, IOSLongArray *)

inline jint LibOrgBouncycastleCryptoDigestsSkeinEngine_get_SKEIN_256(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_256 256
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine, SKEIN_256, jint)

inline jint LibOrgBouncycastleCryptoDigestsSkeinEngine_get_SKEIN_512(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_512 512
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine, SKEIN_512, jint)

inline jint LibOrgBouncycastleCryptoDigestsSkeinEngine_get_SKEIN_1024(void);
#define LibOrgBouncycastleCryptoDigestsSkeinEngine_SKEIN_1024 1024
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSkeinEngine, SKEIN_1024, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, jint blockSizeBits, jint outputSizeBits);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinEngine *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(jint blockSizeBits, jint outputSizeBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinEngine *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(jint blockSizeBits, jint outputSizeBits);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(LibOrgBouncycastleCryptoDigestsSkeinEngine *self, LibOrgBouncycastleCryptoDigestsSkeinEngine *engine);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinEngine *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(LibOrgBouncycastleCryptoDigestsSkeinEngine *engine) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinEngine *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_initWithLibOrgBouncycastleCryptoDigestsSkeinEngine_(LibOrgBouncycastleCryptoDigestsSkeinEngine *engine);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoDigestsSkeinEngine)

@interface LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)type
                        withByteArray:(IOSByteArray *)value;

- (jint)getType;

- (IOSByteArray *)getValue;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_(LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *self, jint type, IOSByteArray *value);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *new_LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_(jint type, IOSByteArray *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter *create_LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter_initWithInt_withByteArray_(jint type, IOSByteArray *value);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoDigestsSkeinEngine_Parameter)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SkeinEngine_H
