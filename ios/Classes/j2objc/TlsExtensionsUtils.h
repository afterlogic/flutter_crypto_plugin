//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsExtensionsUtils.java
//

#ifndef TlsExtensionsUtils_H
#define TlsExtensionsUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaLangInteger;
@class JavaUtilHashtable;
@class LibOrgBouncycastleCryptoTlsCertificateStatusRequest;
@class LibOrgBouncycastleCryptoTlsHeartbeatExtension;
@class LibOrgBouncycastleCryptoTlsServerNameList;

@interface LibOrgBouncycastleCryptoTlsTlsExtensionsUtils : NSObject
@property (readonly, class) JavaLangInteger *EXT_encrypt_then_mac NS_SWIFT_NAME(EXT_encrypt_then_mac);
@property (readonly, class) JavaLangInteger *EXT_extended_master_secret NS_SWIFT_NAME(EXT_extended_master_secret);
@property (readonly, class) JavaLangInteger *EXT_heartbeat NS_SWIFT_NAME(EXT_heartbeat);
@property (readonly, class) JavaLangInteger *EXT_max_fragment_length NS_SWIFT_NAME(EXT_max_fragment_length);
@property (readonly, class) JavaLangInteger *EXT_padding NS_SWIFT_NAME(EXT_padding);
@property (readonly, class) JavaLangInteger *EXT_server_name NS_SWIFT_NAME(EXT_server_name);
@property (readonly, class) JavaLangInteger *EXT_status_request NS_SWIFT_NAME(EXT_status_request);
@property (readonly, class) JavaLangInteger *EXT_truncated_hmac NS_SWIFT_NAME(EXT_truncated_hmac);

+ (JavaLangInteger *)EXT_encrypt_then_mac;

+ (JavaLangInteger *)EXT_extended_master_secret;

+ (JavaLangInteger *)EXT_heartbeat;

+ (JavaLangInteger *)EXT_max_fragment_length;

+ (JavaLangInteger *)EXT_padding;

+ (JavaLangInteger *)EXT_server_name;

+ (JavaLangInteger *)EXT_status_request;

+ (JavaLangInteger *)EXT_truncated_hmac;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)addEncryptThenMACExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (void)addExtendedMasterSecretExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (void)addHeartbeatExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
 withLibOrgBouncycastleCryptoTlsHeartbeatExtension:(LibOrgBouncycastleCryptoTlsHeartbeatExtension *)heartbeatExtension;

+ (void)addMaxFragmentLengthExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                 withShort:(jshort)maxFragmentLength;

+ (void)addPaddingExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                         withInt:(jint)dataLength;

+ (void)addServerNameExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
      withLibOrgBouncycastleCryptoTlsServerNameList:(LibOrgBouncycastleCryptoTlsServerNameList *)serverNameList;

+ (void)addStatusRequestExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
withLibOrgBouncycastleCryptoTlsCertificateStatusRequest:(LibOrgBouncycastleCryptoTlsCertificateStatusRequest *)statusRequest;

+ (void)addTruncatedHMacExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (IOSByteArray *)createEmptyExtensionData;

+ (IOSByteArray *)createEncryptThenMACExtension;

+ (IOSByteArray *)createExtendedMasterSecretExtension;

+ (IOSByteArray *)createHeartbeatExtensionWithLibOrgBouncycastleCryptoTlsHeartbeatExtension:(LibOrgBouncycastleCryptoTlsHeartbeatExtension *)heartbeatExtension;

+ (IOSByteArray *)createMaxFragmentLengthExtensionWithShort:(jshort)maxFragmentLength;

+ (IOSByteArray *)createPaddingExtensionWithInt:(jint)dataLength;

+ (IOSByteArray *)createServerNameExtensionWithLibOrgBouncycastleCryptoTlsServerNameList:(LibOrgBouncycastleCryptoTlsServerNameList *)serverNameList;

+ (IOSByteArray *)createStatusRequestExtensionWithLibOrgBouncycastleCryptoTlsCertificateStatusRequest:(LibOrgBouncycastleCryptoTlsCertificateStatusRequest *)statusRequest;

+ (IOSByteArray *)createTruncatedHMacExtension;

+ (JavaUtilHashtable *)ensureExtensionsInitialisedWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (LibOrgBouncycastleCryptoTlsHeartbeatExtension *)getHeartbeatExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jshort)getMaxFragmentLengthExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jint)getPaddingExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (LibOrgBouncycastleCryptoTlsServerNameList *)getServerNameExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (LibOrgBouncycastleCryptoTlsCertificateStatusRequest *)getStatusRequestExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)hasEncryptThenMACExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)hasExtendedMasterSecretExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)hasTruncatedHMacExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)readEncryptThenMACExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jboolean)readExtendedMasterSecretExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (LibOrgBouncycastleCryptoTlsHeartbeatExtension *)readHeartbeatExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jshort)readMaxFragmentLengthExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jint)readPaddingExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (LibOrgBouncycastleCryptoTlsServerNameList *)readServerNameExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (LibOrgBouncycastleCryptoTlsCertificateStatusRequest *)readStatusRequestExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jboolean)readTruncatedHMacExtensionWithByteArray:(IOSByteArray *)extensionData;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_get_EXT_encrypt_then_mac(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_encrypt_then_mac;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_encrypt_then_mac, JavaLangInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_get_EXT_extended_master_secret(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_extended_master_secret;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_extended_master_secret, JavaLangInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_get_EXT_heartbeat(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_heartbeat;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_heartbeat, JavaLangInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_get_EXT_max_fragment_length(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_max_fragment_length;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_max_fragment_length, JavaLangInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_get_EXT_padding(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_padding;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_padding, JavaLangInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_get_EXT_server_name(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_server_name;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_server_name, JavaLangInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_get_EXT_status_request(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_status_request;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_status_request, JavaLangInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_get_EXT_truncated_hmac(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_EXT_truncated_hmac;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_truncated_hmac, JavaLangInteger *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_init(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsExtensionsUtils *new_LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsExtensionsUtils *create_LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_init(void);

FOUNDATION_EXPORT JavaUtilHashtable *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addEncryptThenMACExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addExtendedMasterSecretExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addHeartbeatExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsHeartbeatExtension_(JavaUtilHashtable *extensions, LibOrgBouncycastleCryptoTlsHeartbeatExtension *heartbeatExtension);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addMaxFragmentLengthExtensionWithJavaUtilHashtable_withShort_(JavaUtilHashtable *extensions, jshort maxFragmentLength);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addPaddingExtensionWithJavaUtilHashtable_withInt_(JavaUtilHashtable *extensions, jint dataLength);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addServerNameExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsServerNameList_(JavaUtilHashtable *extensions, LibOrgBouncycastleCryptoTlsServerNameList *serverNameList);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addStatusRequestExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsCertificateStatusRequest_(JavaUtilHashtable *extensions, LibOrgBouncycastleCryptoTlsCertificateStatusRequest *statusRequest);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_addTruncatedHMacExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsHeartbeatExtension *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getHeartbeatExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jshort LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getMaxFragmentLengthExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getPaddingExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsServerNameList *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getServerNameExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateStatusRequest *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_getStatusRequestExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasEncryptThenMACExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasExtendedMasterSecretExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_hasTruncatedHMacExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEmptyExtensionData(void);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createEncryptThenMACExtension(void);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createExtendedMasterSecretExtension(void);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createHeartbeatExtensionWithLibOrgBouncycastleCryptoTlsHeartbeatExtension_(LibOrgBouncycastleCryptoTlsHeartbeatExtension *heartbeatExtension);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createMaxFragmentLengthExtensionWithShort_(jshort maxFragmentLength);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createPaddingExtensionWithInt_(jint dataLength);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createServerNameExtensionWithLibOrgBouncycastleCryptoTlsServerNameList_(LibOrgBouncycastleCryptoTlsServerNameList *serverNameList);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createStatusRequestExtensionWithLibOrgBouncycastleCryptoTlsCertificateStatusRequest_(LibOrgBouncycastleCryptoTlsCertificateStatusRequest *statusRequest);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_createTruncatedHMacExtension(void);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readEncryptThenMACExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readExtendedMasterSecretExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsHeartbeatExtension *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readHeartbeatExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jshort LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readMaxFragmentLengthExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readPaddingExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsServerNameList *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readServerNameExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateStatusRequest *LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readStatusRequestExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_readTruncatedHMacExtensionWithByteArray_(IOSByteArray *extensionData);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsExtensionsUtils_H
