//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/GOFBBlockCipher.java
//

#ifndef GOFBBlockCipher_H
#define GOFBBlockCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "StreamBlockCipher.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoModesGOFBBlockCipher : LibOrgBouncycastleCryptoStreamBlockCipher {
 @public
  jboolean firstStep_;
  jint N3_;
  jint N4_;
}
@property (readonly, class) jint C1 NS_SWIFT_NAME(C1);
@property (readonly, class) jint C2 NS_SWIFT_NAME(C2);

+ (jint)C1;

+ (jint)C2;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (void)init__WithBoolean:(jboolean)encrypting
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

#pragma mark Protected

- (jbyte)calculateByteWithByte:(jbyte)b;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoModesGOFBBlockCipher)

inline jint LibOrgBouncycastleCryptoModesGOFBBlockCipher_get_C1(void);
#define LibOrgBouncycastleCryptoModesGOFBBlockCipher_C1 16843012
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoModesGOFBBlockCipher, C1, jint)

inline jint LibOrgBouncycastleCryptoModesGOFBBlockCipher_get_C2(void);
#define LibOrgBouncycastleCryptoModesGOFBBlockCipher_C2 16843009
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoModesGOFBBlockCipher, C2, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoModesGOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesGOFBBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoModesGOFBBlockCipher *new_LibOrgBouncycastleCryptoModesGOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoModesGOFBBlockCipher *create_LibOrgBouncycastleCryptoModesGOFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoModesGOFBBlockCipher)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // GOFBBlockCipher_H
