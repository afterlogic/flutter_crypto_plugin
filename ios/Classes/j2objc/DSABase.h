//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/util/DSABase.java
//

#ifndef DSABase_H
#define DSABase_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PKCSObjectIdentifiers.h"
#include "X509ObjectIdentifiers.h"
#include "java/security/SignatureSpi.h"

@class IOSByteArray;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoDSAExt;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoSignersDSAEncoding;

@interface LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase : JavaSecuritySignatureSpi < LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, LibOrgBouncycastleAsn1X509X509ObjectIdentifiers > {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  id<LibOrgBouncycastleCryptoDSAExt> signer_;
  id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding_;
}

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                              withLibOrgBouncycastleCryptoDSAExt:(id<LibOrgBouncycastleCryptoDSAExt>)signer
                  withLibOrgBouncycastleCryptoSignersDSAEncoding:(id<LibOrgBouncycastleCryptoSignersDSAEncoding>)encoding;

- (id)engineGetParameterWithNSString:(NSString *)param;

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params;

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value;

- (IOSByteArray *)engineSign;

- (void)engineUpdateWithByte:(jbyte)b;

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len;

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase, signer_, id<LibOrgBouncycastleCryptoDSAExt>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase, encoding_, id<LibOrgBouncycastleCryptoSignersDSAEncoding>)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase_initWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoSignersDSAEncoding_(LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase *self, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoDSAExt> signer, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricUtilDSABase)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DSABase_H
