//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CertificateURL.java
//

#ifndef CertificateURL_H
#define CertificateURL_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/io/ByteArrayOutputStream.h"

@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsCertificateURL : NSObject {
 @public
  jshort type_;
  JavaUtilVector *urlAndHashList_;
}

#pragma mark Public

- (instancetype __nonnull)initWithShort:(jshort)type
                     withJavaUtilVector:(JavaUtilVector *)urlAndHashList;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (jshort)getType;

- (JavaUtilVector *)getURLAndHashList;

+ (LibOrgBouncycastleCryptoTlsCertificateURL *)parseWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                        withJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsCertificateURL)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCertificateURL, urlAndHashList_, JavaUtilVector *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(LibOrgBouncycastleCryptoTlsCertificateURL *self, jshort type, JavaUtilVector *urlAndHashList);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateURL *new_LibOrgBouncycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(jshort type, JavaUtilVector *urlAndHashList) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateURL *create_LibOrgBouncycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(jshort type, JavaUtilVector *urlAndHashList);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateURL *LibOrgBouncycastleCryptoTlsCertificateURL_parseWithLibOrgBouncycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCertificateURL)

@interface LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 : JavaIoByteArrayOutputStream

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsCertificateURL:(LibOrgBouncycastleCryptoTlsCertificateURL *)outer$;

- (void)encodeToWithJavaIoOutputStream:(JavaIoOutputStream *)output;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16_initWithLibOrgBouncycastleCryptoTlsCertificateURL_(LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 *self, LibOrgBouncycastleCryptoTlsCertificateURL *outer$);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 *new_LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16_initWithLibOrgBouncycastleCryptoTlsCertificateURL_(LibOrgBouncycastleCryptoTlsCertificateURL *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 *create_LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16_initWithLibOrgBouncycastleCryptoTlsCertificateURL_(LibOrgBouncycastleCryptoTlsCertificateURL *outer$);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificateURL_H
