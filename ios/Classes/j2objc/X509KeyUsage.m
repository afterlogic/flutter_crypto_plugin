//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/X509KeyUsage.java
//

#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "J2ObjC_source.h"
#include "KeyUsage.h"
#include "X509KeyUsage.h"

@interface LibOrgBouncycastleJceX509KeyUsage () {
 @public
  jint usage_;
}

@end

@implementation LibOrgBouncycastleJceX509KeyUsage

+ (jint)digitalSignature {
  return LibOrgBouncycastleJceX509KeyUsage_digitalSignature;
}

+ (jint)nonRepudiation {
  return LibOrgBouncycastleJceX509KeyUsage_nonRepudiation;
}

+ (jint)keyEncipherment {
  return LibOrgBouncycastleJceX509KeyUsage_keyEncipherment;
}

+ (jint)dataEncipherment {
  return LibOrgBouncycastleJceX509KeyUsage_dataEncipherment;
}

+ (jint)keyAgreement {
  return LibOrgBouncycastleJceX509KeyUsage_keyAgreement;
}

+ (jint)keyCertSign {
  return LibOrgBouncycastleJceX509KeyUsage_keyCertSign;
}

+ (jint)cRLSign {
  return LibOrgBouncycastleJceX509KeyUsage_cRLSign;
}

+ (jint)encipherOnly {
  return LibOrgBouncycastleJceX509KeyUsage_encipherOnly;
}

+ (jint)decipherOnly {
  return LibOrgBouncycastleJceX509KeyUsage_decipherOnly;
}

- (instancetype)initWithInt:(jint)usage {
  LibOrgBouncycastleJceX509KeyUsage_initWithInt_(self, usage);
  return self;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return [new_LibOrgBouncycastleAsn1X509KeyUsage_initWithInt_(usage_) toASN1Primitive];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digitalSignature", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_digitalSignature, 0x19, -1, -1, -1, -1 },
    { "nonRepudiation", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_nonRepudiation, 0x19, -1, -1, -1, -1 },
    { "keyEncipherment", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_keyEncipherment, 0x19, -1, -1, -1, -1 },
    { "dataEncipherment", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_dataEncipherment, 0x19, -1, -1, -1, -1 },
    { "keyAgreement", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_keyAgreement, 0x19, -1, -1, -1, -1 },
    { "keyCertSign", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_keyCertSign, 0x19, -1, -1, -1, -1 },
    { "cRLSign", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_cRLSign, 0x19, -1, -1, -1, -1 },
    { "encipherOnly", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_encipherOnly, 0x19, -1, -1, -1, -1 },
    { "decipherOnly", "I", .constantValue.asInt = LibOrgBouncycastleJceX509KeyUsage_decipherOnly, 0x19, -1, -1, -1, -1 },
    { "usage_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceX509KeyUsage = { "X509KeyUsage", "lib.org.bouncycastle.jce", ptrTable, methods, fields, 7, 0x1, 2, 10, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceX509KeyUsage;
}

@end

void LibOrgBouncycastleJceX509KeyUsage_initWithInt_(LibOrgBouncycastleJceX509KeyUsage *self, jint usage) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->usage_ = 0;
  self->usage_ = usage;
}

LibOrgBouncycastleJceX509KeyUsage *new_LibOrgBouncycastleJceX509KeyUsage_initWithInt_(jint usage) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceX509KeyUsage, initWithInt_, usage)
}

LibOrgBouncycastleJceX509KeyUsage *create_LibOrgBouncycastleJceX509KeyUsage_initWithInt_(jint usage) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceX509KeyUsage, initWithInt_, usage)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceX509KeyUsage)
