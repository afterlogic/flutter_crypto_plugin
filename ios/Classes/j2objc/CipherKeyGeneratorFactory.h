//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/CipherKeyGeneratorFactory.java
//

#ifndef CipherKeyGeneratorFactory_H
#define CipherKeyGeneratorFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleCryptoCipherKeyGenerator;

@interface LibOrgBouncycastleCryptoUtilCipherKeyGeneratorFactory : NSObject

#pragma mark Public

+ (LibOrgBouncycastleCryptoCipherKeyGenerator *)createKeyGeneratorWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)algorithm
                                                                                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilCipherKeyGeneratorFactory)

FOUNDATION_EXPORT LibOrgBouncycastleCryptoCipherKeyGenerator *LibOrgBouncycastleCryptoUtilCipherKeyGeneratorFactory_createKeyGeneratorWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaSecuritySecureRandom_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilCipherKeyGeneratorFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CipherKeyGeneratorFactory_H
