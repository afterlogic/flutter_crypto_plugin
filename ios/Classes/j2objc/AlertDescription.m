//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/AlertDescription.java
//

#include "AlertDescription.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleCryptoTlsAlertDescription

+ (jshort)close_notify {
  return LibOrgBouncycastleCryptoTlsAlertDescription_close_notify;
}

+ (jshort)unexpected_message {
  return LibOrgBouncycastleCryptoTlsAlertDescription_unexpected_message;
}

+ (jshort)bad_record_mac {
  return LibOrgBouncycastleCryptoTlsAlertDescription_bad_record_mac;
}

+ (jshort)decryption_failed {
  return LibOrgBouncycastleCryptoTlsAlertDescription_decryption_failed;
}

+ (jshort)record_overflow {
  return LibOrgBouncycastleCryptoTlsAlertDescription_record_overflow;
}

+ (jshort)decompression_failure {
  return LibOrgBouncycastleCryptoTlsAlertDescription_decompression_failure;
}

+ (jshort)handshake_failure {
  return LibOrgBouncycastleCryptoTlsAlertDescription_handshake_failure;
}

+ (jshort)no_certificate {
  return LibOrgBouncycastleCryptoTlsAlertDescription_no_certificate;
}

+ (jshort)bad_certificate {
  return LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate;
}

+ (jshort)unsupported_certificate {
  return LibOrgBouncycastleCryptoTlsAlertDescription_unsupported_certificate;
}

+ (jshort)certificate_revoked {
  return LibOrgBouncycastleCryptoTlsAlertDescription_certificate_revoked;
}

+ (jshort)certificate_expired {
  return LibOrgBouncycastleCryptoTlsAlertDescription_certificate_expired;
}

+ (jshort)certificate_unknown {
  return LibOrgBouncycastleCryptoTlsAlertDescription_certificate_unknown;
}

+ (jshort)illegal_parameter {
  return LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter;
}

+ (jshort)unknown_ca {
  return LibOrgBouncycastleCryptoTlsAlertDescription_unknown_ca;
}

+ (jshort)access_denied {
  return LibOrgBouncycastleCryptoTlsAlertDescription_access_denied;
}

+ (jshort)decode_error {
  return LibOrgBouncycastleCryptoTlsAlertDescription_decode_error;
}

+ (jshort)decrypt_error {
  return LibOrgBouncycastleCryptoTlsAlertDescription_decrypt_error;
}

+ (jshort)export_restriction {
  return LibOrgBouncycastleCryptoTlsAlertDescription_export_restriction;
}

+ (jshort)protocol_version {
  return LibOrgBouncycastleCryptoTlsAlertDescription_protocol_version;
}

+ (jshort)insufficient_security {
  return LibOrgBouncycastleCryptoTlsAlertDescription_insufficient_security;
}

+ (jshort)internal_error {
  return LibOrgBouncycastleCryptoTlsAlertDescription_internal_error;
}

+ (jshort)user_canceled {
  return LibOrgBouncycastleCryptoTlsAlertDescription_user_canceled;
}

+ (jshort)no_renegotiation {
  return LibOrgBouncycastleCryptoTlsAlertDescription_no_renegotiation;
}

+ (jshort)unsupported_extension {
  return LibOrgBouncycastleCryptoTlsAlertDescription_unsupported_extension;
}

+ (jshort)certificate_unobtainable {
  return LibOrgBouncycastleCryptoTlsAlertDescription_certificate_unobtainable;
}

+ (jshort)unrecognized_name {
  return LibOrgBouncycastleCryptoTlsAlertDescription_unrecognized_name;
}

+ (jshort)bad_certificate_status_response {
  return LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate_status_response;
}

+ (jshort)bad_certificate_hash_value {
  return LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate_hash_value;
}

+ (jshort)unknown_psk_identity {
  return LibOrgBouncycastleCryptoTlsAlertDescription_unknown_psk_identity;
}

+ (jshort)inappropriate_fallback {
  return LibOrgBouncycastleCryptoTlsAlertDescription_inappropriate_fallback;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsAlertDescription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getNameWithShort:(jshort)alertDescription {
  return LibOrgBouncycastleCryptoTlsAlertDescription_getNameWithShort_(alertDescription);
}

+ (NSString *)getTextWithShort:(jshort)alertDescription {
  return LibOrgBouncycastleCryptoTlsAlertDescription_getTextWithShort_(alertDescription);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getNameWithShort:);
  methods[2].selector = @selector(getTextWithShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "close_notify", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_close_notify, 0x19, -1, -1, -1, -1 },
    { "unexpected_message", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_unexpected_message, 0x19, -1, -1, -1, -1 },
    { "bad_record_mac", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_bad_record_mac, 0x19, -1, -1, -1, -1 },
    { "decryption_failed", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_decryption_failed, 0x19, -1, -1, -1, -1 },
    { "record_overflow", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_record_overflow, 0x19, -1, -1, -1, -1 },
    { "decompression_failure", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_decompression_failure, 0x19, -1, -1, -1, -1 },
    { "handshake_failure", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_handshake_failure, 0x19, -1, -1, -1, -1 },
    { "no_certificate", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_no_certificate, 0x19, -1, -1, -1, -1 },
    { "bad_certificate", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate, 0x19, -1, -1, -1, -1 },
    { "unsupported_certificate", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_unsupported_certificate, 0x19, -1, -1, -1, -1 },
    { "certificate_revoked", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_certificate_revoked, 0x19, -1, -1, -1, -1 },
    { "certificate_expired", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_certificate_expired, 0x19, -1, -1, -1, -1 },
    { "certificate_unknown", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_certificate_unknown, 0x19, -1, -1, -1, -1 },
    { "illegal_parameter", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter, 0x19, -1, -1, -1, -1 },
    { "unknown_ca", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_unknown_ca, 0x19, -1, -1, -1, -1 },
    { "access_denied", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_access_denied, 0x19, -1, -1, -1, -1 },
    { "decode_error", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_decode_error, 0x19, -1, -1, -1, -1 },
    { "decrypt_error", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_decrypt_error, 0x19, -1, -1, -1, -1 },
    { "export_restriction", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_export_restriction, 0x19, -1, -1, -1, -1 },
    { "protocol_version", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_protocol_version, 0x19, -1, -1, -1, -1 },
    { "insufficient_security", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_insufficient_security, 0x19, -1, -1, -1, -1 },
    { "internal_error", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_internal_error, 0x19, -1, -1, -1, -1 },
    { "user_canceled", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_user_canceled, 0x19, -1, -1, -1, -1 },
    { "no_renegotiation", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_no_renegotiation, 0x19, -1, -1, -1, -1 },
    { "unsupported_extension", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_unsupported_extension, 0x19, -1, -1, -1, -1 },
    { "certificate_unobtainable", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_certificate_unobtainable, 0x19, -1, -1, -1, -1 },
    { "unrecognized_name", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_unrecognized_name, 0x19, -1, -1, -1, -1 },
    { "bad_certificate_status_response", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate_status_response, 0x19, -1, -1, -1, -1 },
    { "bad_certificate_hash_value", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate_hash_value, 0x19, -1, -1, -1, -1 },
    { "unknown_psk_identity", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_unknown_psk_identity, 0x19, -1, -1, -1, -1 },
    { "inappropriate_fallback", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsAlertDescription_inappropriate_fallback, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getName", "S", "getText" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsAlertDescription = { "AlertDescription", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 31, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsAlertDescription;
}

@end

void LibOrgBouncycastleCryptoTlsAlertDescription_init(LibOrgBouncycastleCryptoTlsAlertDescription *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsAlertDescription *new_LibOrgBouncycastleCryptoTlsAlertDescription_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsAlertDescription, init)
}

LibOrgBouncycastleCryptoTlsAlertDescription *create_LibOrgBouncycastleCryptoTlsAlertDescription_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsAlertDescription, init)
}

NSString *LibOrgBouncycastleCryptoTlsAlertDescription_getNameWithShort_(jshort alertDescription) {
  LibOrgBouncycastleCryptoTlsAlertDescription_initialize();
  switch (alertDescription) {
    case LibOrgBouncycastleCryptoTlsAlertDescription_close_notify:
    return @"close_notify";
    case LibOrgBouncycastleCryptoTlsAlertDescription_unexpected_message:
    return @"unexpected_message";
    case LibOrgBouncycastleCryptoTlsAlertDescription_bad_record_mac:
    return @"bad_record_mac";
    case LibOrgBouncycastleCryptoTlsAlertDescription_decryption_failed:
    return @"decryption_failed";
    case LibOrgBouncycastleCryptoTlsAlertDescription_record_overflow:
    return @"record_overflow";
    case LibOrgBouncycastleCryptoTlsAlertDescription_decompression_failure:
    return @"decompression_failure";
    case LibOrgBouncycastleCryptoTlsAlertDescription_handshake_failure:
    return @"handshake_failure";
    case LibOrgBouncycastleCryptoTlsAlertDescription_no_certificate:
    return @"no_certificate";
    case LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate:
    return @"bad_certificate";
    case LibOrgBouncycastleCryptoTlsAlertDescription_unsupported_certificate:
    return @"unsupported_certificate";
    case LibOrgBouncycastleCryptoTlsAlertDescription_certificate_revoked:
    return @"certificate_revoked";
    case LibOrgBouncycastleCryptoTlsAlertDescription_certificate_expired:
    return @"certificate_expired";
    case LibOrgBouncycastleCryptoTlsAlertDescription_certificate_unknown:
    return @"certificate_unknown";
    case LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter:
    return @"illegal_parameter";
    case LibOrgBouncycastleCryptoTlsAlertDescription_unknown_ca:
    return @"unknown_ca";
    case LibOrgBouncycastleCryptoTlsAlertDescription_access_denied:
    return @"access_denied";
    case LibOrgBouncycastleCryptoTlsAlertDescription_decode_error:
    return @"decode_error";
    case LibOrgBouncycastleCryptoTlsAlertDescription_decrypt_error:
    return @"decrypt_error";
    case LibOrgBouncycastleCryptoTlsAlertDescription_export_restriction:
    return @"export_restriction";
    case LibOrgBouncycastleCryptoTlsAlertDescription_protocol_version:
    return @"protocol_version";
    case LibOrgBouncycastleCryptoTlsAlertDescription_insufficient_security:
    return @"insufficient_security";
    case LibOrgBouncycastleCryptoTlsAlertDescription_internal_error:
    return @"internal_error";
    case LibOrgBouncycastleCryptoTlsAlertDescription_user_canceled:
    return @"user_canceled";
    case LibOrgBouncycastleCryptoTlsAlertDescription_no_renegotiation:
    return @"no_renegotiation";
    case LibOrgBouncycastleCryptoTlsAlertDescription_unsupported_extension:
    return @"unsupported_extension";
    case LibOrgBouncycastleCryptoTlsAlertDescription_certificate_unobtainable:
    return @"certificate_unobtainable";
    case LibOrgBouncycastleCryptoTlsAlertDescription_unrecognized_name:
    return @"unrecognized_name";
    case LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate_status_response:
    return @"bad_certificate_status_response";
    case LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate_hash_value:
    return @"bad_certificate_hash_value";
    case LibOrgBouncycastleCryptoTlsAlertDescription_unknown_psk_identity:
    return @"unknown_psk_identity";
    case LibOrgBouncycastleCryptoTlsAlertDescription_inappropriate_fallback:
    return @"inappropriate_fallback";
    default:
    return @"UNKNOWN";
  }
}

NSString *LibOrgBouncycastleCryptoTlsAlertDescription_getTextWithShort_(jshort alertDescription) {
  LibOrgBouncycastleCryptoTlsAlertDescription_initialize();
  return JreStrcat("$CSC", LibOrgBouncycastleCryptoTlsAlertDescription_getNameWithShort_(alertDescription), '(', alertDescription, ')');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsAlertDescription)
