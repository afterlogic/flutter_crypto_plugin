//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ec/JcajceEcKeyAgreementSpi.java
//

#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BaseAgreementSpi.h"
#include "BasicAgreement.h"
#include "CipherParameters.h"
#include "ConcatenationKDFGenerator.h"
#include "DHUParameterSpec.h"
#include "DerivationFunction.h"
#include "Digest.h"
#include "DigestFactory.h"
#include "ECCurve.h"
#include "ECDHBasicAgreement.h"
#include "ECDHCBasicAgreement.h"
#include "ECDHCUnifiedAgreement.h"
#include "ECDHUPrivateParameters.h"
#include "ECDHUPublicParameters.h"
#include "ECDomainParameters.h"
#include "ECMQVBasicAgreement.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKey.h"
#include "ECPublicKeyParameters.h"
#include "ECUtils.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceEcKeyAgreementSpi.h"
#include "JcajceUtilECUtil.h"
#include "JceECPrivateKey.h"
#include "KDF2BytesGenerator.h"
#include "MQVParameterSpec.h"
#include "MQVPrivateKey.h"
#include "MQVPrivateParameters.h"
#include "MQVPublicKey.h"
#include "MQVPublicParameters.h"
#include "RIPEMD160Digest.h"
#include "UserKeyingMaterialSpec.h"
#include "X9IntegerConverter.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi () {
 @public
  NSString *kaAlgorithm_JcajceEcKeyAgreementSpi_;
  LibOrgBouncycastleCryptoParamsECDomainParameters *parameters_;
  id agreement_;
  LibOrgBouncycastleJcajceSpecMQVParameterSpec *mqvParameters_;
  LibOrgBouncycastleJcajceSpecDHUParameterSpec *dheParameters_;
  IOSByteArray *result_;
}

- (void)initFromKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)parameterSpec OBJC_METHOD_FAMILY_NONE;

+ (NSString *)getSimpleNameWithIOSClass:(IOSClass *)clazz;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, kaAlgorithm_JcajceEcKeyAgreementSpi_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, parameters_, LibOrgBouncycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, agreement_, id)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, mqvParameters_, LibOrgBouncycastleJcajceSpecMQVParameterSpec *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, dheParameters_, LibOrgBouncycastleJcajceSpecDHUParameterSpec *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, result_, IOSByteArray *)

inline LibOrgBouncycastleAsn1X9X9IntegerConverter *LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_get_converter(void);
static LibOrgBouncycastleAsn1X9X9IntegerConverter *LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_converter;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, converter, LibOrgBouncycastleAsn1X9X9IntegerConverter *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi *self, id<JavaSecurityKey> key, id<JavaSecuritySpecAlgorithmParameterSpec> parameterSpec);

__attribute__((unused)) static NSString *LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_getSimpleNameWithIOSClass_(IOSClass *clazz);

@interface LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1 : JavaSecurityInvalidKeyException {
 @public
  JavaLangException *val$e_;
}

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0
                             withNSString:(NSString *)x0;

- (JavaLangThrowable *)getCause;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1_initWithJavaLangException_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1 *self, JavaLangException *capture$0, NSString *x0);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi

- (instancetype)initWithNSString:(NSString *)kaAlgorithm
withLibOrgBouncycastleCryptoBasicAgreement:(id<LibOrgBouncycastleCryptoBasicAgreement>)agreement
withLibOrgBouncycastleCryptoDerivationFunction:(id<LibOrgBouncycastleCryptoDerivationFunction>)kdf {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, kaAlgorithm, agreement, kdf);
  return self;
}

- (instancetype)initWithNSString:(NSString *)kaAlgorithm
withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement:(LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement *)agreement
withLibOrgBouncycastleCryptoDerivationFunction:(id<LibOrgBouncycastleCryptoDerivationFunction>)kdf {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, kaAlgorithm, agreement, kdf);
  return self;
}

- (IOSByteArray *)bigIntToBytesWithJavaMathBigInteger:(JavaMathBigInteger *)r {
  return [((LibOrgBouncycastleAsn1X9X9IntegerConverter *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_converter)) integerToBytesWithJavaMathBigInteger:r withInt:[LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_converter getByteLengthWithLibOrgBouncycastleMathEcECCurve:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(parameters_)) getCurve]]];
}

- (id<JavaSecurityKey>)engineDoPhaseWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                            withBoolean:(jboolean)lastPhase {
  if (parameters_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", kaAlgorithm_JcajceEcKeyAgreementSpi_, @" not initialised."));
  }
  if (!lastPhase) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", kaAlgorithm_JcajceEcKeyAgreementSpi_, @" can only be between two parties."));
  }
  id<LibOrgBouncycastleCryptoCipherParameters> pubKey;
  if ([agreement_ isKindOfClass:[LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement class]]) {
    if (!([LibOrgBouncycastleJceInterfacesMQVPublicKey_class_() isInstance:key])) {
      LibOrgBouncycastleCryptoParamsECPublicKeyParameters *staticKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_())), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
      LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_([((LibOrgBouncycastleJcajceSpecMQVParameterSpec *) nil_chk(mqvParameters_)) getOtherPartyEphemeralKey]), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
      pubKey = new_LibOrgBouncycastleCryptoParamsMQVPublicParameters_initWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(staticKey, ephemKey);
    }
    else {
      id<LibOrgBouncycastleJceInterfacesMQVPublicKey> mqvPubKey = (id<LibOrgBouncycastleJceInterfacesMQVPublicKey>) cast_check(key, LibOrgBouncycastleJceInterfacesMQVPublicKey_class_());
      LibOrgBouncycastleCryptoParamsECPublicKeyParameters *staticKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_([((id<LibOrgBouncycastleJceInterfacesMQVPublicKey>) nil_chk(mqvPubKey)) getStaticKey]), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
      LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_([mqvPubKey getEphemeralKey]), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
      pubKey = new_LibOrgBouncycastleCryptoParamsMQVPublicParameters_initWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(staticKey, ephemKey);
    }
  }
  else if ([agreement_ isKindOfClass:[LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement class]]) {
    LibOrgBouncycastleCryptoParamsECPublicKeyParameters *staticKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_())), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
    LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_([((LibOrgBouncycastleJcajceSpecDHUParameterSpec *) nil_chk(dheParameters_)) getOtherPartyEphemeralKey]), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
    pubKey = new_LibOrgBouncycastleCryptoParamsECDHUPublicParameters_initWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(staticKey, ephemKey);
  }
  else {
    if (!([JavaSecurityPublicKey_class_() isInstance:key])) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$$", kaAlgorithm_JcajceEcKeyAgreementSpi_, @" key agreement requires ", LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_getSimpleNameWithIOSClass_(LibOrgBouncycastleJceInterfacesECPublicKey_class_()), @" for doPhase"));
    }
    pubKey = LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_()));
  }
  @try {
    if ([LibOrgBouncycastleCryptoBasicAgreement_class_() isInstance:agreement_]) {
      result_ = [self bigIntToBytesWithJavaMathBigInteger:[((id<LibOrgBouncycastleCryptoBasicAgreement>) nil_chk(((id<LibOrgBouncycastleCryptoBasicAgreement>) cast_check(agreement_, LibOrgBouncycastleCryptoBasicAgreement_class_())))) calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:pubKey]];
    }
    else {
      result_ = [((LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement *) nil_chk(((LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement *) cast_chk(agreement_, [LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement class])))) calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:pubKey];
    }
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1_initWithJavaLangException_withNSString_(e, JreStrcat("$$", @"calculation failed: ", [e getMessage]));
  }
  return nil;
}

- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (params != nil && !([params isKindOfClass:[LibOrgBouncycastleJcajceSpecMQVParameterSpec class]] || [params isKindOfClass:[LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec class]] || [params isKindOfClass:[LibOrgBouncycastleJcajceSpecDHUParameterSpec class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"No algorithm parameters supported");
  }
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(self, key, params);
}

- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(self, key, nil);
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e getMessage]);
  }
}

- (void)initFromKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)parameterSpec {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(self, key, parameterSpec);
}

+ (NSString *)getSimpleNameWithIOSClass:(IOSClass *)clazz {
  return LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_getSimpleNameWithIOSClass_(clazz);
}

- (IOSByteArray *)calcSecret {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(result_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 14, 15, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoBasicAgreement:withLibOrgBouncycastleCryptoDerivationFunction:);
  methods[1].selector = @selector(initWithNSString:withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement:withLibOrgBouncycastleCryptoDerivationFunction:);
  methods[2].selector = @selector(bigIntToBytesWithJavaMathBigInteger:);
  methods[3].selector = @selector(engineDoPhaseWithJavaSecurityKey:withBoolean:);
  methods[4].selector = @selector(engineInitWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(engineInitWithJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[6].selector = @selector(initFromKeyWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[7].selector = @selector(getSimpleNameWithIOSClass:);
  methods[8].selector = @selector(calcSecret);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "converter", "LLibOrgBouncycastleAsn1X9X9IntegerConverter;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "kaAlgorithm_JcajceEcKeyAgreementSpi_", "LNSString;", .constantValue.asLong = 0, 0x2, 17, -1, -1, -1 },
    { "parameters_", "LLibOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "agreement_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mqvParameters_", "LLibOrgBouncycastleJcajceSpecMQVParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dheParameters_", "LLibOrgBouncycastleJcajceSpecDHUParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "result_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LLibOrgBouncycastleCryptoBasicAgreement;LLibOrgBouncycastleCryptoDerivationFunction;", "LNSString;LLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement;LLibOrgBouncycastleCryptoDerivationFunction;", "bigIntToBytes", "LJavaMathBigInteger;", "engineDoPhase", "LJavaSecurityKey;Z", "LJavaSecurityInvalidKeyException;LJavaLangIllegalStateException;", "engineInit", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "LJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "initFromKey", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;", "getSimpleName", "LIOSClass;", &LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_converter, "kaAlgorithm", "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi = { "JcajceEcKeyAgreementSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x1, 9, 7, -1, 18, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi class]) {
    LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_converter = new_LibOrgBouncycastleAsn1X9X9IntegerConverter_init();
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi)
  }
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi *self, NSString *kaAlgorithm, id<LibOrgBouncycastleCryptoBasicAgreement> agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoDerivationFunction_(self, kaAlgorithm, kdf);
  self->kaAlgorithm_JcajceEcKeyAgreementSpi_ = kaAlgorithm;
  self->agreement_ = agreement;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(NSString *kaAlgorithm, id<LibOrgBouncycastleCryptoBasicAgreement> agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_, kaAlgorithm, agreement, kdf)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(NSString *kaAlgorithm, id<LibOrgBouncycastleCryptoBasicAgreement> agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_, kaAlgorithm, agreement, kdf)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi *self, NSString *kaAlgorithm, LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement *agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoDerivationFunction_(self, kaAlgorithm, kdf);
  self->kaAlgorithm_JcajceEcKeyAgreementSpi_ = kaAlgorithm;
  self->agreement_ = agreement;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(NSString *kaAlgorithm, LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement *agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_, kaAlgorithm, agreement, kdf)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(NSString *kaAlgorithm, LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement *agreement, id<LibOrgBouncycastleCryptoDerivationFunction> kdf) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi, initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_, kaAlgorithm, agreement, kdf)
}

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initFromKeyWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi *self, id<JavaSecurityKey> key, id<JavaSecuritySpecAlgorithmParameterSpec> parameterSpec) {
  if ([self->agreement_ isKindOfClass:[LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement class]]) {
    self->mqvParameters_ = nil;
    if (!([LibOrgBouncycastleJceInterfacesMQVPrivateKey_class_() isInstance:key]) && !([parameterSpec isKindOfClass:[LibOrgBouncycastleJcajceSpecMQVParameterSpec class]])) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$$", self->kaAlgorithm_JcajceEcKeyAgreementSpi_, @" key agreement requires ", LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_getSimpleNameWithIOSClass_(LibOrgBouncycastleJcajceSpecMQVParameterSpec_class_()), @" for initialisation"));
    }
    LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivKey;
    LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemPrivKey;
    LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemPubKey;
    if ([LibOrgBouncycastleJceInterfacesMQVPrivateKey_class_() isInstance:key]) {
      id<LibOrgBouncycastleJceInterfacesMQVPrivateKey> mqvPrivKey = (id<LibOrgBouncycastleJceInterfacesMQVPrivateKey>) cast_check(key, LibOrgBouncycastleJceInterfacesMQVPrivateKey_class_());
      staticPrivKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_([((id<LibOrgBouncycastleJceInterfacesMQVPrivateKey>) nil_chk(mqvPrivKey)) getStaticPrivateKey]), [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
      ephemPrivKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_([mqvPrivKey getEphemeralPrivateKey]), [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
      ephemPubKey = nil;
      if ([mqvPrivKey getEphemeralPublicKey] != nil) {
        ephemPubKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_([mqvPrivKey getEphemeralPublicKey]), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
      }
    }
    else {
      LibOrgBouncycastleJcajceSpecMQVParameterSpec *mqvParameterSpec = (LibOrgBouncycastleJcajceSpecMQVParameterSpec *) cast_chk(parameterSpec, [LibOrgBouncycastleJcajceSpecMQVParameterSpec class]);
      staticPrivKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_())), [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
      ephemPrivKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_([((LibOrgBouncycastleJcajceSpecMQVParameterSpec *) nil_chk(mqvParameterSpec)) getEphemeralPrivateKey]), [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
      ephemPubKey = nil;
      if ([mqvParameterSpec getEphemeralPublicKey] != nil) {
        ephemPubKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_([mqvParameterSpec getEphemeralPublicKey]), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
      }
      self->mqvParameters_ = mqvParameterSpec;
      self->ukmParameters_ = [mqvParameterSpec getUserKeyingMaterial];
    }
    LibOrgBouncycastleCryptoParamsMQVPrivateParameters *localParams = new_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(staticPrivKey, ephemPrivKey, ephemPubKey);
    self->parameters_ = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(staticPrivKey)) getParameters];
    [((LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement *) nil_chk(((LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement *) self->agreement_))) init__WithLibOrgBouncycastleCryptoCipherParameters:localParams];
  }
  else if ([parameterSpec isKindOfClass:[LibOrgBouncycastleJcajceSpecDHUParameterSpec class]]) {
    if (!([self->agreement_ isKindOfClass:[LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement class]])) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$", self->kaAlgorithm_JcajceEcKeyAgreementSpi_, @" key agreement cannot be used with ", LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_getSimpleNameWithIOSClass_(LibOrgBouncycastleJcajceSpecDHUParameterSpec_class_())));
    }
    LibOrgBouncycastleJcajceSpecDHUParameterSpec *dheParameterSpec = (LibOrgBouncycastleJcajceSpecDHUParameterSpec *) parameterSpec;
    LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivKey;
    LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemPrivKey;
    LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemPubKey;
    staticPrivKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_())), [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    ephemPrivKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_([((LibOrgBouncycastleJcajceSpecDHUParameterSpec *) nil_chk(dheParameterSpec)) getEphemeralPrivateKey]), [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    ephemPubKey = nil;
    if ([dheParameterSpec getEphemeralPublicKey] != nil) {
      ephemPubKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_([dheParameterSpec getEphemeralPublicKey]), [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
    }
    self->dheParameters_ = dheParameterSpec;
    self->ukmParameters_ = [dheParameterSpec getUserKeyingMaterial];
    LibOrgBouncycastleCryptoParamsECDHUPrivateParameters *localParams = new_LibOrgBouncycastleCryptoParamsECDHUPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(staticPrivKey, ephemPrivKey, ephemPubKey);
    self->parameters_ = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(staticPrivKey)) getParameters];
    [((LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement *) nil_chk(((LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement *) cast_chk(self->agreement_, [LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement class])))) init__WithLibOrgBouncycastleCryptoCipherParameters:localParams];
  }
  else {
    if (!([JavaSecurityPrivateKey_class_() isInstance:key])) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$$", self->kaAlgorithm_JcajceEcKeyAgreementSpi_, @" key agreement requires ", LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_getSimpleNameWithIOSClass_(LibOrgBouncycastleJceInterfacesJceECPrivateKey_class_()), @" for initialisation"));
    }
    if (self->kdf_ == nil && [parameterSpec isKindOfClass:[LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec class]]) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"no KDF specified for UserKeyingMaterialSpec");
    }
    LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *privKey = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_())), [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    self->parameters_ = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(privKey)) getParameters];
    self->ukmParameters_ = ([parameterSpec isKindOfClass:[LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec class]]) ? [((LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec *) nil_chk(((LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec *) cast_chk(parameterSpec, [LibOrgBouncycastleJcajceSpecUserKeyingMaterialSpec class])))) getUserKeyingMaterial] : nil;
    [((id<LibOrgBouncycastleCryptoBasicAgreement>) nil_chk(((id<LibOrgBouncycastleCryptoBasicAgreement>) cast_check(self->agreement_, LibOrgBouncycastleCryptoBasicAgreement_class_())))) init__WithLibOrgBouncycastleCryptoCipherParameters:privKey];
  }
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_getSimpleNameWithIOSClass_(IOSClass *clazz) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initialize();
  NSString *fullName = [((IOSClass *) nil_chk(clazz)) getName];
  return [((NSString *) nil_chk(fullName)) java_substring:[fullName java_lastIndexOf:'.'] + 1];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0
                             withNSString:(NSString *)x0 {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1_initWithJavaLangException_withNSString_(self, capture$0, x0);
  return self;
}

- (JavaLangThrowable *)getCause {
  return val$e_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangException:withNSString:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LJavaLangException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;", "engineDoPhaseWithJavaSecurityKey:withBoolean:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1 = { "", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x8010, 2, 1, 1, -1, 2, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1_initWithJavaLangException_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1 *self, JavaLangException *capture$0, NSString *x0) {
  self->val$e_ = capture$0;
  JavaSecurityInvalidKeyException_initWithNSString_(self, x0);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1, initWithJavaLangException_withNSString_, capture$0, x0)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1_initWithJavaLangException_withNSString_(JavaLangException *capture$0, NSString *x0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_1, initWithJavaLangException_withNSString_, capture$0, x0)
}

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH = { "DH", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDH", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DH)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC = { "DHC", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHC", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHC)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV = { "MQV", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQV", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQV)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC = { "DHUC", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHU", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), nil);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUC)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF = { "DHwithSHA1KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA1KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo = { "DHwithSHA1KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA1KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo = { "CDHwithSHA1KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHwithSHA1KDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA1KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo = { "DHwithSHA224KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA224KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA224KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo = { "CDHwithSHA224KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHwithSHA224KDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA224KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo = { "DHwithSHA256KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA256KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo = { "CDHwithSHA256KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHwithSHA256KDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA256KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo = { "DHwithSHA384KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA384KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo = { "CDHwithSHA384KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHwithSHA384KDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA384KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo = { "DHwithSHA512KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA512KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo = { "CDHwithSHA512KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHwithSHA512KDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_CDHwithSHA512KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo = { "MQVwithSHA1KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA1KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo = { "MQVwithSHA224KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA224KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo = { "MQVwithSHA256KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA256KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo = { "MQVwithSHA384KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA384KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo = { "MQVwithSHA512KDFAndSharedInfo", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA512KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDFAndSharedInfo)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF = { "DHwithSHA1CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA1CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA1CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF = { "DHwithSHA256CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA256CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA256CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF = { "DHwithSHA384CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA384CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA384CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF = { "DHwithSHA512CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECDHwithSHA512CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHwithSHA512CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF = { "MQVwithSHA1CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA1CKDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF = { "MQVwithSHA224CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA224CKDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF = { "MQVwithSHA256CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA256CKDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF = { "MQVwithSHA384CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA384CKDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF = { "MQVwithSHA512CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA512CKDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF = { "MQVwithSHA1KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA1KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA1KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF = { "MQVwithSHA224KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA224KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA224KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF = { "MQVwithSHA256KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA256KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA256KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF = { "MQVwithSHA384KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA384KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA384KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF = { "MQVwithSHA512KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECMQVwithSHA512KDF", new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_MQVwithSHA512KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF = { "DHUwithSHA1CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA1CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF = { "DHUwithSHA224CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA224CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF = { "DHUwithSHA256CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA256CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF = { "DHUwithSHA384CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA384CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF = { "DHUwithSHA512CKDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA512CKDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoAgreementKdfConcatenationKDFGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512CKDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF = { "DHUwithSHA1KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA1KDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA1KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF = { "DHUwithSHA224KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA224KDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA224KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF = { "DHUwithSHA256KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA256KDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA256KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF = { "DHUwithSHA384KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA384KDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA384KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF = { "DHUwithSHA512KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECCDHUwithSHA512KDF", new_LibOrgBouncycastleCryptoAgreementECDHCUnifiedAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_DHUwithSHA512KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF = { "ECKAEGwithSHA1KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECKAEGwithSHA1KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA1KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF = { "ECKAEGwithRIPEMD160KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECKAEGwithRIPEMD160KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsRIPEMD160Digest_init()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithRIPEMD160KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF = { "ECKAEGwithSHA224KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECKAEGwithSHA224KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA224()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA224KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF = { "ECKAEGwithSHA256KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECKAEGwithSHA256KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA256()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA256KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF = { "ECKAEGwithSHA384KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECKAEGwithSHA384KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA384()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA384KDF)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF = { "ECKAEGwithSHA512KDF", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_initWithNSString_withLibOrgBouncycastleCryptoBasicAgreement_withLibOrgBouncycastleCryptoDerivationFunction_(self, @"ECKAEGwithSHA512KDF", new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(), new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoUtilDigestFactory_createSHA512()));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyAgreementSpi_ECKAEGwithSHA512KDF)
