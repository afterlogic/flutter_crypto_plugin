//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/BufferedBlockCipher.java
//

#ifndef BufferedBlockCipher_H
#define BufferedBlockCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoBufferedBlockCipher : NSObject {
 @public
  IOSByteArray *buf_;
  jint bufOff_;
  jboolean forEncryption_;
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_;
  jboolean partialBlockOkay_;
  jboolean pgpCFB_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (jint)getBlockSize;

- (jint)getOutputSizeWithInt:(jint)length;

- (id<LibOrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher;

- (jint)getUpdateOutputSizeWithInt:(jint)len;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff;

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

#pragma mark Protected

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoBufferedBlockCipher)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoBufferedBlockCipher, buf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoBufferedBlockCipher, cipher_, id<LibOrgBouncycastleCryptoBlockCipher>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoBufferedBlockCipher_init(LibOrgBouncycastleCryptoBufferedBlockCipher *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoBufferedBlockCipher *new_LibOrgBouncycastleCryptoBufferedBlockCipher_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoBufferedBlockCipher *create_LibOrgBouncycastleCryptoBufferedBlockCipher_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoBufferedBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoBufferedBlockCipher *new_LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoBufferedBlockCipher *create_LibOrgBouncycastleCryptoBufferedBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoBufferedBlockCipher)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BufferedBlockCipher_H
