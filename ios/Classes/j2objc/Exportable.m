//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/sig/Exportable.java
//

#include "Exportable.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SignatureSubpacket.h"
#include "SignatureSubpacketTags.h"

@interface LibOrgBouncycastleBcpgSigExportable ()

+ (IOSByteArray *)booleanToByteArrayWithBoolean:(jboolean)value;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleBcpgSigExportable_booleanToByteArrayWithBoolean_(jboolean value);

@implementation LibOrgBouncycastleBcpgSigExportable

+ (IOSByteArray *)booleanToByteArrayWithBoolean:(jboolean)value {
  return LibOrgBouncycastleBcpgSigExportable_booleanToByteArrayWithBoolean_(value);
}

- (instancetype)initWithBoolean:(jboolean)critical
                    withBoolean:(jboolean)isLongLength
                  withByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_withByteArray_(self, critical, isLongLength, data);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)critical
                    withBoolean:(jboolean)isExportable {
  LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_(self, critical, isExportable);
  return self;
}

- (jboolean)isExportable {
  return IOSByteArray_Get(nil_chk(data_), 0) != 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(booleanToByteArrayWithBoolean:);
  methods[1].selector = @selector(initWithBoolean:withBoolean:withByteArray:);
  methods[2].selector = @selector(initWithBoolean:withBoolean:);
  methods[3].selector = @selector(isExportable);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "booleanToByteArray", "Z", "ZZ[B", "ZZ" };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgSigExportable = { "Exportable", "lib.org.bouncycastle.bcpg.sig", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgSigExportable;
}

@end

IOSByteArray *LibOrgBouncycastleBcpgSigExportable_booleanToByteArrayWithBoolean_(jboolean value) {
  LibOrgBouncycastleBcpgSigExportable_initialize();
  IOSByteArray *data = [IOSByteArray newArrayWithLength:1];
  if (value) {
    *IOSByteArray_GetRef(data, 0) = 1;
    return data;
  }
  else {
    return data;
  }
}

void LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_withByteArray_(LibOrgBouncycastleBcpgSigExportable *self, jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, LibOrgBouncycastleBcpgSignatureSubpacketTags_EXPORTABLE, critical, isLongLength, data);
}

LibOrgBouncycastleBcpgSigExportable *new_LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_withByteArray_(jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSigExportable, initWithBoolean_withBoolean_withByteArray_, critical, isLongLength, data)
}

LibOrgBouncycastleBcpgSigExportable *create_LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_withByteArray_(jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSigExportable, initWithBoolean_withBoolean_withByteArray_, critical, isLongLength, data)
}

void LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_(LibOrgBouncycastleBcpgSigExportable *self, jboolean critical, jboolean isExportable) {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, LibOrgBouncycastleBcpgSignatureSubpacketTags_EXPORTABLE, critical, false, LibOrgBouncycastleBcpgSigExportable_booleanToByteArrayWithBoolean_(isExportable));
}

LibOrgBouncycastleBcpgSigExportable *new_LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_(jboolean critical, jboolean isExportable) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSigExportable, initWithBoolean_withBoolean_, critical, isExportable)
}

LibOrgBouncycastleBcpgSigExportable *create_LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_(jboolean critical, jboolean isExportable) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSigExportable, initWithBoolean_withBoolean_, critical, isExportable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgSigExportable)
