//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/SignedFileProcessor.java
//

#include "ArmoredOutputStream.h"
#include "BCPGOutputStream.h"
#include "BouncyCastleProvider.h"
#include "CompressionAlgorithmTags.h"
#include "HashAlgorithmTags.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaKeyFingerprintCalculator.h"
#include "JcaPGPContentSignerBuilder.h"
#include "JcaPGPContentVerifierBuilderProvider.h"
#include "JcaPGPObjectFactory.h"
#include "JcePBESecretKeyDecryptorBuilder.h"
#include "PBESecretKeyDecryptor.h"
#include "PGPCompressedData.h"
#include "PGPCompressedDataGenerator.h"
#include "PGPExampleUtil.h"
#include "PGPLiteralData.h"
#include "PGPLiteralDataGenerator.h"
#include "PGPOnePassSignature.h"
#include "PGPOnePassSignatureList.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRingCollection.h"
#include "PGPSecretKey.h"
#include "PGPSignature.h"
#include "PGPSignatureGenerator.h"
#include "PGPSignatureList.h"
#include "PGPSignatureSubpacketGenerator.h"
#include "PGPSignatureSubpacketVector.h"
#include "PGPUtil.h"
#include "SignedFileProcessor.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/security/Security.h"
#include "java/util/Iterator.h"

@interface LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor ()

+ (void)verifyFileWithJavaIoInputStream:(JavaIoInputStream *)inArg
                  withJavaIoInputStream:(JavaIoInputStream *)keyIn;

+ (void)signFileWithNSString:(NSString *)fileName
       withJavaIoInputStream:(JavaIoInputStream *)keyIn
      withJavaIoOutputStream:(JavaIoOutputStream *)outArg
               withCharArray:(IOSCharArray *)pass
                 withBoolean:(jboolean)armor;

@end

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_verifyFileWithJavaIoInputStream_withJavaIoInputStream_(JavaIoInputStream *inArg, JavaIoInputStream *keyIn);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_signFileWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(NSString *fileName, JavaIoInputStream *keyIn, JavaIoOutputStream *outArg, IOSCharArray *pass, jboolean armor);

@implementation LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)verifyFileWithJavaIoInputStream:(JavaIoInputStream *)inArg
                  withJavaIoInputStream:(JavaIoInputStream *)keyIn {
  LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_verifyFileWithJavaIoInputStream_withJavaIoInputStream_(inArg, keyIn);
}

+ (void)signFileWithNSString:(NSString *)fileName
       withJavaIoInputStream:(JavaIoInputStream *)keyIn
      withJavaIoOutputStream:(JavaIoOutputStream *)outArg
               withCharArray:(IOSCharArray *)pass
                 withBoolean:(jboolean)armor {
  LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_signFileWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(fileName, keyIn, outArg, pass, armor);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verifyFileWithJavaIoInputStream:withJavaIoInputStream:);
  methods[2].selector = @selector(signFileWithNSString:withJavaIoInputStream:withJavaIoOutputStream:withCharArray:withBoolean:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verifyFile", "LJavaIoInputStream;LJavaIoInputStream;", "LJavaLangException;", "signFile", "LNSString;LJavaIoInputStream;LJavaIoOutputStream;[CZ", "LJavaIoIOException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;LLibOrgBouncycastleOpenpgpPGPException;LJavaSecuritySignatureException;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor = { "SignedFileProcessor", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor;
}

@end

void LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_init(LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor *new_LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor, init)
}

LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor *create_LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor, init)
}

void LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_verifyFileWithJavaIoInputStream_withJavaIoInputStream_(JavaIoInputStream *inArg, JavaIoInputStream *keyIn) {
  LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_initialize();
  inArg = LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(inArg);
  LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(inArg);
  LibOrgBouncycastleOpenpgpPGPCompressedData *c1 = (LibOrgBouncycastleOpenpgpPGPCompressedData *) cast_chk([pgpFact nextObject], [LibOrgBouncycastleOpenpgpPGPCompressedData class]);
  pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_([((LibOrgBouncycastleOpenpgpPGPCompressedData *) nil_chk(c1)) getDataStream]);
  LibOrgBouncycastleOpenpgpPGPOnePassSignatureList *p1 = (LibOrgBouncycastleOpenpgpPGPOnePassSignatureList *) cast_chk([pgpFact nextObject], [LibOrgBouncycastleOpenpgpPGPOnePassSignatureList class]);
  LibOrgBouncycastleOpenpgpPGPOnePassSignature *ops = [((LibOrgBouncycastleOpenpgpPGPOnePassSignatureList *) nil_chk(p1)) getWithInt:0];
  LibOrgBouncycastleOpenpgpPGPLiteralData *p2 = (LibOrgBouncycastleOpenpgpPGPLiteralData *) cast_chk([pgpFact nextObject], [LibOrgBouncycastleOpenpgpPGPLiteralData class]);
  JavaIoInputStream *dIn = [((LibOrgBouncycastleOpenpgpPGPLiteralData *) nil_chk(p2)) getInputStream];
  jint ch;
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *pgpRing = new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(keyIn), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
  LibOrgBouncycastleOpenpgpPGPPublicKey *key = [pgpRing getPublicKeyWithLong:[((LibOrgBouncycastleOpenpgpPGPOnePassSignature *) nil_chk(ops)) getKeyID]];
  JavaIoFileOutputStream *out = new_JavaIoFileOutputStream_initWithNSString_([p2 getFileName]);
  [ops init__WithLibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilderProvider:[new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_init() setProviderWithNSString:@"BC"] withLibOrgBouncycastleOpenpgpPGPPublicKey:key];
  while ((ch = [((JavaIoInputStream *) nil_chk(dIn)) read]) >= 0) {
    [ops updateWithByte:(jbyte) ch];
    [out writeWithInt:ch];
  }
  [out close];
  LibOrgBouncycastleOpenpgpPGPSignatureList *p3 = (LibOrgBouncycastleOpenpgpPGPSignatureList *) cast_chk([pgpFact nextObject], [LibOrgBouncycastleOpenpgpPGPSignatureList class]);
  if ([ops verifyWithLibOrgBouncycastleOpenpgpPGPSignature:[((LibOrgBouncycastleOpenpgpPGPSignatureList *) nil_chk(p3)) getWithInt:0]]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"signature verified."];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"signature verification failed."];
  }
}

void LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_signFileWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(NSString *fileName, JavaIoInputStream *keyIn, JavaIoOutputStream *outArg, IOSCharArray *pass, jboolean armor) {
  LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_initialize();
  if (armor) {
    outArg = new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(outArg);
  }
  LibOrgBouncycastleOpenpgpPGPSecretKey *pgpSec = LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleOpenpgpPGPPrivateKey *pgpPrivKey = [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(pgpSec)) extractPrivateKeyWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyDecryptorBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyDecryptorBuilder_init() setProviderWithNSString:@"BC"])) buildWithCharArray:pass]];
  LibOrgBouncycastleOpenpgpPGPSignatureGenerator *sGen = new_LibOrgBouncycastleOpenpgpPGPSignatureGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentSignerBuilder_initWithInt_withInt_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([pgpSec getPublicKey])) getAlgorithm], LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1) setProviderWithNSString:@"BC"]);
  [sGen init__WithInt:LibOrgBouncycastleOpenpgpPGPSignature_BINARY_DOCUMENT withLibOrgBouncycastleOpenpgpPGPPrivateKey:pgpPrivKey];
  id<JavaUtilIterator> it = [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([pgpSec getPublicKey])) getUserIDs];
  if ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator *spGen = new_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator_init();
    [spGen setSignerUserIDWithBoolean:false withNSString:(NSString *) cast_chk([it next], [NSString class])];
    [sGen setHashedSubpacketsWithLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:[spGen generate]];
  }
  LibOrgBouncycastleOpenpgpPGPCompressedDataGenerator *cGen = new_LibOrgBouncycastleOpenpgpPGPCompressedDataGenerator_initWithInt_(LibOrgBouncycastleBcpgCompressionAlgorithmTags_ZLIB);
  LibOrgBouncycastleBcpgBCPGOutputStream *bOut = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_([cGen openWithJavaIoOutputStream:outArg]);
  [((LibOrgBouncycastleOpenpgpPGPOnePassSignature *) nil_chk([sGen generateOnePassVersionWithBoolean:false])) encodeWithJavaIoOutputStream:bOut];
  JavaIoFile *file = new_JavaIoFile_initWithNSString_(fileName);
  LibOrgBouncycastleOpenpgpPGPLiteralDataGenerator *lGen = new_LibOrgBouncycastleOpenpgpPGPLiteralDataGenerator_init();
  JavaIoOutputStream *lOut = [lGen openWithJavaIoOutputStream:bOut withChar:LibOrgBouncycastleOpenpgpPGPLiteralData_BINARY withJavaIoFile:file];
  JavaIoFileInputStream *fIn = new_JavaIoFileInputStream_initWithJavaIoFile_(file);
  jint ch;
  while ((ch = [fIn read]) >= 0) {
    [((JavaIoOutputStream *) nil_chk(lOut)) writeWithInt:ch];
    [sGen updateWithByte:(jbyte) ch];
  }
  [lGen close];
  [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk([sGen generate])) encodeWithJavaIoOutputStream:bOut];
  [cGen close];
  if (armor) {
    [((JavaIoOutputStream *) nil_chk(outArg)) close];
  }
}

void LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_initialize();
  JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_LibOrgBouncycastleJceProviderBouncyCastleProvider_init());
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) isEqual:@"-s"]) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-a"]) {
      JavaIoFileInputStream *keyIn = new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 3));
      JavaIoFileOutputStream *out = new_JavaIoFileOutputStream_initWithNSString_(JreStrcat("$$", IOSObjectArray_Get(args, 2), @".asc"));
      LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_signFileWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(IOSObjectArray_Get(args, 2), keyIn, out, [((NSString *) nil_chk(IOSObjectArray_Get(args, 4))) java_toCharArray], true);
    }
    else {
      JavaIoFileInputStream *keyIn = new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 2));
      JavaIoFileOutputStream *out = new_JavaIoFileOutputStream_initWithNSString_(JreStrcat("$$", IOSObjectArray_Get(args, 1), @".bpg"));
      LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_signFileWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(IOSObjectArray_Get(args, 1), keyIn, out, [((NSString *) nil_chk(IOSObjectArray_Get(args, 3))) java_toCharArray], false);
    }
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-v"]) {
    JavaIoFileInputStream *in = new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 1));
    JavaIoFileInputStream *keyIn = new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 2));
    LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor_verifyFileWithJavaIoInputStream_withJavaIoInputStream_(in, keyIn);
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: SignedFileProcessor -v|-s [-a] file keyfile [passPhrase]"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesSignedFileProcessor)
