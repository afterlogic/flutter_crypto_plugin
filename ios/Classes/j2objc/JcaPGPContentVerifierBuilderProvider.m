//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcaPGPContentVerifierBuilderProvider.java
//

#include "DefaultJcaJceHelper.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaPGPContentVerifierBuilderProvider.h"
#include "JcaPGPKeyConverter.h"
#include "NamedJcaJceHelper.h"
#include "OperatorHelper.h"
#include "OutputStreamFactory.h"
#include "PGPContentVerifier.h"
#include "PGPContentVerifierBuilder.h"
#include "PGPException.h"
#include "PGPPublicKey.h"
#include "PGPRuntimeOperationException.h"
#include "ProviderJcaJceHelper.h"
#include "java/io/OutputStream.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider () {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *helper_;
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *keyConverter_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider, helper_, LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider, keyConverter_, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *)

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder : NSObject < LibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilder > {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *this$0_;
  jint hashAlgorithm_;
  jint keyAlgorithm_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider:(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *)outer$
                                                                                            withInt:(jint)keyAlgorithm
                                                                                            withInt:(jint)hashAlgorithm;

- (id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier>)buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)publicKey;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder)

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1 : NSObject < LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier > {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *this$0_;
  LibOrgBouncycastleOpenpgpPGPPublicKey *val$publicKey_;
  JavaSecuritySignature *val$signature_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *)outer$
                                                                                       withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)capture$0
                                                                                                       withJavaSecuritySignature:(JavaSecuritySignature *)capture$1;

- (jint)getHashAlgorithm;

- (jint)getKeyAlgorithm;

- (jlong)getKeyID;

- (jboolean)verifyWithByteArray:(IOSByteArray *)expected;

- (JavaIoOutputStream *)getOutputStream;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, JavaSecuritySignature *capture$1);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, JavaSecuritySignature *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, JavaSecuritySignature *capture$1);

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  (void) [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(keyConverter_)) setProviderWithJavaSecurityProvider:provider];
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *)setProviderWithNSString:(NSString *)providerName {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  (void) [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(keyConverter_)) setProviderWithNSString:providerName];
  return self;
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilder>)getWithInt:(jint)keyAlgorithm
                                                                     withInt:(jint)hashAlgorithm {
  return new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_(self, keyAlgorithm, hashAlgorithm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilder;", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setProviderWithJavaSecurityProvider:);
  methods[2].selector = @selector(setProviderWithNSString:);
  methods[3].selector = @selector(getWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyConverter_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setProvider", "LJavaSecurityProvider;", "LNSString;", "get", "II", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider = { "JcaPGPContentVerifierBuilderProvider", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, 6, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_init(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *self) {
  NSObject_init(self);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
  self->keyConverter_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_init();
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider, init)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider)

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider:(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *)outer$
                                                                                            withInt:(jint)keyAlgorithm
                                                                                            withInt:(jint)hashAlgorithm {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_(self, outer$, keyAlgorithm, hashAlgorithm);
  return self;
}

- (id<LibOrgBouncycastleOpenpgpOperatorPGPContentVerifier>)buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)publicKey {
  JavaSecuritySignature *signature = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(this$0_->helper_)) createSignatureWithInt:keyAlgorithm_ withInt:hashAlgorithm_];
  @try {
    [((JavaSecuritySignature *) nil_chk(signature)) initVerifyWithJavaSecurityPublicKey:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *) nil_chk(this$0_->keyConverter_)) getPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:publicKey]];
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"invalid key.", e);
  }
  return new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_(self, publicKey, signature);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPGPContentVerifier;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider:withInt:withInt:);
  methods[1].selector = @selector(buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "hashAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "build", "LLibOrgBouncycastleOpenpgpPGPPublicKey;", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder = { "JcaPGPContentVerifierBuilder", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x2, 2, 3, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->keyAlgorithm_ = keyAlgorithm;
  self->hashAlgorithm_ = hashAlgorithm;
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_, outer$, keyAlgorithm, hashAlgorithm)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider *outer$, jint keyAlgorithm, jint hashAlgorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_withInt_withInt_, outer$, keyAlgorithm, hashAlgorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder)

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *)outer$
                                                                                       withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)capture$0
                                                                                                       withJavaSecuritySignature:(JavaSecuritySignature *)capture$1 {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_(self, outer$, capture$0, capture$1);
  return self;
}

- (jint)getHashAlgorithm {
  return this$0_->hashAlgorithm_;
}

- (jint)getKeyAlgorithm {
  return this$0_->keyAlgorithm_;
}

- (jlong)getKeyID {
  return [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(val$publicKey_)) getKeyID];
}

- (jboolean)verifyWithByteArray:(IOSByteArray *)expected {
  @try {
    return [((JavaSecuritySignature *) nil_chk(val$signature_)) verifyWithByteArray:expected];
  }
  @catch (JavaSecuritySignatureException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPRuntimeOperationException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to verify signature: ", [e getMessage]), e);
  }
}

- (JavaIoOutputStream *)getOutputStream {
  return LibOrgBouncycastleJcajceIoOutputStreamFactory_createStreamWithJavaSecuritySignature_(val$signature_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder:withLibOrgBouncycastleOpenpgpPGPPublicKey:withJavaSecuritySignature:);
  methods[1].selector = @selector(getHashAlgorithm);
  methods[2].selector = @selector(getKeyAlgorithm);
  methods[3].selector = @selector(getKeyID);
  methods[4].selector = @selector(verifyWithByteArray:);
  methods[5].selector = @selector(getOutputStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$publicKey_", "LLibOrgBouncycastleOpenpgpPGPPublicKey;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$signature_", "LJavaSecuritySignature;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "verify", "[B", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder;", "buildWithLibOrgBouncycastleOpenpgpPGPPublicKey:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1 = { "", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x8010, 6, 3, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, JavaSecuritySignature *capture$1) {
  self->this$0_ = outer$;
  self->val$publicKey_ = capture$0;
  self->val$signature_ = capture$1;
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, JavaSecuritySignature *capture$1) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_, outer$, capture$0, capture$1)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder *outer$, LibOrgBouncycastleOpenpgpPGPPublicKey *capture$0, JavaSecuritySignature *capture$1) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_JcaPGPContentVerifierBuilder_withLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecuritySignature_, outer$, capture$0, capture$1)
}
