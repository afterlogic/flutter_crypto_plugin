//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/prng/X931SecureRandomBuilder.java
//

#ifndef X931SecureRandomBuilder_H
#define X931SecureRandomBuilder_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoParamsKeyParameter;
@class LibOrgBouncycastleCryptoPrngX931SecureRandom;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoPrngEntropySourceProvider;

@interface LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider:(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider>)entropySourceProvider;

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)entropySource
                                               withBoolean:(jboolean)predictionResistant;

- (LibOrgBouncycastleCryptoPrngX931SecureRandom *)buildWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                withLibOrgBouncycastleCryptoParamsKeyParameter:(LibOrgBouncycastleCryptoParamsKeyParameter *)key
                                                                                   withBoolean:(jboolean)predictionResistant;

- (LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *)setDateTimeVectorWithByteArray:(IOSByteArray *)dateTimeVector;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_init(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *self, JavaSecuritySecureRandom *entropySource, jboolean predictionResistant);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(JavaSecuritySecureRandom *entropySource, jboolean predictionResistant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(JavaSecuritySecureRandom *entropySource, jboolean predictionResistant);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *self, id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // X931SecureRandomBuilder_H
