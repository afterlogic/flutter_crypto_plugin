//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ASN1Sequence.java
//

#ifndef ASN1Sequence_H
#define ASN1Sequence_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Primitive.h"
#include "Iterable.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaUtilVector;
@class LibOrgBouncycastleAsn1ASN1EncodableVector;
@class LibOrgBouncycastleAsn1ASN1OutputStream;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@protocol JavaUtilEnumeration;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;
@protocol LibOrgBouncycastleAsn1ASN1SequenceParser;

@interface LibOrgBouncycastleAsn1ASN1Sequence : LibOrgBouncycastleAsn1ASN1Primitive < LibOrgBouncycastleUtilIterable > {
 @public
  JavaUtilVector *seq_;
}

#pragma mark Public

+ (LibOrgBouncycastleAsn1ASN1Sequence *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                  withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1ASN1Sequence *)getInstanceWithId:(id)obj;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getObjectAtWithInt:(jint)index;

- (id<JavaUtilEnumeration>)getObjects;

- (NSUInteger)hash;

- (id<JavaUtilIterator>)iterator;

- (id<LibOrgBouncycastleAsn1ASN1SequenceParser>)parser;

- (jint)size;

- (IOSObjectArray *)toArray;

- (NSString *)description;

#pragma mark Protected

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)obj;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)array;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1EncodableVector:(LibOrgBouncycastleAsn1ASN1EncodableVector *)v;

#pragma mark Package-Private

- (jboolean)asn1EqualsWithLibOrgBouncycastleAsn1ASN1Primitive:(LibOrgBouncycastleAsn1ASN1Primitive *)o;

- (void)encodeWithLibOrgBouncycastleAsn1ASN1OutputStream:(LibOrgBouncycastleAsn1ASN1OutputStream *)outArg;

- (jboolean)isConstructed;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toDERObject;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toDLObject;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1ASN1Sequence)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1ASN1Sequence, seq_, JavaUtilVector *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Sequence *LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Sequence *LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Sequence_init(LibOrgBouncycastleAsn1ASN1Sequence *self);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Sequence_initWithLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1ASN1Sequence *self, id<LibOrgBouncycastleAsn1ASN1Encodable> obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Sequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(LibOrgBouncycastleAsn1ASN1Sequence *self, LibOrgBouncycastleAsn1ASN1EncodableVector *v);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Sequence_initWithLibOrgBouncycastleAsn1ASN1EncodableArray_(LibOrgBouncycastleAsn1ASN1Sequence *self, IOSObjectArray *array);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1ASN1Sequence)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ASN1Sequence_H
