//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/SHAKEDigest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeccakDigest.h"
#include "SHAKEDigest.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleCryptoDigestsSHAKEDigest ()

+ (jint)checkBitLengthWithInt:(jint)bitLength;

@end

__attribute__((unused)) static jint LibOrgBouncycastleCryptoDigestsSHAKEDigest_checkBitLengthWithInt_(jint bitLength);

@implementation LibOrgBouncycastleCryptoDigestsSHAKEDigest

+ (jint)checkBitLengthWithInt:(jint)bitLength {
  return LibOrgBouncycastleCryptoDigestsSHAKEDigest_checkBitLengthWithInt_(bitLength);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoDigestsSHAKEDigest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)bitLength {
  LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(self, bitLength);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest:(LibOrgBouncycastleCryptoDigestsSHAKEDigest *)source {
  LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_(self, source);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$I", @"SHAKE", fixedOutputLength_);
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  return [self doFinalWithByteArray:outArg withInt:outOff withInt:[self getDigestSize]];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                     withInt:(jint)outLen {
  jint length = [self doOutputWithByteArray:outArg withInt:outOff withInt:outLen];
  [self reset];
  return length;
}

- (jint)doOutputWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                      withInt:(jint)outLen {
  if (!squeezing_) {
    [self absorbBitsWithInt:(jint) 0x0F withInt:4];
  }
  [self squeezeWithByteArray:outArg withInt:outOff withLong:((jlong) outLen) * 8];
  return outLen;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits {
  return [self doFinalWithByteArray:outArg withInt:outOff withInt:[self getDigestSize] withByte:partialByte withInt:partialBits];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                     withInt:(jint)outLen
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits {
  if (partialBits < 0 || partialBits > 7) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'partialBits' must be in the range [0,7]");
  }
  jint finalInput = (partialByte & ((JreLShift32(1, partialBits)) - 1)) | (JreLShift32((jint) 0x0F, partialBits));
  jint finalBits = partialBits + 4;
  if (finalBits >= 8) {
    [self absorbWithByteArray:[IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) finalInput } count:1] withInt:0 withInt:1];
    finalBits -= 8;
    JreURShiftAssignInt(&finalInput, 8);
  }
  if (finalBits > 0) {
    [self absorbBitsWithInt:finalInput withInt:finalBits];
  }
  [self squeezeWithByteArray:outArg withInt:outOff withLong:((jlong) outLen) * 8];
  [self reset];
  return outLen;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 3, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 3, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(checkBitLengthWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest:);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(doFinalWithByteArray:withInt:);
  methods[6].selector = @selector(doFinalWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(doOutputWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(doFinalWithByteArray:withInt:withByte:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:withInt:withByte:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkBitLength", "I", "LLibOrgBouncycastleCryptoDigestsSHAKEDigest;", "doFinal", "[BI", "[BII", "doOutput", "[BIBI", "[BIIBI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsSHAKEDigest = { "SHAKEDigest", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsSHAKEDigest;
}

@end

jint LibOrgBouncycastleCryptoDigestsSHAKEDigest_checkBitLengthWithInt_(jint bitLength) {
  LibOrgBouncycastleCryptoDigestsSHAKEDigest_initialize();
  switch (bitLength) {
    case 128:
    case 256:
    return bitLength;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"'bitLength' ", bitLength, @" not supported for SHAKE"));
  }
}

void LibOrgBouncycastleCryptoDigestsSHAKEDigest_init(LibOrgBouncycastleCryptoDigestsSHAKEDigest *self) {
  LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(self, 128);
}

LibOrgBouncycastleCryptoDigestsSHAKEDigest *new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSHAKEDigest, init)
}

LibOrgBouncycastleCryptoDigestsSHAKEDigest *create_LibOrgBouncycastleCryptoDigestsSHAKEDigest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSHAKEDigest, init)
}

void LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(LibOrgBouncycastleCryptoDigestsSHAKEDigest *self, jint bitLength) {
  LibOrgBouncycastleCryptoDigestsKeccakDigest_initWithInt_(self, LibOrgBouncycastleCryptoDigestsSHAKEDigest_checkBitLengthWithInt_(bitLength));
}

LibOrgBouncycastleCryptoDigestsSHAKEDigest *new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(jint bitLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSHAKEDigest, initWithInt_, bitLength)
}

LibOrgBouncycastleCryptoDigestsSHAKEDigest *create_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(jint bitLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSHAKEDigest, initWithInt_, bitLength)
}

void LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_(LibOrgBouncycastleCryptoDigestsSHAKEDigest *self, LibOrgBouncycastleCryptoDigestsSHAKEDigest *source) {
  LibOrgBouncycastleCryptoDigestsKeccakDigest_initWithLibOrgBouncycastleCryptoDigestsKeccakDigest_(self, source);
}

LibOrgBouncycastleCryptoDigestsSHAKEDigest *new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_(LibOrgBouncycastleCryptoDigestsSHAKEDigest *source) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSHAKEDigest, initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_, source)
}

LibOrgBouncycastleCryptoDigestsSHAKEDigest *create_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_(LibOrgBouncycastleCryptoDigestsSHAKEDigest *source) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSHAKEDigest, initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsSHAKEDigest)
