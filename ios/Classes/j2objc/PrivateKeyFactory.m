//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/PrivateKeyFactory.java
//

#include "ASN1Encodable.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "AsymmetricKeyParameter.h"
#include "CryptoProObjectIdentifiers.h"
#include "CustomNamedCurves.h"
#include "DHParameter.h"
#include "DHParameters.h"
#include "DHPrivateKeyParameters.h"
#include "DSAParameter.h"
#include "DSAParameters.h"
#include "DSAPrivateKeyParameters.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECGOST3410NamedCurves.h"
#include "ECGOST3410Parameters.h"
#include "ECNamedCurveTable.h"
#include "ECNamedDomainParameters.h"
#include "ECPoint.h"
#include "ECPrivateKey.h"
#include "ECPrivateKeyParameters.h"
#include "Ed25519PrivateKeyParameters.h"
#include "Ed448PrivateKeyParameters.h"
#include "EdECObjectIdentifiers.h"
#include "ElGamalParameter.h"
#include "ElGamalParameters.h"
#include "ElGamalPrivateKeyParameters.h"
#include "GOST3410PublicKeyAlgParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OIWObjectIdentifiers.h"
#include "PKCSObjectIdentifiers.h"
#include "PrivateKeyFactory.h"
#include "PrivateKeyInfo.h"
#include "RSAPrivateCrtKeyParameters.h"
#include "RSAPrivateKey.h"
#include "RosstandartObjectIdentifiers.h"
#include "X25519PrivateKeyParameters.h"
#include "X448PrivateKeyParameters.h"
#include "X509ObjectIdentifiers.h"
#include "X962Parameters.h"
#include "X9ECParameters.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/InputStream.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoUtilPrivateKeyFactory ()

+ (IOSByteArray *)getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo
                                                                withInt:(jint)expectedSize;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoUtilPrivateKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withInt_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo, jint expectedSize);

@implementation LibOrgBouncycastleCryptoUtilPrivateKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPrivateKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)privateKeyInfoData {
  return LibOrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithByteArray_(privateKeyInfoData);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return LibOrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithJavaIoInputStream_(inStr);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo {
  return LibOrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
}

+ (IOSByteArray *)getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo
                                                                withInt:(jint)expectedSize {
  return LibOrgBouncycastleCryptoUtilPrivateKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withInt_(keyInfo, expectedSize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 5, 6, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createKeyWithByteArray:);
  methods[2].selector = @selector(createKeyWithJavaIoInputStream:);
  methods[3].selector = @selector(createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[4].selector = @selector(getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createKey", "[B", "LJavaIoIOException;", "LJavaIoInputStream;", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "getRawKey", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPrivateKeyFactory = { "PrivateKeyFactory", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPrivateKeyFactory;
}

@end

void LibOrgBouncycastleCryptoUtilPrivateKeyFactory_init(LibOrgBouncycastleCryptoUtilPrivateKeyFactory *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoUtilPrivateKeyFactory *new_LibOrgBouncycastleCryptoUtilPrivateKeyFactory_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPrivateKeyFactory, init)
}

LibOrgBouncycastleCryptoUtilPrivateKeyFactory *create_LibOrgBouncycastleCryptoUtilPrivateKeyFactory_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPrivateKeyFactory, init)
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithByteArray_(IOSByteArray *privateKeyInfoData) {
  LibOrgBouncycastleCryptoUtilPrivateKeyFactory_initialize();
  return LibOrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(privateKeyInfoData)));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  LibOrgBouncycastleCryptoUtilPrivateKeyFactory_initialize();
  return LibOrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_([new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inStr) readObject]));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo) {
  LibOrgBouncycastleCryptoUtilPrivateKeyFactory_initialize();
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId = [((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) getPrivateKeyAlgorithm];
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOID = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOID)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, rsaEncryption)] || [algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_RSASSA_PSS)] || [algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X509X509ObjectIdentifiers, id_ea_rsa)]) {
    LibOrgBouncycastleAsn1PkcsRSAPrivateKey *keyStructure = LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
    return new_LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1PkcsRSAPrivateKey *) nil_chk(keyStructure)) getModulus], [keyStructure getPublicExponent], [keyStructure getPrivateExponent], [keyStructure getPrime1], [keyStructure getPrime2], [keyStructure getExponent1], [keyStructure getExponent2], [keyStructure getCoefficient]);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement)]) {
    LibOrgBouncycastleAsn1PkcsDHParameter *params = LibOrgBouncycastleAsn1PkcsDHParameter_getInstanceWithId_([algId getParameters]);
    LibOrgBouncycastleAsn1ASN1Integer *derX = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([keyInfo parsePrivateKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
    JavaMathBigInteger *lVal = [((LibOrgBouncycastleAsn1PkcsDHParameter *) nil_chk(params)) getL];
    jint l = lVal == nil ? 0 : [lVal intValue];
    LibOrgBouncycastleCryptoParamsDHParameters *dhParams = new_LibOrgBouncycastleCryptoParamsDHParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_([params getP], [params getG], nil, l);
    return new_LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDHParameters_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derX)) getValue], dhParams);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm)]) {
    LibOrgBouncycastleAsn1OiwElGamalParameter *params = LibOrgBouncycastleAsn1OiwElGamalParameter_getInstanceWithId_([algId getParameters]);
    LibOrgBouncycastleAsn1ASN1Integer *derX = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([keyInfo parsePrivateKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
    return new_LibOrgBouncycastleCryptoParamsElGamalPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsElGamalParameters_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derX)) getValue], new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1OiwElGamalParameter *) nil_chk(params)) getP], [params getG]));
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_dsa)]) {
    LibOrgBouncycastleAsn1ASN1Integer *derX = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([keyInfo parsePrivateKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
    id<LibOrgBouncycastleAsn1ASN1Encodable> de = [algId getParameters];
    LibOrgBouncycastleCryptoParamsDSAParameters *parameters = nil;
    if (de != nil) {
      LibOrgBouncycastleAsn1X509DSAParameter *params = LibOrgBouncycastleAsn1X509DSAParameter_getInstanceWithId_([de toASN1Primitive]);
      parameters = new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1X509DSAParameter *) nil_chk(params)) getP], [params getQ], [params getG]);
    }
    return new_LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derX)) getValue], parameters);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey)]) {
    LibOrgBouncycastleAsn1X9X962Parameters *params = new_LibOrgBouncycastleAsn1X9X962Parameters_initWithLibOrgBouncycastleAsn1ASN1Primitive_((LibOrgBouncycastleAsn1ASN1Primitive *) cast_chk([algId getParameters], [LibOrgBouncycastleAsn1ASN1Primitive class]));
    LibOrgBouncycastleAsn1X9X9ECParameters *x9;
    LibOrgBouncycastleCryptoParamsECDomainParameters *dParams;
    if ([params isNamedCurve]) {
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([params getParameters], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
      x9 = LibOrgBouncycastleCryptoEcCustomNamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
      if (x9 == nil) {
        x9 = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
      }
      dParams = new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(oid, [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve], [x9 getG], [x9 getN], [x9 getH], [x9 getSeed]);
    }
    else {
      x9 = LibOrgBouncycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
      dParams = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve], [x9 getG], [x9 getN], [x9 getH], [x9 getSeed]);
    }
    LibOrgBouncycastleAsn1SecECPrivateKey *ec = LibOrgBouncycastleAsn1SecECPrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
    JavaMathBigInteger *d = [((LibOrgBouncycastleAsn1SecECPrivateKey *) nil_chk(ec)) getKey];
    return new_LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_(d, dParams);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_X25519)]) {
    return new_LibOrgBouncycastleCryptoParamsX25519PrivateKeyParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoUtilPrivateKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withInt_(keyInfo, LibOrgBouncycastleCryptoParamsX25519PrivateKeyParameters_KEY_SIZE), 0);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_X448)]) {
    return new_LibOrgBouncycastleCryptoParamsX448PrivateKeyParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoUtilPrivateKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withInt_(keyInfo, LibOrgBouncycastleCryptoParamsX448PrivateKeyParameters_KEY_SIZE), 0);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_Ed25519)]) {
    return new_LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoUtilPrivateKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withInt_(keyInfo, LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters_KEY_SIZE), 0);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_Ed448)]) {
    return new_LibOrgBouncycastleCryptoParamsEd448PrivateKeyParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoUtilPrivateKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withInt_(keyInfo, LibOrgBouncycastleCryptoParamsEd448PrivateKeyParameters_KEY_SIZE), 0);
  }
  else if ([algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001)] || [algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1RosstandartRosstandartObjectIdentifiers, id_tc26_gost_3410_12_512)] || [algOID isEqual:JreLoadStatic(LibOrgBouncycastleAsn1RosstandartRosstandartObjectIdentifiers, id_tc26_gost_3410_12_256)]) {
    LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *gostParams = LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getParameters]);
    LibOrgBouncycastleCryptoParamsECGOST3410Parameters *ecSpec = nil;
    JavaMathBigInteger *d = nil;
    LibOrgBouncycastleAsn1ASN1Primitive *p = [((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getParameters])) toASN1Primitive];
    if ([p isKindOfClass:[LibOrgBouncycastleAsn1ASN1Sequence class]] && ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(p))) size] == 2 || [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(p))) size] == 3)) {
      LibOrgBouncycastleCryptoParamsECDomainParameters *ecP = LibOrgBouncycastleAsn1CryptoproECGOST3410NamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *) nil_chk(gostParams)) getPublicKeyParamSet]);
      ecSpec = new_LibOrgBouncycastleCryptoParamsECGOST3410Parameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoParamsECDomainParameters_([gostParams getPublicKeyParamSet], ecP), [gostParams getPublicKeyParamSet], [gostParams getDigestParamSet], [gostParams getEncryptionParamSet]);
      id<LibOrgBouncycastleAsn1ASN1Encodable> privKey = [keyInfo parsePrivateKey];
      if ([privKey isKindOfClass:[LibOrgBouncycastleAsn1ASN1Integer class]]) {
        d = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(privKey))) getPositiveValue];
      }
      else {
        IOSByteArray *encVal = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_(privKey))) getOctets];
        IOSByteArray *dVal = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(encVal))->size_];
        for (jint i = 0; i != encVal->size_; i++) {
          *IOSByteArray_GetRef(dVal, i) = IOSByteArray_Get(encVal, encVal->size_ - 1 - i);
        }
        d = new_JavaMathBigInteger_initWithInt_withByteArray_(1, dVal);
      }
    }
    else {
      LibOrgBouncycastleAsn1X9X962Parameters *params = LibOrgBouncycastleAsn1X9X962Parameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getParameters]);
      if ([((LibOrgBouncycastleAsn1X9X962Parameters *) nil_chk(params)) isNamedCurve]) {
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([params getParameters]);
        LibOrgBouncycastleAsn1X9X9ECParameters *ecP = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
        if (ecP == nil) {
          LibOrgBouncycastleCryptoParamsECDomainParameters *gParam = LibOrgBouncycastleAsn1CryptoproECGOST3410NamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
          ecSpec = new_LibOrgBouncycastleCryptoParamsECGOST3410Parameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(oid, [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(gParam)) getCurve], [gParam getG], [gParam getN], [gParam getH], [gParam getSeed]), [((LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *) nil_chk(gostParams)) getPublicKeyParamSet], [gostParams getDigestParamSet], [gostParams getEncryptionParamSet]);
        }
        else {
          ecSpec = new_LibOrgBouncycastleCryptoParamsECGOST3410Parameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(oid, [ecP getCurve], [ecP getG], [ecP getN], [ecP getH], [ecP getSeed]), [((LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *) nil_chk(gostParams)) getPublicKeyParamSet], [gostParams getDigestParamSet], [gostParams getEncryptionParamSet]);
        }
      }
      else if ([params isImplicitlyCA]) {
        ecSpec = nil;
      }
      else {
        LibOrgBouncycastleAsn1X9X9ECParameters *ecP = LibOrgBouncycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
        ecSpec = new_LibOrgBouncycastleCryptoParamsECGOST3410Parameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(algOID, [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecP)) getCurve], [ecP getG], [ecP getN], [ecP getH], [ecP getSeed]), [((LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *) nil_chk(gostParams)) getPublicKeyParamSet], [gostParams getDigestParamSet], [gostParams getEncryptionParamSet]);
      }
      id<LibOrgBouncycastleAsn1ASN1Encodable> privKey = [keyInfo parsePrivateKey];
      if ([privKey isKindOfClass:[LibOrgBouncycastleAsn1ASN1Integer class]]) {
        LibOrgBouncycastleAsn1ASN1Integer *derD = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(privKey);
        d = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derD)) getValue];
      }
      else {
        LibOrgBouncycastleAsn1SecECPrivateKey *ec = LibOrgBouncycastleAsn1SecECPrivateKey_getInstanceWithId_(privKey);
        d = [((LibOrgBouncycastleAsn1SecECPrivateKey *) nil_chk(ec)) getKey];
      }
    }
    return new_LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_(d, new_LibOrgBouncycastleCryptoParamsECGOST3410Parameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(ecSpec, [((LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *) nil_chk(gostParams)) getPublicKeyParamSet], [gostParams getDigestParamSet], [gostParams getEncryptionParamSet]));
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"algorithm identifier in private key not recognised");
  }
}

IOSByteArray *LibOrgBouncycastleCryptoUtilPrivateKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withInt_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo, jint expectedSize) {
  LibOrgBouncycastleCryptoUtilPrivateKeyFactory_initialize();
  IOSByteArray *result = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) parsePrivateKey]))) getOctets];
  if (expectedSize != ((IOSByteArray *) nil_chk(result))->size_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"private key encoding has incorrect length");
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPrivateKeyFactory)
