//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsAgreementCredentials.java
//

#include "AbstractTlsAgreementCredentials.h"
#include "AsymmetricKeyParameter.h"
#include "BasicAgreement.h"
#include "BigIntegers.h"
#include "Certificate.h"
#include "DHBasicAgreement.h"
#include "DHPrivateKeyParameters.h"
#include "DefaultTlsAgreementCredentials.h"
#include "ECDHBasicAgreement.h"
#include "ECPrivateKeyParameters.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

@implementation LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials

- (instancetype)initWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)certificate
      withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey {
  LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials_initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(self, certificate, privateKey);
  return self;
}

- (LibOrgBouncycastleCryptoTlsCertificate *)getCertificate {
  return certificate_;
}

- (IOSByteArray *)generateAgreementWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)peerPublicKey {
  [((id<LibOrgBouncycastleCryptoBasicAgreement>) nil_chk(basicAgreement_)) init__WithLibOrgBouncycastleCryptoCipherParameters:privateKey_];
  JavaMathBigInteger *agreementValue = [((id<LibOrgBouncycastleCryptoBasicAgreement>) nil_chk(basicAgreement_)) calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:peerPublicKey];
  if (truncateAgreement_) {
    return LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(agreementValue);
  }
  return LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_([((id<LibOrgBouncycastleCryptoBasicAgreement>) nil_chk(basicAgreement_)) getFieldSize], agreementValue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoTlsCertificate:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[1].selector = @selector(getCertificate);
  methods[2].selector = @selector(generateAgreementWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certificate_", "LLibOrgBouncycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "privateKey_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "basicAgreement_", "LLibOrgBouncycastleCryptoBasicAgreement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "truncateAgreement_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoTlsCertificate;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "generateAgreement", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials = { "DefaultTlsAgreementCredentials", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials;
}

@end

void LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials_initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials *self, LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  LibOrgBouncycastleCryptoTlsAbstractTlsAgreementCredentials_init(self);
  if (certificate == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificate' cannot be null");
  }
  if ([certificate isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificate' cannot be empty");
  }
  if (privateKey == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'privateKey' cannot be null");
  }
  if (![privateKey isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'privateKey' must be private");
  }
  if ([privateKey isKindOfClass:[LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters class]]) {
    self->basicAgreement_ = new_LibOrgBouncycastleCryptoAgreementDHBasicAgreement_init();
    self->truncateAgreement_ = true;
  }
  else if ([privateKey isKindOfClass:[LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]]) {
    self->basicAgreement_ = new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init();
    self->truncateAgreement_ = false;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"'privateKey' type not supported: ", [[privateKey java_getClass] getName]));
  }
  self->certificate_ = certificate;
  self->privateKey_ = privateKey;
}

LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials *new_LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials_initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials, initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, certificate, privateKey)
}

LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials *create_LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials_initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials, initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, certificate, privateKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials)
