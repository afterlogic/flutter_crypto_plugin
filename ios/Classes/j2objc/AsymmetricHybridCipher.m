//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/util/AsymmetricHybridCipher.java
//

#include "AsymmetricHybridCipher.h"
#include "CipherSpiExt.h"
#include "CryptoServicesRegistrar.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/Key.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/ShortBufferException.h"

__attribute__((unused)) static jint LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_getOutputSizeWithInt_(LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher *self, jint inLen);

__attribute__((unused)) static void LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initEncryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher *self, id<JavaSecurityKey> key, id<JavaSecuritySpecAlgorithmParameterSpec> params, JavaSecuritySecureRandom *random);

__attribute__((unused)) static void LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initDecryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher *self, id<JavaSecurityKey> key, id<JavaSecuritySpecAlgorithmParameterSpec> params);

@implementation LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setModeWithNSString:(NSString *)modeName {
}

- (void)setPaddingWithNSString:(NSString *)paddingName {
}

- (IOSByteArray *)getIV {
  return nil;
}

- (jint)getBlockSize {
  return 0;
}

- (id<JavaSecuritySpecAlgorithmParameterSpec>)getParameters {
  return paramSpec_;
}

- (jint)getOutputSizeWithInt:(jint)inLen {
  return LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_getOutputSizeWithInt_(self, inLen);
}

- (void)initEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  @try {
    LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initEncryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_withJavaSecuritySecureRandom_(self, key, nil, LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom());
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"This cipher needs algorithm parameters for initialization (cannot be null).");
  }
}

- (void)initEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initEncryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_withJavaSecuritySecureRandom_(self, key, nil, random);
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *iape) {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"This cipher needs algorithm parameters for initialization (cannot be null).");
  }
}

- (void)initEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initEncryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_withJavaSecuritySecureRandom_(self, key, params, LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom());
}

- (void)initEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initEncryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_withJavaSecuritySecureRandom_(self, key, params, random);
}

- (void)initDecryptWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  @try {
    LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initDecryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(self, key, nil);
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *iape) {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"This cipher needs algorithm parameters for initialization (cannot be null).");
  }
}

- (void)initDecryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initDecryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(self, key, params);
}

- (IOSByteArray *)updateWithByteArray:(IOSByteArray *)input
                              withInt:(jint)inOff
                              withInt:(jint)inLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)inLen
              withByteArray:(IOSByteArray *)output
                    withInt:(jint)outOff {
  if (((IOSByteArray *) nil_chk(output))->size_ < LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_getOutputSizeWithInt_(self, inLen)) {
    @throw new_JavaxCryptoShortBufferException_initWithNSString_(@"output");
  }
  IOSByteArray *out = [self updateWithByteArray:input withInt:inOff withInt:inLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out, 0, output, outOff, ((IOSByteArray *) nil_chk(out))->size_);
  return out->size_;
}

- (IOSByteArray *)doFinalWithByteArray:(IOSByteArray *)input
                               withInt:(jint)inOff
                               withInt:(jint)inLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)input
                     withInt:(jint)inOff
                     withInt:(jint)inLen
               withByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff {
  if (((IOSByteArray *) nil_chk(output))->size_ < LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_getOutputSizeWithInt_(self, inLen)) {
    @throw new_JavaxCryptoShortBufferException_initWithNSString_(@"Output buffer too short.");
  }
  IOSByteArray *out = [self doFinalWithByteArray:input withInt:inOff withInt:inLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out, 0, output, outOff, ((IOSByteArray *) nil_chk(out))->size_);
  return out->size_;
}

- (jint)encryptOutputSizeWithInt:(jint)inLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)decryptOutputSizeWithInt:(jint)inLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)initCipherEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
  withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initCipherDecryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
  withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 2, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecAlgorithmParameterSpec;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 8, 7, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 11, 10, -1, -1, -1 },
    { NULL, "V", 0x11, 12, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x11, 12, 9, 10, -1, -1, -1 },
    { NULL, "[B", 0x401, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 13, 15, 16, -1, -1, -1 },
    { NULL, "[B", 0x401, 17, 14, 18, -1, -1, -1 },
    { NULL, "I", 0x11, 17, 15, 19, -1, -1, -1 },
    { NULL, "I", 0x404, 20, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x404, 21, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 22, 11, 10, -1, -1, -1 },
    { NULL, "V", 0x404, 23, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setModeWithNSString:);
  methods[2].selector = @selector(setPaddingWithNSString:);
  methods[3].selector = @selector(getIV);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(getParameters);
  methods[6].selector = @selector(getOutputSizeWithInt:);
  methods[7].selector = @selector(initEncryptWithJavaSecurityKey:);
  methods[8].selector = @selector(initEncryptWithJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[9].selector = @selector(initEncryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[10].selector = @selector(initEncryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[11].selector = @selector(initDecryptWithJavaSecurityKey:);
  methods[12].selector = @selector(initDecryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[13].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[14].selector = @selector(updateWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[15].selector = @selector(doFinalWithByteArray:withInt:withInt:);
  methods[16].selector = @selector(doFinalWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[17].selector = @selector(encryptOutputSizeWithInt:);
  methods[18].selector = @selector(decryptOutputSizeWithInt:);
  methods[19].selector = @selector(initCipherEncryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[20].selector = @selector(initCipherDecryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "paramSpec_", "LJavaSecuritySpecAlgorithmParameterSpec;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMode", "LNSString;", "setPadding", "getOutputSize", "I", "initEncrypt", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "LJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "initDecrypt", "update", "[BII", "[BII[BI", "LJavaxCryptoShortBufferException;", "doFinal", "LJavaxCryptoBadPaddingException;", "LJavaxCryptoShortBufferException;LJavaxCryptoBadPaddingException;", "encryptOutputSize", "decryptOutputSize", "initCipherEncrypt", "initCipherDecrypt" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher = { "AsymmetricHybridCipher", "lib.org.bouncycastle.pqc.jcajce.provider.util", ptrTable, methods, fields, 7, 0x401, 21, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher;
}

@end

void LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_init(LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher *self) {
  LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_init(self);
}

jint LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_getOutputSizeWithInt_(LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher *self, jint inLen) {
  return self->opMode_ == LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_ENCRYPT_MODE ? [self encryptOutputSizeWithInt:inLen] : [self decryptOutputSizeWithInt:inLen];
}

void LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initEncryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher *self, id<JavaSecurityKey> key, id<JavaSecuritySpecAlgorithmParameterSpec> params, JavaSecuritySecureRandom *random) {
  self->opMode_ = LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_ENCRYPT_MODE;
  [self initCipherEncryptWithJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:params withJavaSecuritySecureRandom:random];
}

void LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher_initDecryptWithJavaSecurityKey_withJavaSecuritySpecAlgorithmParameterSpec_(LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher *self, id<JavaSecurityKey> key, id<JavaSecuritySpecAlgorithmParameterSpec> params) {
  self->opMode_ = LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_DECRYPT_MODE;
  [self initCipherDecryptWithJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:params];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderUtilAsymmetricHybridCipher)
