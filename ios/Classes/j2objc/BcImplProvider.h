//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcImplProvider.java
//

#ifndef BcImplProvider_H
#define BcImplProvider_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@protocol LibOrgBouncycastleCryptoAsymmetricBlockCipher;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoSigner;
@protocol LibOrgBouncycastleCryptoWrapper;

@interface LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (id<LibOrgBouncycastleCryptoBlockCipher>)createBlockCipherWithInt:(jint)encAlgorithm;

+ (id<LibOrgBouncycastleCryptoDigest>)createDigestWithInt:(jint)algorithm;

+ (id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)createPublicKeyCipherWithInt:(jint)encAlgorithm;

+ (id<LibOrgBouncycastleCryptoSigner>)createSignerWithInt:(jint)keyAlgorithm
                                                  withInt:(jint)hashAlgorithm;

+ (id<LibOrgBouncycastleCryptoWrapper>)createWrapperWithInt:(jint)encAlgorithm;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_init(LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider *self);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider *new_LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider *create_LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_init(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createDigestWithInt_(jint algorithm);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoSigner> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createSignerWithInt_withInt_(jint keyAlgorithm, jint hashAlgorithm);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoBlockCipher> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createBlockCipherWithInt_(jint encAlgorithm);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoWrapper> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createWrapperWithInt_(jint encAlgorithm);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createPublicKeyCipherWithInt_(jint encAlgorithm);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BcImplProvider_H
