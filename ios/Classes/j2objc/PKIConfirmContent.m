//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/PKIConfirmContent.java
//

#include "ASN1Null.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "DERNull.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "PKIConfirmContent.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleAsn1CmpPKIConfirmContent () {
 @public
  LibOrgBouncycastleAsn1ASN1Null *val_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Null:(LibOrgBouncycastleAsn1ASN1Null *)val;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmpPKIConfirmContent, val_, LibOrgBouncycastleAsn1ASN1Null *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1CmpPKIConfirmContent_initWithLibOrgBouncycastleAsn1ASN1Null_(LibOrgBouncycastleAsn1CmpPKIConfirmContent *self, LibOrgBouncycastleAsn1ASN1Null *val);

__attribute__((unused)) static LibOrgBouncycastleAsn1CmpPKIConfirmContent *new_LibOrgBouncycastleAsn1CmpPKIConfirmContent_initWithLibOrgBouncycastleAsn1ASN1Null_(LibOrgBouncycastleAsn1ASN1Null *val) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1CmpPKIConfirmContent *create_LibOrgBouncycastleAsn1CmpPKIConfirmContent_initWithLibOrgBouncycastleAsn1ASN1Null_(LibOrgBouncycastleAsn1ASN1Null *val);

@implementation LibOrgBouncycastleAsn1CmpPKIConfirmContent

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Null:(LibOrgBouncycastleAsn1ASN1Null *)val {
  LibOrgBouncycastleAsn1CmpPKIConfirmContent_initWithLibOrgBouncycastleAsn1ASN1Null_(self, val);
  return self;
}

+ (LibOrgBouncycastleAsn1CmpPKIConfirmContent *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1CmpPKIConfirmContent_getInstanceWithId_(o);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleAsn1CmpPKIConfirmContent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return val_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CmpPKIConfirmContent;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Null:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val_", "LLibOrgBouncycastleAsn1ASN1Null;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1ASN1Null;", "getInstance", "LNSObject;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1CmpPKIConfirmContent = { "PKIConfirmContent", "lib.org.bouncycastle.asn1.cmp", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1CmpPKIConfirmContent;
}

@end

void LibOrgBouncycastleAsn1CmpPKIConfirmContent_initWithLibOrgBouncycastleAsn1ASN1Null_(LibOrgBouncycastleAsn1CmpPKIConfirmContent *self, LibOrgBouncycastleAsn1ASN1Null *val) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->val_ = val;
}

LibOrgBouncycastleAsn1CmpPKIConfirmContent *new_LibOrgBouncycastleAsn1CmpPKIConfirmContent_initWithLibOrgBouncycastleAsn1ASN1Null_(LibOrgBouncycastleAsn1ASN1Null *val) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmpPKIConfirmContent, initWithLibOrgBouncycastleAsn1ASN1Null_, val)
}

LibOrgBouncycastleAsn1CmpPKIConfirmContent *create_LibOrgBouncycastleAsn1CmpPKIConfirmContent_initWithLibOrgBouncycastleAsn1ASN1Null_(LibOrgBouncycastleAsn1ASN1Null *val) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmpPKIConfirmContent, initWithLibOrgBouncycastleAsn1ASN1Null_, val)
}

LibOrgBouncycastleAsn1CmpPKIConfirmContent *LibOrgBouncycastleAsn1CmpPKIConfirmContent_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1CmpPKIConfirmContent_initialize();
  if (o == nil || [o isKindOfClass:[LibOrgBouncycastleAsn1CmpPKIConfirmContent class]]) {
    return (LibOrgBouncycastleAsn1CmpPKIConfirmContent *) cast_chk(o, [LibOrgBouncycastleAsn1CmpPKIConfirmContent class]);
  }
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1ASN1Null class]]) {
    return new_LibOrgBouncycastleAsn1CmpPKIConfirmContent_initWithLibOrgBouncycastleAsn1ASN1Null_((LibOrgBouncycastleAsn1ASN1Null *) o);
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid object: ", [[o java_getClass] getName]));
}

void LibOrgBouncycastleAsn1CmpPKIConfirmContent_init(LibOrgBouncycastleAsn1CmpPKIConfirmContent *self) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->val_ = JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE);
}

LibOrgBouncycastleAsn1CmpPKIConfirmContent *new_LibOrgBouncycastleAsn1CmpPKIConfirmContent_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmpPKIConfirmContent, init)
}

LibOrgBouncycastleAsn1CmpPKIConfirmContent *create_LibOrgBouncycastleAsn1CmpPKIConfirmContent_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmpPKIConfirmContent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1CmpPKIConfirmContent)
