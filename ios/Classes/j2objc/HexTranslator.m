//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/encoders/HexTranslator.java
//

#include "HexTranslator.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

inline IOSByteArray *LibOrgBouncycastleUtilEncodersHexTranslator_get_hexTable(void);
static IOSByteArray *LibOrgBouncycastleUtilEncodersHexTranslator_hexTable;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleUtilEncodersHexTranslator, hexTable, IOSByteArray *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleUtilEncodersHexTranslator)

@implementation LibOrgBouncycastleUtilEncodersHexTranslator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleUtilEncodersHexTranslator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getEncodedBlockSize {
  return 2;
}

- (jint)encodeWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)length
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  for (jint i = 0, j = 0; i < length; i++, j += 2) {
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + j) = IOSByteArray_Get(nil_chk(LibOrgBouncycastleUtilEncodersHexTranslator_hexTable), (JreRShift32(IOSByteArray_Get(nil_chk(inArg), inOff), 4)) & (jint) 0x0f);
    *IOSByteArray_GetRef(outArg, outOff + j + 1) = IOSByteArray_Get(LibOrgBouncycastleUtilEncodersHexTranslator_hexTable, IOSByteArray_Get(inArg, inOff) & (jint) 0x0f);
    inOff++;
  }
  return length * 2;
}

- (jint)getDecodedBlockSize {
  return 1;
}

- (jint)decodeWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)length
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  jint halfLength = length / 2;
  jbyte left;
  jbyte right;
  for (jint i = 0; i < halfLength; i++) {
    left = IOSByteArray_Get(nil_chk(inArg), inOff + i * 2);
    right = IOSByteArray_Get(inArg, inOff + i * 2 + 1);
    if (left < (jbyte) 'a') {
      *IOSByteArray_GetRef(nil_chk(outArg), outOff) = (jbyte) (JreLShift32((left - '0'), 4));
    }
    else {
      *IOSByteArray_GetRef(nil_chk(outArg), outOff) = (jbyte) (JreLShift32((left - 'a' + 10), 4));
    }
    if (right < (jbyte) 'a') {
      *IOSByteArray_GetRef(outArg, outOff) += (jbyte) (right - '0');
    }
    else {
      *IOSByteArray_GetRef(outArg, outOff) += (jbyte) (right - 'a' + 10);
    }
    outOff++;
  }
  return halfLength;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getEncodedBlockSize);
  methods[2].selector = @selector(encodeWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[3].selector = @selector(getDecodedBlockSize);
  methods[4].selector = @selector(decodeWithByteArray:withInt:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hexTable", "[B", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "[BII[BI", "decode", &LibOrgBouncycastleUtilEncodersHexTranslator_hexTable };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilEncodersHexTranslator = { "HexTranslator", "lib.org.bouncycastle.util.encoders", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilEncodersHexTranslator;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleUtilEncodersHexTranslator class]) {
    LibOrgBouncycastleUtilEncodersHexTranslator_hexTable = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5', (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f' } count:16];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleUtilEncodersHexTranslator)
  }
}

@end

void LibOrgBouncycastleUtilEncodersHexTranslator_init(LibOrgBouncycastleUtilEncodersHexTranslator *self) {
  NSObject_init(self);
}

LibOrgBouncycastleUtilEncodersHexTranslator *new_LibOrgBouncycastleUtilEncodersHexTranslator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilEncodersHexTranslator, init)
}

LibOrgBouncycastleUtilEncodersHexTranslator *create_LibOrgBouncycastleUtilEncodersHexTranslator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilEncodersHexTranslator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilEncodersHexTranslator)
