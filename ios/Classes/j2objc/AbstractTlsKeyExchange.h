//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/AbstractTlsKeyExchange.java
//

#ifndef AbstractTlsKeyExchange_H
#define AbstractTlsKeyExchange_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsKeyExchange.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsDigitallySigned;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;

@interface LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange : NSObject < LibOrgBouncycastleCryptoTlsTlsKeyExchange > {
 @public
  jint keyExchange_;
  JavaUtilVector *supportedSignatureAlgorithms_;
  id<LibOrgBouncycastleCryptoTlsTlsContext> context_;
}

#pragma mark Public

- (IOSByteArray *)generateServerKeyExchange;

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)processClientCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)clientCertificate;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (jboolean)requiresServerKeyExchange;

- (void)skipClientCredentials;

- (void)skipServerKeyExchange;

#pragma mark Protected

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

- (LibOrgBouncycastleCryptoTlsDigitallySigned *)parseSignatureWithJavaIoInputStream:(JavaIoInputStream *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange, supportedSignatureAlgorithms_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange, context_, id<LibOrgBouncycastleCryptoTlsTlsContext>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange_initWithInt_withJavaUtilVector_(LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // AbstractTlsKeyExchange_H
