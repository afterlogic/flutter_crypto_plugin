//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/JceProviderCertStatus.java
//

#ifndef JceProviderCertStatus_H
#define JceProviderCertStatus_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaUtilDate;

@interface LibOrgBouncycastleJceProviderJceProviderCertStatus : NSObject {
 @public
  jint certStatus_;
  JavaUtilDate *revocationDate_;
}
@property (readonly, class) jint UNREVOKED NS_SWIFT_NAME(UNREVOKED);
@property (readonly, class) jint UNDETERMINED NS_SWIFT_NAME(UNDETERMINED);

+ (jint)UNREVOKED;

+ (jint)UNDETERMINED;

#pragma mark Public

- (jint)getCertStatus;

- (JavaUtilDate *)getRevocationDate;

- (void)setCertStatusWithInt:(jint)certStatus;

- (void)setRevocationDateWithJavaUtilDate:(JavaUtilDate *)revocationDate;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderJceProviderCertStatus)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJceProviderCertStatus, revocationDate_, JavaUtilDate *)

inline jint LibOrgBouncycastleJceProviderJceProviderCertStatus_get_UNREVOKED(void);
#define LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED 11
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderJceProviderCertStatus, UNREVOKED, jint)

inline jint LibOrgBouncycastleJceProviderJceProviderCertStatus_get_UNDETERMINED(void);
#define LibOrgBouncycastleJceProviderJceProviderCertStatus_UNDETERMINED 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderJceProviderCertStatus, UNDETERMINED, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJceProviderCertStatus_init(LibOrgBouncycastleJceProviderJceProviderCertStatus *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJceProviderCertStatus *new_LibOrgBouncycastleJceProviderJceProviderCertStatus_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJceProviderCertStatus *create_LibOrgBouncycastleJceProviderJceProviderCertStatus_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderJceProviderCertStatus)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // JceProviderCertStatus_H
