//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcPGPKeyPair.java
//

#ifndef BcPGPKeyPair_H
#define BcPGPKeyPair_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PGPKeyPair.h"

@class JavaUtilDate;
@class LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;
@class LibOrgBouncycastleOpenpgpPGPPrivateKey;
@class LibOrgBouncycastleOpenpgpPGPPublicKey;
@protocol LibOrgBouncycastleOpenpgpPGPAlgorithmParameters;

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair : LibOrgBouncycastleOpenpgpPGPKeyPair

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)algorithm
withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)keyPair
                     withJavaUtilDate:(JavaUtilDate *)date;

- (instancetype __nonnull)initWithInt:(jint)algorithm
withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:(id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters>)parameters
withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)keyPair
                     withJavaUtilDate:(JavaUtilDate *)date;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)arg0
                             withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *self, jint algorithm, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(jint algorithm, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(jint algorithm, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *self, jint algorithm, id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters> parameters, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(jint algorithm, id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters> parameters, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(jint algorithm, id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters> parameters, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BcPGPKeyPair_H
