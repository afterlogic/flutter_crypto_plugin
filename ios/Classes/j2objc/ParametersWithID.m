//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/ParametersWithID.java
//

#include "CipherParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithID.h"

@interface LibOrgBouncycastleCryptoParamsParametersWithID () {
 @public
  id<LibOrgBouncycastleCryptoCipherParameters> parameters_;
  IOSByteArray *id__;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsParametersWithID, parameters_, id<LibOrgBouncycastleCryptoCipherParameters>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsParametersWithID, id__, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoParamsParametersWithID

- (instancetype)initWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters
                                                   withByteArray:(IOSByteArray *)id_ {
  LibOrgBouncycastleCryptoParamsParametersWithID_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(self, parameters, id_);
  return self;
}

- (IOSByteArray *)getID {
  return id__;
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)getParameters {
  return parameters_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoCipherParameters:withByteArray:);
  methods[1].selector = @selector(getID);
  methods[2].selector = @selector(getParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameters_", "LLibOrgBouncycastleCryptoCipherParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "id__", "[B", .constantValue.asLong = 0, 0x2, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoCipherParameters;[B", "id" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsParametersWithID = { "ParametersWithID", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsParametersWithID;
}

@end

void LibOrgBouncycastleCryptoParamsParametersWithID_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(LibOrgBouncycastleCryptoParamsParametersWithID *self, id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *id_) {
  NSObject_init(self);
  self->parameters_ = parameters;
  self->id__ = id_;
}

LibOrgBouncycastleCryptoParamsParametersWithID *new_LibOrgBouncycastleCryptoParamsParametersWithID_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *id_) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsParametersWithID, initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_, parameters, id_)
}

LibOrgBouncycastleCryptoParamsParametersWithID *create_LibOrgBouncycastleCryptoParamsParametersWithID_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(id<LibOrgBouncycastleCryptoCipherParameters> parameters, IOSByteArray *id_) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsParametersWithID, initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_, parameters, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsParametersWithID)
