//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ECBasisType.java
//

#ifndef ECBasisType_H
#define ECBasisType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsECBasisType : NSObject
@property (readonly, class) jshort ec_basis_trinomial NS_SWIFT_NAME(ec_basis_trinomial);
@property (readonly, class) jshort ec_basis_pentanomial NS_SWIFT_NAME(ec_basis_pentanomial);

+ (jshort)ec_basis_trinomial;

+ (jshort)ec_basis_pentanomial;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jboolean)isValidWithShort:(jshort)ecBasisType;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsECBasisType)

inline jshort LibOrgBouncycastleCryptoTlsECBasisType_get_ec_basis_trinomial(void);
#define LibOrgBouncycastleCryptoTlsECBasisType_ec_basis_trinomial 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsECBasisType, ec_basis_trinomial, jshort)

inline jshort LibOrgBouncycastleCryptoTlsECBasisType_get_ec_basis_pentanomial(void);
#define LibOrgBouncycastleCryptoTlsECBasisType_ec_basis_pentanomial 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsECBasisType, ec_basis_pentanomial, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsECBasisType_init(LibOrgBouncycastleCryptoTlsECBasisType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsECBasisType *new_LibOrgBouncycastleCryptoTlsECBasisType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsECBasisType *create_LibOrgBouncycastleCryptoTlsECBasisType_init(void);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsECBasisType_isValidWithShort_(jshort ecBasisType);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsECBasisType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ECBasisType_H
