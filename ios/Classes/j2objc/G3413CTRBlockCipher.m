//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/G3413CTRBlockCipher.java
//

#include "Arrays.h"
#include "BlockCipher.h"
#include "CipherParameters.h"
#include "G3413CTRBlockCipher.h"
#include "GOST3413CipherUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithIV.h"
#include "StreamBlockCipher.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoModesG3413CTRBlockCipher () {
 @public
  jint s_;
  IOSByteArray *CTR_;
  IOSByteArray *IV_;
  IOSByteArray *buf_;
  jint blockSize_;
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_G3413CTRBlockCipher_;
  jint byteCount_;
  jboolean initialized_;
}

- (void)initArrays OBJC_METHOD_FAMILY_NONE;

- (void)generateCRT;

- (IOSByteArray *)generateBuf;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher, CTR_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher, buf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher, cipher_G3413CTRBlockCipher_, id<LibOrgBouncycastleCryptoBlockCipher>)

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initArrays(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_generateCRT(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *self);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_generateBuf(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *self);

@implementation LibOrgBouncycastleCryptoModesG3413CTRBlockCipher

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                    withInt:(jint)bitBlockSize {
  LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, bitBlockSize);
  return self;
}

- (void)init__WithBoolean:(jboolean)encrypting
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithIV *ivParam = (LibOrgBouncycastleCryptoParamsParametersWithIV *) params;
    LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initArrays(self);
    IV_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_([((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV]);
    if (((IOSByteArray *) nil_chk(IV_))->size_ != blockSize_ / 2) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Parameter IV length must be == blockSize/2");
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, CTR_, 0, IV_->size_);
    for (jint i = ((IOSByteArray *) nil_chk(IV_))->size_; i < blockSize_; i++) {
      *IOSByteArray_GetRef(nil_chk(CTR_), i) = 0;
    }
    if ([ivParam getParameters] != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CTRBlockCipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:[ivParam getParameters]];
    }
  }
  else {
    LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initArrays(self);
    if (params != nil) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CTRBlockCipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:params];
    }
  }
  initialized_ = true;
}

- (void)initArrays {
  LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initArrays(self);
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CTRBlockCipher_)) getAlgorithmName], @"/GCTR");
}

- (jint)getBlockSize {
  return s_;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:s_ withByteArray:outArg withInt:outOff];
  return s_;
}

- (jbyte)calculateByteWithByte:(jbyte)inArg {
  if (byteCount_ == 0) {
    buf_ = LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_generateBuf(self);
  }
  jbyte rv = (jbyte) (IOSByteArray_Get(nil_chk(buf_), byteCount_) ^ inArg);
  byteCount_++;
  if (byteCount_ == s_) {
    byteCount_ = 0;
    LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_generateCRT(self);
  }
  return rv;
}

- (void)generateCRT {
  LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_generateCRT(self);
}

- (IOSByteArray *)generateBuf {
  return LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_generateBuf(self);
}

- (void)reset {
  if (initialized_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, CTR_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
    for (jint i = ((IOSByteArray *) nil_chk(IV_))->size_; i < blockSize_; i++) {
      *IOSByteArray_GetRef(nil_chk(CTR_), i) = 0;
    }
    byteCount_ = 0;
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_G3413CTRBlockCipher_)) reset];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "B", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withInt:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(initArrays);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getBlockSize);
  methods[6].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(calculateByteWithByte:);
  methods[8].selector = @selector(generateCRT);
  methods[9].selector = @selector(generateBuf);
  methods[10].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "CTR_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cipher_G3413CTRBlockCipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x12, 10, -1, -1, -1 },
    { "byteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "LLibOrgBouncycastleCryptoBlockCipher;I", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "calculateByte", "B", "cipher" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesG3413CTRBlockCipher = { "G3413CTRBlockCipher", "lib.org.bouncycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesG3413CTRBlockCipher;
}

@end

void LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8);
}

LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *new_LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *create_LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

void LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  LibOrgBouncycastleCryptoStreamBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  self->byteCount_ = 0;
  if (bitBlockSize < 0 || bitBlockSize > [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Parameter bitBlockSize must be in range 0 < bitBlockSize <= ", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8));
  }
  self->cipher_G3413CTRBlockCipher_ = cipher;
  self->blockSize_ = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  self->s_ = bitBlockSize / 8;
  self->CTR_ = [IOSByteArray newArrayWithLength:self->blockSize_];
}

LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *new_LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, bitBlockSize)
}

LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *create_LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, bitBlockSize)
}

void LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_initArrays(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *self) {
  self->IV_ = [IOSByteArray newArrayWithLength:self->blockSize_ / 2];
  self->CTR_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->buf_ = [IOSByteArray newArrayWithLength:self->s_];
}

void LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_generateCRT(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *self) {
  (*IOSByteArray_GetRef(self->CTR_, ((IOSByteArray *) nil_chk(self->CTR_))->size_ - 1))++;
}

IOSByteArray *LibOrgBouncycastleCryptoModesG3413CTRBlockCipher_generateBuf(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher *self) {
  IOSByteArray *encryptedCTR = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(self->CTR_))->size_];
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_G3413CTRBlockCipher_)) processBlockWithByteArray:self->CTR_ withInt:0 withByteArray:encryptedCTR withInt:0];
  return LibOrgBouncycastleCryptoModesGOST3413CipherUtil_MSBWithByteArray_withInt_(encryptedCTR, self->s_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesG3413CTRBlockCipher)
