//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/kdf/GSKKFDGenerator.java
//

#include "Arrays.h"
#include "DataLengthException.h"
#include "DerivationParameters.h"
#include "Digest.h"
#include "GSKKDFParameters.h"
#include "GSKKFDGenerator.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pack.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  IOSByteArray *z_;
  jint counter_;
  IOSByteArray *r_;
  IOSByteArray *buf_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator, z_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator, r_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator, buf_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return digest_;
}

- (void)init__WithLibOrgBouncycastleCryptoDerivationParameters:(id<LibOrgBouncycastleCryptoDerivationParameters>)param {
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoAgreementKdfGSKKDFParameters class]]) {
    self->z_ = [((LibOrgBouncycastleCryptoAgreementKdfGSKKDFParameters *) nil_chk(((LibOrgBouncycastleCryptoAgreementKdfGSKKDFParameters *) param))) getZ];
    self->counter_ = [((LibOrgBouncycastleCryptoAgreementKdfGSKKDFParameters *) nil_chk(((LibOrgBouncycastleCryptoAgreementKdfGSKKDFParameters *) param))) getStartCounter];
    self->r_ = [((LibOrgBouncycastleCryptoAgreementKdfGSKKDFParameters *) nil_chk(((LibOrgBouncycastleCryptoAgreementKdfGSKKDFParameters *) param))) getNonce];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unkown parameters type");
  }
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  if (outOff + len > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"output buffer too small");
  }
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:z_ withInt:0 withInt:((IOSByteArray *) nil_chk(z_))->size_];
  IOSByteArray *c = LibOrgBouncycastleUtilPack_intToBigEndianWithInt_(counter_++);
  [digest_ updateWithByteArray:c withInt:0 withInt:((IOSByteArray *) nil_chk(c))->size_];
  if (r_ != nil) {
    [digest_ updateWithByteArray:r_ withInt:0 withInt:r_->size_];
  }
  [digest_ doFinalWithByteArray:buf_ withInt:0];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, outArg, outOff, len);
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(buf_);
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(getDigest);
  methods[2].selector = @selector(init__WithLibOrgBouncycastleCryptoDerivationParameters:);
  methods[3].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "z_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "r_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoDerivationParameters;", "generateBytes", "[BII", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator = { "GSKKFDGenerator", "lib.org.bouncycastle.crypto.agreement.kdf", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator;
}

@end

void LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
  self->buf_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize]];
}

LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator *new_LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator *create_LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementKdfGSKKFDGenerator)
