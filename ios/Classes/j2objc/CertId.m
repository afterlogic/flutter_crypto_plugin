//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/CertId.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Integer.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "CertId.h"
#include "DERSequence.h"
#include "GeneralName.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleAsn1CrmfCertId () {
 @public
  LibOrgBouncycastleAsn1X509GeneralName *issuer_;
  LibOrgBouncycastleAsn1ASN1Integer *serialNumber_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertId, issuer_, LibOrgBouncycastleAsn1X509GeneralName *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CrmfCertId, serialNumber_, LibOrgBouncycastleAsn1ASN1Integer *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CrmfCertId *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1CrmfCertId *new_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1CrmfCertId *create_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1CrmfCertId

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

+ (LibOrgBouncycastleAsn1CrmfCertId *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1CrmfCertId_getInstanceWithId_(o);
}

+ (LibOrgBouncycastleAsn1CrmfCertId *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                withBoolean:(jboolean)isExplicit {
  return LibOrgBouncycastleAsn1CrmfCertId_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, isExplicit);
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)issuer
                                       withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_(self, issuer, serialNumber);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)issuer
                        withLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)serialNumber {
  LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_(self, issuer, serialNumber);
  return self;
}

- (LibOrgBouncycastleAsn1X509GeneralName *)getIssuer {
  return issuer_;
}

- (LibOrgBouncycastleAsn1ASN1Integer *)getSerialNumber {
  return serialNumber_;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:issuer_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:serialNumber_];
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CrmfCertId;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CrmfCertId;", 0x9, 1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509GeneralName;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1X509GeneralName:withJavaMathBigInteger:);
  methods[4].selector = @selector(initWithLibOrgBouncycastleAsn1X509GeneralName:withLibOrgBouncycastleAsn1ASN1Integer:);
  methods[5].selector = @selector(getIssuer);
  methods[6].selector = @selector(getSerialNumber);
  methods[7].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "issuer_", "LLibOrgBouncycastleAsn1X509GeneralName;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialNumber_", "LLibOrgBouncycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1ASN1Sequence;", "getInstance", "LNSObject;", "LLibOrgBouncycastleAsn1ASN1TaggedObject;Z", "LLibOrgBouncycastleAsn1X509GeneralName;LJavaMathBigInteger;", "LLibOrgBouncycastleAsn1X509GeneralName;LLibOrgBouncycastleAsn1ASN1Integer;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1CrmfCertId = { "CertId", "lib.org.bouncycastle.asn1.crmf", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1CrmfCertId;
}

@end

void LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CrmfCertId *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->issuer_ = LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0]);
  self->serialNumber_ = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:1]);
}

LibOrgBouncycastleAsn1CrmfCertId *new_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CrmfCertId, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1CrmfCertId *create_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CrmfCertId, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1CrmfCertId *LibOrgBouncycastleAsn1CrmfCertId_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1CrmfCertId_initialize();
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1CrmfCertId class]]) {
    return (LibOrgBouncycastleAsn1CrmfCertId *) o;
  }
  if (o != nil) {
    return new_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(o));
  }
  return nil;
}

LibOrgBouncycastleAsn1CrmfCertId *LibOrgBouncycastleAsn1CrmfCertId_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean isExplicit) {
  LibOrgBouncycastleAsn1CrmfCertId_initialize();
  return LibOrgBouncycastleAsn1CrmfCertId_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, isExplicit));
}

void LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_(LibOrgBouncycastleAsn1CrmfCertId *self, LibOrgBouncycastleAsn1X509GeneralName *issuer, JavaMathBigInteger *serialNumber) {
  LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_(self, issuer, new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(serialNumber));
}

LibOrgBouncycastleAsn1CrmfCertId *new_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X509GeneralName *issuer, JavaMathBigInteger *serialNumber) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CrmfCertId, initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_, issuer, serialNumber)
}

LibOrgBouncycastleAsn1CrmfCertId *create_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X509GeneralName *issuer, JavaMathBigInteger *serialNumber) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CrmfCertId, initWithLibOrgBouncycastleAsn1X509GeneralName_withJavaMathBigInteger_, issuer, serialNumber)
}

void LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1CrmfCertId *self, LibOrgBouncycastleAsn1X509GeneralName *issuer, LibOrgBouncycastleAsn1ASN1Integer *serialNumber) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->issuer_ = issuer;
  self->serialNumber_ = serialNumber;
}

LibOrgBouncycastleAsn1CrmfCertId *new_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1X509GeneralName *issuer, LibOrgBouncycastleAsn1ASN1Integer *serialNumber) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CrmfCertId, initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_, issuer, serialNumber)
}

LibOrgBouncycastleAsn1CrmfCertId *create_LibOrgBouncycastleAsn1CrmfCertId_initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1X509GeneralName *issuer, LibOrgBouncycastleAsn1ASN1Integer *serialNumber) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CrmfCertId, initWithLibOrgBouncycastleAsn1X509GeneralName_withLibOrgBouncycastleAsn1ASN1Integer_, issuer, serialNumber)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1CrmfCertId)
