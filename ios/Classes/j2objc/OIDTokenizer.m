//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/OIDTokenizer.java
//

#include "J2ObjC_source.h"
#include "OIDTokenizer.h"

@interface LibOrgBouncycastleAsn1OIDTokenizer () {
 @public
  NSString *oid_;
  jint index_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1OIDTokenizer, oid_, NSString *)

@implementation LibOrgBouncycastleAsn1OIDTokenizer

- (instancetype)initWithNSString:(NSString *)oid {
  LibOrgBouncycastleAsn1OIDTokenizer_initWithNSString_(self, oid);
  return self;
}

- (jboolean)hasMoreTokens {
  return (index_ != -1);
}

- (NSString *)nextToken {
  if (index_ == -1) {
    return nil;
  }
  NSString *token;
  jint end = [((NSString *) nil_chk(oid_)) java_indexOf:'.' fromIndex:index_];
  if (end == -1) {
    token = [((NSString *) nil_chk(oid_)) java_substring:index_];
    index_ = -1;
    return token;
  }
  token = [((NSString *) nil_chk(oid_)) java_substring:index_ endIndex:end];
  index_ = end + 1;
  return token;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(hasMoreTokens);
  methods[2].selector = @selector(nextToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "oid_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1OIDTokenizer = { "OIDTokenizer", "lib.org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1OIDTokenizer;
}

@end

void LibOrgBouncycastleAsn1OIDTokenizer_initWithNSString_(LibOrgBouncycastleAsn1OIDTokenizer *self, NSString *oid) {
  NSObject_init(self);
  self->oid_ = oid;
  self->index_ = 0;
}

LibOrgBouncycastleAsn1OIDTokenizer *new_LibOrgBouncycastleAsn1OIDTokenizer_initWithNSString_(NSString *oid) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1OIDTokenizer, initWithNSString_, oid)
}

LibOrgBouncycastleAsn1OIDTokenizer *create_LibOrgBouncycastleAsn1OIDTokenizer_initWithNSString_(NSString *oid) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1OIDTokenizer, initWithNSString_, oid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1OIDTokenizer)
