//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/X509SignatureUtil.java
//

#include "ASN1Encodable.h"
#include "ASN1Null.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "CryptoProObjectIdentifiers.h"
#include "DERNull.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NISTObjectIdentifiers.h"
#include "OIWObjectIdentifiers.h"
#include "PKCSObjectIdentifiers.h"
#include "RSASSAPSSparams.h"
#include "TeleTrusTObjectIdentifiers.h"
#include "X509SignatureUtil.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/Provider.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/spec/PSSParameterSpec.h"

@interface LibOrgBouncycastleJceProviderX509SignatureUtil ()

+ (NSString *)getDigestAlgNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)digestAlgOID;

@end

inline LibOrgBouncycastleAsn1ASN1Null *LibOrgBouncycastleJceProviderX509SignatureUtil_get_derNull(void);
static LibOrgBouncycastleAsn1ASN1Null *LibOrgBouncycastleJceProviderX509SignatureUtil_derNull;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderX509SignatureUtil, derNull, LibOrgBouncycastleAsn1ASN1Null *)

__attribute__((unused)) static NSString *LibOrgBouncycastleJceProviderX509SignatureUtil_getDigestAlgNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *digestAlgOID);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJceProviderX509SignatureUtil)

@implementation LibOrgBouncycastleJceProviderX509SignatureUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderX509SignatureUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setSignatureParametersWithJavaSecuritySignature:(JavaSecuritySignature *)signature
                withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)params {
  LibOrgBouncycastleJceProviderX509SignatureUtil_setSignatureParametersWithJavaSecuritySignature_withLibOrgBouncycastleAsn1ASN1Encodable_(signature, params);
}

+ (NSString *)getSignatureNameWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)sigAlgId {
  return LibOrgBouncycastleJceProviderX509SignatureUtil_getSignatureNameWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(sigAlgId);
}

+ (NSString *)getDigestAlgNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)digestAlgOID {
  return LibOrgBouncycastleJceProviderX509SignatureUtil_getDigestAlgNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(digestAlgOID);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setSignatureParametersWithJavaSecuritySignature:withLibOrgBouncycastleAsn1ASN1Encodable:);
  methods[2].selector = @selector(getSignatureNameWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  methods[3].selector = @selector(getDigestAlgNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "derNull", "LLibOrgBouncycastleAsn1ASN1Null;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "setSignatureParameters", "LJavaSecuritySignature;LLibOrgBouncycastleAsn1ASN1Encodable;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "getSignatureName", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", "getDigestAlgName", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", &LibOrgBouncycastleJceProviderX509SignatureUtil_derNull };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderX509SignatureUtil = { "X509SignatureUtil", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderX509SignatureUtil;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJceProviderX509SignatureUtil class]) {
    LibOrgBouncycastleJceProviderX509SignatureUtil_derNull = JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJceProviderX509SignatureUtil)
  }
}

@end

void LibOrgBouncycastleJceProviderX509SignatureUtil_init(LibOrgBouncycastleJceProviderX509SignatureUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJceProviderX509SignatureUtil *new_LibOrgBouncycastleJceProviderX509SignatureUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderX509SignatureUtil, init)
}

LibOrgBouncycastleJceProviderX509SignatureUtil *create_LibOrgBouncycastleJceProviderX509SignatureUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderX509SignatureUtil, init)
}

void LibOrgBouncycastleJceProviderX509SignatureUtil_setSignatureParametersWithJavaSecuritySignature_withLibOrgBouncycastleAsn1ASN1Encodable_(JavaSecuritySignature *signature, id<LibOrgBouncycastleAsn1ASN1Encodable> params) {
  LibOrgBouncycastleJceProviderX509SignatureUtil_initialize();
  if (params != nil && ![((LibOrgBouncycastleAsn1ASN1Null *) nil_chk(LibOrgBouncycastleJceProviderX509SignatureUtil_derNull)) isEqual:params]) {
    JavaSecurityAlgorithmParameters *sigParams = JavaSecurityAlgorithmParameters_getInstanceWithNSString_withJavaSecurityProvider_([((JavaSecuritySignature *) nil_chk(signature)) getAlgorithm], [signature getProvider]);
    @try {
      [((JavaSecurityAlgorithmParameters *) nil_chk(sigParams)) init__WithByteArray:[((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([params toASN1Primitive])) getEncoded]];
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$$", @"IOException decoding parameters: ", [e getMessage]));
    }
    if ([((NSString *) nil_chk([signature getAlgorithm])) java_hasSuffix:@"MGF1"]) {
      @try {
        [signature setParameterWithJavaSecuritySpecAlgorithmParameterSpec:[sigParams getParameterSpecWithIOSClass:JavaSecuritySpecPSSParameterSpec_class_()]];
      }
      @catch (JavaSecurityGeneralSecurityException *e) {
        @throw new_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$$", @"Exception extracting parameters: ", [e getMessage]));
      }
    }
  }
}

NSString *LibOrgBouncycastleJceProviderX509SignatureUtil_getSignatureNameWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *sigAlgId) {
  LibOrgBouncycastleJceProviderX509SignatureUtil_initialize();
  id<LibOrgBouncycastleAsn1ASN1Encodable> params = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(sigAlgId)) getParameters];
  if (params != nil && ![((LibOrgBouncycastleAsn1ASN1Null *) nil_chk(LibOrgBouncycastleJceProviderX509SignatureUtil_derNull)) isEqual:params]) {
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([sigAlgId getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_RSASSA_PSS)]) {
      LibOrgBouncycastleAsn1PkcsRSASSAPSSparams *rsaParams = LibOrgBouncycastleAsn1PkcsRSASSAPSSparams_getInstanceWithId_(params);
      return JreStrcat("$$", LibOrgBouncycastleJceProviderX509SignatureUtil_getDigestAlgNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsRSASSAPSSparams *) nil_chk(rsaParams)) getHashAlgorithm])) getAlgorithm]), @"withRSAandMGF1");
    }
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([sigAlgId getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, ecdsa_with_SHA2)]) {
      LibOrgBouncycastleAsn1ASN1Sequence *ecDsaParams = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(params);
      return JreStrcat("$$", LibOrgBouncycastleJceProviderX509SignatureUtil_getDigestAlgNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(ecDsaParams)) getObjectAtWithInt:0])), @"withECDSA");
    }
  }
  return [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([sigAlgId getAlgorithm])) getId];
}

NSString *LibOrgBouncycastleJceProviderX509SignatureUtil_getDigestAlgNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *digestAlgOID) {
  LibOrgBouncycastleJceProviderX509SignatureUtil_initialize();
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, md5))) isEqual:digestAlgOID]) {
    return @"MD5";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, idSHA1))) isEqual:digestAlgOID]) {
    return @"SHA1";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha224))) isEqual:digestAlgOID]) {
    return @"SHA224";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256))) isEqual:digestAlgOID]) {
    return @"SHA256";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha384))) isEqual:digestAlgOID]) {
    return @"SHA384";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512))) isEqual:digestAlgOID]) {
    return @"SHA512";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd128))) isEqual:digestAlgOID]) {
    return @"RIPEMD128";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd160))) isEqual:digestAlgOID]) {
    return @"RIPEMD160";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd256))) isEqual:digestAlgOID]) {
    return @"RIPEMD256";
  }
  else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3411))) isEqual:digestAlgOID]) {
    return @"GOST3411";
  }
  else {
    return [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(digestAlgOID)) getId];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderX509SignatureUtil)
