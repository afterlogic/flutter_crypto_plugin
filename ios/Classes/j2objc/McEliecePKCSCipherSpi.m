//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/mceliece/McEliecePKCSCipherSpi.java
//

#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "McElieceCipher.h"
#include "McElieceKeyParameters.h"
#include "McElieceKeysToParams.h"
#include "McEliecePKCSCipherSpi.h"
#include "ParametersWithRandom.h"
#include "PqcAsymmetricBlockCipher.h"
#include "java/lang/Exception.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@interface LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi () {
 @public
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *cipher_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi, cipher_, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *)

@implementation LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi

- (instancetype)initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *)cipher {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_(self, cipher);
  return self;
}

- (void)initCipherEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
  withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  param = LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeysToParams_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_()));
  param = new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(param, sr);
  [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *) nil_chk(cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param];
  self->maxPlainTextSize_ = ((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *) nil_chk(cipher_))->maxPlainTextSize_;
  self->cipherTextSize_ = cipher_->cipherTextSize_;
}

- (void)initCipherDecryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
  withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  param = LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeysToParams_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_()));
  [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *) nil_chk(cipher_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param];
  self->maxPlainTextSize_ = ((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *) nil_chk(cipher_))->maxPlainTextSize_;
  self->cipherTextSize_ = cipher_->cipherTextSize_;
}

- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  IOSByteArray *output = nil;
  @try {
    output = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *) nil_chk(cipher_)) messageEncryptWithByteArray:input];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
  return output;
}

- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  IOSByteArray *output = nil;
  @try {
    output = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *) nil_chk(cipher_)) messageDecryptWithByteArray:input];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
  return output;
}

- (NSString *)getName {
  return @"McEliecePKCS";
}

- (jint)getKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *mcElieceKeyParameters;
  if ([JavaSecurityPublicKey_class_() isInstance:key]) {
    mcElieceKeyParameters = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *) cast_chk(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeysToParams_generatePublicKeyParameterWithJavaSecurityPublicKey_((id<JavaSecurityPublicKey>) cast_check(key, JavaSecurityPublicKey_class_())), [LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters class]);
  }
  else {
    mcElieceKeyParameters = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *) cast_chk(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeysToParams_generatePrivateKeyParameterWithJavaSecurityPrivateKey_((id<JavaSecurityPrivateKey>) cast_check(key, JavaSecurityPrivateKey_class_())), [LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters class]);
  }
  return [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *) nil_chk(cipher_)) getKeySizeWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters:mcElieceKeyParameters];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, 3, -1, -1, -1 },
    { NULL, "[B", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "[B", 0x4, 9, 7, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 11, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher:);
  methods[1].selector = @selector(initCipherEncryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initCipherDecryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[3].selector = @selector(messageEncryptWithByteArray:);
  methods[4].selector = @selector(messageDecryptWithByteArray:);
  methods[5].selector = @selector(getName);
  methods[6].selector = @selector(getKeySizeWithJavaSecurityKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipher_", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher;", "initCipherEncrypt", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "initCipherDecrypt", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;", "messageEncrypt", "[B", "LJavaxCryptoIllegalBlockSizeException;LJavaxCryptoBadPaddingException;", "messageDecrypt", "getKeySize", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "LLibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi = { "McEliecePKCSCipherSpi", "lib.org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, 13, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi;
}

@end

void LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi *self, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *cipher) {
  LibOrgBouncycastlePqcJcajceProviderUtilPqcAsymmetricBlockCipher_init(self);
  self->cipher_ = cipher;
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi *new_LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi, initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_, cipher)
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi *create_LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi, initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi)

@implementation LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS = { "McEliecePKCS", "lib.org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS;
}

@end

void LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS_init(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS *self) {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_initWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_(self, new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init());
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS *new_LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS, init)
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS *create_LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderMcelieceMcEliecePKCSCipherSpi_McEliecePKCS)
