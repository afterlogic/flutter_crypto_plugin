//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/linearalgebra/IntegerFunctions.java
//

#ifndef IntegerFunctions_H
#define IntegerFunctions_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;

@interface LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions : NSObject

#pragma mark Public

+ (JavaMathBigInteger *)binomialWithInt:(jint)n
                                withInt:(jint)t;

+ (jint)bitCountWithInt:(jint)a;

+ (jint)ceilLogWithJavaMathBigInteger:(JavaMathBigInteger *)a;

+ (jint)ceilLogWithInt:(jint)a;

+ (jint)ceilLog256WithInt:(jint)n;

+ (jint)ceilLog256WithLong:(jlong)n;

+ (JavaMathBigInteger *)divideAndRoundWithJavaMathBigInteger:(JavaMathBigInteger *)a
                                      withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (IOSObjectArray *)divideAndRoundWithJavaMathBigIntegerArray:(IOSObjectArray *)a
                                       withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (IOSIntArray *)extGCDWithInt:(jint)a
                       withInt:(jint)b;

+ (IOSObjectArray *)extgcdWithJavaMathBigInteger:(JavaMathBigInteger *)a
                          withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (jfloat)floatPowWithFloat:(jfloat)f
                    withInt:(jint)i;

+ (jint)floorLogWithJavaMathBigInteger:(JavaMathBigInteger *)a;

+ (jint)floorLogWithInt:(jint)a;

+ (jint)gcdWithInt:(jint)u
           withInt:(jint)v;

+ (IOSByteArray *)integerToOctetsWithJavaMathBigInteger:(JavaMathBigInteger *)val;

+ (jfloat)intRootWithInt:(jint)base
                 withInt:(jint)root;

+ (jboolean)isIncreasingWithIntArray:(IOSIntArray *)a;

+ (jint)isPowerWithInt:(jint)a
               withInt:(jint)p;

+ (jboolean)isPrimeWithInt:(jint)n;

+ (jint)jacobiWithJavaMathBigInteger:(JavaMathBigInteger *)A
              withJavaMathBigInteger:(JavaMathBigInteger *)B;

+ (JavaMathBigInteger *)leastCommonMultipleWithJavaMathBigIntegerArray:(IOSObjectArray *)numbers;

+ (jint)leastDivWithInt:(jint)a;

+ (jdouble)logWithDouble:(jdouble)x;

+ (jdouble)logWithLong:(jlong)x;

+ (jint)maxPowerWithInt:(jint)a;

+ (jlong)modWithLong:(jlong)a
            withLong:(jlong)m;

+ (jint)modInverseWithInt:(jint)a
                  withInt:(jint)mod;

+ (jlong)modInverseWithLong:(jlong)a
                   withLong:(jlong)mod;

+ (jint)modPowWithInt:(jint)a
              withInt:(jint)e
              withInt:(jint)n;

+ (JavaMathBigInteger *)nextPrimeWithLong:(jlong)n;

+ (JavaMathBigInteger *)nextProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)n;

+ (JavaMathBigInteger *)nextProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                                        withInt:(jint)certainty;

+ (jint)nextSmallerPrimeWithInt:(jint)n;

+ (JavaMathBigInteger *)octetsToIntegerWithByteArray:(IOSByteArray *)data;

+ (JavaMathBigInteger *)octetsToIntegerWithByteArray:(IOSByteArray *)data
                                             withInt:(jint)offset
                                             withInt:(jint)length;

+ (jint)orderWithInt:(jint)g
             withInt:(jint)p;

+ (jboolean)passesSmallPrimeTestWithJavaMathBigInteger:(JavaMathBigInteger *)candidate;

+ (jint)powWithInt:(jint)a
           withInt:(jint)e;

+ (jlong)powWithLong:(jlong)a
             withInt:(jint)e;

+ (JavaMathBigInteger *)randomizeWithJavaMathBigInteger:(JavaMathBigInteger *)upperBound;

+ (JavaMathBigInteger *)randomizeWithJavaMathBigInteger:(JavaMathBigInteger *)upperBound
                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng;

+ (JavaMathBigInteger *)reduceIntoWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                  withJavaMathBigInteger:(JavaMathBigInteger *)begin
                                  withJavaMathBigInteger:(JavaMathBigInteger *)end;

+ (JavaMathBigInteger *)ressolWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)p;

+ (JavaMathBigInteger *)squareRootWithJavaMathBigInteger:(JavaMathBigInteger *)a;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions)

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_jacobiWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *A, JavaMathBigInteger *B);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_ressolWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *p);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_gcdWithInt_withInt_(jint u, jint v);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_extGCDWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigIntegerArray_withJavaMathBigInteger_(IOSObjectArray *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_ceilLogWithJavaMathBigInteger_(JavaMathBigInteger *a);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_ceilLogWithInt_(jint a);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithInt_(jint n);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithLong_(jlong n);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_floorLogWithJavaMathBigInteger_(JavaMathBigInteger *a);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_floorLogWithInt_(jint a);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_maxPowerWithInt_(jint a);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_bitCountWithInt_(jint a);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_orderWithInt_withInt_(jint g, jint p);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_reduceIntoWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *begin, JavaMathBigInteger *end);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_powWithInt_withInt_(jint a, jint e);

FOUNDATION_EXPORT jlong LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_powWithLong_withInt_(jlong a, jint e);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_modPowWithInt_withInt_withInt_(jint a, jint e, jint n);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_extgcdWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_leastCommonMultipleWithJavaMathBigIntegerArray_(IOSObjectArray *numbers);

FOUNDATION_EXPORT jlong LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_modWithLong_withLong_(jlong a, jlong m);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_modInverseWithInt_withInt_(jint a, jint mod);

FOUNDATION_EXPORT jlong LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_modInverseWithLong_withLong_(jlong a, jlong mod);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_isPowerWithInt_withInt_(jint a, jint p);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_leastDivWithInt_(jint a);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_isPrimeWithInt_(jint n);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_passesSmallPrimeTestWithJavaMathBigInteger_(JavaMathBigInteger *candidate);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_nextSmallerPrimeWithInt_(jint n);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_nextProbablePrimeWithJavaMathBigInteger_withInt_(JavaMathBigInteger *n, jint certainty);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_nextProbablePrimeWithJavaMathBigInteger_(JavaMathBigInteger *n);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_nextPrimeWithLong_(jlong n);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(jint n, jint t);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_randomizeWithJavaMathBigInteger_(JavaMathBigInteger *upperBound);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_randomizeWithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *upperBound, JavaSecuritySecureRandom *prng);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_squareRootWithJavaMathBigInteger_(JavaMathBigInteger *a);

FOUNDATION_EXPORT jfloat LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_intRootWithInt_withInt_(jint base, jint root);

FOUNDATION_EXPORT jfloat LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_floatPowWithFloat_withInt_(jfloat f, jint i);

FOUNDATION_EXPORT jdouble LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_logWithDouble_(jdouble x);

FOUNDATION_EXPORT jdouble LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_logWithLong_(jlong x);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_isIncreasingWithIntArray_(IOSIntArray *a);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_integerToOctetsWithJavaMathBigInteger_(JavaMathBigInteger *val);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_octetsToIntegerWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint length);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions_octetsToIntegerWithByteArray_(IOSByteArray *data);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcMathLinearalgebraIntegerFunctions)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // IntegerFunctions_H
