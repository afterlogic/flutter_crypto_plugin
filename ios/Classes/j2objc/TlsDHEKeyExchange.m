//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsDHEKeyExchange.java
//

#include "AlertDescription.h"
#include "AsymmetricKeyParameter.h"
#include "Certificate.h"
#include "DHParameters.h"
#include "DHPrivateKeyParameters.h"
#include "DHPublicKeyParameters.h"
#include "DefaultTlsDHVerifier.h"
#include "Digest.h"
#include "DigestInputBuffer.h"
#include "DigitallySigned.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SecurityParameters.h"
#include "SignatureAndHashAlgorithm.h"
#include "Signer.h"
#include "SignerInputBuffer.h"
#include "TeeInputStream.h"
#include "TlsContext.h"
#include "TlsCredentials.h"
#include "TlsDHEKeyExchange.h"
#include "TlsDHKeyExchange.h"
#include "TlsDHUtils.h"
#include "TlsDHVerifier.h"
#include "TlsFatalAlert.h"
#include "TlsSigner.h"
#include "TlsSignerCredentials.h"
#include "TlsUtils.h"
#include "java/io/InputStream.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Vector.h"

@implementation LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters {
  LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(self, keyExchange, supportedSignatureAlgorithms, dhParameters);
  return self;
}

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier
withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters {
  LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(self, keyExchange, supportedSignatureAlgorithms, dhVerifier, dhParameters);
  return self;
}

- (void)processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)serverCredentials {
  if (!([LibOrgBouncycastleCryptoTlsTlsSignerCredentials_class_() isInstance:serverCredentials])) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  [self processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:[((id<LibOrgBouncycastleCryptoTlsTlsCredentials>) nil_chk(serverCredentials)) getCertificate]];
  self->serverCredentials_ = (id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>) cast_check(serverCredentials, LibOrgBouncycastleCryptoTlsTlsSignerCredentials_class_());
}

- (IOSByteArray *)generateServerKeyExchange {
  if (self->dhParameters_ == nil) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  LibOrgBouncycastleCryptoTlsDigestInputBuffer *buf = new_LibOrgBouncycastleCryptoTlsDigestInputBuffer_init();
  self->dhAgreePrivateKey_ = LibOrgBouncycastleCryptoTlsTlsDHUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsDHParameters_withJavaIoOutputStream_([((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom], self->dhParameters_, buf);
  LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm = LibOrgBouncycastleCryptoTlsTlsUtils_getSignatureAndHashAlgorithmWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsTlsSignerCredentials_(context_, serverCredentials_);
  id<LibOrgBouncycastleCryptoDigest> d = LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_(signatureAndHashAlgorithm);
  LibOrgBouncycastleCryptoTlsSecurityParameters *securityParameters = [((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:((LibOrgBouncycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->clientRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->clientRandom_))->size_];
  [d updateWithByteArray:securityParameters->serverRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->serverRandom_))->size_];
  [buf updateDigestWithLibOrgBouncycastleCryptoDigest:d];
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[d getDigestSize]];
  [d doFinalWithByteArray:hash_ withInt:0];
  IOSByteArray *signature = [((id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>) nil_chk(serverCredentials_)) generateCertificateSignatureWithByteArray:hash_];
  LibOrgBouncycastleCryptoTlsDigitallySigned *signed_params = new_LibOrgBouncycastleCryptoTlsDigitallySigned_initWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_withByteArray_(signatureAndHashAlgorithm, signature);
  [signed_params encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  LibOrgBouncycastleCryptoTlsSecurityParameters *securityParameters = [((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters];
  LibOrgBouncycastleCryptoTlsSignerInputBuffer *buf = new_LibOrgBouncycastleCryptoTlsSignerInputBuffer_init();
  JavaIoInputStream *teeIn = new_LibOrgBouncycastleUtilIoTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(input, buf);
  self->dhParameters_ = LibOrgBouncycastleCryptoTlsTlsDHUtils_receiveDHParametersWithLibOrgBouncycastleCryptoTlsTlsDHVerifier_withJavaIoInputStream_(dhVerifier_, teeIn);
  self->dhAgreePublicKey_ = new_LibOrgBouncycastleCryptoParamsDHPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoTlsTlsDHUtils_readDHParameterWithJavaIoInputStream_(teeIn), dhParameters_);
  LibOrgBouncycastleCryptoTlsDigitallySigned *signed_params = [self parseSignatureWithJavaIoInputStream:input];
  id<LibOrgBouncycastleCryptoSigner> signer = [self initVerifyerWithLibOrgBouncycastleCryptoTlsTlsSigner:tlsSigner_ withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:[((LibOrgBouncycastleCryptoTlsDigitallySigned *) nil_chk(signed_params)) getAlgorithm] withLibOrgBouncycastleCryptoTlsSecurityParameters:securityParameters];
  [buf updateSignerWithLibOrgBouncycastleCryptoSigner:signer];
  if (![((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) verifySignatureWithByteArray:[signed_params getSignature]]) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decrypt_error);
  }
}

- (id<LibOrgBouncycastleCryptoSigner>)initVerifyerWithLibOrgBouncycastleCryptoTlsTlsSigner:(id<LibOrgBouncycastleCryptoTlsTlsSigner>)tlsSigner
                                  withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                         withLibOrgBouncycastleCryptoTlsSecurityParameters:(LibOrgBouncycastleCryptoTlsSecurityParameters *)securityParameters {
  id<LibOrgBouncycastleCryptoSigner> signer = [((id<LibOrgBouncycastleCryptoTlsTlsSigner>) nil_chk(tlsSigner)) createVerifyerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:self->serverPublicKey_];
  [((id<LibOrgBouncycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:((LibOrgBouncycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->clientRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->clientRandom_))->size_];
  [signer updateWithByteArray:securityParameters->serverRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->serverRandom_))->size_];
  return signer;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x4, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaUtilVector:withLibOrgBouncycastleCryptoParamsDHParameters:);
  methods[1].selector = @selector(initWithInt:withJavaUtilVector:withLibOrgBouncycastleCryptoTlsTlsDHVerifier:withLibOrgBouncycastleCryptoParamsDHParameters:);
  methods[2].selector = @selector(processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:);
  methods[3].selector = @selector(generateServerKeyExchange);
  methods[4].selector = @selector(processServerKeyExchangeWithJavaIoInputStream:);
  methods[5].selector = @selector(initVerifyerWithLibOrgBouncycastleCryptoTlsTlsSigner:withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:withLibOrgBouncycastleCryptoTlsSecurityParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serverCredentials_", "LLibOrgBouncycastleCryptoTlsTlsSignerCredentials;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilVector;LLibOrgBouncycastleCryptoParamsDHParameters;", "ILJavaUtilVector;LLibOrgBouncycastleCryptoTlsTlsDHVerifier;LLibOrgBouncycastleCryptoParamsDHParameters;", "processServerCredentials", "LLibOrgBouncycastleCryptoTlsTlsCredentials;", "LJavaIoIOException;", "processServerKeyExchange", "LJavaIoInputStream;", "initVerifyer", "LLibOrgBouncycastleCryptoTlsTlsSigner;LLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;LLibOrgBouncycastleCryptoTlsSecurityParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange = { "TlsDHEKeyExchange", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange;
}

@end

void LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) {
  LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(self, keyExchange, supportedSignatureAlgorithms, new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init(), dhParameters);
}

LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange, initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_, keyExchange, supportedSignatureAlgorithms, dhParameters)
}

LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange, initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoParamsDHParameters_, keyExchange, supportedSignatureAlgorithms, dhParameters)
}

void LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) {
  LibOrgBouncycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(self, keyExchange, supportedSignatureAlgorithms, dhVerifier, dhParameters);
  self->serverCredentials_ = nil;
}

LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange, initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_, keyExchange, supportedSignatureAlgorithms, dhVerifier, dhParameters)
}

LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange, initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_, keyExchange, supportedSignatureAlgorithms, dhVerifier, dhParameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange)
