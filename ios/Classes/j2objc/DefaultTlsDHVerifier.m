//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsDHVerifier.java
//

#include "DHParameters.h"
#include "DHStandardGroups.h"
#include "DefaultTlsDHVerifier.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/util/Vector.h"

@interface LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier ()

+ (void)addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters;

@end

__attribute__((unused)) static void LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoParamsDHParameters *dhParameters);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier)

JavaUtilVector *LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_GROUPS;

@implementation LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier

+ (jint)DEFAULT_MINIMUM_PRIME_BITS {
  return LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_MINIMUM_PRIME_BITS;
}

+ (JavaUtilVector *)DEFAULT_GROUPS {
  return LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_GROUPS;
}

+ (void)addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters {
  LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(dhParameters);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)minimumPrimeBits {
  LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithInt_(self, minimumPrimeBits);
  return self;
}

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)groups
                               withInt:(jint)minimumPrimeBits {
  LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithJavaUtilVector_withInt_(self, groups, minimumPrimeBits);
  return self;
}

- (jboolean)acceptWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters {
  return [self checkMinimumPrimeBitsWithLibOrgBouncycastleCryptoParamsDHParameters:dhParameters] && [self checkGroupWithLibOrgBouncycastleCryptoParamsDHParameters:dhParameters];
}

- (jint)getMinimumPrimeBits {
  return minimumPrimeBits_;
}

- (jboolean)areGroupsEqualWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)a
                          withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)b {
  return a == b || ([self areParametersEqualWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(a)) getP] withJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(b)) getP]] && [self areParametersEqualWithJavaMathBigInteger:[a getG] withJavaMathBigInteger:[b getG]]);
}

- (jboolean)areParametersEqualWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return a == b || [((JavaMathBigInteger *) nil_chk(a)) isEqual:b];
}

- (jboolean)checkGroupWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters {
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(groups_)) size]; ++i) {
    if ([self areGroupsEqualWithLibOrgBouncycastleCryptoParamsDHParameters:dhParameters withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *) cast_chk([((JavaUtilVector *) nil_chk(groups_)) elementAtWithInt:i], [LibOrgBouncycastleCryptoParamsDHParameters class])]) {
      return true;
    }
  }
  return false;
}

- (jboolean)checkMinimumPrimeBitsWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters {
  return [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(dhParameters)) getP])) bitLength] >= [self getMinimumPrimeBits];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 9, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 10, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithJavaUtilVector:withInt:);
  methods[4].selector = @selector(acceptWithLibOrgBouncycastleCryptoParamsDHParameters:);
  methods[5].selector = @selector(getMinimumPrimeBits);
  methods[6].selector = @selector(areGroupsEqualWithLibOrgBouncycastleCryptoParamsDHParameters:withLibOrgBouncycastleCryptoParamsDHParameters:);
  methods[7].selector = @selector(areParametersEqualWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[8].selector = @selector(checkGroupWithLibOrgBouncycastleCryptoParamsDHParameters:);
  methods[9].selector = @selector(checkMinimumPrimeBitsWithLibOrgBouncycastleCryptoParamsDHParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MINIMUM_PRIME_BITS", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_MINIMUM_PRIME_BITS, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_GROUPS", "LJavaUtilVector;", .constantValue.asLong = 0, 0x1c, -1, 11, -1, -1 },
    { "groups_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "minimumPrimeBits_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addDefaultGroup", "LLibOrgBouncycastleCryptoParamsDHParameters;", "I", "LJavaUtilVector;I", "accept", "areGroupsEqual", "LLibOrgBouncycastleCryptoParamsDHParameters;LLibOrgBouncycastleCryptoParamsDHParameters;", "areParametersEqual", "LJavaMathBigInteger;LJavaMathBigInteger;", "checkGroup", "checkMinimumPrimeBits", &LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_GROUPS };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier = { "DefaultTlsDHVerifier", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 10, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier class]) {
    LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_GROUPS = new_JavaUtilVector_init();
    {
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc7919_ffdhe2048));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc7919_ffdhe3072));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc7919_ffdhe4096));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc7919_ffdhe6144));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc7919_ffdhe8192));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc3526_1536));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc3526_2048));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc3526_3072));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc3526_4096));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc3526_6144));
      LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(JreLoadStatic(LibOrgBouncycastleCryptoAgreementDHStandardGroups, rfc3526_8192));
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier)
  }
}

@end

void LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_addDefaultGroupWithLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoParamsDHParameters *dhParameters) {
  LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initialize();
  [((JavaUtilVector *) nil_chk(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_GROUPS)) addElementWithId:dhParameters];
}

void LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *self) {
  LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithInt_(self, LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_MINIMUM_PRIME_BITS);
}

LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, init)
}

LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, init)
}

void LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithInt_(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *self, jint minimumPrimeBits) {
  LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithJavaUtilVector_withInt_(self, LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_GROUPS, minimumPrimeBits);
}

LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithInt_(jint minimumPrimeBits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, initWithInt_, minimumPrimeBits)
}

LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithInt_(jint minimumPrimeBits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, initWithInt_, minimumPrimeBits)
}

void LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithJavaUtilVector_withInt_(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *self, JavaUtilVector *groups, jint minimumPrimeBits) {
  NSObject_init(self);
  self->groups_ = groups;
  self->minimumPrimeBits_ = minimumPrimeBits;
}

LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithJavaUtilVector_withInt_(JavaUtilVector *groups, jint minimumPrimeBits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, initWithJavaUtilVector_withInt_, groups, minimumPrimeBits)
}

LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithJavaUtilVector_withInt_(JavaUtilVector *groups, jint minimumPrimeBits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, initWithJavaUtilVector_withInt_, groups, minimumPrimeBits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier)
