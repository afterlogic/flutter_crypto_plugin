//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/CertificateList.java
//

#ifndef CertificateList_H
#define CertificateList_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1DERBitString;
@class LibOrgBouncycastleAsn1X500X500Name;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@class LibOrgBouncycastleAsn1X509Asn1X509Time;
@class LibOrgBouncycastleAsn1X509TBSCertList;
@protocol JavaUtilEnumeration;

@interface LibOrgBouncycastleAsn1X509CertificateList : LibOrgBouncycastleAsn1ASN1Object {
 @public
  LibOrgBouncycastleAsn1X509TBSCertList *tbsCertList_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *sigAlgId_;
  LibOrgBouncycastleAsn1DERBitString *sig_;
  jboolean isHashCodeSet_;
  jint hashCodeValue_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

+ (LibOrgBouncycastleAsn1X509CertificateList *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                         withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1X509CertificateList *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1X500X500Name *)getIssuer;

- (LibOrgBouncycastleAsn1X509Asn1X509Time *)getNextUpdate;

- (id<JavaUtilEnumeration>)getRevokedCertificateEnumeration;

- (IOSObjectArray *)getRevokedCertificates;

- (LibOrgBouncycastleAsn1DERBitString *)getSignature;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm;

- (LibOrgBouncycastleAsn1X509TBSCertList *)getTBSCertList;

- (LibOrgBouncycastleAsn1X509Asn1X509Time *)getThisUpdate;

- (jint)getVersionNumber;

- (NSUInteger)hash;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509CertificateList)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509CertificateList, tbsCertList_, LibOrgBouncycastleAsn1X509TBSCertList *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509CertificateList, sigAlgId_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509CertificateList, sig_, LibOrgBouncycastleAsn1DERBitString *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificateList *LibOrgBouncycastleAsn1X509CertificateList_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificateList *LibOrgBouncycastleAsn1X509CertificateList_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509CertificateList_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509CertificateList *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificateList *new_LibOrgBouncycastleAsn1X509CertificateList_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificateList *create_LibOrgBouncycastleAsn1X509CertificateList_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509CertificateList)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificateList_H
