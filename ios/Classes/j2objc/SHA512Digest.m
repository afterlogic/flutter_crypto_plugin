//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/SHA512Digest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LongDigest.h"
#include "Memoable.h"
#include "Pack.h"
#include "SHA512Digest.h"

inline jint LibOrgBouncycastleCryptoDigestsSHA512Digest_get_DIGEST_LENGTH(void);
#define LibOrgBouncycastleCryptoDigestsSHA512Digest_DIGEST_LENGTH 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoDigestsSHA512Digest, DIGEST_LENGTH, jint)

@implementation LibOrgBouncycastleCryptoDigestsSHA512Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoDigestsSHA512Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoDigestsSHA512Digest:(LibOrgBouncycastleCryptoDigestsSHA512Digest *)t {
  LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithLibOrgBouncycastleCryptoDigestsSHA512Digest_(self, t);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)encodedState {
  LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithByteArray_(self, encodedState);
  return self;
}

- (NSString *)getAlgorithmName {
  return @"SHA-512";
}

- (jint)getDigestSize {
  return LibOrgBouncycastleCryptoDigestsSHA512Digest_DIGEST_LENGTH;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  [self finish];
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(H1_, outArg, outOff);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(H2_, outArg, outOff + 8);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(H3_, outArg, outOff + 16);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(H4_, outArg, outOff + 24);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(H5_, outArg, outOff + 32);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(H6_, outArg, outOff + 40);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(H7_, outArg, outOff + 48);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(H8_, outArg, outOff + 56);
  [self reset];
  return LibOrgBouncycastleCryptoDigestsSHA512Digest_DIGEST_LENGTH;
}

- (void)reset {
  [super reset];
  H1_ = (jlong) 0x6a09e667f3bcc908LL;
  H2_ = (jlong) 0xbb67ae8584caa73bLL;
  H3_ = (jlong) 0x3c6ef372fe94f82bLL;
  H4_ = (jlong) 0xa54ff53a5f1d36f1LL;
  H5_ = (jlong) 0x510e527fade682d1LL;
  H6_ = (jlong) 0x9b05688c2b3e6c1fLL;
  H7_ = (jlong) 0x1f83d9abfb41bd6bLL;
  H8_ = (jlong) 0x5be0cd19137e2179LL;
}

- (id<LibOrgBouncycastleUtilMemoable>)copy__ {
  return new_LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithLibOrgBouncycastleCryptoDigestsSHA512Digest_(self);
}

- (void)resetWithLibOrgBouncycastleUtilMemoable:(id<LibOrgBouncycastleUtilMemoable>)other {
  LibOrgBouncycastleCryptoDigestsSHA512Digest *d = (LibOrgBouncycastleCryptoDigestsSHA512Digest *) cast_chk(other, [LibOrgBouncycastleCryptoDigestsSHA512Digest class]);
  [self copyInWithLibOrgBouncycastleCryptoDigestsLongDigest:d];
}

- (IOSByteArray *)getEncodedState {
  IOSByteArray *encoded = [IOSByteArray newArrayWithLength:[self getEncodedStateSize]];
  [super populateStateWithByteArray:encoded];
  return encoded;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilMemoable;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoDigestsSHA512Digest:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getDigestSize);
  methods[5].selector = @selector(doFinalWithByteArray:withInt:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(copy__);
  methods[8].selector = @selector(resetWithLibOrgBouncycastleUtilMemoable:);
  methods[9].selector = @selector(getEncodedState);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DIGEST_LENGTH", "I", .constantValue.asInt = LibOrgBouncycastleCryptoDigestsSHA512Digest_DIGEST_LENGTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigestsSHA512Digest;", "[B", "doFinal", "[BI", "copy", "reset", "LLibOrgBouncycastleUtilMemoable;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsSHA512Digest = { "SHA512Digest", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsSHA512Digest;
}

@end

void LibOrgBouncycastleCryptoDigestsSHA512Digest_init(LibOrgBouncycastleCryptoDigestsSHA512Digest *self) {
  LibOrgBouncycastleCryptoDigestsLongDigest_init(self);
}

LibOrgBouncycastleCryptoDigestsSHA512Digest *new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSHA512Digest, init)
}

LibOrgBouncycastleCryptoDigestsSHA512Digest *create_LibOrgBouncycastleCryptoDigestsSHA512Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSHA512Digest, init)
}

void LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithLibOrgBouncycastleCryptoDigestsSHA512Digest_(LibOrgBouncycastleCryptoDigestsSHA512Digest *self, LibOrgBouncycastleCryptoDigestsSHA512Digest *t) {
  LibOrgBouncycastleCryptoDigestsLongDigest_initWithLibOrgBouncycastleCryptoDigestsLongDigest_(self, t);
}

LibOrgBouncycastleCryptoDigestsSHA512Digest *new_LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithLibOrgBouncycastleCryptoDigestsSHA512Digest_(LibOrgBouncycastleCryptoDigestsSHA512Digest *t) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSHA512Digest, initWithLibOrgBouncycastleCryptoDigestsSHA512Digest_, t)
}

LibOrgBouncycastleCryptoDigestsSHA512Digest *create_LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithLibOrgBouncycastleCryptoDigestsSHA512Digest_(LibOrgBouncycastleCryptoDigestsSHA512Digest *t) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSHA512Digest, initWithLibOrgBouncycastleCryptoDigestsSHA512Digest_, t)
}

void LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithByteArray_(LibOrgBouncycastleCryptoDigestsSHA512Digest *self, IOSByteArray *encodedState) {
  LibOrgBouncycastleCryptoDigestsLongDigest_init(self);
  [self restoreStateWithByteArray:encodedState];
}

LibOrgBouncycastleCryptoDigestsSHA512Digest *new_LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithByteArray_(IOSByteArray *encodedState) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsSHA512Digest, initWithByteArray_, encodedState)
}

LibOrgBouncycastleCryptoDigestsSHA512Digest *create_LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithByteArray_(IOSByteArray *encodedState) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsSHA512Digest, initWithByteArray_, encodedState)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsSHA512Digest)
