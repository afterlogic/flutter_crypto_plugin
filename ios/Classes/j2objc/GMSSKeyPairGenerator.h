//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/gmss/GMSSKeyPairGenerator.java
//

#ifndef GMSSKeyPairGenerator_H
#define GMSSKeyPairGenerator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricCipherKeyPairGenerator.h"
#include "J2ObjC_header.h"

@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;
@class LibOrgBouncycastleCryptoKeyGenerationParameters;
@protocol LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider;

@interface LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator : NSObject < LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator >
@property (readonly, copy, class) NSString *OID NS_SWIFT_NAME(OID);

+ (NSString *)OID;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider:(id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider>)digestProvider;

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair;

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

- (void)initialize__WithInt:(jint)keySize
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom OBJC_METHOD_FAMILY_NONE;

- (void)initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator)

inline NSString *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_get_OID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_OID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator, OID, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *self, id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator_initWithLibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider_(id<LibOrgBouncycastlePqcCryptoGmssGMSSDigestProvider> digestProvider);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoGmssGMSSKeyPairGenerator)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // GMSSKeyPairGenerator_H
