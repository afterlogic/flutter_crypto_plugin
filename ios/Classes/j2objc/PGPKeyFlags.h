//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPKeyFlags.java
//

#ifndef PGPKeyFlags_H
#define PGPKeyFlags_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@protocol LibOrgBouncycastleOpenpgpPGPKeyFlags < JavaObject >

@end

@interface LibOrgBouncycastleOpenpgpPGPKeyFlags : NSObject
@property (readonly, class) jint CAN_CERTIFY NS_SWIFT_NAME(CAN_CERTIFY);
@property (readonly, class) jint CAN_SIGN NS_SWIFT_NAME(CAN_SIGN);
@property (readonly, class) jint CAN_ENCRYPT_COMMS NS_SWIFT_NAME(CAN_ENCRYPT_COMMS);
@property (readonly, class) jint CAN_ENCRYPT_STORAGE NS_SWIFT_NAME(CAN_ENCRYPT_STORAGE);
@property (readonly, class) jint MAYBE_SPLIT NS_SWIFT_NAME(MAYBE_SPLIT);
@property (readonly, class) jint CAN_AUTHENTICATE NS_SWIFT_NAME(CAN_AUTHENTICATE);
@property (readonly, class) jint MAYBE_SHARED NS_SWIFT_NAME(MAYBE_SHARED);

+ (jint)CAN_CERTIFY;

+ (jint)CAN_SIGN;

+ (jint)CAN_ENCRYPT_COMMS;

+ (jint)CAN_ENCRYPT_STORAGE;

+ (jint)MAYBE_SPLIT;

+ (jint)CAN_AUTHENTICATE;

+ (jint)MAYBE_SHARED;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPKeyFlags)

inline jint LibOrgBouncycastleOpenpgpPGPKeyFlags_get_CAN_CERTIFY(void);
#define LibOrgBouncycastleOpenpgpPGPKeyFlags_CAN_CERTIFY 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleOpenpgpPGPKeyFlags, CAN_CERTIFY, jint)

inline jint LibOrgBouncycastleOpenpgpPGPKeyFlags_get_CAN_SIGN(void);
#define LibOrgBouncycastleOpenpgpPGPKeyFlags_CAN_SIGN 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleOpenpgpPGPKeyFlags, CAN_SIGN, jint)

inline jint LibOrgBouncycastleOpenpgpPGPKeyFlags_get_CAN_ENCRYPT_COMMS(void);
#define LibOrgBouncycastleOpenpgpPGPKeyFlags_CAN_ENCRYPT_COMMS 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleOpenpgpPGPKeyFlags, CAN_ENCRYPT_COMMS, jint)

inline jint LibOrgBouncycastleOpenpgpPGPKeyFlags_get_CAN_ENCRYPT_STORAGE(void);
#define LibOrgBouncycastleOpenpgpPGPKeyFlags_CAN_ENCRYPT_STORAGE 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleOpenpgpPGPKeyFlags, CAN_ENCRYPT_STORAGE, jint)

inline jint LibOrgBouncycastleOpenpgpPGPKeyFlags_get_MAYBE_SPLIT(void);
#define LibOrgBouncycastleOpenpgpPGPKeyFlags_MAYBE_SPLIT 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleOpenpgpPGPKeyFlags, MAYBE_SPLIT, jint)

inline jint LibOrgBouncycastleOpenpgpPGPKeyFlags_get_CAN_AUTHENTICATE(void);
#define LibOrgBouncycastleOpenpgpPGPKeyFlags_CAN_AUTHENTICATE 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleOpenpgpPGPKeyFlags, CAN_AUTHENTICATE, jint)

inline jint LibOrgBouncycastleOpenpgpPGPKeyFlags_get_MAYBE_SHARED(void);
#define LibOrgBouncycastleOpenpgpPGPKeyFlags_MAYBE_SHARED 128
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleOpenpgpPGPKeyFlags, MAYBE_SHARED, jint)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPKeyFlags)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PGPKeyFlags_H
