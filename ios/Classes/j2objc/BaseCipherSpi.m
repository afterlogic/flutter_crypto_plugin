//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/util/BaseCipherSpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "BCJcaJceHelper.h"
#include "BaseCipherSpi.h"
#include "BouncyCastleProvider.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "PrivateKeyInfo.h"
#include "Wrapper.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/KeyFactory.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/CipherSpi.h"
#include "javax/crypto/IllegalBlockSizeException.h"
#include "javax/crypto/NoSuchPaddingException.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"
#include "javax/crypto/spec/RC2ParameterSpec.h"
#include "javax/crypto/spec/RC5ParameterSpec.h"
#include "javax/crypto/spec/SecretKeySpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi () {
 @public
  IOSObjectArray *availableSpecs_;
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
  jint ivSize_;
  IOSByteArray *iv_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi, availableSpecs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi, iv_, IOSByteArray *)

@interface LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1 : JavaSecurityInvalidKeyException {
 @public
  JavaxCryptoBadPaddingException *val$e_;
}

- (instancetype)initWithJavaxCryptoBadPaddingException:(JavaxCryptoBadPaddingException *)capture$0
                                          withNSString:(NSString *)x0;

- (JavaLangThrowable *)getCause;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1_initWithJavaxCryptoBadPaddingException_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1 *self, JavaxCryptoBadPaddingException *capture$0, NSString *x0);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1 *new_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1_initWithJavaxCryptoBadPaddingException_withNSString_(JavaxCryptoBadPaddingException *capture$0, NSString *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1 *create_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1_initWithJavaxCryptoBadPaddingException_withNSString_(JavaxCryptoBadPaddingException *capture$0, NSString *x0);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)engineGetBlockSize {
  return 0;
}

- (IOSByteArray *)engineGetIV {
  return nil;
}

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  return ((IOSByteArray *) nil_chk([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]))->size_;
}

- (jint)engineGetOutputSizeWithInt:(jint)inputLen {
  return -1;
}

- (JavaSecurityAlgorithmParameters *)engineGetParameters {
  return nil;
}

- (JavaSecurityAlgorithmParameters *)createParametersInstanceWithNSString:(NSString *)algorithm {
  return [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createAlgorithmParametersWithNSString:algorithm];
}

- (void)engineSetModeWithNSString:(NSString *)mode {
  @throw new_JavaSecurityNoSuchAlgorithmException_initWithNSString_(JreStrcat("$$", @"can't support mode ", mode));
}

- (void)engineSetPaddingWithNSString:(NSString *)padding {
  @throw new_JavaxCryptoNoSuchPaddingException_initWithNSString_(JreStrcat("$$$", @"Padding ", padding, @" unknown."));
}

- (IOSByteArray *)engineWrapWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  IOSByteArray *encoded = [((id<JavaSecurityKey>) nil_chk(key)) getEncoded];
  if (encoded == nil) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Cannot wrap key, null encoding.");
  }
  @try {
    if (wrapEngine_ == nil) {
      return [self engineDoFinalWithByteArray:encoded withInt:0 withInt:encoded->size_];
    }
    else {
      return [wrapEngine_ wrapWithByteArray:encoded withInt:0 withInt:encoded->size_];
    }
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_JavaxCryptoIllegalBlockSizeException_initWithNSString_([e getMessage]);
  }
}

- (id<JavaSecurityKey>)engineUnwrapWithByteArray:(IOSByteArray *)wrappedKey
                                    withNSString:(NSString *)wrappedKeyAlgorithm
                                         withInt:(jint)wrappedKeyType {
  IOSByteArray *encoded;
  @try {
    if (wrapEngine_ == nil) {
      encoded = [self engineDoFinalWithByteArray:wrappedKey withInt:0 withInt:((IOSByteArray *) nil_chk(wrappedKey))->size_];
    }
    else {
      encoded = [wrapEngine_ unwrapWithByteArray:wrappedKey withInt:0 withInt:((IOSByteArray *) nil_chk(wrappedKey))->size_];
    }
  }
  @catch (LibOrgBouncycastleCryptoInvalidCipherTextException *e) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e getMessage]);
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1_initWithJavaxCryptoBadPaddingException_withNSString_(e, @"unable to unwrap");
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e2) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e2 getMessage]);
  }
  if (wrappedKeyType == JavaxCryptoCipher_SECRET_KEY) {
    return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(encoded, wrappedKeyAlgorithm);
  }
  else if ([((NSString *) nil_chk(wrappedKeyAlgorithm)) isEqual:@""] && wrappedKeyType == JavaxCryptoCipher_PRIVATE_KEY) {
    @try {
      LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *in = LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(encoded);
      id<JavaSecurityPrivateKey> privKey = LibOrgBouncycastleJceProviderBouncyCastleProvider_getPrivateKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(in);
      if (privKey != nil) {
        return privKey;
      }
      else {
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$@$", @"algorithm ", [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(in)) getPrivateKeyAlgorithm])) getAlgorithm], @" not supported"));
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Invalid key encoding.");
    }
  }
  else {
    @try {
      JavaSecurityKeyFactory *kf = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createKeyFactoryWithNSString:wrappedKeyAlgorithm];
      if (wrappedKeyType == JavaxCryptoCipher_PUBLIC_KEY) {
        return [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePublicWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_(encoded)];
      }
      else if (wrappedKeyType == JavaxCryptoCipher_PRIVATE_KEY) {
        return [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePrivateWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_(encoded)];
      }
    }
    @catch (JavaSecurityNoSuchAlgorithmException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"Unknown key type ", [e getMessage]));
    }
    @catch (JavaSecuritySpecInvalidKeySpecException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"Unknown key type ", [e getMessage]));
    }
    @catch (JavaSecurityNoSuchProviderException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"Unknown key type ", [e getMessage]));
    }
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$I", @"Unknown key type ", wrappedKeyType));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x14, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 5, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 5, 10, -1, -1, -1 },
    { NULL, "[B", 0x4, 11, 1, 12, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 13, 14, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGetBlockSize);
  methods[2].selector = @selector(engineGetIV);
  methods[3].selector = @selector(engineGetKeySizeWithJavaSecurityKey:);
  methods[4].selector = @selector(engineGetOutputSizeWithInt:);
  methods[5].selector = @selector(engineGetParameters);
  methods[6].selector = @selector(createParametersInstanceWithNSString:);
  methods[7].selector = @selector(engineSetModeWithNSString:);
  methods[8].selector = @selector(engineSetPaddingWithNSString:);
  methods[9].selector = @selector(engineWrapWithJavaSecurityKey:);
  methods[10].selector = @selector(engineUnwrapWithByteArray:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "availableSpecs_", "[LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "engineParams_", "LJavaSecurityAlgorithmParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "wrapEngine_", "LLibOrgBouncycastleCryptoWrapper;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ivSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineGetKeySize", "LJavaSecurityKey;", "engineGetOutputSize", "I", "createParametersInstance", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "engineSetMode", "LJavaSecurityNoSuchAlgorithmException;", "engineSetPadding", "LJavaxCryptoNoSuchPaddingException;", "engineWrap", "LJavaxCryptoIllegalBlockSizeException;LJavaSecurityInvalidKeyException;", "engineUnwrap", "[BLNSString;I", "LJavaSecurityInvalidKeyException;", "LLibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi = { "BaseCipherSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.util", ptrTable, methods, fields, 7, 0x401, 11, 6, -1, 16, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_init(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi *self) {
  JavaxCryptoCipherSpi_init(self);
  self->availableSpecs_ = [IOSObjectArray newArrayWithObjects:(id[]){ JavaxCryptoSpecIvParameterSpec_class_(), JavaxCryptoSpecPBEParameterSpec_class_(), JavaxCryptoSpecRC2ParameterSpec_class_(), JavaxCryptoSpecRC5ParameterSpec_class_() } count:4 type:IOSClass_class_()];
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->engineParams_ = nil;
  self->wrapEngine_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1

- (instancetype)initWithJavaxCryptoBadPaddingException:(JavaxCryptoBadPaddingException *)capture$0
                                          withNSString:(NSString *)x0 {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1_initWithJavaxCryptoBadPaddingException_withNSString_(self, capture$0, x0);
  return self;
}

- (JavaLangThrowable *)getCause {
  @synchronized(self) {
    return val$e_;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxCryptoBadPaddingException:withNSString:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LJavaxCryptoBadPaddingException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LLibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi;", "engineUnwrapWithByteArray:withNSString:withInt:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1 = { "", "lib.org.bouncycastle.jcajce.provider.asymmetric.util", ptrTable, methods, fields, 7, 0x8010, 2, 1, 1, -1, 2, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1_initWithJavaxCryptoBadPaddingException_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1 *self, JavaxCryptoBadPaddingException *capture$0, NSString *x0) {
  self->val$e_ = capture$0;
  JavaSecurityInvalidKeyException_initWithNSString_(self, x0);
}

LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1 *new_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1_initWithJavaxCryptoBadPaddingException_withNSString_(JavaxCryptoBadPaddingException *capture$0, NSString *x0) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1, initWithJavaxCryptoBadPaddingException_withNSString_, capture$0, x0)
}

LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1 *create_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1_initWithJavaxCryptoBadPaddingException_withNSString_(JavaxCryptoBadPaddingException *capture$0, NSString *x0) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_1, initWithJavaxCryptoBadPaddingException_withNSString_, capture$0, x0)
}

@implementation LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)getBuf {
  return buf_;
}

- (void)erase {
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(self->buf_, (jbyte) 0);
  [self reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBuf);
  methods[2].selector = @selector(erase);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream = { "ErasableOutputStream", "lib.org.bouncycastle.jcajce.provider.asymmetric.util", ptrTable, methods, NULL, 7, 0x1c, 3, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream_init(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream *self) {
  JavaIoByteArrayOutputStream_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream *new_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream *create_LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseCipherSpi_ErasableOutputStream)
