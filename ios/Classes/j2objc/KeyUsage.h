//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/KeyUsage.java
//

#ifndef KeyUsage_H
#define KeyUsage_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1X509Extensions;

@interface LibOrgBouncycastleAsn1X509KeyUsage : LibOrgBouncycastleAsn1ASN1Object
@property (readonly, class) jint digitalSignature NS_SWIFT_NAME(digitalSignature);
@property (readonly, class) jint nonRepudiation NS_SWIFT_NAME(nonRepudiation);
@property (readonly, class) jint keyEncipherment NS_SWIFT_NAME(keyEncipherment);
@property (readonly, class) jint dataEncipherment NS_SWIFT_NAME(dataEncipherment);
@property (readonly, class) jint keyAgreement NS_SWIFT_NAME(keyAgreement);
@property (readonly, class) jint keyCertSign NS_SWIFT_NAME(keyCertSign);
@property (readonly, class) jint cRLSign NS_SWIFT_NAME(cRLSign);
@property (readonly, class) jint encipherOnly NS_SWIFT_NAME(encipherOnly);
@property (readonly, class) jint decipherOnly NS_SWIFT_NAME(decipherOnly);

+ (jint)digitalSignature;

+ (jint)nonRepudiation;

+ (jint)keyEncipherment;

+ (jint)dataEncipherment;

+ (jint)keyAgreement;

+ (jint)keyCertSign;

+ (jint)cRLSign;

+ (jint)encipherOnly;

+ (jint)decipherOnly;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)usage;

+ (LibOrgBouncycastleAsn1X509KeyUsage *)fromExtensionsWithLibOrgBouncycastleAsn1X509Extensions:(LibOrgBouncycastleAsn1X509Extensions *)extensions;

- (IOSByteArray *)getBytes;

+ (LibOrgBouncycastleAsn1X509KeyUsage *)getInstanceWithId:(id)obj;

- (jint)getPadBits;

- (jboolean)hasUsagesWithInt:(jint)usages;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509KeyUsage)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_digitalSignature(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_digitalSignature 128
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, digitalSignature, jint)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_nonRepudiation(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_nonRepudiation 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, nonRepudiation, jint)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_keyEncipherment(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_keyEncipherment 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, keyEncipherment, jint)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_dataEncipherment(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_dataEncipherment 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, dataEncipherment, jint)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_keyAgreement(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_keyAgreement 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, keyAgreement, jint)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_keyCertSign(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_keyCertSign 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, keyCertSign, jint)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_cRLSign(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_cRLSign 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, cRLSign, jint)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_encipherOnly(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_encipherOnly 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, encipherOnly, jint)

inline jint LibOrgBouncycastleAsn1X509KeyUsage_get_decipherOnly(void);
#define LibOrgBouncycastleAsn1X509KeyUsage_decipherOnly 32768
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1X509KeyUsage, decipherOnly, jint)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509KeyUsage *LibOrgBouncycastleAsn1X509KeyUsage_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509KeyUsage *LibOrgBouncycastleAsn1X509KeyUsage_fromExtensionsWithLibOrgBouncycastleAsn1X509Extensions_(LibOrgBouncycastleAsn1X509Extensions *extensions);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509KeyUsage_initWithInt_(LibOrgBouncycastleAsn1X509KeyUsage *self, jint usage);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509KeyUsage *new_LibOrgBouncycastleAsn1X509KeyUsage_initWithInt_(jint usage) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509KeyUsage *create_LibOrgBouncycastleAsn1X509KeyUsage_initWithInt_(jint usage);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509KeyUsage)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // KeyUsage_H
