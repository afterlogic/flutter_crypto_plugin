//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/BouncyCastlePQCProvider.java
//

#ifndef BouncyCastlePQCProvider_H
#define BouncyCastlePQCProvider_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ConfigurableProvider.h"
#include "J2ObjC_header.h"
#include "java/security/Provider.h"

@class IOSClass;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilMap;
@protocol LibOrgBouncycastleJcajceProviderConfigProviderConfiguration;
@protocol LibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter;

@interface LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider : JavaSecurityProvider < LibOrgBouncycastleJcajceProviderConfigConfigurableProvider >
@property (copy, class) NSString *PROVIDER_NAME NS_SWIFT_NAME(PROVIDER_NAME);
@property (readonly, class) id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> CONFIGURATION NS_SWIFT_NAME(CONFIGURATION);

+ (NSString *)PROVIDER_NAME;

+ (void)setPROVIDER_NAME:(NSString *)value;

+ (id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)CONFIGURATION;

#pragma mark Public

- (instancetype __nonnull)init;

- (void)addAlgorithmWithNSString:(NSString *)type
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                    withNSString:(NSString *)className_;

- (void)addAlgorithmWithNSString:(NSString *)key
                    withNSString:(NSString *)value;

- (void)addAttributesWithNSString:(NSString *)key
                  withJavaUtilMap:(id<JavaUtilMap>)attributeMap;

- (void)addKeyInfoConverterWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
       withLibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter:(id<LibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter>)keyInfoConverter;

+ (id<JavaSecurityPrivateKey>)getPrivateKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)privateKeyInfo;

+ (id<JavaSecurityPublicKey>)getPublicKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)publicKeyInfo;

- (jboolean)hasAlgorithmWithNSString:(NSString *)type
                        withNSString:(NSString *)name;

- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter;

#pragma mark Package-Private

+ (IOSClass *)loadClassWithIOSClass:(IOSClass *)sourceClass
                       withNSString:(NSString *)className_;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                                withDouble:(jdouble)arg1
                              withNSString:(NSString *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider)

inline NSString *LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_get_PROVIDER_NAME(void);
inline NSString *LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_set_PROVIDER_NAME(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_PROVIDER_NAME;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider, PROVIDER_NAME, NSString *)

inline id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_get_CONFIGURATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_CONFIGURATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider, CONFIGURATION, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_init(LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider *new_LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider *create_LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_init(void);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_getPublicKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *publicKeyInfo);

FOUNDATION_EXPORT id<JavaSecurityPrivateKey> LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_getPrivateKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *privateKeyInfo);

FOUNDATION_EXPORT IOSClass *LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider_loadClassWithIOSClass_withNSString_(IOSClass *sourceClass, NSString *className_);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcJcajceProviderBouncyCastlePQCProvider)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BouncyCastlePQCProvider_H
