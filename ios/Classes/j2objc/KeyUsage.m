//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/KeyUsage.java
//

#include "ASN1Encodable.h"
#include "ASN1Object.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "DERBitString.h"
#include "Extension.h"
#include "Extensions.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyUsage.h"
#include "java/lang/Integer.h"

@interface LibOrgBouncycastleAsn1X509KeyUsage () {
 @public
  LibOrgBouncycastleAsn1DERBitString *bitString_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1DERBitString:(LibOrgBouncycastleAsn1DERBitString *)bitString;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509KeyUsage, bitString_, LibOrgBouncycastleAsn1DERBitString *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509KeyUsage_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1X509KeyUsage *self, LibOrgBouncycastleAsn1DERBitString *bitString);

__attribute__((unused)) static LibOrgBouncycastleAsn1X509KeyUsage *new_LibOrgBouncycastleAsn1X509KeyUsage_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1DERBitString *bitString) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1X509KeyUsage *create_LibOrgBouncycastleAsn1X509KeyUsage_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1DERBitString *bitString);

@implementation LibOrgBouncycastleAsn1X509KeyUsage

+ (jint)digitalSignature {
  return LibOrgBouncycastleAsn1X509KeyUsage_digitalSignature;
}

+ (jint)nonRepudiation {
  return LibOrgBouncycastleAsn1X509KeyUsage_nonRepudiation;
}

+ (jint)keyEncipherment {
  return LibOrgBouncycastleAsn1X509KeyUsage_keyEncipherment;
}

+ (jint)dataEncipherment {
  return LibOrgBouncycastleAsn1X509KeyUsage_dataEncipherment;
}

+ (jint)keyAgreement {
  return LibOrgBouncycastleAsn1X509KeyUsage_keyAgreement;
}

+ (jint)keyCertSign {
  return LibOrgBouncycastleAsn1X509KeyUsage_keyCertSign;
}

+ (jint)cRLSign {
  return LibOrgBouncycastleAsn1X509KeyUsage_cRLSign;
}

+ (jint)encipherOnly {
  return LibOrgBouncycastleAsn1X509KeyUsage_encipherOnly;
}

+ (jint)decipherOnly {
  return LibOrgBouncycastleAsn1X509KeyUsage_decipherOnly;
}

+ (LibOrgBouncycastleAsn1X509KeyUsage *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1X509KeyUsage_getInstanceWithId_(obj);
}

+ (LibOrgBouncycastleAsn1X509KeyUsage *)fromExtensionsWithLibOrgBouncycastleAsn1X509Extensions:(LibOrgBouncycastleAsn1X509Extensions *)extensions {
  return LibOrgBouncycastleAsn1X509KeyUsage_fromExtensionsWithLibOrgBouncycastleAsn1X509Extensions_(extensions);
}

- (instancetype)initWithInt:(jint)usage {
  LibOrgBouncycastleAsn1X509KeyUsage_initWithInt_(self, usage);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1DERBitString:(LibOrgBouncycastleAsn1DERBitString *)bitString {
  LibOrgBouncycastleAsn1X509KeyUsage_initWithLibOrgBouncycastleAsn1DERBitString_(self, bitString);
  return self;
}

- (jboolean)hasUsagesWithInt:(jint)usages {
  return ([((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bitString_)) intValue] & usages) == usages;
}

- (IOSByteArray *)getBytes {
  return [((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bitString_)) getBytes];
}

- (jint)getPadBits {
  return [((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bitString_)) getPadBits];
}

- (NSString *)description {
  IOSByteArray *data = [((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bitString_)) getBytes];
  if (((IOSByteArray *) nil_chk(data))->size_ == 1) {
    return JreStrcat("$$", @"KeyUsage: 0x", JavaLangInteger_toHexStringWithInt_(IOSByteArray_Get(data, 0) & (jint) 0xff));
  }
  return JreStrcat("$$", @"KeyUsage: 0x", JavaLangInteger_toHexStringWithInt_((JreLShift32((IOSByteArray_Get(data, 1) & (jint) 0xff), 8)) | (IOSByteArray_Get(data, 0) & (jint) 0xff)));
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return bitString_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1X509KeyUsage;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509KeyUsage;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(fromExtensionsWithLibOrgBouncycastleAsn1X509Extensions:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1DERBitString:);
  methods[4].selector = @selector(hasUsagesWithInt:);
  methods[5].selector = @selector(getBytes);
  methods[6].selector = @selector(getPadBits);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digitalSignature", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_digitalSignature, 0x19, -1, -1, -1, -1 },
    { "nonRepudiation", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_nonRepudiation, 0x19, -1, -1, -1, -1 },
    { "keyEncipherment", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_keyEncipherment, 0x19, -1, -1, -1, -1 },
    { "dataEncipherment", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_dataEncipherment, 0x19, -1, -1, -1, -1 },
    { "keyAgreement", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_keyAgreement, 0x19, -1, -1, -1, -1 },
    { "keyCertSign", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_keyCertSign, 0x19, -1, -1, -1, -1 },
    { "cRLSign", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_cRLSign, 0x19, -1, -1, -1, -1 },
    { "encipherOnly", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_encipherOnly, 0x19, -1, -1, -1, -1 },
    { "decipherOnly", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509KeyUsage_decipherOnly, 0x19, -1, -1, -1, -1 },
    { "bitString_", "LLibOrgBouncycastleAsn1DERBitString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "fromExtensions", "LLibOrgBouncycastleAsn1X509Extensions;", "I", "LLibOrgBouncycastleAsn1DERBitString;", "hasUsages", "toString" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1X509KeyUsage = { "KeyUsage", "lib.org.bouncycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 9, 10, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1X509KeyUsage;
}

@end

LibOrgBouncycastleAsn1X509KeyUsage *LibOrgBouncycastleAsn1X509KeyUsage_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1X509KeyUsage_initialize();
  if ([obj isKindOfClass:[LibOrgBouncycastleAsn1X509KeyUsage class]]) {
    return (LibOrgBouncycastleAsn1X509KeyUsage *) obj;
  }
  else if (obj != nil) {
    return new_LibOrgBouncycastleAsn1X509KeyUsage_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1DERBitString_getInstanceWithId_(obj));
  }
  return nil;
}

LibOrgBouncycastleAsn1X509KeyUsage *LibOrgBouncycastleAsn1X509KeyUsage_fromExtensionsWithLibOrgBouncycastleAsn1X509Extensions_(LibOrgBouncycastleAsn1X509Extensions *extensions) {
  LibOrgBouncycastleAsn1X509KeyUsage_initialize();
  return LibOrgBouncycastleAsn1X509KeyUsage_getInstanceWithId_([((LibOrgBouncycastleAsn1X509Extensions *) nil_chk(extensions)) getExtensionParsedValueWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, keyUsage)]);
}

void LibOrgBouncycastleAsn1X509KeyUsage_initWithInt_(LibOrgBouncycastleAsn1X509KeyUsage *self, jint usage) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->bitString_ = new_LibOrgBouncycastleAsn1DERBitString_initWithInt_(usage);
}

LibOrgBouncycastleAsn1X509KeyUsage *new_LibOrgBouncycastleAsn1X509KeyUsage_initWithInt_(jint usage) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509KeyUsage, initWithInt_, usage)
}

LibOrgBouncycastleAsn1X509KeyUsage *create_LibOrgBouncycastleAsn1X509KeyUsage_initWithInt_(jint usage) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509KeyUsage, initWithInt_, usage)
}

void LibOrgBouncycastleAsn1X509KeyUsage_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1X509KeyUsage *self, LibOrgBouncycastleAsn1DERBitString *bitString) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->bitString_ = bitString;
}

LibOrgBouncycastleAsn1X509KeyUsage *new_LibOrgBouncycastleAsn1X509KeyUsage_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1DERBitString *bitString) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509KeyUsage, initWithLibOrgBouncycastleAsn1DERBitString_, bitString)
}

LibOrgBouncycastleAsn1X509KeyUsage *create_LibOrgBouncycastleAsn1X509KeyUsage_initWithLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1DERBitString *bitString) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509KeyUsage, initWithLibOrgBouncycastleAsn1DERBitString_, bitString)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1X509KeyUsage)
