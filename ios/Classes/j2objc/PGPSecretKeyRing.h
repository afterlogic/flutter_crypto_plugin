//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPSecretKeyRing.java
//

#ifndef PGPSecretKeyRing_H
#define PGPSecretKeyRing_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "Iterable.h"
#include "J2ObjC_header.h"
#include "PGPKeyRing.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor;
@class LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;
@class LibOrgBouncycastleOpenpgpPGPPublicKey;
@class LibOrgBouncycastleOpenpgpPGPPublicKeyRing;
@class LibOrgBouncycastleOpenpgpPGPSecretKey;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilSpliterator;
@protocol LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;

@interface LibOrgBouncycastleOpenpgpPGPSecretKeyRing : LibOrgBouncycastleOpenpgpPGPKeyRing < LibOrgBouncycastleUtilIterable > {
 @public
  id<JavaUtilList> keys_;
  id<JavaUtilList> extraPubKeys_;
}

#pragma mark Public

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)encoding
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)secKeys;

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)ring
                                                     withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)oldKeyDecryptor
                                                     withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)newKeyEncryptor OBJC_METHOD_FAMILY_NONE;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream;

- (IOSByteArray *)getEncoded;

- (id<JavaUtilIterator>)getExtraPublicKeys;

- (id<JavaUtilIterator>)getKeysWithSignaturesByWithLong:(jlong)keyID;

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKey;

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithByteArray:(IOSByteArray *)fingerprint;

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithLong:(jlong)keyID;

- (id<JavaUtilIterator>)getPublicKeys;

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)getSecretKey;

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)getSecretKeyWithByteArray:(IOSByteArray *)fingerprint;

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)getSecretKeyWithLong:(jlong)keyID;

- (id<JavaUtilIterator>)getSecretKeys;

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)insertSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secRing
                                                                  withLibOrgBouncycastleOpenpgpPGPSecretKey:(LibOrgBouncycastleOpenpgpPGPSecretKey *)secKey;

- (id<JavaUtilIterator>)iterator;

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)removeSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secRing
                                                                  withLibOrgBouncycastleOpenpgpPGPSecretKey:(LibOrgBouncycastleOpenpgpPGPSecretKey *)secKey;

+ (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)replacePublicKeysWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secretRing
                                                                withLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)publicRing;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPSecretKeyRing)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, keys_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPSecretKeyRing, extraPubKeys_, id<JavaUtilList>)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *self, id<JavaUtilList> secKeys);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(id<JavaUtilList> secKeys) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(id<JavaUtilList> secKeys);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *self, IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *self, JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *create_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *LibOrgBouncycastleOpenpgpPGPSecretKeyRing_replacePublicKeysWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretRing, LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicRing);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *LibOrgBouncycastleOpenpgpPGPSecretKeyRing_copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *ring, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *oldKeyDecryptor, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *newKeyEncryptor);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *LibOrgBouncycastleOpenpgpPGPSecretKeyRing_insertSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKey_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secRing, LibOrgBouncycastleOpenpgpPGPSecretKey *secKey);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpPGPSecretKeyRing *LibOrgBouncycastleOpenpgpPGPSecretKeyRing_removeSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKey_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secRing, LibOrgBouncycastleOpenpgpPGPSecretKey *secKey);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpPGPSecretKeyRing)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PGPSecretKeyRing_H
