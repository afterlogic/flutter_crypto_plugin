//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/apache/bzip2/CBZip2OutputStream.java
//

#include "BZip2Constants.h"
#include "CBZip2OutputStream.h"
#include "CRC.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleApacheBzip2CBZip2OutputStream () {
 @public
  jboolean finished_;
  IOSBooleanArray *inUse_;
  jint nInUse_;
  IOSCharArray *seqToUnseq_;
  IOSCharArray *unseqToSeq_;
  IOSCharArray *selector_;
  IOSCharArray *selectorMtf_;
  IOSCharArray *block_;
  IOSIntArray *quadrant_;
  IOSIntArray *zptr_;
  IOSShortArray *szptr_;
  IOSIntArray *ftab_;
  jint nMTF_;
  IOSIntArray *mtfFreq_;
  jint workFactor_;
  jint workDone_;
  jint workLimit_;
  jboolean firstAttempt_;
  jint nBlocksRandomised_;
  jint currentChar_;
  jint runLength_;
  jint blockCRC_;
  jint combinedCRC_;
  jint allowableBlockSize_;
  JavaIoOutputStream *bsStream_;
  IOSIntArray *incs_;
}

+ (void)panic;

- (void)makeMaps;

- (void)writeRun;

- (void)initialize__ OBJC_METHOD_FAMILY_NONE;

- (void)initBlock OBJC_METHOD_FAMILY_NONE;

- (void)endBlock;

- (void)endCompression;

- (void)hbAssignCodesWithIntArray:(IOSIntArray *)code
                    withCharArray:(IOSCharArray *)length
                          withInt:(jint)minLen
                          withInt:(jint)maxLen
                          withInt:(jint)alphaSize;

- (void)bsSetStreamWithJavaIoOutputStream:(JavaIoOutputStream *)f;

- (void)bsFinishedWithStream;

- (void)bsWWithInt:(jint)n
           withInt:(jint)v;

- (void)bsPutUCharWithInt:(jint)c;

- (void)bsPutintWithInt:(jint)u;

- (void)bsPutIntVSWithInt:(jint)numBits
                  withInt:(jint)c;

- (void)sendMTFValues;

- (void)moveToFrontCodeAndSend;

- (void)simpleSortWithInt:(jint)lo
                  withInt:(jint)hi
                  withInt:(jint)d;

- (void)vswapWithInt:(jint)p1
             withInt:(jint)p2
             withInt:(jint)n;

- (jchar)med3WithChar:(jchar)a
             withChar:(jchar)b
             withChar:(jchar)c;

- (void)qSort3WithInt:(jint)loSt
              withInt:(jint)hiSt
              withInt:(jint)dSt;

- (void)mainSort;

- (void)randomiseBlock;

- (void)doReversibleTransformation;

- (jboolean)fullGtUWithInt:(jint)i1
                   withInt:(jint)i2;

- (void)allocateCompressStructures OBJC_METHOD_FAMILY_NONE;

- (void)generateMTFValues;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, inUse_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, seqToUnseq_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, unseqToSeq_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, selector_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, selectorMtf_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, block_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, quadrant_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, zptr_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, szptr_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, ftab_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, mtfFreq_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, bsStream_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, incs_, IOSIntArray *)

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic(void);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_makeMaps(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_writeRun(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initialize__(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initBlock(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endBlock(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endCompression(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_hbAssignCodesWithIntArray_withCharArray_withInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, IOSIntArray *code, IOSCharArray *length, jint minLen, jint maxLen, jint alphaSize);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsSetStreamWithJavaIoOutputStream_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, JavaIoOutputStream *f);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsFinishedWithStream(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint n, jint v);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint c);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutintWithInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint u);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutIntVSWithInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint numBits, jint c);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_sendMTFValues(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_moveToFrontCodeAndSend(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_simpleSortWithInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint lo, jint hi, jint d);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_vswapWithInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint p1, jint p2, jint n);

__attribute__((unused)) static jchar LibOrgBouncycastleApacheBzip2CBZip2OutputStream_med3WithChar_withChar_withChar_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jchar a, jchar b, jchar c);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_qSort3WithInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint loSt, jint hiSt, jint dSt);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_mainSort(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_randomiseBlock(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_doReversibleTransformation(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static jboolean LibOrgBouncycastleApacheBzip2CBZip2OutputStream_fullGtUWithInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint i1, jint i2);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_allocateCompressStructures(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_generateMTFValues(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self);

@interface LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem : NSObject {
 @public
  jint ll_;
  jint hh_;
  jint dd_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem)

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_init(LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *self);

__attribute__((unused)) static LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *new_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *create_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem)

@implementation LibOrgBouncycastleApacheBzip2CBZip2OutputStream

+ (jint)SETMASK {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SETMASK;
}

+ (jint)CLEARMASK {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK;
}

+ (jint)GREATER_ICOST {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_GREATER_ICOST;
}

+ (jint)LESSER_ICOST {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_LESSER_ICOST;
}

+ (jint)SMALL_THRESH {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SMALL_THRESH;
}

+ (jint)DEPTH_THRESH {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_DEPTH_THRESH;
}

+ (jint)QSORT_STACK_SIZE {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_QSORT_STACK_SIZE;
}

+ (void)panic {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
}

- (void)makeMaps {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_makeMaps(self);
}

+ (void)hbMakeCodeLengthsWithCharArray:(IOSCharArray *)len
                          withIntArray:(IOSIntArray *)freq
                               withInt:(jint)alphaSize
                               withInt:(jint)maxLen {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_hbMakeCodeLengthsWithCharArray_withIntArray_withInt_withInt_(len, freq, alphaSize, maxLen);
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)inStream {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_(self, inStream);
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)inStream
                                   withInt:(jint)inBlockSize {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_withInt_(self, inStream, inBlockSize);
  return self;
}

- (void)writeWithInt:(jint)bv {
  jint b = (256 + bv) % 256;
  if (currentChar_ != -1) {
    if (currentChar_ == b) {
      runLength_++;
      if (runLength_ > 254) {
        LibOrgBouncycastleApacheBzip2CBZip2OutputStream_writeRun(self);
        currentChar_ = -1;
        runLength_ = 0;
      }
    }
    else {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_writeRun(self);
      runLength_ = 1;
      currentChar_ = b;
    }
  }
  else {
    currentChar_ = b;
    runLength_++;
  }
}

- (void)writeRun {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_writeRun(self);
}

- (void)java_finalize {
  [self close];
  [super java_finalize];
}

- (void)close {
  if (closed_) {
    return;
  }
  [self finish];
  closed_ = true;
  [super close];
  [((JavaIoOutputStream *) nil_chk(bsStream_)) close];
}

- (void)finish {
  if (finished_) {
    return;
  }
  if (runLength_ > 0) {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_writeRun(self);
  }
  currentChar_ = -1;
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endBlock(self);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endCompression(self);
  finished_ = true;
  [self flush];
}

- (void)flush {
  [super flush];
  [((JavaIoOutputStream *) nil_chk(bsStream_)) flush];
}

- (void)initialize__ {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initialize__(self);
}

- (void)initBlock {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initBlock(self);
}

- (void)endBlock {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endBlock(self);
}

- (void)endCompression {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endCompression(self);
}

- (void)hbAssignCodesWithIntArray:(IOSIntArray *)code
                    withCharArray:(IOSCharArray *)length
                          withInt:(jint)minLen
                          withInt:(jint)maxLen
                          withInt:(jint)alphaSize {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_hbAssignCodesWithIntArray_withCharArray_withInt_withInt_withInt_(self, code, length, minLen, maxLen, alphaSize);
}

- (void)bsSetStreamWithJavaIoOutputStream:(JavaIoOutputStream *)f {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsSetStreamWithJavaIoOutputStream_(self, f);
}

- (void)bsFinishedWithStream {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsFinishedWithStream(self);
}

- (void)bsWWithInt:(jint)n
           withInt:(jint)v {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, n, v);
}

- (void)bsPutUCharWithInt:(jint)c {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, c);
}

- (void)bsPutintWithInt:(jint)u {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutintWithInt_(self, u);
}

- (void)bsPutIntVSWithInt:(jint)numBits
                  withInt:(jint)c {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutIntVSWithInt_withInt_(self, numBits, c);
}

- (void)sendMTFValues {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_sendMTFValues(self);
}

- (void)moveToFrontCodeAndSend {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_moveToFrontCodeAndSend(self);
}

- (void)simpleSortWithInt:(jint)lo
                  withInt:(jint)hi
                  withInt:(jint)d {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_simpleSortWithInt_withInt_withInt_(self, lo, hi, d);
}

- (void)vswapWithInt:(jint)p1
             withInt:(jint)p2
             withInt:(jint)n {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_vswapWithInt_withInt_withInt_(self, p1, p2, n);
}

- (jchar)med3WithChar:(jchar)a
             withChar:(jchar)b
             withChar:(jchar)c {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_med3WithChar_withChar_withChar_(self, a, b, c);
}

- (void)qSort3WithInt:(jint)loSt
              withInt:(jint)hiSt
              withInt:(jint)dSt {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_qSort3WithInt_withInt_withInt_(self, loSt, hiSt, dSt);
}

- (void)mainSort {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_mainSort(self);
}

- (void)randomiseBlock {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_randomiseBlock(self);
}

- (void)doReversibleTransformation {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_doReversibleTransformation(self);
}

- (jboolean)fullGtUWithInt:(jint)i1
                   withInt:(jint)i2 {
  return LibOrgBouncycastleApacheBzip2CBZip2OutputStream_fullGtUWithInt_withInt_(self, i1, i2);
}

- (void)allocateCompressStructures {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_allocateCompressStructures(self);
}

- (void)generateMTFValues {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_generateMTFValues(self);
}

- (void)dealloc {
  JreCheckFinalize(self, [LibOrgBouncycastleApacheBzip2CBZip2OutputStream class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 7, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 9, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 14, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 19, -1, -1, -1, -1 },
    { NULL, "C", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 24, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(panic);
  methods[1].selector = @selector(makeMaps);
  methods[2].selector = @selector(hbMakeCodeLengthsWithCharArray:withIntArray:withInt:withInt:);
  methods[3].selector = @selector(initWithJavaIoOutputStream:);
  methods[4].selector = @selector(initWithJavaIoOutputStream:withInt:);
  methods[5].selector = @selector(writeWithInt:);
  methods[6].selector = @selector(writeRun);
  methods[7].selector = @selector(java_finalize);
  methods[8].selector = @selector(close);
  methods[9].selector = @selector(finish);
  methods[10].selector = @selector(flush);
  methods[11].selector = @selector(initialize__);
  methods[12].selector = @selector(initBlock);
  methods[13].selector = @selector(endBlock);
  methods[14].selector = @selector(endCompression);
  methods[15].selector = @selector(hbAssignCodesWithIntArray:withCharArray:withInt:withInt:withInt:);
  methods[16].selector = @selector(bsSetStreamWithJavaIoOutputStream:);
  methods[17].selector = @selector(bsFinishedWithStream);
  methods[18].selector = @selector(bsWWithInt:withInt:);
  methods[19].selector = @selector(bsPutUCharWithInt:);
  methods[20].selector = @selector(bsPutintWithInt:);
  methods[21].selector = @selector(bsPutIntVSWithInt:withInt:);
  methods[22].selector = @selector(sendMTFValues);
  methods[23].selector = @selector(moveToFrontCodeAndSend);
  methods[24].selector = @selector(simpleSortWithInt:withInt:withInt:);
  methods[25].selector = @selector(vswapWithInt:withInt:withInt:);
  methods[26].selector = @selector(med3WithChar:withChar:withChar:);
  methods[27].selector = @selector(qSort3WithInt:withInt:withInt:);
  methods[28].selector = @selector(mainSort);
  methods[29].selector = @selector(randomiseBlock);
  methods[30].selector = @selector(doReversibleTransformation);
  methods[31].selector = @selector(fullGtUWithInt:withInt:);
  methods[32].selector = @selector(allocateCompressStructures);
  methods[33].selector = @selector(generateMTFValues);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SETMASK", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SETMASK, 0x1c, -1, -1, -1, -1 },
    { "CLEARMASK", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK, 0x1c, -1, -1, -1, -1 },
    { "GREATER_ICOST", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2OutputStream_GREATER_ICOST, 0x1c, -1, -1, -1, -1 },
    { "LESSER_ICOST", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2OutputStream_LESSER_ICOST, 0x1c, -1, -1, -1, -1 },
    { "SMALL_THRESH", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SMALL_THRESH, 0x1c, -1, -1, -1, -1 },
    { "DEPTH_THRESH", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2OutputStream_DEPTH_THRESH, 0x1c, -1, -1, -1, -1 },
    { "QSORT_STACK_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2OutputStream_QSORT_STACK_SIZE, 0x1c, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "last_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "origPtr_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "blockSize100k_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "blockRandomised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bytesOut_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bsBuff_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bsLive_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCrc_", "LLibOrgBouncycastleApacheBzip2CRC;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "inUse_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nInUse_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seqToUnseq_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unseqToSeq_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selector_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectorMtf_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "block_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "quadrant_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zptr_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "szptr_", "[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ftab_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nMTF_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mtfFreq_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workFactor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workDone_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstAttempt_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nBlocksRandomised_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentChar_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "runLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "blockCRC_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "combinedCRC_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "allowableBlockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bsStream_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "incs_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "hbMakeCodeLengths", "[C[III", "LJavaIoOutputStream;", "LJavaIoIOException;", "LJavaIoOutputStream;I", "write", "I", "finalize", "LJavaLangThrowable;", "initialize", "hbAssignCodes", "[I[CIII", "bsSetStream", "bsW", "II", "bsPutUChar", "bsPutint", "bsPutIntVS", "simpleSort", "III", "vswap", "med3", "CCC", "qSort3", "fullGtU", "LLibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleApacheBzip2CBZip2OutputStream = { "CBZip2OutputStream", "lib.org.bouncycastle.apache.bzip2", ptrTable, methods, fields, 7, 0x1, 34, 42, -1, 25, -1, -1, -1 };
  return &_LibOrgBouncycastleApacheBzip2CBZip2OutputStream;
}

@end

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic() {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"panic"];
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_makeMaps(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  jint i;
  self->nInUse_ = 0;
  for (i = 0; i < 256; i++) {
    if (IOSBooleanArray_Get(nil_chk(self->inUse_), i)) {
      *IOSCharArray_GetRef(nil_chk(self->seqToUnseq_), self->nInUse_) = (jchar) i;
      *IOSCharArray_GetRef(nil_chk(self->unseqToSeq_), i) = (jchar) self->nInUse_;
      self->nInUse_++;
    }
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_hbMakeCodeLengthsWithCharArray_withIntArray_withInt_withInt_(IOSCharArray *len, IOSIntArray *freq, jint alphaSize, jint maxLen) {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initialize();
  jint nNodes;
  jint nHeap;
  jint n1;
  jint n2;
  jint i;
  jint j;
  jint k;
  jboolean tooLong;
  IOSIntArray *heap = [IOSIntArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE + 2];
  IOSIntArray *weight = [IOSIntArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE * 2];
  IOSIntArray *parent = [IOSIntArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE * 2];
  for (i = 0; i < alphaSize; i++) {
    *IOSIntArray_GetRef(weight, i + 1) = JreLShift32((IOSIntArray_Get(nil_chk(freq), i) == 0 ? 1 : IOSIntArray_Get(freq, i)), 8);
  }
  while (true) {
    nNodes = alphaSize;
    nHeap = 0;
    *IOSIntArray_GetRef(heap, 0) = 0;
    *IOSIntArray_GetRef(weight, 0) = 0;
    *IOSIntArray_GetRef(parent, 0) = -2;
    for (i = 1; i <= alphaSize; i++) {
      *IOSIntArray_GetRef(parent, i) = -1;
      nHeap++;
      *IOSIntArray_GetRef(heap, nHeap) = i;
      {
        jint zz;
        jint tmp;
        zz = nHeap;
        tmp = IOSIntArray_Get(heap, zz);
        while (IOSIntArray_Get(weight, tmp) < IOSIntArray_Get(weight, IOSIntArray_Get(heap, JreRShift32(zz, 1)))) {
          *IOSIntArray_GetRef(heap, zz) = IOSIntArray_Get(heap, JreRShift32(zz, 1));
          JreRShiftAssignInt(&zz, 1);
        }
        *IOSIntArray_GetRef(heap, zz) = tmp;
      }
    }
    if (!(nHeap < (LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE + 2))) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
    }
    while (nHeap > 1) {
      n1 = IOSIntArray_Get(heap, 1);
      *IOSIntArray_GetRef(heap, 1) = IOSIntArray_Get(heap, nHeap);
      nHeap--;
      {
        jint zz = 0;
        jint yy = 0;
        jint tmp = 0;
        zz = 1;
        tmp = IOSIntArray_Get(heap, zz);
        while (true) {
          yy = JreLShift32(zz, 1);
          if (yy > nHeap) {
            break;
          }
          if (yy < nHeap && IOSIntArray_Get(weight, IOSIntArray_Get(heap, yy + 1)) < IOSIntArray_Get(weight, IOSIntArray_Get(heap, yy))) {
            yy++;
          }
          if (IOSIntArray_Get(weight, tmp) < IOSIntArray_Get(weight, IOSIntArray_Get(heap, yy))) {
            break;
          }
          *IOSIntArray_GetRef(heap, zz) = IOSIntArray_Get(heap, yy);
          zz = yy;
        }
        *IOSIntArray_GetRef(heap, zz) = tmp;
      }
      n2 = IOSIntArray_Get(heap, 1);
      *IOSIntArray_GetRef(heap, 1) = IOSIntArray_Get(heap, nHeap);
      nHeap--;
      {
        jint zz = 0;
        jint yy = 0;
        jint tmp = 0;
        zz = 1;
        tmp = IOSIntArray_Get(heap, zz);
        while (true) {
          yy = JreLShift32(zz, 1);
          if (yy > nHeap) {
            break;
          }
          if (yy < nHeap && IOSIntArray_Get(weight, IOSIntArray_Get(heap, yy + 1)) < IOSIntArray_Get(weight, IOSIntArray_Get(heap, yy))) {
            yy++;
          }
          if (IOSIntArray_Get(weight, tmp) < IOSIntArray_Get(weight, IOSIntArray_Get(heap, yy))) {
            break;
          }
          *IOSIntArray_GetRef(heap, zz) = IOSIntArray_Get(heap, yy);
          zz = yy;
        }
        *IOSIntArray_GetRef(heap, zz) = tmp;
      }
      nNodes++;
      *IOSIntArray_GetRef(parent, n1) = *IOSIntArray_GetRef(parent, n2) = nNodes;
      *IOSIntArray_GetRef(weight, nNodes) = ((IOSIntArray_Get(weight, n1) & (jint) 0xffffff00) + (IOSIntArray_Get(weight, n2) & (jint) 0xffffff00)) | (1 + (((IOSIntArray_Get(weight, n1) & (jint) 0x000000ff) > (IOSIntArray_Get(weight, n2) & (jint) 0x000000ff)) ? (IOSIntArray_Get(weight, n1) & (jint) 0x000000ff) : (IOSIntArray_Get(weight, n2) & (jint) 0x000000ff)));
      *IOSIntArray_GetRef(parent, nNodes) = -1;
      nHeap++;
      *IOSIntArray_GetRef(heap, nHeap) = nNodes;
      {
        jint zz = 0;
        jint tmp = 0;
        zz = nHeap;
        tmp = IOSIntArray_Get(heap, zz);
        while (IOSIntArray_Get(weight, tmp) < IOSIntArray_Get(weight, IOSIntArray_Get(heap, JreRShift32(zz, 1)))) {
          *IOSIntArray_GetRef(heap, zz) = IOSIntArray_Get(heap, JreRShift32(zz, 1));
          JreRShiftAssignInt(&zz, 1);
        }
        *IOSIntArray_GetRef(heap, zz) = tmp;
      }
    }
    if (!(nNodes < (LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE * 2))) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
    }
    tooLong = false;
    for (i = 1; i <= alphaSize; i++) {
      j = 0;
      k = i;
      while (IOSIntArray_Get(parent, k) >= 0) {
        k = IOSIntArray_Get(parent, k);
        j++;
      }
      *IOSCharArray_GetRef(nil_chk(len), i - 1) = (jchar) j;
      if (j > maxLen) {
        tooLong = true;
      }
    }
    if (!tooLong) {
      break;
    }
    for (i = 1; i < alphaSize; i++) {
      j = JreRShift32(IOSIntArray_Get(weight, i), 8);
      j = 1 + (j / 2);
      *IOSIntArray_GetRef(weight, i) = JreLShift32(j, 8);
    }
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, JavaIoOutputStream *inStream) {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_withInt_(self, inStream, 9);
}

LibOrgBouncycastleApacheBzip2CBZip2OutputStream *new_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *inStream) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, initWithJavaIoOutputStream_, inStream)
}

LibOrgBouncycastleApacheBzip2CBZip2OutputStream *create_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *inStream) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, initWithJavaIoOutputStream_, inStream)
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, JavaIoOutputStream *inStream, jint inBlockSize) {
  JavaIoOutputStream_init(self);
  self->mCrc_ = new_LibOrgBouncycastleApacheBzip2CRC_init();
  self->inUse_ = [IOSBooleanArray newArrayWithLength:256];
  self->seqToUnseq_ = [IOSCharArray newArrayWithLength:256];
  self->unseqToSeq_ = [IOSCharArray newArrayWithLength:256];
  self->selector_ = [IOSCharArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_SELECTORS];
  self->selectorMtf_ = [IOSCharArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_SELECTORS];
  self->mtfFreq_ = [IOSIntArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE];
  self->currentChar_ = -1;
  self->runLength_ = 0;
  self->closed_ = false;
  self->incs_ = [IOSIntArray newArrayWithInts:(jint[]){ 1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 29524, 88573, 265720, 797161, 2391484 } count:14];
  self->block_ = nil;
  self->quadrant_ = nil;
  self->zptr_ = nil;
  self->ftab_ = nil;
  [((JavaIoOutputStream *) nil_chk(inStream)) writeWithInt:'B'];
  [inStream writeWithInt:'Z'];
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsSetStreamWithJavaIoOutputStream_(self, inStream);
  self->workFactor_ = 50;
  if (inBlockSize > 9) {
    inBlockSize = 9;
  }
  if (inBlockSize < 1) {
    inBlockSize = 1;
  }
  self->blockSize100k_ = inBlockSize;
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_allocateCompressStructures(self);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initialize__(self);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initBlock(self);
}

LibOrgBouncycastleApacheBzip2CBZip2OutputStream *new_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_withInt_(JavaIoOutputStream *inStream, jint inBlockSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, initWithJavaIoOutputStream_withInt_, inStream, inBlockSize)
}

LibOrgBouncycastleApacheBzip2CBZip2OutputStream *create_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initWithJavaIoOutputStream_withInt_(JavaIoOutputStream *inStream, jint inBlockSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleApacheBzip2CBZip2OutputStream, initWithJavaIoOutputStream_withInt_, inStream, inBlockSize)
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_writeRun(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  if (self->last_ < self->allowableBlockSize_) {
    *IOSBooleanArray_GetRef(nil_chk(self->inUse_), self->currentChar_) = true;
    for (jint i = 0; i < self->runLength_; i++) {
      [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) updateCRCWithInt:(jchar) self->currentChar_];
    }
    switch (self->runLength_) {
      case 1:
      self->last_++;
      *IOSCharArray_GetRef(nil_chk(self->block_), self->last_ + 1) = (jchar) self->currentChar_;
      break;
      case 2:
      self->last_++;
      *IOSCharArray_GetRef(nil_chk(self->block_), self->last_ + 1) = (jchar) self->currentChar_;
      self->last_++;
      *IOSCharArray_GetRef(self->block_, self->last_ + 1) = (jchar) self->currentChar_;
      break;
      case 3:
      self->last_++;
      *IOSCharArray_GetRef(nil_chk(self->block_), self->last_ + 1) = (jchar) self->currentChar_;
      self->last_++;
      *IOSCharArray_GetRef(self->block_, self->last_ + 1) = (jchar) self->currentChar_;
      self->last_++;
      *IOSCharArray_GetRef(self->block_, self->last_ + 1) = (jchar) self->currentChar_;
      break;
      default:
      *IOSBooleanArray_GetRef(nil_chk(self->inUse_), self->runLength_ - 4) = true;
      self->last_++;
      *IOSCharArray_GetRef(nil_chk(self->block_), self->last_ + 1) = (jchar) self->currentChar_;
      self->last_++;
      *IOSCharArray_GetRef(self->block_, self->last_ + 1) = (jchar) self->currentChar_;
      self->last_++;
      *IOSCharArray_GetRef(self->block_, self->last_ + 1) = (jchar) self->currentChar_;
      self->last_++;
      *IOSCharArray_GetRef(self->block_, self->last_ + 1) = (jchar) self->currentChar_;
      self->last_++;
      *IOSCharArray_GetRef(self->block_, self->last_ + 1) = (jchar) (self->runLength_ - 4);
      break;
    }
  }
  else {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endBlock(self);
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initBlock(self);
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_writeRun(self);
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initialize__(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  self->bytesOut_ = 0;
  self->nBlocksRandomised_ = 0;
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, 'h');
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, '0' + self->blockSize100k_);
  self->combinedCRC_ = 0;
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_initBlock(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) initialiseCRC];
  self->last_ = -1;
  for (jint i = 0; i < 256; i++) {
    *IOSBooleanArray_GetRef(nil_chk(self->inUse_), i) = false;
  }
  self->allowableBlockSize_ = LibOrgBouncycastleApacheBzip2BZip2Constants_baseBlockSize * self->blockSize100k_ - 20;
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endBlock(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  self->blockCRC_ = [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) getFinalCRC];
  self->combinedCRC_ = (JreLShift32(self->combinedCRC_, 1)) | (JreURShift32(self->combinedCRC_, 31));
  self->combinedCRC_ ^= self->blockCRC_;
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_doReversibleTransformation(self);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x31);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x41);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x59);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x26);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x53);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x59);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutintWithInt_(self, self->blockCRC_);
  if (self->blockRandomised_) {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 1);
    self->nBlocksRandomised_++;
  }
  else {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 0);
  }
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_moveToFrontCodeAndSend(self);
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_endCompression(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x17);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x72);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x45);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x38);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x50);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(self, (jint) 0x90);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutintWithInt_(self, self->combinedCRC_);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsFinishedWithStream(self);
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_hbAssignCodesWithIntArray_withCharArray_withInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, IOSIntArray *code, IOSCharArray *length, jint minLen, jint maxLen, jint alphaSize) {
  jint n;
  jint vec;
  jint i;
  vec = 0;
  for (n = minLen; n <= maxLen; n++) {
    for (i = 0; i < alphaSize; i++) {
      if (IOSCharArray_Get(nil_chk(length), i) == n) {
        *IOSIntArray_GetRef(nil_chk(code), i) = vec;
        vec++;
      }
    }
    JreLShiftAssignInt(&vec, 1);
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsSetStreamWithJavaIoOutputStream_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, JavaIoOutputStream *f) {
  self->bsStream_ = f;
  self->bsLive_ = 0;
  self->bsBuff_ = 0;
  self->bytesOut_ = 0;
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsFinishedWithStream(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  while (self->bsLive_ > 0) {
    jint ch = (JreRShift32(self->bsBuff_, 24));
    @try {
      [((JavaIoOutputStream *) nil_chk(self->bsStream_)) writeWithInt:ch];
    }
    @catch (JavaIoIOException *e) {
      @throw e;
    }
    JreLShiftAssignInt(&self->bsBuff_, 8);
    self->bsLive_ -= 8;
    self->bytesOut_++;
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint n, jint v) {
  while (self->bsLive_ >= 8) {
    jint ch = (JreRShift32(self->bsBuff_, 24));
    @try {
      [((JavaIoOutputStream *) nil_chk(self->bsStream_)) writeWithInt:ch];
    }
    @catch (JavaIoIOException *e) {
      @throw e;
    }
    JreLShiftAssignInt(&self->bsBuff_, 8);
    self->bsLive_ -= 8;
    self->bytesOut_++;
  }
  self->bsBuff_ |= (JreLShift32(v, (32 - self->bsLive_ - n)));
  self->bsLive_ += n;
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutUCharWithInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint c) {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 8, c);
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutintWithInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint u) {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 8, (JreRShift32(u, 24)) & (jint) 0xff);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 8, (JreRShift32(u, 16)) & (jint) 0xff);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 8, (JreRShift32(u, 8)) & (jint) 0xff);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 8, u & (jint) 0xff);
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutIntVSWithInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint numBits, jint c) {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, numBits, c);
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_sendMTFValues(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  IOSObjectArray *len = [IOSCharArray newArrayWithDimensions:2 lengths:(jint[]){ LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS, LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE }];
  jint v;
  jint t;
  jint i;
  jint j;
  jint gs;
  jint ge;
  jint totc;
  jint bt;
  jint bc;
  jint iter;
  jint nSelectors = 0;
  jint alphaSize;
  jint minLen;
  jint maxLen;
  jint selCtr;
  jint nGroups;
  alphaSize = self->nInUse_ + 2;
  for (t = 0; t < LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS; t++) {
    for (v = 0; v < alphaSize; v++) {
      *IOSCharArray_GetRef(nil_chk(IOSObjectArray_Get(len, t)), v) = (jchar) LibOrgBouncycastleApacheBzip2CBZip2OutputStream_GREATER_ICOST;
    }
  }
  if (self->nMTF_ <= 0) {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
  }
  if (self->nMTF_ < 200) {
    nGroups = 2;
  }
  else if (self->nMTF_ < 600) {
    nGroups = 3;
  }
  else if (self->nMTF_ < 1200) {
    nGroups = 4;
  }
  else if (self->nMTF_ < 2400) {
    nGroups = 5;
  }
  else {
    nGroups = 6;
  }
  {
    jint nPart;
    jint remF;
    jint tFreq;
    jint aFreq;
    nPart = nGroups;
    remF = self->nMTF_;
    gs = 0;
    while (nPart > 0) {
      tFreq = remF / nPart;
      ge = gs - 1;
      aFreq = 0;
      while (aFreq < tFreq && ge < alphaSize - 1) {
        ge++;
        aFreq += IOSIntArray_Get(nil_chk(self->mtfFreq_), ge);
      }
      if (ge > gs && nPart != nGroups && nPart != 1 && ((nGroups - nPart) % 2 == 1)) {
        aFreq -= IOSIntArray_Get(nil_chk(self->mtfFreq_), ge);
        ge--;
      }
      for (v = 0; v < alphaSize; v++) {
        if (v >= gs && v <= ge) {
          *IOSCharArray_GetRef(nil_chk(IOSObjectArray_Get(len, nPart - 1)), v) = (jchar) LibOrgBouncycastleApacheBzip2CBZip2OutputStream_LESSER_ICOST;
        }
        else {
          *IOSCharArray_GetRef(nil_chk(IOSObjectArray_Get(len, nPart - 1)), v) = (jchar) LibOrgBouncycastleApacheBzip2CBZip2OutputStream_GREATER_ICOST;
        }
      }
      nPart--;
      gs = ge + 1;
      remF -= aFreq;
    }
  }
  IOSObjectArray *rfreq = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS, LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE }];
  IOSIntArray *fave = [IOSIntArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS];
  IOSShortArray *cost = [IOSShortArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS];
  for (iter = 0; iter < LibOrgBouncycastleApacheBzip2BZip2Constants_N_ITERS; iter++) {
    for (t = 0; t < nGroups; t++) {
      *IOSIntArray_GetRef(fave, t) = 0;
    }
    for (t = 0; t < nGroups; t++) {
      for (v = 0; v < alphaSize; v++) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(rfreq, t)), v) = 0;
      }
    }
    nSelectors = 0;
    totc = 0;
    gs = 0;
    while (true) {
      if (gs >= self->nMTF_) {
        break;
      }
      ge = gs + LibOrgBouncycastleApacheBzip2BZip2Constants_G_SIZE - 1;
      if (ge >= self->nMTF_) {
        ge = self->nMTF_ - 1;
      }
      for (t = 0; t < nGroups; t++) {
        *IOSShortArray_GetRef(cost, t) = 0;
      }
      if (nGroups == 6) {
        jshort cost0;
        jshort cost1;
        jshort cost2;
        jshort cost3;
        jshort cost4;
        jshort cost5;
        cost0 = cost1 = cost2 = cost3 = cost4 = cost5 = 0;
        for (i = gs; i <= ge; i++) {
          jshort icv = IOSShortArray_Get(nil_chk(self->szptr_), i);
          cost0 += IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, 0)), icv);
          cost1 += IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, 1)), icv);
          cost2 += IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, 2)), icv);
          cost3 += IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, 3)), icv);
          cost4 += IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, 4)), icv);
          cost5 += IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, 5)), icv);
        }
        *IOSShortArray_GetRef(cost, 0) = cost0;
        *IOSShortArray_GetRef(cost, 1) = cost1;
        *IOSShortArray_GetRef(cost, 2) = cost2;
        *IOSShortArray_GetRef(cost, 3) = cost3;
        *IOSShortArray_GetRef(cost, 4) = cost4;
        *IOSShortArray_GetRef(cost, 5) = cost5;
      }
      else {
        for (i = gs; i <= ge; i++) {
          jshort icv = IOSShortArray_Get(nil_chk(self->szptr_), i);
          for (t = 0; t < nGroups; t++) {
            *IOSShortArray_GetRef(cost, t) += IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), icv);
          }
        }
      }
      bc = 999999999;
      bt = -1;
      for (t = 0; t < nGroups; t++) {
        if (IOSShortArray_Get(cost, t) < bc) {
          bc = IOSShortArray_Get(cost, t);
          bt = t;
        }
      }
      totc += bc;
      (*IOSIntArray_GetRef(fave, bt))++;
      *IOSCharArray_GetRef(nil_chk(self->selector_), nSelectors) = (jchar) bt;
      nSelectors++;
      for (i = gs; i <= ge; i++) {
        (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(rfreq, bt)), IOSShortArray_Get(nil_chk(self->szptr_), i)))++;
      }
      gs = ge + 1;
    }
    for (t = 0; t < nGroups; t++) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_hbMakeCodeLengthsWithCharArray_withIntArray_withInt_withInt_(IOSObjectArray_Get(len, t), IOSObjectArray_Get(rfreq, t), alphaSize, 20);
    }
  }
  rfreq = nil;
  fave = nil;
  cost = nil;
  if (!(nGroups < 8)) {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
  }
  if (!(nSelectors < 32768 && nSelectors <= (2 + (900000 / LibOrgBouncycastleApacheBzip2BZip2Constants_G_SIZE)))) {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
  }
  {
    IOSCharArray *pos = [IOSCharArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS];
    jchar ll_i;
    jchar tmp2;
    jchar tmp;
    for (i = 0; i < nGroups; i++) {
      *IOSCharArray_GetRef(pos, i) = (jchar) i;
    }
    for (i = 0; i < nSelectors; i++) {
      ll_i = IOSCharArray_Get(nil_chk(self->selector_), i);
      j = 0;
      tmp = IOSCharArray_Get(pos, j);
      while (ll_i != tmp) {
        j++;
        tmp2 = tmp;
        tmp = IOSCharArray_Get(pos, j);
        *IOSCharArray_GetRef(pos, j) = tmp2;
      }
      *IOSCharArray_GetRef(pos, 0) = tmp;
      *IOSCharArray_GetRef(nil_chk(self->selectorMtf_), i) = (jchar) j;
    }
  }
  IOSObjectArray *code = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS, LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE }];
  for (t = 0; t < nGroups; t++) {
    minLen = 32;
    maxLen = 0;
    for (i = 0; i < alphaSize; i++) {
      if (IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i) > maxLen) {
        maxLen = IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i);
      }
      if (IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i) < minLen) {
        minLen = IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i);
      }
    }
    if (maxLen > 20) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
    }
    if (minLen < 1) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
    }
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_hbAssignCodesWithIntArray_withCharArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(code, t), IOSObjectArray_Get(len, t), minLen, maxLen, alphaSize);
  }
  {
    IOSBooleanArray *inUse16 = [IOSBooleanArray newArrayWithLength:16];
    for (i = 0; i < 16; i++) {
      *IOSBooleanArray_GetRef(inUse16, i) = false;
      for (j = 0; j < 16; j++) {
        if (IOSBooleanArray_Get(nil_chk(self->inUse_), i * 16 + j)) {
          *IOSBooleanArray_GetRef(inUse16, i) = true;
        }
      }
    }
    for (i = 0; i < 16; i++) {
      if (IOSBooleanArray_Get(inUse16, i)) {
        LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 1);
      }
      else {
        LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 0);
      }
    }
    for (i = 0; i < 16; i++) {
      if (IOSBooleanArray_Get(inUse16, i)) {
        for (j = 0; j < 16; j++) {
          if (IOSBooleanArray_Get(nil_chk(self->inUse_), i * 16 + j)) {
            LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 1);
          }
          else {
            LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 0);
          }
        }
      }
    }
  }
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 3, nGroups);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 15, nSelectors);
  for (i = 0; i < nSelectors; i++) {
    for (j = 0; j < IOSCharArray_Get(nil_chk(self->selectorMtf_), i); j++) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 1);
    }
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 0);
  }
  for (t = 0; t < nGroups; t++) {
    jint curr = IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), 0);
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 5, curr);
    for (i = 0; i < alphaSize; i++) {
      while (curr < IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i)) {
        LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 2, 2);
        curr++;
      }
      while (curr > IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i)) {
        LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 2, 3);
        curr--;
      }
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, 1, 0);
    }
  }
  selCtr = 0;
  gs = 0;
  while (true) {
    if (gs >= self->nMTF_) {
      break;
    }
    ge = gs + LibOrgBouncycastleApacheBzip2BZip2Constants_G_SIZE - 1;
    if (ge >= self->nMTF_) {
      ge = self->nMTF_ - 1;
    }
    for (i = gs; i <= ge; i++) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsWWithInt_withInt_(self, IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, IOSCharArray_Get(nil_chk(self->selector_), selCtr))), IOSShortArray_Get(nil_chk(self->szptr_), i)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(code, IOSCharArray_Get(self->selector_, selCtr))), IOSShortArray_Get(self->szptr_, i)));
    }
    gs = ge + 1;
    selCtr++;
  }
  if (!(selCtr == nSelectors)) {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_moveToFrontCodeAndSend(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_bsPutIntVSWithInt_withInt_(self, 24, self->origPtr_);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_generateMTFValues(self);
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_sendMTFValues(self);
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_simpleSortWithInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint lo, jint hi, jint d) {
  jint i;
  jint j;
  jint h;
  jint bigN;
  jint hp;
  jint v;
  bigN = hi - lo + 1;
  if (bigN < 2) {
    return;
  }
  hp = 0;
  while (IOSIntArray_Get(nil_chk(self->incs_), hp) < bigN) {
    hp++;
  }
  hp--;
  for (; hp >= 0; hp--) {
    h = IOSIntArray_Get(nil_chk(self->incs_), hp);
    i = lo + h;
    while (true) {
      if (i > hi) {
        break;
      }
      v = IOSIntArray_Get(nil_chk(self->zptr_), i);
      j = i;
      while (LibOrgBouncycastleApacheBzip2CBZip2OutputStream_fullGtUWithInt_withInt_(self, IOSIntArray_Get(self->zptr_, j - h) + d, v + d)) {
        *IOSIntArray_GetRef(nil_chk(self->zptr_), j) = IOSIntArray_Get(self->zptr_, j - h);
        j = j - h;
        if (j <= (lo + h - 1)) {
          break;
        }
      }
      *IOSIntArray_GetRef(nil_chk(self->zptr_), j) = v;
      i++;
      if (i > hi) {
        break;
      }
      v = IOSIntArray_Get(self->zptr_, i);
      j = i;
      while (LibOrgBouncycastleApacheBzip2CBZip2OutputStream_fullGtUWithInt_withInt_(self, IOSIntArray_Get(self->zptr_, j - h) + d, v + d)) {
        *IOSIntArray_GetRef(nil_chk(self->zptr_), j) = IOSIntArray_Get(self->zptr_, j - h);
        j = j - h;
        if (j <= (lo + h - 1)) {
          break;
        }
      }
      *IOSIntArray_GetRef(nil_chk(self->zptr_), j) = v;
      i++;
      if (i > hi) {
        break;
      }
      v = IOSIntArray_Get(self->zptr_, i);
      j = i;
      while (LibOrgBouncycastleApacheBzip2CBZip2OutputStream_fullGtUWithInt_withInt_(self, IOSIntArray_Get(self->zptr_, j - h) + d, v + d)) {
        *IOSIntArray_GetRef(nil_chk(self->zptr_), j) = IOSIntArray_Get(self->zptr_, j - h);
        j = j - h;
        if (j <= (lo + h - 1)) {
          break;
        }
      }
      *IOSIntArray_GetRef(nil_chk(self->zptr_), j) = v;
      i++;
      if (self->workDone_ > self->workLimit_ && self->firstAttempt_) {
        return;
      }
    }
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_vswapWithInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint p1, jint p2, jint n) {
  jint temp = 0;
  while (n > 0) {
    temp = IOSIntArray_Get(nil_chk(self->zptr_), p1);
    *IOSIntArray_GetRef(self->zptr_, p1) = IOSIntArray_Get(self->zptr_, p2);
    *IOSIntArray_GetRef(self->zptr_, p2) = temp;
    p1++;
    p2++;
    n--;
  }
}

jchar LibOrgBouncycastleApacheBzip2CBZip2OutputStream_med3WithChar_withChar_withChar_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jchar a, jchar b, jchar c) {
  jchar t;
  if (a > b) {
    t = a;
    a = b;
    b = t;
  }
  if (b > c) {
    t = b;
    b = c;
    c = t;
  }
  if (a > b) {
    b = a;
  }
  return b;
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_qSort3WithInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint loSt, jint hiSt, jint dSt) {
  jint unLo;
  jint unHi;
  jint ltLo;
  jint gtHi;
  jint med;
  jint n;
  jint m;
  jint sp;
  jint lo;
  jint hi;
  jint d;
  IOSObjectArray *stack = [IOSObjectArray newArrayWithLength:LibOrgBouncycastleApacheBzip2CBZip2OutputStream_QSORT_STACK_SIZE type:LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_class_()];
  for (jint count = 0; count < LibOrgBouncycastleApacheBzip2CBZip2OutputStream_QSORT_STACK_SIZE; count++) {
    (void) IOSObjectArray_SetAndConsume(stack, count, new_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_init());
  }
  sp = 0;
  ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->ll_ = loSt;
  ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->hh_ = hiSt;
  ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->dd_ = dSt;
  sp++;
  while (sp > 0) {
    if (sp >= LibOrgBouncycastleApacheBzip2CBZip2OutputStream_QSORT_STACK_SIZE) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
    }
    sp--;
    lo = ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->ll_;
    hi = ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->hh_;
    d = ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->dd_;
    if (hi - lo < LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SMALL_THRESH || d > LibOrgBouncycastleApacheBzip2CBZip2OutputStream_DEPTH_THRESH) {
      LibOrgBouncycastleApacheBzip2CBZip2OutputStream_simpleSortWithInt_withInt_withInt_(self, lo, hi, d);
      if (self->workDone_ > self->workLimit_ && self->firstAttempt_) {
        return;
      }
      continue;
    }
    med = LibOrgBouncycastleApacheBzip2CBZip2OutputStream_med3WithChar_withChar_withChar_(self, IOSCharArray_Get(nil_chk(self->block_), IOSIntArray_Get(nil_chk(self->zptr_), lo) + d + 1), IOSCharArray_Get(self->block_, IOSIntArray_Get(self->zptr_, hi) + d + 1), IOSCharArray_Get(self->block_, IOSIntArray_Get(self->zptr_, JreRShift32((lo + hi), 1)) + d + 1));
    unLo = ltLo = lo;
    unHi = gtHi = hi;
    while (true) {
      while (true) {
        if (unLo > unHi) {
          break;
        }
        n = ((jint) IOSCharArray_Get(nil_chk(self->block_), IOSIntArray_Get(nil_chk(self->zptr_), unLo) + d + 1)) - med;
        if (n == 0) {
          jint temp = 0;
          temp = IOSIntArray_Get(self->zptr_, unLo);
          *IOSIntArray_GetRef(self->zptr_, unLo) = IOSIntArray_Get(self->zptr_, ltLo);
          *IOSIntArray_GetRef(self->zptr_, ltLo) = temp;
          ltLo++;
          unLo++;
          continue;
        }
        if (n > 0) {
          break;
        }
        unLo++;
      }
      while (true) {
        if (unLo > unHi) {
          break;
        }
        n = ((jint) IOSCharArray_Get(nil_chk(self->block_), IOSIntArray_Get(nil_chk(self->zptr_), unHi) + d + 1)) - med;
        if (n == 0) {
          jint temp = 0;
          temp = IOSIntArray_Get(self->zptr_, unHi);
          *IOSIntArray_GetRef(self->zptr_, unHi) = IOSIntArray_Get(self->zptr_, gtHi);
          *IOSIntArray_GetRef(self->zptr_, gtHi) = temp;
          gtHi--;
          unHi--;
          continue;
        }
        if (n < 0) {
          break;
        }
        unHi--;
      }
      if (unLo > unHi) {
        break;
      }
      jint temp = 0;
      temp = IOSIntArray_Get(nil_chk(self->zptr_), unLo);
      *IOSIntArray_GetRef(self->zptr_, unLo) = IOSIntArray_Get(self->zptr_, unHi);
      *IOSIntArray_GetRef(self->zptr_, unHi) = temp;
      unLo++;
      unHi--;
    }
    if (gtHi < ltLo) {
      ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->ll_ = lo;
      ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->hh_ = hi;
      ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->dd_ = d + 1;
      sp++;
      continue;
    }
    n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo) : (unLo - ltLo);
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_vswapWithInt_withInt_withInt_(self, lo, unLo - n, n);
    m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi) : (gtHi - unHi);
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_vswapWithInt_withInt_withInt_(self, unLo, hi - m + 1, m);
    n = lo + unLo - ltLo - 1;
    m = hi - (gtHi - unHi) + 1;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->ll_ = lo;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->hh_ = n;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->dd_ = d;
    sp++;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->ll_ = n + 1;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->hh_ = m - 1;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->dd_ = d + 1;
    sp++;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->ll_ = m;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->hh_ = hi;
    ((LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *) nil_chk(IOSObjectArray_Get(stack, sp)))->dd_ = d;
    sp++;
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_mainSort(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  jint i;
  jint j;
  jint ss;
  jint sb;
  IOSIntArray *runningOrder = [IOSIntArray newArrayWithLength:256];
  IOSIntArray *copy_ = [IOSIntArray newArrayWithLength:256];
  IOSBooleanArray *bigDone = [IOSBooleanArray newArrayWithLength:256];
  jint c1;
  jint c2;
  jint numQSorted;
  for (i = 0; i < LibOrgBouncycastleApacheBzip2BZip2Constants_NUM_OVERSHOOT_BYTES; i++) {
    *IOSCharArray_GetRef(nil_chk(self->block_), self->last_ + i + 2) = IOSCharArray_Get(self->block_, (i % (self->last_ + 1)) + 1);
  }
  for (i = 0; i <= self->last_ + LibOrgBouncycastleApacheBzip2BZip2Constants_NUM_OVERSHOOT_BYTES; i++) {
    *IOSIntArray_GetRef(nil_chk(self->quadrant_), i) = 0;
  }
  *IOSCharArray_GetRef(nil_chk(self->block_), 0) = (jchar) (IOSCharArray_Get(self->block_, self->last_ + 1));
  if (self->last_ < 4000) {
    for (i = 0; i <= self->last_; i++) {
      *IOSIntArray_GetRef(nil_chk(self->zptr_), i) = i;
    }
    self->firstAttempt_ = false;
    self->workDone_ = self->workLimit_ = 0;
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_simpleSortWithInt_withInt_withInt_(self, 0, self->last_, 0);
  }
  else {
    numQSorted = 0;
    for (i = 0; i <= 255; i++) {
      *IOSBooleanArray_GetRef(bigDone, i) = false;
    }
    for (i = 0; i <= 65536; i++) {
      *IOSIntArray_GetRef(nil_chk(self->ftab_), i) = 0;
    }
    c1 = IOSCharArray_Get(self->block_, 0);
    for (i = 0; i <= self->last_; i++) {
      c2 = IOSCharArray_Get(self->block_, i + 1);
      (*IOSIntArray_GetRef(nil_chk(self->ftab_), (JreLShift32(c1, 8)) + c2))++;
      c1 = c2;
    }
    for (i = 1; i <= 65536; i++) {
      *IOSIntArray_GetRef(nil_chk(self->ftab_), i) += IOSIntArray_Get(self->ftab_, i - 1);
    }
    c1 = IOSCharArray_Get(self->block_, 1);
    for (i = 0; i < self->last_; i++) {
      c2 = IOSCharArray_Get(self->block_, i + 2);
      j = (JreLShift32(c1, 8)) + c2;
      c1 = c2;
      (*IOSIntArray_GetRef(nil_chk(self->ftab_), j))--;
      *IOSIntArray_GetRef(nil_chk(self->zptr_), IOSIntArray_Get(self->ftab_, j)) = i;
    }
    j = (JreLShift32((IOSCharArray_Get(self->block_, self->last_ + 1)), 8)) + (IOSCharArray_Get(self->block_, 1));
    (*IOSIntArray_GetRef(nil_chk(self->ftab_), j))--;
    *IOSIntArray_GetRef(nil_chk(self->zptr_), IOSIntArray_Get(self->ftab_, j)) = self->last_;
    for (i = 0; i <= 255; i++) {
      *IOSIntArray_GetRef(runningOrder, i) = i;
    }
    {
      jint vv;
      jint h = 1;
      do {
        h = 3 * h + 1;
      }
      while (h <= 256);
      do {
        h = h / 3;
        for (i = h; i <= 255; i++) {
          vv = IOSIntArray_Get(runningOrder, i);
          j = i;
          while ((IOSIntArray_Get(self->ftab_, JreLShift32(((IOSIntArray_Get(runningOrder, j - h)) + 1), 8)) - IOSIntArray_Get(self->ftab_, JreLShift32((IOSIntArray_Get(runningOrder, j - h)), 8))) > (IOSIntArray_Get(self->ftab_, JreLShift32(((vv) + 1), 8)) - IOSIntArray_Get(self->ftab_, JreLShift32((vv), 8)))) {
            *IOSIntArray_GetRef(runningOrder, j) = IOSIntArray_Get(runningOrder, j - h);
            j = j - h;
            if (j <= (h - 1)) {
              break;
            }
          }
          *IOSIntArray_GetRef(runningOrder, j) = vv;
        }
      }
      while (h != 1);
    }
    for (i = 0; i <= 255; i++) {
      ss = IOSIntArray_Get(runningOrder, i);
      for (j = 0; j <= 255; j++) {
        sb = (JreLShift32(ss, 8)) + j;
        if (!((IOSIntArray_Get(self->ftab_, sb) & LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SETMASK) == LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SETMASK)) {
          jint lo = IOSIntArray_Get(self->ftab_, sb) & LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK;
          jint hi = (IOSIntArray_Get(self->ftab_, sb + 1) & LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK) - 1;
          if (hi > lo) {
            LibOrgBouncycastleApacheBzip2CBZip2OutputStream_qSort3WithInt_withInt_withInt_(self, lo, hi, 2);
            numQSorted += (hi - lo + 1);
            if (self->workDone_ > self->workLimit_ && self->firstAttempt_) {
              return;
            }
          }
          *IOSIntArray_GetRef(nil_chk(self->ftab_), sb) |= LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SETMASK;
        }
      }
      *IOSBooleanArray_GetRef(bigDone, ss) = true;
      if (i < 255) {
        jint bbStart = IOSIntArray_Get(self->ftab_, JreLShift32(ss, 8)) & LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK;
        jint bbSize = (IOSIntArray_Get(self->ftab_, JreLShift32((ss + 1), 8)) & LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK) - bbStart;
        jint shifts = 0;
        while ((JreRShift32(bbSize, shifts)) > 65534) {
          shifts++;
        }
        for (j = 0; j < bbSize; j++) {
          jint a2update = IOSIntArray_Get(nil_chk(self->zptr_), bbStart + j);
          jint qVal = (JreRShift32(j, shifts));
          *IOSIntArray_GetRef(nil_chk(self->quadrant_), a2update) = qVal;
          if (a2update < LibOrgBouncycastleApacheBzip2BZip2Constants_NUM_OVERSHOOT_BYTES) {
            *IOSIntArray_GetRef(self->quadrant_, a2update + self->last_ + 1) = qVal;
          }
        }
        if (!((JreRShift32((bbSize - 1), shifts)) <= 65535)) {
          LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
        }
      }
      for (j = 0; j <= 255; j++) {
        *IOSIntArray_GetRef(copy_, j) = IOSIntArray_Get(nil_chk(self->ftab_), (JreLShift32(j, 8)) + ss) & LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK;
      }
      for (j = IOSIntArray_Get(nil_chk(self->ftab_), JreLShift32(ss, 8)) & LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK; j < (IOSIntArray_Get(self->ftab_, JreLShift32((ss + 1), 8)) & LibOrgBouncycastleApacheBzip2CBZip2OutputStream_CLEARMASK); j++) {
        c1 = IOSCharArray_Get(nil_chk(self->block_), IOSIntArray_Get(nil_chk(self->zptr_), j));
        if (!IOSBooleanArray_Get(bigDone, c1)) {
          *IOSIntArray_GetRef(self->zptr_, IOSIntArray_Get(copy_, c1)) = IOSIntArray_Get(self->zptr_, j) == 0 ? self->last_ : IOSIntArray_Get(self->zptr_, j) - 1;
          (*IOSIntArray_GetRef(copy_, c1))++;
        }
      }
      for (j = 0; j <= 255; j++) {
        *IOSIntArray_GetRef(self->ftab_, (JreLShift32(j, 8)) + ss) |= LibOrgBouncycastleApacheBzip2CBZip2OutputStream_SETMASK;
      }
    }
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_randomiseBlock(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  jint i;
  jint rNToGo = 0;
  jint rTPos = 0;
  for (i = 0; i < 256; i++) {
    *IOSBooleanArray_GetRef(nil_chk(self->inUse_), i) = false;
  }
  for (i = 0; i <= self->last_; i++) {
    if (rNToGo == 0) {
      rNToGo = (jchar) IOSIntArray_Get(nil_chk(JreLoadStatic(LibOrgBouncycastleApacheBzip2BZip2Constants, rNums)), rTPos);
      rTPos++;
      if (rTPos == 512) {
        rTPos = 0;
      }
    }
    rNToGo--;
    *IOSCharArray_GetRef(nil_chk(self->block_), i + 1) ^= ((rNToGo == 1) ? 1 : 0);
    *IOSCharArray_GetRef(self->block_, i + 1) &= (jint) 0xFF;
    *IOSBooleanArray_GetRef(nil_chk(self->inUse_), IOSCharArray_Get(self->block_, i + 1)) = true;
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_doReversibleTransformation(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  jint i;
  self->workLimit_ = self->workFactor_ * self->last_;
  self->workDone_ = 0;
  self->blockRandomised_ = false;
  self->firstAttempt_ = true;
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_mainSort(self);
  if (self->workDone_ > self->workLimit_ && self->firstAttempt_) {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_randomiseBlock(self);
    self->workLimit_ = self->workDone_ = 0;
    self->blockRandomised_ = true;
    self->firstAttempt_ = false;
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_mainSort(self);
  }
  self->origPtr_ = -1;
  for (i = 0; i <= self->last_; i++) {
    if (IOSIntArray_Get(nil_chk(self->zptr_), i) == 0) {
      self->origPtr_ = i;
      break;
    }
  }
  if (self->origPtr_ == -1) {
    LibOrgBouncycastleApacheBzip2CBZip2OutputStream_panic();
  }
}

jboolean LibOrgBouncycastleApacheBzip2CBZip2OutputStream_fullGtUWithInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self, jint i1, jint i2) {
  jint k;
  jchar c1;
  jchar c2;
  jint s1;
  jint s2;
  c1 = IOSCharArray_Get(nil_chk(self->block_), i1 + 1);
  c2 = IOSCharArray_Get(self->block_, i2 + 1);
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1 = IOSCharArray_Get(self->block_, i1 + 1);
  c2 = IOSCharArray_Get(self->block_, i2 + 1);
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1 = IOSCharArray_Get(self->block_, i1 + 1);
  c2 = IOSCharArray_Get(self->block_, i2 + 1);
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1 = IOSCharArray_Get(self->block_, i1 + 1);
  c2 = IOSCharArray_Get(self->block_, i2 + 1);
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1 = IOSCharArray_Get(self->block_, i1 + 1);
  c2 = IOSCharArray_Get(self->block_, i2 + 1);
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1 = IOSCharArray_Get(self->block_, i1 + 1);
  c2 = IOSCharArray_Get(self->block_, i2 + 1);
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  k = self->last_ + 1;
  do {
    c1 = IOSCharArray_Get(self->block_, i1 + 1);
    c2 = IOSCharArray_Get(self->block_, i2 + 1);
    if (c1 != c2) {
      return (c1 > c2);
    }
    s1 = IOSIntArray_Get(nil_chk(self->quadrant_), i1);
    s2 = IOSIntArray_Get(self->quadrant_, i2);
    if (s1 != s2) {
      return (s1 > s2);
    }
    i1++;
    i2++;
    c1 = IOSCharArray_Get(self->block_, i1 + 1);
    c2 = IOSCharArray_Get(self->block_, i2 + 1);
    if (c1 != c2) {
      return (c1 > c2);
    }
    s1 = IOSIntArray_Get(self->quadrant_, i1);
    s2 = IOSIntArray_Get(self->quadrant_, i2);
    if (s1 != s2) {
      return (s1 > s2);
    }
    i1++;
    i2++;
    c1 = IOSCharArray_Get(self->block_, i1 + 1);
    c2 = IOSCharArray_Get(self->block_, i2 + 1);
    if (c1 != c2) {
      return (c1 > c2);
    }
    s1 = IOSIntArray_Get(self->quadrant_, i1);
    s2 = IOSIntArray_Get(self->quadrant_, i2);
    if (s1 != s2) {
      return (s1 > s2);
    }
    i1++;
    i2++;
    c1 = IOSCharArray_Get(self->block_, i1 + 1);
    c2 = IOSCharArray_Get(self->block_, i2 + 1);
    if (c1 != c2) {
      return (c1 > c2);
    }
    s1 = IOSIntArray_Get(self->quadrant_, i1);
    s2 = IOSIntArray_Get(self->quadrant_, i2);
    if (s1 != s2) {
      return (s1 > s2);
    }
    i1++;
    i2++;
    if (i1 > self->last_) {
      i1 -= self->last_;
      i1--;
    }
    if (i2 > self->last_) {
      i2 -= self->last_;
      i2--;
    }
    k -= 4;
    self->workDone_++;
  }
  while (k >= 0);
  return false;
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_allocateCompressStructures(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  jint n = LibOrgBouncycastleApacheBzip2BZip2Constants_baseBlockSize * self->blockSize100k_;
  self->block_ = [IOSCharArray newArrayWithLength:(n + 1 + LibOrgBouncycastleApacheBzip2BZip2Constants_NUM_OVERSHOOT_BYTES)];
  self->quadrant_ = [IOSIntArray newArrayWithLength:(n + LibOrgBouncycastleApacheBzip2BZip2Constants_NUM_OVERSHOOT_BYTES)];
  self->zptr_ = [IOSIntArray newArrayWithLength:n];
  self->ftab_ = [IOSIntArray newArrayWithLength:65537];
  if (self->block_ == nil || self->quadrant_ == nil || self->zptr_ == nil || self->ftab_ == nil) {
  }
  self->szptr_ = [IOSShortArray newArrayWithLength:2 * n];
}

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_generateMTFValues(LibOrgBouncycastleApacheBzip2CBZip2OutputStream *self) {
  IOSCharArray *yy = [IOSCharArray newArrayWithLength:256];
  jint i;
  jint j;
  jchar tmp;
  jchar tmp2;
  jint zPend;
  jint wr;
  jint EOB;
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_makeMaps(self);
  EOB = self->nInUse_ + 1;
  for (i = 0; i <= EOB; i++) {
    *IOSIntArray_GetRef(nil_chk(self->mtfFreq_), i) = 0;
  }
  wr = 0;
  zPend = 0;
  for (i = 0; i < self->nInUse_; i++) {
    *IOSCharArray_GetRef(yy, i) = (jchar) i;
  }
  for (i = 0; i <= self->last_; i++) {
    jchar ll_i;
    ll_i = IOSCharArray_Get(nil_chk(self->unseqToSeq_), IOSCharArray_Get(nil_chk(self->block_), IOSIntArray_Get(nil_chk(self->zptr_), i)));
    j = 0;
    tmp = IOSCharArray_Get(yy, j);
    while (ll_i != tmp) {
      j++;
      tmp2 = tmp;
      tmp = IOSCharArray_Get(yy, j);
      *IOSCharArray_GetRef(yy, j) = tmp2;
    }
    *IOSCharArray_GetRef(yy, 0) = tmp;
    if (j == 0) {
      zPend++;
    }
    else {
      if (zPend > 0) {
        zPend--;
        while (true) {
          switch (zPend % 2) {
            case 0:
            *IOSShortArray_GetRef(nil_chk(self->szptr_), wr) = (jshort) LibOrgBouncycastleApacheBzip2BZip2Constants_RUNA;
            wr++;
            (*IOSIntArray_GetRef(nil_chk(self->mtfFreq_), LibOrgBouncycastleApacheBzip2BZip2Constants_RUNA))++;
            break;
            case 1:
            *IOSShortArray_GetRef(nil_chk(self->szptr_), wr) = (jshort) LibOrgBouncycastleApacheBzip2BZip2Constants_RUNB;
            wr++;
            (*IOSIntArray_GetRef(nil_chk(self->mtfFreq_), LibOrgBouncycastleApacheBzip2BZip2Constants_RUNB))++;
            break;
          }
          if (zPend < 2) {
            break;
          }
          zPend = (zPend - 2) / 2;
        }
        zPend = 0;
      }
      *IOSShortArray_GetRef(nil_chk(self->szptr_), wr) = (jshort) (j + 1);
      wr++;
      (*IOSIntArray_GetRef(nil_chk(self->mtfFreq_), j + 1))++;
    }
  }
  if (zPend > 0) {
    zPend--;
    while (true) {
      switch (zPend % 2) {
        case 0:
        *IOSShortArray_GetRef(nil_chk(self->szptr_), wr) = (jshort) LibOrgBouncycastleApacheBzip2BZip2Constants_RUNA;
        wr++;
        (*IOSIntArray_GetRef(nil_chk(self->mtfFreq_), LibOrgBouncycastleApacheBzip2BZip2Constants_RUNA))++;
        break;
        case 1:
        *IOSShortArray_GetRef(nil_chk(self->szptr_), wr) = (jshort) LibOrgBouncycastleApacheBzip2BZip2Constants_RUNB;
        wr++;
        (*IOSIntArray_GetRef(nil_chk(self->mtfFreq_), LibOrgBouncycastleApacheBzip2BZip2Constants_RUNB))++;
        break;
      }
      if (zPend < 2) {
        break;
      }
      zPend = (zPend - 2) / 2;
    }
  }
  *IOSShortArray_GetRef(nil_chk(self->szptr_), wr) = (jshort) EOB;
  wr++;
  (*IOSIntArray_GetRef(nil_chk(self->mtfFreq_), EOB))++;
  self->nMTF_ = wr;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleApacheBzip2CBZip2OutputStream)

@implementation LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ll_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hh_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleApacheBzip2CBZip2OutputStream;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem = { "StackElem", "lib.org.bouncycastle.apache.bzip2", ptrTable, methods, fields, 7, 0xa, 1, 3, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem;
}

@end

void LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_init(LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *self) {
  NSObject_init(self);
}

LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *new_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem, init)
}

LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem *create_LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleApacheBzip2CBZip2OutputStream_StackElem)
