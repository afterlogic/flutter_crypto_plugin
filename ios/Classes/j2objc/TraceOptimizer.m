//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/tools/TraceOptimizer.java
//

#include "CustomNamedCurves.h"
#include "ECAlgorithms.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECNamedCurveTable.h"
#include "IOSObjectArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "TraceOptimizer.h"
#include "X9ECParameters.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"

@interface LibOrgBouncycastleMathEcToolsTraceOptimizer ()

+ (jint)calculateTraceWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)fe;

+ (JavaUtilArrayList *)enumToListWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)en;

@end

inline JavaMathBigInteger *LibOrgBouncycastleMathEcToolsTraceOptimizer_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleMathEcToolsTraceOptimizer_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcToolsTraceOptimizer, ONE, JavaMathBigInteger *)

inline JavaSecuritySecureRandom *LibOrgBouncycastleMathEcToolsTraceOptimizer_get_R(void);
static JavaSecuritySecureRandom *LibOrgBouncycastleMathEcToolsTraceOptimizer_R;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcToolsTraceOptimizer, R, JavaSecuritySecureRandom *)

__attribute__((unused)) static jint LibOrgBouncycastleMathEcToolsTraceOptimizer_calculateTraceWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECFieldElement *fe);

__attribute__((unused)) static JavaUtilArrayList *LibOrgBouncycastleMathEcToolsTraceOptimizer_enumToListWithJavaUtilEnumeration_(id<JavaUtilEnumeration> en);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleMathEcToolsTraceOptimizer)

@implementation LibOrgBouncycastleMathEcToolsTraceOptimizer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_mainWithNSStringArray_(args);
}

+ (void)printNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9 {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_printNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

+ (void)implPrintNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9 {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_implPrintNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

+ (jint)calculateTraceWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)fe {
  return LibOrgBouncycastleMathEcToolsTraceOptimizer_calculateTraceWithLibOrgBouncycastleMathEcECFieldElement_(fe);
}

+ (JavaUtilArrayList *)enumToListWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)en {
  return LibOrgBouncycastleMathEcToolsTraceOptimizer_enumToListWithJavaUtilEnumeration_(en);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0xa, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(printNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters:);
  methods[3].selector = @selector(implPrintNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters:);
  methods[4].selector = @selector(calculateTraceWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[5].selector = @selector(enumToListWithJavaUtilEnumeration:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "R", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "printNonZeroTraceBits", "LLibOrgBouncycastleAsn1X9X9ECParameters;", "implPrintNonZeroTraceBits", "calculateTrace", "LLibOrgBouncycastleMathEcECFieldElement;", "enumToList", "LJavaUtilEnumeration;", &LibOrgBouncycastleMathEcToolsTraceOptimizer_ONE, &LibOrgBouncycastleMathEcToolsTraceOptimizer_R };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcToolsTraceOptimizer = { "TraceOptimizer", "lib.org.bouncycastle.math.ec.tools", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcToolsTraceOptimizer;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleMathEcToolsTraceOptimizer class]) {
    LibOrgBouncycastleMathEcToolsTraceOptimizer_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    LibOrgBouncycastleMathEcToolsTraceOptimizer_R = new_JavaSecuritySecureRandom_init();
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleMathEcToolsTraceOptimizer)
  }
}

@end

void LibOrgBouncycastleMathEcToolsTraceOptimizer_init(LibOrgBouncycastleMathEcToolsTraceOptimizer *self) {
  NSObject_init(self);
}

LibOrgBouncycastleMathEcToolsTraceOptimizer *new_LibOrgBouncycastleMathEcToolsTraceOptimizer_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcToolsTraceOptimizer, init)
}

LibOrgBouncycastleMathEcToolsTraceOptimizer *create_LibOrgBouncycastleMathEcToolsTraceOptimizer_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcToolsTraceOptimizer, init)
}

void LibOrgBouncycastleMathEcToolsTraceOptimizer_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_initialize();
  id<JavaUtilSortedSet> names = new_JavaUtilTreeSet_initWithJavaUtilCollection_(LibOrgBouncycastleMathEcToolsTraceOptimizer_enumToListWithJavaUtilEnumeration_(LibOrgBouncycastleAsn1X9ECNamedCurveTable_getNames()));
  [names addAllWithJavaUtilCollection:LibOrgBouncycastleMathEcToolsTraceOptimizer_enumToListWithJavaUtilEnumeration_(LibOrgBouncycastleCryptoEcCustomNamedCurves_getNames())];
  id<JavaUtilIterator> it = [names iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *name = (NSString *) cast_chk([it next], [NSString class]);
    LibOrgBouncycastleAsn1X9X9ECParameters *x9 = LibOrgBouncycastleCryptoEcCustomNamedCurves_getByNameWithNSString_(name);
    if (x9 == nil) {
      x9 = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(name);
    }
    if (x9 != nil && LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_([x9 getCurve])) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("$C", name, ':')];
      LibOrgBouncycastleMathEcToolsTraceOptimizer_implPrintNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
    }
  }
}

void LibOrgBouncycastleMathEcToolsTraceOptimizer_printNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *x9) {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_initialize();
  if (!LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Trace only defined over characteristic-2 fields");
  }
  LibOrgBouncycastleMathEcToolsTraceOptimizer_implPrintNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

void LibOrgBouncycastleMathEcToolsTraceOptimizer_implPrintNonZeroTraceBitsWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *x9) {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_initialize();
  LibOrgBouncycastleMathEcECCurve *c = [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve];
  jint m = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getFieldSize];
  JavaUtilArrayList *nonZeroTraceBits = new_JavaUtilArrayList_init();
  {
    for (jint i = 0; i < m; ++i) {
      JavaMathBigInteger *zi = [((JavaMathBigInteger *) nil_chk(LibOrgBouncycastleMathEcToolsTraceOptimizer_ONE)) shiftLeftWithInt:i];
      LibOrgBouncycastleMathEcECFieldElement *fe = [c fromBigIntegerWithJavaMathBigInteger:zi];
      jint tr = LibOrgBouncycastleMathEcToolsTraceOptimizer_calculateTraceWithLibOrgBouncycastleMathEcECFieldElement_(fe);
      if (tr != 0) {
        [nonZeroTraceBits addWithId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(i)];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("CI", ' ', i)];
      }
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  }
  {
    for (jint i = 0; i < 1000; ++i) {
      JavaMathBigInteger *x = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(m, LibOrgBouncycastleMathEcToolsTraceOptimizer_R);
      LibOrgBouncycastleMathEcECFieldElement *fe = [c fromBigIntegerWithJavaMathBigInteger:x];
      jint check = LibOrgBouncycastleMathEcToolsTraceOptimizer_calculateTraceWithLibOrgBouncycastleMathEcECFieldElement_(fe);
      jint tr = 0;
      for (jint j = 0; j < [nonZeroTraceBits size]; ++j) {
        jint bit = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([nonZeroTraceBits getWithInt:j], [JavaLangInteger class])))) intValue];
        if ([x testBitWithInt:bit]) {
          tr ^= 1;
        }
      }
      if (check != tr) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"Optimized-trace sanity check failed");
      }
    }
  }
}

jint LibOrgBouncycastleMathEcToolsTraceOptimizer_calculateTraceWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECFieldElement *fe) {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_initialize();
  jint m = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(fe)) getFieldSize];
  LibOrgBouncycastleMathEcECFieldElement *tr = fe;
  for (jint i = 1; i < m; ++i) {
    fe = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(fe)) square];
    tr = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(tr)) addWithLibOrgBouncycastleMathEcECFieldElement:fe];
  }
  JavaMathBigInteger *b = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(tr)) toBigInteger];
  if ([((JavaMathBigInteger *) nil_chk(b)) bitLength] > 1) {
    @throw new_JavaLangIllegalStateException_init();
  }
  return [b intValue];
}

JavaUtilArrayList *LibOrgBouncycastleMathEcToolsTraceOptimizer_enumToListWithJavaUtilEnumeration_(id<JavaUtilEnumeration> en) {
  LibOrgBouncycastleMathEcToolsTraceOptimizer_initialize();
  JavaUtilArrayList *rv = new_JavaUtilArrayList_init();
  while ([((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]) {
    [rv addWithId:[en nextElement]];
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcToolsTraceOptimizer)
