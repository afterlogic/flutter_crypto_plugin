//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsDHVerifier.java
//

#ifndef DefaultTlsDHVerifier_H
#define DefaultTlsDHVerifier_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsDHVerifier.h"

@class JavaMathBigInteger;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoParamsDHParameters;

@interface LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier : NSObject < LibOrgBouncycastleCryptoTlsTlsDHVerifier > {
 @public
  JavaUtilVector *groups_;
  jint minimumPrimeBits_;
}
@property (readonly, class) jint DEFAULT_MINIMUM_PRIME_BITS NS_SWIFT_NAME(DEFAULT_MINIMUM_PRIME_BITS);
@property (readonly, class) JavaUtilVector *DEFAULT_GROUPS NS_SWIFT_NAME(DEFAULT_GROUPS);

+ (jint)DEFAULT_MINIMUM_PRIME_BITS;

+ (JavaUtilVector *)DEFAULT_GROUPS;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)minimumPrimeBits;

- (instancetype __nonnull)initWithJavaUtilVector:(JavaUtilVector *)groups
                                         withInt:(jint)minimumPrimeBits;

- (jboolean)acceptWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters;

- (jint)getMinimumPrimeBits;

#pragma mark Protected

- (jboolean)areGroupsEqualWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)a
                          withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)b;

- (jboolean)areParametersEqualWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b;

- (jboolean)checkGroupWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters;

- (jboolean)checkMinimumPrimeBitsWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, groups_, JavaUtilVector *)

inline jint LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_get_DEFAULT_MINIMUM_PRIME_BITS(void);
#define LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_MINIMUM_PRIME_BITS 2048
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, DEFAULT_MINIMUM_PRIME_BITS, jint)

inline JavaUtilVector *LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_get_DEFAULT_GROUPS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_DEFAULT_GROUPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier, DEFAULT_GROUPS, JavaUtilVector *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithInt_(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *self, jint minimumPrimeBits);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithInt_(jint minimumPrimeBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithInt_(jint minimumPrimeBits);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithJavaUtilVector_withInt_(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *self, JavaUtilVector *groups, jint minimumPrimeBits);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithJavaUtilVector_withInt_(JavaUtilVector *groups, jint minimumPrimeBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_initWithJavaUtilVector_withInt_(JavaUtilVector *groups, jint minimumPrimeBits);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DefaultTlsDHVerifier_H
