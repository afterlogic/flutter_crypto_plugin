//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSSigner.java
//

#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BDS.h"
#include "CipherParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyedHashFunctions.h"
#include "OTSHashAddress.h"
#include "WOTSPlus.h"
#include "WOTSPlusSignature.h"
#include "XMSSAddress.h"
#include "XMSSNode.h"
#include "XMSSParameters.h"
#include "XMSSPrivateKeyParameters.h"
#include "XMSSPublicKeyParameters.h"
#include "XMSSReducedSignature.h"
#include "XMSSSignature.h"
#include "XMSSSigner.h"
#include "XMSSUtil.h"
#include "XMSSVerifierUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSSSigner () {
 @public
  LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey_;
  LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *nextKeyGenerator_;
  LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *publicKey_;
  LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params_;
  LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *khf_;
  jboolean initSign_;
  jboolean hasGenerated_;
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSSigner, privateKey_, LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSSigner, nextKeyGenerator_, LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSSigner, publicKey_, LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSSigner, params_, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSSigner, khf_, LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *)

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *LibOrgBouncycastlePqcCryptoXmssXMSSSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssXMSSSigner *self, IOSByteArray *messageDigest, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoXmssXMSSSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if (forSigning) {
    initSign_ = true;
    hasGenerated_ = false;
    privateKey_ = (LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters class]);
    nextKeyGenerator_ = privateKey_;
    params_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getParameters];
    khf_ = [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getWOTSPlus])) getKhf];
  }
  else {
    initSign_ = false;
    publicKey_ = (LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters class]);
    params_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) getParameters];
    khf_ = [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getWOTSPlus])) getKhf];
  }
}

- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (initSign_) {
    if (privateKey_ == nil) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"signing key no longer usable");
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"signer not initialized for signature generation");
  }
  if ([((id<JavaUtilList>) nil_chk([((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk([privateKey_ getBDSState])) getAuthenticationPath])) isEmpty]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialized");
  }
  jint index = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getIndex];
  if (!LibOrgBouncycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getHeight], index)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"index out of bounds");
  }
  IOSByteArray *random = [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(khf_)) PRFWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF] withByteArray:LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(index, 32)];
  IOSByteArray *concatenated = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(random, [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getRoot], LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(index, [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]));
  IOSByteArray *messageDigest = [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(khf_)) HMsgWithByteArray:concatenated withByteArray:message];
  LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withOTSAddressWithInt:index])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *wotsPlusSignature = LibOrgBouncycastlePqcCryptoXmssXMSSSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
  LibOrgBouncycastlePqcCryptoXmssXMSSSignature *signature = (LibOrgBouncycastlePqcCryptoXmssXMSSSignature *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSSignature_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSSignature_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSSignature_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withIndexWithInt:index])) withRandomWithByteArray:random])) withWOTSPlusSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:wotsPlusSignature])) withAuthPathWithJavaUtilList:[((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState])) getAuthenticationPath]])) build], [LibOrgBouncycastlePqcCryptoXmssXMSSSignature class]);
  hasGenerated_ = true;
  if (nextKeyGenerator_ != nil) {
    privateKey_ = [nextKeyGenerator_ getNextKey];
    nextKeyGenerator_ = privateKey_;
  }
  else {
    privateKey_ = nil;
  }
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSSignature *) nil_chk(signature)) toByteArray];
}

- (jlong)getUsagesRemaining {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getUsagesRemaining];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  LibOrgBouncycastlePqcCryptoXmssXMSSSignature *sig = [((LibOrgBouncycastlePqcCryptoXmssXMSSSignature_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSSignature_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSignatureWithByteArray:signature])) build];
  jint index = [((LibOrgBouncycastlePqcCryptoXmssXMSSSignature *) nil_chk(sig)) getIndex];
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getWOTSPlus])) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) getPublicSeed]];
  IOSByteArray *concatenated = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_([sig getRandom], [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) getRoot], LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(index, [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]));
  IOSByteArray *messageDigest = [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(khf_)) HMsgWithByteArray:concatenated withByteArray:message];
  jint xmssHeight = [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getHeight];
  jint indexLeaf = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(index, xmssHeight);
  LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withOTSAddressWithInt:index])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  LibOrgBouncycastlePqcCryptoXmssXMSSNode *rootNodeFromSignature = LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getWOTSPlus], xmssHeight, messageDigest, sig, otsHashAddress, indexLeaf);
  return LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(rootNodeFromSignature)) getValue], [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) getRoot]);
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getUpdatedPrivateKey {
  if (hasGenerated_) {
    LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privKey = privateKey_;
    privateKey_ = nil;
    nextKeyGenerator_ = nil;
    return privKey;
  }
  else {
    LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(nextKeyGenerator_)) getNextKey];
    nextKeyGenerator_ = nil;
    return privKey;
  }
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  return LibOrgBouncycastlePqcCryptoXmssXMSSSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(getUsagesRemaining);
  methods[4].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[5].selector = @selector(getUpdatedPrivateKey);
  methods[6].selector = @selector(wotsSignWithByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privateKey_", "LLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextKeyGenerator_", "LLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LLibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "params_", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "khf_", "LLibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initSign_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasGenerated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B", "wotsSign", "[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSSigner = { "XMSSSigner", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 7, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSSigner;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSSigner_init(LibOrgBouncycastlePqcCryptoXmssXMSSSigner *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoXmssXMSSSigner *new_LibOrgBouncycastlePqcCryptoXmssXMSSSigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSSigner, init)
}

LibOrgBouncycastlePqcCryptoXmssXMSSSigner *create_LibOrgBouncycastlePqcCryptoXmssXMSSSigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSSigner, init)
}

LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *LibOrgBouncycastlePqcCryptoXmssXMSSSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssXMSSSigner *self, IOSByteArray *messageDigest, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(self->params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(self->params_)) getWOTSPlus])) importKeysWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(self->params_)) getWOTSPlus])) getWOTSPlusSecretKeyWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getSecretKeySeed] withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
  return [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(self->params_)) getWOTSPlus])) signWithByteArray:messageDigest withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSSigner)
