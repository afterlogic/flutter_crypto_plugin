//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/CryptoServicesPermission.java
//

#ifndef CryptoServicesPermission_H
#define CryptoServicesPermission_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/security/Permission.h"

@interface LibOrgBouncycastleCryptoCryptoServicesPermission : JavaSecurityPermission
@property (readonly, copy, class) NSString *GLOBAL_CONFIG NS_SWIFT_NAME(GLOBAL_CONFIG);
@property (readonly, copy, class) NSString *THREAD_LOCAL_CONFIG NS_SWIFT_NAME(THREAD_LOCAL_CONFIG);
@property (readonly, copy, class) NSString *DEFAULT_RANDOM NS_SWIFT_NAME(DEFAULT_RANDOM);

+ (NSString *)GLOBAL_CONFIG;

+ (NSString *)THREAD_LOCAL_CONFIG;

+ (NSString *)DEFAULT_RANDOM;

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)name;

- (jboolean)isEqual:(id)obj;

- (NSString *)getActions;

- (NSUInteger)hash;

- (jboolean)impliesWithJavaSecurityPermission:(JavaSecurityPermission *)permission;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoCryptoServicesPermission)

inline NSString *LibOrgBouncycastleCryptoCryptoServicesPermission_get_GLOBAL_CONFIG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoCryptoServicesPermission_GLOBAL_CONFIG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoCryptoServicesPermission, GLOBAL_CONFIG, NSString *)

inline NSString *LibOrgBouncycastleCryptoCryptoServicesPermission_get_THREAD_LOCAL_CONFIG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoCryptoServicesPermission_THREAD_LOCAL_CONFIG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoCryptoServicesPermission, THREAD_LOCAL_CONFIG, NSString *)

inline NSString *LibOrgBouncycastleCryptoCryptoServicesPermission_get_DEFAULT_RANDOM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoCryptoServicesPermission_DEFAULT_RANDOM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoCryptoServicesPermission, DEFAULT_RANDOM, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(LibOrgBouncycastleCryptoCryptoServicesPermission *self, NSString *name);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoCryptoServicesPermission *new_LibOrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoCryptoServicesPermission *create_LibOrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoCryptoServicesPermission)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CryptoServicesPermission_H
