//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CipherType.java
//

#ifndef CipherType_H
#define CipherType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsCipherType : NSObject
@property (readonly, class) jint stream NS_SWIFT_NAME(stream);
@property (readonly, class) jint block NS_SWIFT_NAME(block);
@property (readonly, class) jint aead NS_SWIFT_NAME(aead);

+ (jint)stream;

+ (jint)block;

+ (jint)aead;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsCipherType)

inline jint LibOrgBouncycastleCryptoTlsCipherType_get_stream(void);
#define LibOrgBouncycastleCryptoTlsCipherType_stream 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsCipherType, stream, jint)

inline jint LibOrgBouncycastleCryptoTlsCipherType_get_block(void);
#define LibOrgBouncycastleCryptoTlsCipherType_block 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsCipherType, block, jint)

inline jint LibOrgBouncycastleCryptoTlsCipherType_get_aead(void);
#define LibOrgBouncycastleCryptoTlsCipherType_aead 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsCipherType, aead, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCipherType_init(LibOrgBouncycastleCryptoTlsCipherType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCipherType *new_LibOrgBouncycastleCryptoTlsCipherType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCipherType *create_LibOrgBouncycastleCryptoTlsCipherType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCipherType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CipherType_H
