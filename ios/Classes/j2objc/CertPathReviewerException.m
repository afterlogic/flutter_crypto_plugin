//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/x509/CertPathReviewerException.java
//

#include "CertPathReviewerException.h"
#include "ErrorBundle.h"
#include "J2ObjC_source.h"
#include "LocalizedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Throwable.h"
#include "java/security/cert/CertPath.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleX509CertPathReviewerException () {
 @public
  jint index_;
  JavaSecurityCertCertPath *certPath_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509CertPathReviewerException, certPath_, JavaSecurityCertCertPath *)

@implementation LibOrgBouncycastleX509CertPathReviewerException

- (instancetype)initWithLibOrgBouncycastleI18nErrorBundle:(LibOrgBouncycastleI18nErrorBundle *)errorMessage
                                    withJavaLangThrowable:(JavaLangThrowable *)throwable {
  LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(self, errorMessage, throwable);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleI18nErrorBundle:(LibOrgBouncycastleI18nErrorBundle *)errorMessage {
  LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(self, errorMessage);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleI18nErrorBundle:(LibOrgBouncycastleI18nErrorBundle *)errorMessage
                                    withJavaLangThrowable:(JavaLangThrowable *)throwable
                             withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                  withInt:(jint)index {
  LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(self, errorMessage, throwable, certPath, index);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleI18nErrorBundle:(LibOrgBouncycastleI18nErrorBundle *)errorMessage
                             withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                  withInt:(jint)index {
  LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(self, errorMessage, certPath, index);
  return self;
}

- (JavaSecurityCertCertPath *)getCertPath {
  return certPath_;
}

- (jint)getIndex {
  return index_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPath;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleI18nErrorBundle:withJavaLangThrowable:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleI18nErrorBundle:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleI18nErrorBundle:withJavaLangThrowable:withJavaSecurityCertCertPath:withInt:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleI18nErrorBundle:withJavaSecurityCertCertPath:withInt:);
  methods[4].selector = @selector(getCertPath);
  methods[5].selector = @selector(getIndex);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certPath_", "LJavaSecurityCertCertPath;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleI18nErrorBundle;LJavaLangThrowable;", "LLibOrgBouncycastleI18nErrorBundle;", "LLibOrgBouncycastleI18nErrorBundle;LJavaLangThrowable;LJavaSecurityCertCertPath;I", "LLibOrgBouncycastleI18nErrorBundle;LJavaSecurityCertCertPath;I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleX509CertPathReviewerException = { "CertPathReviewerException", "lib.org.bouncycastle.x509", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleX509CertPathReviewerException;
}

@end

void LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(LibOrgBouncycastleX509CertPathReviewerException *self, LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaLangThrowable *throwable) {
  LibOrgBouncycastleI18nLocalizedException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(self, errorMessage, throwable);
  self->index_ = -1;
  self->certPath_ = nil;
}

LibOrgBouncycastleX509CertPathReviewerException *new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaLangThrowable *throwable) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509CertPathReviewerException, initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_, errorMessage, throwable)
}

LibOrgBouncycastleX509CertPathReviewerException *create_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaLangThrowable *throwable) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509CertPathReviewerException, initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_, errorMessage, throwable)
}

void LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(LibOrgBouncycastleX509CertPathReviewerException *self, LibOrgBouncycastleI18nErrorBundle *errorMessage) {
  LibOrgBouncycastleI18nLocalizedException_initWithLibOrgBouncycastleI18nErrorBundle_(self, errorMessage);
  self->index_ = -1;
  self->certPath_ = nil;
}

LibOrgBouncycastleX509CertPathReviewerException *new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(LibOrgBouncycastleI18nErrorBundle *errorMessage) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509CertPathReviewerException, initWithLibOrgBouncycastleI18nErrorBundle_, errorMessage)
}

LibOrgBouncycastleX509CertPathReviewerException *create_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(LibOrgBouncycastleI18nErrorBundle *errorMessage) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509CertPathReviewerException, initWithLibOrgBouncycastleI18nErrorBundle_, errorMessage)
}

void LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(LibOrgBouncycastleX509CertPathReviewerException *self, LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaLangThrowable *throwable, JavaSecurityCertCertPath *certPath, jint index) {
  LibOrgBouncycastleI18nLocalizedException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(self, errorMessage, throwable);
  self->index_ = -1;
  self->certPath_ = nil;
  if (certPath == nil || index == -1) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (index < -1 || (certPath != nil && index >= [((id<JavaUtilList>) nil_chk([certPath getCertificates])) size])) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  self->certPath_ = certPath;
  self->index_ = index;
}

LibOrgBouncycastleX509CertPathReviewerException *new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaLangThrowable *throwable, JavaSecurityCertCertPath *certPath, jint index) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509CertPathReviewerException, initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_, errorMessage, throwable, certPath, index)
}

LibOrgBouncycastleX509CertPathReviewerException *create_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaLangThrowable *throwable, JavaSecurityCertCertPath *certPath, jint index) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509CertPathReviewerException, initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_, errorMessage, throwable, certPath, index)
}

void LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(LibOrgBouncycastleX509CertPathReviewerException *self, LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaSecurityCertCertPath *certPath, jint index) {
  LibOrgBouncycastleI18nLocalizedException_initWithLibOrgBouncycastleI18nErrorBundle_(self, errorMessage);
  self->index_ = -1;
  self->certPath_ = nil;
  if (certPath == nil || index == -1) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (index < -1 || (certPath != nil && index >= [((id<JavaUtilList>) nil_chk([certPath getCertificates])) size])) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  self->certPath_ = certPath;
  self->index_ = index;
}

LibOrgBouncycastleX509CertPathReviewerException *new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaSecurityCertCertPath *certPath, jint index) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509CertPathReviewerException, initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_, errorMessage, certPath, index)
}

LibOrgBouncycastleX509CertPathReviewerException *create_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(LibOrgBouncycastleI18nErrorBundle *errorMessage, JavaSecurityCertCertPath *certPath, jint index) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509CertPathReviewerException, initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_, errorMessage, certPath, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleX509CertPathReviewerException)
