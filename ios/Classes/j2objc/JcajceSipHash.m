//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/JcajceSipHash.java
//

#include "AlgorithmProvider.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JcajceSipHash.h"
#include "SipHash.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24;LLibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48;LLibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash = { "JcajceSipHash", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash, init)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24 = { "Mac24", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsSipHash_init());
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24 *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24, init)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24 *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac24)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48 = { "Mac48", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsSipHash_initWithInt_withInt_(4, 8));
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48 *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48, init)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48 *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mac48)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"JcajceSipHash", 128, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_KeyGen)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"Mac.SIPHASH-2-4" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_PREFIX, @"$Mac24")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Mac.SIPHASH" withNSString:@"SIPHASH-2-4"];
  [provider addAlgorithmWithNSString:@"Mac.SIPHASH-4-8" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_PREFIX, @"$Mac48")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.SIPHASH" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.KeyGenerator.SIPHASH-2-4" withNSString:@"SIPHASH"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.KeyGenerator.SIPHASH-4-8" withNSString:@"SIPHASH"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricJcajceSipHash_Mappings)
