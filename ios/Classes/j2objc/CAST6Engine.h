//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/CAST6Engine.java
//

#ifndef CAST6Engine_H
#define CAST6Engine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CAST5Engine.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;

@interface LibOrgBouncycastleCryptoEnginesCAST6Engine : LibOrgBouncycastleCryptoEnginesCAST5Engine {
 @public
  IOSIntArray *_Kr_CAST6Engine_;
  IOSIntArray *_Km_CAST6Engine_;
  IOSIntArray *_Tr_;
  IOSIntArray *_Tm_;
}
@property (readonly, class) jint ROUNDS NS_SWIFT_NAME(ROUNDS);
@property (readonly, class) jint BLOCK_SIZE NS_SWIFT_NAME(BLOCK_SIZE);

+ (jint)ROUNDS;

+ (jint)BLOCK_SIZE;

#pragma mark Public

- (instancetype __nonnull)init;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (void)reset;

#pragma mark Protected

- (void)CAST_DecipherWithInt:(jint)A
                     withInt:(jint)B
                     withInt:(jint)C
                     withInt:(jint)D
                withIntArray:(IOSIntArray *)result;

- (void)CAST_EncipherWithInt:(jint)A
                     withInt:(jint)B
                     withInt:(jint)C
                     withInt:(jint)D
                withIntArray:(IOSIntArray *)result;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)src
                          withInt:(jint)srcIndex
                    withByteArray:(IOSByteArray *)dst
                          withInt:(jint)dstIndex;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)src
                          withInt:(jint)srcIndex
                    withByteArray:(IOSByteArray *)dst
                          withInt:(jint)dstIndex;

- (void)setKeyWithByteArray:(IOSByteArray *)key;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEnginesCAST6Engine)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesCAST6Engine, _Kr_CAST6Engine_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesCAST6Engine, _Km_CAST6Engine_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesCAST6Engine, _Tr_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesCAST6Engine, _Tm_, IOSIntArray *)

inline jint LibOrgBouncycastleCryptoEnginesCAST6Engine_get_ROUNDS(void);
#define LibOrgBouncycastleCryptoEnginesCAST6Engine_ROUNDS 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesCAST6Engine, ROUNDS, jint)

inline jint LibOrgBouncycastleCryptoEnginesCAST6Engine_get_BLOCK_SIZE(void);
#define LibOrgBouncycastleCryptoEnginesCAST6Engine_BLOCK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesCAST6Engine, BLOCK_SIZE, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesCAST6Engine_init(LibOrgBouncycastleCryptoEnginesCAST6Engine *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesCAST6Engine *new_LibOrgBouncycastleCryptoEnginesCAST6Engine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesCAST6Engine *create_LibOrgBouncycastleCryptoEnginesCAST6Engine_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesCAST6Engine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CAST6Engine_H
