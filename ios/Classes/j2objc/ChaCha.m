//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/ChaCha.java
//

#include "AlgorithmProvider.h"
#include "BaseKeyGenerator.h"
#include "BaseStreamCipher.h"
#include "ChaCha.h"
#include "ChaCha7539Engine.h"
#include "ChaChaEngine.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "IOSClass.h"
#include "IvAlgorithmParameters.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricChaCha ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricChaCha_init(LibOrgBouncycastleJcajceProviderSymmetricChaCha *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricChaCha *new_LibOrgBouncycastleJcajceProviderSymmetricChaCha_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricChaCha *create_LibOrgBouncycastleJcajceProviderSymmetricChaCha_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricChaCha

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricChaCha_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricChaCha_Base;LLibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539;LLibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539;LLibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams;LLibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricChaCha = { "ChaCha", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricChaCha;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricChaCha_init(LibOrgBouncycastleJcajceProviderSymmetricChaCha *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha *new_LibOrgBouncycastleJcajceProviderSymmetricChaCha_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha, init)
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha *create_LibOrgBouncycastleJcajceProviderSymmetricChaCha_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricChaCha)

@implementation LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricChaCha;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base = { "Base", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base_init(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(self, new_LibOrgBouncycastleCryptoEnginesChaChaEngine_init(), 8);
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base *new_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base, init)
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base *create_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base)

@implementation LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricChaCha;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"ChaCha", 128, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricChaCha;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539 = { "Base7539", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539_init(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(self, new_LibOrgBouncycastleCryptoEnginesChaCha7539Engine_init(), 12);
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539 *new_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539, init)
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539 *create_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Base7539)

@implementation LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricChaCha;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539 = { "KeyGen7539", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539_init(LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"ChaCha7539", 256, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539 *new_LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539, init)
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539 *create_LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricChaCha_KeyGen7539)

@implementation LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)engineToString {
  return @"ChaCha7539 IV";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricChaCha;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams = { "AlgParams", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams_init(LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilIvAlgorithmParameters_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams *new_LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams, init)
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams *create_LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricChaCha_AlgParams)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"Cipher.CHACHA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_PREFIX, @"$Base")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.CHACHA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"Cipher.CHACHA7539" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_PREFIX, @"$Base7539")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.CHACHA7539" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_PREFIX, @"$KeyGen7539")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.CHACHA7539" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_PREFIX, @"$AlgParams")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Cipher.CHACHA20" withNSString:@"CHACHA7539"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.KeyGenerator.CHACHA20" withNSString:@"CHACHA7539"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.AlgorithmParameters.CHACHA20" withNSString:@"CHACHA7539"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricChaCha;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricChaCha_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricChaCha_Mappings)
