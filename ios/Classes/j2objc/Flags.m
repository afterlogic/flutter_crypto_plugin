//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/eac/Flags.java
//

#include "Flags.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"

@interface LibOrgBouncycastleAsn1EacFlags_StringJoiner : NSObject {
 @public
  NSString *mSeparator_;
  jboolean First_;
  JavaLangStringBuffer *b_;
}

- (instancetype)initWithNSString:(NSString *)separator;

- (void)addWithNSString:(NSString *)str;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1EacFlags_StringJoiner)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacFlags_StringJoiner, mSeparator_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacFlags_StringJoiner, b_, JavaLangStringBuffer *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacFlags_StringJoiner_initWithNSString_(LibOrgBouncycastleAsn1EacFlags_StringJoiner *self, NSString *separator);

__attribute__((unused)) static LibOrgBouncycastleAsn1EacFlags_StringJoiner *new_LibOrgBouncycastleAsn1EacFlags_StringJoiner_initWithNSString_(NSString *separator) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1EacFlags_StringJoiner *create_LibOrgBouncycastleAsn1EacFlags_StringJoiner_initWithNSString_(NSString *separator);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1EacFlags_StringJoiner)

@implementation LibOrgBouncycastleAsn1EacFlags

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleAsn1EacFlags_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)v {
  LibOrgBouncycastleAsn1EacFlags_initWithInt_(self, v);
  return self;
}

- (void)setWithInt:(jint)flag {
  value_ |= flag;
}

- (jboolean)isSetWithInt:(jint)flag {
  return (value_ & flag) != 0;
}

- (jint)getFlags {
  return value_;
}

- (NSString *)decodeWithJavaUtilHashtable:(JavaUtilHashtable *)decodeMap {
  LibOrgBouncycastleAsn1EacFlags_StringJoiner *joiner = new_LibOrgBouncycastleAsn1EacFlags_StringJoiner_initWithNSString_(@" ");
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(decodeMap)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    JavaLangInteger *i = (JavaLangInteger *) cast_chk([e nextElement], [JavaLangInteger class]);
    if ([self isSetWithInt:[((JavaLangInteger *) nil_chk(i)) intValue]]) {
      [joiner addWithNSString:(NSString *) cast_chk([decodeMap getWithId:i], [NSString class])];
    }
  }
  return [joiner description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(setWithInt:);
  methods[3].selector = @selector(isSetWithInt:);
  methods[4].selector = @selector(getFlags);
  methods[5].selector = @selector(decodeWithJavaUtilHashtable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "set", "isSet", "decode", "LJavaUtilHashtable;", "LLibOrgBouncycastleAsn1EacFlags_StringJoiner;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1EacFlags = { "Flags", "lib.org.bouncycastle.asn1.eac", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, 5, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1EacFlags;
}

@end

void LibOrgBouncycastleAsn1EacFlags_init(LibOrgBouncycastleAsn1EacFlags *self) {
  NSObject_init(self);
  self->value_ = 0;
}

LibOrgBouncycastleAsn1EacFlags *new_LibOrgBouncycastleAsn1EacFlags_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EacFlags, init)
}

LibOrgBouncycastleAsn1EacFlags *create_LibOrgBouncycastleAsn1EacFlags_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EacFlags, init)
}

void LibOrgBouncycastleAsn1EacFlags_initWithInt_(LibOrgBouncycastleAsn1EacFlags *self, jint v) {
  NSObject_init(self);
  self->value_ = 0;
  self->value_ = v;
}

LibOrgBouncycastleAsn1EacFlags *new_LibOrgBouncycastleAsn1EacFlags_initWithInt_(jint v) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EacFlags, initWithInt_, v)
}

LibOrgBouncycastleAsn1EacFlags *create_LibOrgBouncycastleAsn1EacFlags_initWithInt_(jint v) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EacFlags, initWithInt_, v)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1EacFlags)

@implementation LibOrgBouncycastleAsn1EacFlags_StringJoiner

- (instancetype)initWithNSString:(NSString *)separator {
  LibOrgBouncycastleAsn1EacFlags_StringJoiner_initWithNSString_(self, separator);
  return self;
}

- (void)addWithNSString:(NSString *)str {
  if (First_) {
    First_ = false;
  }
  else {
    (void) [((JavaLangStringBuffer *) nil_chk(b_)) appendWithNSString:mSeparator_];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(b_)) appendWithNSString:str];
}

- (NSString *)description {
  return [((JavaLangStringBuffer *) nil_chk(b_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(addWithNSString:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSeparator_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "First_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "b_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "add", "toString", "LLibOrgBouncycastleAsn1EacFlags;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1EacFlags_StringJoiner = { "StringJoiner", "lib.org.bouncycastle.asn1.eac", ptrTable, methods, fields, 7, 0xa, 3, 3, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1EacFlags_StringJoiner;
}

@end

void LibOrgBouncycastleAsn1EacFlags_StringJoiner_initWithNSString_(LibOrgBouncycastleAsn1EacFlags_StringJoiner *self, NSString *separator) {
  NSObject_init(self);
  self->First_ = true;
  self->b_ = new_JavaLangStringBuffer_init();
  self->mSeparator_ = separator;
}

LibOrgBouncycastleAsn1EacFlags_StringJoiner *new_LibOrgBouncycastleAsn1EacFlags_StringJoiner_initWithNSString_(NSString *separator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EacFlags_StringJoiner, initWithNSString_, separator)
}

LibOrgBouncycastleAsn1EacFlags_StringJoiner *create_LibOrgBouncycastleAsn1EacFlags_StringJoiner_initWithNSString_(NSString *separator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EacFlags_StringJoiner, initWithNSString_, separator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1EacFlags_StringJoiner)
