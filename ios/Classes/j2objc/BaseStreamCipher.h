//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/BaseStreamCipher.java
//

#ifndef BaseStreamCipher_H
#define BaseStreamCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BaseWrapCipher.h"
#include "J2ObjC_header.h"
#include "PBE.h"

@class IOSByteArray;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoStreamCipher;
@protocol LibOrgBouncycastleCryptoWrapper;

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher : LibOrgBouncycastleJcajceProviderSymmetricUtilBaseWrapCipher < LibOrgBouncycastleJcajceProviderSymmetricUtilPBE >

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)engine
                                                               withInt:(jint)ivLength;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)engine
                                                               withInt:(jint)ivLength
                                                               withInt:(jint)keySizeInBits
                                                               withInt:(jint)digest;

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen;

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset;

- (jint)engineGetBlockSize;

- (IOSByteArray *)engineGetIV;

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (jint)engineGetOutputSizeWithInt:(jint)inputLen;

- (JavaSecurityAlgorithmParameters *)engineGetParameters;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineSetModeWithNSString:(NSString *)mode;

- (void)engineSetPaddingWithNSString:(NSString *)padding;

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen;

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoWrapper:(id<LibOrgBouncycastleCryptoWrapper>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoWrapper:(id<LibOrgBouncycastleCryptoWrapper>)arg0
                                                          withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *self, id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_(id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *self, id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength, jint keySizeInBits, jint digest);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength, jint keySizeInBits, jint digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher_initWithLibOrgBouncycastleCryptoStreamCipher_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoStreamCipher> engine, jint ivLength, jint keySizeInBits, jint digest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseStreamCipher)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BaseStreamCipher_H
