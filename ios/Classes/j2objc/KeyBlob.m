//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/KeyBlob.java
//

#include "Blob.h"
#include "BlobType.h"
#include "BlobVerifier.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyBlob.h"
#include "KeyBoxByteBuffer.h"
#include "java/io/IOException.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleGpgKeyboxKeyBlob () {
 @public
  jint blobFlags_;
  jint keyNumber_;
  id<JavaUtilList> keyInformation_;
  IOSByteArray *serialNumber_;
  jint numberOfUserIDs_;
  id<JavaUtilList> userIds_;
  jint numberOfSignatures_;
  id<JavaUtilList> expirationTime_;
  jint assignedOwnerTrust_;
  jint allValidity_;
  jlong recheckAfter_;
  jlong newestTimestamp_;
  jlong blobCreatedAt_;
  IOSByteArray *keyBytes_;
  IOSByteArray *reserveBytes_;
  IOSByteArray *checksum_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxKeyBlob, keyInformation_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxKeyBlob, serialNumber_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxKeyBlob, userIds_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxKeyBlob, expirationTime_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxKeyBlob, keyBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxKeyBlob, reserveBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxKeyBlob, checksum_, IOSByteArray *)

@implementation LibOrgBouncycastleGpgKeyboxKeyBlob

- (instancetype)initWithInt:(jint)base
                   withLong:(jlong)length
withLibOrgBouncycastleGpgKeyboxBlobType:(LibOrgBouncycastleGpgKeyboxBlobType *)type
                    withInt:(jint)version_
                    withInt:(jint)blobFlags
                    withInt:(jint)keyNumber
           withJavaUtilList:(id<JavaUtilList>)keyInformation
              withByteArray:(IOSByteArray *)serialNumber
                    withInt:(jint)numberOfUserIDs
           withJavaUtilList:(id<JavaUtilList>)userIds
                    withInt:(jint)numberOfSignatures
           withJavaUtilList:(id<JavaUtilList>)expirationTime
                    withInt:(jint)assignedOwnerTrust
                    withInt:(jint)allValidity
                   withLong:(jlong)recheckAfter
                   withLong:(jlong)newestTimestamp
                   withLong:(jlong)blobCreatedAt
              withByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)reserveBytes
              withByteArray:(IOSByteArray *)checksum {
  LibOrgBouncycastleGpgKeyboxKeyBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_(self, base, length, type, version_, blobFlags, keyNumber, keyInformation, serialNumber, numberOfUserIDs, userIds, numberOfSignatures, expirationTime, assignedOwnerTrust, allValidity, recheckAfter, newestTimestamp, blobCreatedAt, keyBytes, reserveBytes, checksum);
  return self;
}

+ (void)verifyDigestWithInt:(jint)base
                   withLong:(jlong)length
withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer:(LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *)buffer
withLibOrgBouncycastleGpgKeyboxBlobVerifier:(id<LibOrgBouncycastleGpgKeyboxBlobVerifier>)blobVerifier {
  LibOrgBouncycastleGpgKeyboxKeyBlob_verifyDigestWithInt_withLong_withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(base, length, buffer, blobVerifier);
}

- (jint)getBlobFlags {
  return blobFlags_;
}

- (jint)getKeyNumber {
  return keyNumber_;
}

- (id<JavaUtilList>)getKeyInformation {
  return keyInformation_;
}

- (IOSByteArray *)getSerialNumber {
  return serialNumber_;
}

- (jint)getNumberOfUserIDs {
  return numberOfUserIDs_;
}

- (id<JavaUtilList>)getUserIds {
  return userIds_;
}

- (jint)getNumberOfSignatures {
  return numberOfSignatures_;
}

- (id<JavaUtilList>)getExpirationTime {
  return expirationTime_;
}

- (jint)getAssignedOwnerTrust {
  return assignedOwnerTrust_;
}

- (jint)getAllValidity {
  return allValidity_;
}

- (jlong)getRecheckAfter {
  return recheckAfter_;
}

- (jlong)getNewestTimestamp {
  return newestTimestamp_;
}

- (jlong)getBlobCreatedAt {
  return blobCreatedAt_;
}

- (IOSByteArray *)getKeyBytes {
  return keyBytes_;
}

- (IOSByteArray *)getReserveBytes {
  return reserveBytes_;
}

- (IOSByteArray *)getChecksum {
  return checksum_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLong:withLibOrgBouncycastleGpgKeyboxBlobType:withInt:withInt:withInt:withJavaUtilList:withByteArray:withInt:withJavaUtilList:withInt:withJavaUtilList:withInt:withInt:withLong:withLong:withLong:withByteArray:withByteArray:withByteArray:);
  methods[1].selector = @selector(verifyDigestWithInt:withLong:withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer:withLibOrgBouncycastleGpgKeyboxBlobVerifier:);
  methods[2].selector = @selector(getBlobFlags);
  methods[3].selector = @selector(getKeyNumber);
  methods[4].selector = @selector(getKeyInformation);
  methods[5].selector = @selector(getSerialNumber);
  methods[6].selector = @selector(getNumberOfUserIDs);
  methods[7].selector = @selector(getUserIds);
  methods[8].selector = @selector(getNumberOfSignatures);
  methods[9].selector = @selector(getExpirationTime);
  methods[10].selector = @selector(getAssignedOwnerTrust);
  methods[11].selector = @selector(getAllValidity);
  methods[12].selector = @selector(getRecheckAfter);
  methods[13].selector = @selector(getNewestTimestamp);
  methods[14].selector = @selector(getBlobCreatedAt);
  methods[15].selector = @selector(getKeyBytes);
  methods[16].selector = @selector(getReserveBytes);
  methods[17].selector = @selector(getChecksum);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "blobFlags_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyNumber_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyInformation_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "serialNumber_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numberOfUserIDs_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "userIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "numberOfSignatures_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "expirationTime_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "assignedOwnerTrust_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "allValidity_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "recheckAfter_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "newestTimestamp_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blobCreatedAt_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyBytes_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reserveBytes_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "checksum_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLLibOrgBouncycastleGpgKeyboxBlobType;IIILJavaUtilList;[BILJavaUtilList;ILJavaUtilList;IIJJJ[B[B[B", "(IJLlib/org/bouncycastle/gpg/keybox/BlobType;IIILjava/util/List<Llib/org/bouncycastle/gpg/keybox/KeyInformation;>;[BILjava/util/List<Llib/org/bouncycastle/gpg/keybox/UserID;>;ILjava/util/List<Ljava/lang/Long;>;IIJJJ[B[B[B)V", "verifyDigest", "IJLLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer;LLibOrgBouncycastleGpgKeyboxBlobVerifier;", "LJavaIoIOException;", "()Ljava/util/List<Llib/org/bouncycastle/gpg/keybox/KeyInformation;>;", "()Ljava/util/List<Llib/org/bouncycastle/gpg/keybox/UserID;>;", "()Ljava/util/List<Ljava/lang/Long;>;", "Ljava/util/List<Llib/org/bouncycastle/gpg/keybox/KeyInformation;>;", "Ljava/util/List<Llib/org/bouncycastle/gpg/keybox/UserID;>;", "Ljava/util/List<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleGpgKeyboxKeyBlob = { "KeyBlob", "lib.org.bouncycastle.gpg.keybox", ptrTable, methods, fields, 7, 0x1, 18, 16, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleGpgKeyboxKeyBlob;
}

@end

void LibOrgBouncycastleGpgKeyboxKeyBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_(LibOrgBouncycastleGpgKeyboxKeyBlob *self, jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *checksum) {
  LibOrgBouncycastleGpgKeyboxBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_(self, base, length, type, version_);
  self->blobFlags_ = blobFlags;
  self->keyNumber_ = keyNumber;
  self->keyInformation_ = keyInformation;
  self->serialNumber_ = serialNumber;
  self->numberOfUserIDs_ = numberOfUserIDs;
  self->userIds_ = userIds;
  self->numberOfSignatures_ = numberOfSignatures;
  self->expirationTime_ = expirationTime;
  self->assignedOwnerTrust_ = assignedOwnerTrust;
  self->allValidity_ = allValidity;
  self->recheckAfter_ = recheckAfter;
  self->newestTimestamp_ = newestTimestamp;
  self->blobCreatedAt_ = blobCreatedAt;
  self->keyBytes_ = keyBytes;
  self->reserveBytes_ = reserveBytes;
  self->checksum_ = checksum;
}

LibOrgBouncycastleGpgKeyboxKeyBlob *new_LibOrgBouncycastleGpgKeyboxKeyBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *checksum) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleGpgKeyboxKeyBlob, initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_, base, length, type, version_, blobFlags, keyNumber, keyInformation, serialNumber, numberOfUserIDs, userIds, numberOfSignatures, expirationTime, assignedOwnerTrust, allValidity, recheckAfter, newestTimestamp, blobCreatedAt, keyBytes, reserveBytes, checksum)
}

LibOrgBouncycastleGpgKeyboxKeyBlob *create_LibOrgBouncycastleGpgKeyboxKeyBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *checksum) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleGpgKeyboxKeyBlob, initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_, base, length, type, version_, blobFlags, keyNumber, keyInformation, serialNumber, numberOfUserIDs, userIds, numberOfSignatures, expirationTime, assignedOwnerTrust, allValidity, recheckAfter, newestTimestamp, blobCreatedAt, keyBytes, reserveBytes, checksum)
}

void LibOrgBouncycastleGpgKeyboxKeyBlob_verifyDigestWithInt_withLong_withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *buffer, id<LibOrgBouncycastleGpgKeyboxBlobVerifier> blobVerifier) {
  LibOrgBouncycastleGpgKeyboxKeyBlob_initialize();
  IOSByteArray *blobData = [((LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *) nil_chk(buffer)) rangeOfWithInt:base withInt:(jint) (base + length - 20)];
  IOSByteArray *blobDigest = [buffer rangeOfWithInt:(jint) (base + length - 20) withInt:(jint) (base + length)];
  if (![((id<LibOrgBouncycastleGpgKeyboxBlobVerifier>) nil_chk(blobVerifier)) isMatchedWithByteArray:blobData withByteArray:blobDigest]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$", @"Blob with base offset of ", base, @" has incorrect digest."));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleGpgKeyboxKeyBlob)
