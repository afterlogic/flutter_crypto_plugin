//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/eac/CertificateBody.java
//

#include "ASN1ApplicationSpecific.h"
#include "ASN1EncodableVector.h"
#include "ASN1InputStream.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "BERTags.h"
#include "CertificateBody.h"
#include "CertificateHolderAuthorization.h"
#include "CertificateHolderReference.h"
#include "CertificationAuthorityReference.h"
#include "DERApplicationSpecific.h"
#include "DEROctetString.h"
#include "EACTags.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PackedDate.h"
#include "PublicKeyDataObject.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleAsn1EacCertificateBody () {
 @public
  LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateProfileIdentifier_;
  LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificationAuthorityReference_;
  LibOrgBouncycastleAsn1EacPublicKeyDataObject *publicKey_;
  LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateHolderReference_;
  LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *certificateHolderAuthorization_;
  LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateEffectiveDate_;
  LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateExpirationDate_;
  jint certificateType_;
}

- (void)setIso7816CertificateBodyWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)appSpe;

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)obj;

- (LibOrgBouncycastleAsn1ASN1Primitive *)profileToASN1Object;

- (void)setCertificateProfileIdentifierWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)certificateProfileIdentifier;

- (void)setCertificateHolderReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)certificateHolderReference;

- (void)setCertificationAuthorityReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)certificationAuthorityReference;

- (void)setPublicKeyWithLibOrgBouncycastleAsn1EacPublicKeyDataObject:(LibOrgBouncycastleAsn1EacPublicKeyDataObject *)publicKey;

- (LibOrgBouncycastleAsn1ASN1Primitive *)requestToASN1Object;

- (void)setCertificateEffectiveDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)ced;

- (void)setCertificateExpirationDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)ced;

- (void)setCertificateHolderAuthorizationWithLibOrgBouncycastleAsn1EacCertificateHolderAuthorization:(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *)cha;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateBody, certificateProfileIdentifier_, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateBody, certificationAuthorityReference_, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateBody, publicKey_, LibOrgBouncycastleAsn1EacPublicKeyDataObject *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateBody, certificateHolderReference_, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateBody, certificateHolderAuthorization_, LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateBody, certificateEffectiveDate_, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateBody, certificateExpirationDate_, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)

inline jint LibOrgBouncycastleAsn1EacCertificateBody_get_CPI(void);
#define LibOrgBouncycastleAsn1EacCertificateBody_CPI 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateBody, CPI, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateBody_get_CAR(void);
#define LibOrgBouncycastleAsn1EacCertificateBody_CAR 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateBody, CAR, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateBody_get_PK(void);
#define LibOrgBouncycastleAsn1EacCertificateBody_PK 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateBody, PK, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateBody_get_CHR(void);
#define LibOrgBouncycastleAsn1EacCertificateBody_CHR 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateBody, CHR, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateBody_get_CHA(void);
#define LibOrgBouncycastleAsn1EacCertificateBody_CHA 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateBody, CHA, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateBody_get_CEfD(void);
#define LibOrgBouncycastleAsn1EacCertificateBody_CEfD 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateBody, CEfD, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateBody_get_CExD(void);
#define LibOrgBouncycastleAsn1EacCertificateBody_CExD 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateBody, CExD, jint)

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_setIso7816CertificateBodyWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *appSpe);

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *obj);

__attribute__((unused)) static LibOrgBouncycastleAsn1EacCertificateBody *new_LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *obj) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1EacCertificateBody *create_LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *obj);

__attribute__((unused)) static LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleAsn1EacCertificateBody_profileToASN1Object(LibOrgBouncycastleAsn1EacCertificateBody *self);

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateProfileIdentifier);

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateHolderReference);

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificationAuthorityReference);

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithLibOrgBouncycastleAsn1EacPublicKeyDataObject_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1EacPublicKeyDataObject *publicKey);

__attribute__((unused)) static LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleAsn1EacCertificateBody_requestToASN1Object(LibOrgBouncycastleAsn1EacCertificateBody *self);

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *ced);

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *ced);

__attribute__((unused)) static void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *cha);

@implementation LibOrgBouncycastleAsn1EacCertificateBody

+ (jint)profileType {
  return LibOrgBouncycastleAsn1EacCertificateBody_profileType;
}

+ (jint)requestType {
  return LibOrgBouncycastleAsn1EacCertificateBody_requestType;
}

- (void)setIso7816CertificateBodyWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)appSpe {
  LibOrgBouncycastleAsn1EacCertificateBody_setIso7816CertificateBodyWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, appSpe);
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)certificateProfileIdentifier
         withLibOrgBouncycastleAsn1EacCertificationAuthorityReference:(LibOrgBouncycastleAsn1EacCertificationAuthorityReference *)certificationAuthorityReference
                     withLibOrgBouncycastleAsn1EacPublicKeyDataObject:(LibOrgBouncycastleAsn1EacPublicKeyDataObject *)publicKey
              withLibOrgBouncycastleAsn1EacCertificateHolderReference:(LibOrgBouncycastleAsn1EacCertificateHolderReference *)certificateHolderReference
          withLibOrgBouncycastleAsn1EacCertificateHolderAuthorization:(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *)certificateHolderAuthorization
                              withLibOrgBouncycastleAsn1EacPackedDate:(LibOrgBouncycastleAsn1EacPackedDate *)certificateEffectiveDate
                              withLibOrgBouncycastleAsn1EacPackedDate:(LibOrgBouncycastleAsn1EacPackedDate *)certificateExpirationDate {
  LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_withLibOrgBouncycastleAsn1EacCertificationAuthorityReference_withLibOrgBouncycastleAsn1EacPublicKeyDataObject_withLibOrgBouncycastleAsn1EacCertificateHolderReference_withLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_withLibOrgBouncycastleAsn1EacPackedDate_withLibOrgBouncycastleAsn1EacPackedDate_(self, certificateProfileIdentifier, certificationAuthorityReference, publicKey, certificateHolderReference, certificateHolderAuthorization, certificateEffectiveDate, certificateExpirationDate);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)obj {
  LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, obj);
  return self;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)profileToASN1Object {
  return LibOrgBouncycastleAsn1EacCertificateBody_profileToASN1Object(self);
}

- (void)setCertificateProfileIdentifierWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)certificateProfileIdentifier {
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, certificateProfileIdentifier);
}

- (void)setCertificateHolderReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)certificateHolderReference {
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, certificateHolderReference);
}

- (void)setCertificationAuthorityReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)certificationAuthorityReference {
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, certificationAuthorityReference);
}

- (void)setPublicKeyWithLibOrgBouncycastleAsn1EacPublicKeyDataObject:(LibOrgBouncycastleAsn1EacPublicKeyDataObject *)publicKey {
  LibOrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithLibOrgBouncycastleAsn1EacPublicKeyDataObject_(self, publicKey);
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)requestToASN1Object {
  return LibOrgBouncycastleAsn1EacCertificateBody_requestToASN1Object(self);
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  @try {
    if (certificateType_ == LibOrgBouncycastleAsn1EacCertificateBody_profileType) {
      return LibOrgBouncycastleAsn1EacCertificateBody_profileToASN1Object(self);
    }
    if (certificateType_ == LibOrgBouncycastleAsn1EacCertificateBody_requestType) {
      return LibOrgBouncycastleAsn1EacCertificateBody_requestToASN1Object(self);
    }
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
  return nil;
}

- (jint)getCertificateType {
  return certificateType_;
}

+ (LibOrgBouncycastleAsn1EacCertificateBody *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1EacCertificateBody_getInstanceWithId_(obj);
}

- (LibOrgBouncycastleAsn1EacPackedDate *)getCertificateEffectiveDate {
  if ((self->certificateType_ & LibOrgBouncycastleAsn1EacCertificateBody_CEfD) == LibOrgBouncycastleAsn1EacCertificateBody_CEfD) {
    return new_LibOrgBouncycastleAsn1EacPackedDate_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(certificateEffectiveDate_)) getContents]);
  }
  return nil;
}

- (void)setCertificateEffectiveDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)ced {
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, ced);
}

- (LibOrgBouncycastleAsn1EacPackedDate *)getCertificateExpirationDate {
  if ((self->certificateType_ & LibOrgBouncycastleAsn1EacCertificateBody_CExD) == LibOrgBouncycastleAsn1EacCertificateBody_CExD) {
    return new_LibOrgBouncycastleAsn1EacPackedDate_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(certificateExpirationDate_)) getContents]);
  }
  @throw new_JavaIoIOException_initWithNSString_(@"certificate Expiration Date not set");
}

- (void)setCertificateExpirationDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)ced {
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, ced);
}

- (LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *)getCertificateHolderAuthorization {
  if ((self->certificateType_ & LibOrgBouncycastleAsn1EacCertificateBody_CHA) == LibOrgBouncycastleAsn1EacCertificateBody_CHA) {
    return certificateHolderAuthorization_;
  }
  @throw new_JavaIoIOException_initWithNSString_(@"X509Certificate Holder Authorisation not set");
}

- (void)setCertificateHolderAuthorizationWithLibOrgBouncycastleAsn1EacCertificateHolderAuthorization:(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *)cha {
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_(self, cha);
}

- (LibOrgBouncycastleAsn1EacCertificateHolderReference *)getCertificateHolderReference {
  return new_LibOrgBouncycastleAsn1EacCertificateHolderReference_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(certificateHolderReference_)) getContents]);
}

- (LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)getCertificateProfileIdentifier {
  return certificateProfileIdentifier_;
}

- (LibOrgBouncycastleAsn1EacCertificationAuthorityReference *)getCertificationAuthorityReference {
  if ((self->certificateType_ & LibOrgBouncycastleAsn1EacCertificateBody_CAR) == LibOrgBouncycastleAsn1EacCertificateBody_CAR) {
    return new_LibOrgBouncycastleAsn1EacCertificationAuthorityReference_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(certificationAuthorityReference_)) getContents]);
  }
  @throw new_JavaIoIOException_initWithNSString_(@"Certification authority reference not set");
}

- (LibOrgBouncycastleAsn1EacPublicKeyDataObject *)getPublicKey {
  return publicKey_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1EacCertificateBody;", 0x9, 10, 11, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1EacPackedDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 1, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1EacPackedDate;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 1, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1EacCertificateHolderAuthorization;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1EacCertificateHolderReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1ApplicationSpecific;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1EacCertificationAuthorityReference;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1EacPublicKeyDataObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setIso7816CertificateBodyWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:withLibOrgBouncycastleAsn1EacCertificationAuthorityReference:withLibOrgBouncycastleAsn1EacPublicKeyDataObject:withLibOrgBouncycastleAsn1EacCertificateHolderReference:withLibOrgBouncycastleAsn1EacCertificateHolderAuthorization:withLibOrgBouncycastleAsn1EacPackedDate:withLibOrgBouncycastleAsn1EacPackedDate:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:);
  methods[3].selector = @selector(profileToASN1Object);
  methods[4].selector = @selector(setCertificateProfileIdentifierWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:);
  methods[5].selector = @selector(setCertificateHolderReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:);
  methods[6].selector = @selector(setCertificationAuthorityReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:);
  methods[7].selector = @selector(setPublicKeyWithLibOrgBouncycastleAsn1EacPublicKeyDataObject:);
  methods[8].selector = @selector(requestToASN1Object);
  methods[9].selector = @selector(toASN1Primitive);
  methods[10].selector = @selector(getCertificateType);
  methods[11].selector = @selector(getInstanceWithId:);
  methods[12].selector = @selector(getCertificateEffectiveDate);
  methods[13].selector = @selector(setCertificateEffectiveDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:);
  methods[14].selector = @selector(getCertificateExpirationDate);
  methods[15].selector = @selector(setCertificateExpirationDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:);
  methods[16].selector = @selector(getCertificateHolderAuthorization);
  methods[17].selector = @selector(setCertificateHolderAuthorizationWithLibOrgBouncycastleAsn1EacCertificateHolderAuthorization:);
  methods[18].selector = @selector(getCertificateHolderReference);
  methods[19].selector = @selector(getCertificateProfileIdentifier);
  methods[20].selector = @selector(getCertificationAuthorityReference);
  methods[21].selector = @selector(getPublicKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seq_", "LLibOrgBouncycastleAsn1ASN1InputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "certificateProfileIdentifier_", "LLibOrgBouncycastleAsn1ASN1ApplicationSpecific;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificationAuthorityReference_", "LLibOrgBouncycastleAsn1ASN1ApplicationSpecific;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LLibOrgBouncycastleAsn1EacPublicKeyDataObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificateHolderReference_", "LLibOrgBouncycastleAsn1ASN1ApplicationSpecific;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificateHolderAuthorization_", "LLibOrgBouncycastleAsn1EacCertificateHolderAuthorization;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificateEffectiveDate_", "LLibOrgBouncycastleAsn1ASN1ApplicationSpecific;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificateExpirationDate_", "LLibOrgBouncycastleAsn1ASN1ApplicationSpecific;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificateType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CPI", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_CPI, 0x1a, -1, -1, -1, -1 },
    { "CAR", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_CAR, 0x1a, -1, -1, -1, -1 },
    { "PK", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_PK, 0x1a, -1, -1, -1, -1 },
    { "CHR", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_CHR, 0x1a, -1, -1, -1, -1 },
    { "CHA", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_CHA, 0x1a, -1, -1, -1, -1 },
    { "CEfD", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_CEfD, 0x1a, -1, -1, -1, -1 },
    { "CExD", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_CExD, 0x1a, -1, -1, -1, -1 },
    { "profileType", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_profileType, 0x19, -1, -1, -1, -1 },
    { "requestType", "I", .constantValue.asInt = LibOrgBouncycastleAsn1EacCertificateBody_requestType, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setIso7816CertificateBody", "LLibOrgBouncycastleAsn1ASN1ApplicationSpecific;", "LJavaIoIOException;", "LLibOrgBouncycastleAsn1ASN1ApplicationSpecific;LLibOrgBouncycastleAsn1EacCertificationAuthorityReference;LLibOrgBouncycastleAsn1EacPublicKeyDataObject;LLibOrgBouncycastleAsn1EacCertificateHolderReference;LLibOrgBouncycastleAsn1EacCertificateHolderAuthorization;LLibOrgBouncycastleAsn1EacPackedDate;LLibOrgBouncycastleAsn1EacPackedDate;", "setCertificateProfileIdentifier", "LJavaLangIllegalArgumentException;", "setCertificateHolderReference", "setCertificationAuthorityReference", "setPublicKey", "LLibOrgBouncycastleAsn1EacPublicKeyDataObject;", "getInstance", "LNSObject;", "setCertificateEffectiveDate", "setCertificateExpirationDate", "setCertificateHolderAuthorization", "LLibOrgBouncycastleAsn1EacCertificateHolderAuthorization;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1EacCertificateBody = { "CertificateBody", "lib.org.bouncycastle.asn1.eac", ptrTable, methods, fields, 7, 0x1, 22, 18, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1EacCertificateBody;
}

@end

void LibOrgBouncycastleAsn1EacCertificateBody_setIso7816CertificateBodyWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *appSpe) {
  IOSByteArray *content;
  if ([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(appSpe)) getApplicationTag] == LibOrgBouncycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE) {
    content = [appSpe getContents];
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"Bad tag : not an iso7816 CERTIFICATE_CONTENT_TEMPLATE");
  }
  LibOrgBouncycastleAsn1ASN1InputStream *aIS = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(content);
  LibOrgBouncycastleAsn1ASN1Primitive *obj;
  while ((obj = [aIS readObject]) != nil) {
    LibOrgBouncycastleAsn1ASN1ApplicationSpecific *aSpe;
    if ([obj isKindOfClass:[LibOrgBouncycastleAsn1ASN1ApplicationSpecific class]]) {
      aSpe = (LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) obj;
    }
    else {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I@", @"Not a valid iso7816 content : not a ASN1ApplicationSpecific Object :", LibOrgBouncycastleAsn1EacEACTags_encodeTagWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(appSpe), [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk(obj)) java_getClass]));
    }
    switch ([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(aSpe)) getApplicationTag]) {
      case LibOrgBouncycastleAsn1EacEACTags_INTERCHANGE_PROFILE:
      LibOrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, aSpe);
      break;
      case LibOrgBouncycastleAsn1EacEACTags_ISSUER_IDENTIFICATION_NUMBER:
      LibOrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, aSpe);
      break;
      case LibOrgBouncycastleAsn1EacEACTags_CARDHOLDER_PUBLIC_KEY_TEMPLATE:
      LibOrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithLibOrgBouncycastleAsn1EacPublicKeyDataObject_(self, LibOrgBouncycastleAsn1EacPublicKeyDataObject_getInstanceWithId_([aSpe getObjectWithInt:LibOrgBouncycastleAsn1BERTags_SEQUENCE]));
      break;
      case LibOrgBouncycastleAsn1EacEACTags_CARDHOLDER_NAME:
      LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, aSpe);
      break;
      case LibOrgBouncycastleAsn1EacEACTags_CERTIFICATE_HOLDER_AUTHORIZATION_TEMPLATE:
      LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_(self, new_LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(aSpe));
      break;
      case LibOrgBouncycastleAsn1EacEACTags_APPLICATION_EFFECTIVE_DATE:
      LibOrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, aSpe);
      break;
      case LibOrgBouncycastleAsn1EacEACTags_APPLICATION_EXPIRATION_DATE:
      LibOrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, aSpe);
      break;
      default:
      self->certificateType_ = 0;
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Not a valid iso7816 ASN1ApplicationSpecific tag ", [aSpe getApplicationTag]));
    }
  }
  [aIS close];
}

void LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_withLibOrgBouncycastleAsn1EacCertificationAuthorityReference_withLibOrgBouncycastleAsn1EacPublicKeyDataObject_withLibOrgBouncycastleAsn1EacCertificateHolderReference_withLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_withLibOrgBouncycastleAsn1EacPackedDate_withLibOrgBouncycastleAsn1EacPackedDate_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateProfileIdentifier, LibOrgBouncycastleAsn1EacCertificationAuthorityReference *certificationAuthorityReference, LibOrgBouncycastleAsn1EacPublicKeyDataObject *publicKey, LibOrgBouncycastleAsn1EacCertificateHolderReference *certificateHolderReference, LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *certificateHolderAuthorization, LibOrgBouncycastleAsn1EacPackedDate *certificateEffectiveDate, LibOrgBouncycastleAsn1EacPackedDate *certificateExpirationDate) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->certificateType_ = 0;
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, certificateProfileIdentifier);
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, new_LibOrgBouncycastleAsn1DERApplicationSpecific_initWithInt_withByteArray_(LibOrgBouncycastleAsn1EacEACTags_ISSUER_IDENTIFICATION_NUMBER, [((LibOrgBouncycastleAsn1EacCertificationAuthorityReference *) nil_chk(certificationAuthorityReference)) getEncoded]));
  LibOrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithLibOrgBouncycastleAsn1EacPublicKeyDataObject_(self, publicKey);
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, new_LibOrgBouncycastleAsn1DERApplicationSpecific_initWithInt_withByteArray_(LibOrgBouncycastleAsn1EacEACTags_CARDHOLDER_NAME, [((LibOrgBouncycastleAsn1EacCertificateHolderReference *) nil_chk(certificateHolderReference)) getEncoded]));
  LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_(self, certificateHolderAuthorization);
  @try {
    LibOrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, new_LibOrgBouncycastleAsn1DERApplicationSpecific_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(false, LibOrgBouncycastleAsn1EacEACTags_APPLICATION_EFFECTIVE_DATE, new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_([((LibOrgBouncycastleAsn1EacPackedDate *) nil_chk(certificateEffectiveDate)) getEncoding])));
    LibOrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, new_LibOrgBouncycastleAsn1DERApplicationSpecific_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(false, LibOrgBouncycastleAsn1EacEACTags_APPLICATION_EXPIRATION_DATE, new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_([((LibOrgBouncycastleAsn1EacPackedDate *) nil_chk(certificateExpirationDate)) getEncoding])));
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to encode dates: ", [e getMessage]));
  }
}

LibOrgBouncycastleAsn1EacCertificateBody *new_LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_withLibOrgBouncycastleAsn1EacCertificationAuthorityReference_withLibOrgBouncycastleAsn1EacPublicKeyDataObject_withLibOrgBouncycastleAsn1EacCertificateHolderReference_withLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_withLibOrgBouncycastleAsn1EacPackedDate_withLibOrgBouncycastleAsn1EacPackedDate_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateProfileIdentifier, LibOrgBouncycastleAsn1EacCertificationAuthorityReference *certificationAuthorityReference, LibOrgBouncycastleAsn1EacPublicKeyDataObject *publicKey, LibOrgBouncycastleAsn1EacCertificateHolderReference *certificateHolderReference, LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *certificateHolderAuthorization, LibOrgBouncycastleAsn1EacPackedDate *certificateEffectiveDate, LibOrgBouncycastleAsn1EacPackedDate *certificateExpirationDate) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EacCertificateBody, initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_withLibOrgBouncycastleAsn1EacCertificationAuthorityReference_withLibOrgBouncycastleAsn1EacPublicKeyDataObject_withLibOrgBouncycastleAsn1EacCertificateHolderReference_withLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_withLibOrgBouncycastleAsn1EacPackedDate_withLibOrgBouncycastleAsn1EacPackedDate_, certificateProfileIdentifier, certificationAuthorityReference, publicKey, certificateHolderReference, certificateHolderAuthorization, certificateEffectiveDate, certificateExpirationDate)
}

LibOrgBouncycastleAsn1EacCertificateBody *create_LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_withLibOrgBouncycastleAsn1EacCertificationAuthorityReference_withLibOrgBouncycastleAsn1EacPublicKeyDataObject_withLibOrgBouncycastleAsn1EacCertificateHolderReference_withLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_withLibOrgBouncycastleAsn1EacPackedDate_withLibOrgBouncycastleAsn1EacPackedDate_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateProfileIdentifier, LibOrgBouncycastleAsn1EacCertificationAuthorityReference *certificationAuthorityReference, LibOrgBouncycastleAsn1EacPublicKeyDataObject *publicKey, LibOrgBouncycastleAsn1EacCertificateHolderReference *certificateHolderReference, LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *certificateHolderAuthorization, LibOrgBouncycastleAsn1EacPackedDate *certificateEffectiveDate, LibOrgBouncycastleAsn1EacPackedDate *certificateExpirationDate) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EacCertificateBody, initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_withLibOrgBouncycastleAsn1EacCertificationAuthorityReference_withLibOrgBouncycastleAsn1EacPublicKeyDataObject_withLibOrgBouncycastleAsn1EacCertificateHolderReference_withLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_withLibOrgBouncycastleAsn1EacPackedDate_withLibOrgBouncycastleAsn1EacPackedDate_, certificateProfileIdentifier, certificationAuthorityReference, publicKey, certificateHolderReference, certificateHolderAuthorization, certificateEffectiveDate, certificateExpirationDate)
}

void LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *obj) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->certificateType_ = 0;
  LibOrgBouncycastleAsn1EacCertificateBody_setIso7816CertificateBodyWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(self, obj);
}

LibOrgBouncycastleAsn1EacCertificateBody *new_LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *obj) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1EacCertificateBody, initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_, obj)
}

LibOrgBouncycastleAsn1EacCertificateBody *create_LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *obj) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1EacCertificateBody, initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_, obj)
}

LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleAsn1EacCertificateBody_profileToASN1Object(LibOrgBouncycastleAsn1EacCertificateBody *self) {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->certificateProfileIdentifier_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->certificationAuthorityReference_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERApplicationSpecific_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(false, LibOrgBouncycastleAsn1EacEACTags_CARDHOLDER_PUBLIC_KEY_TEMPLATE, self->publicKey_)];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->certificateHolderReference_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->certificateHolderAuthorization_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->certificateEffectiveDate_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->certificateExpirationDate_];
  return new_LibOrgBouncycastleAsn1DERApplicationSpecific_initWithInt_withLibOrgBouncycastleAsn1ASN1EncodableVector_(LibOrgBouncycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE, v);
}

void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateProfileIdentifier) {
  if ([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(certificateProfileIdentifier)) getApplicationTag] == LibOrgBouncycastleAsn1EacEACTags_INTERCHANGE_PROFILE) {
    self->certificateProfileIdentifier_ = certificateProfileIdentifier;
    self->certificateType_ |= LibOrgBouncycastleAsn1EacCertificateBody_CPI;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Not an Iso7816Tags.INTERCHANGE_PROFILE tag :", LibOrgBouncycastleAsn1EacEACTags_encodeTagWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(certificateProfileIdentifier)));
  }
}

void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificateHolderReference) {
  if ([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(certificateHolderReference)) getApplicationTag] == LibOrgBouncycastleAsn1EacEACTags_CARDHOLDER_NAME) {
    self->certificateHolderReference_ = certificateHolderReference;
    self->certificateType_ |= LibOrgBouncycastleAsn1EacCertificateBody_CHR;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Not an Iso7816Tags.CARDHOLDER_NAME tag");
  }
}

void LibOrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *certificationAuthorityReference) {
  if ([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(certificationAuthorityReference)) getApplicationTag] == LibOrgBouncycastleAsn1EacEACTags_ISSUER_IDENTIFICATION_NUMBER) {
    self->certificationAuthorityReference_ = certificationAuthorityReference;
    self->certificateType_ |= LibOrgBouncycastleAsn1EacCertificateBody_CAR;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Not an Iso7816Tags.ISSUER_IDENTIFICATION_NUMBER tag");
  }
}

void LibOrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithLibOrgBouncycastleAsn1EacPublicKeyDataObject_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1EacPublicKeyDataObject *publicKey) {
  self->publicKey_ = LibOrgBouncycastleAsn1EacPublicKeyDataObject_getInstanceWithId_(publicKey);
  self->certificateType_ |= LibOrgBouncycastleAsn1EacCertificateBody_PK;
}

LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleAsn1EacCertificateBody_requestToASN1Object(LibOrgBouncycastleAsn1EacCertificateBody *self) {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->certificateProfileIdentifier_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERApplicationSpecific_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(false, LibOrgBouncycastleAsn1EacEACTags_CARDHOLDER_PUBLIC_KEY_TEMPLATE, self->publicKey_)];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->certificateHolderReference_];
  return new_LibOrgBouncycastleAsn1DERApplicationSpecific_initWithInt_withLibOrgBouncycastleAsn1ASN1EncodableVector_(LibOrgBouncycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE, v);
}

LibOrgBouncycastleAsn1EacCertificateBody *LibOrgBouncycastleAsn1EacCertificateBody_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1EacCertificateBody_initialize();
  if ([obj isKindOfClass:[LibOrgBouncycastleAsn1EacCertificateBody class]]) {
    return (LibOrgBouncycastleAsn1EacCertificateBody *) obj;
  }
  else if (obj != nil) {
    return new_LibOrgBouncycastleAsn1EacCertificateBody_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific_getInstanceWithId_(obj));
  }
  return nil;
}

void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *ced) {
  if ([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(ced)) getApplicationTag] == LibOrgBouncycastleAsn1EacEACTags_APPLICATION_EFFECTIVE_DATE) {
    self->certificateEffectiveDate_ = ced;
    self->certificateType_ |= LibOrgBouncycastleAsn1EacCertificateBody_CEfD;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Not an Iso7816Tags.APPLICATION_EFFECTIVE_DATE tag :", LibOrgBouncycastleAsn1EacEACTags_encodeTagWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(ced)));
  }
}

void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *ced) {
  if ([((LibOrgBouncycastleAsn1ASN1ApplicationSpecific *) nil_chk(ced)) getApplicationTag] == LibOrgBouncycastleAsn1EacEACTags_APPLICATION_EXPIRATION_DATE) {
    self->certificateExpirationDate_ = ced;
    self->certificateType_ |= LibOrgBouncycastleAsn1EacCertificateBody_CExD;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Not an Iso7816Tags.APPLICATION_EXPIRATION_DATE tag");
  }
}

void LibOrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithLibOrgBouncycastleAsn1EacCertificateHolderAuthorization_(LibOrgBouncycastleAsn1EacCertificateBody *self, LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *cha) {
  self->certificateHolderAuthorization_ = cha;
  self->certificateType_ |= LibOrgBouncycastleAsn1EacCertificateBody_CHA;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1EacCertificateBody)
