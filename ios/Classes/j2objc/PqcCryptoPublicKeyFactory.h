//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/util/PqcCryptoPublicKeyFactory.java
//

#ifndef PqcCryptoPublicKeyFactory_H
#define PqcCryptoPublicKeyFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)keyInfoData;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                               withId:(id)defaultParams;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory_init(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory *new_LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory *create_LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory_init(void);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory_createKeyWithByteArray_(IOSByteArray *keyInfoData);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo, id defaultParams);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoUtilPqcCryptoPublicKeyFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PqcCryptoPublicKeyFactory_H
