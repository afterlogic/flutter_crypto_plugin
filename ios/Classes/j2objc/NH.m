//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/NH.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricAlgorithmProvider.h"
#include "AsymmetricKeyInfoConverter.h"
#include "ConfigurableProvider.h"
#include "J2ObjC_source.h"
#include "NH.h"
#include "NHKeyFactorySpi.h"
#include "PQCObjectIdentifiers.h"

inline NSString *LibOrgBouncycastlePqcJcajceProviderNH_get_PREFIX(void);
static NSString *LibOrgBouncycastlePqcJcajceProviderNH_PREFIX = @"lib.org.bouncycastle.pqc.jcajce.provider.newhope.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcJcajceProviderNH, PREFIX, NSString *)

@implementation LibOrgBouncycastlePqcJcajceProviderNH

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderNH_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &LibOrgBouncycastlePqcJcajceProviderNH_PREFIX, "LLibOrgBouncycastlePqcJcajceProviderNH_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderNH = { "NH", "lib.org.bouncycastle.pqc.jcajce.provider", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, 1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderNH;
}

@end

void LibOrgBouncycastlePqcJcajceProviderNH_init(LibOrgBouncycastlePqcJcajceProviderNH *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcJcajceProviderNH *new_LibOrgBouncycastlePqcJcajceProviderNH_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderNH, init)
}

LibOrgBouncycastlePqcJcajceProviderNH *create_LibOrgBouncycastlePqcJcajceProviderNH_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderNH, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderNH)

@implementation LibOrgBouncycastlePqcJcajceProviderNH_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderNH_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"KeyFactory.NH" withNSString:JreStrcat("$$", LibOrgBouncycastlePqcJcajceProviderNH_PREFIX, @"NHKeyFactorySpi")];
  [provider addAlgorithmWithNSString:@"KeyPairGenerator.NH" withNSString:JreStrcat("$$", LibOrgBouncycastlePqcJcajceProviderNH_PREFIX, @"NHKeyPairGeneratorSpi")];
  [provider addAlgorithmWithNSString:@"KeyAgreement.NH" withNSString:JreStrcat("$$", LibOrgBouncycastlePqcJcajceProviderNH_PREFIX, @"KeyAgreementSpi")];
  id<LibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter> keyFact = new_LibOrgBouncycastlePqcJcajceProviderNewhopeNHKeyFactorySpi_init();
  [self registerOidWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastlePqcAsn1PQCObjectIdentifiers, newHope) withNSString:@"NH" withLibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter:keyFact];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", "LLibOrgBouncycastlePqcJcajceProviderNH;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderNH_Mappings = { "Mappings", "lib.org.bouncycastle.pqc.jcajce.provider", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderNH_Mappings;
}

@end

void LibOrgBouncycastlePqcJcajceProviderNH_Mappings_init(LibOrgBouncycastlePqcJcajceProviderNH_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAsymmetricAlgorithmProvider_init(self);
}

LibOrgBouncycastlePqcJcajceProviderNH_Mappings *new_LibOrgBouncycastlePqcJcajceProviderNH_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderNH_Mappings, init)
}

LibOrgBouncycastlePqcJcajceProviderNH_Mappings *create_LibOrgBouncycastlePqcJcajceProviderNH_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderNH_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderNH_Mappings)
