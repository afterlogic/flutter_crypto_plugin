//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/AlertDescription.java
//

#ifndef AlertDescription_H
#define AlertDescription_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsAlertDescription : NSObject
@property (readonly, class) jshort close_notify NS_SWIFT_NAME(close_notify);
@property (readonly, class) jshort unexpected_message NS_SWIFT_NAME(unexpected_message);
@property (readonly, class) jshort bad_record_mac NS_SWIFT_NAME(bad_record_mac);
@property (readonly, class) jshort decryption_failed NS_SWIFT_NAME(decryption_failed);
@property (readonly, class) jshort record_overflow NS_SWIFT_NAME(record_overflow);
@property (readonly, class) jshort decompression_failure NS_SWIFT_NAME(decompression_failure);
@property (readonly, class) jshort handshake_failure NS_SWIFT_NAME(handshake_failure);
@property (readonly, class) jshort no_certificate NS_SWIFT_NAME(no_certificate);
@property (readonly, class) jshort bad_certificate NS_SWIFT_NAME(bad_certificate);
@property (readonly, class) jshort unsupported_certificate NS_SWIFT_NAME(unsupported_certificate);
@property (readonly, class) jshort certificate_revoked NS_SWIFT_NAME(certificate_revoked);
@property (readonly, class) jshort certificate_expired NS_SWIFT_NAME(certificate_expired);
@property (readonly, class) jshort certificate_unknown NS_SWIFT_NAME(certificate_unknown);
@property (readonly, class) jshort illegal_parameter NS_SWIFT_NAME(illegal_parameter);
@property (readonly, class) jshort unknown_ca NS_SWIFT_NAME(unknown_ca);
@property (readonly, class) jshort access_denied NS_SWIFT_NAME(access_denied);
@property (readonly, class) jshort decode_error NS_SWIFT_NAME(decode_error);
@property (readonly, class) jshort decrypt_error NS_SWIFT_NAME(decrypt_error);
@property (readonly, class) jshort export_restriction NS_SWIFT_NAME(export_restriction);
@property (readonly, class) jshort protocol_version NS_SWIFT_NAME(protocol_version);
@property (readonly, class) jshort insufficient_security NS_SWIFT_NAME(insufficient_security);
@property (readonly, class) jshort internal_error NS_SWIFT_NAME(internal_error);
@property (readonly, class) jshort user_canceled NS_SWIFT_NAME(user_canceled);
@property (readonly, class) jshort no_renegotiation NS_SWIFT_NAME(no_renegotiation);
@property (readonly, class) jshort unsupported_extension NS_SWIFT_NAME(unsupported_extension);
@property (readonly, class) jshort certificate_unobtainable NS_SWIFT_NAME(certificate_unobtainable);
@property (readonly, class) jshort unrecognized_name NS_SWIFT_NAME(unrecognized_name);
@property (readonly, class) jshort bad_certificate_status_response NS_SWIFT_NAME(bad_certificate_status_response);
@property (readonly, class) jshort bad_certificate_hash_value NS_SWIFT_NAME(bad_certificate_hash_value);
@property (readonly, class) jshort unknown_psk_identity NS_SWIFT_NAME(unknown_psk_identity);
@property (readonly, class) jshort inappropriate_fallback NS_SWIFT_NAME(inappropriate_fallback);

+ (jshort)close_notify;

+ (jshort)unexpected_message;

+ (jshort)bad_record_mac;

+ (jshort)decryption_failed;

+ (jshort)record_overflow;

+ (jshort)decompression_failure;

+ (jshort)handshake_failure;

+ (jshort)no_certificate;

+ (jshort)bad_certificate;

+ (jshort)unsupported_certificate;

+ (jshort)certificate_revoked;

+ (jshort)certificate_expired;

+ (jshort)certificate_unknown;

+ (jshort)illegal_parameter;

+ (jshort)unknown_ca;

+ (jshort)access_denied;

+ (jshort)decode_error;

+ (jshort)decrypt_error;

+ (jshort)export_restriction;

+ (jshort)protocol_version;

+ (jshort)insufficient_security;

+ (jshort)internal_error;

+ (jshort)user_canceled;

+ (jshort)no_renegotiation;

+ (jshort)unsupported_extension;

+ (jshort)certificate_unobtainable;

+ (jshort)unrecognized_name;

+ (jshort)bad_certificate_status_response;

+ (jshort)bad_certificate_hash_value;

+ (jshort)unknown_psk_identity;

+ (jshort)inappropriate_fallback;

#pragma mark Public

- (instancetype __nonnull)init;

+ (NSString *)getNameWithShort:(jshort)alertDescription;

+ (NSString *)getTextWithShort:(jshort)alertDescription;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsAlertDescription)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_close_notify(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_close_notify 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, close_notify, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_unexpected_message(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_unexpected_message 10
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, unexpected_message, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_bad_record_mac(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_bad_record_mac 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, bad_record_mac, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_decryption_failed(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_decryption_failed 21
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, decryption_failed, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_record_overflow(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_record_overflow 22
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, record_overflow, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_decompression_failure(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_decompression_failure 30
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, decompression_failure, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_handshake_failure(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_handshake_failure 40
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, handshake_failure, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_no_certificate(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_no_certificate 41
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, no_certificate, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_bad_certificate(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate 42
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, bad_certificate, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_unsupported_certificate(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_unsupported_certificate 43
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, unsupported_certificate, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_certificate_revoked(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_certificate_revoked 44
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, certificate_revoked, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_certificate_expired(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_certificate_expired 45
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, certificate_expired, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_certificate_unknown(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_certificate_unknown 46
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, certificate_unknown, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_illegal_parameter(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter 47
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, illegal_parameter, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_unknown_ca(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_unknown_ca 48
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, unknown_ca, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_access_denied(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_access_denied 49
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, access_denied, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_decode_error(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_decode_error 50
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, decode_error, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_decrypt_error(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_decrypt_error 51
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, decrypt_error, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_export_restriction(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_export_restriction 60
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, export_restriction, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_protocol_version(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_protocol_version 70
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, protocol_version, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_insufficient_security(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_insufficient_security 71
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, insufficient_security, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_internal_error(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_internal_error 80
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, internal_error, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_user_canceled(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_user_canceled 90
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, user_canceled, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_no_renegotiation(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_no_renegotiation 100
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, no_renegotiation, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_unsupported_extension(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_unsupported_extension 110
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, unsupported_extension, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_certificate_unobtainable(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_certificate_unobtainable 111
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, certificate_unobtainable, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_unrecognized_name(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_unrecognized_name 112
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, unrecognized_name, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_bad_certificate_status_response(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate_status_response 113
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, bad_certificate_status_response, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_bad_certificate_hash_value(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_bad_certificate_hash_value 114
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, bad_certificate_hash_value, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_unknown_psk_identity(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_unknown_psk_identity 115
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, unknown_psk_identity, jshort)

inline jshort LibOrgBouncycastleCryptoTlsAlertDescription_get_inappropriate_fallback(void);
#define LibOrgBouncycastleCryptoTlsAlertDescription_inappropriate_fallback 86
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsAlertDescription, inappropriate_fallback, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsAlertDescription_init(LibOrgBouncycastleCryptoTlsAlertDescription *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsAlertDescription *new_LibOrgBouncycastleCryptoTlsAlertDescription_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsAlertDescription *create_LibOrgBouncycastleCryptoTlsAlertDescription_init(void);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsAlertDescription_getNameWithShort_(jshort alertDescription);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsAlertDescription_getTextWithShort_(jshort alertDescription);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsAlertDescription)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // AlertDescription_H
