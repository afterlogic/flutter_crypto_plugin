//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/sig/NotationData.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NotationData.h"
#include "SignatureSubpacket.h"
#include "SignatureSubpacketTags.h"
#include "Strings.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleBcpgSigNotationData ()

+ (IOSByteArray *)createDataWithBoolean:(jboolean)humanReadable
                           withNSString:(NSString *)notationName
                           withNSString:(NSString *)notationValue;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleBcpgSigNotationData_createDataWithBoolean_withNSString_withNSString_(jboolean humanReadable, NSString *notationName, NSString *notationValue);

@implementation LibOrgBouncycastleBcpgSigNotationData

+ (jint)HEADER_FLAG_LENGTH {
  return LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH;
}

+ (jint)HEADER_NAME_LENGTH {
  return LibOrgBouncycastleBcpgSigNotationData_HEADER_NAME_LENGTH;
}

+ (jint)HEADER_VALUE_LENGTH {
  return LibOrgBouncycastleBcpgSigNotationData_HEADER_VALUE_LENGTH;
}

- (instancetype)initWithBoolean:(jboolean)critical
                    withBoolean:(jboolean)isLongLength
                  withByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withByteArray_(self, critical, isLongLength, data);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)critical
                    withBoolean:(jboolean)humanReadable
                   withNSString:(NSString *)notationName
                   withNSString:(NSString *)notationValue {
  LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withNSString_withNSString_(self, critical, humanReadable, notationName, notationValue);
  return self;
}

+ (IOSByteArray *)createDataWithBoolean:(jboolean)humanReadable
                           withNSString:(NSString *)notationName
                           withNSString:(NSString *)notationValue {
  return LibOrgBouncycastleBcpgSigNotationData_createDataWithBoolean_withNSString_withNSString_(humanReadable, notationName, notationValue);
}

- (jboolean)isHumanReadable {
  return IOSByteArray_Get(nil_chk(data_), 0) == (jbyte) (jint) 0x80;
}

- (NSString *)getNotationName {
  jint nameLength = ((JreLShift32((IOSByteArray_Get(nil_chk(data_), LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH) & (jint) 0xff), 8)) + (IOSByteArray_Get(data_, LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH + 1) & (jint) 0xff));
  IOSByteArray *bName = [IOSByteArray newArrayWithLength:nameLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH + LibOrgBouncycastleBcpgSigNotationData_HEADER_NAME_LENGTH + LibOrgBouncycastleBcpgSigNotationData_HEADER_VALUE_LENGTH, bName, 0, nameLength);
  return LibOrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(bName);
}

- (NSString *)getNotationValue {
  return LibOrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_([self getNotationValueBytes]);
}

- (IOSByteArray *)getNotationValueBytes {
  jint nameLength = ((JreLShift32((IOSByteArray_Get(nil_chk(data_), LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH) & (jint) 0xff), 8)) + (IOSByteArray_Get(data_, LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH + 1) & (jint) 0xff));
  jint valueLength = ((JreLShift32((IOSByteArray_Get(data_, LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH + LibOrgBouncycastleBcpgSigNotationData_HEADER_NAME_LENGTH) & (jint) 0xff), 8)) + (IOSByteArray_Get(data_, LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH + LibOrgBouncycastleBcpgSigNotationData_HEADER_NAME_LENGTH + 1) & (jint) 0xff));
  IOSByteArray *bValue = [IOSByteArray newArrayWithLength:valueLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH + LibOrgBouncycastleBcpgSigNotationData_HEADER_NAME_LENGTH + LibOrgBouncycastleBcpgSigNotationData_HEADER_VALUE_LENGTH + nameLength, bValue, 0, valueLength);
  return bValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withBoolean:withByteArray:);
  methods[1].selector = @selector(initWithBoolean:withBoolean:withNSString:withNSString:);
  methods[2].selector = @selector(createDataWithBoolean:withNSString:withNSString:);
  methods[3].selector = @selector(isHumanReadable);
  methods[4].selector = @selector(getNotationName);
  methods[5].selector = @selector(getNotationValue);
  methods[6].selector = @selector(getNotationValueBytes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEADER_FLAG_LENGTH", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigNotationData_HEADER_FLAG_LENGTH, 0x19, -1, -1, -1, -1 },
    { "HEADER_NAME_LENGTH", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigNotationData_HEADER_NAME_LENGTH, 0x19, -1, -1, -1, -1 },
    { "HEADER_VALUE_LENGTH", "I", .constantValue.asInt = LibOrgBouncycastleBcpgSigNotationData_HEADER_VALUE_LENGTH, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZZ[B", "ZZLNSString;LNSString;", "createData", "ZLNSString;LNSString;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgSigNotationData = { "NotationData", "lib.org.bouncycastle.bcpg.sig", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgSigNotationData;
}

@end

void LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withByteArray_(LibOrgBouncycastleBcpgSigNotationData *self, jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, LibOrgBouncycastleBcpgSignatureSubpacketTags_NOTATION_DATA, critical, isLongLength, data);
}

LibOrgBouncycastleBcpgSigNotationData *new_LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withByteArray_(jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSigNotationData, initWithBoolean_withBoolean_withByteArray_, critical, isLongLength, data)
}

LibOrgBouncycastleBcpgSigNotationData *create_LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withByteArray_(jboolean critical, jboolean isLongLength, IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSigNotationData, initWithBoolean_withBoolean_withByteArray_, critical, isLongLength, data)
}

void LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withNSString_withNSString_(LibOrgBouncycastleBcpgSigNotationData *self, jboolean critical, jboolean humanReadable, NSString *notationName, NSString *notationValue) {
  LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(self, LibOrgBouncycastleBcpgSignatureSubpacketTags_NOTATION_DATA, critical, false, LibOrgBouncycastleBcpgSigNotationData_createDataWithBoolean_withNSString_withNSString_(humanReadable, notationName, notationValue));
}

LibOrgBouncycastleBcpgSigNotationData *new_LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withNSString_withNSString_(jboolean critical, jboolean humanReadable, NSString *notationName, NSString *notationValue) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSigNotationData, initWithBoolean_withBoolean_withNSString_withNSString_, critical, humanReadable, notationName, notationValue)
}

LibOrgBouncycastleBcpgSigNotationData *create_LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withNSString_withNSString_(jboolean critical, jboolean humanReadable, NSString *notationName, NSString *notationValue) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSigNotationData, initWithBoolean_withBoolean_withNSString_withNSString_, critical, humanReadable, notationName, notationValue)
}

IOSByteArray *LibOrgBouncycastleBcpgSigNotationData_createDataWithBoolean_withNSString_withNSString_(jboolean humanReadable, NSString *notationName, NSString *notationValue) {
  LibOrgBouncycastleBcpgSigNotationData_initialize();
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  [out writeWithInt:humanReadable ? (jint) 0x80 : (jint) 0x00];
  [out writeWithInt:(jint) 0x0];
  [out writeWithInt:(jint) 0x0];
  [out writeWithInt:(jint) 0x0];
  IOSByteArray *nameData;
  IOSByteArray *valueData = nil;
  jint nameLength;
  jint valueLength;
  nameData = LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(notationName);
  nameLength = JavaLangMath_minWithInt_withInt_(((IOSByteArray *) nil_chk(nameData))->size_, (jint) 0xFFFF);
  if (nameLength != nameData->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"notationName exceeds maximum length.");
  }
  valueData = LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(notationValue);
  valueLength = JavaLangMath_minWithInt_withInt_(((IOSByteArray *) nil_chk(valueData))->size_, (jint) 0xFFFF);
  if (valueLength != valueData->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"notationValue exceeds maximum length.");
  }
  [out writeWithInt:(JreURShift32(nameLength, 8)) & (jint) 0xFF];
  [out writeWithInt:(JreURShift32(nameLength, 0)) & (jint) 0xFF];
  [out writeWithInt:(JreURShift32(valueLength, 8)) & (jint) 0xFF];
  [out writeWithInt:(JreURShift32(valueLength, 0)) & (jint) 0xFF];
  [out writeWithByteArray:nameData withInt:0 withInt:nameLength];
  [out writeWithByteArray:valueData withInt:0 withInt:valueLength];
  return [out toByteArray];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgSigNotationData)
