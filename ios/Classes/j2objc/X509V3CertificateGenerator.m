//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/x509/X509V3CertificateGenerator.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Encoding.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "Asn1X509Time.h"
#include "BCJcaJceHelper.h"
#include "CertificateFactory.h"
#include "DERBitString.h"
#include "DERSequence.h"
#include "ExtCertificateEncodingException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "SubjectPublicKeyInfo.h"
#include "TBSCertificate.h"
#include "V3TBSCertificateGenerator.h"
#include "X509ExtensionUtil.h"
#include "X509Extensions.h"
#include "X509ExtensionsGenerator.h"
#include "X509Name.h"
#include "X509Principal.h"
#include "X509Util.h"
#include "X509V3CertificateGenerator.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/SecurityException.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleX509X509V3CertificateGenerator () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> bcHelper_;
  LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *certificateFactory_;
  LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *tbsGen_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sigOID_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *sigAlgId_;
  NSString *signatureAlgorithm_;
  LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *extGenerator_;
}

- (LibOrgBouncycastleAsn1DERBitString *)booleanToBitStringWithBooleanArray:(IOSBooleanArray *)id_;

- (LibOrgBouncycastleAsn1X509TBSCertificate *)generateTbsCert;

- (JavaSecurityCertX509Certificate *)generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate:(LibOrgBouncycastleAsn1X509TBSCertificate *)tbsCert
                                                                                     withByteArray:(IOSByteArray *)signature;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V3CertificateGenerator, bcHelper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V3CertificateGenerator, certificateFactory_, LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V3CertificateGenerator, tbsGen_, LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V3CertificateGenerator, sigOID_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V3CertificateGenerator, sigAlgId_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V3CertificateGenerator, signatureAlgorithm_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V3CertificateGenerator, extGenerator_, LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *)

__attribute__((unused)) static LibOrgBouncycastleAsn1DERBitString *LibOrgBouncycastleX509X509V3CertificateGenerator_booleanToBitStringWithBooleanArray_(LibOrgBouncycastleX509X509V3CertificateGenerator *self, IOSBooleanArray *id_);

__attribute__((unused)) static LibOrgBouncycastleAsn1X509TBSCertificate *LibOrgBouncycastleX509X509V3CertificateGenerator_generateTbsCert(LibOrgBouncycastleX509X509V3CertificateGenerator *self);

__attribute__((unused)) static JavaSecurityCertX509Certificate *LibOrgBouncycastleX509X509V3CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(LibOrgBouncycastleX509X509V3CertificateGenerator *self, LibOrgBouncycastleAsn1X509TBSCertificate *tbsCert, IOSByteArray *signature);

@implementation LibOrgBouncycastleX509X509V3CertificateGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleX509X509V3CertificateGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  tbsGen_ = new_LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator_init();
  [((LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *) nil_chk(extGenerator_)) reset];
}

- (void)setSerialNumberWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  if ([((JavaMathBigInteger *) nil_chk(serialNumber)) compareToWithId:JreLoadStatic(JavaMathBigInteger, ZERO)] <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"serial number must be a positive integer");
  }
  [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setSerialNumberWithLibOrgBouncycastleAsn1ASN1Integer:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(serialNumber)];
}

- (void)setIssuerDNWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)issuer {
  @try {
    [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setIssuerWithLibOrgBouncycastleAsn1X509X509Name:new_LibOrgBouncycastleJceX509Principal_initWithByteArray_([((JavaxSecurityAuthX500X500Principal *) nil_chk(issuer)) getEncoded])];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"can't process principal: ", e));
  }
}

- (void)setIssuerDNWithLibOrgBouncycastleAsn1X509X509Name:(LibOrgBouncycastleAsn1X509X509Name *)issuer {
  [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setIssuerWithLibOrgBouncycastleAsn1X509X509Name:issuer];
}

- (void)setNotBeforeWithJavaUtilDate:(JavaUtilDate *)date {
  [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setStartDateWithLibOrgBouncycastleAsn1X509Asn1X509Time:new_LibOrgBouncycastleAsn1X509Asn1X509Time_initWithJavaUtilDate_(date)];
}

- (void)setNotAfterWithJavaUtilDate:(JavaUtilDate *)date {
  [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setEndDateWithLibOrgBouncycastleAsn1X509Asn1X509Time:new_LibOrgBouncycastleAsn1X509Asn1X509Time_initWithJavaUtilDate_(date)];
}

- (void)setSubjectDNWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)subject {
  @try {
    [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setSubjectWithLibOrgBouncycastleAsn1X509X509Name:new_LibOrgBouncycastleJceX509Principal_initWithByteArray_([((JavaxSecurityAuthX500X500Principal *) nil_chk(subject)) getEncoded])];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"can't process principal: ", e));
  }
}

- (void)setSubjectDNWithLibOrgBouncycastleAsn1X509X509Name:(LibOrgBouncycastleAsn1X509X509Name *)subject {
  [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setSubjectWithLibOrgBouncycastleAsn1X509X509Name:subject];
}

- (void)setPublicKeyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  @try {
    [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setSubjectPublicKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded]) readObject])];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to process key - ", [e description]));
  }
}

- (void)setSignatureAlgorithmWithNSString:(NSString *)signatureAlgorithm {
  self->signatureAlgorithm_ = signatureAlgorithm;
  @try {
    sigOID_ = LibOrgBouncycastleX509X509Util_getAlgorithmOIDWithNSString_(signatureAlgorithm);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown signature type requested: ", signatureAlgorithm));
  }
  sigAlgId_ = LibOrgBouncycastleX509X509Util_getSigAlgIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_(sigOID_, signatureAlgorithm);
  [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setSignatureWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:sigAlgId_];
}

- (void)setSubjectUniqueIDWithBooleanArray:(IOSBooleanArray *)uniqueID {
  [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setSubjectUniqueIDWithLibOrgBouncycastleAsn1DERBitString:LibOrgBouncycastleX509X509V3CertificateGenerator_booleanToBitStringWithBooleanArray_(self, uniqueID)];
}

- (void)setIssuerUniqueIDWithBooleanArray:(IOSBooleanArray *)uniqueID {
  [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(tbsGen_)) setIssuerUniqueIDWithLibOrgBouncycastleAsn1DERBitString:LibOrgBouncycastleX509X509V3CertificateGenerator_booleanToBitStringWithBooleanArray_(self, uniqueID)];
}

- (LibOrgBouncycastleAsn1DERBitString *)booleanToBitStringWithBooleanArray:(IOSBooleanArray *)id_ {
  return LibOrgBouncycastleX509X509V3CertificateGenerator_booleanToBitStringWithBooleanArray_(self, id_);
}

- (void)addExtensionWithNSString:(NSString *)oid
                     withBoolean:(jboolean)critical
withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)value {
  [self addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid) withBoolean:critical withLibOrgBouncycastleAsn1ASN1Encodable:value];
}

- (void)addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                       withBoolean:(jboolean)critical
                           withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)value {
  [((LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *) nil_chk(extGenerator_)) addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]) withBoolean:critical withLibOrgBouncycastleAsn1ASN1Encodable:value];
}

- (void)addExtensionWithNSString:(NSString *)oid
                     withBoolean:(jboolean)critical
                   withByteArray:(IOSByteArray *)value {
  [self addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid) withBoolean:critical withByteArray:value];
}

- (void)addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                       withBoolean:(jboolean)critical
                                                     withByteArray:(IOSByteArray *)value {
  [((LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *) nil_chk(extGenerator_)) addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]) withBoolean:critical withByteArray:value];
}

- (void)copyAndAddExtensionWithNSString:(NSString *)oid
                            withBoolean:(jboolean)critical
    withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  IOSByteArray *extValue = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getExtensionValueWithNSString:oid];
  if (extValue == nil) {
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_(JreStrcat("$$$", @"extension ", oid, @" not present"));
  }
  @try {
    id<LibOrgBouncycastleAsn1ASN1Encodable> value = LibOrgBouncycastleX509ExtensionX509ExtensionUtil_fromExtensionValueWithByteArray_(extValue);
    [self addExtensionWithNSString:oid withBoolean:critical withLibOrgBouncycastleAsn1ASN1Encodable:value];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_([e description]);
  }
}

- (void)copyAndAddExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                              withBoolean:(jboolean)critical
                                      withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  [self copyAndAddExtensionWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId] withBoolean:critical withJavaSecurityCertX509Certificate:cert];
}

- (JavaSecurityCertX509Certificate *)generateX509CertificateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  @try {
    return [self generateX509CertificateWithJavaSecurityPrivateKey:key withNSString:@"BC" withJavaSecuritySecureRandom:nil];
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw new_JavaLangSecurityException_initWithNSString_(@"BC provider not installed!");
  }
}

- (JavaSecurityCertX509Certificate *)generateX509CertificateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    return [self generateX509CertificateWithJavaSecurityPrivateKey:key withNSString:@"BC" withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw new_JavaLangSecurityException_initWithNSString_(@"BC provider not installed!");
  }
}

- (JavaSecurityCertX509Certificate *)generateX509CertificateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                                          withNSString:(NSString *)provider {
  return [self generateX509CertificateWithJavaSecurityPrivateKey:key withNSString:provider withJavaSecuritySecureRandom:nil];
}

- (JavaSecurityCertX509Certificate *)generateX509CertificateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                                          withNSString:(NSString *)provider
                                                          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    return [self generateWithJavaSecurityPrivateKey:key withNSString:provider withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw e;
  }
  @catch (JavaSecuritySignatureException *e) {
    @throw e;
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw e;
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    @throw new_JavaLangSecurityException_initWithNSString_(JreStrcat("$@", @"exception: ", e));
  }
}

- (JavaSecurityCertX509Certificate *)generateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return [self generateWithJavaSecurityPrivateKey:key withJavaSecuritySecureRandom:nil];
}

- (JavaSecurityCertX509Certificate *)generateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastleAsn1X509TBSCertificate *tbsCert = LibOrgBouncycastleX509X509V3CertificateGenerator_generateTbsCert(self);
  IOSByteArray *signature;
  @try {
    signature = LibOrgBouncycastleX509X509Util_calculateSignatureWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_withJavaSecurityPrivateKey_withJavaSecuritySecureRandom_withLibOrgBouncycastleAsn1ASN1Encodable_(sigOID_, signatureAlgorithm_, key, random, tbsCert);
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleX509ExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(@"exception encoding TBS cert", e);
  }
  @try {
    return LibOrgBouncycastleX509X509V3CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(self, tbsCert, signature);
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleX509ExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(@"exception producing certificate object", e);
  }
}

- (JavaSecurityCertX509Certificate *)generateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                           withNSString:(NSString *)provider {
  return [self generateWithJavaSecurityPrivateKey:key withNSString:provider withJavaSecuritySecureRandom:nil];
}

- (JavaSecurityCertX509Certificate *)generateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                           withNSString:(NSString *)provider
                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastleAsn1X509TBSCertificate *tbsCert = LibOrgBouncycastleX509X509V3CertificateGenerator_generateTbsCert(self);
  IOSByteArray *signature;
  @try {
    signature = LibOrgBouncycastleX509X509Util_calculateSignatureWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_withNSString_withJavaSecurityPrivateKey_withJavaSecuritySecureRandom_withLibOrgBouncycastleAsn1ASN1Encodable_(sigOID_, signatureAlgorithm_, provider, key, random, tbsCert);
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleX509ExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(@"exception encoding TBS cert", e);
  }
  @try {
    return LibOrgBouncycastleX509X509V3CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(self, tbsCert, signature);
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleX509ExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(@"exception producing certificate object", e);
  }
}

- (LibOrgBouncycastleAsn1X509TBSCertificate *)generateTbsCert {
  return LibOrgBouncycastleX509X509V3CertificateGenerator_generateTbsCert(self);
}

- (JavaSecurityCertX509Certificate *)generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate:(LibOrgBouncycastleAsn1X509TBSCertificate *)tbsCert
                                                                                     withByteArray:(IOSByteArray *)signature {
  return LibOrgBouncycastleX509X509V3CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(self, tbsCert, signature);
}

- (id<JavaUtilIterator>)getSignatureAlgNames {
  return LibOrgBouncycastleX509X509Util_getAlgNames();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1DERBitString;", 0x2, 17, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, 25, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 26, 25, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 27, 28, 29, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 27, 30, 29, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 27, 31, 32, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 27, 33, 32, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 34, 28, 35, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 34, 30, 35, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 34, 31, 36, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 34, 33, 36, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509TBSCertificate;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x2, 37, 38, 39, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(setSerialNumberWithJavaMathBigInteger:);
  methods[3].selector = @selector(setIssuerDNWithJavaxSecurityAuthX500X500Principal:);
  methods[4].selector = @selector(setIssuerDNWithLibOrgBouncycastleAsn1X509X509Name:);
  methods[5].selector = @selector(setNotBeforeWithJavaUtilDate:);
  methods[6].selector = @selector(setNotAfterWithJavaUtilDate:);
  methods[7].selector = @selector(setSubjectDNWithJavaxSecurityAuthX500X500Principal:);
  methods[8].selector = @selector(setSubjectDNWithLibOrgBouncycastleAsn1X509X509Name:);
  methods[9].selector = @selector(setPublicKeyWithJavaSecurityPublicKey:);
  methods[10].selector = @selector(setSignatureAlgorithmWithNSString:);
  methods[11].selector = @selector(setSubjectUniqueIDWithBooleanArray:);
  methods[12].selector = @selector(setIssuerUniqueIDWithBooleanArray:);
  methods[13].selector = @selector(booleanToBitStringWithBooleanArray:);
  methods[14].selector = @selector(addExtensionWithNSString:withBoolean:withLibOrgBouncycastleAsn1ASN1Encodable:);
  methods[15].selector = @selector(addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withBoolean:withLibOrgBouncycastleAsn1ASN1Encodable:);
  methods[16].selector = @selector(addExtensionWithNSString:withBoolean:withByteArray:);
  methods[17].selector = @selector(addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withBoolean:withByteArray:);
  methods[18].selector = @selector(copyAndAddExtensionWithNSString:withBoolean:withJavaSecurityCertX509Certificate:);
  methods[19].selector = @selector(copyAndAddExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withBoolean:withJavaSecurityCertX509Certificate:);
  methods[20].selector = @selector(generateX509CertificateWithJavaSecurityPrivateKey:);
  methods[21].selector = @selector(generateX509CertificateWithJavaSecurityPrivateKey:withJavaSecuritySecureRandom:);
  methods[22].selector = @selector(generateX509CertificateWithJavaSecurityPrivateKey:withNSString:);
  methods[23].selector = @selector(generateX509CertificateWithJavaSecurityPrivateKey:withNSString:withJavaSecuritySecureRandom:);
  methods[24].selector = @selector(generateWithJavaSecurityPrivateKey:);
  methods[25].selector = @selector(generateWithJavaSecurityPrivateKey:withJavaSecuritySecureRandom:);
  methods[26].selector = @selector(generateWithJavaSecurityPrivateKey:withNSString:);
  methods[27].selector = @selector(generateWithJavaSecurityPrivateKey:withNSString:withJavaSecuritySecureRandom:);
  methods[28].selector = @selector(generateTbsCert);
  methods[29].selector = @selector(generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate:withByteArray:);
  methods[30].selector = @selector(getSignatureAlgNames);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bcHelper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "certificateFactory_", "LLibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tbsGen_", "LLibOrgBouncycastleAsn1X509V3TBSCertificateGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigOID_", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigAlgId_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signatureAlgorithm_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extGenerator_", "LLibOrgBouncycastleAsn1X509X509ExtensionsGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSerialNumber", "LJavaMathBigInteger;", "setIssuerDN", "LJavaxSecurityAuthX500X500Principal;", "LLibOrgBouncycastleAsn1X509X509Name;", "setNotBefore", "LJavaUtilDate;", "setNotAfter", "setSubjectDN", "setPublicKey", "LJavaSecurityPublicKey;", "LJavaLangIllegalArgumentException;", "setSignatureAlgorithm", "LNSString;", "setSubjectUniqueID", "[Z", "setIssuerUniqueID", "booleanToBitString", "addExtension", "LNSString;ZLLibOrgBouncycastleAsn1ASN1Encodable;", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;ZLLibOrgBouncycastleAsn1ASN1Encodable;", "LNSString;Z[B", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;Z[B", "copyAndAddExtension", "LNSString;ZLJavaSecurityCertX509Certificate;", "LJavaSecurityCertCertificateParsingException;", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;ZLJavaSecurityCertX509Certificate;", "generateX509Certificate", "LJavaSecurityPrivateKey;", "LJavaLangSecurityException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "LJavaSecurityPrivateKey;LJavaSecuritySecureRandom;", "LJavaSecurityPrivateKey;LNSString;", "LJavaSecurityNoSuchProviderException;LJavaLangSecurityException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "LJavaSecurityPrivateKey;LNSString;LJavaSecuritySecureRandom;", "generate", "LJavaSecurityCertCertificateEncodingException;LJavaLangIllegalStateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "LJavaSecurityCertCertificateEncodingException;LJavaLangIllegalStateException;LJavaSecurityNoSuchProviderException;LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "generateJcaObject", "LLibOrgBouncycastleAsn1X509TBSCertificate;[B", "LJavaLangException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleX509X509V3CertificateGenerator = { "X509V3CertificateGenerator", "lib.org.bouncycastle.x509", ptrTable, methods, fields, 7, 0x1, 31, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleX509X509V3CertificateGenerator;
}

@end

void LibOrgBouncycastleX509X509V3CertificateGenerator_init(LibOrgBouncycastleX509X509V3CertificateGenerator *self) {
  NSObject_init(self);
  self->bcHelper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->certificateFactory_ = new_LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_init();
  self->tbsGen_ = new_LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator_init();
  self->extGenerator_ = new_LibOrgBouncycastleAsn1X509X509ExtensionsGenerator_init();
}

LibOrgBouncycastleX509X509V3CertificateGenerator *new_LibOrgBouncycastleX509X509V3CertificateGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509X509V3CertificateGenerator, init)
}

LibOrgBouncycastleX509X509V3CertificateGenerator *create_LibOrgBouncycastleX509X509V3CertificateGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509X509V3CertificateGenerator, init)
}

LibOrgBouncycastleAsn1DERBitString *LibOrgBouncycastleX509X509V3CertificateGenerator_booleanToBitStringWithBooleanArray_(LibOrgBouncycastleX509X509V3CertificateGenerator *self, IOSBooleanArray *id_) {
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:(((IOSBooleanArray *) nil_chk(id_))->size_ + 7) / 8];
  for (jint i = 0; i != id_->size_; i++) {
    *IOSByteArray_GetRef(bytes, i / 8) |= (IOSBooleanArray_Get(id_, i)) ? (JreLShift32(1, ((7 - (i % 8))))) : 0;
  }
  jint pad = id_->size_ % 8;
  if (pad == 0) {
    return new_LibOrgBouncycastleAsn1DERBitString_initWithByteArray_(bytes);
  }
  else {
    return new_LibOrgBouncycastleAsn1DERBitString_initWithByteArray_withInt_(bytes, 8 - pad);
  }
}

LibOrgBouncycastleAsn1X509TBSCertificate *LibOrgBouncycastleX509X509V3CertificateGenerator_generateTbsCert(LibOrgBouncycastleX509X509V3CertificateGenerator *self) {
  if (![((LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *) nil_chk(self->extGenerator_)) isEmpty]) {
    [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(self->tbsGen_)) setExtensionsWithLibOrgBouncycastleAsn1X509X509Extensions:[((LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *) nil_chk(self->extGenerator_)) generate]];
  }
  return [((LibOrgBouncycastleAsn1X509V3TBSCertificateGenerator *) nil_chk(self->tbsGen_)) generateTBSCertificate];
}

JavaSecurityCertX509Certificate *LibOrgBouncycastleX509X509V3CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(LibOrgBouncycastleX509X509V3CertificateGenerator *self, LibOrgBouncycastleAsn1X509TBSCertificate *tbsCert, IOSByteArray *signature) {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:tbsCert];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->sigAlgId_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERBitString_initWithByteArray_(signature)];
  return (JavaSecurityCertX509Certificate *) cast_chk([((LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *) nil_chk(self->certificateFactory_)) engineGenerateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_([new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER])], [JavaSecurityCertX509Certificate class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleX509X509V3CertificateGenerator)
