//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/x509/PKIXCertPathReviewer.java
//

#include "ASN1Encodable.h"
#include "ASN1Enumerated.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "AccessDescription.h"
#include "AlgorithmIdentifier.h"
#include "AnnotatedException.h"
#include "AuthorityInformationAccess.h"
#include "AuthorityKeyIdentifier.h"
#include "BasicConstraints.h"
#include "CRLDistPoint.h"
#include "CertPathReviewerException.h"
#include "CertPathValidatorUtilities.h"
#include "DERIA5String.h"
#include "DEROctetString.h"
#include "DistributionPoint.h"
#include "DistributionPointName.h"
#include "ETSIQCObjectIdentifiers.h"
#include "ErrorBundle.h"
#include "Extension.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "GeneralSubtree.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "Iso4217CurrencyCode.h"
#include "IssuingDistributionPoint.h"
#include "J2ObjC_source.h"
#include "JcePKIXNameConstraintValidator.h"
#include "LocaleString.h"
#include "MonetaryValue.h"
#include "NameConstraints.h"
#include "PKIXCRLUtil.h"
#include "PKIXCertPathReviewer.h"
#include "PKIXNameConstraintValidatorException.h"
#include "PKIXPolicyNode.h"
#include "PolicyInformation.h"
#include "QCStatement.h"
#include "RFC3739QCObjectIdentifiers.h"
#include "TrustedInput.h"
#include "UntrustedInput.h"
#include "UntrustedUrlInput.h"
#include "X509CRLStoreSelector.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/InetAddress.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/PublicKey.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/CRL.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/PKIXCertPathChecker.h"
#include "java/security/cert/PKIXParameters.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLEntry.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleX509PKIXCertPathReviewer () {
 @public
  jboolean initialized_;
}

- (void)checkNameConstraints;

- (void)checkPathLength;

- (void)checkSignatures;

- (void)checkPolicy;

- (void)checkCriticalExtensions;

- (jboolean)processQcStatementsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                           withInt:(jint)index;

- (NSString *)IPtoStringWithByteArray:(IOSByteArray *)ip;

- (JavaSecurityCertX509CRL *)getCRLWithNSString:(NSString *)location;

@end

inline NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_get_QC_STATEMENT(void);
static NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_QC_STATEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleX509PKIXCertPathReviewer, QC_STATEMENT, NSString *)

inline NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_get_CRL_DIST_POINTS(void);
static NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_CRL_DIST_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleX509PKIXCertPathReviewer, CRL_DIST_POINTS, NSString *)

inline NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_get_AUTH_INFO_ACCESS(void);
static NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_AUTH_INFO_ACCESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleX509PKIXCertPathReviewer, AUTH_INFO_ACCESS, NSString *)

inline NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_get_RESOURCE_NAME(void);
static NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME = @"lib.org.bouncycastle.x509.CertPathReviewerMessages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleX509PKIXCertPathReviewer, RESOURCE_NAME, NSString *)

__attribute__((unused)) static void LibOrgBouncycastleX509PKIXCertPathReviewer_checkNameConstraints(LibOrgBouncycastleX509PKIXCertPathReviewer *self);

__attribute__((unused)) static void LibOrgBouncycastleX509PKIXCertPathReviewer_checkPathLength(LibOrgBouncycastleX509PKIXCertPathReviewer *self);

__attribute__((unused)) static void LibOrgBouncycastleX509PKIXCertPathReviewer_checkSignatures(LibOrgBouncycastleX509PKIXCertPathReviewer *self);

__attribute__((unused)) static void LibOrgBouncycastleX509PKIXCertPathReviewer_checkPolicy(LibOrgBouncycastleX509PKIXCertPathReviewer *self);

__attribute__((unused)) static void LibOrgBouncycastleX509PKIXCertPathReviewer_checkCriticalExtensions(LibOrgBouncycastleX509PKIXCertPathReviewer *self);

__attribute__((unused)) static jboolean LibOrgBouncycastleX509PKIXCertPathReviewer_processQcStatementsWithJavaSecurityCertX509Certificate_withInt_(LibOrgBouncycastleX509PKIXCertPathReviewer *self, JavaSecurityCertX509Certificate *cert, jint index);

__attribute__((unused)) static NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_IPtoStringWithByteArray_(LibOrgBouncycastleX509PKIXCertPathReviewer *self, IOSByteArray *ip);

__attribute__((unused)) static JavaSecurityCertX509CRL *LibOrgBouncycastleX509PKIXCertPathReviewer_getCRLWithNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer *self, NSString *location);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleX509PKIXCertPathReviewer)

@implementation LibOrgBouncycastleX509PKIXCertPathReviewer

- (void)init__WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
        withJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)params {
  if (initialized_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"object is already initialized!");
  }
  initialized_ = true;
  if (certPath == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"certPath was null");
  }
  self->certPath_ = certPath;
  certs_ = [certPath getCertificates];
  n_ = [((id<JavaUtilList>) nil_chk(certs_)) size];
  if ([((id<JavaUtilList>) nil_chk(certs_)) isEmpty]) {
    @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.emptyCertPath"));
  }
  pkixParams_ = (JavaSecurityCertPKIXParameters *) cast_chk([((JavaSecurityCertPKIXParameters *) nil_chk(params)) java_clone], [JavaSecurityCertPKIXParameters class]);
  validDate_ = LibOrgBouncycastleX509CertPathValidatorUtilities_getValidDateWithJavaSecurityCertPKIXParameters_(pkixParams_);
  notifications_ = nil;
  errors_ = nil;
  trustAnchor_ = nil;
  subjectPublicKey_ = nil;
  policyTree_ = nil;
}

- (instancetype)initWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
              withJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)params {
  LibOrgBouncycastleX509PKIXCertPathReviewer_initWithJavaSecurityCertCertPath_withJavaSecurityCertPKIXParameters_(self, certPath, params);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleX509PKIXCertPathReviewer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaSecurityCertCertPath *)getCertPath {
  return certPath_;
}

- (jint)getCertPathSize {
  return n_;
}

- (IOSObjectArray *)getErrors {
  [self doChecks];
  return errors_;
}

- (id<JavaUtilList>)getErrorsWithInt:(jint)index {
  [self doChecks];
  return IOSObjectArray_Get(nil_chk(errors_), index + 1);
}

- (IOSObjectArray *)getNotifications {
  [self doChecks];
  return notifications_;
}

- (id<JavaUtilList>)getNotificationsWithInt:(jint)index {
  [self doChecks];
  return IOSObjectArray_Get(nil_chk(notifications_), index + 1);
}

- (id<JavaSecurityCertPolicyNode>)getPolicyTree {
  [self doChecks];
  return policyTree_;
}

- (id<JavaSecurityPublicKey>)getSubjectPublicKey {
  [self doChecks];
  return subjectPublicKey_;
}

- (JavaSecurityCertTrustAnchor *)getTrustAnchor {
  [self doChecks];
  return trustAnchor_;
}

- (jboolean)isValidCertPath {
  [self doChecks];
  jboolean valid = true;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(errors_))->size_; i++) {
    if (![((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(errors_, i))) isEmpty]) {
      valid = false;
      break;
    }
  }
  return valid;
}

- (void)addNotificationWithLibOrgBouncycastleI18nErrorBundle:(LibOrgBouncycastleI18nErrorBundle *)msg {
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(notifications_), 0))) addWithId:msg];
}

- (void)addNotificationWithLibOrgBouncycastleI18nErrorBundle:(LibOrgBouncycastleI18nErrorBundle *)msg
                                                     withInt:(jint)index {
  if (index < -1 || index >= n_) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(notifications_), index + 1))) addWithId:msg];
}

- (void)addErrorWithLibOrgBouncycastleI18nErrorBundle:(LibOrgBouncycastleI18nErrorBundle *)msg {
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(errors_), 0))) addWithId:msg];
}

- (void)addErrorWithLibOrgBouncycastleI18nErrorBundle:(LibOrgBouncycastleI18nErrorBundle *)msg
                                              withInt:(jint)index {
  if (index < -1 || index >= n_) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(errors_), index + 1))) addWithId:msg];
}

- (void)doChecks {
  if (!initialized_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Object not initialized. Call init() first.");
  }
  if (notifications_ == nil) {
    notifications_ = [IOSObjectArray newArrayWithLength:n_ + 1 type:JavaUtilList_class_()];
    errors_ = [IOSObjectArray newArrayWithLength:n_ + 1 type:JavaUtilList_class_()];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(notifications_))->size_; i++) {
      (void) IOSObjectArray_SetAndConsume(notifications_, i, new_JavaUtilArrayList_init());
      (void) IOSObjectArray_SetAndConsume(nil_chk(errors_), i, new_JavaUtilArrayList_init());
    }
    LibOrgBouncycastleX509PKIXCertPathReviewer_checkSignatures(self);
    LibOrgBouncycastleX509PKIXCertPathReviewer_checkNameConstraints(self);
    LibOrgBouncycastleX509PKIXCertPathReviewer_checkPathLength(self);
    LibOrgBouncycastleX509PKIXCertPathReviewer_checkPolicy(self);
    LibOrgBouncycastleX509PKIXCertPathReviewer_checkCriticalExtensions(self);
  }
}

- (void)checkNameConstraints {
  LibOrgBouncycastleX509PKIXCertPathReviewer_checkNameConstraints(self);
}

- (void)checkPathLength {
  LibOrgBouncycastleX509PKIXCertPathReviewer_checkPathLength(self);
}

- (void)checkSignatures {
  LibOrgBouncycastleX509PKIXCertPathReviewer_checkSignatures(self);
}

- (void)checkPolicy {
  LibOrgBouncycastleX509PKIXCertPathReviewer_checkPolicy(self);
}

- (void)checkCriticalExtensions {
  LibOrgBouncycastleX509PKIXCertPathReviewer_checkCriticalExtensions(self);
}

- (jboolean)processQcStatementsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                           withInt:(jint)index {
  return LibOrgBouncycastleX509PKIXCertPathReviewer_processQcStatementsWithJavaSecurityCertX509Certificate_withInt_(self, cert, index);
}

- (NSString *)IPtoStringWithByteArray:(IOSByteArray *)ip {
  return LibOrgBouncycastleX509PKIXCertPathReviewer_IPtoStringWithByteArray_(self, ip);
}

- (void)checkRevocationWithJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)paramsPKIX
                      withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                         withJavaUtilDate:(JavaUtilDate *)validDate
                      withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
                                withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                       withJavaUtilVector:(JavaUtilVector *)crlDistPointUrls
                                       withJavaUtilVector:(JavaUtilVector *)ocspUrls
                                                  withInt:(jint)index {
  [self checkCRLsWithJavaSecurityCertPKIXParameters:paramsPKIX withJavaSecurityCertX509Certificate:cert withJavaUtilDate:validDate withJavaSecurityCertX509Certificate:sign withJavaSecurityPublicKey:workingPublicKey withJavaUtilVector:crlDistPointUrls withInt:index];
}

- (void)checkCRLsWithJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)paramsPKIX
                withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                   withJavaUtilDate:(JavaUtilDate *)validDate
                withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
                          withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                 withJavaUtilVector:(JavaUtilVector *)crlDistPointUrls
                                            withInt:(jint)index {
  LibOrgBouncycastleX509X509CRLStoreSelector *crlselect;
  crlselect = new_LibOrgBouncycastleX509X509CRLStoreSelector_init();
  @try {
    [crlselect addIssuerNameWithByteArray:[((JavaxSecurityAuthX500X500Principal *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getEncodedIssuerPrincipalWithId_(cert))) getEncoded]];
  }
  @catch (JavaIoIOException *e) {
    LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlIssuerException");
    @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, e);
  }
  [crlselect setCertificateCheckingWithJavaSecurityCertX509Certificate:cert];
  id<JavaUtilIterator> crl_iter;
  @try {
    id<JavaUtilCollection> crl_coll = [((LibOrgBouncycastleX509PKIXCRLUtil *) nil_chk(JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, CRL_UTIL))) findCRLsWithLibOrgBouncycastleX509X509CRLStoreSelector:crlselect withJavaSecurityCertPKIXParameters:paramsPKIX];
    crl_iter = [((id<JavaUtilCollection>) nil_chk(crl_coll)) iterator];
    if ([crl_coll isEmpty]) {
      crl_coll = [JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, CRL_UTIL) findCRLsWithLibOrgBouncycastleX509X509CRLStoreSelector:new_LibOrgBouncycastleX509X509CRLStoreSelector_init() withJavaSecurityCertPKIXParameters:paramsPKIX];
      id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(crl_coll)) iterator];
      id<JavaUtilList> nonMatchingCrlNames = new_JavaUtilArrayList_init();
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        [nonMatchingCrlNames addWithId:[((JavaSecurityCertX509CRL *) nil_chk(((JavaSecurityCertX509CRL *) cast_chk([it next], [JavaSecurityCertX509CRL class])))) getIssuerX500Principal]];
      }
      jint numbOfCrls = [nonMatchingCrlNames size];
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noCrlInCertstore", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([crlselect getIssuerNames]), create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_(nonMatchingCrlNames), LibOrgBouncycastleUtilIntegers_valueOfWithInt_(numbOfCrls) } count:3 type:NSObject_class_()]);
      [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    }
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
    LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlExtractionError", [IOSObjectArray newArrayWithObjects:(id[]){ [((JavaLangThrowable *) nil_chk([ae getCause])) getMessage], [ae getCause], [[((JavaLangThrowable *) nil_chk([ae getCause])) java_getClass] getName] } count:3 type:NSObject_class_()]);
    [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    crl_iter = [new_JavaUtilArrayList_init() iterator];
  }
  jboolean validCrlFound = false;
  JavaSecurityCertX509CRL *crl = nil;
  while ([((id<JavaUtilIterator>) nil_chk(crl_iter)) hasNext]) {
    crl = (JavaSecurityCertX509CRL *) cast_chk([crl_iter next], [JavaSecurityCertX509CRL class]);
    if ([((JavaSecurityCertX509CRL *) nil_chk(crl)) getNextUpdate] == nil || [((JavaUtilDate *) nil_chk([((JavaSecurityCertPKIXParameters *) nil_chk(paramsPKIX)) getDate])) beforeWithJavaUtilDate:[crl getNextUpdate]]) {
      validCrlFound = true;
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.localValidCRL", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([crl getThisUpdate]), create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([crl getNextUpdate]) } count:2 type:NSObject_class_()]);
      [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      break;
    }
    else {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.localInvalidCRL", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([crl getThisUpdate]), create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([crl getNextUpdate]) } count:2 type:NSObject_class_()]);
      [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    }
  }
  if (!validCrlFound) {
    JavaSecurityCertX509CRL *onlineCRL = nil;
    id<JavaUtilIterator> urlIt = [((JavaUtilVector *) nil_chk(crlDistPointUrls)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(urlIt)) hasNext]) {
      @try {
        NSString *location = (NSString *) cast_chk([urlIt next], [NSString class]);
        onlineCRL = LibOrgBouncycastleX509PKIXCertPathReviewer_getCRLWithNSString_(self, location);
        if (onlineCRL != nil) {
          if (![((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal])) isEqual:[onlineCRL getIssuerX500Principal]]) {
            LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.onlineCRLWrongCA", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([((JavaxSecurityAuthX500X500Principal *) nil_chk([onlineCRL getIssuerX500Principal])) getName]), create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([((JavaxSecurityAuthX500X500Principal *) nil_chk([cert getIssuerX500Principal])) getName]), create_LibOrgBouncycastleI18nFilterUntrustedUrlInput_initWithId_(location) } count:3 type:NSObject_class_()]);
            [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
            continue;
          }
          if ([onlineCRL getNextUpdate] == nil || [((JavaUtilDate *) nil_chk([((JavaSecurityCertPKIXParameters *) nil_chk(pkixParams_)) getDate])) beforeWithJavaUtilDate:[onlineCRL getNextUpdate]]) {
            validCrlFound = true;
            LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.onlineValidCRL", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([onlineCRL getThisUpdate]), create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([onlineCRL getNextUpdate]), create_LibOrgBouncycastleI18nFilterUntrustedUrlInput_initWithId_(location) } count:3 type:NSObject_class_()]);
            [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
            crl = onlineCRL;
            break;
          }
          else {
            LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.onlineInvalidCRL", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([onlineCRL getThisUpdate]), create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([onlineCRL getNextUpdate]), create_LibOrgBouncycastleI18nFilterUntrustedUrlInput_initWithId_(location) } count:3 type:NSObject_class_()]);
            [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
          }
        }
      }
      @catch (LibOrgBouncycastleX509CertPathReviewerException *cpre) {
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:[cpre getErrorMessage] withInt:index];
      }
    }
  }
  JavaSecurityCertX509CRLEntry *crl_entry;
  if (crl != nil) {
    if (sign != nil) {
      IOSBooleanArray *keyusage = [sign getKeyUsage];
      if (keyusage != nil && (keyusage->size_ < 7 || !IOSBooleanArray_Get(keyusage, LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_SIGN))) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noCrlSigningPermited");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
      }
    }
    if (workingPublicKey != nil) {
      @try {
        [crl verifyWithJavaSecurityPublicKey:workingPublicKey withNSString:@"BC"];
      }
      @catch (JavaLangException *e) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlVerifyFailed");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, e);
      }
    }
    else {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlNoIssuerPublicKey");
      @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
    }
    crl_entry = [crl getRevokedCertificateWithJavaMathBigInteger:[((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSerialNumber]];
    if (crl_entry != nil) {
      NSString *reason = nil;
      if ([crl_entry hasExtensions]) {
        LibOrgBouncycastleAsn1ASN1Enumerated *reasonCode;
        @try {
          reasonCode = LibOrgBouncycastleAsn1ASN1Enumerated_getInstanceWithId_(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl_entry, [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, reasonCode))) getId]));
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlReasonExtError");
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, ae);
        }
        if (reasonCode != nil) {
          reason = IOSObjectArray_Get(nil_chk(JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, crlReasons)), [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue]);
        }
      }
      if (reason == nil) {
        reason = IOSObjectArray_Get(nil_chk(JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, crlReasons)), 7);
      }
      LibOrgBouncycastleI18nLocaleString *ls = new_LibOrgBouncycastleI18nLocaleString_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, reason);
      if (![((JavaUtilDate *) nil_chk(validDate)) beforeWithJavaUtilDate:[crl_entry getRevocationDate]]) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.certRevoked", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([crl_entry getRevocationDate]), ls } count:2 type:NSObject_class_()]);
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
      }
      else {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.revokedAfterValidation", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([crl_entry getRevocationDate]), ls } count:2 type:NSObject_class_()]);
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
    }
    else {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.notRevoked");
      [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    }
    if ([crl getNextUpdate] != nil && [((JavaUtilDate *) nil_chk([crl getNextUpdate])) beforeWithJavaUtilDate:[((JavaSecurityCertPKIXParameters *) nil_chk(pkixParams_)) getDate]]) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlUpdateAvailable", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([crl getNextUpdate]) } count:1 type:NSObject_class_()]);
      [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    }
    LibOrgBouncycastleAsn1ASN1Primitive *idp;
    @try {
      idp = LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, ISSUING_DISTRIBUTION_POINT));
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.distrPtExtError");
      @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
    }
    LibOrgBouncycastleAsn1ASN1Primitive *dci;
    @try {
      dci = LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, DELTA_CRL_INDICATOR));
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.deltaCrlExtError");
      @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
    }
    if (dci != nil) {
      LibOrgBouncycastleX509X509CRLStoreSelector *baseSelect = new_LibOrgBouncycastleX509X509CRLStoreSelector_init();
      @try {
        [baseSelect addIssuerNameWithByteArray:[((JavaxSecurityAuthX500X500Principal *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) getEncoded]];
      }
      @catch (JavaIoIOException *e) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlIssuerException");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, e);
      }
      [baseSelect setMinCRLNumberWithJavaMathBigInteger:[((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk(dci, [LibOrgBouncycastleAsn1ASN1Integer class])) getPositiveValue]];
      @try {
        [baseSelect setMaxCRLNumberWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, CRL_NUMBER)), [LibOrgBouncycastleAsn1ASN1Integer class])))) getPositiveValue])) subtractWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(1)]];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlNbrExtError");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, ae);
      }
      jboolean foundBase = false;
      id<JavaUtilIterator> it;
      @try {
        it = [((id<JavaUtilSet>) nil_chk([JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, CRL_UTIL) findCRLsWithLibOrgBouncycastleX509X509CRLStoreSelector:baseSelect withJavaSecurityCertPKIXParameters:paramsPKIX])) iterator];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlExtractionError");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, ae);
      }
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        JavaSecurityCertX509CRL *base = (JavaSecurityCertX509CRL *) cast_chk([it next], [JavaSecurityCertX509CRL class]);
        LibOrgBouncycastleAsn1ASN1Primitive *baseIdp;
        @try {
          baseIdp = LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(base, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, ISSUING_DISTRIBUTION_POINT));
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.distrPtExtError");
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, ae);
        }
        if (idp == nil) {
          if (baseIdp == nil) {
            foundBase = true;
            break;
          }
        }
        else {
          if ([idp isEqual:baseIdp]) {
            foundBase = true;
            break;
          }
        }
      }
      if (!foundBase) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noBaseCRL");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
      }
    }
    if (idp != nil) {
      LibOrgBouncycastleAsn1X509IssuingDistributionPoint *p = LibOrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(idp);
      LibOrgBouncycastleAsn1X509BasicConstraints *bc = nil;
      @try {
        bc = LibOrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, BASIC_CONSTRAINTS)));
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlBCExtError");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, ae);
      }
      if ([((LibOrgBouncycastleAsn1X509IssuingDistributionPoint *) nil_chk(p)) onlyContainsUserCerts] && (bc != nil && [bc isCA])) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlOnlyUserCert");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
      }
      if ([p onlyContainsCACerts] && (bc == nil || ![bc isCA])) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlOnlyCaCert");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
      }
      if ([p onlyContainsAttributeCerts]) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlOnlyAttrCert");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
      }
    }
  }
  if (!validCrlFound) {
    LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noValidCrlFound");
    @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
  }
}

- (JavaUtilVector *)getCRLDistUrlsWithLibOrgBouncycastleAsn1X509CRLDistPoint:(LibOrgBouncycastleAsn1X509CRLDistPoint *)crlDistPoints {
  JavaUtilVector *urls = new_JavaUtilVector_init();
  if (crlDistPoints != nil) {
    IOSObjectArray *distPoints = [crlDistPoints getDistributionPoints];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(distPoints))->size_; i++) {
      LibOrgBouncycastleAsn1X509DistributionPointName *dp_name = [((LibOrgBouncycastleAsn1X509DistributionPoint *) nil_chk(IOSObjectArray_Get(distPoints, i))) getDistributionPoint];
      if ([((LibOrgBouncycastleAsn1X509DistributionPointName *) nil_chk(dp_name)) getType] == LibOrgBouncycastleAsn1X509DistributionPointName_FULL_NAME) {
        IOSObjectArray *generalNames = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk(LibOrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([dp_name getName]))) getNames];
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(generalNames))->size_; j++) {
          if ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(generalNames, j))) getTagNo] == LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier) {
            NSString *url = [((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(((LibOrgBouncycastleAsn1DERIA5String *) cast_chk([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(generalNames, j))) getName], [LibOrgBouncycastleAsn1DERIA5String class])))) getString];
            [urls addWithId:url];
          }
        }
      }
    }
  }
  return urls;
}

- (JavaUtilVector *)getOCSPUrlsWithLibOrgBouncycastleAsn1X509AuthorityInformationAccess:(LibOrgBouncycastleAsn1X509AuthorityInformationAccess *)authInfoAccess {
  JavaUtilVector *urls = new_JavaUtilVector_init();
  if (authInfoAccess != nil) {
    IOSObjectArray *ads = [authInfoAccess getAccessDescriptions];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ads))->size_; i++) {
      if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AccessDescription *) nil_chk(IOSObjectArray_Get(ads, i))) getAccessMethod])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X509AccessDescription, id_ad_ocsp)]) {
        LibOrgBouncycastleAsn1X509GeneralName *name = [((LibOrgBouncycastleAsn1X509AccessDescription *) nil_chk(IOSObjectArray_Get(ads, i))) getAccessLocation];
        if ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(name)) getTagNo] == LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier) {
          NSString *url = [((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(((LibOrgBouncycastleAsn1DERIA5String *) cast_chk([name getName], [LibOrgBouncycastleAsn1DERIA5String class])))) getString];
          [urls addWithId:url];
        }
      }
    }
  }
  return urls;
}

- (JavaSecurityCertX509CRL *)getCRLWithNSString:(NSString *)location {
  return LibOrgBouncycastleX509PKIXCertPathReviewer_getCRLWithNSString_(self, location);
}

- (id<JavaUtilCollection>)getTrustAnchorsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                             withJavaUtilSet:(id<JavaUtilSet>)trustanchors {
  id<JavaUtilCollection> trustColl = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(trustanchors)) iterator];
  JavaSecurityCertX509CertSelector *certSelectX509 = new_JavaSecurityCertX509CertSelector_init();
  @try {
    [certSelectX509 setSubjectWithByteArray:[((JavaxSecurityAuthX500X500Principal *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getEncodedIssuerPrincipalWithId_(cert))) getEncoded]];
    IOSByteArray *ext = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, authorityKeyIdentifier))) getId]];
    if (ext != nil) {
      LibOrgBouncycastleAsn1ASN1OctetString *oct = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(ext), [LibOrgBouncycastleAsn1ASN1OctetString class]);
      LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier *authID = LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(oct)) getOctets]));
      [certSelectX509 setSerialNumberWithJavaMathBigInteger:[((LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier *) nil_chk(authID)) getAuthorityCertSerialNumber]];
      IOSByteArray *keyID = [authID getKeyIdentifier];
      if (keyID != nil) {
        [certSelectX509 setSubjectKeyIdentifierWithByteArray:[new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(keyID) getEncoded]];
      }
    }
  }
  @catch (JavaIoIOException *ex) {
    LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.trustAnchorIssuerError");
    @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    JavaSecurityCertTrustAnchor *trust = (JavaSecurityCertTrustAnchor *) cast_chk([it next], [JavaSecurityCertTrustAnchor class]);
    if ([((JavaSecurityCertTrustAnchor *) nil_chk(trust)) getTrustedCert] != nil) {
      if ([certSelectX509 matchWithJavaSecurityCertCertificate:[trust getTrustedCert]]) {
        [trustColl addWithId:trust];
      }
    }
    else if ([trust getCAName] != nil && [trust getCAPublicKey] != nil) {
      JavaxSecurityAuthX500X500Principal *certIssuer = LibOrgBouncycastleX509CertPathValidatorUtilities_getEncodedIssuerPrincipalWithId_(cert);
      JavaxSecurityAuthX500X500Principal *caName = new_JavaxSecurityAuthX500X500Principal_initWithNSString_([trust getCAName]);
      if ([((JavaxSecurityAuthX500X500Principal *) nil_chk(certIssuer)) isEqual:caName]) {
        [trustColl addWithId:trust];
      }
    }
  }
  return trustColl;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPath;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertPolicyNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertTrustAnchor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 17, 2, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x4, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRL;", 0x2, 22, 23, 2, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x4, 24, 25, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init__WithJavaSecurityCertCertPath:withJavaSecurityCertPKIXParameters:);
  methods[1].selector = @selector(initWithJavaSecurityCertCertPath:withJavaSecurityCertPKIXParameters:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(getCertPath);
  methods[4].selector = @selector(getCertPathSize);
  methods[5].selector = @selector(getErrors);
  methods[6].selector = @selector(getErrorsWithInt:);
  methods[7].selector = @selector(getNotifications);
  methods[8].selector = @selector(getNotificationsWithInt:);
  methods[9].selector = @selector(getPolicyTree);
  methods[10].selector = @selector(getSubjectPublicKey);
  methods[11].selector = @selector(getTrustAnchor);
  methods[12].selector = @selector(isValidCertPath);
  methods[13].selector = @selector(addNotificationWithLibOrgBouncycastleI18nErrorBundle:);
  methods[14].selector = @selector(addNotificationWithLibOrgBouncycastleI18nErrorBundle:withInt:);
  methods[15].selector = @selector(addErrorWithLibOrgBouncycastleI18nErrorBundle:);
  methods[16].selector = @selector(addErrorWithLibOrgBouncycastleI18nErrorBundle:withInt:);
  methods[17].selector = @selector(doChecks);
  methods[18].selector = @selector(checkNameConstraints);
  methods[19].selector = @selector(checkPathLength);
  methods[20].selector = @selector(checkSignatures);
  methods[21].selector = @selector(checkPolicy);
  methods[22].selector = @selector(checkCriticalExtensions);
  methods[23].selector = @selector(processQcStatementsWithJavaSecurityCertX509Certificate:withInt:);
  methods[24].selector = @selector(IPtoStringWithByteArray:);
  methods[25].selector = @selector(checkRevocationWithJavaSecurityCertPKIXParameters:withJavaSecurityCertX509Certificate:withJavaUtilDate:withJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withJavaUtilVector:withJavaUtilVector:withInt:);
  methods[26].selector = @selector(checkCRLsWithJavaSecurityCertPKIXParameters:withJavaSecurityCertX509Certificate:withJavaUtilDate:withJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withJavaUtilVector:withInt:);
  methods[27].selector = @selector(getCRLDistUrlsWithLibOrgBouncycastleAsn1X509CRLDistPoint:);
  methods[28].selector = @selector(getOCSPUrlsWithLibOrgBouncycastleAsn1X509AuthorityInformationAccess:);
  methods[29].selector = @selector(getCRLWithNSString:);
  methods[30].selector = @selector(getTrustAnchorsWithJavaSecurityCertX509Certificate:withJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "QC_STATEMENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "CRL_DIST_POINTS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "AUTH_INFO_ACCESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "RESOURCE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "certPath_", "LJavaSecurityCertCertPath;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pkixParams_", "LJavaSecurityCertPKIXParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "validDate_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "certs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "notifications_", "[LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "errors_", "[LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "trustAnchor_", "LJavaSecurityCertTrustAnchor;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "subjectPublicKey_", "LJavaSecurityPublicKey;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "policyTree_", "LJavaSecurityCertPolicyNode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LJavaSecurityCertCertPath;LJavaSecurityCertPKIXParameters;", "LLibOrgBouncycastleX509CertPathReviewerException;", "getErrors", "I", "getNotifications", "addNotification", "LLibOrgBouncycastleI18nErrorBundle;", "LLibOrgBouncycastleI18nErrorBundle;I", "addError", "processQcStatements", "LJavaSecurityCertX509Certificate;I", "IPtoString", "[B", "checkRevocation", "LJavaSecurityCertPKIXParameters;LJavaSecurityCertX509Certificate;LJavaUtilDate;LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LJavaUtilVector;LJavaUtilVector;I", "checkCRLs", "LJavaSecurityCertPKIXParameters;LJavaSecurityCertX509Certificate;LJavaUtilDate;LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LJavaUtilVector;I", "getCRLDistUrls", "LLibOrgBouncycastleAsn1X509CRLDistPoint;", "getOCSPUrls", "LLibOrgBouncycastleAsn1X509AuthorityInformationAccess;", "getCRL", "LNSString;", "getTrustAnchors", "LJavaSecurityCertX509Certificate;LJavaUtilSet;", &LibOrgBouncycastleX509PKIXCertPathReviewer_QC_STATEMENT, &LibOrgBouncycastleX509PKIXCertPathReviewer_CRL_DIST_POINTS, &LibOrgBouncycastleX509PKIXCertPathReviewer_AUTH_INFO_ACCESS, &LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME };
  static const J2ObjcClassInfo _LibOrgBouncycastleX509PKIXCertPathReviewer = { "PKIXCertPathReviewer", "lib.org.bouncycastle.x509", ptrTable, methods, fields, 7, 0x1, 31, 15, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleX509PKIXCertPathReviewer;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleX509PKIXCertPathReviewer class]) {
    LibOrgBouncycastleX509PKIXCertPathReviewer_QC_STATEMENT = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, qCStatements))) getId];
    LibOrgBouncycastleX509PKIXCertPathReviewer_CRL_DIST_POINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, cRLDistributionPoints))) getId];
    LibOrgBouncycastleX509PKIXCertPathReviewer_AUTH_INFO_ACCESS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, authorityInfoAccess))) getId];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleX509PKIXCertPathReviewer)
  }
}

@end

void LibOrgBouncycastleX509PKIXCertPathReviewer_initWithJavaSecurityCertCertPath_withJavaSecurityCertPKIXParameters_(LibOrgBouncycastleX509PKIXCertPathReviewer *self, JavaSecurityCertCertPath *certPath, JavaSecurityCertPKIXParameters *params) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_init(self);
  [self init__WithJavaSecurityCertCertPath:certPath withJavaSecurityCertPKIXParameters:params];
}

LibOrgBouncycastleX509PKIXCertPathReviewer *new_LibOrgBouncycastleX509PKIXCertPathReviewer_initWithJavaSecurityCertCertPath_withJavaSecurityCertPKIXParameters_(JavaSecurityCertCertPath *certPath, JavaSecurityCertPKIXParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509PKIXCertPathReviewer, initWithJavaSecurityCertCertPath_withJavaSecurityCertPKIXParameters_, certPath, params)
}

LibOrgBouncycastleX509PKIXCertPathReviewer *create_LibOrgBouncycastleX509PKIXCertPathReviewer_initWithJavaSecurityCertCertPath_withJavaSecurityCertPKIXParameters_(JavaSecurityCertCertPath *certPath, JavaSecurityCertPKIXParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509PKIXCertPathReviewer, initWithJavaSecurityCertCertPath_withJavaSecurityCertPKIXParameters_, certPath, params)
}

void LibOrgBouncycastleX509PKIXCertPathReviewer_init(LibOrgBouncycastleX509PKIXCertPathReviewer *self) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_init(self);
}

LibOrgBouncycastleX509PKIXCertPathReviewer *new_LibOrgBouncycastleX509PKIXCertPathReviewer_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509PKIXCertPathReviewer, init)
}

LibOrgBouncycastleX509PKIXCertPathReviewer *create_LibOrgBouncycastleX509PKIXCertPathReviewer_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509PKIXCertPathReviewer, init)
}

void LibOrgBouncycastleX509PKIXCertPathReviewer_checkNameConstraints(LibOrgBouncycastleX509PKIXCertPathReviewer *self) {
  JavaSecurityCertX509Certificate *cert = nil;
  LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator *nameConstraintValidator = new_LibOrgBouncycastleJceProviderJcePKIXNameConstraintValidator_init();
  jint index;
  jint i;
  @try {
    for (index = [((id<JavaUtilList>) nil_chk(self->certs_)) size] - 1; index > 0; index--) {
      i = self->n_ - index;
      cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(self->certs_)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
      if (!LibOrgBouncycastleX509CertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
        JavaxSecurityAuthX500X500Principal *principal = LibOrgBouncycastleX509CertPathValidatorUtilities_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(cert);
        LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_([((JavaxSecurityAuthX500X500Principal *) nil_chk(principal)) getEncoded]));
        LibOrgBouncycastleAsn1ASN1Sequence *dns;
        @try {
          dns = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([aIn readObject], [LibOrgBouncycastleAsn1ASN1Sequence class]);
        }
        @catch (JavaIoIOException *e) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.ncSubjectNameError", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_(principal) } count:1 type:NSObject_class_()]);
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, e, self->certPath_, index);
        }
        @try {
          [nameConstraintValidator checkPermittedDNWithLibOrgBouncycastleAsn1ASN1Sequence:dns];
        }
        @catch (LibOrgBouncycastleJceProviderPKIXNameConstraintValidatorException *cpve) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.notPermittedDN", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([principal getName]) } count:1 type:NSObject_class_()]);
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, cpve, self->certPath_, index);
        }
        @try {
          [nameConstraintValidator checkExcludedDNWithLibOrgBouncycastleAsn1ASN1Sequence:dns];
        }
        @catch (LibOrgBouncycastleJceProviderPKIXNameConstraintValidatorException *cpve) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.excludedDN", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([principal getName]) } count:1 type:NSObject_class_()]);
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, cpve, self->certPath_, index);
        }
        LibOrgBouncycastleAsn1ASN1Sequence *altName;
        @try {
          altName = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, SUBJECT_ALTERNATIVE_NAME)), [LibOrgBouncycastleAsn1ASN1Sequence class]);
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.subjAltNameExtError");
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, ae, self->certPath_, index);
        }
        if (altName != nil) {
          for (jint j = 0; j < [altName size]; j++) {
            LibOrgBouncycastleAsn1X509GeneralName *name = LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithId_([altName getObjectAtWithInt:j]);
            @try {
              [nameConstraintValidator checkPermittedWithLibOrgBouncycastleAsn1X509GeneralName:name];
              [nameConstraintValidator checkExcludedWithLibOrgBouncycastleAsn1X509GeneralName:name];
            }
            @catch (LibOrgBouncycastleJceProviderPKIXNameConstraintValidatorException *cpve) {
              LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.notPermittedEmail", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_(name) } count:1 type:NSObject_class_()]);
              @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, cpve, self->certPath_, index);
            }
          }
        }
      }
      LibOrgBouncycastleAsn1ASN1Sequence *ncSeq;
      @try {
        ncSeq = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, NAME_CONSTRAINTS)), [LibOrgBouncycastleAsn1ASN1Sequence class]);
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.ncExtError");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, ae, self->certPath_, index);
      }
      if (ncSeq != nil) {
        LibOrgBouncycastleAsn1X509NameConstraints *nc = LibOrgBouncycastleAsn1X509NameConstraints_getInstanceWithId_(ncSeq);
        IOSObjectArray *permitted = [((LibOrgBouncycastleAsn1X509NameConstraints *) nil_chk(nc)) getPermittedSubtrees];
        if (permitted != nil) {
          [nameConstraintValidator intersectPermittedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtreeArray:permitted];
        }
        IOSObjectArray *excluded = [nc getExcludedSubtrees];
        if (excluded != nil) {
          for (jint c = 0; c != excluded->size_; c++) {
            [nameConstraintValidator addExcludedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtree:IOSObjectArray_Get(excluded, c)];
          }
        }
      }
    }
  }
  @catch (LibOrgBouncycastleX509CertPathReviewerException *cpre) {
    [self addErrorWithLibOrgBouncycastleI18nErrorBundle:[cpre getErrorMessage] withInt:[cpre getIndex]];
  }
}

void LibOrgBouncycastleX509PKIXCertPathReviewer_checkPathLength(LibOrgBouncycastleX509PKIXCertPathReviewer *self) {
  jint maxPathLength = self->n_;
  jint totalPathLength = 0;
  JavaSecurityCertX509Certificate *cert = nil;
  jint i;
  for (jint index = [((id<JavaUtilList>) nil_chk(self->certs_)) size] - 1; index > 0; index--) {
    i = self->n_ - index;
    cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(self->certs_)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
    if (!LibOrgBouncycastleX509CertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
      if (maxPathLength <= 0) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.pathLengthExtended");
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg];
      }
      maxPathLength--;
      totalPathLength++;
    }
    LibOrgBouncycastleAsn1X509BasicConstraints *bc;
    @try {
      bc = LibOrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, BASIC_CONSTRAINTS)));
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.processLengthConstError");
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      bc = nil;
    }
    if (bc != nil) {
      JavaMathBigInteger *_pathLengthConstraint = [bc getPathLenConstraint];
      if (_pathLengthConstraint != nil) {
        jint _plc = [_pathLengthConstraint intValue];
        if (_plc < maxPathLength) {
          maxPathLength = _plc;
        }
      }
    }
  }
  LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.totalPathLength", [IOSObjectArray newArrayWithObjects:(id[]){ LibOrgBouncycastleUtilIntegers_valueOfWithInt_(totalPathLength) } count:1 type:NSObject_class_()]);
  [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg];
}

void LibOrgBouncycastleX509PKIXCertPathReviewer_checkSignatures(LibOrgBouncycastleX509PKIXCertPathReviewer *self) {
  JavaSecurityCertTrustAnchor *trust = nil;
  JavaxSecurityAuthX500X500Principal *trustPrincipal = nil;
  {
    LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.certPathValidDate", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_(self->validDate_), create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_(create_JavaUtilDate_init()) } count:2 type:NSObject_class_()]);
    [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg];
  }
  @try {
    JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(self->certs_)) getWithInt:[self->certs_ size] - 1], [JavaSecurityCertX509Certificate class]);
    id<JavaUtilCollection> trustColl = [self getTrustAnchorsWithJavaSecurityCertX509Certificate:cert withJavaUtilSet:[((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) getTrustAnchors]];
    if ([((id<JavaUtilCollection>) nil_chk(trustColl)) size] > 1) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.conflictingTrustAnchors", [IOSObjectArray newArrayWithObjects:(id[]){ LibOrgBouncycastleUtilIntegers_valueOfWithInt_([trustColl size]), create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal]) } count:2 type:NSObject_class_()]);
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg];
    }
    else if ([trustColl isEmpty]) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noTrustAnchorFound", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal]), LibOrgBouncycastleUtilIntegers_valueOfWithInt_([((id<JavaUtilSet>) nil_chk([((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) getTrustAnchors])) size]) } count:2 type:NSObject_class_()]);
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg];
    }
    else {
      id<JavaSecurityPublicKey> trustPublicKey;
      trust = (JavaSecurityCertTrustAnchor *) cast_chk([((id<JavaUtilIterator>) nil_chk([trustColl iterator])) next], [JavaSecurityCertTrustAnchor class]);
      if ([((JavaSecurityCertTrustAnchor *) nil_chk(trust)) getTrustedCert] != nil) {
        trustPublicKey = [((JavaSecurityCertX509Certificate *) nil_chk([trust getTrustedCert])) getPublicKey];
      }
      else {
        trustPublicKey = [trust getCAPublicKey];
      }
      @try {
        LibOrgBouncycastleX509CertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, trustPublicKey, [((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) getSigProvider]);
      }
      @catch (JavaSecuritySignatureException *e) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.trustButInvalidCert");
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
  @catch (LibOrgBouncycastleX509CertPathReviewerException *cpre) {
    [self addErrorWithLibOrgBouncycastleI18nErrorBundle:[cpre getErrorMessage]];
  }
  @catch (JavaLangThrowable *t) {
    LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.unknown", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([t getMessage]), create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_(t) } count:2 type:NSObject_class_()]);
    [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg];
  }
  if (trust != nil) {
    JavaSecurityCertX509Certificate *sign = [trust getTrustedCert];
    @try {
      if (sign != nil) {
        trustPrincipal = LibOrgBouncycastleX509CertPathValidatorUtilities_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(sign);
      }
      else {
        trustPrincipal = new_JavaxSecurityAuthX500X500Principal_initWithNSString_([trust getCAName]);
      }
    }
    @catch (JavaLangIllegalArgumentException *ex) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.trustDNInvalid", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_([trust getCAName]) } count:1 type:NSObject_class_()]);
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg];
    }
    if (sign != nil) {
      IOSBooleanArray *ku = [sign getKeyUsage];
      if (ku != nil && !IOSBooleanArray_Get(ku, 5)) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.trustKeyUsage");
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg];
      }
    }
  }
  id<JavaSecurityPublicKey> workingPublicKey = nil;
  JavaxSecurityAuthX500X500Principal *workingIssuerName = trustPrincipal;
  JavaSecurityCertX509Certificate *sign = nil;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *workingAlgId = nil;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *workingPublicKeyAlgorithm = nil;
  id<LibOrgBouncycastleAsn1ASN1Encodable> workingPublicKeyParameters = nil;
  if (trust != nil) {
    sign = [trust getTrustedCert];
    if (sign != nil) {
      workingPublicKey = [sign getPublicKey];
    }
    else {
      workingPublicKey = [trust getCAPublicKey];
    }
    @try {
      workingAlgId = LibOrgBouncycastleX509CertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(workingPublicKey);
      workingPublicKeyAlgorithm = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(workingAlgId)) getAlgorithm];
      workingPublicKeyParameters = [workingAlgId getParameters];
    }
    @catch (JavaSecurityCertCertPathValidatorException *ex) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.trustPubKeyError");
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg];
      workingAlgId = nil;
    }
  }
  JavaSecurityCertX509Certificate *cert = nil;
  jint i;
  for (jint index = [((id<JavaUtilList>) nil_chk(self->certs_)) size] - 1; index >= 0; index--) {
    i = self->n_ - index;
    cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(self->certs_)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
    if (workingPublicKey != nil) {
      @try {
        LibOrgBouncycastleX509CertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, workingPublicKey, [((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) getSigProvider]);
      }
      @catch (JavaSecurityGeneralSecurityException *ex) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.signatureNotVerified", [IOSObjectArray newArrayWithObjects:(id[]){ [ex getMessage], ex, [[ex java_getClass] getName] } count:3 type:NSObject_class_()]);
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
    }
    else if (LibOrgBouncycastleX509CertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
      @try {
        LibOrgBouncycastleX509CertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getPublicKey], [((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) getSigProvider]);
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.rootKeyIsValidButNotATrustAnchor");
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      @catch (JavaSecurityGeneralSecurityException *ex) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.signatureNotVerified", [IOSObjectArray newArrayWithObjects:(id[]){ [ex getMessage], ex, [[ex java_getClass] getName] } count:3 type:NSObject_class_()]);
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
    }
    else {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.NoIssuerPublicKey");
      IOSByteArray *akiBytes = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, authorityKeyIdentifier))) getId]];
      if (akiBytes != nil) {
        LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier *aki = LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_(akiBytes))) getOctets]);
        LibOrgBouncycastleAsn1X509GeneralNames *issuerNames = [((LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier *) nil_chk(aki)) getAuthorityCertIssuer];
        if (issuerNames != nil) {
          LibOrgBouncycastleAsn1X509GeneralName *name = IOSObjectArray_Get(nil_chk([issuerNames getNames]), 0);
          JavaMathBigInteger *serial = [aki getAuthorityCertSerialNumber];
          if (serial != nil) {
            IOSObjectArray *extraArgs = [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nLocaleString_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"missingIssuer"), @" \"", name, @"\" ", create_LibOrgBouncycastleI18nLocaleString_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"missingSerial"), @" ", serial } count:7 type:NSObject_class_()];
            [msg setExtraArgumentsWithNSObjectArray:extraArgs];
          }
        }
      }
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    }
    @try {
      [((JavaSecurityCertX509Certificate *) nil_chk(cert)) checkValidityWithJavaUtilDate:self->validDate_];
    }
    @catch (JavaSecurityCertCertificateNotYetValidException *cnve) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.certificateNotYetValid", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([cert getNotBefore]) } count:1 type:NSObject_class_()]);
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    }
    @catch (JavaSecurityCertCertificateExpiredException *cee) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.certificateExpired", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_([cert getNotAfter]) } count:1 type:NSObject_class_()]);
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    }
    if ([((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) isRevocationEnabled]) {
      LibOrgBouncycastleAsn1X509CRLDistPoint *crlDistPoints = nil;
      @try {
        LibOrgBouncycastleAsn1ASN1Primitive *crl_dp = LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleX509PKIXCertPathReviewer_CRL_DIST_POINTS);
        if (crl_dp != nil) {
          crlDistPoints = LibOrgBouncycastleAsn1X509CRLDistPoint_getInstanceWithId_(crl_dp);
        }
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlDistPtExtError");
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      LibOrgBouncycastleAsn1X509AuthorityInformationAccess *authInfoAcc = nil;
      @try {
        LibOrgBouncycastleAsn1ASN1Primitive *auth_info_acc = LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleX509PKIXCertPathReviewer_AUTH_INFO_ACCESS);
        if (auth_info_acc != nil) {
          authInfoAcc = LibOrgBouncycastleAsn1X509AuthorityInformationAccess_getInstanceWithId_(auth_info_acc);
        }
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlAuthInfoAccError");
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      JavaUtilVector *crlDistPointUrls = [self getCRLDistUrlsWithLibOrgBouncycastleAsn1X509CRLDistPoint:crlDistPoints];
      JavaUtilVector *ocspUrls = [self getOCSPUrlsWithLibOrgBouncycastleAsn1X509AuthorityInformationAccess:authInfoAcc];
      id<JavaUtilIterator> urlIt = [((JavaUtilVector *) nil_chk(crlDistPointUrls)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(urlIt)) hasNext]) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.crlDistPoint", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedUrlInput_initWithId_([urlIt next]) } count:1 type:NSObject_class_()]);
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      urlIt = [((JavaUtilVector *) nil_chk(ocspUrls)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(urlIt)) hasNext]) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.ocspLocation", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedUrlInput_initWithId_([urlIt next]) } count:1 type:NSObject_class_()]);
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      @try {
        [self checkRevocationWithJavaSecurityCertPKIXParameters:self->pkixParams_ withJavaSecurityCertX509Certificate:cert withJavaUtilDate:self->validDate_ withJavaSecurityCertX509Certificate:sign withJavaSecurityPublicKey:workingPublicKey withJavaUtilVector:crlDistPointUrls withJavaUtilVector:ocspUrls withInt:index];
      }
      @catch (LibOrgBouncycastleX509CertPathReviewerException *cpre) {
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:[cpre getErrorMessage] withInt:index];
      }
    }
    if (workingIssuerName != nil && ![((JavaxSecurityAuthX500X500Principal *) nil_chk([cert getIssuerX500Principal])) isEqual:workingIssuerName]) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.certWrongIssuer", [IOSObjectArray newArrayWithObjects:(id[]){ [workingIssuerName getName], [((JavaxSecurityAuthX500X500Principal *) nil_chk([cert getIssuerX500Principal])) getName] } count:2 type:NSObject_class_()]);
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
    }
    if (i != self->n_) {
      if (cert != nil && [cert getVersion] == 1) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noCACert");
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      LibOrgBouncycastleAsn1X509BasicConstraints *bc;
      @try {
        bc = LibOrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, BASIC_CONSTRAINTS)));
        if (bc != nil) {
          if (![bc isCA]) {
            LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noCACert");
            [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
          }
        }
        else {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noBasicConstraints");
          [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
        }
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.errorProcesingBC");
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      IOSBooleanArray *_usage = [cert getKeyUsage];
      if ((_usage != nil) && !IOSBooleanArray_Get(nil_chk(_usage), LibOrgBouncycastleX509CertPathValidatorUtilities_KEY_CERT_SIGN)) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noCertSign");
        [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
    }
    sign = cert;
    workingIssuerName = [cert getSubjectX500Principal];
    @try {
      workingPublicKey = LibOrgBouncycastleX509CertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_(self->certs_, index);
      workingAlgId = LibOrgBouncycastleX509CertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(workingPublicKey);
      workingPublicKeyAlgorithm = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(workingAlgId)) getAlgorithm];
      workingPublicKeyParameters = [workingAlgId getParameters];
    }
    @catch (JavaSecurityCertCertPathValidatorException *ex) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.pubKeyError");
      [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      workingAlgId = nil;
      workingPublicKeyAlgorithm = nil;
      workingPublicKeyParameters = nil;
    }
  }
  self->trustAnchor_ = trust;
  self->subjectPublicKey_ = workingPublicKey;
}

void LibOrgBouncycastleX509PKIXCertPathReviewer_checkPolicy(LibOrgBouncycastleX509PKIXCertPathReviewer *self) {
  id<JavaUtilSet> userInitialPolicySet = [((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) getInitialPolicies];
  IOSObjectArray *policyNodes = [IOSObjectArray newArrayWithLength:self->n_ + 1 type:JavaUtilArrayList_class_()];
  for (jint j = 0; j < policyNodes->size_; j++) {
    (void) IOSObjectArray_SetAndConsume(policyNodes, j, new_JavaUtilArrayList_init());
  }
  id<JavaUtilSet> policySet = new_JavaUtilHashSet_init();
  [policySet addWithId:LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY];
  LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), 0, policySet, nil, new_JavaUtilHashSet_init(), LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY, false);
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, 0))) addWithId:validPolicyTree];
  jint explicitPolicy;
  if ([((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) isExplicitPolicyRequired]) {
    explicitPolicy = 0;
  }
  else {
    explicitPolicy = self->n_ + 1;
  }
  jint inhibitAnyPolicy;
  if ([((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) isAnyPolicyInhibited]) {
    inhibitAnyPolicy = 0;
  }
  else {
    inhibitAnyPolicy = self->n_ + 1;
  }
  jint policyMapping;
  if ([((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) isPolicyMappingInhibited]) {
    policyMapping = 0;
  }
  else {
    policyMapping = self->n_ + 1;
  }
  id<JavaUtilSet> acceptablePolicies = nil;
  JavaSecurityCertX509Certificate *cert = nil;
  jint index;
  jint i;
  @try {
    for (index = [((id<JavaUtilList>) nil_chk(self->certs_)) size] - 1; index >= 0; index--) {
      i = self->n_ - index;
      cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(self->certs_)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
      LibOrgBouncycastleAsn1ASN1Sequence *certPolicies;
      @try {
        certPolicies = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, CERTIFICATE_POLICIES)), [LibOrgBouncycastleAsn1ASN1Sequence class]);
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyExtError");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, ae, self->certPath_, index);
      }
      if (certPolicies != nil && validPolicyTree != nil) {
        id<JavaUtilEnumeration> e = [certPolicies getObjects];
        id<JavaUtilSet> pols = new_JavaUtilHashSet_init();
        while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
          LibOrgBouncycastleAsn1X509PolicyInformation *pInfo = LibOrgBouncycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
          LibOrgBouncycastleAsn1ASN1ObjectIdentifier *pOid = [((LibOrgBouncycastleAsn1X509PolicyInformation *) nil_chk(pInfo)) getPolicyIdentifier];
          [pols addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(pOid)) getId]];
          if (![((NSString *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY)) isEqual:[pOid getId]]) {
            id<JavaUtilSet> pq;
            @try {
              pq = LibOrgBouncycastleX509CertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_([pInfo getPolicyQualifiers]);
            }
            @catch (JavaSecurityCertCertPathValidatorException *cpve) {
              LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyQualifierError");
              @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, cpve, self->certPath_, index);
            }
            jboolean match = LibOrgBouncycastleX509CertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(i, policyNodes, pOid, pq);
            if (!match) {
              LibOrgBouncycastleX509CertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(i, policyNodes, pOid, pq);
            }
          }
        }
        if (acceptablePolicies == nil || [acceptablePolicies containsWithId:LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY]) {
          acceptablePolicies = pols;
        }
        else {
          id<JavaUtilIterator> it = [acceptablePolicies iterator];
          id<JavaUtilSet> t1 = new_JavaUtilHashSet_init();
          while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
            id o = [it next];
            if ([pols containsWithId:o]) {
              [t1 addWithId:o];
            }
          }
          acceptablePolicies = t1;
        }
        if ((inhibitAnyPolicy > 0) || ((i < self->n_) && LibOrgBouncycastleX509CertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert))) {
          e = [certPolicies getObjects];
          while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
            LibOrgBouncycastleAsn1X509PolicyInformation *pInfo = LibOrgBouncycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
            if ([((NSString *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509PolicyInformation *) nil_chk(pInfo)) getPolicyIdentifier])) getId]]) {
              id<JavaUtilSet> _apq;
              @try {
                _apq = LibOrgBouncycastleX509CertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_([pInfo getPolicyQualifiers]);
              }
              @catch (JavaSecurityCertCertPathValidatorException *cpve) {
                LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyQualifierError");
                @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, cpve, self->certPath_, index);
              }
              id<JavaUtilList> _nodes = IOSObjectArray_Get(policyNodes, i - 1);
              for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodes)) size]; k++) {
                LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_nodes getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
                id<JavaUtilIterator> _policySetIter = [((id<JavaUtilSet>) nil_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getExpectedPolicies])) iterator];
                while ([((id<JavaUtilIterator>) nil_chk(_policySetIter)) hasNext]) {
                  id _tmp = [_policySetIter next];
                  NSString *_policy;
                  if ([_tmp isKindOfClass:[NSString class]]) {
                    _policy = (NSString *) _tmp;
                  }
                  else if ([_tmp isKindOfClass:[LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]]) {
                    _policy = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) _tmp))) getId];
                  }
                  else {
                    continue;
                  }
                  jboolean _found = false;
                  id<JavaUtilIterator> _childrenIter = [_node getChildren];
                  while ([((id<JavaUtilIterator>) nil_chk(_childrenIter)) hasNext]) {
                    LibOrgBouncycastleJceProviderPKIXPolicyNode *_child = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_childrenIter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
                    if ([((NSString *) nil_chk(_policy)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_child)) getValidPolicy]]) {
                      _found = true;
                    }
                  }
                  if (!_found) {
                    id<JavaUtilSet> _newChildExpectedPolicies = new_JavaUtilHashSet_init();
                    [_newChildExpectedPolicies addWithId:_policy];
                    LibOrgBouncycastleJceProviderPKIXPolicyNode *_newChild = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), i, _newChildExpectedPolicies, _node, _apq, _policy, false);
                    [_node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:_newChild];
                    [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) addWithId:_newChild];
                  }
                }
              }
              break;
            }
          }
        }
        for (jint j = (i - 1); j >= 0; j--) {
          id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, j);
          for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
              validPolicyTree = LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, node);
              if (validPolicyTree == nil) {
                break;
              }
            }
          }
        }
        id<JavaUtilSet> criticalExtensionOids = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs];
        if (criticalExtensionOids != nil) {
          jboolean critical = [criticalExtensionOids containsWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, CERTIFICATE_POLICIES)];
          id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, i);
          for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(nodes)) size]; j++) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:j], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) setCriticalWithBoolean:critical];
          }
        }
      }
      if (certPolicies == nil) {
        validPolicyTree = nil;
      }
      if (explicitPolicy <= 0 && validPolicyTree == nil) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.noValidPolicyTree");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
      }
      if (i != self->n_) {
        LibOrgBouncycastleAsn1ASN1Primitive *pm;
        @try {
          pm = LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, POLICY_MAPPINGS));
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyMapExtError");
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, ae, self->certPath_, index);
        }
        if (pm != nil) {
          LibOrgBouncycastleAsn1ASN1Sequence *mappings = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(pm, [LibOrgBouncycastleAsn1ASN1Sequence class]);
          for (jint j = 0; j < [mappings size]; j++) {
            LibOrgBouncycastleAsn1ASN1Sequence *mapping = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([mappings getObjectAtWithInt:j], [LibOrgBouncycastleAsn1ASN1Sequence class]);
            LibOrgBouncycastleAsn1ASN1ObjectIdentifier *ip_id = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(mapping)) getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
            LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sp_id = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([mapping getObjectAtWithInt:1], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
            if ([((NSString *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(ip_id)) getId]]) {
              LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.invalidPolicyMapping");
              @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(msg, self->certPath_, index);
            }
            if ([LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(sp_id)) getId]]) {
              LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.invalidPolicyMapping");
              @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(msg, self->certPath_, index);
            }
          }
        }
        if (pm != nil) {
          LibOrgBouncycastleAsn1ASN1Sequence *mappings = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(pm, [LibOrgBouncycastleAsn1ASN1Sequence class]);
          id<JavaUtilMap> m_idp = new_JavaUtilHashMap_init();
          id<JavaUtilSet> s_idp = new_JavaUtilHashSet_init();
          for (jint j = 0; j < [mappings size]; j++) {
            LibOrgBouncycastleAsn1ASN1Sequence *mapping = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([mappings getObjectAtWithInt:j], [LibOrgBouncycastleAsn1ASN1Sequence class]);
            NSString *id_p = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(mapping)) getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class])))) getId];
            NSString *sd_p = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([mapping getObjectAtWithInt:1], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class])))) getId];
            id<JavaUtilSet> tmp;
            if (![m_idp containsKeyWithId:id_p]) {
              tmp = new_JavaUtilHashSet_init();
              [tmp addWithId:sd_p];
              (void) [m_idp putWithId:id_p withId:tmp];
              [s_idp addWithId:id_p];
            }
            else {
              tmp = (id<JavaUtilSet>) cast_check([m_idp getWithId:id_p], JavaUtilSet_class_());
              [((id<JavaUtilSet>) nil_chk(tmp)) addWithId:sd_p];
            }
          }
          id<JavaUtilIterator> it_idp = [s_idp iterator];
          while ([((id<JavaUtilIterator>) nil_chk(it_idp)) hasNext]) {
            NSString *id_p = (NSString *) cast_chk([it_idp next], [NSString class]);
            if (policyMapping > 0) {
              @try {
                LibOrgBouncycastleX509CertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(i, policyNodes, id_p, m_idp, cert);
              }
              @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
                LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyExtError");
                @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, ae, self->certPath_, index);
              }
              @catch (JavaSecurityCertCertPathValidatorException *cpve) {
                LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyQualifierError");
                @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, cpve, self->certPath_, index);
              }
            }
            else if (policyMapping <= 0) {
              validPolicyTree = LibOrgBouncycastleX509CertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(i, policyNodes, id_p, validPolicyTree);
            }
          }
        }
        if (!LibOrgBouncycastleX509CertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
          if (explicitPolicy != 0) {
            explicitPolicy--;
          }
          if (policyMapping != 0) {
            policyMapping--;
          }
          if (inhibitAnyPolicy != 0) {
            inhibitAnyPolicy--;
          }
        }
        @try {
          LibOrgBouncycastleAsn1ASN1Sequence *pc = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, POLICY_CONSTRAINTS)), [LibOrgBouncycastleAsn1ASN1Sequence class]);
          if (pc != nil) {
            id<JavaUtilEnumeration> policyConstraints = [pc getObjects];
            while ([((id<JavaUtilEnumeration>) nil_chk(policyConstraints)) hasMoreElements]) {
              LibOrgBouncycastleAsn1ASN1TaggedObject *constraint = (LibOrgBouncycastleAsn1ASN1TaggedObject *) cast_chk([policyConstraints nextElement], [LibOrgBouncycastleAsn1ASN1TaggedObject class]);
              jint tmpInt;
              switch ([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(constraint)) getTagNo]) {
                case 0:
                tmpInt = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
                if (tmpInt < explicitPolicy) {
                  explicitPolicy = tmpInt;
                }
                break;
                case 1:
                tmpInt = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
                if (tmpInt < policyMapping) {
                  policyMapping = tmpInt;
                }
                break;
              }
            }
          }
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyConstExtError");
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(msg, self->certPath_, index);
        }
        @try {
          LibOrgBouncycastleAsn1ASN1Integer *iap = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, INHIBIT_ANY_POLICY)), [LibOrgBouncycastleAsn1ASN1Integer class]);
          if (iap != nil) {
            jint _inhibitAnyPolicy = [((JavaMathBigInteger *) nil_chk([iap getValue])) intValue];
            if (_inhibitAnyPolicy < inhibitAnyPolicy) {
              inhibitAnyPolicy = _inhibitAnyPolicy;
            }
          }
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyInhibitExtError");
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(msg, self->certPath_, index);
        }
      }
    }
    if (!LibOrgBouncycastleX509CertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert) && explicitPolicy > 0) {
      explicitPolicy--;
    }
    @try {
      LibOrgBouncycastleAsn1ASN1Sequence *pc = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, POLICY_CONSTRAINTS)), [LibOrgBouncycastleAsn1ASN1Sequence class]);
      if (pc != nil) {
        id<JavaUtilEnumeration> policyConstraints = [pc getObjects];
        while ([((id<JavaUtilEnumeration>) nil_chk(policyConstraints)) hasMoreElements]) {
          LibOrgBouncycastleAsn1ASN1TaggedObject *constraint = (LibOrgBouncycastleAsn1ASN1TaggedObject *) cast_chk([policyConstraints nextElement], [LibOrgBouncycastleAsn1ASN1TaggedObject class]);
          {
            jint tmpInt;
            switch ([((LibOrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(constraint)) getTagNo]) {
              case 0:
              tmpInt = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
              if (tmpInt == 0) {
                explicitPolicy = 0;
              }
              break;
            }
          }
        }
      }
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.policyConstExtError");
      @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(msg, self->certPath_, index);
    }
    LibOrgBouncycastleJceProviderPKIXPolicyNode *intersection;
    if (validPolicyTree == nil) {
      if ([((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) isExplicitPolicyRequired]) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.explicitPolicy");
        @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(msg, self->certPath_, index);
      }
      intersection = nil;
    }
    else if (LibOrgBouncycastleX509CertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(userInitialPolicySet)) {
      if ([((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) isExplicitPolicyRequired]) {
        if ([((id<JavaUtilSet>) nil_chk(acceptablePolicies)) isEmpty]) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.explicitPolicy");
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaSecurityCertCertPath_withInt_(msg, self->certPath_, index);
        }
        else {
          id<JavaUtilSet> _validPolicyNodeSet = new_JavaUtilHashSet_init();
          for (jint j = 0; j < policyNodes->size_; j++) {
            id<JavaUtilList> _nodeDepth = IOSObjectArray_Get(policyNodes, j);
            for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodeDepth)) size]; k++) {
              LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_nodeDepth getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
              if ([((NSString *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
                id<JavaUtilIterator> _iter = [_node getChildren];
                while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
                  [_validPolicyNodeSet addWithId:[_iter next]];
                }
              }
            }
          }
          id<JavaUtilIterator> _vpnsIter = [_validPolicyNodeSet iterator];
          while ([((id<JavaUtilIterator>) nil_chk(_vpnsIter)) hasNext]) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_vpnsIter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            NSString *_validPolicy = [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy];
            if (![acceptablePolicies containsWithId:_validPolicy]) {
            }
          }
          if (validPolicyTree != nil) {
            for (jint j = (self->n_ - 1); j >= 0; j--) {
              id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, j);
              for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
                LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
                if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
                  validPolicyTree = LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, node);
                }
              }
            }
          }
        }
      }
      intersection = validPolicyTree;
    }
    else {
      id<JavaUtilSet> _validPolicyNodeSet = new_JavaUtilHashSet_init();
      for (jint j = 0; j < policyNodes->size_; j++) {
        id<JavaUtilList> _nodeDepth = IOSObjectArray_Get(policyNodes, j);
        for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodeDepth)) size]; k++) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_nodeDepth getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
          if ([((NSString *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
            id<JavaUtilIterator> _iter = [_node getChildren];
            while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
              LibOrgBouncycastleJceProviderPKIXPolicyNode *_c_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_iter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
              if (![LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_c_node)) getValidPolicy]]) {
                [_validPolicyNodeSet addWithId:_c_node];
              }
            }
          }
        }
      }
      id<JavaUtilIterator> _vpnsIter = [_validPolicyNodeSet iterator];
      while ([((id<JavaUtilIterator>) nil_chk(_vpnsIter)) hasNext]) {
        LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_vpnsIter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
        NSString *_validPolicy = [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy];
        if (![((id<JavaUtilSet>) nil_chk(userInitialPolicySet)) containsWithId:_validPolicy]) {
          validPolicyTree = LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, _node);
        }
      }
      if (validPolicyTree != nil) {
        for (jint j = (self->n_ - 1); j >= 0; j--) {
          id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, j);
          for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
            LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
            if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
              validPolicyTree = LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, node);
            }
          }
        }
      }
      intersection = validPolicyTree;
    }
    if ((explicitPolicy <= 0) && (intersection == nil)) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.invalidPolicy");
      @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
    }
    validPolicyTree = intersection;
  }
  @catch (LibOrgBouncycastleX509CertPathReviewerException *cpre) {
    [self addErrorWithLibOrgBouncycastleI18nErrorBundle:[cpre getErrorMessage] withInt:[cpre getIndex]];
    validPolicyTree = nil;
  }
}

void LibOrgBouncycastleX509PKIXCertPathReviewer_checkCriticalExtensions(LibOrgBouncycastleX509PKIXCertPathReviewer *self) {
  id<JavaUtilList> pathCheckers = [((JavaSecurityCertPKIXParameters *) nil_chk(self->pkixParams_)) getCertPathCheckers];
  id<JavaUtilIterator> certIter = [((id<JavaUtilList>) nil_chk(pathCheckers)) iterator];
  @try {
    @try {
      while ([((id<JavaUtilIterator>) nil_chk(certIter)) hasNext]) {
        [((JavaSecurityCertPKIXCertPathChecker *) nil_chk(((JavaSecurityCertPKIXCertPathChecker *) cast_chk([certIter next], [JavaSecurityCertPKIXCertPathChecker class])))) init__WithBoolean:false];
      }
    }
    @catch (JavaSecurityCertCertPathValidatorException *cpve) {
      LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.certPathCheckerError", [IOSObjectArray newArrayWithObjects:(id[]){ [cpve getMessage], cpve, [[cpve java_getClass] getName] } count:3 type:NSObject_class_()]);
      @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_(msg, cpve);
    }
    JavaSecurityCertX509Certificate *cert = nil;
    jint index;
    for (index = [((id<JavaUtilList>) nil_chk(self->certs_)) size] - 1; index >= 0; index--) {
      cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(self->certs_)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
      id<JavaUtilSet> criticalExtensions = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs];
      if (criticalExtensions == nil || [criticalExtensions isEmpty]) {
        continue;
      }
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, KEY_USAGE)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, CERTIFICATE_POLICIES)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, POLICY_MAPPINGS)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, INHIBIT_ANY_POLICY)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, ISSUING_DISTRIBUTION_POINT)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, DELTA_CRL_INDICATOR)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, POLICY_CONSTRAINTS)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, BASIC_CONSTRAINTS)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, SUBJECT_ALTERNATIVE_NAME)];
      [criticalExtensions removeWithId:JreLoadStatic(LibOrgBouncycastleX509CertPathValidatorUtilities, NAME_CONSTRAINTS)];
      if ([criticalExtensions containsWithId:LibOrgBouncycastleX509PKIXCertPathReviewer_QC_STATEMENT]) {
        if (LibOrgBouncycastleX509PKIXCertPathReviewer_processQcStatementsWithJavaSecurityCertX509Certificate_withInt_(self, cert, index)) {
          [criticalExtensions removeWithId:LibOrgBouncycastleX509PKIXCertPathReviewer_QC_STATEMENT];
        }
      }
      id<JavaUtilIterator> tmpIter = [pathCheckers iterator];
      while ([((id<JavaUtilIterator>) nil_chk(tmpIter)) hasNext]) {
        @try {
          [((JavaSecurityCertPKIXCertPathChecker *) nil_chk(((JavaSecurityCertPKIXCertPathChecker *) cast_chk([tmpIter next], [JavaSecurityCertPKIXCertPathChecker class])))) checkWithJavaSecurityCertCertificate:cert withJavaUtilCollection:criticalExtensions];
        }
        @catch (JavaSecurityCertCertPathValidatorException *e) {
          LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.criticalExtensionError", [IOSObjectArray newArrayWithObjects:(id[]){ [e getMessage], e, [[e java_getClass] getName] } count:3 type:NSObject_class_()]);
          @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(msg, [e getCause], self->certPath_, index);
        }
      }
      if (![criticalExtensions isEmpty]) {
        LibOrgBouncycastleI18nErrorBundle *msg;
        id<JavaUtilIterator> it = [criticalExtensions iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.unknownCriticalExt", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_((NSString *) cast_chk([it next], [NSString class])) } count:1 type:NSObject_class_()]);
          [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
        }
      }
    }
  }
  @catch (LibOrgBouncycastleX509CertPathReviewerException *cpre) {
    [self addErrorWithLibOrgBouncycastleI18nErrorBundle:[cpre getErrorMessage] withInt:[cpre getIndex]];
  }
}

jboolean LibOrgBouncycastleX509PKIXCertPathReviewer_processQcStatementsWithJavaSecurityCertX509Certificate_withInt_(LibOrgBouncycastleX509PKIXCertPathReviewer *self, JavaSecurityCertX509Certificate *cert, jint index) {
  @try {
    jboolean unknownStatement = false;
    LibOrgBouncycastleAsn1ASN1Sequence *qcSt = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleX509PKIXCertPathReviewer_QC_STATEMENT), [LibOrgBouncycastleAsn1ASN1Sequence class]);
    for (jint j = 0; j < [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(qcSt)) size]; j++) {
      LibOrgBouncycastleAsn1X509QualifiedQCStatement *stmt = LibOrgBouncycastleAsn1X509QualifiedQCStatement_getInstanceWithId_([qcSt getObjectAtWithInt:j]);
      if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509QualifiedETSIQCObjectIdentifiers, id_etsi_qcs_QcCompliance))) isEqual:[((LibOrgBouncycastleAsn1X509QualifiedQCStatement *) nil_chk(stmt)) getStatementId]]) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.QcEuCompliance");
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509QualifiedRFC3739QCObjectIdentifiers, id_qcs_pkixQCSyntax_v1))) isEqual:[stmt getStatementId]]) {
      }
      else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509QualifiedETSIQCObjectIdentifiers, id_etsi_qcs_QcSSCD))) isEqual:[stmt getStatementId]]) {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.QcSSCD");
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509QualifiedETSIQCObjectIdentifiers, id_etsi_qcs_LimiteValue))) isEqual:[stmt getStatementId]]) {
        LibOrgBouncycastleAsn1X509QualifiedMonetaryValue *limit = LibOrgBouncycastleAsn1X509QualifiedMonetaryValue_getInstanceWithId_([stmt getStatementInfo]);
        LibOrgBouncycastleAsn1X509QualifiedIso4217CurrencyCode *currency = [((LibOrgBouncycastleAsn1X509QualifiedMonetaryValue *) nil_chk(limit)) getCurrency];
        jdouble value = [((JavaMathBigInteger *) nil_chk([limit getAmount])) doubleValue] * JavaLangMath_powWithDouble_withDouble_(10, [((JavaMathBigInteger *) nil_chk([limit getExponent])) doubleValue]);
        LibOrgBouncycastleI18nErrorBundle *msg;
        if ([((LibOrgBouncycastleAsn1X509QualifiedIso4217CurrencyCode *) nil_chk([limit getCurrency])) isAlphabetic]) {
          msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.QcLimitValueAlpha", [IOSObjectArray newArrayWithObjects:(id[]){ [((LibOrgBouncycastleAsn1X509QualifiedIso4217CurrencyCode *) nil_chk([limit getCurrency])) getAlphabetic], create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_(create_JavaLangDouble_initWithDouble_(value)), limit } count:3 type:NSObject_class_()]);
        }
        else {
          msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.QcLimitValueNum", [IOSObjectArray newArrayWithObjects:(id[]){ LibOrgBouncycastleUtilIntegers_valueOfWithInt_([((LibOrgBouncycastleAsn1X509QualifiedIso4217CurrencyCode *) nil_chk([limit getCurrency])) getNumeric]), create_LibOrgBouncycastleI18nFilterTrustedInput_initWithId_(create_JavaLangDouble_initWithDouble_(value)), limit } count:3 type:NSObject_class_()]);
        }
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
      }
      else {
        LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.QcUnknownStatement", [IOSObjectArray newArrayWithObjects:(id[]){ [stmt getStatementId], create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_(stmt) } count:2 type:NSObject_class_()]);
        [self addNotificationWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
        unknownStatement = true;
      }
    }
    return !unknownStatement;
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *ae) {
    LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.QcStatementExtError");
    [self addErrorWithLibOrgBouncycastleI18nErrorBundle:msg withInt:index];
  }
  return false;
}

NSString *LibOrgBouncycastleX509PKIXCertPathReviewer_IPtoStringWithByteArray_(LibOrgBouncycastleX509PKIXCertPathReviewer *self, IOSByteArray *ip) {
  NSString *result;
  @try {
    result = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByAddressWithByteArray_(ip))) getHostAddress];
  }
  @catch (JavaLangException *e) {
    JavaLangStringBuffer *b = new_JavaLangStringBuffer_init();
    for (jint i = 0; i != ((IOSByteArray *) nil_chk(ip))->size_; i++) {
      (void) [b appendWithNSString:JavaLangInteger_toHexStringWithInt_(IOSByteArray_Get(ip, i) & (jint) 0xff)];
      (void) [b appendWithChar:' '];
    }
    result = [b description];
  }
  return result;
}

JavaSecurityCertX509CRL *LibOrgBouncycastleX509PKIXCertPathReviewer_getCRLWithNSString_(LibOrgBouncycastleX509PKIXCertPathReviewer *self, NSString *location) {
  JavaSecurityCertX509CRL *result = nil;
  @try {
    JavaNetURL *url = new_JavaNetURL_initWithNSString_(location);
    if ([((NSString *) nil_chk([url getProtocol])) isEqual:@"http"] || [((NSString *) nil_chk([url getProtocol])) isEqual:@"https"]) {
      JavaNetHttpURLConnection *conn = (JavaNetHttpURLConnection *) cast_chk([url openConnection], [JavaNetHttpURLConnection class]);
      [((JavaNetHttpURLConnection *) nil_chk(conn)) setUseCachesWithBoolean:false];
      [conn setDoInputWithBoolean:true];
      [conn connect];
      if ([conn getResponseCode] == JavaNetHttpURLConnection_HTTP_OK) {
        JavaSecurityCertCertificateFactory *cf = JavaSecurityCertCertificateFactory_getInstanceWithNSString_withNSString_(@"X.509", @"BC");
        result = (JavaSecurityCertX509CRL *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(cf)) generateCRLWithJavaIoInputStream:[conn getInputStream]], [JavaSecurityCertX509CRL class]);
      }
      else {
        @throw new_JavaLangException_initWithNSString_([conn getResponseMessage]);
      }
    }
  }
  @catch (JavaLangException *e) {
    LibOrgBouncycastleI18nErrorBundle *msg = new_LibOrgBouncycastleI18nErrorBundle_initWithNSString_withNSString_withNSObjectArray_(LibOrgBouncycastleX509PKIXCertPathReviewer_RESOURCE_NAME, @"CertPathReviewer.loadCrlDistPointError", [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleI18nFilterUntrustedInput_initWithId_(location), [e getMessage], e, [[e java_getClass] getName] } count:4 type:NSObject_class_()]);
    @throw new_LibOrgBouncycastleX509CertPathReviewerException_initWithLibOrgBouncycastleI18nErrorBundle_(msg);
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleX509PKIXCertPathReviewer)
