//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CertificateStatusType.java
//

#ifndef CertificateStatusType_H
#define CertificateStatusType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsCertificateStatusType : NSObject
@property (readonly, class) jshort ocsp NS_SWIFT_NAME(ocsp);

+ (jshort)ocsp;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsCertificateStatusType)

inline jshort LibOrgBouncycastleCryptoTlsCertificateStatusType_get_ocsp(void);
#define LibOrgBouncycastleCryptoTlsCertificateStatusType_ocsp 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsCertificateStatusType, ocsp, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCertificateStatusType_init(LibOrgBouncycastleCryptoTlsCertificateStatusType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateStatusType *new_LibOrgBouncycastleCryptoTlsCertificateStatusType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificateStatusType *create_LibOrgBouncycastleCryptoTlsCertificateStatusType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCertificateStatusType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificateStatusType_H
