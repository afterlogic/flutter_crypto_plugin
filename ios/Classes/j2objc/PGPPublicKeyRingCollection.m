//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPPublicKeyRingCollection.java
//

#include "BCPGOutputStream.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFingerPrintCalculator.h"
#include "PGPException.h"
#include "PGPObjectFactory.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPPublicKeyRingCollection.h"
#include "Strings.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@interface LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection () {
 @public
  id<JavaUtilMap> pubRings_;
  id<JavaUtilList> order_;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)pubRings
                   withJavaUtilList:(id<JavaUtilList>)order;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, pubRings_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, order_, id<JavaUtilList>)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *self, id<JavaUtilMap> pubRings, id<JavaUtilList> order);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(id<JavaUtilMap> pubRings, id<JavaUtilList> order) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(id<JavaUtilMap> pubRings, id<JavaUtilList> order);

@implementation LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)pubRings
                   withJavaUtilList:(id<JavaUtilList>)order {
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(self, pubRings, order);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)encoding
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, encoding, fingerPrintCalculator);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, inArg, fingerPrintCalculator);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilCollection_(self, collection);
  return self;
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(order_)) size];
}

- (id<JavaUtilIterator>)getKeyRings {
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(pubRings_)) values])) iterator];
}

- (id<JavaUtilIterator>)getKeyRingsWithNSString:(NSString *)userID {
  return [self getKeyRingsWithNSString:userID withBoolean:false withBoolean:false];
}

- (id<JavaUtilIterator>)getKeyRingsWithNSString:(NSString *)userID
                                    withBoolean:(jboolean)matchPartial {
  return [self getKeyRingsWithNSString:userID withBoolean:matchPartial withBoolean:false];
}

- (id<JavaUtilIterator>)getKeyRingsWithNSString:(NSString *)userID
                                    withBoolean:(jboolean)matchPartial
                                    withBoolean:(jboolean)ignoreCase {
  id<JavaUtilIterator> it = [self getKeyRings];
  id<JavaUtilList> rings = new_JavaUtilArrayList_init();
  if (ignoreCase) {
    userID = LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(userID);
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pubRing = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    id<JavaUtilIterator> uIt = [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(pubRing)) getPublicKey])) getUserIDs];
    while ([((id<JavaUtilIterator>) nil_chk(uIt)) hasNext]) {
      NSString *next = (NSString *) cast_chk([uIt next], [NSString class]);
      if (ignoreCase) {
        next = LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(next);
      }
      if (matchPartial) {
        if ([((NSString *) nil_chk(next)) java_indexOfString:userID] > -1) {
          [rings addWithId:pubRing];
        }
      }
      else {
        if ([((NSString *) nil_chk(next)) isEqual:userID]) {
          [rings addWithId:pubRing];
        }
      }
    }
  }
  return [rings iterator];
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithLong:(jlong)keyID {
  id<JavaUtilIterator> it = [self getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pubRing = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    LibOrgBouncycastleOpenpgpPGPPublicKey *pub = [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(pubRing)) getPublicKeyWithLong:keyID];
    if (pub != nil) {
      return pub;
    }
  }
  return nil;
}

- (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)getPublicKeyRingWithLong:(jlong)keyID {
  JavaLangLong *id_ = new_JavaLangLong_initWithLong_(keyID);
  if ([((id<JavaUtilMap>) nil_chk(pubRings_)) containsKeyWithId:id_]) {
    return (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([((id<JavaUtilMap>) nil_chk(pubRings_)) getWithId:id_], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
  }
  id<JavaUtilIterator> it = [self getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pubRing = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    LibOrgBouncycastleOpenpgpPGPPublicKey *pub = [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(pubRing)) getPublicKeyWithLong:keyID];
    if (pub != nil) {
      return pubRing;
    }
  }
  return nil;
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithByteArray:(IOSByteArray *)fingerprint {
  id<JavaUtilIterator> it = [self getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pubRing = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    LibOrgBouncycastleOpenpgpPGPPublicKey *pub = [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(pubRing)) getPublicKeyWithByteArray:fingerprint];
    if (pub != nil) {
      return pub;
    }
  }
  return nil;
}

- (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)getPublicKeyRingWithByteArray:(IOSByteArray *)fingerprint {
  id<JavaUtilIterator> it = [self getKeyRings];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pubRing = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    LibOrgBouncycastleOpenpgpPGPPublicKey *pub = [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(pubRing)) getPublicKeyWithByteArray:fingerprint];
    if (pub != nil) {
      return pubRing;
    }
  }
  return nil;
}

- (id<JavaUtilIterator>)getKeysWithSignaturesByWithLong:(jlong)keyID {
  id<JavaUtilList> keysWithSigs = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *k = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    for (id<JavaUtilIterator> keyIt = [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(k)) getKeysWithSignaturesByWithLong:keyID]; [((id<JavaUtilIterator>) nil_chk(keyIt)) hasNext]; ) {
      [keysWithSigs addWithId:[keyIt next]];
    }
  }
  return [keysWithSigs iterator];
}

- (jboolean)containsWithLong:(jlong)keyID {
  return [self getPublicKeyWithLong:keyID] != nil;
}

- (jboolean)containsWithByteArray:(IOSByteArray *)fingerprint {
  return [self getPublicKeyWithByteArray:fingerprint] != nil;
}

- (IOSByteArray *)getEncoded {
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [self encodeWithJavaIoOutputStream:bOut];
  return [bOut toByteArray];
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream {
  LibOrgBouncycastleBcpgBCPGOutputStream *out;
  if ([outStream isKindOfClass:[LibOrgBouncycastleBcpgBCPGOutputStream class]]) {
    out = (LibOrgBouncycastleBcpgBCPGOutputStream *) outStream;
  }
  else {
    out = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_(outStream);
  }
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(order_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *sr = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([((id<JavaUtilMap>) nil_chk(pubRings_)) getWithId:[it next]], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(sr)) encodeWithJavaIoOutputStream:out];
  }
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *)addPublicKeyRingWithLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection:(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *)ringCollection
                                                                                   withLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)publicKeyRing {
  return LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_addPublicKeyRingWithLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_withLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(ringCollection, publicKeyRing);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *)removePublicKeyRingWithLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection:(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *)ringCollection
                                                                                      withLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)publicKeyRing {
  return LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_removePublicKeyRingWithLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_withLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(ringCollection, publicKeyRing);
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(pubRings_)) values])) iterator];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 2, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 7, 8, 9, 10, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 7, 11, 9, 12, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 7, 13, 9, 14, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, 15, 16, 9, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", 0x1, 17, 16, 9, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, 15, 18, 9, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", 0x1, 17, 18, 9, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 19, 16, -1, 20, -1, -1 },
    { NULL, "Z", 0x1, 21, 16, 9, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 18, 9, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 22, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, 22, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection;", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection;", 0x9, 27, 26, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilMap:withJavaUtilList:);
  methods[1].selector = @selector(initWithByteArray:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[2].selector = @selector(initWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[3].selector = @selector(initWithJavaUtilCollection:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(getKeyRings);
  methods[6].selector = @selector(getKeyRingsWithNSString:);
  methods[7].selector = @selector(getKeyRingsWithNSString:withBoolean:);
  methods[8].selector = @selector(getKeyRingsWithNSString:withBoolean:withBoolean:);
  methods[9].selector = @selector(getPublicKeyWithLong:);
  methods[10].selector = @selector(getPublicKeyRingWithLong:);
  methods[11].selector = @selector(getPublicKeyWithByteArray:);
  methods[12].selector = @selector(getPublicKeyRingWithByteArray:);
  methods[13].selector = @selector(getKeysWithSignaturesByWithLong:);
  methods[14].selector = @selector(containsWithLong:);
  methods[15].selector = @selector(containsWithByteArray:);
  methods[16].selector = @selector(getEncoded);
  methods[17].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[18].selector = @selector(addPublicKeyRingWithLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection:withLibOrgBouncycastleOpenpgpPGPPublicKeyRing:);
  methods[19].selector = @selector(removePublicKeyRingWithLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection:withLibOrgBouncycastleOpenpgpPGPPublicKeyRing:);
  methods[20].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pubRings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "order_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;LJavaUtilList;", "[BLLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LJavaUtilCollection;", "(Ljava/util/Collection<Llib/org/bouncycastle/openpgp/PGPPublicKeyRing;>;)V", "()Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPPublicKeyRing;>;", "getKeyRings", "LNSString;", "LLibOrgBouncycastleOpenpgpPGPException;", "(Ljava/lang/String;)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPPublicKeyRing;>;", "LNSString;Z", "(Ljava/lang/String;Z)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPPublicKeyRing;>;", "LNSString;ZZ", "(Ljava/lang/String;ZZ)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPPublicKeyRing;>;", "getPublicKey", "J", "getPublicKeyRing", "[B", "getKeysWithSignaturesBy", "(J)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPPublicKey;>;", "contains", "LJavaIoIOException;", "encode", "LJavaIoOutputStream;", "addPublicKeyRing", "LLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection;LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", "removePublicKeyRing", "Ljava/lang/Object;Llib/org/bouncycastle/util/Iterable<Llib/org/bouncycastle/openpgp/PGPPublicKeyRing;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection = { "PGPPublicKeyRingCollection", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 21, 2, -1, -1, -1, 28, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection;
}

@end

void LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *self, id<JavaUtilMap> pubRings, id<JavaUtilList> order) {
  NSObject_init(self);
  self->pubRings_ = new_JavaUtilHashMap_init();
  self->order_ = new_JavaUtilArrayList_init();
  self->pubRings_ = pubRings;
  self->order_ = order;
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(id<JavaUtilMap> pubRings, id<JavaUtilList> order) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, initWithJavaUtilMap_withJavaUtilList_, pubRings, order)
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(id<JavaUtilMap> pubRings, id<JavaUtilList> order) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, initWithJavaUtilMap_withJavaUtilList_, pubRings, order)
}

void LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *self, IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, new_JavaIoByteArrayInputStream_initWithByteArray_(encoding), fingerPrintCalculator);
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, encoding, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *encoding, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, encoding, fingerPrintCalculator)
}

void LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *self, JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  NSObject_init(self);
  self->pubRings_ = new_JavaUtilHashMap_init();
  self->order_ = new_JavaUtilArrayList_init();
  LibOrgBouncycastleOpenpgpPGPObjectFactory *pgpFact = new_LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(inArg, fingerPrintCalculator);
  id obj;
  while ((obj = [pgpFact nextObject]) != nil) {
    if (!([obj isKindOfClass:[LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]])) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$$", [[nil_chk(obj) java_getClass] getName], @" found where PGPPublicKeyRing expected"));
    }
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pgpPub = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk(obj, [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    JavaLangLong *key = new_JavaLangLong_initWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(pgpPub)) getPublicKey])) getKeyID]);
    (void) [((id<JavaUtilMap>) nil_chk(self->pubRings_)) putWithId:key withId:pgpPub];
    [((id<JavaUtilList>) nil_chk(self->order_)) addWithId:key];
  }
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, inArg, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, inArg, fingerPrintCalculator)
}

void LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilCollection_(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *self, id<JavaUtilCollection> collection) {
  NSObject_init(self);
  self->pubRings_ = new_JavaUtilHashMap_init();
  self->order_ = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *pgpPub = (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPPublicKeyRing class]);
    JavaLangLong *key = new_JavaLangLong_initWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(pgpPub)) getPublicKey])) getKeyID]);
    (void) [((id<JavaUtilMap>) nil_chk(self->pubRings_)) putWithId:key withId:pgpPub];
    [((id<JavaUtilList>) nil_chk(self->order_)) addWithId:key];
  }
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, initWithJavaUtilCollection_, collection)
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *create_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection, initWithJavaUtilCollection_, collection)
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_addPublicKeyRingWithLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_withLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *ringCollection, LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeyRing) {
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initialize();
  JavaLangLong *key = new_JavaLangLong_initWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(publicKeyRing)) getPublicKey])) getKeyID]);
  if ([((id<JavaUtilMap>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *) nil_chk(ringCollection))->pubRings_)) containsKeyWithId:key]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Collection already contains a key with a keyID for the passed in ring.");
  }
  id<JavaUtilMap> newPubRings = new_JavaUtilHashMap_initWithJavaUtilMap_(ringCollection->pubRings_);
  id<JavaUtilList> newOrder = new_JavaUtilArrayList_initWithJavaUtilCollection_(ringCollection->order_);
  (void) [newPubRings putWithId:key withId:publicKeyRing];
  [newOrder addWithId:key];
  return new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(newPubRings, newOrder);
}

LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_removePublicKeyRingWithLibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_withLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *ringCollection, LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeyRing) {
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initialize();
  JavaLangLong *key = new_JavaLangLong_initWithLong_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(publicKeyRing)) getPublicKey])) getKeyID]);
  if (![((id<JavaUtilMap>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *) nil_chk(ringCollection))->pubRings_)) containsKeyWithId:key]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Collection does not contain a key with a keyID for the passed in ring.");
  }
  id<JavaUtilMap> newPubRings = new_JavaUtilHashMap_initWithJavaUtilMap_(ringCollection->pubRings_);
  id<JavaUtilList> newOrder = new_JavaUtilArrayList_initWithJavaUtilCollection_(ringCollection->order_);
  (void) [newPubRings removeWithId:key];
  for (jint i = 0; i < [newOrder size]; i++) {
    JavaLangLong *r = (JavaLangLong *) cast_chk([newOrder getWithInt:i], [JavaLangLong class]);
    if ([((JavaLangLong *) nil_chk(r)) longLongValue] == [key longLongValue]) {
      (void) [newOrder removeWithInt:i];
      break;
    }
  }
  return new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaUtilMap_withJavaUtilList_(newPubRings, newOrder);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection)
