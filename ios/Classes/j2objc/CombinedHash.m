//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CombinedHash.java
//

#include "CombinedHash.h"
#include "Digest.h"
#include "HashAlgorithm.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SSL3Mac.h"
#include "SecurityParameters.h"
#include "TlsContext.h"
#include "TlsHandshakeHash.h"
#include "TlsUtils.h"
#include "java/lang/IllegalStateException.h"

@implementation LibOrgBouncycastleCryptoTlsCombinedHash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsCombinedHash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoTlsCombinedHash:(LibOrgBouncycastleCryptoTlsCombinedHash *)t {
  LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(self, t);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context {
  self->context_ = context;
}

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)notifyPRFDetermined {
  return self;
}

- (void)trackHashAlgorithmWithShort:(jshort)hashAlgorithm {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"CombinedHash only supports calculating the legacy PRF for handshake hash");
}

- (void)sealHashAlgorithms {
}

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)stopTracking {
  return new_LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(self);
}

- (id<LibOrgBouncycastleCryptoDigest>)forkPRFHash {
  return new_LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(self);
}

- (IOSByteArray *)getFinalHashWithShort:(jshort)hashAlgorithm {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"CombinedHash doesn't support multiple hashes");
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$$", [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(md5_)) getAlgorithmName], @" and ", [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(sha1_)) getAlgorithmName]);
}

- (jint)getDigestSize {
  return [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(md5_)) getDigestSize] + [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(sha1_)) getDigestSize];
}

- (void)updateWithByte:(jbyte)input {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(md5_)) updateWithByte:input];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(sha1_)) updateWithByte:input];
}

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(md5_)) updateWithByteArray:input withInt:inOff withInt:len];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(sha1_)) updateWithByteArray:input withInt:inOff withInt:len];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff {
  if (context_ != nil && LibOrgBouncycastleCryptoTlsTlsUtils_isSSLWithLibOrgBouncycastleCryptoTlsTlsContext_(context_)) {
    [self ssl3CompleteWithLibOrgBouncycastleCryptoDigest:md5_ withByteArray:JreLoadStatic(LibOrgBouncycastleCryptoTlsSSL3Mac, IPAD) withByteArray:JreLoadStatic(LibOrgBouncycastleCryptoTlsSSL3Mac, OPAD) withInt:48];
    [self ssl3CompleteWithLibOrgBouncycastleCryptoDigest:sha1_ withByteArray:JreLoadStatic(LibOrgBouncycastleCryptoTlsSSL3Mac, IPAD) withByteArray:JreLoadStatic(LibOrgBouncycastleCryptoTlsSSL3Mac, OPAD) withInt:40];
  }
  jint i1 = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(md5_)) doFinalWithByteArray:output withInt:outOff];
  jint i2 = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(sha1_)) doFinalWithByteArray:output withInt:outOff + i1];
  return i1 + i2;
}

- (void)reset {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(md5_)) reset];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(sha1_)) reset];
}

- (void)ssl3CompleteWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)d
                                         withByteArray:(IOSByteArray *)ipad
                                         withByteArray:(IOSByteArray *)opad
                                               withInt:(jint)padLength {
  IOSByteArray *master_secret = ((LibOrgBouncycastleCryptoTlsSecurityParameters *) nil_chk([((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters]))->masterSecret_;
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:master_secret withInt:0 withInt:((IOSByteArray *) nil_chk(master_secret))->size_];
  [d updateWithByteArray:ipad withInt:0 withInt:padLength];
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:[d getDigestSize]];
  [d doFinalWithByteArray:tmp withInt:0];
  [d updateWithByteArray:master_secret withInt:0 withInt:master_secret->size_];
  [d updateWithByteArray:opad withInt:0 withInt:padLength];
  [d updateWithByteArray:tmp withInt:0 withInt:tmp->size_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsHandshakeHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsHandshakeHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoTlsCombinedHash:);
  methods[2].selector = @selector(init__WithLibOrgBouncycastleCryptoTlsTlsContext:);
  methods[3].selector = @selector(notifyPRFDetermined);
  methods[4].selector = @selector(trackHashAlgorithmWithShort:);
  methods[5].selector = @selector(sealHashAlgorithms);
  methods[6].selector = @selector(stopTracking);
  methods[7].selector = @selector(forkPRFHash);
  methods[8].selector = @selector(getFinalHashWithShort:);
  methods[9].selector = @selector(getAlgorithmName);
  methods[10].selector = @selector(getDigestSize);
  methods[11].selector = @selector(updateWithByte:);
  methods[12].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(doFinalWithByteArray:withInt:);
  methods[14].selector = @selector(reset);
  methods[15].selector = @selector(ssl3CompleteWithLibOrgBouncycastleCryptoDigest:withByteArray:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LLibOrgBouncycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "md5_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sha1_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoTlsCombinedHash;", "init", "LLibOrgBouncycastleCryptoTlsTlsContext;", "trackHashAlgorithm", "S", "getFinalHash", "update", "B", "[BII", "doFinal", "[BI", "ssl3Complete", "LLibOrgBouncycastleCryptoDigest;[B[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsCombinedHash = { "CombinedHash", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 16, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsCombinedHash;
}

@end

void LibOrgBouncycastleCryptoTlsCombinedHash_init(LibOrgBouncycastleCryptoTlsCombinedHash *self) {
  NSObject_init(self);
  self->md5_ = LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_(LibOrgBouncycastleCryptoTlsHashAlgorithm_md5);
  self->sha1_ = LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_(LibOrgBouncycastleCryptoTlsHashAlgorithm_sha1);
}

LibOrgBouncycastleCryptoTlsCombinedHash *new_LibOrgBouncycastleCryptoTlsCombinedHash_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsCombinedHash, init)
}

LibOrgBouncycastleCryptoTlsCombinedHash *create_LibOrgBouncycastleCryptoTlsCombinedHash_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsCombinedHash, init)
}

void LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(LibOrgBouncycastleCryptoTlsCombinedHash *self, LibOrgBouncycastleCryptoTlsCombinedHash *t) {
  NSObject_init(self);
  self->context_ = ((LibOrgBouncycastleCryptoTlsCombinedHash *) nil_chk(t))->context_;
  self->md5_ = LibOrgBouncycastleCryptoTlsTlsUtils_cloneHashWithShort_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoTlsHashAlgorithm_md5, t->md5_);
  self->sha1_ = LibOrgBouncycastleCryptoTlsTlsUtils_cloneHashWithShort_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoTlsHashAlgorithm_sha1, t->sha1_);
}

LibOrgBouncycastleCryptoTlsCombinedHash *new_LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(LibOrgBouncycastleCryptoTlsCombinedHash *t) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsCombinedHash, initWithLibOrgBouncycastleCryptoTlsCombinedHash_, t)
}

LibOrgBouncycastleCryptoTlsCombinedHash *create_LibOrgBouncycastleCryptoTlsCombinedHash_initWithLibOrgBouncycastleCryptoTlsCombinedHash_(LibOrgBouncycastleCryptoTlsCombinedHash *t) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsCombinedHash, initWithLibOrgBouncycastleCryptoTlsCombinedHash_, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsCombinedHash)
