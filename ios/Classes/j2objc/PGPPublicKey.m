//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPPublicKey.java
//

#include "ASN1ObjectIdentifier.h"
#include "Arrays.h"
#include "BCPGKey.h"
#include "BCPGOutputStream.h"
#include "ContainedPacket.h"
#include "DSAPublicBCPGKey.h"
#include "ECCurve.h"
#include "ECNamedCurveTable.h"
#include "ECPublicBCPGKey.h"
#include "ElGamalPublicBCPGKey.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFingerPrintCalculator.h"
#include "PGPPublicKey.h"
#include "PGPSignature.h"
#include "PGPSignatureSubpacketVector.h"
#include "PGPUserAttributeSubpacketVector.h"
#include "PublicKeyAlgorithmTags.h"
#include "PublicKeyPacket.h"
#include "RSAPublicBCPGKey.h"
#include "TrustPacket.h"
#include "UserAttributePacket.h"
#include "UserIDPacket.h"
#include "X9ECParameters.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleOpenpgpPGPPublicKey () {
 @public
  jlong keyID_;
  IOSByteArray *fingerprint_;
  jint keyStrength_;
}

- (void)init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator OBJC_METHOD_FAMILY_NONE;

- (jlong)getExpirationTimeFromSigWithBoolean:(jboolean)selfSigned
                                     withInt:(jint)signatureType;

- (id<JavaUtilIterator>)getSignaturesForIDWithLibOrgBouncycastleBcpgUserIDPacket:(LibOrgBouncycastleBcpgUserIDPacket *)id_;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                     withId:(id)id_
                                                  withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                        withId:(id)id_;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                        withId:(id)id_
                                                     withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPPublicKey, fingerprint_, IOSByteArray *)

inline IOSIntArray *LibOrgBouncycastleOpenpgpPGPPublicKey_get_MASTER_KEY_CERTIFICATION_TYPES(void);
static IOSIntArray *LibOrgBouncycastleOpenpgpPGPPublicKey_MASTER_KEY_CERTIFICATION_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleOpenpgpPGPPublicKey, MASTER_KEY_CERTIFICATION_TYPES, IOSIntArray *)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPPublicKey_init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

__attribute__((unused)) static jlong LibOrgBouncycastleOpenpgpPGPPublicKey_getExpirationTimeFromSigWithBoolean_withInt_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, jboolean selfSigned, jint signatureType);

__attribute__((unused)) static id<JavaUtilIterator> LibOrgBouncycastleOpenpgpPGPPublicKey_getSignaturesForIDWithLibOrgBouncycastleBcpgUserIDPacket_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleBcpgUserIDPacket *id_);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, id id_, LibOrgBouncycastleOpenpgpPGPSignature *certification);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, id id_);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, id id_, LibOrgBouncycastleOpenpgpPGPSignature *certification);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleOpenpgpPGPPublicKey)

@implementation LibOrgBouncycastleOpenpgpPGPPublicKey

- (void)init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPPublicKey_init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, fingerPrintCalculator);
}

- (instancetype)initWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)publicKeyPacket
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, publicKeyPacket, fingerPrintCalculator);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)publicPk
                        withLibOrgBouncycastleBcpgTrustPacket:(LibOrgBouncycastleBcpgTrustPacket *)trustPk
                                             withJavaUtilList:(id<JavaUtilList>)sigs
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, publicPk, trustPk, sigs, fingerPrintCalculator);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                        withLibOrgBouncycastleBcpgTrustPacket:(LibOrgBouncycastleBcpgTrustPacket *)trust
                                             withJavaUtilList:(id<JavaUtilList>)subSigs {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_(self, key, trust, subSigs);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(self, pubKey);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)publicPk
                        withLibOrgBouncycastleBcpgTrustPacket:(LibOrgBouncycastleBcpgTrustPacket *)trustPk
                                             withJavaUtilList:(id<JavaUtilList>)keySigs
                                             withJavaUtilList:(id<JavaUtilList>)ids
                                             withJavaUtilList:(id<JavaUtilList>)idTrusts
                                             withJavaUtilList:(id<JavaUtilList>)idSigs
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, publicPk, trustPk, keySigs, ids, idTrusts, idSigs, fingerPrintCalculator);
  return self;
}

- (jint)getVersion {
  return [((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk_)) getVersion];
}

- (JavaUtilDate *)getCreationTime {
  return [((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk_)) getTime];
}

- (jint)getValidDays {
  if ([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk_)) getVersion] > 3) {
    jlong delta = [self getValidSeconds] % (24 * 60 * 60);
    jint days = (jint) ([self getValidSeconds] / (24 * 60 * 60));
    if (delta > 0 && days == 0) {
      return 1;
    }
    else {
      return days;
    }
  }
  else {
    return [((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk_)) getValidDays];
  }
}

- (IOSByteArray *)getTrustData {
  if (trustPk_ == nil) {
    return nil;
  }
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_([trustPk_ getLevelAndTrustAmount]);
}

- (jlong)getValidSeconds {
  if ([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk_)) getVersion] > 3) {
    if ([self isMasterKey]) {
      for (jint i = 0; i != ((IOSIntArray *) nil_chk(LibOrgBouncycastleOpenpgpPGPPublicKey_MASTER_KEY_CERTIFICATION_TYPES))->size_; i++) {
        jlong seconds = LibOrgBouncycastleOpenpgpPGPPublicKey_getExpirationTimeFromSigWithBoolean_withInt_(self, true, IOSIntArray_Get(LibOrgBouncycastleOpenpgpPGPPublicKey_MASTER_KEY_CERTIFICATION_TYPES, i));
        if (seconds >= 0) {
          return seconds;
        }
      }
    }
    else {
      jlong seconds = LibOrgBouncycastleOpenpgpPGPPublicKey_getExpirationTimeFromSigWithBoolean_withInt_(self, false, LibOrgBouncycastleOpenpgpPGPSignature_SUBKEY_BINDING);
      if (seconds >= 0) {
        return seconds;
      }
    }
    return 0;
  }
  else {
    return (jlong) [((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk_)) getValidDays] * 24 * 60 * 60;
  }
}

- (jlong)getExpirationTimeFromSigWithBoolean:(jboolean)selfSigned
                                     withInt:(jint)signatureType {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_getExpirationTimeFromSigWithBoolean_withInt_(self, selfSigned, signatureType);
}

- (jlong)getKeyID {
  return keyID_;
}

- (IOSByteArray *)getFingerprint {
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(fingerprint_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(fingerprint_, 0, tmp, 0, tmp->size_);
  return tmp;
}

- (jboolean)isEncryptionKey {
  jint algorithm = [((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk_)) getAlgorithm];
  return ((algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL) || (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT) || (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT) || (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL) || algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH);
}

- (jboolean)isMasterKey {
  return subSigs_ == nil;
}

- (jint)getAlgorithm {
  return [((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk_)) getAlgorithm];
}

- (jint)getBitStrength {
  return keyStrength_;
}

- (id<JavaUtilIterator>)getUserIDs {
  id<JavaUtilList> temp = new_JavaUtilArrayList_init();
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(ids_)) size]; i++) {
    if ([[((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i] isKindOfClass:[LibOrgBouncycastleBcpgUserIDPacket class]]) {
      [temp addWithId:[((LibOrgBouncycastleBcpgUserIDPacket *) nil_chk(((LibOrgBouncycastleBcpgUserIDPacket *) cast_chk([((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i], [LibOrgBouncycastleBcpgUserIDPacket class])))) getID]];
    }
  }
  return [temp iterator];
}

- (id<JavaUtilIterator>)getRawUserIDs {
  id<JavaUtilList> temp = new_JavaUtilArrayList_init();
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(ids_)) size]; i++) {
    if ([[((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i] isKindOfClass:[LibOrgBouncycastleBcpgUserIDPacket class]]) {
      [temp addWithId:[((LibOrgBouncycastleBcpgUserIDPacket *) nil_chk(((LibOrgBouncycastleBcpgUserIDPacket *) cast_chk([((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i], [LibOrgBouncycastleBcpgUserIDPacket class])))) getRawID]];
    }
  }
  return [temp iterator];
}

- (id<JavaUtilIterator>)getUserAttributes {
  id<JavaUtilList> temp = new_JavaUtilArrayList_init();
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(ids_)) size]; i++) {
    if ([[((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i] isKindOfClass:[LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector class]]) {
      [temp addWithId:[((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i]];
    }
  }
  return [temp iterator];
}

- (id<JavaUtilIterator>)getSignaturesForIDWithNSString:(NSString *)id_ {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_getSignaturesForIDWithLibOrgBouncycastleBcpgUserIDPacket_(self, new_LibOrgBouncycastleBcpgUserIDPacket_initWithNSString_(id_));
}

- (id<JavaUtilIterator>)getSignaturesForIDWithByteArray:(IOSByteArray *)rawID {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_getSignaturesForIDWithLibOrgBouncycastleBcpgUserIDPacket_(self, new_LibOrgBouncycastleBcpgUserIDPacket_initWithByteArray_(rawID));
}

- (id<JavaUtilIterator>)getSignaturesForKeyIDWithLong:(jlong)keyID {
  id<JavaUtilList> sigs = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> it = [self getSignatures]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    LibOrgBouncycastleOpenpgpPGPSignature *sig = (LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSignature class]);
    if ([((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(sig)) getKeyID] == keyID) {
      [sigs addWithId:sig];
    }
  }
  return [sigs iterator];
}

- (id<JavaUtilIterator>)getSignaturesForIDWithLibOrgBouncycastleBcpgUserIDPacket:(LibOrgBouncycastleBcpgUserIDPacket *)id_ {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_getSignaturesForIDWithLibOrgBouncycastleBcpgUserIDPacket_(self, id_);
}

- (id<JavaUtilIterator>)getSignaturesForUserAttributeWithLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *)userAttributes {
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(ids_)) size]; i++) {
    if ([((LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *) nil_chk(userAttributes)) isEqual:[((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i]]) {
      return [((JavaUtilArrayList *) nil_chk(((JavaUtilArrayList *) cast_chk([((id<JavaUtilList>) nil_chk(idSigs_)) getWithInt:i], [JavaUtilArrayList class])))) iterator];
    }
  }
  return nil;
}

- (id<JavaUtilIterator>)getSignaturesOfTypeWithInt:(jint)signatureType {
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> it = [self getSignatures];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSignature *sig = (LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSignature class]);
    if ([((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(sig)) getSignatureType] == signatureType) {
      [l addWithId:sig];
    }
  }
  return [l iterator];
}

- (id<JavaUtilIterator>)getSignatures {
  if (subSigs_ == nil) {
    id<JavaUtilList> sigs = new_JavaUtilArrayList_init();
    [sigs addAllWithJavaUtilCollection:keySigs_];
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(idSigs_)) size]; i++) {
      [sigs addAllWithJavaUtilCollection:(id<JavaUtilCollection>) cast_check([((id<JavaUtilList>) nil_chk(idSigs_)) getWithInt:i], JavaUtilCollection_class_())];
    }
    return [sigs iterator];
  }
  else {
    return [subSigs_ iterator];
  }
}

- (id<JavaUtilIterator>)getKeySignatures {
  if (subSigs_ == nil) {
    id<JavaUtilList> sigs = new_JavaUtilArrayList_init();
    [sigs addAllWithJavaUtilCollection:keySigs_];
    return [sigs iterator];
  }
  else {
    return [subSigs_ iterator];
  }
}

- (LibOrgBouncycastleBcpgPublicKeyPacket *)getPublicKeyPacket {
  return publicPk_;
}

- (IOSByteArray *)getEncoded {
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [self encodeWithJavaIoOutputStream:bOut withBoolean:false];
  return [bOut toByteArray];
}

- (IOSByteArray *)getEncodedWithBoolean:(jboolean)forTransfer {
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [self encodeWithJavaIoOutputStream:bOut withBoolean:forTransfer];
  return [bOut toByteArray];
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream {
  [self encodeWithJavaIoOutputStream:outStream withBoolean:false];
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream
                         withBoolean:(jboolean)forTransfer {
  LibOrgBouncycastleBcpgBCPGOutputStream *out;
  if ([outStream isKindOfClass:[LibOrgBouncycastleBcpgBCPGOutputStream class]]) {
    out = (LibOrgBouncycastleBcpgBCPGOutputStream *) outStream;
  }
  else {
    out = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_(outStream);
  }
  [((LibOrgBouncycastleBcpgBCPGOutputStream *) nil_chk(out)) writePacketWithLibOrgBouncycastleBcpgContainedPacket:publicPk_];
  if (!forTransfer && trustPk_ != nil) {
    [out writePacketWithLibOrgBouncycastleBcpgContainedPacket:trustPk_];
  }
  if (subSigs_ == nil) {
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(keySigs_)) size]; i++) {
      [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([((id<JavaUtilList>) nil_chk(keySigs_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPSignature class])))) encodeWithJavaIoOutputStream:out];
    }
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(ids_)) size]; i++) {
      if ([[((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i] isKindOfClass:[LibOrgBouncycastleBcpgUserIDPacket class]]) {
        LibOrgBouncycastleBcpgUserIDPacket *id_ = (LibOrgBouncycastleBcpgUserIDPacket *) cast_chk([((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i], [LibOrgBouncycastleBcpgUserIDPacket class]);
        [out writePacketWithLibOrgBouncycastleBcpgContainedPacket:id_];
      }
      else {
        LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *v = (LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *) cast_chk([((id<JavaUtilList>) nil_chk(ids_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector class]);
        [out writePacketWithLibOrgBouncycastleBcpgContainedPacket:new_LibOrgBouncycastleBcpgUserAttributePacket_initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray_([((LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *) nil_chk(v)) toSubpacketArray])];
      }
      if (!forTransfer && [((id<JavaUtilList>) nil_chk(idTrusts_)) getWithInt:i] != nil) {
        [out writePacketWithLibOrgBouncycastleBcpgContainedPacket:(LibOrgBouncycastleBcpgContainedPacket *) cast_chk([((id<JavaUtilList>) nil_chk(idTrusts_)) getWithInt:i], [LibOrgBouncycastleBcpgContainedPacket class])];
      }
      id<JavaUtilList> sigs = (id<JavaUtilList>) cast_check([((id<JavaUtilList>) nil_chk(idSigs_)) getWithInt:i], JavaUtilList_class_());
      for (jint j = 0; j != [((id<JavaUtilList>) nil_chk(sigs)) size]; j++) {
        [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([sigs getWithInt:j], [LibOrgBouncycastleOpenpgpPGPSignature class])))) encodeWithJavaIoOutputStream:out withBoolean:forTransfer];
      }
    }
  }
  else {
    for (jint j = 0; j != [((id<JavaUtilList>) nil_chk(subSigs_)) size]; j++) {
      [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([((id<JavaUtilList>) nil_chk(subSigs_)) getWithInt:j], [LibOrgBouncycastleOpenpgpPGPSignature class])))) encodeWithJavaIoOutputStream:out withBoolean:forTransfer];
    }
  }
}

- (jboolean)isRevoked {
  return [self hasRevocation];
}

- (jboolean)hasRevocation {
  jint ns = 0;
  jboolean revoked = false;
  if ([self isMasterKey]) {
    while (!revoked && (ns < [((id<JavaUtilList>) nil_chk(keySigs_)) size])) {
      if ([((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([((id<JavaUtilList>) nil_chk(keySigs_)) getWithInt:ns++], [LibOrgBouncycastleOpenpgpPGPSignature class])))) getSignatureType] == LibOrgBouncycastleOpenpgpPGPSignature_KEY_REVOCATION) {
        revoked = true;
      }
    }
  }
  else {
    while (!revoked && (ns < [((id<JavaUtilList>) nil_chk(subSigs_)) size])) {
      if ([((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([((id<JavaUtilList>) nil_chk(subSigs_)) getWithInt:ns++], [LibOrgBouncycastleOpenpgpPGPSignature class])))) getSignatureType] == LibOrgBouncycastleOpenpgpPGPSignature_SUBKEY_REVOCATION) {
        revoked = true;
      }
    }
  }
  return revoked;
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                       withByteArray:(IOSByteArray *)rawID
                                                           withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_withLibOrgBouncycastleOpenpgpPGPSignature_(key, rawID, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                        withNSString:(NSString *)id_
                                                           withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withLibOrgBouncycastleOpenpgpPGPSignature_(key, id_, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                        withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *)userAttributes
                                                           withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignature_(key, userAttributes, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                     withId:(id)id_
                                                  withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(key, id_, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                           withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *)userAttributes {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_(key, userAttributes);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                           withNSString:(NSString *)id_ {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_(key, id_);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                          withByteArray:(IOSByteArray *)rawID {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_(key, rawID);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                        withId:(id)id_ {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_(key, id_);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                          withByteArray:(IOSByteArray *)id_
                                                              withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_withLibOrgBouncycastleOpenpgpPGPSignature_(key, id_, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                           withNSString:(NSString *)id_
                                                              withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withLibOrgBouncycastleOpenpgpPGPSignature_(key, id_, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                           withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:(LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *)userAttributes
                                                              withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignature_(key, userAttributes, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                                                        withId:(id)id_
                                                     withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(key, id_, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                           withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPSignature_(key, certification);
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key
                                                              withLibOrgBouncycastleOpenpgpPGPSignature:(LibOrgBouncycastleOpenpgpPGPSignature *)certification {
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPSignature_(key, certification);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 13, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x2, 13, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgPublicKeyPacket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 26, -1, -1, -1 },
    { NULL, "[B", 0x1, 27, 28, 26, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, 26, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 31, 26, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 32, 33, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 32, 34, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 32, 35, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0xa, 36, 37, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 38, 40, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 38, 41, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0xa, 42, 43, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 38, 33, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 38, 34, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 38, 35, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0xa, 42, 37, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 32, 44, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x9, 38, 44, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleBcpgPublicKeyPacket:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleBcpgPublicKeyPacket:withLibOrgBouncycastleBcpgTrustPacket:withJavaUtilList:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleBcpgTrustPacket:withJavaUtilList:);
  methods[4].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[5].selector = @selector(initWithLibOrgBouncycastleBcpgPublicKeyPacket:withLibOrgBouncycastleBcpgTrustPacket:withJavaUtilList:withJavaUtilList:withJavaUtilList:withJavaUtilList:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[6].selector = @selector(getVersion);
  methods[7].selector = @selector(getCreationTime);
  methods[8].selector = @selector(getValidDays);
  methods[9].selector = @selector(getTrustData);
  methods[10].selector = @selector(getValidSeconds);
  methods[11].selector = @selector(getExpirationTimeFromSigWithBoolean:withInt:);
  methods[12].selector = @selector(getKeyID);
  methods[13].selector = @selector(getFingerprint);
  methods[14].selector = @selector(isEncryptionKey);
  methods[15].selector = @selector(isMasterKey);
  methods[16].selector = @selector(getAlgorithm);
  methods[17].selector = @selector(getBitStrength);
  methods[18].selector = @selector(getUserIDs);
  methods[19].selector = @selector(getRawUserIDs);
  methods[20].selector = @selector(getUserAttributes);
  methods[21].selector = @selector(getSignaturesForIDWithNSString:);
  methods[22].selector = @selector(getSignaturesForIDWithByteArray:);
  methods[23].selector = @selector(getSignaturesForKeyIDWithLong:);
  methods[24].selector = @selector(getSignaturesForIDWithLibOrgBouncycastleBcpgUserIDPacket:);
  methods[25].selector = @selector(getSignaturesForUserAttributeWithLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:);
  methods[26].selector = @selector(getSignaturesOfTypeWithInt:);
  methods[27].selector = @selector(getSignatures);
  methods[28].selector = @selector(getKeySignatures);
  methods[29].selector = @selector(getPublicKeyPacket);
  methods[30].selector = @selector(getEncoded);
  methods[31].selector = @selector(getEncodedWithBoolean:);
  methods[32].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[33].selector = @selector(encodeWithJavaIoOutputStream:withBoolean:);
  methods[34].selector = @selector(isRevoked);
  methods[35].selector = @selector(hasRevocation);
  methods[36].selector = @selector(addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withByteArray:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[37].selector = @selector(addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withNSString:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[38].selector = @selector(addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[39].selector = @selector(addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:withId:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[40].selector = @selector(removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:);
  methods[41].selector = @selector(removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withNSString:);
  methods[42].selector = @selector(removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withByteArray:);
  methods[43].selector = @selector(removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:withId:);
  methods[44].selector = @selector(removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withByteArray:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[45].selector = @selector(removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withNSString:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[46].selector = @selector(removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[47].selector = @selector(removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey:withId:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[48].selector = @selector(addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleOpenpgpPGPSignature:);
  methods[49].selector = @selector(removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleOpenpgpPGPSignature:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MASTER_KEY_CERTIFICATION_TYPES", "[I", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "publicPk_", "LLibOrgBouncycastleBcpgPublicKeyPacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "trustPk_", "LLibOrgBouncycastleBcpgTrustPacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keySigs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ids_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "idTrusts_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "idSigs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subSigs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keyID_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fingerprint_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyStrength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleBcpgPublicKeyPacket;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LLibOrgBouncycastleBcpgPublicKeyPacket;LLibOrgBouncycastleBcpgTrustPacket;LJavaUtilList;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleBcpgTrustPacket;LJavaUtilList;", "LLibOrgBouncycastleOpenpgpPGPPublicKey;", "LLibOrgBouncycastleBcpgPublicKeyPacket;LLibOrgBouncycastleBcpgTrustPacket;LJavaUtilList;LJavaUtilList;LJavaUtilList;LJavaUtilList;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "getExpirationTimeFromSig", "ZI", "()Ljava/util/Iterator<Ljava/lang/String;>;", "()Ljava/util/Iterator<[B>;", "()Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPUserAttributeSubpacketVector;>;", "getSignaturesForID", "LNSString;", "(Ljava/lang/String;)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPSignature;>;", "[B", "([B)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPSignature;>;", "getSignaturesForKeyID", "J", "(J)Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPSignature;>;", "LLibOrgBouncycastleBcpgUserIDPacket;", "getSignaturesForUserAttribute", "LLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector;", "getSignaturesOfType", "I", "LJavaIoIOException;", "getEncoded", "Z", "encode", "LJavaIoOutputStream;", "LJavaIoOutputStream;Z", "addCertification", "LLibOrgBouncycastleOpenpgpPGPPublicKey;[BLLibOrgBouncycastleOpenpgpPGPSignature;", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LNSString;LLibOrgBouncycastleOpenpgpPGPSignature;", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector;LLibOrgBouncycastleOpenpgpPGPSignature;", "addCert", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LNSObject;LLibOrgBouncycastleOpenpgpPGPSignature;", "removeCertification", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector;", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LNSString;", "LLibOrgBouncycastleOpenpgpPGPPublicKey;[B", "removeCert", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LNSObject;", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleOpenpgpPGPSignature;", &LibOrgBouncycastleOpenpgpPGPPublicKey_MASTER_KEY_CERTIFICATION_TYPES };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPPublicKey = { "PGPPublicKey", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 50, 11, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPPublicKey;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleOpenpgpPGPPublicKey class]) {
    LibOrgBouncycastleOpenpgpPGPPublicKey_MASTER_KEY_CERTIFICATION_TYPES = [IOSIntArray newArrayWithInts:(jint[]){ LibOrgBouncycastleOpenpgpPGPSignature_POSITIVE_CERTIFICATION, LibOrgBouncycastleOpenpgpPGPSignature_CASUAL_CERTIFICATION, LibOrgBouncycastleOpenpgpPGPSignature_NO_CERTIFICATION, LibOrgBouncycastleOpenpgpPGPSignature_DEFAULT_CERTIFICATION } count:4];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleOpenpgpPGPPublicKey)
  }
}

@end

void LibOrgBouncycastleOpenpgpPGPPublicKey_init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  id<LibOrgBouncycastleBcpgBCPGKey> key = [((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(self->publicPk_)) getKey];
  self->fingerprint_ = [((id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>) nil_chk(fingerPrintCalculator)) calculateFingerprintWithLibOrgBouncycastleBcpgPublicKeyPacket:self->publicPk_];
  if ([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(self->publicPk_)) getVersion] <= 3) {
    LibOrgBouncycastleBcpgRSAPublicBCPGKey *rK = (LibOrgBouncycastleBcpgRSAPublicBCPGKey *) cast_chk(key, [LibOrgBouncycastleBcpgRSAPublicBCPGKey class]);
    self->keyID_ = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleBcpgRSAPublicBCPGKey *) nil_chk(rK)) getModulus])) longLongValue];
    self->keyStrength_ = [((JavaMathBigInteger *) nil_chk([rK getModulus])) bitLength];
  }
  else {
    self->keyID_ = (JreLShift64((jlong) (IOSByteArray_Get(self->fingerprint_, ((IOSByteArray *) nil_chk(self->fingerprint_))->size_ - 8) & (jint) 0xff), 56)) | (JreLShift64((jlong) (IOSByteArray_Get(self->fingerprint_, self->fingerprint_->size_ - 7) & (jint) 0xff), 48)) | (JreLShift64((jlong) (IOSByteArray_Get(self->fingerprint_, self->fingerprint_->size_ - 6) & (jint) 0xff), 40)) | (JreLShift64((jlong) (IOSByteArray_Get(self->fingerprint_, self->fingerprint_->size_ - 5) & (jint) 0xff), 32)) | (JreLShift64((jlong) (IOSByteArray_Get(self->fingerprint_, self->fingerprint_->size_ - 4) & (jint) 0xff), 24)) | (JreLShift64((jlong) (IOSByteArray_Get(self->fingerprint_, self->fingerprint_->size_ - 3) & (jint) 0xff), 16)) | (JreLShift64((jlong) (IOSByteArray_Get(self->fingerprint_, self->fingerprint_->size_ - 2) & (jint) 0xff), 8)) | ((IOSByteArray_Get(self->fingerprint_, self->fingerprint_->size_ - 1) & (jint) 0xff));
    if ([key isKindOfClass:[LibOrgBouncycastleBcpgRSAPublicBCPGKey class]]) {
      self->keyStrength_ = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleBcpgRSAPublicBCPGKey *) nil_chk(((LibOrgBouncycastleBcpgRSAPublicBCPGKey *) key))) getModulus])) bitLength];
    }
    else if ([key isKindOfClass:[LibOrgBouncycastleBcpgDSAPublicBCPGKey class]]) {
      self->keyStrength_ = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleBcpgDSAPublicBCPGKey *) nil_chk(((LibOrgBouncycastleBcpgDSAPublicBCPGKey *) key))) getP])) bitLength];
    }
    else if ([key isKindOfClass:[LibOrgBouncycastleBcpgElGamalPublicBCPGKey class]]) {
      self->keyStrength_ = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleBcpgElGamalPublicBCPGKey *) nil_chk(((LibOrgBouncycastleBcpgElGamalPublicBCPGKey *) key))) getP])) bitLength];
    }
    else if ([key isKindOfClass:[LibOrgBouncycastleBcpgECPublicBCPGKey class]]) {
      LibOrgBouncycastleAsn1X9X9ECParameters *ecParameters = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleBcpgECPublicBCPGKey *) nil_chk(((LibOrgBouncycastleBcpgECPublicBCPGKey *) key))) getCurveOID]);
      if (ecParameters != nil) {
        self->keyStrength_ = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([ecParameters getCurve])) getFieldSize];
      }
      else {
        self->keyStrength_ = -1;
      }
    }
  }
}

void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleBcpgPublicKeyPacket *publicKeyPacket, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  NSObject_init(self);
  self->keySigs_ = new_JavaUtilArrayList_init();
  self->ids_ = new_JavaUtilArrayList_init();
  self->idTrusts_ = new_JavaUtilArrayList_init();
  self->idSigs_ = new_JavaUtilArrayList_init();
  self->subSigs_ = nil;
  self->publicPk_ = publicKeyPacket;
  self->ids_ = new_JavaUtilArrayList_init();
  self->idSigs_ = new_JavaUtilArrayList_init();
  LibOrgBouncycastleOpenpgpPGPPublicKey_init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, fingerPrintCalculator);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicKeyPacket, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, publicKeyPacket, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicKeyPacket, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, publicKeyPacket, fingerPrintCalculator)
}

void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> sigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  NSObject_init(self);
  self->keySigs_ = new_JavaUtilArrayList_init();
  self->ids_ = new_JavaUtilArrayList_init();
  self->idTrusts_ = new_JavaUtilArrayList_init();
  self->idSigs_ = new_JavaUtilArrayList_init();
  self->subSigs_ = nil;
  self->publicPk_ = publicPk;
  self->trustPk_ = trustPk;
  self->subSigs_ = sigs;
  LibOrgBouncycastleOpenpgpPGPPublicKey_init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, fingerPrintCalculator);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> sigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, publicPk, trustPk, sigs, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> sigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, publicPk, trustPk, sigs, fingerPrintCalculator)
}

void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleBcpgTrustPacket *trust, id<JavaUtilList> subSigs) {
  NSObject_init(self);
  self->keySigs_ = new_JavaUtilArrayList_init();
  self->ids_ = new_JavaUtilArrayList_init();
  self->idTrusts_ = new_JavaUtilArrayList_init();
  self->idSigs_ = new_JavaUtilArrayList_init();
  self->subSigs_ = nil;
  self->publicPk_ = ((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(key))->publicPk_;
  self->trustPk_ = trust;
  self->subSigs_ = subSigs;
  self->fingerprint_ = key->fingerprint_;
  self->keyID_ = key->keyID_;
  self->keyStrength_ = key->keyStrength_;
}

LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleBcpgTrustPacket *trust, id<JavaUtilList> subSigs) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_, key, trust, subSigs)
}

LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleBcpgTrustPacket *trust, id<JavaUtilList> subSigs) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_, key, trust, subSigs)
}

void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey) {
  NSObject_init(self);
  self->keySigs_ = new_JavaUtilArrayList_init();
  self->ids_ = new_JavaUtilArrayList_init();
  self->idTrusts_ = new_JavaUtilArrayList_init();
  self->idSigs_ = new_JavaUtilArrayList_init();
  self->subSigs_ = nil;
  self->publicPk_ = ((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey))->publicPk_;
  self->keySigs_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(pubKey->keySigs_);
  self->ids_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(pubKey->ids_);
  self->idTrusts_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(pubKey->idTrusts_);
  self->idSigs_ = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(pubKey->idSigs_)) size]);
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(pubKey->idSigs_)) size]; i++) {
    [((id<JavaUtilList>) nil_chk(self->idSigs_)) addWithId:new_JavaUtilArrayList_initWithJavaUtilCollection_((JavaUtilArrayList *) cast_chk([pubKey->idSigs_ getWithInt:i], [JavaUtilArrayList class]))];
  }
  if (pubKey->subSigs_ != nil) {
    self->subSigs_ = new_JavaUtilArrayList_initWithInt_([pubKey->subSigs_ size]);
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(pubKey->subSigs_)) size]; i++) {
      [((id<JavaUtilList>) nil_chk(self->subSigs_)) addWithId:[pubKey->subSigs_ getWithInt:i]];
    }
  }
  self->fingerprint_ = pubKey->fingerprint_;
  self->keyID_ = pubKey->keyID_;
  self->keyStrength_ = pubKey->keyStrength_;
}

LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleOpenpgpPGPPublicKey_, pubKey)
}

LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleOpenpgpPGPPublicKey_, pubKey)
}

void LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> keySigs, id<JavaUtilList> ids, id<JavaUtilList> idTrusts, id<JavaUtilList> idSigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  NSObject_init(self);
  self->keySigs_ = new_JavaUtilArrayList_init();
  self->ids_ = new_JavaUtilArrayList_init();
  self->idTrusts_ = new_JavaUtilArrayList_init();
  self->idSigs_ = new_JavaUtilArrayList_init();
  self->subSigs_ = nil;
  self->publicPk_ = publicPk;
  self->trustPk_ = trustPk;
  self->keySigs_ = keySigs;
  self->ids_ = ids;
  self->idTrusts_ = idTrusts;
  self->idSigs_ = idSigs;
  LibOrgBouncycastleOpenpgpPGPPublicKey_init__WithLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, fingerPrintCalculator);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> keySigs, id<JavaUtilList> ids, id<JavaUtilList> idTrusts, id<JavaUtilList> idSigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, publicPk, trustPk, keySigs, ids, idTrusts, idSigs, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPPublicKey *create_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleBcpgPublicKeyPacket *publicPk, LibOrgBouncycastleBcpgTrustPacket *trustPk, id<JavaUtilList> keySigs, id<JavaUtilList> ids, id<JavaUtilList> idTrusts, id<JavaUtilList> idSigs, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKey, initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, publicPk, trustPk, keySigs, ids, idTrusts, idSigs, fingerPrintCalculator)
}

jlong LibOrgBouncycastleOpenpgpPGPPublicKey_getExpirationTimeFromSigWithBoolean_withInt_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, jboolean selfSigned, jint signatureType) {
  id<JavaUtilIterator> signatures = [self getSignaturesOfTypeWithInt:signatureType];
  jlong expiryTime = -1;
  jlong lastDate = -1;
  while ([((id<JavaUtilIterator>) nil_chk(signatures)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSignature *sig = (LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([signatures next], [LibOrgBouncycastleOpenpgpPGPSignature class]);
    if (!selfSigned || [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(sig)) getKeyID] == [self getKeyID]) {
      LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashed = [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(sig)) getHashedSubPackets];
      if (hashed == nil) {
        continue;
      }
      jlong current = [hashed getKeyExpirationTime];
      if ([sig getKeyID] == [self getKeyID]) {
        if ([((JavaUtilDate *) nil_chk([sig getCreationTime])) getTime] > lastDate) {
          lastDate = [((JavaUtilDate *) nil_chk([sig getCreationTime])) getTime];
          expiryTime = current;
        }
      }
      else {
        if (current == 0 || current > expiryTime) {
          expiryTime = current;
        }
      }
    }
  }
  return expiryTime;
}

id<JavaUtilIterator> LibOrgBouncycastleOpenpgpPGPPublicKey_getSignaturesForIDWithLibOrgBouncycastleBcpgUserIDPacket_(LibOrgBouncycastleOpenpgpPGPPublicKey *self, LibOrgBouncycastleBcpgUserIDPacket *id_) {
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(self->ids_)) size]; i++) {
    if ([((LibOrgBouncycastleBcpgUserIDPacket *) nil_chk(id_)) isEqual:[((id<JavaUtilList>) nil_chk(self->ids_)) getWithInt:i]]) {
      return [((JavaUtilArrayList *) nil_chk(((JavaUtilArrayList *) cast_chk([((id<JavaUtilList>) nil_chk(self->idSigs_)) getWithInt:i], [JavaUtilArrayList class])))) iterator];
    }
  }
  return nil;
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, IOSByteArray *rawID, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(key, new_LibOrgBouncycastleBcpgUserIDPacket_initWithByteArray_(rawID), certification);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(key, new_LibOrgBouncycastleBcpgUserIDPacket_initWithNSString_(id_), certification);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *userAttributes, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(key, userAttributes, certification);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, id id_, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  LibOrgBouncycastleOpenpgpPGPPublicKey *returnKey = new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(key);
  id<JavaUtilList> sigList = nil;
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(returnKey->ids_)) size]; i++) {
    if ([nil_chk(id_) isEqual:[((id<JavaUtilList>) nil_chk(returnKey->ids_)) getWithInt:i]]) {
      sigList = (id<JavaUtilList>) cast_check([((id<JavaUtilList>) nil_chk(returnKey->idSigs_)) getWithInt:i], JavaUtilList_class_());
    }
  }
  if (sigList != nil) {
    [sigList addWithId:certification];
  }
  else {
    sigList = new_JavaUtilArrayList_init();
    [sigList addWithId:certification];
    [((id<JavaUtilList>) nil_chk(returnKey->ids_)) addWithId:id_];
    [((id<JavaUtilList>) nil_chk(returnKey->idTrusts_)) addWithId:nil];
    [((id<JavaUtilList>) nil_chk(returnKey->idSigs_)) addWithId:sigList];
  }
  return returnKey;
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *userAttributes) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_(key, userAttributes);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, NSString *id_) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_(key, new_LibOrgBouncycastleBcpgUserIDPacket_initWithNSString_(id_));
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, IOSByteArray *rawID) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_(key, new_LibOrgBouncycastleBcpgUserIDPacket_initWithByteArray_(rawID));
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, id id_) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  LibOrgBouncycastleOpenpgpPGPPublicKey *returnKey = new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(key);
  jboolean found = false;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(returnKey->ids_)) size]; i++) {
    if ([nil_chk(id_) isEqual:[((id<JavaUtilList>) nil_chk(returnKey->ids_)) getWithInt:i]]) {
      found = true;
      (void) [((id<JavaUtilList>) nil_chk(returnKey->ids_)) removeWithInt:i];
      (void) [((id<JavaUtilList>) nil_chk(returnKey->idTrusts_)) removeWithInt:i];
      (void) [((id<JavaUtilList>) nil_chk(returnKey->idSigs_)) removeWithInt:i];
    }
  }
  if (!found) {
    return nil;
  }
  return returnKey;
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, IOSByteArray *id_, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(key, new_LibOrgBouncycastleBcpgUserIDPacket_initWithByteArray_(id_), certification);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(key, new_LibOrgBouncycastleBcpgUserIDPacket_initWithNSString_(id_), certification);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *userAttributes, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  return LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(key, userAttributes, certification);
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertWithLibOrgBouncycastleOpenpgpPGPPublicKey_withId_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, id id_, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  LibOrgBouncycastleOpenpgpPGPPublicKey *returnKey = new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(key);
  jboolean found = false;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(returnKey->ids_)) size]; i++) {
    if ([nil_chk(id_) isEqual:[((id<JavaUtilList>) nil_chk(returnKey->ids_)) getWithInt:i]]) {
      found = [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check([((id<JavaUtilList>) nil_chk(returnKey->idSigs_)) getWithInt:i], JavaUtilList_class_())))) removeWithId:certification];
    }
  }
  if (!found) {
    return nil;
  }
  return returnKey;
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  if ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(key)) isMasterKey]) {
    if ([((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(certification)) getSignatureType] == LibOrgBouncycastleOpenpgpPGPSignature_SUBKEY_REVOCATION) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"signature type incorrect for master key revocation.");
    }
  }
  else {
    if ([((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(certification)) getSignatureType] == LibOrgBouncycastleOpenpgpPGPSignature_KEY_REVOCATION) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"signature type incorrect for sub-key revocation.");
    }
  }
  LibOrgBouncycastleOpenpgpPGPPublicKey *returnKey = new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(key);
  if (returnKey->subSigs_ != nil) {
    [returnKey->subSigs_ addWithId:certification];
  }
  else {
    [((id<JavaUtilList>) nil_chk(returnKey->keySigs_)) addWithId:certification];
  }
  return returnKey;
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPSignature_(LibOrgBouncycastleOpenpgpPGPPublicKey *key, LibOrgBouncycastleOpenpgpPGPSignature *certification) {
  LibOrgBouncycastleOpenpgpPGPPublicKey_initialize();
  LibOrgBouncycastleOpenpgpPGPPublicKey *returnKey = new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(key);
  jboolean found;
  if (returnKey->subSigs_ != nil) {
    found = [returnKey->subSigs_ removeWithId:certification];
  }
  else {
    found = [((id<JavaUtilList>) nil_chk(returnKey->keySigs_)) removeWithId:certification];
  }
  if (!found) {
    for (id<JavaUtilIterator> it = [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(key)) getRawUserIDs]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      IOSByteArray *rawID = (IOSByteArray *) cast_chk([it next], [IOSByteArray class]);
      for (id<JavaUtilIterator> sIt = [key getSignaturesForIDWithByteArray:rawID]; [((id<JavaUtilIterator>) nil_chk(sIt)) hasNext]; ) {
        if (certification == [sIt next]) {
          found = true;
          returnKey = LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withByteArray_withLibOrgBouncycastleOpenpgpPGPSignature_(returnKey, rawID, certification);
        }
      }
    }
    if (!found) {
      for (id<JavaUtilIterator> it = [key getUserAttributes]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *id_ = (LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector class]);
        for (id<JavaUtilIterator> sIt = [key getSignaturesForUserAttributeWithLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector:id_]; [((id<JavaUtilIterator>) nil_chk(sIt)) hasNext]; ) {
          if (certification == [sIt next]) {
            found = true;
            returnKey = LibOrgBouncycastleOpenpgpPGPPublicKey_removeCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignature_(returnKey, id_, certification);
          }
        }
      }
    }
  }
  return returnKey;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPPublicKey)
