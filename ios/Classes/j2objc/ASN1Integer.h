//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ASN1Integer.java
//

#ifndef ASN1Integer_H
#define ASN1Integer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Primitive.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1OutputStream;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;

@interface LibOrgBouncycastleAsn1ASN1Integer : LibOrgBouncycastleAsn1ASN1Primitive

#pragma mark Public

- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)value;

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)bytes;

- (instancetype __nonnull)initWithLong:(jlong)value;

+ (LibOrgBouncycastleAsn1ASN1Integer *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                 withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1ASN1Integer *)getInstanceWithId:(id)obj;

- (JavaMathBigInteger *)getPositiveValue;

- (JavaMathBigInteger *)getValue;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)bytes
                                withBoolean:(jboolean)clone;

- (jboolean)asn1EqualsWithLibOrgBouncycastleAsn1ASN1Primitive:(LibOrgBouncycastleAsn1ASN1Primitive *)o;

- (void)encodeWithLibOrgBouncycastleAsn1ASN1OutputStream:(LibOrgBouncycastleAsn1ASN1OutputStream *)outArg;

- (jint)encodedLength;

- (jboolean)isConstructed;

+ (jboolean)isMalformedWithByteArray:(IOSByteArray *)bytes;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1ASN1Integer)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(LibOrgBouncycastleAsn1ASN1Integer *self, jlong value);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *new_LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(jlong value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *create_LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(jlong value);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(LibOrgBouncycastleAsn1ASN1Integer *self, JavaMathBigInteger *value);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(JavaMathBigInteger *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *create_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(JavaMathBigInteger *value);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Integer_initWithByteArray_(LibOrgBouncycastleAsn1ASN1Integer *self, IOSByteArray *bytes);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *new_LibOrgBouncycastleAsn1ASN1Integer_initWithByteArray_(IOSByteArray *bytes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *create_LibOrgBouncycastleAsn1ASN1Integer_initWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(LibOrgBouncycastleAsn1ASN1Integer *self, IOSByteArray *bytes, jboolean clone);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *new_LibOrgBouncycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(IOSByteArray *bytes, jboolean clone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *create_LibOrgBouncycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(IOSByteArray *bytes, jboolean clone);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleAsn1ASN1Integer_isMalformedWithByteArray_(IOSByteArray *bytes);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1ASN1Integer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ASN1Integer_H
