//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/ECMQVBasicAgreement.java
//

#include "CipherParameters.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECMQVBasicAgreement.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "J2ObjC_source.h"
#include "MQVPrivateParameters.h"
#include "MQVPublicParameters.h"
#include "Properties.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement ()

- (LibOrgBouncycastleMathEcECPoint *)calculateMqvAgreementWithLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)parameters
                                                      withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)d1U
                                                      withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)d2U
                                                       withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)Q2U
                                                       withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)Q1V
                                                       withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)Q2V;

@end

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_calculateMqvAgreementWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement *self, LibOrgBouncycastleCryptoParamsECDomainParameters *parameters, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *d1U, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *d2U, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *Q2U, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *Q1V, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *Q2V);

@implementation LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)key {
  self->privParams_ = (LibOrgBouncycastleCryptoParamsMQVPrivateParameters *) cast_chk(key, [LibOrgBouncycastleCryptoParamsMQVPrivateParameters class]);
}

- (jint)getFieldSize {
  return ([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsMQVPrivateParameters *) nil_chk(privParams_)) getStaticPrivateKey])) getParameters])) getCurve])) getFieldSize] + 7) / 8;
}

- (JavaMathBigInteger *)calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)pubKey {
  if (LibOrgBouncycastleUtilProperties_isOverrideSetWithNSString_(@"lib.org.bouncycastle.ec.disable_mqv")) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECMQV explicitly disabled");
  }
  LibOrgBouncycastleCryptoParamsMQVPublicParameters *pubParams = (LibOrgBouncycastleCryptoParamsMQVPublicParameters *) cast_chk(pubKey, [LibOrgBouncycastleCryptoParamsMQVPublicParameters class]);
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey = [((LibOrgBouncycastleCryptoParamsMQVPrivateParameters *) nil_chk(privParams_)) getStaticPrivateKey];
  LibOrgBouncycastleCryptoParamsECDomainParameters *parameters = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(staticPrivateKey)) getParameters];
  if (![((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(parameters)) isEqual:[((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsMQVPublicParameters *) nil_chk(pubParams)) getStaticPublicKey])) getParameters]]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECMQV public key components have wrong domain parameters");
  }
  LibOrgBouncycastleMathEcECPoint *agreement = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_calculateMqvAgreementWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(self, parameters, staticPrivateKey, [((LibOrgBouncycastleCryptoParamsMQVPrivateParameters *) nil_chk(privParams_)) getEphemeralPrivateKey], [((LibOrgBouncycastleCryptoParamsMQVPrivateParameters *) nil_chk(privParams_)) getEphemeralPublicKey], [pubParams getStaticPublicKey], [pubParams getEphemeralPublicKey]))) normalize];
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(agreement)) isInfinity]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Infinity is not a valid agreement value for MQV");
  }
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([agreement getAffineXCoord])) toBigInteger];
}

- (LibOrgBouncycastleMathEcECPoint *)calculateMqvAgreementWithLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)parameters
                                                      withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)d1U
                                                      withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)d2U
                                                       withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)Q2U
                                                       withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)Q1V
                                                       withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)Q2V {
  return LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_calculateMqvAgreementWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(self, parameters, d1U, d2U, Q2U, Q1V, Q2V);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:);
  methods[4].selector = @selector(calculateMqvAgreementWithLibOrgBouncycastleCryptoParamsECDomainParameters:withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privParams_", "LLibOrgBouncycastleCryptoParamsMQVPrivateParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoCipherParameters;", "calculateAgreement", "calculateMqvAgreement", "LLibOrgBouncycastleCryptoParamsECDomainParameters;LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement = { "ECMQVBasicAgreement", "lib.org.bouncycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement;
}

@end

void LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init(LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement *new_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement, init)
}

LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement *create_LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement, init)
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement_calculateMqvAgreementWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement *self, LibOrgBouncycastleCryptoParamsECDomainParameters *parameters, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *d1U, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *d2U, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *Q2U, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *Q1V, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *Q2V) {
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(parameters)) getN];
  jint e = ([((JavaMathBigInteger *) nil_chk(n)) bitLength] + 1) / 2;
  JavaMathBigInteger *powE = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE))) shiftLeftWithInt:e];
  LibOrgBouncycastleMathEcECCurve *curve = [parameters getCurve];
  LibOrgBouncycastleMathEcECPoint *q2u = LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(curve, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(Q2U)) getQ]);
  LibOrgBouncycastleMathEcECPoint *q1v = LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(curve, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(Q1V)) getQ]);
  LibOrgBouncycastleMathEcECPoint *q2v = LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(curve, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(Q2V)) getQ]);
  JavaMathBigInteger *x = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(q2u)) getAffineXCoord])) toBigInteger];
  JavaMathBigInteger *xBar = [((JavaMathBigInteger *) nil_chk(x)) modWithJavaMathBigInteger:powE];
  JavaMathBigInteger *Q2UBar = [((JavaMathBigInteger *) nil_chk(xBar)) setBitWithInt:e];
  JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(d1U)) getD])) multiplyWithJavaMathBigInteger:Q2UBar])) addWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(d2U)) getD]])) modWithJavaMathBigInteger:n];
  JavaMathBigInteger *xPrime = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(q2v)) getAffineXCoord])) toBigInteger];
  JavaMathBigInteger *xPrimeBar = [((JavaMathBigInteger *) nil_chk(xPrime)) modWithJavaMathBigInteger:powE];
  JavaMathBigInteger *Q2VBar = [((JavaMathBigInteger *) nil_chk(xPrimeBar)) setBitWithInt:e];
  JavaMathBigInteger *hs = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([parameters getH])) multiplyWithJavaMathBigInteger:s])) modWithJavaMathBigInteger:n];
  return LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(q1v, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Q2VBar)) multiplyWithJavaMathBigInteger:hs])) modWithJavaMathBigInteger:n], q2v, hs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementECMQVBasicAgreement)
