//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/IESParameters.java
//

#include "Arrays.h"
#include "IESParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoParamsIESParameters () {
 @public
  IOSByteArray *derivation_;
  IOSByteArray *encoding_;
  jint macKeySize_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsIESParameters, derivation_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsIESParameters, encoding_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoParamsIESParameters

- (instancetype)initWithByteArray:(IOSByteArray *)derivation
                    withByteArray:(IOSByteArray *)encoding
                          withInt:(jint)macKeySize {
  LibOrgBouncycastleCryptoParamsIESParameters_initWithByteArray_withByteArray_withInt_(self, derivation, encoding, macKeySize);
  return self;
}

- (IOSByteArray *)getDerivationV {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(derivation_);
}

- (IOSByteArray *)getEncodingV {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(encoding_);
}

- (jint)getMacKeySize {
  return macKeySize_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withByteArray:withInt:);
  methods[1].selector = @selector(getDerivationV);
  methods[2].selector = @selector(getEncodingV);
  methods[3].selector = @selector(getMacKeySize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "derivation_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macKeySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsIESParameters = { "IESParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsIESParameters;
}

@end

void LibOrgBouncycastleCryptoParamsIESParameters_initWithByteArray_withByteArray_withInt_(LibOrgBouncycastleCryptoParamsIESParameters *self, IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize) {
  NSObject_init(self);
  self->derivation_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(derivation);
  self->encoding_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(encoding);
  self->macKeySize_ = macKeySize;
}

LibOrgBouncycastleCryptoParamsIESParameters *new_LibOrgBouncycastleCryptoParamsIESParameters_initWithByteArray_withByteArray_withInt_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsIESParameters, initWithByteArray_withByteArray_withInt_, derivation, encoding, macKeySize)
}

LibOrgBouncycastleCryptoParamsIESParameters *create_LibOrgBouncycastleCryptoParamsIESParameters_initWithByteArray_withByteArray_withInt_(IOSByteArray *derivation, IOSByteArray *encoding, jint macKeySize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsIESParameters, initWithByteArray_withByteArray_withInt_, derivation, encoding, macKeySize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsIESParameters)
