//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/SignatureSubpacketInputStream.java
//

#include "Arrays.h"
#include "EmbeddedSignature.h"
#include "Exportable.h"
#include "Features.h"
#include "IOSPrimitiveArray.h"
#include "IssuerKeyID.h"
#include "J2ObjC_source.h"
#include "KeyExpirationTime.h"
#include "KeyFlags.h"
#include "NotationData.h"
#include "PreferredAlgorithms.h"
#include "PrimaryUserID.h"
#include "Revocable.h"
#include "RevocationReason.h"
#include "SignatureCreationTime.h"
#include "SignatureExpirationTime.h"
#include "SignatureSubpacket.h"
#include "SignatureSubpacketInputStream.h"
#include "SignatureSubpacketTags.h"
#include "SignatureTarget.h"
#include "SignerUserID.h"
#include "Streams.h"
#include "TrustSignature.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"

@interface LibOrgBouncycastleBcpgSignatureSubpacketInputStream ()

- (IOSByteArray *)checkDataWithByteArray:(IOSByteArray *)data
                                 withInt:(jint)expected
                                 withInt:(jint)bytesRead
                            withNSString:(NSString *)name;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleBcpgSignatureSubpacketInputStream_checkDataWithByteArray_withInt_withInt_withNSString_(LibOrgBouncycastleBcpgSignatureSubpacketInputStream *self, IOSByteArray *data, jint expected, jint bytesRead, NSString *name);

@implementation LibOrgBouncycastleBcpgSignatureSubpacketInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  LibOrgBouncycastleBcpgSignatureSubpacketInputStream_initWithJavaIoInputStream_(self, inArg);
  return self;
}

- (jint)available {
  return [((JavaIoInputStream *) nil_chk(in_)) available];
}

- (jint)read {
  return [((JavaIoInputStream *) nil_chk(in_)) read];
}

- (LibOrgBouncycastleBcpgSignatureSubpacket *)readPacket {
  jint l = [self read];
  jint bodyLen = 0;
  if (l < 0) {
    return nil;
  }
  jboolean isLongLength = false;
  if (l < 192) {
    bodyLen = l;
  }
  else if (l <= 223) {
    bodyLen = (JreLShift32((l - 192), 8)) + ([((JavaIoInputStream *) nil_chk(in_)) read]) + 192;
  }
  else if (l == 255) {
    isLongLength = true;
    bodyLen = (JreLShift32([((JavaIoInputStream *) nil_chk(in_)) read], 24)) | (JreLShift32([((JavaIoInputStream *) nil_chk(in_)) read], 16)) | (JreLShift32([((JavaIoInputStream *) nil_chk(in_)) read], 8)) | [((JavaIoInputStream *) nil_chk(in_)) read];
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"unexpected length header");
  }
  jint tag = [((JavaIoInputStream *) nil_chk(in_)) read];
  if (tag < 0) {
    @throw new_JavaIoEOFException_initWithNSString_(@"unexpected EOF reading signature sub packet");
  }
  IOSByteArray *data = [IOSByteArray newArrayWithLength:bodyLen - 1];
  jint bytesRead = LibOrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(in_, data);
  jboolean isCritical = ((tag & (jint) 0x80) != 0);
  jint type = tag & (jint) 0x7f;
  if (bytesRead != data->size_) {
    switch (type) {
      case LibOrgBouncycastleBcpgSignatureSubpacketTags_CREATION_TIME:
      data = LibOrgBouncycastleBcpgSignatureSubpacketInputStream_checkDataWithByteArray_withInt_withInt_withNSString_(self, data, 4, bytesRead, @"Signature Creation Time");
      break;
      case LibOrgBouncycastleBcpgSignatureSubpacketTags_ISSUER_KEY_ID:
      data = LibOrgBouncycastleBcpgSignatureSubpacketInputStream_checkDataWithByteArray_withInt_withInt_withNSString_(self, data, 8, bytesRead, @"Issuer");
      break;
      case LibOrgBouncycastleBcpgSignatureSubpacketTags_KEY_EXPIRE_TIME:
      data = LibOrgBouncycastleBcpgSignatureSubpacketInputStream_checkDataWithByteArray_withInt_withInt_withNSString_(self, data, 4, bytesRead, @"Signature Key Expiration Time");
      break;
      case LibOrgBouncycastleBcpgSignatureSubpacketTags_EXPIRE_TIME:
      data = LibOrgBouncycastleBcpgSignatureSubpacketInputStream_checkDataWithByteArray_withInt_withInt_withNSString_(self, data, 4, bytesRead, @"Signature Expiration Time");
      break;
      default:
      @throw new_JavaIoEOFException_initWithNSString_(@"truncated subpacket data.");
    }
  }
  switch (type) {
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_CREATION_TIME:
    return new_LibOrgBouncycastleBcpgSigSignatureCreationTime_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_EMBEDDED_SIGNATURE:
    return new_LibOrgBouncycastleBcpgSigEmbeddedSignature_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_KEY_EXPIRE_TIME:
    return new_LibOrgBouncycastleBcpgSigKeyExpirationTime_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_EXPIRE_TIME:
    return new_LibOrgBouncycastleBcpgSigSignatureExpirationTime_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_REVOCABLE:
    return new_LibOrgBouncycastleBcpgSigRevocable_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_EXPORTABLE:
    return new_LibOrgBouncycastleBcpgSigExportable_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_FEATURES:
    return new_LibOrgBouncycastleBcpgSigFeatures_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_ISSUER_KEY_ID:
    return new_LibOrgBouncycastleBcpgSigIssuerKeyID_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_TRUST_SIG:
    return new_LibOrgBouncycastleBcpgSigTrustSignature_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_COMP_ALGS:
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_HASH_ALGS:
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_PREFERRED_SYM_ALGS:
    return new_LibOrgBouncycastleBcpgSigPreferredAlgorithms_initWithInt_withBoolean_withBoolean_withByteArray_(type, isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_KEY_FLAGS:
    return new_LibOrgBouncycastleBcpgSigKeyFlags_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_PRIMARY_USER_ID:
    return new_LibOrgBouncycastleBcpgSigPrimaryUserID_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_SIGNER_USER_ID:
    return new_LibOrgBouncycastleBcpgSigSignerUserID_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_NOTATION_DATA:
    return new_LibOrgBouncycastleBcpgSigNotationData_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_REVOCATION_REASON:
    return new_LibOrgBouncycastleBcpgSigRevocationReason_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
    case LibOrgBouncycastleBcpgSignatureSubpacketTags_SIGNATURE_TARGET:
    return new_LibOrgBouncycastleBcpgSigSignatureTarget_initWithBoolean_withBoolean_withByteArray_(isCritical, isLongLength, data);
  }
  return new_LibOrgBouncycastleBcpgSignatureSubpacket_initWithInt_withBoolean_withBoolean_withByteArray_(type, isCritical, isLongLength, data);
}

- (IOSByteArray *)checkDataWithByteArray:(IOSByteArray *)data
                                 withInt:(jint)expected
                                 withInt:(jint)bytesRead
                            withNSString:(NSString *)name {
  return LibOrgBouncycastleBcpgSignatureSubpacketInputStream_checkDataWithByteArray_withInt_withInt_withNSString_(self, data, expected, bytesRead, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgSignatureSubpacket;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x2, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(available);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readPacket);
  methods[4].selector = @selector(checkDataWithByteArray:withInt:withInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "checkData", "[BIILNSString;", "LJavaIoEOFException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgSignatureSubpacketInputStream = { "SignatureSubpacketInputStream", "lib.org.bouncycastle.bcpg", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgSignatureSubpacketInputStream;
}

@end

void LibOrgBouncycastleBcpgSignatureSubpacketInputStream_initWithJavaIoInputStream_(LibOrgBouncycastleBcpgSignatureSubpacketInputStream *self, JavaIoInputStream *inArg) {
  JavaIoInputStream_init(self);
  self->in_ = inArg;
}

LibOrgBouncycastleBcpgSignatureSubpacketInputStream *new_LibOrgBouncycastleBcpgSignatureSubpacketInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgSignatureSubpacketInputStream, initWithJavaIoInputStream_, inArg)
}

LibOrgBouncycastleBcpgSignatureSubpacketInputStream *create_LibOrgBouncycastleBcpgSignatureSubpacketInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgSignatureSubpacketInputStream, initWithJavaIoInputStream_, inArg)
}

IOSByteArray *LibOrgBouncycastleBcpgSignatureSubpacketInputStream_checkDataWithByteArray_withInt_withInt_withNSString_(LibOrgBouncycastleBcpgSignatureSubpacketInputStream *self, IOSByteArray *data, jint expected, jint bytesRead, NSString *name) {
  if (bytesRead != expected) {
    @throw new_JavaIoEOFException_initWithNSString_(JreStrcat("$$$", @"truncated ", name, @" subpacket data."));
  }
  return LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(data, 0, expected);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgSignatureSubpacketInputStream)
