//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/PKIXPolicyNode.java
//

#include "J2ObjC_source.h"
#include "PKIXPolicyNode.h"
#include "java/lang/StringBuffer.h"
#include "java/security/cert/PolicyNode.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@implementation LibOrgBouncycastleJceProviderPKIXPolicyNode

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)_children
                             withInt:(jint)_depth
                     withJavaUtilSet:(id<JavaUtilSet>)_expectedPolicies
      withJavaSecurityCertPolicyNode:(id<JavaSecurityCertPolicyNode>)_parent
                     withJavaUtilSet:(id<JavaUtilSet>)_policyQualifiers
                        withNSString:(NSString *)_validPolicy
                         withBoolean:(jboolean)_critical {
  LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(self, _children, _depth, _expectedPolicies, _parent, _policyQualifiers, _validPolicy, _critical);
  return self;
}

- (void)addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_child {
  [((id<JavaUtilList>) nil_chk(children_)) addWithId:_child];
  [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_child)) setParentWithLibOrgBouncycastleJceProviderPKIXPolicyNode:self];
}

- (id<JavaUtilIterator>)getChildren {
  return [((id<JavaUtilList>) nil_chk(children_)) iterator];
}

- (jint)getDepth {
  return depth_;
}

- (id<JavaUtilSet>)getExpectedPolicies {
  return expectedPolicies_;
}

- (id<JavaSecurityCertPolicyNode>)getParent {
  return parent_;
}

- (id<JavaUtilSet>)getPolicyQualifiers {
  return policyQualifiers_;
}

- (NSString *)getValidPolicy {
  return validPolicy_;
}

- (jboolean)hasChildren {
  return ![((id<JavaUtilList>) nil_chk(children_)) isEmpty];
}

- (jboolean)isCritical {
  return critical_;
}

- (void)removeChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_child {
  [((id<JavaUtilList>) nil_chk(children_)) removeWithId:_child];
}

- (void)setCriticalWithBoolean:(jboolean)_critical {
  critical_ = _critical;
}

- (void)setParentWithLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_parent {
  parent_ = _parent;
}

- (NSString *)description {
  return [self toStringWithNSString:@""];
}

- (NSString *)toStringWithNSString:(NSString *)_indent {
  JavaLangStringBuffer *_buf = new_JavaLangStringBuffer_init();
  (void) [_buf appendWithNSString:_indent];
  (void) [_buf appendWithNSString:validPolicy_];
  (void) [_buf appendWithNSString:@" {\n"];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(children_)) size]; i++) {
    (void) [_buf appendWithNSString:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(((LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([((id<JavaUtilList>) nil_chk(children_)) getWithInt:i], [LibOrgBouncycastleJceProviderPKIXPolicyNode class])))) toStringWithNSString:JreStrcat("$$", _indent, @"    ")]];
  }
  (void) [_buf appendWithNSString:_indent];
  (void) [_buf appendWithNSString:@"}\n"];
  return [_buf description];
}

- (id)java_clone {
  return [self copy__];
}

- (LibOrgBouncycastleJceProviderPKIXPolicyNode *)copy__ {
  id<JavaUtilSet> _expectedPolicies = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> _iter = [((id<JavaUtilSet>) nil_chk(expectedPolicies_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
    [_expectedPolicies addWithId:[NSString stringWithString:(NSString *) cast_chk([_iter next], [NSString class])]];
  }
  id<JavaUtilSet> _policyQualifiers = new_JavaUtilHashSet_init();
  _iter = [((id<JavaUtilSet>) nil_chk(policyQualifiers_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
    [_policyQualifiers addWithId:[NSString stringWithString:(NSString *) cast_chk([_iter next], [NSString class])]];
  }
  LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), depth_, _expectedPolicies, nil, _policyQualifiers, [NSString stringWithString:validPolicy_], critical_);
  _iter = [((id<JavaUtilList>) nil_chk(children_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *_child = [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(((LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_iter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class])))) copy__];
    [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_child)) setParentWithLibOrgBouncycastleJceProviderPKIXPolicyNode:_node];
    [_node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:_child];
  }
  return _node;
}

- (void)setExpectedPoliciesWithJavaUtilSet:(id<JavaUtilSet>)expectedPolicies {
  self->expectedPolicies_ = expectedPolicies;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertPolicyNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withInt:withJavaUtilSet:withJavaSecurityCertPolicyNode:withJavaUtilSet:withNSString:withBoolean:);
  methods[1].selector = @selector(addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[2].selector = @selector(getChildren);
  methods[3].selector = @selector(getDepth);
  methods[4].selector = @selector(getExpectedPolicies);
  methods[5].selector = @selector(getParent);
  methods[6].selector = @selector(getPolicyQualifiers);
  methods[7].selector = @selector(getValidPolicy);
  methods[8].selector = @selector(hasChildren);
  methods[9].selector = @selector(isCritical);
  methods[10].selector = @selector(removeChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[11].selector = @selector(setCriticalWithBoolean:);
  methods[12].selector = @selector(setParentWithLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(toStringWithNSString:);
  methods[15].selector = @selector(java_clone);
  methods[16].selector = @selector(copy__);
  methods[17].selector = @selector(setExpectedPoliciesWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "children_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "expectedPolicies_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "parent_", "LJavaSecurityCertPolicyNode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "policyQualifiers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "validPolicy_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "critical_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;ILJavaUtilSet;LJavaSecurityCertPolicyNode;LJavaUtilSet;LNSString;Z", "addChild", "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", "removeChild", "setCritical", "Z", "setParent", "toString", "LNSString;", "clone", "copy", "setExpectedPolicies", "LJavaUtilSet;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderPKIXPolicyNode = { "PKIXPolicyNode", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 18, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderPKIXPolicyNode;
}

@end

void LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(LibOrgBouncycastleJceProviderPKIXPolicyNode *self, id<JavaUtilList> _children, jint _depth, id<JavaUtilSet> _expectedPolicies, id<JavaSecurityCertPolicyNode> _parent, id<JavaUtilSet> _policyQualifiers, NSString *_validPolicy, jboolean _critical) {
  NSObject_init(self);
  self->children_ = _children;
  self->depth_ = _depth;
  self->expectedPolicies_ = _expectedPolicies;
  self->parent_ = _parent;
  self->policyQualifiers_ = _policyQualifiers;
  self->validPolicy_ = _validPolicy;
  self->critical_ = _critical;
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(id<JavaUtilList> _children, jint _depth, id<JavaUtilSet> _expectedPolicies, id<JavaSecurityCertPolicyNode> _parent, id<JavaUtilSet> _policyQualifiers, NSString *_validPolicy, jboolean _critical) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderPKIXPolicyNode, initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_, _children, _depth, _expectedPolicies, _parent, _policyQualifiers, _validPolicy, _critical)
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *create_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(id<JavaUtilList> _children, jint _depth, id<JavaUtilSet> _expectedPolicies, id<JavaSecurityCertPolicyNode> _parent, id<JavaUtilSet> _policyQualifiers, NSString *_validPolicy, jboolean _critical) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderPKIXPolicyNode, initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_, _children, _depth, _expectedPolicies, _parent, _policyQualifiers, _validPolicy, _critical)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderPKIXPolicyNode)
