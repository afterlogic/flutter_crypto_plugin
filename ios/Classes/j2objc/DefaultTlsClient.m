//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsClient.java
//

#include "AbstractTlsClient.h"
#include "AlertDescription.h"
#include "CipherSuite.h"
#include "DefaultTlsCipherFactory.h"
#include "DefaultTlsClient.h"
#include "DefaultTlsDHVerifier.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyExchangeAlgorithm.h"
#include "TlsCipherFactory.h"
#include "TlsDHEKeyExchange.h"
#include "TlsDHKeyExchange.h"
#include "TlsDHVerifier.h"
#include "TlsECDHEKeyExchange.h"
#include "TlsECDHKeyExchange.h"
#include "TlsFatalAlert.h"
#include "TlsKeyExchange.h"
#include "TlsRSAKeyExchange.h"
#include "TlsUtils.h"
#include "java/util/Vector.h"

@implementation LibOrgBouncycastleCryptoTlsDefaultTlsClient

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsDefaultTlsClient_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory {
  LibOrgBouncycastleCryptoTlsDefaultTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                       withLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier {
  LibOrgBouncycastleCryptoTlsDefaultTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_(self, cipherFactory, dhVerifier);
  return self;
}

- (IOSIntArray *)getCipherSuites {
  return [IOSIntArray newArrayWithInts:(jint[]){ LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_GCM_SHA256, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA256, LibOrgBouncycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA } count:9];
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange {
  jint keyExchangeAlgorithm = LibOrgBouncycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(selectedCipherSuite_);
  switch (keyExchangeAlgorithm) {
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_anon:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA:
    return [self createDHKeyExchangeWithInt:keyExchangeAlgorithm];
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA:
    return [self createDHEKeyExchangeWithInt:keyExchangeAlgorithm];
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_anon:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_ECDSA:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_RSA:
    return [self createECDHKeyExchangeWithInt:keyExchangeAlgorithm];
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_ECDSA:
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_RSA:
    return [self createECDHEKeyExchangeWithInt:keyExchangeAlgorithm];
    case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA:
    return [self createRSAKeyExchange];
    default:
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createDHKeyExchangeWithInt:(jint)keyExchange {
  return new_LibOrgBouncycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(keyExchange, supportedSignatureAlgorithms_, dhVerifier_, nil);
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createDHEKeyExchangeWithInt:(jint)keyExchange {
  return new_LibOrgBouncycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_(keyExchange, supportedSignatureAlgorithms_, dhVerifier_, nil);
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createECDHKeyExchangeWithInt:(jint)keyExchange {
  return new_LibOrgBouncycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(keyExchange, supportedSignatureAlgorithms_, namedCurves_, clientECPointFormats_, serverECPointFormats_);
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createECDHEKeyExchangeWithInt:(jint)keyExchange {
  return new_LibOrgBouncycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(keyExchange, supportedSignatureAlgorithms_, namedCurves_, clientECPointFormats_, serverECPointFormats_);
}

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createRSAKeyExchange {
  return new_LibOrgBouncycastleCryptoTlsTlsRSAKeyExchange_initWithJavaUtilVector_(supportedSignatureAlgorithms_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x4, 6, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x4, 7, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsKeyExchange;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:withLibOrgBouncycastleCryptoTlsTlsDHVerifier:);
  methods[3].selector = @selector(getCipherSuites);
  methods[4].selector = @selector(getKeyExchange);
  methods[5].selector = @selector(createDHKeyExchangeWithInt:);
  methods[6].selector = @selector(createDHEKeyExchangeWithInt:);
  methods[7].selector = @selector(createECDHKeyExchangeWithInt:);
  methods[8].selector = @selector(createECDHEKeyExchangeWithInt:);
  methods[9].selector = @selector(createRSAKeyExchange);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dhVerifier_", "LLibOrgBouncycastleCryptoTlsTlsDHVerifier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoTlsTlsCipherFactory;", "LLibOrgBouncycastleCryptoTlsTlsCipherFactory;LLibOrgBouncycastleCryptoTlsTlsDHVerifier;", "LJavaIoIOException;", "createDHKeyExchange", "I", "createDHEKeyExchange", "createECDHKeyExchange", "createECDHEKeyExchange" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsDefaultTlsClient = { "DefaultTlsClient", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x401, 10, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsDefaultTlsClient;
}

@end

void LibOrgBouncycastleCryptoTlsDefaultTlsClient_init(LibOrgBouncycastleCryptoTlsDefaultTlsClient *self) {
  LibOrgBouncycastleCryptoTlsDefaultTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(self, new_LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory_init());
}

void LibOrgBouncycastleCryptoTlsDefaultTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(LibOrgBouncycastleCryptoTlsDefaultTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory) {
  LibOrgBouncycastleCryptoTlsDefaultTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_(self, cipherFactory, new_LibOrgBouncycastleCryptoTlsDefaultTlsDHVerifier_init());
}

void LibOrgBouncycastleCryptoTlsDefaultTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_(LibOrgBouncycastleCryptoTlsDefaultTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier) {
  LibOrgBouncycastleCryptoTlsAbstractTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  self->dhVerifier_ = dhVerifier;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsDefaultTlsClient)
