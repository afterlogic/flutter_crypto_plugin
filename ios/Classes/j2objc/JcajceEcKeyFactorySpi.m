//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ec/JcajceEcKeyFactorySpi.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "AsymmetricKeyParameter.h"
#include "BCECPrivateKey.h"
#include "BCECPublicKey.h"
#include "BaseKeyFactorySpi.h"
#include "BouncyCastleProvider.h"
#include "CipherParameters.h"
#include "EC5Util.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECParameterSpec.h"
#include "ECPoint.h"
#include "ECPrivateKey.h"
#include "ECPrivateKeySpec.h"
#include "ECPublicKeyParameters.h"
#include "ECPublicKeySpec.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceEcKeyFactorySpi.h"
#include "OpenSSHPrivateKeySpec.h"
#include "OpenSSHPublicKeySpec.h"
#include "OpenSSHPublicKeyUtil.h"
#include "PrivateKeyInfo.h"
#include "ProviderConfiguration.h"
#include "SubjectPublicKeyInfo.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/ECPrivateKey.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/ECPrivateKeySpec.h"
#include "java/security/spec/ECPublicKeySpec.h"
#include "java/security/spec/EllipticCurve.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, configuration);
  return self;
}

- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_((id<JavaSecurityInterfacesECPublicKey>) cast_check(key, JavaSecurityInterfacesECPublicKey_class_()), configuration_);
  }
  else if ([JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithJavaSecurityInterfacesECPrivateKey_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_((id<JavaSecurityInterfacesECPrivateKey>) cast_check(key, JavaSecurityInterfacesECPrivateKey_class_()), configuration_);
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"key type unknown");
}

- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)spec {
  if ([((IOSClass *) nil_chk(spec)) isAssignableFrom:JavaSecuritySpecECPublicKeySpec_class_()] && [JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPublicKey> k = (id<JavaSecurityInterfacesECPublicKey>) cast_check(key, JavaSecurityInterfacesECPublicKey_class_());
    if ([((id<JavaSecurityInterfacesECPublicKey>) nil_chk(k)) getParams] != nil) {
      return new_JavaSecuritySpecECPublicKeySpec_initWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_([k getW], [k getParams]);
    }
    else {
      LibOrgBouncycastleJceSpecECParameterSpec *implicitSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_JavaSecuritySpecECPublicKeySpec_initWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_([k getW], LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(implicitSpec)) getCurve], [implicitSpec getSeed]), implicitSpec));
    }
  }
  else if ([spec isAssignableFrom:JavaSecuritySpecECPrivateKeySpec_class_()] && [JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPrivateKey> k = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(key, JavaSecurityInterfacesECPrivateKey_class_());
    if ([((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(k)) getParams] != nil) {
      return new_JavaSecuritySpecECPrivateKeySpec_initWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_([k getS], [k getParams]);
    }
    else {
      LibOrgBouncycastleJceSpecECParameterSpec *implicitSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_JavaSecuritySpecECPrivateKeySpec_initWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_([k getS], LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(implicitSpec)) getCurve], [implicitSpec getSeed]), implicitSpec));
    }
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecECPublicKeySpec_class_()] && [JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPublicKey> k = (id<JavaSecurityInterfacesECPublicKey>) cast_check(key, JavaSecurityInterfacesECPublicKey_class_());
    if ([((id<JavaSecurityInterfacesECPublicKey>) nil_chk(k)) getParams] != nil) {
      return new_LibOrgBouncycastleJceSpecECPublicKeySpec_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_([k getParams], [k getW], false), LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_([k getParams], false));
    }
    else {
      LibOrgBouncycastleJceSpecECParameterSpec *implicitSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_LibOrgBouncycastleJceSpecECPublicKeySpec_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_([k getParams], [k getW], false), implicitSpec);
    }
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecECPrivateKeySpec_class_()] && [JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPrivateKey> k = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(key, JavaSecurityInterfacesECPrivateKey_class_());
    if ([((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(k)) getParams] != nil) {
      return new_LibOrgBouncycastleJceSpecECPrivateKeySpec_initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_([k getS], LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_([k getParams], false));
    }
    else {
      LibOrgBouncycastleJceSpecECParameterSpec *implicitSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_LibOrgBouncycastleJceSpecECPrivateKeySpec_initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_([k getS], implicitSpec);
    }
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_class_()] && [JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    if ([key isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey class]]) {
      LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *bcPk = (LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) key;
      LibOrgBouncycastleJceSpecECParameterSpec *sc = [((LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) nil_chk(bcPk)) getParameters];
      @try {
        return new_LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_initWithByteArray_(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([bcPk getQ], new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(sc)) getCurve], [sc getG], [sc getN], [sc getH], [sc getSeed]))));
      }
      @catch (JavaIoIOException *e) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to produce encoding: ", [e getMessage]));
      }
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid key type: ", [[((id<JavaSecurityKey>) nil_chk(key)) java_getClass] getName]));
    }
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_class_()] && [JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    if ([key isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey class]]) {
      @try {
        return new_LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]))) parsePrivateKey])) toASN1Primitive])) getEncoded]);
      }
      @catch (JavaIoIOException *e) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"cannot encoded key: ", [e getMessage]));
      }
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid key type: ", [[((id<JavaSecurityKey>) nil_chk(key)) java_getClass] getName]));
    }
  }
  return [super engineGetKeySpecWithJavaSecurityKey:key withIOSClass:spec];
}

- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecECPrivateKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withLibOrgBouncycastleJceSpecECPrivateKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_, (LibOrgBouncycastleJceSpecECPrivateKeySpec *) keySpec, configuration_);
  }
  else if ([keySpec isKindOfClass:[JavaSecuritySpecECPrivateKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withJavaSecuritySpecECPrivateKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_, (JavaSecuritySpecECPrivateKeySpec *) keySpec, configuration_);
  }
  else if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec class]]) {
    LibOrgBouncycastleAsn1SecECPrivateKey *ecKey = LibOrgBouncycastleAsn1SecECPrivateKey_getInstanceWithId_([((LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *) nil_chk(((LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *) keySpec))) getEncoded]);
    @try {
      return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_, new_LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey), [((LibOrgBouncycastleAsn1SecECPrivateKey *) nil_chk(ecKey)) getParameters]), ecKey), configuration_);
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$$", @"bad encoding: ", [e getMessage]));
    }
  }
  return [super engineGeneratePrivateWithJavaSecuritySpecKeySpec:keySpec];
}

- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  @try {
    if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecECPublicKeySpec class]]) {
      return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleJceSpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_, (LibOrgBouncycastleJceSpecECPublicKeySpec *) keySpec, configuration_);
    }
    else if ([keySpec isKindOfClass:[JavaSecuritySpecECPublicKeySpec class]]) {
      return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_, (JavaSecuritySpecECPublicKeySpec *) keySpec, configuration_);
    }
    else if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec class]]) {
      id<LibOrgBouncycastleCryptoCipherParameters> params = LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithByteArray_([((LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *) nil_chk(((LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *) keySpec))) getEncoded]);
      if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]]) {
        LibOrgBouncycastleCryptoParamsECDomainParameters *parameters = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) params))) getParameters];
        return [self engineGeneratePublicWithJavaSecuritySpecKeySpec:new_LibOrgBouncycastleJceSpecECPublicKeySpec_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) params))) getQ], new_LibOrgBouncycastleJceSpecECParameterSpec_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(parameters)) getCurve], [parameters getG], [parameters getN], [parameters getH], [parameters getSeed]))];
      }
      else {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"openssh key is not ec public key");
      }
    }
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"invalid KeySpec: ", [e getMessage]), e);
  }
  return [super engineGeneratePublicWithJavaSecuritySpecKeySpec:keySpec];
}

- (id<JavaSecurityPrivateKey>)generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) getPrivateKeyAlgorithm])) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_, keyInfo, configuration_);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

- (id<JavaSecurityPublicKey>)generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_, keyInfo, configuration_);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x4, 4, 5, 6, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x4, 7, 8, 6, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x4, 9, 8, 6, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 13, 14, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[1].selector = @selector(engineTranslateKeyWithJavaSecurityKey:);
  methods[2].selector = @selector(engineGetKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[3].selector = @selector(engineGeneratePrivateWithJavaSecuritySpecKeySpec:);
  methods[4].selector = @selector(engineGeneratePublicWithJavaSecuritySpecKeySpec:);
  methods[5].selector = @selector(generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[6].selector = @selector(generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "algorithm_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "configuration_", "LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LLibOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "engineTranslateKey", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "engineGetKeySpec", "LJavaSecurityKey;LIOSClass;", "LJavaSecuritySpecInvalidKeySpecException;", "engineGeneratePrivate", "LJavaSecuritySpecKeySpec;", "engineGeneratePublic", "generatePrivate", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "LJavaIoIOException;", "generatePublic", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC;LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi = { "JcajceEcKeyFactorySpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, 15, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi *self, NSString *algorithm, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseKeyFactorySpi_init(self);
  self->algorithm_ = algorithm;
  self->configuration_ = configuration;
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi, initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, configuration)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi, initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, configuration)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC = { "EC", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"EC", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_EC)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA = { "ECDSA", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECDSA", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDSA)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410 = { "ECGOST3410", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECGOST3410", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012 = { "ECGOST3410_2012", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012 *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECGOST3410-2012", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012 *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012 *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECGOST3410_2012)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH = { "ECDH", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECDH", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDH)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC = { "ECDHC", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECDHC", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECDHC)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV = { "ECMQV", "lib.org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV_init(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_initWithNSString_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, @"ECMQV", JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV *new_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV *create_LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcJcajceEcKeyFactorySpi_ECMQV)
