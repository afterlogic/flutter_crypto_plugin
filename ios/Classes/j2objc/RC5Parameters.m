//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/RC5Parameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RC5Parameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoParamsRC5Parameters () {
 @public
  IOSByteArray *key_;
  jint rounds_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsRC5Parameters, key_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoParamsRC5Parameters

- (instancetype)initWithByteArray:(IOSByteArray *)key
                          withInt:(jint)rounds {
  LibOrgBouncycastleCryptoParamsRC5Parameters_initWithByteArray_withInt_(self, key, rounds);
  return self;
}

- (IOSByteArray *)getKey {
  return key_;
}

- (jint)getRounds {
  return rounds_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withInt:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(getRounds);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rounds_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsRC5Parameters = { "RC5Parameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsRC5Parameters;
}

@end

void LibOrgBouncycastleCryptoParamsRC5Parameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoParamsRC5Parameters *self, IOSByteArray *key, jint rounds) {
  NSObject_init(self);
  if (((IOSByteArray *) nil_chk(key))->size_ > 255) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"RC5 key length can be no greater than 255");
  }
  self->key_ = [IOSByteArray newArrayWithLength:key->size_];
  self->rounds_ = rounds;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, self->key_, 0, key->size_);
}

LibOrgBouncycastleCryptoParamsRC5Parameters *new_LibOrgBouncycastleCryptoParamsRC5Parameters_initWithByteArray_withInt_(IOSByteArray *key, jint rounds) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsRC5Parameters, initWithByteArray_withInt_, key, rounds)
}

LibOrgBouncycastleCryptoParamsRC5Parameters *create_LibOrgBouncycastleCryptoParamsRC5Parameters_initWithByteArray_withInt_(IOSByteArray *key, jint rounds) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsRC5Parameters, initWithByteArray_withInt_, key, rounds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsRC5Parameters)
