//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/CMPCertificate.java
//

#ifndef CMPCertificate_H
#define CMPCertificate_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1X509AttributeCertificate;
@class LibOrgBouncycastleAsn1X509X509Certificate;

@interface LibOrgBouncycastleAsn1CmpCMPCertificate : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AttributeCertificate:(LibOrgBouncycastleAsn1X509AttributeCertificate *)x509v2AttrCert;

- (instancetype __nonnull)initWithInt:(jint)type
 withLibOrgBouncycastleAsn1ASN1Object:(LibOrgBouncycastleAsn1ASN1Object *)otherCert;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509X509Certificate:(LibOrgBouncycastleAsn1X509X509Certificate *)x509v3PKCert;

+ (LibOrgBouncycastleAsn1CmpCMPCertificate *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1ASN1Object *)getOtherCert;

- (jint)getOtherCertTag;

- (LibOrgBouncycastleAsn1X509AttributeCertificate *)getX509v2AttrCert;

- (LibOrgBouncycastleAsn1X509X509Certificate *)getX509v3PKCert;

- (jboolean)isX509v3PKCert;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmpCMPCertificate)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpCMPCertificate_initWithLibOrgBouncycastleAsn1X509AttributeCertificate_(LibOrgBouncycastleAsn1CmpCMPCertificate *self, LibOrgBouncycastleAsn1X509AttributeCertificate *x509v2AttrCert);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCMPCertificate *new_LibOrgBouncycastleAsn1CmpCMPCertificate_initWithLibOrgBouncycastleAsn1X509AttributeCertificate_(LibOrgBouncycastleAsn1X509AttributeCertificate *x509v2AttrCert) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCMPCertificate *create_LibOrgBouncycastleAsn1CmpCMPCertificate_initWithLibOrgBouncycastleAsn1X509AttributeCertificate_(LibOrgBouncycastleAsn1X509AttributeCertificate *x509v2AttrCert);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpCMPCertificate_initWithInt_withLibOrgBouncycastleAsn1ASN1Object_(LibOrgBouncycastleAsn1CmpCMPCertificate *self, jint type, LibOrgBouncycastleAsn1ASN1Object *otherCert);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCMPCertificate *new_LibOrgBouncycastleAsn1CmpCMPCertificate_initWithInt_withLibOrgBouncycastleAsn1ASN1Object_(jint type, LibOrgBouncycastleAsn1ASN1Object *otherCert) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCMPCertificate *create_LibOrgBouncycastleAsn1CmpCMPCertificate_initWithInt_withLibOrgBouncycastleAsn1ASN1Object_(jint type, LibOrgBouncycastleAsn1ASN1Object *otherCert);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpCMPCertificate_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1CmpCMPCertificate *self, LibOrgBouncycastleAsn1X509X509Certificate *x509v3PKCert);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCMPCertificate *new_LibOrgBouncycastleAsn1CmpCMPCertificate_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509X509Certificate *x509v3PKCert) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCMPCertificate *create_LibOrgBouncycastleAsn1CmpCMPCertificate_initWithLibOrgBouncycastleAsn1X509X509Certificate_(LibOrgBouncycastleAsn1X509X509Certificate *x509v3PKCert);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCMPCertificate *LibOrgBouncycastleAsn1CmpCMPCertificate_getInstanceWithId_(id o);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmpCMPCertificate)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CMPCertificate_H
