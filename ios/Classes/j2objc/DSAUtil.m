//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSAUtil.java
//

#include "ASN1ObjectIdentifier.h"
#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BCDSAPublicKey.h"
#include "DSAParameters.h"
#include "DSAPrivateKeyParameters.h"
#include "DSAPublicKeyParameters.h"
#include "DSAUtil.h"
#include "Fingerprint.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OIWObjectIdentifiers.h"
#include "SubjectPublicKeyInfo.h"
#include "X9ObjectIdentifiers.h"
#include "java/lang/Exception.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/DSAParams.h"
#include "java/security/interfaces/DSAPrivateKey.h"
#include "java/security/interfaces/DSAPublicKey.h"

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil)

IOSObjectArray *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_dsaOids;

@implementation LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil

+ (IOSObjectArray *)dsaOids {
  return LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_dsaOids;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isDsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)algOid {
  return LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_isDsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(algOid);
}

+ (LibOrgBouncycastleCryptoParamsDSAParameters *)toDSAParametersWithJavaSecurityInterfacesDSAParams:(id<JavaSecurityInterfacesDSAParams>)spec {
  return LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_toDSAParametersWithJavaSecurityInterfacesDSAParams_(spec);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(key);
}

+ (NSString *)generateKeyFingerprintWithJavaMathBigInteger:(JavaMathBigInteger *)y
                       withJavaSecurityInterfacesDSAParams:(id<JavaSecurityInterfacesDSAParams>)params {
  return LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generateKeyFingerprintWithJavaMathBigInteger_withJavaSecurityInterfacesDSAParams_(y, params);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsDSAParameters;", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 4, 5, 6, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 7, 8, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isDsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[2].selector = @selector(toDSAParametersWithJavaSecurityInterfacesDSAParams:);
  methods[3].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[4].selector = @selector(generatePrivateKeyParameterWithJavaSecurityPrivateKey:);
  methods[5].selector = @selector(generateKeyFingerprintWithJavaMathBigInteger:withJavaSecurityInterfacesDSAParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dsaOids", "[LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "isDsaOid", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "toDSAParameters", "LJavaSecurityInterfacesDSAParams;", "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "generatePrivateKeyParameter", "LJavaSecurityPrivateKey;", "generateKeyFingerprint", "LJavaMathBigInteger;LJavaSecurityInterfacesDSAParams;", &LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_dsaOids };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil = { "DSAUtil", "lib.org.bouncycastle.jcajce.provider.asymmetric.dsa", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil class]) {
    LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_dsaOids = [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_dsa), JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, dsaWithSHA1), JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_dsa_with_sha1) } count:3 type:LibOrgBouncycastleAsn1ASN1ObjectIdentifier_class_()];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil)
  }
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_init(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil, init)
}

jboolean LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_isDsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid) {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_initialize();
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_dsaOids))->size_; i++) {
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOid)) isEqual:IOSObjectArray_Get(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_dsaOids, i)]) {
      return true;
    }
  }
  return false;
}

LibOrgBouncycastleCryptoParamsDSAParameters *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_toDSAParametersWithJavaSecurityInterfacesDSAParams_(id<JavaSecurityInterfacesDSAParams> spec) {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_initialize();
  if (spec != nil) {
    return new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([spec getP], [spec getQ], [spec getG]);
  }
  return nil;
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_initialize();
  if ([key isKindOfClass:[LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey class]]) {
    return [((LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *) nil_chk(((LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *) key))) engineGetKeyParameters];
  }
  if ([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:key]) {
    return [new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_((id<JavaSecurityInterfacesDSAPublicKey>) cast_check(key, JavaSecurityInterfacesDSAPublicKey_class_())) engineGetKeyParameters];
  }
  @try {
    IOSByteArray *bytes = [((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded];
    LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *bckey = new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(bytes));
    return [bckey engineGetKeyParameters];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"can't identify DSA public key: ", [[key java_getClass] getName]));
  }
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key) {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_initialize();
  if ([JavaSecurityInterfacesDSAPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesDSAPrivateKey> k = (id<JavaSecurityInterfacesDSAPrivateKey>) cast_check(key, JavaSecurityInterfacesDSAPrivateKey_class_());
    return new_LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_([((id<JavaSecurityInterfacesDSAPrivateKey>) nil_chk(k)) getX], new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getP], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getQ], [((id<JavaSecurityInterfacesDSAParams>) nil_chk([k getParams])) getG]));
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't identify DSA private key.");
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generateKeyFingerprintWithJavaMathBigInteger_withJavaSecurityInterfacesDSAParams_(JavaMathBigInteger *y, id<JavaSecurityInterfacesDSAParams> params) {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_initialize();
  return [new_LibOrgBouncycastleUtilFingerprint_initWithByteArray_(LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_withByteArray_([((JavaMathBigInteger *) nil_chk(y)) toByteArray], [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesDSAParams>) nil_chk(params)) getP])) toByteArray], [((JavaMathBigInteger *) nil_chk([params getQ])) toByteArray], [((JavaMathBigInteger *) nil_chk([params getG])) toByteArray])) description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil)
