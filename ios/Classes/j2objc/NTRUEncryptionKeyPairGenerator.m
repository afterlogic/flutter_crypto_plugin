//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/ntru/NTRUEncryptionKeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "DenseTernaryPolynomial.h"
#include "IOSPrimitiveArray.h"
#include "IntegerPolynomial.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "NTRUEncryptionKeyGenerationParameters.h"
#include "NTRUEncryptionKeyPairGenerator.h"
#include "NTRUEncryptionParameters.h"
#include "NTRUEncryptionPrivateKeyParameters.h"
#include "NTRUEncryptionPublicKeyParameters.h"
#include "NTRUParameters.h"
#include "PqcMathPolynomial.h"
#include "ProductFormPolynomial.h"
#include "TernaryPolynomial.h"
#include "Util.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator () {
 @public
  LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *params_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator, params_, LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *)

@implementation LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  self->params_ = (LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters class]);
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  jint N = ((LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_))->N_;
  jint q = params_->q_;
  jint df = params_->df_;
  jint df1 = params_->df1_;
  jint df2 = params_->df2_;
  jint df3 = params_->df3_;
  jint dg = params_->dg_;
  jboolean fastFp = params_->fastFp_;
  jboolean sparse = params_->sparse_;
  id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> t;
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *fq;
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *fp = nil;
  while (true) {
    LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *f;
    if (fastFp) {
      t = ((LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_))->polyType_ == LibOrgBouncycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE ? LibOrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(N, df, df, sparse, [params_ getRandom]) : (id) LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_generateRandomWithInt_withInt_withInt_withInt_withInt_withJavaSecuritySecureRandom_(N, df1, df2, df3, df3, [params_ getRandom]);
      f = [t toIntegerPolynomial];
      [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(f)) multWithInt:3];
      *IOSIntArray_GetRef(nil_chk(f->coeffs_), 0) += 1;
    }
    else {
      t = ((LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_))->polyType_ == LibOrgBouncycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE ? LibOrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(N, df, df - 1, sparse, [params_ getRandom]) : (id) LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_generateRandomWithInt_withInt_withInt_withInt_withInt_withJavaSecuritySecureRandom_(N, df1, df2, df3, df3 - 1, [params_ getRandom]);
      f = [t toIntegerPolynomial];
      fp = [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(f)) invertF3];
      if (fp == nil) {
        continue;
      }
    }
    fq = [f invertFqWithInt:q];
    if (fq == nil) {
      continue;
    }
    break;
  }
  if (fastFp) {
    fp = new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
    *IOSIntArray_GetRef(nil_chk(fp->coeffs_), 0) = 1;
  }
  LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *g;
  while (true) {
    g = LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, dg, dg - 1, [((LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_)) getRandom]);
    if ([((LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *) nil_chk(g)) invertFqWithInt:q] != nil) {
      break;
    }
  }
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h = [((LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial *) nil_chk(g)) multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:fq withInt:q];
  [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(h)) mult3WithInt:q];
  [h ensurePositiveWithInt:q];
  [g clear];
  [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(fq)) clear];
  LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *priv = new_LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters_(h, t, fp, [((LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_)) getEncryptionParameters]);
  LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *pub = new_LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUEncryptionParameters_(h, [((LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_)) getEncryptionParameters]);
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pub, priv);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator = { "NTRUEncryptionKeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator_init(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator)
