//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/RSABlindedEngine.java
//

#include "BigIntegers.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "RSABlindedEngine.h"
#include "RSACoreEngine.h"
#include "RSAKeyParameters.h"
#include "RSAPrivateCrtKeyParameters.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoEnginesRSABlindedEngine () {
 @public
  LibOrgBouncycastleCryptoEnginesRSACoreEngine *core_;
  LibOrgBouncycastleCryptoParamsRSAKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRSABlindedEngine, core_, LibOrgBouncycastleCryptoEnginesRSACoreEngine *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRSABlindedEngine, key_, LibOrgBouncycastleCryptoParamsRSAKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRSABlindedEngine, random_, JavaSecuritySecureRandom *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoEnginesRSABlindedEngine_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoEnginesRSABlindedEngine_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesRSABlindedEngine, ONE, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoEnginesRSABlindedEngine)

@implementation LibOrgBouncycastleCryptoEnginesRSABlindedEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  [((LibOrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:param];
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
    key_ = (LibOrgBouncycastleCryptoParamsRSAKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [LibOrgBouncycastleCryptoParamsRSAKeyParameters class]);
    random_ = [rParam getRandom];
  }
  else {
    key_ = (LibOrgBouncycastleCryptoParamsRSAKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsRSAKeyParameters class]);
    random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  }
}

- (jint)getInputBlockSize {
  return [((LibOrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getInputBlockSize];
}

- (jint)getOutputBlockSize {
  return [((LibOrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getOutputBlockSize];
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  if (key_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"RSA engine not initialised");
  }
  JavaMathBigInteger *input = [((LibOrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) convertInputWithByteArray:inArg withInt:inOff withInt:inLen];
  JavaMathBigInteger *result;
  if ([key_ isKindOfClass:[LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]]) {
    LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *k = (LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) key_;
    JavaMathBigInteger *e = [((LibOrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) nil_chk(k)) getPublicExponent];
    if (e != nil) {
      JavaMathBigInteger *m = [k getModulus];
      JavaMathBigInteger *r = LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoEnginesRSABlindedEngine_ONE, [((JavaMathBigInteger *) nil_chk(m)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoEnginesRSABlindedEngine_ONE], random_);
      JavaMathBigInteger *blindedInput = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:m])) multiplyWithJavaMathBigInteger:input])) modWithJavaMathBigInteger:m];
      JavaMathBigInteger *blindedResult = [((LibOrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) processBlockWithJavaMathBigInteger:blindedInput];
      JavaMathBigInteger *rInv = [r modInverseWithJavaMathBigInteger:m];
      result = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(blindedResult)) multiplyWithJavaMathBigInteger:rInv])) modWithJavaMathBigInteger:m];
      if (![((JavaMathBigInteger *) nil_chk(input)) isEqual:[((JavaMathBigInteger *) nil_chk(result)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:m]]) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"RSA engine faulty decryption/signing detected");
      }
    }
    else {
      result = [((LibOrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) processBlockWithJavaMathBigInteger:input];
    }
  }
  else {
    result = [((LibOrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) processBlockWithJavaMathBigInteger:input];
  }
  return [((LibOrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) convertOutputWithJavaMathBigInteger:result];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getInputBlockSize);
  methods[3].selector = @selector(getOutputBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "core_", "LLibOrgBouncycastleCryptoEnginesRSACoreEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsRSAKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "processBlock", "[BII", &LibOrgBouncycastleCryptoEnginesRSABlindedEngine_ONE };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesRSABlindedEngine = { "RSABlindedEngine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesRSABlindedEngine;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoEnginesRSABlindedEngine class]) {
    LibOrgBouncycastleCryptoEnginesRSABlindedEngine_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoEnginesRSABlindedEngine)
  }
}

@end

void LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init(LibOrgBouncycastleCryptoEnginesRSABlindedEngine *self) {
  NSObject_init(self);
  self->core_ = new_LibOrgBouncycastleCryptoEnginesRSACoreEngine_init();
}

LibOrgBouncycastleCryptoEnginesRSABlindedEngine *new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesRSABlindedEngine, init)
}

LibOrgBouncycastleCryptoEnginesRSABlindedEngine *create_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesRSABlindedEngine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesRSABlindedEngine)
