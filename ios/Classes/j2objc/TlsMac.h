//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsMac.java
//

#ifndef TlsMac_H
#define TlsMac_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoMac;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsTlsMac : NSObject {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsContext> context_;
  IOSByteArray *secret_;
  id<LibOrgBouncycastleCryptoMac> mac_;
  jint digestBlockSize_;
  jint digestOverhead_;
  jint macLength_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                     withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                                          withByteArray:(IOSByteArray *)key
                                                                withInt:(jint)keyOff
                                                                withInt:(jint)keyLen;

- (IOSByteArray *)calculateMacWithLong:(jlong)seqNo
                             withShort:(jshort)type
                         withByteArray:(IOSByteArray *)message
                               withInt:(jint)offset
                               withInt:(jint)length;

- (IOSByteArray *)calculateMacConstantTimeWithLong:(jlong)seqNo
                                         withShort:(jshort)type
                                     withByteArray:(IOSByteArray *)message
                                           withInt:(jint)offset
                                           withInt:(jint)length
                                           withInt:(jint)fullLength
                                     withByteArray:(IOSByteArray *)dummyData;

- (IOSByteArray *)getMACSecret;

- (jint)getSize;

#pragma mark Protected

- (jint)getDigestBlockCountWithInt:(jint)inputLength;

- (IOSByteArray *)truncateWithByteArray:(IOSByteArray *)bs;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsMac)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsMac, context_, id<LibOrgBouncycastleCryptoTlsTlsContext>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsMac, secret_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsMac, mac_, id<LibOrgBouncycastleCryptoMac>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsMac_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_withInt_(LibOrgBouncycastleCryptoTlsTlsMac *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *key, jint keyOff, jint keyLen);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsMac *new_LibOrgBouncycastleCryptoTlsTlsMac_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_withInt_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *key, jint keyOff, jint keyLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsMac *create_LibOrgBouncycastleCryptoTlsTlsMac_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_withInt_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *key, jint keyOff, jint keyLen);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsMac)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsMac_H
