//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/util/CipherSpiExt.java
//

#include "CipherSpiExt.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/Key.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/CipherSpi.h"

__attribute__((unused)) static void LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_engineInitWithInt_withJavaSecurityKey_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt *self, jint opMode, id<JavaSecurityKey> key, JavaSecuritySecureRandom *random);

@implementation LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt

+ (jint)ENCRYPT_MODE {
  return LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_ENCRYPT_MODE;
}

+ (jint)DECRYPT_MODE {
  return LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_DECRYPT_MODE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)engineInitWithInt:(jint)opMode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_engineInitWithInt_withJavaSecurityKey_withJavaSecuritySecureRandom_(self, opMode, key, random);
}

- (void)engineInitWithInt:(jint)opMode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)algParams
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (algParams == nil) {
    LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_engineInitWithInt_withJavaSecurityKey_withJavaSecuritySecureRandom_(self, opMode, key, random);
    return;
  }
  id<JavaSecuritySpecAlgorithmParameterSpec> paramSpec = nil;
  [self engineInitWithInt:opMode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:paramSpec withJavaSecuritySecureRandom:random];
}

- (void)engineInitWithInt:(jint)opMode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)javaRand {
  if ((params != nil) && !([JavaSecuritySpecAlgorithmParameterSpec_class_() isInstance:params])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_init();
  }
  if ((key == nil) || !([JavaSecurityKey_class_() isInstance:key])) {
    @throw new_JavaSecurityInvalidKeyException_init();
  }
  self->opMode_ = opMode;
  if (opMode == LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_ENCRYPT_MODE) {
    JavaSecuritySecureRandom *flexiRand = javaRand;
    [self initEncryptWithJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:params withJavaSecuritySecureRandom:flexiRand];
  }
  else if (opMode == LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_DECRYPT_MODE) {
    [self initDecryptWithJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:params];
  }
}

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inOff
                                     withInt:(jint)inLen {
  return [self doFinalWithByteArray:input withInt:inOff withInt:inLen];
}

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inOff
                           withInt:(jint)inLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outOff {
  return [self doFinalWithByteArray:input withInt:inOff withInt:inLen withByteArray:output withInt:outOff];
}

- (jint)engineGetBlockSize {
  return [self getBlockSize];
}

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  if (!([JavaSecurityKey_class_() isInstance:key])) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Unsupported key.");
  }
  return [self getKeySizeWithJavaSecurityKey:key];
}

- (IOSByteArray *)engineGetIV {
  return [self getIV];
}

- (jint)engineGetOutputSizeWithInt:(jint)inLen {
  return [self getOutputSizeWithInt:inLen];
}

- (JavaSecurityAlgorithmParameters *)engineGetParameters {
  return nil;
}

- (void)engineSetModeWithNSString:(NSString *)modeName {
  [self setModeWithNSString:modeName];
}

- (void)engineSetPaddingWithNSString:(NSString *)paddingName {
  [self setPaddingWithNSString:paddingName];
}

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  return [self updateWithByteArray:input withInt:inOff withInt:inLen];
}

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                          withInt:(jint)inLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outOff {
  return [self updateWithByteArray:input withInt:inOff withInt:inLen withByteArray:output withInt:outOff];
}

- (void)initEncryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)cipherParams
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initDecryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)cipherParams {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getBlockSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getOutputSizeWithInt:(jint)inputLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaSecuritySpecAlgorithmParameterSpec>)getParameters {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)getIV {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setModeWithNSString:(NSString *)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setPaddingWithNSString:(NSString *)padding {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (IOSByteArray *)updateWithByteArray:(IOSByteArray *)input {
  return [self updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
}

- (IOSByteArray *)updateWithByteArray:(IOSByteArray *)input
                              withInt:(jint)inOff
                              withInt:(jint)inLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)inLen
              withByteArray:(IOSByteArray *)output
                    withInt:(jint)outOff {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)doFinal {
  return [self doFinalWithByteArray:nil withInt:0 withInt:0];
}

- (IOSByteArray *)doFinalWithByteArray:(IOSByteArray *)input {
  return [self doFinalWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
}

- (IOSByteArray *)doFinalWithByteArray:(IOSByteArray *)input
                               withInt:(jint)inOff
                               withInt:(jint)inLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)input
                     withInt:(jint)inOff
                     withInt:(jint)inLen
               withByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x14, 0, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 5, 4, -1, -1, -1 },
    { NULL, "[B", 0x14, 6, 7, 8, -1, -1, -1 },
    { NULL, "I", 0x14, 6, 9, 10, -1, -1, -1 },
    { NULL, "I", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x14, 11, 12, 2, -1, -1, -1 },
    { NULL, "[B", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x14, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x14, 18, 16, 19, -1, -1, -1 },
    { NULL, "[B", 0x14, 20, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x14, 20, 9, 21, -1, -1, -1 },
    { NULL, "V", 0x401, 22, 23, 4, -1, -1, -1 },
    { NULL, "V", 0x401, 24, 25, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 26, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 27, 12, 2, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecAlgorithmParameterSpec;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 28, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x404, 29, 16, 19, -1, -1, -1 },
    { NULL, "[B", 0x11, 30, 31, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, 30, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 30, 9, 21, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, 8, -1, -1, -1 },
    { NULL, "[B", 0x11, 32, 31, 8, -1, -1, -1 },
    { NULL, "[B", 0x401, 32, 7, 8, -1, -1, -1 },
    { NULL, "I", 0x401, 32, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecurityAlgorithmParameters:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[6].selector = @selector(engineGetBlockSize);
  methods[7].selector = @selector(engineGetKeySizeWithJavaSecurityKey:);
  methods[8].selector = @selector(engineGetIV);
  methods[9].selector = @selector(engineGetOutputSizeWithInt:);
  methods[10].selector = @selector(engineGetParameters);
  methods[11].selector = @selector(engineSetModeWithNSString:);
  methods[12].selector = @selector(engineSetPaddingWithNSString:);
  methods[13].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[14].selector = @selector(engineUpdateWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[15].selector = @selector(initEncryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[16].selector = @selector(initDecryptWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[17].selector = @selector(getName);
  methods[18].selector = @selector(getBlockSize);
  methods[19].selector = @selector(getOutputSizeWithInt:);
  methods[20].selector = @selector(getKeySizeWithJavaSecurityKey:);
  methods[21].selector = @selector(getParameters);
  methods[22].selector = @selector(getIV);
  methods[23].selector = @selector(setModeWithNSString:);
  methods[24].selector = @selector(setPaddingWithNSString:);
  methods[25].selector = @selector(updateWithByteArray:);
  methods[26].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[27].selector = @selector(updateWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[28].selector = @selector(doFinal);
  methods[29].selector = @selector(doFinalWithByteArray:);
  methods[30].selector = @selector(doFinalWithByteArray:withInt:withInt:);
  methods[31].selector = @selector(doFinalWithByteArray:withInt:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ENCRYPT_MODE", "I", .constantValue.asInt = LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_ENCRYPT_MODE, 0x19, -1, -1, -1, -1 },
    { "DECRYPT_MODE", "I", .constantValue.asInt = LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_DECRYPT_MODE, 0x19, -1, -1, -1, -1 },
    { "opMode_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineInit", "ILJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "ILJavaSecurityKey;LJavaSecurityAlgorithmParameters;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "ILJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "engineDoFinal", "[BII", "LJavaxCryptoIllegalBlockSizeException;LJavaxCryptoBadPaddingException;", "[BII[BI", "LJavaxCryptoShortBufferException;LJavaxCryptoIllegalBlockSizeException;LJavaxCryptoBadPaddingException;", "engineGetKeySize", "LJavaSecurityKey;", "engineGetOutputSize", "I", "engineSetMode", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;", "engineSetPadding", "LJavaxCryptoNoSuchPaddingException;", "engineUpdate", "LJavaxCryptoShortBufferException;", "initEncrypt", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "initDecrypt", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;", "getOutputSize", "getKeySize", "setMode", "setPadding", "update", "[B", "doFinal" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt = { "CipherSpiExt", "lib.org.bouncycastle.pqc.jcajce.provider.util", ptrTable, methods, fields, 7, 0x401, 32, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt;
}

@end

void LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_init(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt *self) {
  JavaxCryptoCipherSpi_init(self);
}

void LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt_engineInitWithInt_withJavaSecurityKey_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt *self, jint opMode, id<JavaSecurityKey> key, JavaSecuritySecureRandom *random) {
  @try {
    [self engineInitWithInt:opMode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:nil withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_([e getMessage]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderUtilCipherSpiExt)
