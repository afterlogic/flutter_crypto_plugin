//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/DERGenerator.java
//

#include "ASN1Generator.h"
#include "BERTags.h"
#include "DERGenerator.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/OutputStream.h"

@interface LibOrgBouncycastleAsn1DERGenerator () {
 @public
  jboolean _tagged_;
  jboolean _isExplicit_;
  jint _tagNo_;
}

- (void)writeLengthWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                  withInt:(jint)length;

@end

__attribute__((unused)) static void LibOrgBouncycastleAsn1DERGenerator_writeLengthWithJavaIoOutputStream_withInt_(LibOrgBouncycastleAsn1DERGenerator *self, JavaIoOutputStream *outArg, jint length);

@implementation LibOrgBouncycastleAsn1DERGenerator

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  LibOrgBouncycastleAsn1DERGenerator_initWithJavaIoOutputStream_(self, outArg);
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                   withInt:(jint)tagNo
                               withBoolean:(jboolean)isExplicit {
  LibOrgBouncycastleAsn1DERGenerator_initWithJavaIoOutputStream_withInt_withBoolean_(self, outArg, tagNo, isExplicit);
  return self;
}

- (void)writeLengthWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                  withInt:(jint)length {
  LibOrgBouncycastleAsn1DERGenerator_writeLengthWithJavaIoOutputStream_withInt_(self, outArg, length);
}

- (void)writeDEREncodedWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                      withInt:(jint)tag
                                withByteArray:(IOSByteArray *)bytes {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:tag];
  LibOrgBouncycastleAsn1DERGenerator_writeLengthWithJavaIoOutputStream_withInt_(self, outArg, ((IOSByteArray *) nil_chk(bytes))->size_);
  [outArg writeWithByteArray:bytes];
}

- (void)writeDEREncodedWithInt:(jint)tag
                 withByteArray:(IOSByteArray *)bytes {
  if (_tagged_) {
    jint tagNum = _tagNo_ | LibOrgBouncycastleAsn1BERTags_TAGGED;
    if (_isExplicit_) {
      jint newTag = _tagNo_ | LibOrgBouncycastleAsn1BERTags_CONSTRUCTED | LibOrgBouncycastleAsn1BERTags_TAGGED;
      JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
      [self writeDEREncodedWithJavaIoOutputStream:bOut withInt:tag withByteArray:bytes];
      [self writeDEREncodedWithJavaIoOutputStream:_out_ withInt:newTag withByteArray:[bOut toByteArray]];
    }
    else {
      if ((tag & LibOrgBouncycastleAsn1BERTags_CONSTRUCTED) != 0) {
        [self writeDEREncodedWithJavaIoOutputStream:_out_ withInt:tagNum | LibOrgBouncycastleAsn1BERTags_CONSTRUCTED withByteArray:bytes];
      }
      else {
        [self writeDEREncodedWithJavaIoOutputStream:_out_ withInt:tagNum withByteArray:bytes];
      }
    }
  }
  else {
    [self writeDEREncodedWithJavaIoOutputStream:_out_ withInt:tag withByteArray:bytes];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 7, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:);
  methods[1].selector = @selector(initWithJavaIoOutputStream:withInt:withBoolean:);
  methods[2].selector = @selector(writeLengthWithJavaIoOutputStream:withInt:);
  methods[3].selector = @selector(writeDEREncodedWithJavaIoOutputStream:withInt:withByteArray:);
  methods[4].selector = @selector(writeDEREncodedWithInt:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_tagged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isExplicit_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tagNo_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;", "LJavaIoOutputStream;IZ", "writeLength", "LJavaIoOutputStream;I", "LJavaIoIOException;", "writeDEREncoded", "LJavaIoOutputStream;I[B", "I[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1DERGenerator = { "DERGenerator", "lib.org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x401, 5, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1DERGenerator;
}

@end

void LibOrgBouncycastleAsn1DERGenerator_initWithJavaIoOutputStream_(LibOrgBouncycastleAsn1DERGenerator *self, JavaIoOutputStream *outArg) {
  LibOrgBouncycastleAsn1ASN1Generator_initWithJavaIoOutputStream_(self, outArg);
  self->_tagged_ = false;
}

void LibOrgBouncycastleAsn1DERGenerator_initWithJavaIoOutputStream_withInt_withBoolean_(LibOrgBouncycastleAsn1DERGenerator *self, JavaIoOutputStream *outArg, jint tagNo, jboolean isExplicit) {
  LibOrgBouncycastleAsn1ASN1Generator_initWithJavaIoOutputStream_(self, outArg);
  self->_tagged_ = false;
  self->_tagged_ = true;
  self->_isExplicit_ = isExplicit;
  self->_tagNo_ = tagNo;
}

void LibOrgBouncycastleAsn1DERGenerator_writeLengthWithJavaIoOutputStream_withInt_(LibOrgBouncycastleAsn1DERGenerator *self, JavaIoOutputStream *outArg, jint length) {
  if (length > 127) {
    jint size = 1;
    jint val = length;
    while ((JreURShiftAssignInt(&val, 8)) != 0) {
      size++;
    }
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) (size | (jint) 0x80)];
    for (jint i = (size - 1) * 8; i >= 0; i -= 8) {
      [outArg writeWithInt:(jbyte) (JreRShift32(length, i))];
    }
  }
  else {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) length];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1DERGenerator)
