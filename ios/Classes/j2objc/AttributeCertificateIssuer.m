//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/x509/AttributeCertificateIssuer.java
//

#include "ASN1Encodable.h"
#include "ASN1Integer.h"
#include "ASN1Primitive.h"
#include "AttCertIssuer.h"
#include "AttributeCertificateIssuer.h"
#include "DERSequence.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuerSerial.h"
#include "J2ObjC_source.h"
#include "V2Form.h"
#include "X509Principal.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleX509AttributeCertificateIssuer ()

- (IOSObjectArray *)getNames;

- (jboolean)matchesDNWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)subject
                 withLibOrgBouncycastleAsn1X509GeneralNames:(LibOrgBouncycastleAsn1X509GeneralNames *)targets;

@end

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleX509AttributeCertificateIssuer_getNames(LibOrgBouncycastleX509AttributeCertificateIssuer *self);

__attribute__((unused)) static jboolean LibOrgBouncycastleX509AttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withLibOrgBouncycastleAsn1X509GeneralNames_(LibOrgBouncycastleX509AttributeCertificateIssuer *self, JavaxSecurityAuthX500X500Principal *subject, LibOrgBouncycastleAsn1X509GeneralNames *targets);

@implementation LibOrgBouncycastleX509AttributeCertificateIssuer

- (instancetype)initWithLibOrgBouncycastleAsn1X509AttCertIssuer:(LibOrgBouncycastleAsn1X509AttCertIssuer *)issuer {
  LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleAsn1X509AttCertIssuer_(self, issuer);
  return self;
}

- (instancetype)initWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)principal {
  LibOrgBouncycastleX509AttributeCertificateIssuer_initWithJavaxSecurityAuthX500X500Principal_(self, principal);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleJceX509Principal:(LibOrgBouncycastleJceX509Principal *)principal {
  LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleJceX509Principal_(self, principal);
  return self;
}

- (IOSObjectArray *)getNames {
  return LibOrgBouncycastleX509AttributeCertificateIssuer_getNames(self);
}

- (IOSObjectArray *)getPrincipals {
  IOSObjectArray *p = LibOrgBouncycastleX509AttributeCertificateIssuer_getNames(self);
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(p))->size_; i++) {
    if ([JavaSecurityPrincipal_class_() isInstance:IOSObjectArray_Get(p, i)]) {
      [l addWithId:IOSObjectArray_Get(p, i)];
    }
  }
  return (IOSObjectArray *) cast_check([l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:JavaSecurityPrincipal_class_()]], IOSClass_arrayType(JavaSecurityPrincipal_class_(), 1));
}

- (jboolean)matchesDNWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)subject
                 withLibOrgBouncycastleAsn1X509GeneralNames:(LibOrgBouncycastleAsn1X509GeneralNames *)targets {
  return LibOrgBouncycastleX509AttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withLibOrgBouncycastleAsn1X509GeneralNames_(self, subject, targets);
}

- (id)java_clone {
  return new_LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleAsn1X509AttCertIssuer_(LibOrgBouncycastleAsn1X509AttCertIssuer_getInstanceWithId_(form_));
}

- (jboolean)matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  if (!([cert isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
    return false;
  }
  JavaSecurityCertX509Certificate *x509Cert = (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class]);
  if ([form_ isKindOfClass:[LibOrgBouncycastleAsn1X509V2Form class]]) {
    LibOrgBouncycastleAsn1X509V2Form *issuer = (LibOrgBouncycastleAsn1X509V2Form *) form_;
    if ([((LibOrgBouncycastleAsn1X509V2Form *) nil_chk(issuer)) getBaseCertificateID] != nil) {
      return [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk([((LibOrgBouncycastleAsn1X509IssuerSerial *) nil_chk([issuer getBaseCertificateID])) getSerial])) getValue])) isEqual:[((JavaSecurityCertX509Certificate *) nil_chk(x509Cert)) getSerialNumber]] && LibOrgBouncycastleX509AttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withLibOrgBouncycastleAsn1X509GeneralNames_(self, [x509Cert getIssuerX500Principal], [((LibOrgBouncycastleAsn1X509IssuerSerial *) nil_chk([issuer getBaseCertificateID])) getIssuer]);
    }
    LibOrgBouncycastleAsn1X509GeneralNames *name = [issuer getIssuerName];
    if (LibOrgBouncycastleX509AttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withLibOrgBouncycastleAsn1X509GeneralNames_(self, [((JavaSecurityCertX509Certificate *) nil_chk(x509Cert)) getSubjectX500Principal], name)) {
      return true;
    }
  }
  else {
    LibOrgBouncycastleAsn1X509GeneralNames *name = (LibOrgBouncycastleAsn1X509GeneralNames *) cast_chk(form_, [LibOrgBouncycastleAsn1X509GeneralNames class]);
    if (LibOrgBouncycastleX509AttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withLibOrgBouncycastleAsn1X509GeneralNames_(self, [((JavaSecurityCertX509Certificate *) nil_chk(x509Cert)) getSubjectX500Principal], name)) {
      return true;
    }
  }
  return false;
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) {
    return true;
  }
  if (!([obj isKindOfClass:[LibOrgBouncycastleX509AttributeCertificateIssuer class]])) {
    return false;
  }
  LibOrgBouncycastleX509AttributeCertificateIssuer *other = (LibOrgBouncycastleX509AttributeCertificateIssuer *) cast_chk(obj, [LibOrgBouncycastleX509AttributeCertificateIssuer class]);
  return [((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(self->form_)) isEqual:((LibOrgBouncycastleX509AttributeCertificateIssuer *) nil_chk(other))->form_];
}

- (NSUInteger)hash {
  return ((jint) [((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(self->form_)) hash]);
}

- (jboolean)matchWithId:(id)obj {
  if (!([obj isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
    return false;
  }
  return [self matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *) cast_chk(obj, [JavaSecurityCertCertificate class])];
}

- (id)clone {
  return [self java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1X509AttCertIssuer:);
  methods[1].selector = @selector(initWithJavaxSecurityAuthX500X500Principal:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleJceX509Principal:);
  methods[3].selector = @selector(getNames);
  methods[4].selector = @selector(getPrincipals);
  methods[5].selector = @selector(matchesDNWithJavaxSecurityAuthX500X500Principal:withLibOrgBouncycastleAsn1X509GeneralNames:);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(matchWithJavaSecurityCertCertificate:);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(matchWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "form_", "LLibOrgBouncycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1X509AttCertIssuer;", "LJavaxSecurityAuthX500X500Principal;", "LJavaIoIOException;", "LLibOrgBouncycastleJceX509Principal;", "matchesDN", "LJavaxSecurityAuthX500X500Principal;LLibOrgBouncycastleAsn1X509GeneralNames;", "clone", "match", "LJavaSecurityCertCertificate;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _LibOrgBouncycastleX509AttributeCertificateIssuer = { "AttributeCertificateIssuer", "lib.org.bouncycastle.x509", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleX509AttributeCertificateIssuer;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleAsn1X509AttCertIssuer_(LibOrgBouncycastleX509AttributeCertificateIssuer *self, LibOrgBouncycastleAsn1X509AttCertIssuer *issuer) {
  NSObject_init(self);
  self->form_ = [((LibOrgBouncycastleAsn1X509AttCertIssuer *) nil_chk(issuer)) getIssuer];
}

LibOrgBouncycastleX509AttributeCertificateIssuer *new_LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleAsn1X509AttCertIssuer_(LibOrgBouncycastleAsn1X509AttCertIssuer *issuer) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509AttributeCertificateIssuer, initWithLibOrgBouncycastleAsn1X509AttCertIssuer_, issuer)
}

LibOrgBouncycastleX509AttributeCertificateIssuer *create_LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleAsn1X509AttCertIssuer_(LibOrgBouncycastleAsn1X509AttCertIssuer *issuer) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509AttributeCertificateIssuer, initWithLibOrgBouncycastleAsn1X509AttCertIssuer_, issuer)
}

void LibOrgBouncycastleX509AttributeCertificateIssuer_initWithJavaxSecurityAuthX500X500Principal_(LibOrgBouncycastleX509AttributeCertificateIssuer *self, JavaxSecurityAuthX500X500Principal *principal) {
  LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleJceX509Principal_(self, new_LibOrgBouncycastleJceX509Principal_initWithByteArray_([((JavaxSecurityAuthX500X500Principal *) nil_chk(principal)) getEncoded]));
}

LibOrgBouncycastleX509AttributeCertificateIssuer *new_LibOrgBouncycastleX509AttributeCertificateIssuer_initWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509AttributeCertificateIssuer, initWithJavaxSecurityAuthX500X500Principal_, principal)
}

LibOrgBouncycastleX509AttributeCertificateIssuer *create_LibOrgBouncycastleX509AttributeCertificateIssuer_initWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509AttributeCertificateIssuer, initWithJavaxSecurityAuthX500X500Principal_, principal)
}

void LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleJceX509Principal_(LibOrgBouncycastleX509AttributeCertificateIssuer *self, LibOrgBouncycastleJceX509Principal *principal) {
  NSObject_init(self);
  self->form_ = new_LibOrgBouncycastleAsn1X509V2Form_initWithLibOrgBouncycastleAsn1X509GeneralNames_(LibOrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_(new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X509X509Name_(principal))));
}

LibOrgBouncycastleX509AttributeCertificateIssuer *new_LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleJceX509Principal_(LibOrgBouncycastleJceX509Principal *principal) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509AttributeCertificateIssuer, initWithLibOrgBouncycastleJceX509Principal_, principal)
}

LibOrgBouncycastleX509AttributeCertificateIssuer *create_LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleJceX509Principal_(LibOrgBouncycastleJceX509Principal *principal) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509AttributeCertificateIssuer, initWithLibOrgBouncycastleJceX509Principal_, principal)
}

IOSObjectArray *LibOrgBouncycastleX509AttributeCertificateIssuer_getNames(LibOrgBouncycastleX509AttributeCertificateIssuer *self) {
  LibOrgBouncycastleAsn1X509GeneralNames *name;
  if ([self->form_ isKindOfClass:[LibOrgBouncycastleAsn1X509V2Form class]]) {
    name = [((LibOrgBouncycastleAsn1X509V2Form *) nil_chk(((LibOrgBouncycastleAsn1X509V2Form *) self->form_))) getIssuerName];
  }
  else {
    name = (LibOrgBouncycastleAsn1X509GeneralNames *) cast_chk(self->form_, [LibOrgBouncycastleAsn1X509GeneralNames class]);
  }
  IOSObjectArray *names = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk(name)) getNames];
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(names))->size_);
  for (jint i = 0; i != names->size_; i++) {
    if ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(names, i))) getTagNo] == LibOrgBouncycastleAsn1X509GeneralName_directoryName) {
      @try {
        [l addWithId:new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(names, i))) getName]))) toASN1Primitive])) getEncoded])];
      }
      @catch (JavaIoIOException *e) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"badly formed Name object");
      }
    }
  }
  return [l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:NSObject_class_()]];
}

jboolean LibOrgBouncycastleX509AttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withLibOrgBouncycastleAsn1X509GeneralNames_(LibOrgBouncycastleX509AttributeCertificateIssuer *self, JavaxSecurityAuthX500X500Principal *subject, LibOrgBouncycastleAsn1X509GeneralNames *targets) {
  IOSObjectArray *names = [((LibOrgBouncycastleAsn1X509GeneralNames *) nil_chk(targets)) getNames];
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(names))->size_; i++) {
    LibOrgBouncycastleAsn1X509GeneralName *gn = IOSObjectArray_Get(names, i);
    if ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(gn)) getTagNo] == LibOrgBouncycastleAsn1X509GeneralName_directoryName) {
      @try {
        if ([new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(([gn getName]))) toASN1Primitive])) getEncoded]) isEqual:subject]) {
          return true;
        }
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleX509AttributeCertificateIssuer)
