//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/ClassUtil.java
//

#ifndef ClassUtil_H
#define ClassUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSClass;

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (IOSClass *)loadClassWithIOSClass:(IOSClass *)sourceClass
                       withNSString:(NSString *)className_;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil_init(LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil *new_LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil *create_LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil_init(void);

FOUNDATION_EXPORT IOSClass *LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil_loadClassWithIOSClass_withNSString_(IOSClass *sourceClass, NSString *className_);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilClassUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ClassUtil_H
