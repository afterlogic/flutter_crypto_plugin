//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/SM2Engine.java
//

#include "Arrays.h"
#include "BigIntegers.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECKeyParameters.h"
#include "ECMultiplier.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "FixedPointCombMultiplier.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "Memoable.h"
#include "Pack.h"
#include "ParametersWithRandom.h"
#include "SM2Engine.h"
#include "SM3Digest.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoEnginesSM2Engine () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  jboolean forEncryption_;
  LibOrgBouncycastleCryptoParamsECKeyParameters *ecKey_;
  LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams_;
  jint curveLength_;
  JavaSecuritySecureRandom *random_;
}

- (IOSByteArray *)encryptWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                               withInt:(jint)inLen;

- (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                               withInt:(jint)inLen;

- (jboolean)notEncryptedWithByteArray:(IOSByteArray *)encData
                        withByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff;

- (void)kdfWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
          withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)c1
                                withByteArray:(IOSByteArray *)encData;

- (void)xor__WithByteArray:(IOSByteArray *)data
             withByteArray:(IOSByteArray *)kdfOut
                   withInt:(jint)dOff
                   withInt:(jint)dRemaining;

- (JavaMathBigInteger *)nextK;

- (void)addFieldElementWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
               withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)v;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesSM2Engine, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesSM2Engine, ecKey_, LibOrgBouncycastleCryptoParamsECKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesSM2Engine, ecParams_, LibOrgBouncycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesSM2Engine, random_, JavaSecuritySecureRandom *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEnginesSM2Engine_encryptWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, IOSByteArray *inArg, jint inOff, jint inLen);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEnginesSM2Engine_decryptWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, IOSByteArray *inArg, jint inOff, jint inLen);

__attribute__((unused)) static jboolean LibOrgBouncycastleCryptoEnginesSM2Engine_notEncryptedWithByteArray_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, IOSByteArray *encData, IOSByteArray *inArg, jint inOff);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesSM2Engine_kdfWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECPoint *c1, IOSByteArray *encData);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, IOSByteArray *data, IOSByteArray *kdfOut, jint dOff, jint dRemaining);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoEnginesSM2Engine_nextK(LibOrgBouncycastleCryptoEnginesSM2Engine *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECFieldElement *v);

@implementation LibOrgBouncycastleCryptoEnginesSM2Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesSM2Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithRandom class]);
    ecKey_ = (LibOrgBouncycastleCryptoParamsECKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [LibOrgBouncycastleCryptoParamsECKeyParameters class]);
    ecParams_ = [((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(ecKey_)) getParameters];
    LibOrgBouncycastleMathEcECPoint *s = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(ecKey_, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class])))) getQ])) multiplyWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getH]];
    if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(s)) isInfinity]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid key: [h]Q at infinity");
    }
    random_ = [rParam getRandom];
  }
  else {
    ecKey_ = (LibOrgBouncycastleCryptoParamsECKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsECKeyParameters class]);
    ecParams_ = [((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(ecKey_)) getParameters];
  }
  curveLength_ = ([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getCurve])) getFieldSize] + 7) / 8;
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  if (forEncryption_) {
    return LibOrgBouncycastleCryptoEnginesSM2Engine_encryptWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
  }
  else {
    return LibOrgBouncycastleCryptoEnginesSM2Engine_decryptWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
  }
}

- (jint)getOutputSizeWithInt:(jint)inputLen {
  return (1 + 2 * curveLength_) + inputLen + [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize];
}

- (id<LibOrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_LibOrgBouncycastleMathEcFixedPointCombMultiplier_init();
}

- (IOSByteArray *)encryptWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                               withInt:(jint)inLen {
  return LibOrgBouncycastleCryptoEnginesSM2Engine_encryptWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
}

- (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                               withInt:(jint)inLen {
  return LibOrgBouncycastleCryptoEnginesSM2Engine_decryptWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
}

- (jboolean)notEncryptedWithByteArray:(IOSByteArray *)encData
                        withByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff {
  return LibOrgBouncycastleCryptoEnginesSM2Engine_notEncryptedWithByteArray_withByteArray_withInt_(self, encData, inArg, inOff);
}

- (void)kdfWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
          withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)c1
                                withByteArray:(IOSByteArray *)encData {
  LibOrgBouncycastleCryptoEnginesSM2Engine_kdfWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, digest, c1, encData);
}

- (void)xor__WithByteArray:(IOSByteArray *)data
             withByteArray:(IOSByteArray *)kdfOut
                   withInt:(jint)dOff
                   withInt:(jint)dRemaining {
  LibOrgBouncycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(self, data, kdfOut, dOff, dRemaining);
}

- (JavaMathBigInteger *)nextK {
  return LibOrgBouncycastleCryptoEnginesSM2Engine_nextK(self);
}

- (void)addFieldElementWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
               withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)v {
  LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 8, 4, 5, -1, -1, -1 },
    { NULL, "[B", 0x2, 9, 4, 5, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(getOutputSizeWithInt:);
  methods[5].selector = @selector(createBasePointMultiplier);
  methods[6].selector = @selector(encryptWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(decryptWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(notEncryptedWithByteArray:withByteArray:withInt:);
  methods[9].selector = @selector(kdfWithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleMathEcECPoint:withByteArray:);
  methods[10].selector = @selector(xor__WithByteArray:withByteArray:withInt:withInt:);
  methods[11].selector = @selector(nextK);
  methods[12].selector = @selector(addFieldElementWithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleMathEcECFieldElement:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecKey_", "LLibOrgBouncycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecParams_", "LLibOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curveLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "processBlock", "[BII", "LLibOrgBouncycastleCryptoInvalidCipherTextException;", "getOutputSize", "I", "encrypt", "decrypt", "notEncrypted", "[B[BI", "kdf", "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleMathEcECPoint;[B", "xor", "[B[BII", "addFieldElement", "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleMathEcECFieldElement;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesSM2Engine = { "SM2Engine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 13, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesSM2Engine;
}

@end

void LibOrgBouncycastleCryptoEnginesSM2Engine_init(LibOrgBouncycastleCryptoEnginesSM2Engine *self) {
  LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsSM3Digest_init());
}

LibOrgBouncycastleCryptoEnginesSM2Engine *new_LibOrgBouncycastleCryptoEnginesSM2Engine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesSM2Engine, init)
}

LibOrgBouncycastleCryptoEnginesSM2Engine *create_LibOrgBouncycastleCryptoEnginesSM2Engine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesSM2Engine, init)
}

void LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
}

LibOrgBouncycastleCryptoEnginesSM2Engine *new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesSM2Engine, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoEnginesSM2Engine *create_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesSM2Engine, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

IOSByteArray *LibOrgBouncycastleCryptoEnginesSM2Engine_encryptWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, IOSByteArray *inArg, jint inOff, jint inLen) {
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:inLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, c2, 0, c2->size_);
  id<LibOrgBouncycastleMathEcECMultiplier> multiplier = [self createBasePointMultiplier];
  IOSByteArray *c1;
  LibOrgBouncycastleMathEcECPoint *kPB;
  do {
    JavaMathBigInteger *k = LibOrgBouncycastleCryptoEnginesSM2Engine_nextK(self);
    LibOrgBouncycastleMathEcECPoint *c1P = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((id<LibOrgBouncycastleMathEcECMultiplier>) nil_chk(multiplier)) multiplyWithLibOrgBouncycastleMathEcECPoint:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG] withJavaMathBigInteger:k])) normalize];
    c1 = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(c1P)) getEncodedWithBoolean:false];
    kPB = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(self->ecKey_, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class])))) getQ])) multiplyWithJavaMathBigInteger:k])) normalize];
    LibOrgBouncycastleCryptoEnginesSM2Engine_kdfWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, self->digest_, kPB, c2);
  }
  while (LibOrgBouncycastleCryptoEnginesSM2Engine_notEncryptedWithByteArray_withByteArray_withInt_(self, c2, inArg, inOff));
  IOSByteArray *c3 = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize]];
  LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(kPB)) getAffineXCoord]);
  [self->digest_ updateWithByteArray:inArg withInt:inOff withInt:inLen];
  LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [kPB getAffineYCoord]);
  [self->digest_ doFinalWithByteArray:c3 withInt:0];
  return LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(c1, c2, c3);
}

IOSByteArray *LibOrgBouncycastleCryptoEnginesSM2Engine_decryptWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, IOSByteArray *inArg, jint inOff, jint inLen) {
  IOSByteArray *c1 = [IOSByteArray newArrayWithLength:self->curveLength_ * 2 + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, c1, 0, c1->size_);
  LibOrgBouncycastleMathEcECPoint *c1P = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getCurve])) decodePointWithByteArray:c1];
  LibOrgBouncycastleMathEcECPoint *s = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(c1P)) multiplyWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getH]];
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(s)) isInfinity]) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"[h]C1 at infinity");
  }
  c1P = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([c1P multiplyWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(self->ecKey_, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class])))) getD]])) normalize];
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:inLen - c1->size_ - [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff + c1->size_, c2, 0, c2->size_);
  LibOrgBouncycastleCryptoEnginesSM2Engine_kdfWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, self->digest_, c1P, c2);
  IOSByteArray *c3 = [IOSByteArray newArrayWithLength:[self->digest_ getDigestSize]];
  LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(c1P)) getAffineXCoord]);
  [self->digest_ updateWithByteArray:c2 withInt:0 withInt:c2->size_];
  LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [c1P getAffineYCoord]);
  [self->digest_ doFinalWithByteArray:c3 withInt:0];
  jint check = 0;
  for (jint i = 0; i != c3->size_; i++) {
    check |= IOSByteArray_Get(c3, i) ^ IOSByteArray_Get(nil_chk(inArg), inOff + c1->size_ + c2->size_ + i);
  }
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(c1, (jbyte) 0);
  LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(c3, (jbyte) 0);
  if (check != 0) {
    LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(c2, (jbyte) 0);
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"invalid cipher text");
  }
  return c2;
}

jboolean LibOrgBouncycastleCryptoEnginesSM2Engine_notEncryptedWithByteArray_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, IOSByteArray *encData, IOSByteArray *inArg, jint inOff) {
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(encData))->size_; i++) {
    if (IOSByteArray_Get(encData, i) != IOSByteArray_Get(nil_chk(inArg), inOff)) {
      return false;
    }
  }
  return true;
}

void LibOrgBouncycastleCryptoEnginesSM2Engine_kdfWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECPoint *c1, IOSByteArray *encData) {
  jint digestSize = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:JavaLangMath_maxWithInt_withInt_(4, digestSize)];
  jint off = 0;
  id<LibOrgBouncycastleUtilMemoable> memo = nil;
  id<LibOrgBouncycastleUtilMemoable> copy_ = nil;
  if ([LibOrgBouncycastleUtilMemoable_class_() isInstance:digest]) {
    LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(c1)) getAffineXCoord]);
    LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [c1 getAffineYCoord]);
    memo = (id<LibOrgBouncycastleUtilMemoable>) cast_check(digest, LibOrgBouncycastleUtilMemoable_class_());
    copy_ = [memo copy__];
  }
  jint ct = 0;
  while (off < ((IOSByteArray *) nil_chk(encData))->size_) {
    if (memo != nil) {
      [memo resetWithLibOrgBouncycastleUtilMemoable:copy_];
    }
    else {
      LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(c1)) getAffineXCoord]);
      LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [c1 getAffineYCoord]);
    }
    LibOrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(++ct, buf, 0);
    [digest updateWithByteArray:buf withInt:0 withInt:4];
    [digest doFinalWithByteArray:buf withInt:0];
    jint xorLen = JavaLangMath_minWithInt_withInt_(digestSize, encData->size_ - off);
    LibOrgBouncycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(self, encData, buf, off, xorLen);
    off += xorLen;
  }
}

void LibOrgBouncycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, IOSByteArray *data, IOSByteArray *kdfOut, jint dOff, jint dRemaining) {
  for (jint i = 0; i != dRemaining; i++) {
    *IOSByteArray_GetRef(nil_chk(data), dOff + i) ^= IOSByteArray_Get(nil_chk(kdfOut), i);
  }
}

JavaMathBigInteger *LibOrgBouncycastleCryptoEnginesSM2Engine_nextK(LibOrgBouncycastleCryptoEnginesSM2Engine *self) {
  jint qBitLength = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getN])) bitLength];
  JavaMathBigInteger *k;
  do {
    k = LibOrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(qBitLength, self->random_);
  }
  while ([((JavaMathBigInteger *) nil_chk(k)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)] || [k compareToWithId:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getN]] >= 0);
  return k;
}

void LibOrgBouncycastleCryptoEnginesSM2Engine_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECFieldElement *v) {
  IOSByteArray *p = LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(self->curveLength_, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(v)) toBigInteger]);
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:p withInt:0 withInt:((IOSByteArray *) nil_chk(p))->size_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesSM2Engine)
