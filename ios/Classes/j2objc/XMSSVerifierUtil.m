//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSVerifierUtil.java
//

#include "HashTreeAddress.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LTreeAddress.h"
#include "OTSHashAddress.h"
#include "WOTSPlus.h"
#include "WOTSPlusParameters.h"
#include "WOTSPlusPublicKeyParameters.h"
#include "WOTSPlusSignature.h"
#include "XMSSAddress.h"
#include "XMSSNode.h"
#include "XMSSNodeUtil.h"
#include "XMSSReducedSignature.h"
#include "XMSSVerifierUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastlePqcCryptoXmssXMSSNode *)getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus:(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                                                                                                         withInt:(jint)height
                                                                                                   withByteArray:(IOSByteArray *)messageDigest
                                                         withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature:(LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature *)signature
                                                               withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress
                                                                                                         withInt:(jint)indexLeaf {
  return LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus, height, messageDigest, signature, otsHashAddress, indexLeaf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSNode;", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus:withInt:withByteArray:withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getRootNodeFromSignature", "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;I[BLLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature;LLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;I" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil = { "XMSSVerifierUtil", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_init(LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *new_LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil, init)
}

LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *create_LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil, init)
}

LibOrgBouncycastlePqcCryptoXmssXMSSNode *LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint height, IOSByteArray *messageDigest, LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature *signature, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint indexLeaf) {
  LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_initialize();
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus)) getParams])) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (signature == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  LibOrgBouncycastlePqcCryptoXmssLTreeAddress *lTreeAddress = (LibOrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withLTreeAddressWithInt:[otsHashAddress getOTSAddress]])) build], [LibOrgBouncycastlePqcCryptoXmssLTreeAddress class]);
  LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withTreeIndexWithInt:[otsHashAddress getOTSAddress]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
  LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *wotsPlusPK = [wotsPlus getPublicKeyFromSignatureWithByteArray:messageDigest withLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:[signature getWOTSPlusSignature] withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
  IOSObjectArray *node = [IOSObjectArray newArrayWithLength:2 type:LibOrgBouncycastlePqcCryptoXmssXMSSNode_class_()];
  (void) IOSObjectArray_Set(node, 0, LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withLibOrgBouncycastlePqcCryptoXmssLTreeAddress_(wotsPlus, wotsPlusPK, lTreeAddress));
  for (jint k = 0; k < height; k++) {
    hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:k])) withTreeIndexWithInt:[hashTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    if (fmod(JavaLangMath_floorWithDouble_(indexLeaf / (JreLShift32(1, k))), 2) == 0) {
      hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:[hashTreeAddress getTreeIndex] / 2])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
      (void) IOSObjectArray_Set(node, 1, LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, IOSObjectArray_Get(node, 0), [((id<JavaUtilList>) nil_chk([signature getAuthPath])) getWithInt:k], hashTreeAddress));
      (void) IOSObjectArray_SetAndConsume(node, 1, new_LibOrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getHeight] + 1, [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getValue]));
    }
    else {
      hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:([hashTreeAddress getTreeIndex] - 1) / 2])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
      (void) IOSObjectArray_Set(node, 1, LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, [((id<JavaUtilList>) nil_chk([signature getAuthPath])) getWithInt:k], IOSObjectArray_Get(node, 0), hashTreeAddress));
      (void) IOSObjectArray_SetAndConsume(node, 1, new_LibOrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getHeight] + 1, [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getValue]));
    }
    (void) IOSObjectArray_Set(node, 0, IOSObjectArray_Get(node, 1));
  }
  return IOSObjectArray_Get(node, 0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil)
