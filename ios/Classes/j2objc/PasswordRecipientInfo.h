//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cms/PasswordRecipientInfo.java
//

#ifndef PasswordRecipientInfo_H
#define PasswordRecipientInfo_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Integer;
@class LibOrgBouncycastleAsn1ASN1OctetString;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;

@interface LibOrgBouncycastleAsn1CmsPasswordRecipientInfo : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)keyDerivationAlgorithm
                              withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)keyEncryptionAlgorithm
                                      withLibOrgBouncycastleAsn1ASN1OctetString:(LibOrgBouncycastleAsn1ASN1OctetString *)encryptedKey;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)keyEncryptionAlgorithm
                                      withLibOrgBouncycastleAsn1ASN1OctetString:(LibOrgBouncycastleAsn1ASN1OctetString *)encryptedKey;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

- (LibOrgBouncycastleAsn1ASN1OctetString *)getEncryptedKey;

+ (LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                              withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getKeyDerivationAlgorithm;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getKeyEncryptionAlgorithm;

- (LibOrgBouncycastleAsn1ASN1Integer *)getVersion;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmsPasswordRecipientInfo)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *encryptedKey);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *new_LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *encryptedKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *create_LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *encryptedKey);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyDerivationAlgorithm, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *encryptedKey);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *new_LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyDerivationAlgorithm, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *encryptedKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *create_LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyDerivationAlgorithm, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *keyEncryptionAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *encryptedKey);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *new_LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *create_LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsPasswordRecipientInfo *LibOrgBouncycastleAsn1CmsPasswordRecipientInfo_getInstanceWithId_(id obj);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmsPasswordRecipientInfo)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PasswordRecipientInfo_H
