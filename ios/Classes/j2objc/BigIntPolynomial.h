//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/polynomial/BigIntPolynomial.java
//

#ifndef BigIntPolynomial_H
#define BigIntPolynomial_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@class LibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial;
@class LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;

@interface LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial : NSObject {
 @public
  IOSObjectArray *coeffs_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)p;

- (void)addWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)b;

- (id)java_clone;

- (LibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *)divWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                                                                   withInt:(jint)decimalPlaces;

- (void)divWithJavaMathBigInteger:(JavaMathBigInteger *)divisor;

- (jboolean)isEqual:(id)obj;

- (IOSObjectArray *)getCoeffs;

- (jint)getMaxCoeffLength;

- (NSUInteger)hash;

- (void)modWithJavaMathBigInteger:(JavaMathBigInteger *)modulus;

- (void)multWithJavaMathBigInteger:(JavaMathBigInteger *)factor;

- (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2;

- (void)subWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)b;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaMathBigIntegerArray:(IOSObjectArray *)coeffs;

- (instancetype __nonnull)initWithInt:(jint)N;

- (void)addWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)b
                                                withJavaMathBigInteger:(JavaMathBigInteger *)modulus;

+ (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)generateRandomSmallWithInt:(jint)N
                                                                                withInt:(jint)numOnes
                                                                                withInt:(jint)numNegOnes;

- (void)multWithInt:(jint)factor;

- (JavaMathBigInteger *)sumCoeffs;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial)

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial, coeffs_, IOSObjectArray *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithInt_(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *self, jint N);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithInt_(jint N) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithInt_(jint N);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithJavaMathBigIntegerArray_(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *self, IOSObjectArray *coeffs);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithJavaMathBigIntegerArray_(IOSObjectArray *coeffs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithJavaMathBigIntegerArray_(IOSObjectArray *coeffs);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *self, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_generateRandomSmallWithInt_withInt_withInt_(jint N, jint numOnes, jint numNegOnes);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BigIntPolynomial_H
