//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/Horst.java
//

#ifndef Horst_H
#define Horst_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastlePqcCryptoSphincsHashFunctions;

@interface LibOrgBouncycastlePqcCryptoSphincsHorst : NSObject
@property (readonly, class) jint HORST_LOGT NS_SWIFT_NAME(HORST_LOGT);
@property (readonly, class) jint HORST_T NS_SWIFT_NAME(HORST_T);
@property (readonly, class) jint HORST_K NS_SWIFT_NAME(HORST_K);
@property (readonly, class) jint HORST_SKBYTES NS_SWIFT_NAME(HORST_SKBYTES);
@property (readonly, class) jint HORST_SIGBYTES NS_SWIFT_NAME(HORST_SIGBYTES);
@property (readonly, class) jint N_MASKS NS_SWIFT_NAME(N_MASKS);

+ (jint)HORST_LOGT;

+ (jint)HORST_T;

+ (jint)HORST_K;

+ (jint)HORST_SKBYTES;

+ (jint)HORST_SIGBYTES;

+ (jint)N_MASKS;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (void)expand_seedWithByteArray:(IOSByteArray *)outseeds
                   withByteArray:(IOSByteArray *)inseed;

+ (jint)horst_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                        withByteArray:(IOSByteArray *)sig
                                                              withInt:(jint)sigOff
                                                        withByteArray:(IOSByteArray *)pk
                                                        withByteArray:(IOSByteArray *)seed
                                                        withByteArray:(IOSByteArray *)masks
                                                        withByteArray:(IOSByteArray *)m_hash;

+ (jint)horst_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                          withByteArray:(IOSByteArray *)pk
                                                          withByteArray:(IOSByteArray *)sig
                                                                withInt:(jint)sigOff
                                                          withByteArray:(IOSByteArray *)masks
                                                          withByteArray:(IOSByteArray *)m_hash;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoSphincsHorst)

inline jint LibOrgBouncycastlePqcCryptoSphincsHorst_get_HORST_LOGT(void);
#define LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsHorst, HORST_LOGT, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsHorst_get_HORST_T(void);
#define LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T 65536
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsHorst, HORST_T, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsHorst_get_HORST_K(void);
#define LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_K 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsHorst, HORST_K, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsHorst_get_HORST_SKBYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsHorst, HORST_SKBYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsHorst_get_HORST_SIGBYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SIGBYTES 13312
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsHorst, HORST_SIGBYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsHorst_get_N_MASKS(void);
#define LibOrgBouncycastlePqcCryptoSphincsHorst_N_MASKS 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsHorst, N_MASKS, jint)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsHorst_init(LibOrgBouncycastlePqcCryptoSphincsHorst *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsHorst *new_LibOrgBouncycastlePqcCryptoSphincsHorst_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsHorst *create_LibOrgBouncycastlePqcCryptoSphincsHorst_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsHorst_expand_seedWithByteArray_withByteArray_(IOSByteArray *outseeds, IOSByteArray *inseed);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoSphincsHorst_horst_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withByteArray_withByteArray_withByteArray_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *sig, jint sigOff, IOSByteArray *pk, IOSByteArray *seed, IOSByteArray *masks, IOSByteArray *m_hash);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoSphincsHorst_horst_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withByteArray_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *pk, IOSByteArray *sig, jint sigOff, IOSByteArray *masks, IOSByteArray *m_hash);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoSphincsHorst)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Horst_H
