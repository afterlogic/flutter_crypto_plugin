//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsCipherFactory.java
//

#ifndef DefaultTlsCipherFactory_H
#define DefaultTlsCipherFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsCipherFactory.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoTlsTlsAEADCipher;
@class LibOrgBouncycastleCryptoTlsTlsBlockCipher;
@class LibOrgBouncycastleCryptoTlsTlsNullCipher;
@class LibOrgBouncycastleCryptoTlsTlsStreamCipher;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoModesAEADBlockCipher;
@protocol LibOrgBouncycastleCryptoStreamCipher;
@protocol LibOrgBouncycastleCryptoTlsTlsCipher;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory : LibOrgBouncycastleCryptoTlsAbstractTlsCipherFactory

#pragma mark Public

- (instancetype __nonnull)init;

- (id<LibOrgBouncycastleCryptoTlsTlsCipher>)createCipherWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                          withInt:(jint)encryptionAlgorithm
                                                                                          withInt:(jint)macAlgorithm;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)createAEADBlockCipher_AES_CCM;

- (id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)createAEADBlockCipher_AES_GCM;

- (id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)createAEADBlockCipher_AES_OCB;

- (id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)createAEADBlockCipher_Camellia_GCM;

- (id<LibOrgBouncycastleCryptoBlockCipher>)createAESBlockCipher;

- (LibOrgBouncycastleCryptoTlsTlsBlockCipher *)createAESCipherWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                withInt:(jint)cipherKeySize
                                                                                                withInt:(jint)macAlgorithm;

- (id<LibOrgBouncycastleCryptoBlockCipher>)createAESEngine;

- (id<LibOrgBouncycastleCryptoBlockCipher>)createCamelliaBlockCipher;

- (LibOrgBouncycastleCryptoTlsTlsBlockCipher *)createCamelliaCipherWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                     withInt:(jint)cipherKeySize
                                                                                                     withInt:(jint)macAlgorithm;

- (id<LibOrgBouncycastleCryptoBlockCipher>)createCamelliaEngine;

- (id<LibOrgBouncycastleCryptoTlsTlsCipher>)createChaCha20Poly1305WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context;

- (LibOrgBouncycastleCryptoTlsTlsAEADCipher *)createCipher_AES_CCMWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                    withInt:(jint)cipherKeySize
                                                                                                    withInt:(jint)macSize;

- (LibOrgBouncycastleCryptoTlsTlsAEADCipher *)createCipher_AES_GCMWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                    withInt:(jint)cipherKeySize
                                                                                                    withInt:(jint)macSize;

- (LibOrgBouncycastleCryptoTlsTlsAEADCipher *)createCipher_AES_OCBWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                    withInt:(jint)cipherKeySize
                                                                                                    withInt:(jint)macSize;

- (LibOrgBouncycastleCryptoTlsTlsAEADCipher *)createCipher_Camellia_GCMWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                         withInt:(jint)cipherKeySize
                                                                                                         withInt:(jint)macSize;

- (id<LibOrgBouncycastleCryptoBlockCipher>)createDESedeBlockCipher;

- (LibOrgBouncycastleCryptoTlsTlsBlockCipher *)createDESedeCipherWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                   withInt:(jint)macAlgorithm;

- (id<LibOrgBouncycastleCryptoDigest>)createHMACDigestWithInt:(jint)macAlgorithm;

- (LibOrgBouncycastleCryptoTlsTlsNullCipher *)createNullCipherWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                withInt:(jint)macAlgorithm;

- (LibOrgBouncycastleCryptoTlsTlsStreamCipher *)createRC4CipherWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                 withInt:(jint)cipherKeySize
                                                                                                 withInt:(jint)macAlgorithm;

- (id<LibOrgBouncycastleCryptoStreamCipher>)createRC4StreamCipher;

- (id<LibOrgBouncycastleCryptoBlockCipher>)createSEEDBlockCipher;

- (LibOrgBouncycastleCryptoTlsTlsBlockCipher *)createSEEDCipherWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                                                 withInt:(jint)macAlgorithm;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory_init(LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory *new_LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory *create_LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DefaultTlsCipherFactory_H
