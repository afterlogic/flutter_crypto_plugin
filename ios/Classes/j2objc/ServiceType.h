//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/dvcs/ServiceType.java
//

#ifndef ServiceType_H
#define ServiceType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;

@interface LibOrgBouncycastleAsn1DvcsServiceType : LibOrgBouncycastleAsn1ASN1Object
@property (readonly, class) LibOrgBouncycastleAsn1DvcsServiceType *CPD NS_SWIFT_NAME(CPD);
@property (readonly, class) LibOrgBouncycastleAsn1DvcsServiceType *VSD NS_SWIFT_NAME(VSD);
@property (readonly, class) LibOrgBouncycastleAsn1DvcsServiceType *VPKC NS_SWIFT_NAME(VPKC);
@property (readonly, class) LibOrgBouncycastleAsn1DvcsServiceType *CCPD NS_SWIFT_NAME(CCPD);

+ (LibOrgBouncycastleAsn1DvcsServiceType *)CPD;

+ (LibOrgBouncycastleAsn1DvcsServiceType *)VSD;

+ (LibOrgBouncycastleAsn1DvcsServiceType *)VPKC;

+ (LibOrgBouncycastleAsn1DvcsServiceType *)CCPD;

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)value;

+ (LibOrgBouncycastleAsn1DvcsServiceType *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                     withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1DvcsServiceType *)getInstanceWithId:(id)obj;

- (JavaMathBigInteger *)getValue;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleAsn1DvcsServiceType)

inline LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_get_CPD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_CPD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1DvcsServiceType, CPD, LibOrgBouncycastleAsn1DvcsServiceType *)

inline LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_get_VSD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_VSD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1DvcsServiceType, VSD, LibOrgBouncycastleAsn1DvcsServiceType *)

inline LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_get_VPKC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_VPKC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1DvcsServiceType, VPKC, LibOrgBouncycastleAsn1DvcsServiceType *)

inline LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_get_CCPD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_CCPD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1DvcsServiceType, CCPD, LibOrgBouncycastleAsn1DvcsServiceType *)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1DvcsServiceType_initWithInt_(LibOrgBouncycastleAsn1DvcsServiceType *self, jint value);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1DvcsServiceType *new_LibOrgBouncycastleAsn1DvcsServiceType_initWithInt_(jint value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1DvcsServiceType *create_LibOrgBouncycastleAsn1DvcsServiceType_initWithInt_(jint value);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1DvcsServiceType *LibOrgBouncycastleAsn1DvcsServiceType_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1DvcsServiceType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ServiceType_H
