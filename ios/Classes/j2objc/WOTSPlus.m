//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/WOTSPlus.java
//

#include "Arrays.h"
#include "Digest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyedHashFunctions.h"
#include "OTSHashAddress.h"
#include "WOTSPlus.h"
#include "WOTSPlusParameters.h"
#include "WOTSPlusPrivateKeyParameters.h"
#include "WOTSPlusPublicKeyParameters.h"
#include "WOTSPlusSignature.h"
#include "XMSSAddress.h"
#include "XMSSUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface LibOrgBouncycastlePqcCryptoXmssWOTSPlus () {
 @public
  LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *params_;
  LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *khf_;
  IOSByteArray *secretKeySeed_;
  IOSByteArray *publicSeed_;
}

- (IOSByteArray *)chainWithByteArray:(IOSByteArray *)startHash
                             withInt:(jint)startIndex
                             withInt:(jint)steps
withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

- (id<JavaUtilList>)convertToBaseWWithByteArray:(IOSByteArray *)messageDigest
                                        withInt:(jint)w
                                        withInt:(jint)outLength;

- (IOSByteArray *)expandSecretKeySeedWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssWOTSPlus, params_, LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssWOTSPlus, khf_, LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssWOTSPlus, secretKeySeed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssWOTSPlus, publicSeed_, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *self, IOSByteArray *startHash, jint startIndex, jint steps, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

__attribute__((unused)) static id<JavaUtilList> LibOrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *self, IOSByteArray *messageDigest, jint w, jint outLength);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *self, jint index);

@implementation LibOrgBouncycastlePqcCryptoXmssWOTSPlus

- (instancetype)initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters:(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *)params {
  LibOrgBouncycastlePqcCryptoXmssWOTSPlus_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(self, params);
  return self;
}

- (void)importKeysWithByteArray:(IOSByteArray *)secretKeySeed
                  withByteArray:(IOSByteArray *)publicSeed {
  if (secretKeySeed == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"secretKeySeed == null");
  }
  if (secretKeySeed->size_ != [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of secretKeySeed needs to be equal to size of digest");
  }
  if (publicSeed == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicSeed == null");
  }
  if (publicSeed->size_ != [params_ getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of publicSeed needs to be equal to size of digest");
  }
  self->secretKeySeed_ = secretKeySeed;
  self->publicSeed_ = publicSeed;
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)signWithByteArray:(IOSByteArray *)messageDigest
                      withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (messageDigest == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"messageDigest == null");
  }
  if (messageDigest->size_ != [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  id<JavaUtilList> baseWMessage = LibOrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, messageDigest, [params_ getWinternitzParameter], [params_ getLen1]);
  jint checksum = 0;
  for (jint i = 0; i < [params_ getLen1]; i++) {
    checksum += [params_ getWinternitzParameter] - 1 - [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(baseWMessage)) getWithInt:i])) intValue];
  }
  JreLShiftAssignInt(&checksum, (8 - (([params_ getLen2] * LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_([params_ getWinternitzParameter])) % 8)));
  jint len2Bytes = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) ([params_ getLen2] * LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_([params_ getWinternitzParameter])) / 8));
  id<JavaUtilList> baseWChecksum = LibOrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(checksum, len2Bytes), [params_ getWinternitzParameter], [params_ getLen2]);
  [((id<JavaUtilList>) nil_chk(baseWMessage)) addAllWithJavaUtilCollection:baseWChecksum];
  IOSObjectArray *signature = [IOSObjectArray newArrayWithLength:[params_ getLen] type:IOSClass_byteArray(1)];
  for (jint i = 0; i < [params_ getLen]; i++) {
    otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:[otsHashAddress getOTSAddress]])) withChainAddressWithInt:i])) withHashAddressWithInt:[otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    (void) IOSObjectArray_Set(signature, i, LibOrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, LibOrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(self, i), 0, [((JavaLangInteger *) nil_chk([baseWMessage getWithInt:i])) intValue], otsHashAddress));
  }
  return new_LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_withByteArray2_(params_, signature);
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)messageDigest
withLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:(LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)signature
withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (messageDigest == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"messageDigest == null");
  }
  if (messageDigest->size_ != [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (signature == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  IOSObjectArray *tmpPublicKey = [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *) nil_chk([self getPublicKeyFromSignatureWithByteArray:messageDigest withLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:signature withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress])) toByteArray];
  return LibOrgBouncycastlePqcCryptoXmssXMSSUtil_areEqualWithByteArray2_withByteArray2_(tmpPublicKey, [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *) nil_chk([self getPublicKeyWithLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress])) toByteArray]) ? true : false;
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *)getPublicKeyFromSignatureWithByteArray:(IOSByteArray *)messageDigest
                                                  withLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:(LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)signature
                                                     withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (messageDigest == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"messageDigest == null");
  }
  if (messageDigest->size_ != [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (signature == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  id<JavaUtilList> baseWMessage = LibOrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, messageDigest, [params_ getWinternitzParameter], [params_ getLen1]);
  jint checksum = 0;
  for (jint i = 0; i < [params_ getLen1]; i++) {
    checksum += [params_ getWinternitzParameter] - 1 - [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(baseWMessage)) getWithInt:i])) intValue];
  }
  JreLShiftAssignInt(&checksum, (8 - (([params_ getLen2] * LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_([params_ getWinternitzParameter])) % 8)));
  jint len2Bytes = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) ([params_ getLen2] * LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_([params_ getWinternitzParameter])) / 8));
  id<JavaUtilList> baseWChecksum = LibOrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(checksum, len2Bytes), [params_ getWinternitzParameter], [params_ getLen2]);
  [((id<JavaUtilList>) nil_chk(baseWMessage)) addAllWithJavaUtilCollection:baseWChecksum];
  IOSObjectArray *publicKey = [IOSObjectArray newArrayWithLength:[params_ getLen] type:IOSClass_byteArray(1)];
  for (jint i = 0; i < [params_ getLen]; i++) {
    otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:[otsHashAddress getOTSAddress]])) withChainAddressWithInt:i])) withHashAddressWithInt:[otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    (void) IOSObjectArray_Set(publicKey, i, LibOrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, IOSObjectArray_Get(nil_chk([signature toByteArray]), i), [((JavaLangInteger *) nil_chk([baseWMessage getWithInt:i])) intValue], [params_ getWinternitzParameter] - 1 - [((JavaLangInteger *) nil_chk([baseWMessage getWithInt:i])) intValue], otsHashAddress));
  }
  return new_LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_withByteArray2_(params_, publicKey);
}

- (IOSByteArray *)chainWithByteArray:(IOSByteArray *)startHash
                             withInt:(jint)startIndex
                             withInt:(jint)steps
withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  return LibOrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, startHash, startIndex, steps, otsHashAddress);
}

- (id<JavaUtilList>)convertToBaseWWithByteArray:(IOSByteArray *)messageDigest
                                        withInt:(jint)w
                                        withInt:(jint)outLength {
  return LibOrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, messageDigest, w, outLength);
}

- (IOSByteArray *)getWOTSPlusSecretKeyWithByteArray:(IOSByteArray *)secretKeySeed
  withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:[otsHashAddress getOTSAddress]])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  return [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(khf_)) PRFWithByteArray:secretKeySeed withByteArray:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) toByteArray]];
}

- (IOSByteArray *)expandSecretKeySeedWithInt:(jint)index {
  return LibOrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(self, index);
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *)getParams {
  return params_;
}

- (LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *)getKhf {
  return khf_;
}

- (IOSByteArray *)getSecretKeySeed {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(secretKeySeed_);
}

- (IOSByteArray *)getPublicSeed {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(publicSeed_);
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusPrivateKeyParameters *)getPrivateKey {
  IOSObjectArray *privateKey = [IOSObjectArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getLen] type:IOSClass_byteArray(1)];
  for (jint i = 0; i < privateKey->size_; i++) {
    (void) IOSObjectArray_Set(privateKey, i, LibOrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(self, i));
  }
  return new_LibOrgBouncycastlePqcCryptoXmssWOTSPlusPrivateKeyParameters_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_withByteArray2_(params_, privateKey);
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *)getPublicKeyWithLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  IOSObjectArray *publicKey = [IOSObjectArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getLen] type:IOSClass_byteArray(1)];
  for (jint i = 0; i < [params_ getLen]; i++) {
    otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:[otsHashAddress getOTSAddress]])) withChainAddressWithInt:i])) withHashAddressWithInt:[otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    (void) IOSObjectArray_Set(publicKey, i, LibOrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, LibOrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(self, i), 0, [params_ getWinternitzParameter] - 1, otsHashAddress));
  }
  return new_LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_withByteArray2_(params_, publicKey);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters;", 0x4, 7, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "[B", 0x4, 13, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusPrivateKeyParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters;", 0x4, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters:);
  methods[1].selector = @selector(importKeysWithByteArray:withByteArray:);
  methods[2].selector = @selector(signWithByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[4].selector = @selector(getPublicKeyFromSignatureWithByteArray:withLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[5].selector = @selector(chainWithByteArray:withInt:withInt:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[6].selector = @selector(convertToBaseWWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(getWOTSPlusSecretKeyWithByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[8].selector = @selector(expandSecretKeySeedWithInt:);
  methods[9].selector = @selector(getParams);
  methods[10].selector = @selector(getKhf);
  methods[11].selector = @selector(getSecretKeySeed);
  methods[12].selector = @selector(getPublicSeed);
  methods[13].selector = @selector(getPrivateKey);
  methods[14].selector = @selector(getPublicKeyWithLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "khf_", "LLibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "secretKeySeed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicSeed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters;", "importKeys", "[B[B", "sign", "[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "verifySignature", "[BLLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;LLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "getPublicKeyFromSignature", "chain", "[BIILLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "convertToBaseW", "[BII", "([BII)Ljava/util/List<Ljava/lang/Integer;>;", "getWOTSPlusSecretKey", "expandSecretKeySeed", "I", "getPublicKey", "LLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssWOTSPlus = { "WOTSPlus", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x10, 15, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssWOTSPlus;
}

@end

void LibOrgBouncycastlePqcCryptoXmssWOTSPlus_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *self, LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *params) {
  NSObject_init(self);
  if (params == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"params == null");
  }
  self->params_ = params;
  jint n = [params getDigestSize];
  self->khf_ = new_LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions_initWithLibOrgBouncycastleCryptoDigest_withInt_([params getDigest], n);
  self->secretKeySeed_ = [IOSByteArray newArrayWithLength:n];
  self->publicSeed_ = [IOSByteArray newArrayWithLength:n];
}

LibOrgBouncycastlePqcCryptoXmssWOTSPlus *new_LibOrgBouncycastlePqcCryptoXmssWOTSPlus_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssWOTSPlus, initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_, params)
}

LibOrgBouncycastlePqcCryptoXmssWOTSPlus *create_LibOrgBouncycastlePqcCryptoXmssWOTSPlus_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssWOTSPlus, initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_, params)
}

IOSByteArray *LibOrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *self, IOSByteArray *startHash, jint startIndex, jint steps, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  jint n = [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(self->params_)) getDigestSize];
  if (startHash == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"startHash == null");
  }
  if (startHash->size_ != n) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"startHash needs to be ", n, @"bytes"));
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  if ([otsHashAddress toByteArray] == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress byte array == null");
  }
  if ((startIndex + steps) > [self->params_ getWinternitzParameter] - 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"max chain length must not be greater than w");
  }
  if (steps == 0) {
    return startHash;
  }
  IOSByteArray *tmp = LibOrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, startHash, startIndex, steps - 1, otsHashAddress);
  otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:[otsHashAddress getOTSAddress]])) withChainAddressWithInt:[otsHashAddress getChainAddress]])) withHashAddressWithInt:startIndex + steps - 1])) withKeyAndMaskWithInt:0])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  IOSByteArray *key = [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(self->khf_)) PRFWithByteArray:self->publicSeed_ withByteArray:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) toByteArray]];
  otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:[otsHashAddress getOTSAddress]])) withChainAddressWithInt:[otsHashAddress getChainAddress]])) withHashAddressWithInt:[otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:1])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  IOSByteArray *bitmask = [self->khf_ PRFWithByteArray:self->publicSeed_ withByteArray:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) toByteArray]];
  IOSByteArray *tmpMasked = [IOSByteArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSByteArray_GetRef(tmpMasked, i) = (jbyte) (IOSByteArray_Get(nil_chk(tmp), i) ^ IOSByteArray_Get(nil_chk(bitmask), i));
  }
  tmp = [self->khf_ FWithByteArray:key withByteArray:tmpMasked];
  return tmp;
}

id<JavaUtilList> LibOrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *self, IOSByteArray *messageDigest, jint w, jint outLength) {
  if (messageDigest == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"msg == null");
  }
  if (w != 4 && w != 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"w needs to be 4 or 16");
  }
  jint logW = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_(w);
  if (outLength > ((8 * messageDigest->size_) / logW)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"outLength too big");
  }
  JavaUtilArrayList *res = new_JavaUtilArrayList_init();
  for (jint i = 0; i < messageDigest->size_; i++) {
    for (jint j = 8 - logW; j >= 0; j -= logW) {
      [res addWithId:JavaLangInteger_valueOfWithInt_((JreRShift32(IOSByteArray_Get(messageDigest, i), j)) & (w - 1))];
      if ([res size] == outLength) {
        return res;
      }
    }
  }
  return res;
}

IOSByteArray *LibOrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *self, jint index) {
  if (index < 0 || index >= [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(self->params_)) getLen]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"index out of bounds");
  }
  return [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(self->khf_)) PRFWithByteArray:self->secretKeySeed_ withByteArray:LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(index, 32)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssWOTSPlus)
