//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/XTEA.java
//

#include "AlgorithmProvider.h"
#include "BaseBlockCipher.h"
#include "BaseKeyGenerator.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "IOSClass.h"
#include "IvAlgorithmParameters.h"
#include "J2ObjC_source.h"
#include "XTEA.h"
#include "XTEAEngine.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricXTEA ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricXTEA_init(LibOrgBouncycastleJcajceProviderSymmetricXTEA *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricXTEA *new_LibOrgBouncycastleJcajceProviderSymmetricXTEA_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricXTEA *create_LibOrgBouncycastleJcajceProviderSymmetricXTEA_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXTEA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXTEA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB;LLibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams;LLibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXTEA = { "XTEA", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXTEA;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXTEA_init(LibOrgBouncycastleJcajceProviderSymmetricXTEA *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA *new_LibOrgBouncycastleJcajceProviderSymmetricXTEA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA *create_LibOrgBouncycastleJcajceProviderSymmetricXTEA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXTEA)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricXTEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB = { "ECB", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB_init(LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, new_LibOrgBouncycastleCryptoEnginesXTEAEngine_init());
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB *new_LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB *create_LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXTEA_ECB)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricXTEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"XTEA", 128, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXTEA_KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)engineToString {
  return @"XTEA IV";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricXTEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams = { "AlgParams", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams_init(LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilIvAlgorithmParameters_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams *new_LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams *create_LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXTEA_AlgParams)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"Cipher.XTEA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_PREFIX, @"$ECB")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.XTEA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.XTEA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_PREFIX, @"$AlgParams")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricXTEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricXTEA_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricXTEA_Mappings)
