//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/SHAKEDigest.java
//

#ifndef SHAKEDigest_H
#define SHAKEDigest_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "KeccakDigest.h"
#include "Xof.h"

@class IOSByteArray;

@interface LibOrgBouncycastleCryptoDigestsSHAKEDigest : LibOrgBouncycastleCryptoDigestsKeccakDigest < LibOrgBouncycastleCryptoXof >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)bitLength;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest:(LibOrgBouncycastleCryptoDigestsSHAKEDigest *)source;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                     withInt:(jint)outLen;

- (jint)doOutputWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                      withInt:(jint)outLen;

- (NSString *)getAlgorithmName;

#pragma mark Protected

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                     withInt:(jint)outLen
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigestsKeccakDigest:(LibOrgBouncycastleCryptoDigestsKeccakDigest *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoDigestsSHAKEDigest)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoDigestsSHAKEDigest_init(LibOrgBouncycastleCryptoDigestsSHAKEDigest *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSHAKEDigest *new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSHAKEDigest *create_LibOrgBouncycastleCryptoDigestsSHAKEDigest_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(LibOrgBouncycastleCryptoDigestsSHAKEDigest *self, jint bitLength);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSHAKEDigest *new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(jint bitLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSHAKEDigest *create_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(jint bitLength);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_(LibOrgBouncycastleCryptoDigestsSHAKEDigest *self, LibOrgBouncycastleCryptoDigestsSHAKEDigest *source);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSHAKEDigest *new_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_(LibOrgBouncycastleCryptoDigestsSHAKEDigest *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoDigestsSHAKEDigest *create_LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithLibOrgBouncycastleCryptoDigestsSHAKEDigest_(LibOrgBouncycastleCryptoDigestsSHAKEDigest *source);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoDigestsSHAKEDigest)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SHAKEDigest_H
