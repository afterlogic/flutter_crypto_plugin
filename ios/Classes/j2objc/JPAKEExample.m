//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/examples/JPAKEExample.java
//

#include "Digest.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JPAKEExample.h"
#include "JPAKEParticipant.h"
#include "JPAKEPrimeOrderGroup.h"
#include "JPAKEPrimeOrderGroups.h"
#include "JPAKERound1Payload.h"
#include "JPAKERound2Payload.h"
#include "JPAKERound3Payload.h"
#include "SHA256Digest.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoExamplesJPAKEExample ()

+ (JavaMathBigInteger *)deriveSessionKeyWithJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial;

@end

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoExamplesJPAKEExample_deriveSessionKeyWithJavaMathBigInteger_(JavaMathBigInteger *keyingMaterial);

@implementation LibOrgBouncycastleCryptoExamplesJPAKEExample

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoExamplesJPAKEExample_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleCryptoExamplesJPAKEExample_mainWithNSStringArray_(args);
}

+ (JavaMathBigInteger *)deriveSessionKeyWithJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial {
  return LibOrgBouncycastleCryptoExamplesJPAKEExample_deriveSessionKeyWithJavaMathBigInteger_(keyingMaterial);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(deriveSessionKeyWithJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;", "LLibOrgBouncycastleCryptoCryptoException;", "deriveSessionKey", "LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoExamplesJPAKEExample = { "JPAKEExample", "lib.org.bouncycastle.crypto.examples", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoExamplesJPAKEExample;
}

@end

void LibOrgBouncycastleCryptoExamplesJPAKEExample_init(LibOrgBouncycastleCryptoExamplesJPAKEExample *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoExamplesJPAKEExample *new_LibOrgBouncycastleCryptoExamplesJPAKEExample_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoExamplesJPAKEExample, init)
}

LibOrgBouncycastleCryptoExamplesJPAKEExample *create_LibOrgBouncycastleCryptoExamplesJPAKEExample_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoExamplesJPAKEExample, init)
}

void LibOrgBouncycastleCryptoExamplesJPAKEExample_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleCryptoExamplesJPAKEExample_initialize();
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup *group = JreLoadStatic(LibOrgBouncycastleCryptoAgreementJpakeJPAKEPrimeOrderGroups, NIST_3072);
  JavaMathBigInteger *p = [((LibOrgBouncycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup *) nil_chk(group)) getP];
  JavaMathBigInteger *q = [group getQ];
  JavaMathBigInteger *g = [group getG];
  NSString *alicePassword = @"password";
  NSString *bobPassword = @"password";
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"********* Initialization **********"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Public parameters for the cyclic group:"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$", @"p (", [((JavaMathBigInteger *) nil_chk(p)) bitLength], @" bits): ", [p toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$", @"q (", [((JavaMathBigInteger *) nil_chk(q)) bitLength], @" bits): ", [q toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$", @"g (", [p bitLength], @" bits): ", [((JavaMathBigInteger *) nil_chk(g)) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"p mod q = ", [((JavaMathBigInteger *) nil_chk([p modWithJavaMathBigInteger:q])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"g^{q} mod p = ", [((JavaMathBigInteger *) nil_chk([g modPowWithJavaMathBigInteger:q withJavaMathBigInteger:p])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$$", @"(Secret passwords used by Alice and Bob: \"", alicePassword, @"\" and \"", bobPassword, @"\")\n")];
  id<LibOrgBouncycastleCryptoDigest> digest = new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init();
  JavaSecuritySecureRandom *random = new_JavaSecuritySecureRandom_init();
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEParticipant *alice = new_LibOrgBouncycastleCryptoAgreementJpakeJPAKEParticipant_initWithNSString_withCharArray_withLibOrgBouncycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_withLibOrgBouncycastleCryptoDigest_withJavaSecuritySecureRandom_(@"alice", [alicePassword java_toCharArray], group, digest, random);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKEParticipant *bob = new_LibOrgBouncycastleCryptoAgreementJpakeJPAKEParticipant_initWithNSString_withCharArray_withLibOrgBouncycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_withLibOrgBouncycastleCryptoDigest_withJavaSecuritySecureRandom_(@"bob", [bobPassword java_toCharArray], group, digest, random);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload *aliceRound1Payload = [alice createRound1PayloadToSend];
  LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload *bobRound1Payload = [bob createRound1PayloadToSend];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"************ Round 1 **************"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Alice sends to Bob: "];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"g^{x1}=", [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload *) nil_chk(aliceRound1Payload)) getGx1])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"g^{x2}=", [((JavaMathBigInteger *) nil_chk([aliceRound1Payload getGx2])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$C", @"KP{x1}={", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([aliceRound1Payload getKnowledgeProofForX1]), 0))) toStringWithInt:16], @"};{", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([aliceRound1Payload getKnowledgeProofForX1]), 1))) toStringWithInt:16], '}')];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$C", @"KP{x2}={", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([aliceRound1Payload getKnowledgeProofForX2]), 0))) toStringWithInt:16], @"};{", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([aliceRound1Payload getKnowledgeProofForX2]), 1))) toStringWithInt:16], '}')];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Bob sends to Alice: "];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"g^{x3}=", [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload *) nil_chk(bobRound1Payload)) getGx1])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"g^{x4}=", [((JavaMathBigInteger *) nil_chk([bobRound1Payload getGx2])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$C", @"KP{x3}={", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([bobRound1Payload getKnowledgeProofForX1]), 0))) toStringWithInt:16], @"};{", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([bobRound1Payload getKnowledgeProofForX1]), 1))) toStringWithInt:16], '}')];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$C", @"KP{x4}={", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([bobRound1Payload getKnowledgeProofForX2]), 0))) toStringWithInt:16], @"};{", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([bobRound1Payload getKnowledgeProofForX2]), 1))) toStringWithInt:16], '}')];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  [alice validateRound1PayloadReceivedWithLibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload:bobRound1Payload];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Alice checks g^{x4}!=1: OK"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Alice checks KP{x3}: OK"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Alice checks KP{x4}: OK"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  [bob validateRound1PayloadReceivedWithLibOrgBouncycastleCryptoAgreementJpakeJPAKERound1Payload:aliceRound1Payload];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Bob checks g^{x2}!=1: OK"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Bob checks KP{x1},: OK"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Bob checks KP{x2},: OK"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  LibOrgBouncycastleCryptoAgreementJpakeJPAKERound2Payload *aliceRound2Payload = [alice createRound2PayloadToSend];
  LibOrgBouncycastleCryptoAgreementJpakeJPAKERound2Payload *bobRound2Payload = [bob createRound2PayloadToSend];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"************ Round 2 **************"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Alice sends to Bob: "];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"A=", [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoAgreementJpakeJPAKERound2Payload *) nil_chk(aliceRound2Payload)) getA])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$C", @"KP{x2*s}={", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([aliceRound2Payload getKnowledgeProofForX2s]), 0))) toStringWithInt:16], @"},{", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([aliceRound2Payload getKnowledgeProofForX2s]), 1))) toStringWithInt:16], '}')];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Bob sends to Alice"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"B=", [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoAgreementJpakeJPAKERound2Payload *) nil_chk(bobRound2Payload)) getA])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$C", @"KP{x4*s}={", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([bobRound2Payload getKnowledgeProofForX2s]), 0))) toStringWithInt:16], @"},{", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk([bobRound2Payload getKnowledgeProofForX2s]), 1))) toStringWithInt:16], '}')];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  [alice validateRound2PayloadReceivedWithLibOrgBouncycastleCryptoAgreementJpakeJPAKERound2Payload:bobRound2Payload];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Alice checks KP{x4*s}: OK\n"];
  [bob validateRound2PayloadReceivedWithLibOrgBouncycastleCryptoAgreementJpakeJPAKERound2Payload:aliceRound2Payload];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Bob checks KP{x2*s}: OK\n"];
  JavaMathBigInteger *aliceKeyingMaterial = [alice calculateKeyingMaterial];
  JavaMathBigInteger *bobKeyingMaterial = [bob calculateKeyingMaterial];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"********* After round 2 ***********"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Alice computes key material \t K=", [((JavaMathBigInteger *) nil_chk(aliceKeyingMaterial)) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Bob computes key material \t K=", [((JavaMathBigInteger *) nil_chk(bobKeyingMaterial)) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  JavaMathBigInteger *aliceKey = LibOrgBouncycastleCryptoExamplesJPAKEExample_deriveSessionKeyWithJavaMathBigInteger_(aliceKeyingMaterial);
  JavaMathBigInteger *bobKey = LibOrgBouncycastleCryptoExamplesJPAKEExample_deriveSessionKeyWithJavaMathBigInteger_(bobKeyingMaterial);
  LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload *aliceRound3Payload = [alice createRound3PayloadToSendWithJavaMathBigInteger:aliceKeyingMaterial];
  LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload *bobRound3Payload = [bob createRound3PayloadToSendWithJavaMathBigInteger:bobKeyingMaterial];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"************ Round 3 **************"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Alice sends to Bob: "];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"MacTag=", [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload *) nil_chk(aliceRound3Payload)) getMacTag])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Bob sends to Alice: "];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"MacTag=", [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload *) nil_chk(bobRound3Payload)) getMacTag])) toStringWithInt:16])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
  [alice validateRound3PayloadReceivedWithLibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload:bobRound3Payload withJavaMathBigInteger:aliceKeyingMaterial];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Alice checks MacTag: OK\n"];
  [bob validateRound3PayloadReceivedWithLibOrgBouncycastleCryptoAgreementJpakeJPAKERound3Payload:aliceRound3Payload withJavaMathBigInteger:bobKeyingMaterial];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Bob checks MacTag: OK\n"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"MacTags validated, therefore the keying material matches."];
}

JavaMathBigInteger *LibOrgBouncycastleCryptoExamplesJPAKEExample_deriveSessionKeyWithJavaMathBigInteger_(JavaMathBigInteger *keyingMaterial) {
  LibOrgBouncycastleCryptoExamplesJPAKEExample_initialize();
  LibOrgBouncycastleCryptoDigestsSHA256Digest *digest = new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init();
  IOSByteArray *keyByteArray = [((JavaMathBigInteger *) nil_chk(keyingMaterial)) toByteArray];
  IOSByteArray *output = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  [digest updateWithByteArray:keyByteArray withInt:0 withInt:((IOSByteArray *) nil_chk(keyByteArray))->size_];
  [digest doFinalWithByteArray:output withInt:0];
  return new_JavaMathBigInteger_initWithByteArray_(output);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoExamplesJPAKEExample)
