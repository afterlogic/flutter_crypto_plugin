//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/ECPoint.java
//

#ifndef ECPoint_H
#define ECPoint_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaUtilHashtable;
@class LibOrgBouncycastleMathEcECCurve;
@class LibOrgBouncycastleMathEcECFieldElement;

@interface LibOrgBouncycastleMathEcECPoint : NSObject {
 @public
  LibOrgBouncycastleMathEcECCurve *curve_;
  LibOrgBouncycastleMathEcECFieldElement *x_;
  LibOrgBouncycastleMathEcECFieldElement *y_;
  IOSObjectArray *zs_;
  jboolean withCompression_;
  JavaUtilHashtable *preCompTable_;
}
@property (readonly, class) IOSObjectArray *EMPTY_ZS NS_SWIFT_NAME(EMPTY_ZS);

+ (IOSObjectArray *)EMPTY_ZS;

#pragma mark Public

- (LibOrgBouncycastleMathEcECPoint *)addWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

- (jboolean)equalsWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)other;

- (jboolean)isEqual:(id)other;

- (LibOrgBouncycastleMathEcECFieldElement *)getAffineXCoord;

- (LibOrgBouncycastleMathEcECFieldElement *)getAffineYCoord;

- (LibOrgBouncycastleMathEcECCurve *)getCurve;

- (LibOrgBouncycastleMathEcECPoint *)getDetachedPoint;

- (IOSByteArray *)getEncoded;

- (IOSByteArray *)getEncodedWithBoolean:(jboolean)compressed;

- (LibOrgBouncycastleMathEcECFieldElement *)getRawXCoord;

- (LibOrgBouncycastleMathEcECFieldElement *)getRawYCoord;

- (LibOrgBouncycastleMathEcECFieldElement *)getXCoord;

- (LibOrgBouncycastleMathEcECFieldElement *)getYCoord;

- (LibOrgBouncycastleMathEcECFieldElement *)getZCoordWithInt:(jint)index;

- (IOSObjectArray *)getZCoords;

- (NSUInteger)hash;

- (jboolean)isCompressed;

- (jboolean)isInfinity;

- (jboolean)isNormalized;

- (jboolean)isValid;

- (LibOrgBouncycastleMathEcECPoint *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)k;

- (LibOrgBouncycastleMathEcECPoint *)negate;

- (LibOrgBouncycastleMathEcECPoint *)normalize;

- (LibOrgBouncycastleMathEcECPoint *)scaleXWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_;

- (LibOrgBouncycastleMathEcECPoint *)scaleYWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_;

- (LibOrgBouncycastleMathEcECPoint *)subtractWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

- (LibOrgBouncycastleMathEcECPoint *)threeTimes;

- (LibOrgBouncycastleMathEcECPoint *)timesPow2WithInt:(jint)e;

- (NSString *)description;

- (LibOrgBouncycastleMathEcECPoint *)twice;

- (LibOrgBouncycastleMathEcECPoint *)twicePlusWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                  withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs;

- (void)checkNormalized;

- (LibOrgBouncycastleMathEcECPoint *)createScaledPointWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)sx
                                                      withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)sy;

- (LibOrgBouncycastleMathEcECPoint *)detach;

- (jboolean)getCompressionYTilde;

- (jint)getCurveCoordinateSystem;

+ (IOSObjectArray *)getInitialZCoordsWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve;

- (IOSObjectArray *)getRawZCoords;

- (jboolean)satisfiesCurveEquation;

- (jboolean)satisfiesOrder;

#pragma mark Package-Private

- (jboolean)implIsValidWithBoolean:(jboolean)decompressed
                       withBoolean:(jboolean)checkOrder;

- (jboolean)isValidPartial;

- (LibOrgBouncycastleMathEcECPoint *)normalizeWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)zInv;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleMathEcECPoint)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleMathEcECPoint, curve_, LibOrgBouncycastleMathEcECCurve *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleMathEcECPoint, x_, LibOrgBouncycastleMathEcECFieldElement *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleMathEcECPoint, y_, LibOrgBouncycastleMathEcECFieldElement *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleMathEcECPoint, zs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleMathEcECPoint, preCompTable_, JavaUtilHashtable *)

inline IOSObjectArray *LibOrgBouncycastleMathEcECPoint_get_EMPTY_ZS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcECPoint_EMPTY_ZS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcECPoint, EMPTY_ZS, IOSObjectArray *)

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleMathEcECPoint_getInitialZCoordsWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *curve);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(LibOrgBouncycastleMathEcECPoint *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcECPoint)

@interface LibOrgBouncycastleMathEcECPoint_AbstractFp : LibOrgBouncycastleMathEcECPoint

#pragma mark Public

- (LibOrgBouncycastleMathEcECPoint *)subtractWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                  withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs;

- (jboolean)getCompressionYTilde;

- (jboolean)satisfiesCurveEquation;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcECPoint_AbstractFp)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_AbstractFp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint_AbstractFp *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_AbstractFp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(LibOrgBouncycastleMathEcECPoint_AbstractFp *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcECPoint_AbstractFp)

@interface LibOrgBouncycastleMathEcECPoint_Fp : LibOrgBouncycastleMathEcECPoint_AbstractFp

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                                      withBoolean:(jboolean)withCompression;

- (LibOrgBouncycastleMathEcECPoint *)addWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

- (LibOrgBouncycastleMathEcECFieldElement *)getZCoordWithInt:(jint)index;

- (LibOrgBouncycastleMathEcECPoint *)negate;

- (LibOrgBouncycastleMathEcECPoint *)threeTimes;

- (LibOrgBouncycastleMathEcECPoint *)timesPow2WithInt:(jint)e;

- (LibOrgBouncycastleMathEcECPoint *)twice;

- (LibOrgBouncycastleMathEcECPoint *)twicePlusWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

#pragma mark Protected

- (LibOrgBouncycastleMathEcECFieldElement *)calculateJacobianModifiedWWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)Z
                                                                      withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)ZSquared;

- (LibOrgBouncycastleMathEcECPoint *)detach;

- (LibOrgBouncycastleMathEcECFieldElement *)doubleProductFromSquaresWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)a
                                                                    withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)b
                                                                    withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)aSquared
                                                                    withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)bSquared;

- (LibOrgBouncycastleMathEcECFieldElement *)eightWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x;

- (LibOrgBouncycastleMathEcECFieldElement *)fourWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x;

- (LibOrgBouncycastleMathEcECFieldElement *)getJacobianModifiedW;

- (LibOrgBouncycastleMathEcECFieldElement *)threeWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x;

- (LibOrgBouncycastleMathEcECPoint_Fp *)twiceJacobianModifiedWithBoolean:(jboolean)calculateW;

- (LibOrgBouncycastleMathEcECFieldElement *)twoWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                  withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                      withBoolean:(jboolean)withCompression;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)arg0
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)arg1
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)arg0
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)arg1
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)arg2
                  withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcECPoint_Fp)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECPoint_Fp *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_Fp *new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_Fp *create_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECPoint_Fp *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_Fp *new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_Fp *create_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcECPoint_Fp)

@interface LibOrgBouncycastleMathEcECPoint_AbstractF2m : LibOrgBouncycastleMathEcECPoint

#pragma mark Public

- (LibOrgBouncycastleMathEcECPoint *)scaleXWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_;

- (LibOrgBouncycastleMathEcECPoint *)scaleYWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)scale_;

- (LibOrgBouncycastleMathEcECPoint *)subtractWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

- (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)tau;

- (LibOrgBouncycastleMathEcECPoint_AbstractF2m *)tauPowWithInt:(jint)pow;

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                  withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs;

- (jboolean)satisfiesCurveEquation;

- (jboolean)satisfiesOrder;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcECPoint_AbstractF2m)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_AbstractF2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_AbstractF2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_(LibOrgBouncycastleMathEcECPoint_AbstractF2m *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcECPoint_AbstractF2m)

@interface LibOrgBouncycastleMathEcECPoint_F2m : LibOrgBouncycastleMathEcECPoint_AbstractF2m

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                                      withBoolean:(jboolean)withCompression;

- (LibOrgBouncycastleMathEcECPoint *)addWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

- (LibOrgBouncycastleMathEcECFieldElement *)getYCoord;

- (LibOrgBouncycastleMathEcECPoint *)negate;

- (LibOrgBouncycastleMathEcECPoint *)twice;

- (LibOrgBouncycastleMathEcECPoint *)twicePlusWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)b;

#pragma mark Protected

- (LibOrgBouncycastleMathEcECPoint *)detach;

- (jboolean)getCompressionYTilde;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                  withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                      withBoolean:(jboolean)withCompression;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)arg0
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)arg1
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)arg0
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)arg1
                       withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)arg2
                  withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcECPoint_F2m)

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECPoint_F2m *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_F2m *new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_F2m *create_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, jboolean withCompression);

FOUNDATION_EXPORT void LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECPoint_F2m *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_F2m *new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint_F2m *create_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *x, LibOrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs, jboolean withCompression);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathEcECPoint_F2m)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ECPoint_H
