//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/elgamal/BCElGamalPublicKey.java
//

#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "BCElGamalPublicKey.h"
#include "ElGamalParameter.h"
#include "ElGamalParameterSpec.h"
#include "ElGamalParameters.h"
#include "ElGamalPublicKey.h"
#include "ElGamalPublicKeyParameters.h"
#include "ElGamalPublicKeySpec.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OIWObjectIdentifiers.h"
#include "SubjectPublicKeyInfo.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "javax/crypto/interfaces/DHPublicKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "javax/crypto/spec/DHPublicKeySpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey () {
 @public
  JavaMathBigInteger *y_;
  LibOrgBouncycastleJceSpecElGamalParameterSpec *elSpec_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, y_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, elSpec_, LibOrgBouncycastleJceSpecElGamalParameterSpec *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, JavaIoObjectOutputStream *outArg);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey

+ (jlong)serialVersionUID {
  return LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_serialVersionUID;
}

- (instancetype)initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec:(LibOrgBouncycastleJceSpecElGamalPublicKeySpec *)spec {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithJavaxCryptoSpecDHPublicKeySpec:(JavaxCryptoSpecDHPublicKeySpec *)spec {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey:(id<LibOrgBouncycastleJceInterfacesElGamalPublicKey>)key {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey_(self, key);
  return self;
}

- (instancetype)initWithJavaxCryptoInterfacesDHPublicKey:(id<JavaxCryptoInterfacesDHPublicKey>)key {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(self, key);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters:(LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters *)params {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_(self, params);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)y
withLibOrgBouncycastleJceSpecElGamalParameterSpec:(LibOrgBouncycastleJceSpecElGamalParameterSpec *)elSpec {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecElGamalParameterSpec_(self, y, elSpec);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
  return self;
}

- (NSString *)getAlgorithm {
  return @"ElGamal";
}

- (NSString *)getFormat {
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  @try {
    LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info = new_LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm), new_LibOrgBouncycastleAsn1OiwElGamalParameter_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk(elSpec_)) getP], [((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk(elSpec_)) getG])), new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(y_));
    return [info getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
}

- (LibOrgBouncycastleJceSpecElGamalParameterSpec *)getParameters {
  return elSpec_;
}

- (JavaxCryptoSpecDHParameterSpec *)getParams {
  return new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk(elSpec_)) getP], [((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk(elSpec_)) getG]);
}

- (JavaMathBigInteger *)getY {
  return y_;
}

- (NSUInteger)hash {
  return ((jint) [((JavaMathBigInteger *) nil_chk([self getY])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk([self getParams])) getG])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk([self getParams])) getP])) hash]) ^ [((JavaxCryptoSpecDHParameterSpec *) nil_chk([self getParams])) getL];
}

- (jboolean)isEqual:(id)o {
  if (!([JavaxCryptoInterfacesDHPublicKey_class_() isInstance:o])) {
    return false;
  }
  id<JavaxCryptoInterfacesDHPublicKey> other = (id<JavaxCryptoInterfacesDHPublicKey>) cast_check(o, JavaxCryptoInterfacesDHPublicKey_class_());
  return [((JavaMathBigInteger *) nil_chk([self getY])) isEqual:[((id<JavaxCryptoInterfacesDHPublicKey>) nil_chk(other)) getY]] && [((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk([self getParams])) getG])) isEqual:[((JavaxCryptoSpecDHParameterSpec *) nil_chk([other getParams])) getG]] && [((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk([self getParams])) getP])) isEqual:[((JavaxCryptoSpecDHParameterSpec *) nil_chk([other getParams])) getP]] && [((JavaxCryptoSpecDHParameterSpec *) nil_chk([self getParams])) getL] == [((JavaxCryptoSpecDHParameterSpec *) nil_chk([other getParams])) getL];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceSpecElGamalParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSpecDHParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec:);
  methods[1].selector = @selector(initWithJavaxCryptoSpecDHPublicKeySpec:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey:);
  methods[3].selector = @selector(initWithJavaxCryptoInterfacesDHPublicKey:);
  methods[4].selector = @selector(initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters:);
  methods[5].selector = @selector(initWithJavaMathBigInteger:withLibOrgBouncycastleJceSpecElGamalParameterSpec:);
  methods[6].selector = @selector(initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[7].selector = @selector(getAlgorithm);
  methods[8].selector = @selector(getFormat);
  methods[9].selector = @selector(getEncoded);
  methods[10].selector = @selector(getParameters);
  methods[11].selector = @selector(getParams);
  methods[12].selector = @selector(getY);
  methods[13].selector = @selector(hash);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[16].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_serialVersionUID, 0x18, -1, -1, -1, -1 },
    { "y_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elSpec_", "LLibOrgBouncycastleJceSpecElGamalParameterSpec;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleJceSpecElGamalPublicKeySpec;", "LJavaxCryptoSpecDHPublicKeySpec;", "LLibOrgBouncycastleJceInterfacesElGamalPublicKey;", "LJavaxCryptoInterfacesDHPublicKey;", "LLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters;", "LJavaMathBigInteger;LLibOrgBouncycastleJceSpecElGamalParameterSpec;", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "hashCode", "equals", "LNSObject;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey = { "BCElGamalPublicKey", "lib.org.bouncycastle.jcajce.provider.asymmetric.elgamal", ptrTable, methods, fields, 7, 0x1, 17, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, LibOrgBouncycastleJceSpecElGamalPublicKeySpec *spec) {
  NSObject_init(self);
  self->y_ = [((LibOrgBouncycastleJceSpecElGamalPublicKeySpec *) nil_chk(spec)) getY];
  self->elSpec_ = new_LibOrgBouncycastleJceSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk([spec getParams])) getP], [((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk([spec getParams])) getG]);
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec_(LibOrgBouncycastleJceSpecElGamalPublicKeySpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec_, spec)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec_(LibOrgBouncycastleJceSpecElGamalPublicKeySpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec_, spec)
}

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, JavaxCryptoSpecDHPublicKeySpec *spec) {
  NSObject_init(self);
  self->y_ = [((JavaxCryptoSpecDHPublicKeySpec *) nil_chk(spec)) getY];
  self->elSpec_ = new_LibOrgBouncycastleJceSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([spec getP], [spec getG]);
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(JavaxCryptoSpecDHPublicKeySpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithJavaxCryptoSpecDHPublicKeySpec_, spec)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(JavaxCryptoSpecDHPublicKeySpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithJavaxCryptoSpecDHPublicKeySpec_, spec)
}

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, id<LibOrgBouncycastleJceInterfacesElGamalPublicKey> key) {
  NSObject_init(self);
  self->y_ = [((id<LibOrgBouncycastleJceInterfacesElGamalPublicKey>) nil_chk(key)) getY];
  self->elSpec_ = [key getParameters];
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey_(id<LibOrgBouncycastleJceInterfacesElGamalPublicKey> key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey_, key)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey_(id<LibOrgBouncycastleJceInterfacesElGamalPublicKey> key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey_, key)
}

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, id<JavaxCryptoInterfacesDHPublicKey> key) {
  NSObject_init(self);
  self->y_ = [((id<JavaxCryptoInterfacesDHPublicKey>) nil_chk(key)) getY];
  self->elSpec_ = new_LibOrgBouncycastleJceSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaxCryptoSpecDHParameterSpec *) nil_chk([key getParams])) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([key getParams])) getG]);
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(id<JavaxCryptoInterfacesDHPublicKey> key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithJavaxCryptoInterfacesDHPublicKey_, key)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(id<JavaxCryptoInterfacesDHPublicKey> key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithJavaxCryptoInterfacesDHPublicKey_, key)
}

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters *params) {
  NSObject_init(self);
  self->y_ = [((LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters *) nil_chk(params)) getY];
  self->elSpec_ = new_LibOrgBouncycastleJceSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsElGamalParameters *) nil_chk([params getParameters])) getP], [((LibOrgBouncycastleCryptoParamsElGamalParameters *) nil_chk([params getParameters])) getG]);
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_(LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_, params)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_(LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithLibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_, params)
}

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecElGamalParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, JavaMathBigInteger *y, LibOrgBouncycastleJceSpecElGamalParameterSpec *elSpec) {
  NSObject_init(self);
  self->y_ = y;
  self->elSpec_ = elSpec;
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecElGamalParameterSpec_(JavaMathBigInteger *y, LibOrgBouncycastleJceSpecElGamalParameterSpec *elSpec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecElGamalParameterSpec_, y, elSpec)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecElGamalParameterSpec_(JavaMathBigInteger *y, LibOrgBouncycastleJceSpecElGamalParameterSpec *elSpec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecElGamalParameterSpec_, y, elSpec)
}

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  NSObject_init(self);
  LibOrgBouncycastleAsn1OiwElGamalParameter *params = LibOrgBouncycastleAsn1OiwElGamalParameter_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithm])) getParameters]);
  LibOrgBouncycastleAsn1ASN1Integer *derY = nil;
  @try {
    derY = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([info parsePublicKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid info structure in DSA public key");
  }
  self->y_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue];
  self->elSpec_ = new_LibOrgBouncycastleJceSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1OiwElGamalParameter *) nil_chk(params)) getP], [params getG]);
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, info)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, info)
}

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  self->elSpec_ = new_LibOrgBouncycastleJceSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_((JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]), (JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]));
}

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  [outArg writeObjectWithId:[((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk(self->elSpec_)) getP]];
  [outArg writeObjectWithId:[((LibOrgBouncycastleJceSpecElGamalParameterSpec *) nil_chk(self->elSpec_)) getG]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey)
