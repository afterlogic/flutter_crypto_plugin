//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/DESedeEngine.java
//

#include "CipherParameters.h"
#include "DESEngine.h"
#include "DESedeEngine.h"
#include "DataLengthException.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OutputLengthException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoEnginesDESedeEngine () {
 @public
  IOSIntArray *workingKey1_;
  IOSIntArray *workingKey2_;
  IOSIntArray *workingKey3_;
  jboolean forEncryption_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDESedeEngine, workingKey1_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDESedeEngine, workingKey2_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesDESedeEngine, workingKey3_, IOSIntArray *)

@implementation LibOrgBouncycastleCryptoEnginesDESedeEngine

+ (jint)BLOCK_SIZE {
  return LibOrgBouncycastleCryptoEnginesDESedeEngine_BLOCK_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesDESedeEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)encrypting
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to DESede init - ", [[((id<LibOrgBouncycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
  IOSByteArray *keyMaster = [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk(params, [LibOrgBouncycastleCryptoParamsKeyParameter class])))) getKey];
  if (((IOSByteArray *) nil_chk(keyMaster))->size_ != 24 && keyMaster->size_ != 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"key size must be 16 or 24 bytes.");
  }
  self->forEncryption_ = encrypting;
  IOSByteArray *key1 = [IOSByteArray newArrayWithLength:8];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keyMaster, 0, key1, 0, key1->size_);
  workingKey1_ = [self generateWorkingKeyWithBoolean:encrypting withByteArray:key1];
  IOSByteArray *key2 = [IOSByteArray newArrayWithLength:8];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keyMaster, 8, key2, 0, key2->size_);
  workingKey2_ = [self generateWorkingKeyWithBoolean:!encrypting withByteArray:key2];
  if (keyMaster->size_ == 24) {
    IOSByteArray *key3 = [IOSByteArray newArrayWithLength:8];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keyMaster, 16, key3, 0, key3->size_);
    workingKey3_ = [self generateWorkingKeyWithBoolean:encrypting withByteArray:key3];
  }
  else {
    workingKey3_ = workingKey1_;
  }
}

- (NSString *)getAlgorithmName {
  return @"DESede";
}

- (jint)getBlockSize {
  return LibOrgBouncycastleCryptoEnginesDESedeEngine_BLOCK_SIZE;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (workingKey1_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DESede engine not initialised");
  }
  if ((inOff + LibOrgBouncycastleCryptoEnginesDESedeEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + LibOrgBouncycastleCryptoEnginesDESedeEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoEnginesDESedeEngine_BLOCK_SIZE];
  if (forEncryption_) {
    [self desFuncWithIntArray:workingKey1_ withByteArray:inArg withInt:inOff withByteArray:temp withInt:0];
    [self desFuncWithIntArray:workingKey2_ withByteArray:temp withInt:0 withByteArray:temp withInt:0];
    [self desFuncWithIntArray:workingKey3_ withByteArray:temp withInt:0 withByteArray:outArg withInt:outOff];
  }
  else {
    [self desFuncWithIntArray:workingKey3_ withByteArray:inArg withInt:inOff withByteArray:temp withInt:0];
    [self desFuncWithIntArray:workingKey2_ withByteArray:temp withInt:0 withByteArray:temp withInt:0];
    [self desFuncWithIntArray:workingKey1_ withByteArray:temp withInt:0 withByteArray:outArg withInt:outOff];
  }
  return LibOrgBouncycastleCryptoEnginesDESedeEngine_BLOCK_SIZE;
}

- (void)reset {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesDESedeEngine_BLOCK_SIZE, 0x1c, -1, -1, -1, -1 },
    { "workingKey1_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workingKey2_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workingKey3_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "processBlock", "[BI[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesDESedeEngine = { "DESedeEngine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesDESedeEngine;
}

@end

void LibOrgBouncycastleCryptoEnginesDESedeEngine_init(LibOrgBouncycastleCryptoEnginesDESedeEngine *self) {
  LibOrgBouncycastleCryptoEnginesDESEngine_init(self);
  self->workingKey1_ = nil;
  self->workingKey2_ = nil;
  self->workingKey3_ = nil;
}

LibOrgBouncycastleCryptoEnginesDESedeEngine *new_LibOrgBouncycastleCryptoEnginesDESedeEngine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesDESedeEngine, init)
}

LibOrgBouncycastleCryptoEnginesDESedeEngine *create_LibOrgBouncycastleCryptoEnginesDESedeEngine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesDESedeEngine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesDESedeEngine)
