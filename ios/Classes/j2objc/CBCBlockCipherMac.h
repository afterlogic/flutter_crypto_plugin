//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/CBCBlockCipherMac.java
//

#ifndef CBCBlockCipherMac_H
#define CBCBlockCipherMac_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Mac.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoPaddingsBlockCipherPadding;

@interface LibOrgBouncycastleCryptoMacsCBCBlockCipherMac : NSObject < LibOrgBouncycastleCryptoMac >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
               withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding:(id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>)padding;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                              withInt:(jint)macSizeInBits;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                              withInt:(jint)macSizeInBits
               withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding:(id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>)padding;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoMacsCBCBlockCipherMac)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *new_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *create_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *new_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *create_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *new_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *create_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *new_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsCBCBlockCipherMac *create_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoMacsCBCBlockCipherMac)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CBCBlockCipherMac_H
