//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/CertificatePolicies.java
//

#ifndef CertificatePolicies_H
#define CertificatePolicies_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1X509Extensions;
@class LibOrgBouncycastleAsn1X509PolicyInformation;

@interface LibOrgBouncycastleAsn1X509CertificatePolicies : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509PolicyInformation:(LibOrgBouncycastleAsn1X509PolicyInformation *)name;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509PolicyInformationArray:(IOSObjectArray *)policyInformation;

+ (LibOrgBouncycastleAsn1X509CertificatePolicies *)fromExtensionsWithLibOrgBouncycastleAsn1X509Extensions:(LibOrgBouncycastleAsn1X509Extensions *)extensions;

+ (LibOrgBouncycastleAsn1X509CertificatePolicies *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                             withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1X509CertificatePolicies *)getInstanceWithId:(id)obj;

- (IOSObjectArray *)getPolicyInformation;

- (LibOrgBouncycastleAsn1X509PolicyInformation *)getPolicyInformationWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)policyIdentifier;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509CertificatePolicies)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePolicies *LibOrgBouncycastleAsn1X509CertificatePolicies_getInstanceWithId_(id obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePolicies *LibOrgBouncycastleAsn1X509CertificatePolicies_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePolicies *LibOrgBouncycastleAsn1X509CertificatePolicies_fromExtensionsWithLibOrgBouncycastleAsn1X509Extensions_(LibOrgBouncycastleAsn1X509Extensions *extensions);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509CertificatePolicies_initWithLibOrgBouncycastleAsn1X509PolicyInformation_(LibOrgBouncycastleAsn1X509CertificatePolicies *self, LibOrgBouncycastleAsn1X509PolicyInformation *name);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePolicies *new_LibOrgBouncycastleAsn1X509CertificatePolicies_initWithLibOrgBouncycastleAsn1X509PolicyInformation_(LibOrgBouncycastleAsn1X509PolicyInformation *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePolicies *create_LibOrgBouncycastleAsn1X509CertificatePolicies_initWithLibOrgBouncycastleAsn1X509PolicyInformation_(LibOrgBouncycastleAsn1X509PolicyInformation *name);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509CertificatePolicies_initWithLibOrgBouncycastleAsn1X509PolicyInformationArray_(LibOrgBouncycastleAsn1X509CertificatePolicies *self, IOSObjectArray *policyInformation);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePolicies *new_LibOrgBouncycastleAsn1X509CertificatePolicies_initWithLibOrgBouncycastleAsn1X509PolicyInformationArray_(IOSObjectArray *policyInformation) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509CertificatePolicies *create_LibOrgBouncycastleAsn1X509CertificatePolicies_initWithLibOrgBouncycastleAsn1X509PolicyInformationArray_(IOSObjectArray *policyInformation);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509CertificatePolicies)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificatePolicies_H
