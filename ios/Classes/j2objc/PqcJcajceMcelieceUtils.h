//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/mceliece/PqcJcajceMcelieceUtils.java
//

#ifndef PqcJcajceMcelieceUtils_H
#define PqcJcajceMcelieceUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getDigAlgIdWithNSString:(NSString *)digestName;

+ (id<LibOrgBouncycastleCryptoDigest>)getDigestWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)digest;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils_init(LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils *new_LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils *create_LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils_init(void);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils_getDigAlgIdWithNSString_(NSString *digestName);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils_getDigestWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *digest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcJcajceProviderMceliecePqcJcajceMcelieceUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PqcJcajceMcelieceUtils_H
