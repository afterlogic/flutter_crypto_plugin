//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/WNafPreCompInfo.java
//

#include "ECPoint.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "WNafPreCompInfo.h"

@implementation LibOrgBouncycastleMathEcWNafPreCompInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcWNafPreCompInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSObjectArray *)getPreComp {
  return preComp_;
}

- (void)setPreCompWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preComp {
  self->preComp_ = preComp;
}

- (IOSObjectArray *)getPreCompNeg {
  return preCompNeg_;
}

- (void)setPreCompNegWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNeg {
  self->preCompNeg_ = preCompNeg;
}

- (LibOrgBouncycastleMathEcECPoint *)getTwice {
  return twice_;
}

- (void)setTwiceWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)twice {
  self->twice_ = twice;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPreComp);
  methods[2].selector = @selector(setPreCompWithLibOrgBouncycastleMathEcECPointArray:);
  methods[3].selector = @selector(getPreCompNeg);
  methods[4].selector = @selector(setPreCompNegWithLibOrgBouncycastleMathEcECPointArray:);
  methods[5].selector = @selector(getTwice);
  methods[6].selector = @selector(setTwiceWithLibOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "preComp_", "[LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "preCompNeg_", "[LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "twice_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPreComp", "[LLibOrgBouncycastleMathEcECPoint;", "setPreCompNeg", "setTwice", "LLibOrgBouncycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcWNafPreCompInfo = { "WNafPreCompInfo", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcWNafPreCompInfo;
}

@end

void LibOrgBouncycastleMathEcWNafPreCompInfo_init(LibOrgBouncycastleMathEcWNafPreCompInfo *self) {
  NSObject_init(self);
  self->preComp_ = nil;
  self->preCompNeg_ = nil;
  self->twice_ = nil;
}

LibOrgBouncycastleMathEcWNafPreCompInfo *new_LibOrgBouncycastleMathEcWNafPreCompInfo_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcWNafPreCompInfo, init)
}

LibOrgBouncycastleMathEcWNafPreCompInfo *create_LibOrgBouncycastleMathEcWNafPreCompInfo_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcWNafPreCompInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcWNafPreCompInfo)
