//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/CertificateURL.java
//

#include "AlertDescription.h"
#include "CertChainType.h"
#include "CertificateURL.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "TlsContext.h"
#include "TlsFatalAlert.h"
#include "TlsUtils.h"
#include "URLAndHash.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Vector.h"

@implementation LibOrgBouncycastleCryptoTlsCertificateURL

- (instancetype)initWithShort:(jshort)type
           withJavaUtilVector:(JavaUtilVector *)urlAndHashList {
  LibOrgBouncycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(self, type, urlAndHashList);
  return self;
}

- (jshort)getType {
  return type_;
}

- (JavaUtilVector *)getURLAndHashList {
  return urlAndHashList_;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(self->type_, output);
  LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 *buf = new_LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16_initWithLibOrgBouncycastleCryptoTlsCertificateURL_(self);
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(self->urlAndHashList_)) size]; ++i) {
    LibOrgBouncycastleCryptoTlsURLAndHash *urlAndHash = (LibOrgBouncycastleCryptoTlsURLAndHash *) cast_chk([((JavaUtilVector *) nil_chk(self->urlAndHashList_)) elementAtWithInt:i], [LibOrgBouncycastleCryptoTlsURLAndHash class]);
    [((LibOrgBouncycastleCryptoTlsURLAndHash *) nil_chk(urlAndHash)) encodeWithJavaIoOutputStream:buf];
  }
  [buf encodeToWithJavaIoOutputStream:output];
}

+ (LibOrgBouncycastleCryptoTlsCertificateURL *)parseWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                        withJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleCryptoTlsCertificateURL_parseWithLibOrgBouncycastleCryptoTlsTlsContext_withJavaIoInputStream_(context, input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsCertificateURL;", 0x9, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:withJavaUtilVector:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(getURLAndHashList);
  methods[3].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[4].selector = @selector(parseWithLibOrgBouncycastleCryptoTlsTlsContext:withJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "urlAndHashList_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "SLJavaUtilVector;", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LLibOrgBouncycastleCryptoTlsTlsContext;LJavaIoInputStream;", "LLibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsCertificateURL = { "CertificateURL", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, 6, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsCertificateURL;
}

@end

void LibOrgBouncycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(LibOrgBouncycastleCryptoTlsCertificateURL *self, jshort type, JavaUtilVector *urlAndHashList) {
  NSObject_init(self);
  if (!LibOrgBouncycastleCryptoTlsCertChainType_isValidWithShort_(type)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'type' is not a valid CertChainType value");
  }
  if (urlAndHashList == nil || [urlAndHashList isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'urlAndHashList' must have length > 0");
  }
  self->type_ = type;
  self->urlAndHashList_ = urlAndHashList;
}

LibOrgBouncycastleCryptoTlsCertificateURL *new_LibOrgBouncycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(jshort type, JavaUtilVector *urlAndHashList) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsCertificateURL, initWithShort_withJavaUtilVector_, type, urlAndHashList)
}

LibOrgBouncycastleCryptoTlsCertificateURL *create_LibOrgBouncycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(jshort type, JavaUtilVector *urlAndHashList) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsCertificateURL, initWithShort_withJavaUtilVector_, type, urlAndHashList)
}

LibOrgBouncycastleCryptoTlsCertificateURL *LibOrgBouncycastleCryptoTlsCertificateURL_parseWithLibOrgBouncycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, JavaIoInputStream *input) {
  LibOrgBouncycastleCryptoTlsCertificateURL_initialize();
  jshort type = LibOrgBouncycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  if (!LibOrgBouncycastleCryptoTlsCertChainType_isValidWithShort_(type)) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decode_error);
  }
  jint totalLength = LibOrgBouncycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
  if (totalLength < 1) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decode_error);
  }
  IOSByteArray *urlAndHashListData = LibOrgBouncycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(totalLength, input);
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(urlAndHashListData);
  JavaUtilVector *url_and_hash_list = new_JavaUtilVector_init();
  while ([buf available] > 0) {
    LibOrgBouncycastleCryptoTlsURLAndHash *url_and_hash = LibOrgBouncycastleCryptoTlsURLAndHash_parseWithLibOrgBouncycastleCryptoTlsTlsContext_withJavaIoInputStream_(context, buf);
    [url_and_hash_list addElementWithId:url_and_hash];
  }
  return new_LibOrgBouncycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(type, url_and_hash_list);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsCertificateURL)

@implementation LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16

- (instancetype)initWithLibOrgBouncycastleCryptoTlsCertificateURL:(LibOrgBouncycastleCryptoTlsCertificateURL *)outer$ {
  LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16_initWithLibOrgBouncycastleCryptoTlsCertificateURL_(self, outer$);
  return self;
}

- (void)encodeToWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  jint length = count_ - 2;
  LibOrgBouncycastleCryptoTlsTlsUtils_checkUint16WithInt_(length);
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(length, buf_, 0);
  [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:buf_ withInt:0 withInt:count_];
  buf_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoTlsCertificateURL:);
  methods[1].selector = @selector(encodeToWithJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "encodeTo", "LJavaIoOutputStream;", "LLibOrgBouncycastleCryptoTlsCertificateURL;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 = { "ListBuffer16", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x0, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16;
}

@end

void LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16_initWithLibOrgBouncycastleCryptoTlsCertificateURL_(LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 *self, LibOrgBouncycastleCryptoTlsCertificateURL *outer$) {
  JavaIoByteArrayOutputStream_init(self);
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(0, self);
}

LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 *new_LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16_initWithLibOrgBouncycastleCryptoTlsCertificateURL_(LibOrgBouncycastleCryptoTlsCertificateURL *outer$) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16, initWithLibOrgBouncycastleCryptoTlsCertificateURL_, outer$)
}

LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16 *create_LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16_initWithLibOrgBouncycastleCryptoTlsCertificateURL_(LibOrgBouncycastleCryptoTlsCertificateURL *outer$) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16, initWithLibOrgBouncycastleCryptoTlsCertificateURL_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsCertificateURL_ListBuffer16)
