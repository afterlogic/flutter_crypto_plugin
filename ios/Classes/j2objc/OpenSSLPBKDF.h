//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/OpenSSLPBKDF.java
//

#ifndef OpenSSLPBKDF_H
#define OpenSSLPBKDF_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AlgorithmProvider.h"
#include "BaseSecretKeyFactory.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@protocol JavaSecuritySpecKeySpec;
@protocol JavaxCryptoSecretKey;
@protocol LibOrgBouncycastleJcajceProviderConfigConfigurableProvider;

@interface LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF)

@interface LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF : LibOrgBouncycastleJcajceProviderSymmetricUtilBaseSecretKeyFactory

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Protected

- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF_init(LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF *new_LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF *create_LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_PBKDF)

@interface LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings : LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider

#pragma mark Public

- (instancetype __nonnull)init;

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricOpenSSLPBKDF_Mappings)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OpenSSLPBKDF_H
