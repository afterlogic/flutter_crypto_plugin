//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/elgamal/JcajceElgamalKeyFactorySpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "BCElGamalPrivateKey.h"
#include "BCElGamalPublicKey.h"
#include "BaseKeyFactorySpi.h"
#include "ElGamalPrivateKey.h"
#include "ElGamalPrivateKeySpec.h"
#include "ElGamalPublicKey.h"
#include "ElGamalPublicKeySpec.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JcajceElgamalKeyFactorySpi.h"
#include "OIWObjectIdentifiers.h"
#include "PKCSObjectIdentifiers.h"
#include "PrivateKeyInfo.h"
#include "SubjectPublicKeyInfo.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/spec/KeySpec.h"
#include "javax/crypto/interfaces/DHPrivateKey.h"
#include "javax/crypto/interfaces/DHPublicKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "javax/crypto/spec/DHPrivateKeySpec.h"
#include "javax/crypto/spec/DHPublicKeySpec.h"

@implementation LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecElGamalPrivateKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPrivateKey_initWithLibOrgBouncycastleJceSpecElGamalPrivateKeySpec_((LibOrgBouncycastleJceSpecElGamalPrivateKeySpec *) keySpec);
  }
  else if ([keySpec isKindOfClass:[JavaxCryptoSpecDHPrivateKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_((JavaxCryptoSpecDHPrivateKeySpec *) keySpec);
  }
  return [super engineGeneratePrivateWithJavaSecuritySpecKeySpec:keySpec];
}

- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecElGamalPublicKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceSpecElGamalPublicKeySpec_((LibOrgBouncycastleJceSpecElGamalPublicKeySpec *) keySpec);
  }
  else if ([keySpec isKindOfClass:[JavaxCryptoSpecDHPublicKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_((JavaxCryptoSpecDHPublicKeySpec *) keySpec);
  }
  return [super engineGeneratePublicWithJavaSecuritySpecKeySpec:keySpec];
}

- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)spec {
  if ([((IOSClass *) nil_chk(spec)) isAssignableFrom:JavaxCryptoSpecDHPrivateKeySpec_class_()] && [JavaxCryptoInterfacesDHPrivateKey_class_() isInstance:key]) {
    id<JavaxCryptoInterfacesDHPrivateKey> k = (id<JavaxCryptoInterfacesDHPrivateKey>) cast_check(key, JavaxCryptoInterfacesDHPrivateKey_class_());
    return new_JavaxCryptoSpecDHPrivateKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaxCryptoInterfacesDHPrivateKey>) nil_chk(k)) getX], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([k getParams])) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([k getParams])) getG]);
  }
  else if ([spec isAssignableFrom:JavaxCryptoSpecDHPublicKeySpec_class_()] && [JavaxCryptoInterfacesDHPublicKey_class_() isInstance:key]) {
    id<JavaxCryptoInterfacesDHPublicKey> k = (id<JavaxCryptoInterfacesDHPublicKey>) cast_check(key, JavaxCryptoInterfacesDHPublicKey_class_());
    return new_JavaxCryptoSpecDHPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaxCryptoInterfacesDHPublicKey>) nil_chk(k)) getY], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([k getParams])) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([k getParams])) getG]);
  }
  return [super engineGetKeySpecWithJavaSecurityKey:key withIOSClass:spec];
}

- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  if ([JavaxCryptoInterfacesDHPublicKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_((id<JavaxCryptoInterfacesDHPublicKey>) cast_check(key, JavaxCryptoInterfacesDHPublicKey_class_()));
  }
  else if ([JavaxCryptoInterfacesDHPrivateKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_((id<JavaxCryptoInterfacesDHPrivateKey>) cast_check(key, JavaxCryptoInterfacesDHPrivateKey_class_()));
  }
  else if ([LibOrgBouncycastleJceInterfacesElGamalPublicKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleJceInterfacesElGamalPublicKey_((id<LibOrgBouncycastleJceInterfacesElGamalPublicKey>) cast_check(key, LibOrgBouncycastleJceInterfacesElGamalPublicKey_class_()));
  }
  else if ([LibOrgBouncycastleJceInterfacesElGamalPrivateKey_class_() isInstance:key]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPrivateKey_initWithLibOrgBouncycastleJceInterfacesElGamalPrivateKey_((id<LibOrgBouncycastleJceInterfacesElGamalPrivateKey>) cast_check(key, LibOrgBouncycastleJceInterfacesElGamalPrivateKey_class_()));
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"key type unknown");
}

- (id<JavaSecurityPrivateKey>)generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)info {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(info)) getPrivateKeyAlgorithm])) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(info);
  }
  else if ([algOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, dhpublicnumber)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(info);
  }
  else if ([algOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(info);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

- (id<JavaSecurityPublicKey>)generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithm])) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(info);
  }
  else if ([algOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, dhpublicnumber)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(info);
  }
  else if ([algOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalBCElGamalPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(info);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x4, 3, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x4, 4, 5, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 12, 13, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGeneratePrivateWithJavaSecuritySpecKeySpec:);
  methods[2].selector = @selector(engineGeneratePublicWithJavaSecuritySpecKeySpec:);
  methods[3].selector = @selector(engineGetKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[4].selector = @selector(engineTranslateKeyWithJavaSecurityKey:);
  methods[5].selector = @selector(generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[6].selector = @selector(generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "engineGeneratePrivate", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;", "engineGeneratePublic", "engineGetKeySpec", "LJavaSecurityKey;LIOSClass;", "engineTranslateKey", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "generatePrivate", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "LJavaIoIOException;", "generatePublic", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi = { "JcajceElgamalKeyFactorySpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.elgamal", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi_init(LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseKeyFactorySpi_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi *new_LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi *create_LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricElgamalJcajceElgamalKeyFactorySpi)
