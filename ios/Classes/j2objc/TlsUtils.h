//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsUtils.java
//

#ifndef TlsUtils_H
#define TlsUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1X509X509Certificate;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsProtocolVersion;
@class LibOrgBouncycastleCryptoTlsSessionParameters;
@class LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;
@protocol LibOrgBouncycastleCryptoTlsTlsHandshakeHash;
@protocol LibOrgBouncycastleCryptoTlsTlsSession;
@protocol LibOrgBouncycastleCryptoTlsTlsSigner;
@protocol LibOrgBouncycastleCryptoTlsTlsSignerCredentials;

@interface LibOrgBouncycastleCryptoTlsTlsUtils : NSObject
@property (readonly, class) IOSByteArray *EMPTY_BYTES NS_SWIFT_NAME(EMPTY_BYTES);
@property (readonly, class) IOSShortArray *EMPTY_SHORTS NS_SWIFT_NAME(EMPTY_SHORTS);
@property (readonly, class) IOSIntArray *EMPTY_INTS NS_SWIFT_NAME(EMPTY_INTS);
@property (readonly, class) IOSLongArray *EMPTY_LONGS NS_SWIFT_NAME(EMPTY_LONGS);
@property (readonly, class) JavaLangInteger *EXT_signature_algorithms NS_SWIFT_NAME(EXT_signature_algorithms);
@property (readonly, class) IOSByteArray *SSL_CLIENT NS_SWIFT_NAME(SSL_CLIENT);
@property (readonly, class) IOSByteArray *SSL_SERVER NS_SWIFT_NAME(SSL_SERVER);
@property (readonly, class) IOSObjectArray *SSL3_CONST NS_SWIFT_NAME(SSL3_CONST);

+ (IOSByteArray *)EMPTY_BYTES;

+ (IOSShortArray *)EMPTY_SHORTS;

+ (IOSIntArray *)EMPTY_INTS;

+ (IOSLongArray *)EMPTY_LONGS;

+ (JavaLangInteger *)EXT_signature_algorithms;

+ (IOSByteArray *)SSL_CLIENT;

+ (IOSByteArray *)SSL_SERVER;

+ (IOSObjectArray *)SSL3_CONST;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)addSignatureAlgorithmsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                          withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

+ (void)checkUint16WithInt:(jint)i;

+ (void)checkUint16WithLong:(jlong)i;

+ (void)checkUint24WithInt:(jint)i;

+ (void)checkUint24WithLong:(jlong)i;

+ (void)checkUint32WithLong:(jlong)i;

+ (void)checkUint48WithLong:(jlong)i;

+ (void)checkUint64WithLong:(jlong)i;

+ (void)checkUint8WithInt:(jint)i;

+ (void)checkUint8WithLong:(jlong)i;

+ (void)checkUint8WithShort:(jshort)i;

+ (id<LibOrgBouncycastleCryptoDigest>)cloneHashWithShort:(jshort)hashAlgorithm
                      withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)hash_;

+ (id<LibOrgBouncycastleCryptoDigest>)clonePRFHashWithInt:(jint)prfAlgorithm
                       withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)hash_;

+ (id<LibOrgBouncycastleCryptoDigest>)createHashWithShort:(jshort)hashAlgorithm;

+ (id<LibOrgBouncycastleCryptoDigest>)createHashWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAndHashAlgorithm;

+ (id<LibOrgBouncycastleCryptoDigest>)createPRFHashWithInt:(jint)prfAlgorithm;

+ (IOSByteArray *)createSignatureAlgorithmsExtensionWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

+ (id<LibOrgBouncycastleCryptoTlsTlsSigner>)createTlsSignerWithShort:(jshort)clientCertificateType;

+ (IOSByteArray *)encodeOpaque8WithByteArray:(IOSByteArray *)buf;

+ (void)encodeSupportedSignatureAlgorithmsWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
                                                 withBoolean:(jboolean)allowAnonymous
                                      withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (IOSByteArray *)encodeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints;

+ (IOSByteArray *)encodeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints;

+ (JavaUtilVector *)getAllSignatureAlgorithms;

+ (jint)getCipherTypeWithInt:(jint)ciphersuite;

+ (JavaUtilVector *)getDefaultDSSSignatureAlgorithms;

+ (JavaUtilVector *)getDefaultECDSASignatureAlgorithms;

+ (JavaUtilVector *)getDefaultRSASignatureAlgorithms;

+ (JavaUtilVector *)getDefaultSupportedSignatureAlgorithms;

+ (jint)getEncryptionAlgorithmWithInt:(jint)ciphersuite;

+ (IOSByteArray *)getExtensionDataWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                    withJavaLangInteger:(JavaLangInteger *)extensionType;

+ (jshort)getHashAlgorithmForPRFAlgorithmWithInt:(jint)prfAlgorithm;

+ (jint)getKeyExchangeAlgorithmWithInt:(jint)ciphersuite;

+ (jint)getMACAlgorithmWithInt:(jint)ciphersuite;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)getMinimumVersionWithInt:(jint)ciphersuite;

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getOIDForHashAlgorithmWithShort:(jshort)hashAlgorithm;

+ (JavaUtilVector *)getSignatureAlgorithmsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)getSignatureAndHashAlgorithmWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                            withLibOrgBouncycastleCryptoTlsTlsSignerCredentials:(id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>)signerCredentials;

+ (JavaUtilVector *)getUsableSignatureAlgorithmsWithJavaUtilVector:(JavaUtilVector *)sigHashAlgs;

+ (jboolean)hasExpectedEmptyExtensionDataWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                           withJavaLangInteger:(JavaLangInteger *)extensionType
                                                     withShort:(jshort)alertDescription;

+ (jboolean)hasSigningCapabilityWithShort:(jshort)clientCertificateType;

+ (id<LibOrgBouncycastleCryptoTlsTlsSession>)importSessionWithByteArray:(IOSByteArray *)sessionID
                       withLibOrgBouncycastleCryptoTlsSessionParameters:(LibOrgBouncycastleCryptoTlsSessionParameters *)sessionParameters;

+ (jboolean)isAEADCipherSuiteWithInt:(jint)ciphersuite;

+ (jboolean)isBlockCipherSuiteWithInt:(jint)ciphersuite;

+ (jboolean)isSignatureAlgorithmsExtensionAllowedWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)clientVersion;

+ (jboolean)isSSLWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context;

+ (jboolean)isStreamCipherSuiteWithInt:(jint)ciphersuite;

+ (jboolean)isTLSv11WithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)version_;

+ (jboolean)isTLSv11WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context;

+ (jboolean)isTLSv12WithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)version_;

+ (jboolean)isTLSv12WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context;

+ (jboolean)isValidCipherSuiteForSignatureAlgorithmsWithInt:(jint)cipherSuite
                                         withJavaUtilVector:(JavaUtilVector *)sigAlgs;

+ (jboolean)isValidCipherSuiteForVersionWithInt:(jint)cipherSuite
 withLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)serverVersion;

+ (jboolean)isValidUint16WithInt:(jint)i;

+ (jboolean)isValidUint16WithLong:(jlong)i;

+ (jboolean)isValidUint24WithInt:(jint)i;

+ (jboolean)isValidUint24WithLong:(jlong)i;

+ (jboolean)isValidUint32WithLong:(jlong)i;

+ (jboolean)isValidUint48WithLong:(jlong)i;

+ (jboolean)isValidUint64WithLong:(jlong)i;

+ (jboolean)isValidUint8WithInt:(jint)i;

+ (jboolean)isValidUint8WithLong:(jlong)i;

+ (jboolean)isValidUint8WithShort:(jshort)i;

+ (JavaUtilVector *)parseSupportedSignatureAlgorithmsWithBoolean:(jboolean)allowAnonymous
                                           withJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)PRFWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                 withByteArray:(IOSByteArray *)secret
                                                  withNSString:(NSString *)asciiLabel
                                                 withByteArray:(IOSByteArray *)seed
                                                       withInt:(jint)size;

+ (IOSByteArray *)PRF_legacyWithByteArray:(IOSByteArray *)secret
                             withNSString:(NSString *)asciiLabel
                            withByteArray:(IOSByteArray *)seed
                                  withInt:(jint)size;

+ (IOSByteArray *)readAllOrNothingWithInt:(jint)length
                    withJavaIoInputStream:(JavaIoInputStream *)input;

+ (LibOrgBouncycastleAsn1ASN1Primitive *)readASN1ObjectWithByteArray:(IOSByteArray *)encoding;

+ (LibOrgBouncycastleAsn1ASN1Primitive *)readDERObjectWithByteArray:(IOSByteArray *)encoding;

+ (void)readFullyWithByteArray:(IOSByteArray *)buf
         withJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)readFullyWithInt:(jint)length
             withJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)readOpaque16WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)readOpaque24WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)readOpaque8WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (JavaUtilVector *)readSignatureAlgorithmsExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jint)readUint16WithByteArray:(IOSByteArray *)buf
                        withInt:(jint)offset;

+ (jint)readUint16WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSIntArray *)readUint16ArrayWithInt:(jint)count
                  withJavaIoInputStream:(JavaIoInputStream *)input;

+ (jint)readUint24WithByteArray:(IOSByteArray *)buf
                        withInt:(jint)offset;

+ (jint)readUint24WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (jlong)readUint32WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset;

+ (jlong)readUint32WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (jlong)readUint48WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset;

+ (jlong)readUint48WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (jshort)readUint8WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset;

+ (jshort)readUint8WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSShortArray *)readUint8ArrayWithInt:(jint)count
                   withJavaIoInputStream:(JavaIoInputStream *)input;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)readVersionWithByteArray:(IOSByteArray *)buf
                                                                 withInt:(jint)offset;

+ (LibOrgBouncycastleCryptoTlsProtocolVersion *)readVersionWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (jint)readVersionRawWithByteArray:(IOSByteArray *)buf
                            withInt:(jint)offset;

+ (jint)readVersionRawWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (void)verifySupportedSignatureAlgorithmWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
   withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAlgorithm;

+ (void)writeGMTUnixTimeWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)offset;

+ (void)writeOpaque16WithByteArray:(IOSByteArray *)buf
            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeOpaque24WithByteArray:(IOSByteArray *)buf
            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeOpaque8WithByteArray:(IOSByteArray *)buf
           withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint16WithInt:(jint)i
             withByteArray:(IOSByteArray *)buf
                   withInt:(jint)offset;

+ (void)writeUint16WithInt:(jint)i
    withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint16ArrayWithIntArray:(IOSIntArray *)uints
                       withByteArray:(IOSByteArray *)buf
                             withInt:(jint)offset;

+ (void)writeUint16ArrayWithIntArray:(IOSIntArray *)uints
              withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints
                                       withByteArray:(IOSByteArray *)buf
                                             withInt:(jint)offset;

+ (void)writeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints
                              withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint24WithInt:(jint)i
             withByteArray:(IOSByteArray *)buf
                   withInt:(jint)offset;

+ (void)writeUint24WithInt:(jint)i
    withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint32WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset;

+ (void)writeUint32WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint48WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset;

+ (void)writeUint48WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint64WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset;

+ (void)writeUint64WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint8WithInt:(jint)i
            withByteArray:(IOSByteArray *)buf
                  withInt:(jint)offset;

+ (void)writeUint8WithInt:(jint)i
   withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint8WithShort:(jshort)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset;

+ (void)writeUint8WithShort:(jshort)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint8ArrayWithShortArray:(IOSShortArray *)uints
                        withByteArray:(IOSByteArray *)buf
                              withInt:(jint)offset;

+ (void)writeUint8ArrayWithShortArray:(IOSShortArray *)uints
               withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints
                                       withByteArray:(IOSByteArray *)buf
                                             withInt:(jint)offset;

+ (void)writeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints
                              withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)version_
                                                     withByteArray:(IOSByteArray *)buf
                                                           withInt:(jint)offset;

+ (void)writeVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)version_
                                            withJavaIoOutputStream:(JavaIoOutputStream *)output;

#pragma mark Package-Private

+ (IOSByteArray *)calculateKeyBlockWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                     withInt:(jint)size;

+ (IOSByteArray *)calculateKeyBlock_SSLWithByteArray:(IOSByteArray *)master_secret
                                       withByteArray:(IOSByteArray *)random
                                             withInt:(jint)size;

+ (IOSByteArray *)calculateMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                   withByteArray:(IOSByteArray *)pre_master_secret;

+ (IOSByteArray *)calculateMasterSecret_SSLWithByteArray:(IOSByteArray *)pre_master_secret
                                           withByteArray:(IOSByteArray *)random;

+ (IOSByteArray *)calculateVerifyDataWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                                                  withNSString:(NSString *)asciiLabel
                                                                 withByteArray:(IOSByteArray *)handshakeHash;

+ (IOSByteArray *)concatWithByteArray:(IOSByteArray *)a
                        withByteArray:(IOSByteArray *)b;

+ (jshort)getClientCertificateTypeWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)clientCertificate
                                  withLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)serverCertificate;

+ (void)hmac_hashWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                      withByteArray:(IOSByteArray *)secret
                                      withByteArray:(IOSByteArray *)seed
                                      withByteArray:(IOSByteArray *)outArg;

+ (IOSByteArray *)PRF_legacyWithByteArray:(IOSByteArray *)secret
                            withByteArray:(IOSByteArray *)label
                            withByteArray:(IOSByteArray *)labelSeed
                                  withInt:(jint)size;

+ (void)trackHashAlgorithmsWithLibOrgBouncycastleCryptoTlsTlsHandshakeHash:(id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)handshakeHash
                                                        withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

+ (void)validateKeyUsageWithLibOrgBouncycastleAsn1X509X509Certificate:(LibOrgBouncycastleAsn1X509X509Certificate *)c
                                                              withInt:(jint)keyUsageBits;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsUtils)

inline IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_get_EMPTY_BYTES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_EMPTY_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsUtils, EMPTY_BYTES, IOSByteArray *)

inline IOSShortArray *LibOrgBouncycastleCryptoTlsTlsUtils_get_EMPTY_SHORTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleCryptoTlsTlsUtils_EMPTY_SHORTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsUtils, EMPTY_SHORTS, IOSShortArray *)

inline IOSIntArray *LibOrgBouncycastleCryptoTlsTlsUtils_get_EMPTY_INTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleCryptoTlsTlsUtils_EMPTY_INTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsUtils, EMPTY_INTS, IOSIntArray *)

inline IOSLongArray *LibOrgBouncycastleCryptoTlsTlsUtils_get_EMPTY_LONGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastleCryptoTlsTlsUtils_EMPTY_LONGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsUtils, EMPTY_LONGS, IOSLongArray *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsUtils_get_EXT_signature_algorithms(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsUtils_EXT_signature_algorithms;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsUtils, EXT_signature_algorithms, JavaLangInteger *)

inline IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_get_SSL_CLIENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_SSL_CLIENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsUtils, SSL_CLIENT, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_get_SSL_SERVER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_SSL_SERVER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsUtils, SSL_SERVER, IOSByteArray *)

inline IOSObjectArray *LibOrgBouncycastleCryptoTlsTlsUtils_get_SSL3_CONST(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleCryptoTlsTlsUtils_SSL3_CONST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsUtils, SSL3_CONST, IOSObjectArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_init(LibOrgBouncycastleCryptoTlsTlsUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsUtils *new_LibOrgBouncycastleCryptoTlsTlsUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsUtils *create_LibOrgBouncycastleCryptoTlsTlsUtils_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint8WithShort_(jshort i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint8WithInt_(jint i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint8WithLong_(jlong i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint16WithInt_(jint i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint16WithLong_(jlong i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint24WithInt_(jint i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint24WithLong_(jlong i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint32WithLong_(jlong i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint48WithLong_(jlong i);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_checkUint64WithLong_(jlong i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint8WithShort_(jshort i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint8WithInt_(jint i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint8WithLong_(jlong i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint16WithInt_(jint i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint16WithLong_(jlong i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint24WithInt_(jint i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint24WithLong_(jlong i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint32WithLong_(jlong i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint48WithLong_(jlong i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidUint64WithLong_(jlong i);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isSSLWithLibOrgBouncycastleCryptoTlsTlsContext_(id<LibOrgBouncycastleCryptoTlsTlsContext> context);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isTLSv11WithLibOrgBouncycastleCryptoTlsProtocolVersion_(LibOrgBouncycastleCryptoTlsProtocolVersion *version_);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isTLSv11WithLibOrgBouncycastleCryptoTlsTlsContext_(id<LibOrgBouncycastleCryptoTlsTlsContext> context);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isTLSv12WithLibOrgBouncycastleCryptoTlsProtocolVersion_(LibOrgBouncycastleCryptoTlsProtocolVersion *version_);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isTLSv12WithLibOrgBouncycastleCryptoTlsTlsContext_(id<LibOrgBouncycastleCryptoTlsTlsContext> context);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(jshort i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(jshort i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint32WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint32WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint48WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint48WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint64WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint64WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque24WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withJavaIoOutputStream_(IOSShortArray *uints, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withByteArray_withInt_(IOSShortArray *uints, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withJavaIoOutputStream_(IOSShortArray *uints, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withByteArray_withInt_(IOSShortArray *uints, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withJavaIoOutputStream_(IOSIntArray *uints, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withByteArray_withInt_(IOSIntArray *uints, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withJavaIoOutputStream_(IOSIntArray *uints, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withByteArray_withInt_(IOSIntArray *uints, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_encodeOpaque8WithByteArray_(IOSByteArray *buf);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_encodeUint8ArrayWithUint8LengthWithShortArray_(IOSShortArray *uints);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_encodeUint16ArrayWithUint16LengthWithIntArray_(IOSIntArray *uints);

FOUNDATION_EXPORT jshort LibOrgBouncycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jshort LibOrgBouncycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_readUint24WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jlong LibOrgBouncycastleCryptoTlsTlsUtils_readUint32WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jlong LibOrgBouncycastleCryptoTlsTlsUtils_readUint32WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jlong LibOrgBouncycastleCryptoTlsTlsUtils_readUint48WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jlong LibOrgBouncycastleCryptoTlsTlsUtils_readUint48WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_readAllOrNothingWithInt_withJavaIoInputStream_(jint length, JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(jint length, JavaIoInputStream *input);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_readFullyWithByteArray_withJavaIoInputStream_(IOSByteArray *buf, JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque24WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleCryptoTlsTlsUtils_readUint8ArrayWithInt_withJavaIoInputStream_(jint count, JavaIoInputStream *input);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleCryptoTlsTlsUtils_readUint16ArrayWithInt_withJavaIoInputStream_(jint count, JavaIoInputStream *input);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsTlsUtils_readVersionWithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsTlsUtils_readVersionWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_readVersionRawWithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_readVersionRawWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleCryptoTlsTlsUtils_readASN1ObjectWithByteArray_(IOSByteArray *encoding);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleCryptoTlsTlsUtils_readDERObjectWithByteArray_(IOSByteArray *encoding);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeGMTUnixTimeWithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsProtocolVersion *version_, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_writeVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion_withByteArray_withInt_(LibOrgBouncycastleCryptoTlsProtocolVersion *version_, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_getAllSignatureAlgorithms(void);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_getDefaultDSSSignatureAlgorithms(void);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_getDefaultECDSASignatureAlgorithms(void);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_getDefaultRSASignatureAlgorithms(void);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_getDefaultSupportedSignatureAlgorithms(void);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *LibOrgBouncycastleCryptoTlsTlsUtils_getSignatureAndHashAlgorithmWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoTlsTlsSignerCredentials_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials> signerCredentials);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(JavaUtilHashtable *extensions, JavaLangInteger *extensionType);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(JavaUtilHashtable *extensions, JavaLangInteger *extensionType, jshort alertDescription);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoTlsTlsSession> LibOrgBouncycastleCryptoTlsTlsUtils_importSessionWithByteArray_withLibOrgBouncycastleCryptoTlsSessionParameters_(IOSByteArray *sessionID, LibOrgBouncycastleCryptoTlsSessionParameters *sessionParameters);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isSignatureAlgorithmsExtensionAllowedWithLibOrgBouncycastleCryptoTlsProtocolVersion_(LibOrgBouncycastleCryptoTlsProtocolVersion *clientVersion);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_addSignatureAlgorithmsExtensionWithJavaUtilHashtable_withJavaUtilVector_(JavaUtilHashtable *extensions, JavaUtilVector *supportedSignatureAlgorithms);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_getSignatureAlgorithmsExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_createSignatureAlgorithmsExtensionWithJavaUtilVector_(JavaUtilVector *supportedSignatureAlgorithms);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_readSignatureAlgorithmsExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_encodeSupportedSignatureAlgorithmsWithJavaUtilVector_withBoolean_withJavaIoOutputStream_(JavaUtilVector *supportedSignatureAlgorithms, jboolean allowAnonymous, JavaIoOutputStream *output);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_parseSupportedSignatureAlgorithmsWithBoolean_withJavaIoInputStream_(jboolean allowAnonymous, JavaIoInputStream *input);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_verifySupportedSignatureAlgorithmWithJavaUtilVector_withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_(JavaUtilVector *supportedSignatureAlgorithms, LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *signatureAlgorithm);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_PRFWithLibOrgBouncycastleCryptoTlsTlsContext_withByteArray_withNSString_withByteArray_withInt_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, IOSByteArray *secret, NSString *asciiLabel, IOSByteArray *seed, jint size);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withNSString_withByteArray_withInt_(IOSByteArray *secret, NSString *asciiLabel, IOSByteArray *seed, jint size);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withByteArray_withByteArray_withInt_(IOSByteArray *secret, IOSByteArray *label, IOSByteArray *labelSeed, jint size);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_concatWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_hmac_hashWithLibOrgBouncycastleCryptoDigest_withByteArray_withByteArray_withByteArray_(id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *secret, IOSByteArray *seed, IOSByteArray *outArg);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_validateKeyUsageWithLibOrgBouncycastleAsn1X509X509Certificate_withInt_(LibOrgBouncycastleAsn1X509X509Certificate *c, jint keyUsageBits);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_calculateKeyBlockWithLibOrgBouncycastleCryptoTlsTlsContext_withInt_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, jint size);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_calculateKeyBlock_SSLWithByteArray_withByteArray_withInt_(IOSByteArray *master_secret, IOSByteArray *random, jint size);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_calculateMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, IOSByteArray *pre_master_secret);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_calculateMasterSecret_SSLWithByteArray_withByteArray_(IOSByteArray *pre_master_secret, IOSByteArray *random);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsUtils_calculateVerifyDataWithLibOrgBouncycastleCryptoTlsTlsContext_withNSString_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, NSString *asciiLabel, IOSByteArray *handshakeHash);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_(jshort hashAlgorithm);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoTlsTlsUtils_cloneHashWithShort_withLibOrgBouncycastleCryptoDigest_(jshort hashAlgorithm, id<LibOrgBouncycastleCryptoDigest> hash_);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoTlsTlsUtils_createPRFHashWithInt_(jint prfAlgorithm);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleCryptoTlsTlsUtils_clonePRFHashWithInt_withLibOrgBouncycastleCryptoDigest_(jint prfAlgorithm, id<LibOrgBouncycastleCryptoDigest> hash_);

FOUNDATION_EXPORT jshort LibOrgBouncycastleCryptoTlsTlsUtils_getHashAlgorithmForPRFAlgorithmWithInt_(jint prfAlgorithm);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleCryptoTlsTlsUtils_getOIDForHashAlgorithmWithShort_(jshort hashAlgorithm);

FOUNDATION_EXPORT jshort LibOrgBouncycastleCryptoTlsTlsUtils_getClientCertificateTypeWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoTlsCertificate_(LibOrgBouncycastleCryptoTlsCertificate *clientCertificate, LibOrgBouncycastleCryptoTlsCertificate *serverCertificate);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsUtils_trackHashAlgorithmsWithLibOrgBouncycastleCryptoTlsTlsHandshakeHash_withJavaUtilVector_(id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash> handshakeHash, JavaUtilVector *supportedSignatureAlgorithms);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_hasSigningCapabilityWithShort_(jshort clientCertificateType);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoTlsTlsSigner> LibOrgBouncycastleCryptoTlsTlsUtils_createTlsSignerWithShort_(jshort clientCertificateType);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_getCipherTypeWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_getEncryptionAlgorithmWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoTlsTlsUtils_getMACAlgorithmWithInt_(jint ciphersuite);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsProtocolVersion *LibOrgBouncycastleCryptoTlsTlsUtils_getMinimumVersionWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isAEADCipherSuiteWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isBlockCipherSuiteWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isStreamCipherSuiteWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidCipherSuiteForSignatureAlgorithmsWithInt_withJavaUtilVector_(jint cipherSuite, JavaUtilVector *sigAlgs);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsUtils_isValidCipherSuiteForVersionWithInt_withLibOrgBouncycastleCryptoTlsProtocolVersion_(jint cipherSuite, LibOrgBouncycastleCryptoTlsProtocolVersion *serverVersion);

FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsTlsUtils_getUsableSignatureAlgorithmsWithJavaUtilVector_(JavaUtilVector *sigHashAlgs);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsUtils_H
