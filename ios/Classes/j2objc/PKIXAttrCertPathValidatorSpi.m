//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/PKIXAttrCertPathValidatorSpi.java
//

#include "AnnotatedException.h"
#include "BCJcaJceHelper.h"
#include "ExtCertPathValidatorException.h"
#include "ExtendedPKIXParameters.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "JceProviderCertPathValidatorUtilities.h"
#include "PKIXAttrCertPathValidatorSpi.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedParameters.h"
#include "RFC3281CertPathUtilities.h"
#include "Selector.h"
#include "X509AttributeCertStoreSelector.h"
#include "X509AttributeCertificate.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathParameters.h"
#include "java/security/cert/CertPathValidatorResult.h"
#include "java/security/cert/CertPathValidatorSpi.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/PKIXParameters.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)

@implementation LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaSecurityCertCertPathValidatorResult>)engineValidateWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                   withJavaSecurityCertCertPathParameters:(id<JavaSecurityCertCertPathParameters>)params {
  if (!([params isKindOfClass:[LibOrgBouncycastleX509ExtendedPKIXParameters class]] || [params isKindOfClass:[LibOrgBouncycastleJcajcePKIXExtendedParameters class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$", @"Parameters must be a ", [LibOrgBouncycastleX509ExtendedPKIXParameters_class_() getName], @" instance."));
  }
  id<JavaUtilSet> attrCertCheckers = new_JavaUtilHashSet_init();
  id<JavaUtilSet> prohibitedACAttrbiutes = new_JavaUtilHashSet_init();
  id<JavaUtilSet> necessaryACAttributes = new_JavaUtilHashSet_init();
  id<JavaUtilSet> trustedACIssuers = new_JavaUtilHashSet_init();
  LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX;
  if ([params isKindOfClass:[JavaSecurityCertPKIXParameters class]]) {
    LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *paramsPKIXBldr = new_LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder_initWithJavaSecurityCertPKIXParameters_((JavaSecurityCertPKIXParameters *) params);
    if ([params isKindOfClass:[LibOrgBouncycastleX509ExtendedPKIXParameters class]]) {
      LibOrgBouncycastleX509ExtendedPKIXParameters *extPKIX = (LibOrgBouncycastleX509ExtendedPKIXParameters *) params;
      (void) [paramsPKIXBldr setUseDeltasEnabledWithBoolean:[((LibOrgBouncycastleX509ExtendedPKIXParameters *) nil_chk(extPKIX)) isUseDeltasEnabled]];
      (void) [paramsPKIXBldr setValidityModelWithInt:[extPKIX getValidityModel]];
      attrCertCheckers = [extPKIX getAttrCertCheckers];
      prohibitedACAttrbiutes = [extPKIX getProhibitedACAttributes];
      necessaryACAttributes = [extPKIX getNecessaryACAttributes];
    }
    paramsPKIX = [paramsPKIXBldr build];
  }
  else {
    paramsPKIX = (LibOrgBouncycastleJcajcePKIXExtendedParameters *) cast_chk(params, [LibOrgBouncycastleJcajcePKIXExtendedParameters class]);
  }
  id<LibOrgBouncycastleUtilSelector> certSelect = [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getTargetConstraints];
  if (!([certSelect isKindOfClass:[LibOrgBouncycastleX509X509AttributeCertStoreSelector class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$$$", @"TargetConstraints must be an instance of ", [LibOrgBouncycastleX509X509AttributeCertStoreSelector_class_() getName], @" for ", [[self java_getClass] getName], @" class."));
  }
  id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert = [((LibOrgBouncycastleX509X509AttributeCertStoreSelector *) nil_chk(((LibOrgBouncycastleX509X509AttributeCertStoreSelector *) cast_chk(certSelect, [LibOrgBouncycastleX509X509AttributeCertStoreSelector class])))) getAttributeCert];
  JavaSecurityCertCertPath *holderCertPath = LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert1WithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(attrCert, paramsPKIX);
  id<JavaSecurityCertCertPathValidatorResult> result = LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert2WithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(certPath, paramsPKIX);
  JavaSecurityCertX509Certificate *issuerCert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates])) getWithInt:0], [JavaSecurityCertX509Certificate class]);
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert3WithJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(issuerCert, paramsPKIX);
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert4WithJavaSecurityCertX509Certificate_withJavaUtilSet_(issuerCert, trustedACIssuers);
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert5WithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(attrCert, paramsPKIX);
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert7WithLibOrgBouncycastleX509X509AttributeCertificate_withJavaSecurityCertCertPath_withJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilSet_(attrCert, certPath, holderCertPath, paramsPKIX, attrCertCheckers);
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_additionalChecksWithLibOrgBouncycastleX509X509AttributeCertificate_withJavaUtilSet_withJavaUtilSet_(attrCert, prohibitedACAttrbiutes, necessaryACAttributes);
  JavaUtilDate *date = nil;
  @try {
    date = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(paramsPKIX, nil, -1);
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Could not get validity date from attribute certificate.", e);
  }
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_checkCRLsWithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(attrCert, paramsPKIX, issuerCert, date, [certPath getCertificates], helper_);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathValidatorResult;", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineValidateWithJavaSecurityCertCertPath:withJavaSecurityCertCertPathParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineValidate", "LJavaSecurityCertCertPath;LJavaSecurityCertCertPathParameters;", "LJavaSecurityCertCertPathValidatorException;LJavaSecurityInvalidAlgorithmParameterException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi = { "PKIXAttrCertPathValidatorSpi", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi;
}

@end

void LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi_init(LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi *self) {
  JavaSecurityCertCertPathValidatorSpi_init(self);
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
}

LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi *new_LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi, init)
}

LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi *create_LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderPKIXAttrCertPathValidatorSpi)
