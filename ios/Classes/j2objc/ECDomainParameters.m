//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/ECDomainParameters.java
//

#include "Arrays.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECPoint.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoParamsECDomainParameters () {
 @public
  LibOrgBouncycastleMathEcECCurve *curve_;
  IOSByteArray *seed_;
  LibOrgBouncycastleMathEcECPoint *G_;
  JavaMathBigInteger *n_;
  JavaMathBigInteger *h_;
  JavaMathBigInteger *hInv_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsECDomainParameters, curve_, LibOrgBouncycastleMathEcECCurve *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsECDomainParameters, seed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsECDomainParameters, G_, LibOrgBouncycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsECDomainParameters, n_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsECDomainParameters, h_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsECDomainParameters, hInv_, JavaMathBigInteger *)

@implementation LibOrgBouncycastleCryptoParamsECDomainParameters

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)G
                                 withJavaMathBigInteger:(JavaMathBigInteger *)n {
  LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(self, curve, G, n);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)G
                                 withJavaMathBigInteger:(JavaMathBigInteger *)n
                                 withJavaMathBigInteger:(JavaMathBigInteger *)h {
  LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(self, curve, G, n, h);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)G
                                 withJavaMathBigInteger:(JavaMathBigInteger *)n
                                 withJavaMathBigInteger:(JavaMathBigInteger *)h
                                          withByteArray:(IOSByteArray *)seed {
  LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(self, curve, G, n, h, seed);
  return self;
}

- (LibOrgBouncycastleMathEcECCurve *)getCurve {
  return curve_;
}

- (LibOrgBouncycastleMathEcECPoint *)getG {
  return G_;
}

- (JavaMathBigInteger *)getN {
  return n_;
}

- (JavaMathBigInteger *)getH {
  return h_;
}

- (JavaMathBigInteger *)getHInv {
  @synchronized(self) {
    if (hInv_ == nil) {
      hInv_ = [((JavaMathBigInteger *) nil_chk(h_)) modInverseWithJavaMathBigInteger:n_];
    }
    return hInv_;
  }
}

- (IOSByteArray *)getSeed {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(seed_);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (([obj isKindOfClass:[LibOrgBouncycastleCryptoParamsECDomainParameters class]])) {
    LibOrgBouncycastleCryptoParamsECDomainParameters *other = (LibOrgBouncycastleCryptoParamsECDomainParameters *) cast_chk(obj, [LibOrgBouncycastleCryptoParamsECDomainParameters class]);
    return [((LibOrgBouncycastleMathEcECCurve *) nil_chk(self->curve_)) equalsWithLibOrgBouncycastleMathEcECCurve:((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(other))->curve_] && [((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->G_)) equalsWithLibOrgBouncycastleMathEcECPoint:other->G_] && [((JavaMathBigInteger *) nil_chk(self->n_)) isEqual:other->n_] && [((JavaMathBigInteger *) nil_chk(self->h_)) isEqual:other->h_];
  }
  return false;
}

- (NSUInteger)hash {
  jint hc = ((jint) [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve_)) hash]);
  hc *= 37;
  hc ^= ((jint) [((LibOrgBouncycastleMathEcECPoint *) nil_chk(G_)) hash]);
  hc *= 37;
  hc ^= ((jint) [((JavaMathBigInteger *) nil_chk(n_)) hash]);
  hc *= 37;
  hc ^= ((jint) [((JavaMathBigInteger *) nil_chk(h_)) hash]);
  return hc;
}

+ (LibOrgBouncycastleMathEcECPoint *)validateWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c
                                             withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)q {
  return LibOrgBouncycastleCryptoParamsECDomainParameters_validateWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(c, q);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x8, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withJavaMathBigInteger:withByteArray:);
  methods[3].selector = @selector(getCurve);
  methods[4].selector = @selector(getG);
  methods[5].selector = @selector(getN);
  methods[6].selector = @selector(getH);
  methods[7].selector = @selector(getHInv);
  methods[8].selector = @selector(getSeed);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(validateWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curve_", "LLibOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "G_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "h_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hInv_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LJavaMathBigInteger;", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LJavaMathBigInteger;[B", "equals", "LNSObject;", "hashCode", "validate", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsECDomainParameters = { "ECDomainParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 12, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsECDomainParameters;
}

@end

void LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleCryptoParamsECDomainParameters *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(self, curve, G, n, JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE), nil);
}

LibOrgBouncycastleCryptoParamsECDomainParameters *new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsECDomainParameters, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_, curve, G, n)
}

LibOrgBouncycastleCryptoParamsECDomainParameters *create_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsECDomainParameters, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_, curve, G, n)
}

void LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleCryptoParamsECDomainParameters *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(self, curve, G, n, h, nil);
}

LibOrgBouncycastleCryptoParamsECDomainParameters *new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsECDomainParameters, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_, curve, G, n, h)
}

LibOrgBouncycastleCryptoParamsECDomainParameters *create_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsECDomainParameters, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_, curve, G, n, h)
}

void LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(LibOrgBouncycastleCryptoParamsECDomainParameters *self, LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  NSObject_init(self);
  self->hInv_ = nil;
  if (curve == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"curve");
  }
  if (n == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"n");
  }
  self->curve_ = curve;
  self->G_ = LibOrgBouncycastleCryptoParamsECDomainParameters_validateWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(curve, G);
  self->n_ = n;
  self->h_ = h;
  self->seed_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(seed);
}

LibOrgBouncycastleCryptoParamsECDomainParameters *new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsECDomainParameters, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_, curve, G, n, h, seed)
}

LibOrgBouncycastleCryptoParamsECDomainParameters *create_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsECDomainParameters, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_, curve, G, n, h, seed)
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleCryptoParamsECDomainParameters_validateWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *c, LibOrgBouncycastleMathEcECPoint *q) {
  LibOrgBouncycastleCryptoParamsECDomainParameters_initialize();
  if (q == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point has null value");
  }
  q = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(LibOrgBouncycastleMathEcECAlgorithms_importPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(c, q))) normalize];
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(q)) isInfinity]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point at infinity");
  }
  if (![q isValid]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point not on curve");
  }
  return q;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsECDomainParameters)
