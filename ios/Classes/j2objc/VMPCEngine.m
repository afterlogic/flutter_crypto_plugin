//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/VMPCEngine.java
//

#include "CipherParameters.h"
#include "DataLengthException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OutputLengthException.h"
#include "ParametersWithIV.h"
#include "VMPCEngine.h"
#include "java/lang/IllegalArgumentException.h"

@implementation LibOrgBouncycastleCryptoEnginesVMPCEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesVMPCEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"VMPC";
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"VMPC init parameters must include an IV");
  }
  LibOrgBouncycastleCryptoParamsParametersWithIV *ivParams = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(params, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
  if (!([[((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParams)) getParameters] isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"VMPC init parameters must include a key");
  }
  LibOrgBouncycastleCryptoParamsKeyParameter *key = (LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([ivParams getParameters], [LibOrgBouncycastleCryptoParamsKeyParameter class]);
  self->workingIV_ = [ivParams getIV];
  if (workingIV_ == nil || workingIV_->size_ < 1 || workingIV_->size_ > 768) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"VMPC requires 1 to 768 bytes of IV");
  }
  self->workingKey_ = [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(key)) getKey];
  [self initKeyWithByteArray:self->workingKey_ withByteArray:self->workingIV_];
}

- (void)initKeyWithByteArray:(IOSByteArray *)keyBytes
               withByteArray:(IOSByteArray *)ivBytes {
  s_ = 0;
  P_ = [IOSByteArray newArrayWithLength:256];
  for (jint i = 0; i < 256; i++) {
    *IOSByteArray_GetRef(P_, i) = (jbyte) i;
  }
  for (jint m = 0; m < 768; m++) {
    s_ = IOSByteArray_Get(P_, (s_ + IOSByteArray_Get(P_, m & (jint) 0xff) + IOSByteArray_Get(keyBytes, m % ((IOSByteArray *) nil_chk(keyBytes))->size_)) & (jint) 0xff);
    jbyte temp = IOSByteArray_Get(P_, m & (jint) 0xff);
    *IOSByteArray_GetRef(P_, m & (jint) 0xff) = IOSByteArray_Get(P_, s_ & (jint) 0xff);
    *IOSByteArray_GetRef(P_, s_ & (jint) 0xff) = temp;
  }
  for (jint m = 0; m < 768; m++) {
    s_ = IOSByteArray_Get(P_, (s_ + IOSByteArray_Get(P_, m & (jint) 0xff) + IOSByteArray_Get(ivBytes, m % ((IOSByteArray *) nil_chk(ivBytes))->size_)) & (jint) 0xff);
    jbyte temp = IOSByteArray_Get(P_, m & (jint) 0xff);
    *IOSByteArray_GetRef(P_, m & (jint) 0xff) = IOSByteArray_Get(P_, s_ & (jint) 0xff);
    *IOSByteArray_GetRef(P_, s_ & (jint) 0xff) = temp;
  }
  n_ = 0;
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if ((inOff + len) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + len) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  for (jint i = 0; i < len; i++) {
    s_ = IOSByteArray_Get(P_, (s_ + IOSByteArray_Get(nil_chk(P_), n_ & (jint) 0xff)) & (jint) 0xff);
    jbyte z = IOSByteArray_Get(P_, (IOSByteArray_Get(P_, (IOSByteArray_Get(P_, s_ & (jint) 0xff)) & (jint) 0xff) + 1) & (jint) 0xff);
    jbyte temp = IOSByteArray_Get(P_, n_ & (jint) 0xff);
    *IOSByteArray_GetRef(P_, n_ & (jint) 0xff) = IOSByteArray_Get(P_, s_ & (jint) 0xff);
    *IOSByteArray_GetRef(P_, s_ & (jint) 0xff) = temp;
    n_ = (jbyte) ((n_ + 1) & (jint) 0xff);
    *IOSByteArray_GetRef(outArg, i + outOff) = (jbyte) (IOSByteArray_Get(inArg, i + inOff) ^ z);
  }
  return len;
}

- (void)reset {
  [self initKeyWithByteArray:self->workingKey_ withByteArray:self->workingIV_];
}

- (jbyte)returnByteWithByte:(jbyte)inArg {
  s_ = IOSByteArray_Get(P_, (s_ + IOSByteArray_Get(nil_chk(P_), n_ & (jint) 0xff)) & (jint) 0xff);
  jbyte z = IOSByteArray_Get(P_, (IOSByteArray_Get(P_, (IOSByteArray_Get(P_, s_ & (jint) 0xff)) & (jint) 0xff) + 1) & (jint) 0xff);
  jbyte temp = IOSByteArray_Get(P_, n_ & (jint) 0xff);
  *IOSByteArray_GetRef(P_, n_ & (jint) 0xff) = IOSByteArray_Get(P_, s_ & (jint) 0xff);
  *IOSByteArray_GetRef(P_, s_ & (jint) 0xff) = temp;
  n_ = (jbyte) ((n_ + 1) & (jint) 0xff);
  return (jbyte) (inArg ^ z);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(initKeyWithByteArray:withByteArray:);
  methods[4].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(returnByteWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "n_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "P_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "s_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "workingIV_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "workingKey_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "initKey", "[B[B", "processBytes", "[BII[BI", "returnByte", "B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesVMPCEngine = { "VMPCEngine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesVMPCEngine;
}

@end

void LibOrgBouncycastleCryptoEnginesVMPCEngine_init(LibOrgBouncycastleCryptoEnginesVMPCEngine *self) {
  NSObject_init(self);
  self->n_ = 0;
  self->P_ = nil;
  self->s_ = 0;
}

LibOrgBouncycastleCryptoEnginesVMPCEngine *new_LibOrgBouncycastleCryptoEnginesVMPCEngine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesVMPCEngine, init)
}

LibOrgBouncycastleCryptoEnginesVMPCEngine *create_LibOrgBouncycastleCryptoEnginesVMPCEngine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesVMPCEngine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesVMPCEngine)
