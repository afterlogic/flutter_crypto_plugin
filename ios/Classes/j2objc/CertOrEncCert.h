//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/CertOrEncCert.java
//

#ifndef CertOrEncCert_H
#define CertOrEncCert_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CmpCMPCertificate;
@class LibOrgBouncycastleAsn1CrmfEncryptedValue;

@interface LibOrgBouncycastleAsn1CmpCertOrEncCert : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmpCMPCertificate:(LibOrgBouncycastleAsn1CmpCMPCertificate *)certificate;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CrmfEncryptedValue:(LibOrgBouncycastleAsn1CrmfEncryptedValue *)encryptedCert;

- (LibOrgBouncycastleAsn1CmpCMPCertificate *)getCertificate;

- (LibOrgBouncycastleAsn1CrmfEncryptedValue *)getEncryptedCert;

+ (LibOrgBouncycastleAsn1CmpCertOrEncCert *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmpCertOrEncCert)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertOrEncCert *LibOrgBouncycastleAsn1CmpCertOrEncCert_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpCertOrEncCert_initWithLibOrgBouncycastleAsn1CmpCMPCertificate_(LibOrgBouncycastleAsn1CmpCertOrEncCert *self, LibOrgBouncycastleAsn1CmpCMPCertificate *certificate);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertOrEncCert *new_LibOrgBouncycastleAsn1CmpCertOrEncCert_initWithLibOrgBouncycastleAsn1CmpCMPCertificate_(LibOrgBouncycastleAsn1CmpCMPCertificate *certificate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertOrEncCert *create_LibOrgBouncycastleAsn1CmpCertOrEncCert_initWithLibOrgBouncycastleAsn1CmpCMPCertificate_(LibOrgBouncycastleAsn1CmpCMPCertificate *certificate);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpCertOrEncCert_initWithLibOrgBouncycastleAsn1CrmfEncryptedValue_(LibOrgBouncycastleAsn1CmpCertOrEncCert *self, LibOrgBouncycastleAsn1CrmfEncryptedValue *encryptedCert);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertOrEncCert *new_LibOrgBouncycastleAsn1CmpCertOrEncCert_initWithLibOrgBouncycastleAsn1CrmfEncryptedValue_(LibOrgBouncycastleAsn1CrmfEncryptedValue *encryptedCert) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpCertOrEncCert *create_LibOrgBouncycastleAsn1CmpCertOrEncCert_initWithLibOrgBouncycastleAsn1CrmfEncryptedValue_(LibOrgBouncycastleAsn1CrmfEncryptedValue *encryptedCert);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmpCertOrEncCert)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertOrEncCert_H
