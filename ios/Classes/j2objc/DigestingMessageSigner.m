//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/DigestingMessageSigner.java
//

#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "DigestingMessageSigner.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MessageSigner.h"
#include "ParametersWithRandom.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@interface LibOrgBouncycastlePqcCryptoDigestingMessageSigner () {
 @public
  id<LibOrgBouncycastleCryptoDigest> messDigest_;
  id<LibOrgBouncycastlePqcCryptoMessageSigner> messSigner_;
  jboolean forSigning_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoDigestingMessageSigner, messDigest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoDigestingMessageSigner, messSigner_, id<LibOrgBouncycastlePqcCryptoMessageSigner>)

@implementation LibOrgBouncycastlePqcCryptoDigestingMessageSigner

- (instancetype)initWithLibOrgBouncycastlePqcCryptoMessageSigner:(id<LibOrgBouncycastlePqcCryptoMessageSigner>)messSigner
                              withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)messDigest {
  LibOrgBouncycastlePqcCryptoDigestingMessageSigner_initWithLibOrgBouncycastlePqcCryptoMessageSigner_withLibOrgBouncycastleCryptoDigest_(self, messSigner, messDigest);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  self->forSigning_ = forSigning;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *k;
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    k = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithRandom *) param))) getParameters], [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  else {
    k = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk(param, [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  if (forSigning && ![((LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(k)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Signing Requires Private Key.");
  }
  if (!forSigning && [((LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(k)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Verification Requires Public Key.");
  }
  [self reset];
  [((id<LibOrgBouncycastlePqcCryptoMessageSigner>) nil_chk(messSigner_)) init__WithBoolean:forSigning withLibOrgBouncycastleCryptoCipherParameters:param];
}

- (IOSByteArray *)generateSignature {
  if (!forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DigestingMessageSigner not initialised for signature generation.");
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [messDigest_ doFinalWithByteArray:hash_ withInt:0];
  return [((id<LibOrgBouncycastlePqcCryptoMessageSigner>) nil_chk(messSigner_)) generateSignatureWithByteArray:hash_];
}

- (void)updateWithByte:(jbyte)b {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByte:b];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)off
                    withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:inArg withInt:off withInt:len];
}

- (void)reset {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) reset];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  if (forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DigestingMessageSigner not initialised for verification");
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [messDigest_ doFinalWithByteArray:hash_ withInt:0];
  return [((id<LibOrgBouncycastlePqcCryptoMessageSigner>) nil_chk(messSigner_)) verifySignatureWithByteArray:hash_ withByteArray:signature];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoMessageSigner:withLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignature);
  methods[3].selector = @selector(updateWithByte:);
  methods[4].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(verifySignatureWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "messDigest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "messSigner_", "LLibOrgBouncycastlePqcCryptoMessageSigner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forSigning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcCryptoMessageSigner;LLibOrgBouncycastleCryptoDigest;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "update", "B", "[BII", "verifySignature", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoDigestingMessageSigner = { "DigestingMessageSigner", "lib.org.bouncycastle.pqc.crypto", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoDigestingMessageSigner;
}

@end

void LibOrgBouncycastlePqcCryptoDigestingMessageSigner_initWithLibOrgBouncycastlePqcCryptoMessageSigner_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoDigestingMessageSigner *self, id<LibOrgBouncycastlePqcCryptoMessageSigner> messSigner, id<LibOrgBouncycastleCryptoDigest> messDigest) {
  NSObject_init(self);
  self->messSigner_ = messSigner;
  self->messDigest_ = messDigest;
}

LibOrgBouncycastlePqcCryptoDigestingMessageSigner *new_LibOrgBouncycastlePqcCryptoDigestingMessageSigner_initWithLibOrgBouncycastlePqcCryptoMessageSigner_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastlePqcCryptoMessageSigner> messSigner, id<LibOrgBouncycastleCryptoDigest> messDigest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoDigestingMessageSigner, initWithLibOrgBouncycastlePqcCryptoMessageSigner_withLibOrgBouncycastleCryptoDigest_, messSigner, messDigest)
}

LibOrgBouncycastlePqcCryptoDigestingMessageSigner *create_LibOrgBouncycastlePqcCryptoDigestingMessageSigner_initWithLibOrgBouncycastlePqcCryptoMessageSigner_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastlePqcCryptoMessageSigner> messSigner, id<LibOrgBouncycastleCryptoDigest> messDigest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoDigestingMessageSigner, initWithLibOrgBouncycastlePqcCryptoMessageSigner_withLibOrgBouncycastleCryptoDigest_, messSigner, messDigest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoDigestingMessageSigner)
