//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/Grainv1Engine.java
//

#include "CipherParameters.h"
#include "DataLengthException.h"
#include "Grainv1Engine.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OutputLengthException.h"
#include "ParametersWithIV.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoEnginesGrainv1Engine () {
 @public
  IOSByteArray *workingKey_;
  IOSByteArray *workingIV_;
  IOSByteArray *out_;
  IOSIntArray *lfsr_;
  IOSIntArray *nfsr_;
  jint output_;
  jint index_;
  jboolean initialised_;
}

- (void)initGrain OBJC_METHOD_FAMILY_NONE;

- (jint)getOutputNFSR;

- (jint)getOutputLFSR;

- (jint)getOutput;

- (IOSIntArray *)shiftWithIntArray:(IOSIntArray *)array
                           withInt:(jint)val;

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes;

- (void)oneRound;

- (jbyte)getKeyStream;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGrainv1Engine, workingKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGrainv1Engine, workingIV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGrainv1Engine, out_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGrainv1Engine, lfsr_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGrainv1Engine, nfsr_, IOSIntArray *)

inline jint LibOrgBouncycastleCryptoEnginesGrainv1Engine_get_STATE_SIZE(void);
#define LibOrgBouncycastleCryptoEnginesGrainv1Engine_STATE_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesGrainv1Engine, STATE_SIZE, jint)

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGrainv1Engine_initGrain(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputNFSR(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputLFSR(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutput(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastleCryptoEnginesGrainv1Engine_shiftWithIntArray_withInt_(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self, IOSIntArray *array, jint val);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGrainv1Engine_setKeyWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self, IOSByteArray *keyBytes, IOSByteArray *ivBytes);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGrainv1Engine_oneRound(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self);

__attribute__((unused)) static jbyte LibOrgBouncycastleCryptoEnginesGrainv1Engine_getKeyStream(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self);

@implementation LibOrgBouncycastleCryptoEnginesGrainv1Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesGrainv1Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"Grain v1";
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Grain v1 Init parameters must include an IV");
  }
  LibOrgBouncycastleCryptoParamsParametersWithIV *ivParams = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(params, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
  IOSByteArray *iv = [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParams)) getIV];
  if (iv == nil || iv->size_ != 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Grain v1 requires exactly 8 bytes of IV");
  }
  if (!([[ivParams getParameters] isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Grain v1 Init parameters must include a key");
  }
  LibOrgBouncycastleCryptoParamsKeyParameter *key = (LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([ivParams getParameters], [LibOrgBouncycastleCryptoParamsKeyParameter class]);
  workingIV_ = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk([((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(key)) getKey]))->size_];
  workingKey_ = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk([key getKey]))->size_];
  lfsr_ = [IOSIntArray newArrayWithLength:LibOrgBouncycastleCryptoEnginesGrainv1Engine_STATE_SIZE];
  nfsr_ = [IOSIntArray newArrayWithLength:LibOrgBouncycastleCryptoEnginesGrainv1Engine_STATE_SIZE];
  out_ = [IOSByteArray newArrayWithLength:2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, workingIV_, 0, iv->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([key getKey], 0, workingKey_, 0, ((IOSByteArray *) nil_chk([key getKey]))->size_);
  [self reset];
}

- (void)initGrain {
  LibOrgBouncycastleCryptoEnginesGrainv1Engine_initGrain(self);
}

- (jint)getOutputNFSR {
  return LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputNFSR(self);
}

- (jint)getOutputLFSR {
  return LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputLFSR(self);
}

- (jint)getOutput {
  return LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutput(self);
}

- (IOSIntArray *)shiftWithIntArray:(IOSIntArray *)array
                           withInt:(jint)val {
  return LibOrgBouncycastleCryptoEnginesGrainv1Engine_shiftWithIntArray_withInt_(self, array, val);
}

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes {
  LibOrgBouncycastleCryptoEnginesGrainv1Engine_setKeyWithByteArray_withByteArray_(self, keyBytes, ivBytes);
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (!initialised_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" not initialised"));
  }
  if ((inOff + len) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + len) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  for (jint i = 0; i < len; i++) {
    *IOSByteArray_GetRef(outArg, outOff + i) = (jbyte) (IOSByteArray_Get(inArg, inOff + i) ^ LibOrgBouncycastleCryptoEnginesGrainv1Engine_getKeyStream(self));
  }
  return len;
}

- (void)reset {
  index_ = 2;
  LibOrgBouncycastleCryptoEnginesGrainv1Engine_setKeyWithByteArray_withByteArray_(self, workingKey_, workingIV_);
  LibOrgBouncycastleCryptoEnginesGrainv1Engine_initGrain(self);
}

- (void)oneRound {
  LibOrgBouncycastleCryptoEnginesGrainv1Engine_oneRound(self);
}

- (jbyte)returnByteWithByte:(jbyte)inArg {
  if (!initialised_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" not initialised"));
  }
  return (jbyte) (inArg ^ LibOrgBouncycastleCryptoEnginesGrainv1Engine_getKeyStream(self));
}

- (jbyte)getKeyStream {
  return LibOrgBouncycastleCryptoEnginesGrainv1Engine_getKeyStream(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "B", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(initGrain);
  methods[4].selector = @selector(getOutputNFSR);
  methods[5].selector = @selector(getOutputLFSR);
  methods[6].selector = @selector(getOutput);
  methods[7].selector = @selector(shiftWithIntArray:withInt:);
  methods[8].selector = @selector(setKeyWithByteArray:withByteArray:);
  methods[9].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[10].selector = @selector(reset);
  methods[11].selector = @selector(oneRound);
  methods[12].selector = @selector(returnByteWithByte:);
  methods[13].selector = @selector(getKeyStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STATE_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesGrainv1Engine_STATE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "workingKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workingIV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "out_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lfsr_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nfsr_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "output_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "shift", "[II", "setKey", "[B[B", "processBytes", "[BII[BI", "LLibOrgBouncycastleCryptoDataLengthException;", "returnByte", "B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesGrainv1Engine = { "Grainv1Engine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 14, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesGrainv1Engine;
}

@end

void LibOrgBouncycastleCryptoEnginesGrainv1Engine_init(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self) {
  NSObject_init(self);
  self->index_ = 2;
  self->initialised_ = false;
}

LibOrgBouncycastleCryptoEnginesGrainv1Engine *new_LibOrgBouncycastleCryptoEnginesGrainv1Engine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesGrainv1Engine, init)
}

LibOrgBouncycastleCryptoEnginesGrainv1Engine *create_LibOrgBouncycastleCryptoEnginesGrainv1Engine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesGrainv1Engine, init)
}

void LibOrgBouncycastleCryptoEnginesGrainv1Engine_initGrain(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self) {
  for (jint i = 0; i < 10; i++) {
    self->output_ = LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutput(self);
    self->nfsr_ = LibOrgBouncycastleCryptoEnginesGrainv1Engine_shiftWithIntArray_withInt_(self, self->nfsr_, LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputNFSR(self) ^ IOSIntArray_Get(nil_chk(self->lfsr_), 0) ^ self->output_);
    self->lfsr_ = LibOrgBouncycastleCryptoEnginesGrainv1Engine_shiftWithIntArray_withInt_(self, self->lfsr_, LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputLFSR(self) ^ self->output_);
  }
  self->initialised_ = true;
}

jint LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputNFSR(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self) {
  jint b0 = IOSIntArray_Get(nil_chk(self->nfsr_), 0);
  jint b9 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 0), 9)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 1), 7));
  jint b14 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 0), 14)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 1), 2));
  jint b15 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 0), 15)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 1), 1));
  jint b21 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 1), 5)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 2), 11));
  jint b28 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 1), 12)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 2), 4));
  jint b33 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 2), 1)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 3), 15));
  jint b37 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 2), 5)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 3), 11));
  jint b45 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 2), 13)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 3), 3));
  jint b52 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 3), 4)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 4), 12));
  jint b60 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 3), 12)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 4), 4));
  jint b62 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 3), 14)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 4), 2));
  jint b63 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 3), 15)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 4), 1));
  return (b62 ^ b60 ^ b52 ^ b45 ^ b37 ^ b33 ^ b28 ^ b21 ^ b14 ^ b9 ^ b0 ^ b63 & b60 ^ b37 & b33 ^ b15 & b9 ^ b60 & b52 & b45 ^ b33 & b28 & b21 ^ b63 & b45 & b28 & b9 ^ b60 & b52 & b37 & b33 ^ b63 & b60 & b21 & b15 ^ b63 & b60 & b52 & b45 & b37 ^ b33 & b28 & b21 & b15 & b9 ^ b52 & b45 & b37 & b33 & b28 & b21) & (jint) 0x0000FFFF;
}

jint LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputLFSR(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self) {
  jint s0 = IOSIntArray_Get(nil_chk(self->lfsr_), 0);
  jint s13 = (JreURShift32(IOSIntArray_Get(self->lfsr_, 0), 13)) | (JreLShift32(IOSIntArray_Get(self->lfsr_, 1), 3));
  jint s23 = (JreURShift32(IOSIntArray_Get(self->lfsr_, 1), 7)) | (JreLShift32(IOSIntArray_Get(self->lfsr_, 2), 9));
  jint s38 = (JreURShift32(IOSIntArray_Get(self->lfsr_, 2), 6)) | (JreLShift32(IOSIntArray_Get(self->lfsr_, 3), 10));
  jint s51 = (JreURShift32(IOSIntArray_Get(self->lfsr_, 3), 3)) | (JreLShift32(IOSIntArray_Get(self->lfsr_, 4), 13));
  jint s62 = (JreURShift32(IOSIntArray_Get(self->lfsr_, 3), 14)) | (JreLShift32(IOSIntArray_Get(self->lfsr_, 4), 2));
  return (s0 ^ s13 ^ s23 ^ s38 ^ s51 ^ s62) & (jint) 0x0000FFFF;
}

jint LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutput(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self) {
  jint b1 = (JreURShift32(IOSIntArray_Get(nil_chk(self->nfsr_), 0), 1)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 1), 15));
  jint b2 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 0), 2)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 1), 14));
  jint b4 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 0), 4)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 1), 12));
  jint b10 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 0), 10)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 1), 6));
  jint b31 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 1), 15)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 2), 1));
  jint b43 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 2), 11)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 3), 5));
  jint b56 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 3), 8)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 4), 8));
  jint b63 = (JreURShift32(IOSIntArray_Get(self->nfsr_, 3), 15)) | (JreLShift32(IOSIntArray_Get(self->nfsr_, 4), 1));
  jint s3 = (JreURShift32(IOSIntArray_Get(nil_chk(self->lfsr_), 0), 3)) | (JreLShift32(IOSIntArray_Get(self->lfsr_, 1), 13));
  jint s25 = (JreURShift32(IOSIntArray_Get(self->lfsr_, 1), 9)) | (JreLShift32(IOSIntArray_Get(self->lfsr_, 2), 7));
  jint s46 = (JreURShift32(IOSIntArray_Get(self->lfsr_, 2), 14)) | (JreLShift32(IOSIntArray_Get(self->lfsr_, 3), 2));
  jint s64 = IOSIntArray_Get(self->lfsr_, 4);
  return (s25 ^ b63 ^ s3 & s64 ^ s46 & s64 ^ s64 & b63 ^ s3 & s25 & s46 ^ s3 & s46 & s64 ^ s3 & s46 & b63 ^ s25 & s46 & b63 ^ s46 & s64 & b63 ^ b1 ^ b2 ^ b4 ^ b10 ^ b31 ^ b43 ^ b56) & (jint) 0x0000FFFF;
}

IOSIntArray *LibOrgBouncycastleCryptoEnginesGrainv1Engine_shiftWithIntArray_withInt_(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self, IOSIntArray *array, jint val) {
  *IOSIntArray_GetRef(nil_chk(array), 0) = IOSIntArray_Get(array, 1);
  *IOSIntArray_GetRef(array, 1) = IOSIntArray_Get(array, 2);
  *IOSIntArray_GetRef(array, 2) = IOSIntArray_Get(array, 3);
  *IOSIntArray_GetRef(array, 3) = IOSIntArray_Get(array, 4);
  *IOSIntArray_GetRef(array, 4) = val;
  return array;
}

void LibOrgBouncycastleCryptoEnginesGrainv1Engine_setKeyWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self, IOSByteArray *keyBytes, IOSByteArray *ivBytes) {
  *IOSByteArray_GetRef(nil_chk(ivBytes), 8) = (jbyte) (jint) 0xFF;
  *IOSByteArray_GetRef(ivBytes, 9) = (jbyte) (jint) 0xFF;
  self->workingKey_ = keyBytes;
  self->workingIV_ = ivBytes;
  jint j = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->nfsr_))->size_; i++) {
    *IOSIntArray_GetRef(self->nfsr_, i) = ((JreLShift32(IOSByteArray_Get(nil_chk(self->workingKey_), j + 1), 8)) | (IOSByteArray_Get(self->workingKey_, j) & (jint) 0xFF)) & (jint) 0x0000FFFF;
    *IOSIntArray_GetRef(nil_chk(self->lfsr_), i) = ((JreLShift32(IOSByteArray_Get(self->workingIV_, j + 1), 8)) | (IOSByteArray_Get(self->workingIV_, j) & (jint) 0xFF)) & (jint) 0x0000FFFF;
    j += 2;
  }
}

void LibOrgBouncycastleCryptoEnginesGrainv1Engine_oneRound(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self) {
  self->output_ = LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutput(self);
  *IOSByteArray_GetRef(nil_chk(self->out_), 0) = (jbyte) self->output_;
  *IOSByteArray_GetRef(self->out_, 1) = (jbyte) (JreRShift32(self->output_, 8));
  self->nfsr_ = LibOrgBouncycastleCryptoEnginesGrainv1Engine_shiftWithIntArray_withInt_(self, self->nfsr_, LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputNFSR(self) ^ IOSIntArray_Get(nil_chk(self->lfsr_), 0));
  self->lfsr_ = LibOrgBouncycastleCryptoEnginesGrainv1Engine_shiftWithIntArray_withInt_(self, self->lfsr_, LibOrgBouncycastleCryptoEnginesGrainv1Engine_getOutputLFSR(self));
}

jbyte LibOrgBouncycastleCryptoEnginesGrainv1Engine_getKeyStream(LibOrgBouncycastleCryptoEnginesGrainv1Engine *self) {
  if (self->index_ > 1) {
    LibOrgBouncycastleCryptoEnginesGrainv1Engine_oneRound(self);
    self->index_ = 0;
  }
  return IOSByteArray_Get(nil_chk(self->out_), self->index_++);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesGrainv1Engine)
