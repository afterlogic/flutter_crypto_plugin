//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/SinglePubInfo.java
//

#ifndef SinglePubInfo_H
#define SinglePubInfo_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Integer;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1X509GeneralName;

@interface LibOrgBouncycastleAsn1CrmfSinglePubInfo : LibOrgBouncycastleAsn1ASN1Object
@property (readonly, class) LibOrgBouncycastleAsn1ASN1Integer *dontCare NS_SWIFT_NAME(dontCare);
@property (readonly, class) LibOrgBouncycastleAsn1ASN1Integer *x500 NS_SWIFT_NAME(x500);
@property (readonly, class) LibOrgBouncycastleAsn1ASN1Integer *web NS_SWIFT_NAME(web);
@property (readonly, class) LibOrgBouncycastleAsn1ASN1Integer *ldap NS_SWIFT_NAME(ldap);

+ (LibOrgBouncycastleAsn1ASN1Integer *)dontCare;

+ (LibOrgBouncycastleAsn1ASN1Integer *)x500;

+ (LibOrgBouncycastleAsn1ASN1Integer *)web;

+ (LibOrgBouncycastleAsn1ASN1Integer *)ldap;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)pubMethod
                          withLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)pubLocation;

+ (LibOrgBouncycastleAsn1CrmfSinglePubInfo *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1X509GeneralName *)getPubLocation;

- (LibOrgBouncycastleAsn1ASN1Integer *)getPubMethod;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleAsn1CrmfSinglePubInfo)

inline LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1CrmfSinglePubInfo_get_dontCare(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1CrmfSinglePubInfo_dontCare;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CrmfSinglePubInfo, dontCare, LibOrgBouncycastleAsn1ASN1Integer *)

inline LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1CrmfSinglePubInfo_get_x500(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1CrmfSinglePubInfo_x500;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CrmfSinglePubInfo, x500, LibOrgBouncycastleAsn1ASN1Integer *)

inline LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1CrmfSinglePubInfo_get_web(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1CrmfSinglePubInfo_web;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CrmfSinglePubInfo, web, LibOrgBouncycastleAsn1ASN1Integer *)

inline LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1CrmfSinglePubInfo_get_ldap(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Integer *LibOrgBouncycastleAsn1CrmfSinglePubInfo_ldap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1CrmfSinglePubInfo, ldap, LibOrgBouncycastleAsn1ASN1Integer *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfSinglePubInfo *LibOrgBouncycastleAsn1CrmfSinglePubInfo_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfSinglePubInfo_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1X509GeneralName_(LibOrgBouncycastleAsn1CrmfSinglePubInfo *self, LibOrgBouncycastleAsn1ASN1Integer *pubMethod, LibOrgBouncycastleAsn1X509GeneralName *pubLocation);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfSinglePubInfo *new_LibOrgBouncycastleAsn1CrmfSinglePubInfo_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1X509GeneralName_(LibOrgBouncycastleAsn1ASN1Integer *pubMethod, LibOrgBouncycastleAsn1X509GeneralName *pubLocation) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfSinglePubInfo *create_LibOrgBouncycastleAsn1CrmfSinglePubInfo_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1X509GeneralName_(LibOrgBouncycastleAsn1ASN1Integer *pubMethod, LibOrgBouncycastleAsn1X509GeneralName *pubLocation);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfSinglePubInfo)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SinglePubInfo_H
