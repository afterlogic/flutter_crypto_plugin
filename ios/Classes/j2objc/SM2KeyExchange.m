//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/SM2KeyExchange.java
//

#include "Arrays.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "ECAlgorithms.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Memoable.h"
#include "Pack.h"
#include "ParametersWithID.h"
#include "SM2KeyExchange.h"
#include "SM2KeyExchangePrivateParameters.h"
#include "SM2KeyExchangePublicParameters.h"
#include "SM3Digest.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoAgreementSM2KeyExchange () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  IOSByteArray *userID_;
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticKey_;
  LibOrgBouncycastleMathEcECPoint *staticPubPoint_;
  LibOrgBouncycastleMathEcECPoint *ephemeralPubPoint_;
  LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams_;
  jint w_;
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralKey_;
  jboolean initiator_;
}

- (LibOrgBouncycastleMathEcECPoint *)calculateUWithLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters:(LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *)otherPub;

- (IOSByteArray *)kdfWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)u
                                           withByteArray:(IOSByteArray *)za
                                           withByteArray:(IOSByteArray *)zb
                                                 withInt:(jint)klen;

- (JavaMathBigInteger *)reduceWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (IOSByteArray *)S1WithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)u
                                         withByteArray:(IOSByteArray *)inner;

- (IOSByteArray *)calculateInnerHashWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)u
                                                         withByteArray:(IOSByteArray *)za
                                                         withByteArray:(IOSByteArray *)zb
                                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p1
                                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p2;

- (IOSByteArray *)S2WithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)u
                                         withByteArray:(IOSByteArray *)inner;

- (IOSByteArray *)getZWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                           withByteArray:(IOSByteArray *)userID
                     withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)pubPoint;

- (void)addUserIDWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                      withByteArray:(IOSByteArray *)userID;

- (void)addFieldElementWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
               withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)v;

- (IOSByteArray *)digestDoFinal;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, userID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, staticKey_, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, staticPubPoint_, LibOrgBouncycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, ephemeralPubPoint_, LibOrgBouncycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, ecParams_, LibOrgBouncycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, ephemeralKey_, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateUWithLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *otherPub);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_kdfWithLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withInt_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, LibOrgBouncycastleMathEcECPoint *u, IOSByteArray *za, IOSByteArray *zb, jint klen);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, JavaMathBigInteger *x);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S1WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECPoint *u, IOSByteArray *inner);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECPoint *u, IOSByteArray *za, IOSByteArray *zb, LibOrgBouncycastleMathEcECPoint *p1, LibOrgBouncycastleMathEcECPoint *p2);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S2WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECPoint *u, IOSByteArray *inner);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_getZWithLibOrgBouncycastleCryptoDigest_withByteArray_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *userID, LibOrgBouncycastleMathEcECPoint *pubPoint);

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addUserIDWithLibOrgBouncycastleCryptoDigest_withByteArray_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *userID);

__attribute__((unused)) static void LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECFieldElement *v);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_digestDoFinal(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self);

@implementation LibOrgBouncycastleCryptoAgreementSM2KeyExchange

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)privParam {
  LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters *baseParam;
  if ([privParam isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithID class]]) {
    baseParam = (LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithID *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithID *) privParam))) getParameters], [LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters class]);
    userID_ = [((LibOrgBouncycastleCryptoParamsParametersWithID *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithID *) privParam))) getID];
  }
  else {
    baseParam = (LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters *) cast_chk(privParam, [LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters class]);
    userID_ = [IOSByteArray newArrayWithLength:0];
  }
  initiator_ = [((LibOrgBouncycastleCryptoParamsSM2KeyExchangePrivateParameters *) nil_chk(baseParam)) isInitiator];
  staticKey_ = [baseParam getStaticPrivateKey];
  ephemeralKey_ = [baseParam getEphemeralPrivateKey];
  ecParams_ = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(staticKey_)) getParameters];
  staticPubPoint_ = [baseParam getStaticPublicPoint];
  ephemeralPubPoint_ = [baseParam getEphemeralPublicPoint];
  w_ = [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getCurve])) getFieldSize] / 2 - 1;
}

- (IOSByteArray *)calculateKeyWithInt:(jint)kLen
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)pubParam {
  LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *otherPub;
  IOSByteArray *otherUserID;
  if ([pubParam isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithID class]]) {
    otherPub = (LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithID *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithID *) pubParam))) getParameters], [LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters class]);
    otherUserID = [((LibOrgBouncycastleCryptoParamsParametersWithID *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithID *) pubParam))) getID];
  }
  else {
    otherPub = (LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *) cast_chk(pubParam, [LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters class]);
    otherUserID = [IOSByteArray newArrayWithLength:0];
  }
  IOSByteArray *za = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_getZWithLibOrgBouncycastleCryptoDigest_withByteArray_withLibOrgBouncycastleMathEcECPoint_(self, digest_, userID_, staticPubPoint_);
  IOSByteArray *zb = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_getZWithLibOrgBouncycastleCryptoDigest_withByteArray_withLibOrgBouncycastleMathEcECPoint_(self, digest_, otherUserID, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *) nil_chk(otherPub)) getStaticPublicKey])) getQ]);
  LibOrgBouncycastleMathEcECPoint *U = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateUWithLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters_(self, otherPub);
  IOSByteArray *rv;
  if (initiator_) {
    rv = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_kdfWithLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, U, za, zb, kLen);
  }
  else {
    rv = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_kdfWithLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, U, zb, za, kLen);
  }
  return rv;
}

- (IOSObjectArray *)calculateKeyWithConfirmationWithInt:(jint)kLen
                                          withByteArray:(IOSByteArray *)confirmationTag
           withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)pubParam {
  LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *otherPub;
  IOSByteArray *otherUserID;
  if ([pubParam isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithID class]]) {
    otherPub = (LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithID *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithID *) pubParam))) getParameters], [LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters class]);
    otherUserID = [((LibOrgBouncycastleCryptoParamsParametersWithID *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithID *) pubParam))) getID];
  }
  else {
    otherPub = (LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *) cast_chk(pubParam, [LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters class]);
    otherUserID = [IOSByteArray newArrayWithLength:0];
  }
  if (initiator_ && confirmationTag == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"if initiating, confirmationTag must be set");
  }
  IOSByteArray *za = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_getZWithLibOrgBouncycastleCryptoDigest_withByteArray_withLibOrgBouncycastleMathEcECPoint_(self, digest_, userID_, staticPubPoint_);
  IOSByteArray *zb = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_getZWithLibOrgBouncycastleCryptoDigest_withByteArray_withLibOrgBouncycastleMathEcECPoint_(self, digest_, otherUserID, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *) nil_chk(otherPub)) getStaticPublicKey])) getQ]);
  LibOrgBouncycastleMathEcECPoint *U = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateUWithLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters_(self, otherPub);
  IOSByteArray *rv;
  if (initiator_) {
    rv = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_kdfWithLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, U, za, zb, kLen);
    IOSByteArray *inner = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(self, digest_, U, za, zb, ephemeralPubPoint_, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk([otherPub getEphemeralPublicKey])) getQ]);
    IOSByteArray *s1 = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S1WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, digest_, U, inner);
    if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(s1, confirmationTag)) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"confirmation tag mismatch");
    }
    return [IOSObjectArray newArrayWithObjects:(id[]){ rv, LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S2WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, digest_, U, inner) } count:2 type:IOSClass_byteArray(1)];
  }
  else {
    rv = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_kdfWithLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, U, zb, za, kLen);
    IOSByteArray *inner = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(self, digest_, U, zb, za, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk([otherPub getEphemeralPublicKey])) getQ], ephemeralPubPoint_);
    return [IOSObjectArray newArrayWithObjects:(id[]){ rv, LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S1WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, digest_, U, inner), LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S2WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, digest_, U, inner) } count:3 type:IOSClass_byteArray(1)];
  }
}

- (LibOrgBouncycastleMathEcECPoint *)calculateUWithLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters:(LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *)otherPub {
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateUWithLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters_(self, otherPub);
}

- (IOSByteArray *)kdfWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)u
                                           withByteArray:(IOSByteArray *)za
                                           withByteArray:(IOSByteArray *)zb
                                                 withInt:(jint)klen {
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_kdfWithLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, u, za, zb, klen);
}

- (JavaMathBigInteger *)reduceWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(self, x);
}

- (IOSByteArray *)S1WithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)u
                                         withByteArray:(IOSByteArray *)inner {
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S1WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, digest, u, inner);
}

- (IOSByteArray *)calculateInnerHashWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)u
                                                         withByteArray:(IOSByteArray *)za
                                                         withByteArray:(IOSByteArray *)zb
                                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p1
                                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p2 {
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(self, digest, u, za, zb, p1, p2);
}

- (IOSByteArray *)S2WithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                   withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)u
                                         withByteArray:(IOSByteArray *)inner {
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S2WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(self, digest, u, inner);
}

- (IOSByteArray *)getZWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                           withByteArray:(IOSByteArray *)userID
                     withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)pubPoint {
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_getZWithLibOrgBouncycastleCryptoDigest_withByteArray_withLibOrgBouncycastleMathEcECPoint_(self, digest, userID, pubPoint);
}

- (void)addUserIDWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
                                      withByteArray:(IOSByteArray *)userID {
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addUserIDWithLibOrgBouncycastleCryptoDigest_withByteArray_(self, digest, userID);
}

- (void)addFieldElementWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
               withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)v {
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, v);
}

- (IOSByteArray *)digestDoFinal {
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_digestDoFinal(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 17, 14, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(calculateKeyWithInt:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[4].selector = @selector(calculateKeyWithConfirmationWithInt:withByteArray:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[5].selector = @selector(calculateUWithLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters:);
  methods[6].selector = @selector(kdfWithLibOrgBouncycastleMathEcECPoint:withByteArray:withByteArray:withInt:);
  methods[7].selector = @selector(reduceWithJavaMathBigInteger:);
  methods[8].selector = @selector(S1WithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleMathEcECPoint:withByteArray:);
  methods[9].selector = @selector(calculateInnerHashWithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleMathEcECPoint:withByteArray:withByteArray:withLibOrgBouncycastleMathEcECPoint:withLibOrgBouncycastleMathEcECPoint:);
  methods[10].selector = @selector(S2WithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleMathEcECPoint:withByteArray:);
  methods[11].selector = @selector(getZWithLibOrgBouncycastleCryptoDigest:withByteArray:withLibOrgBouncycastleMathEcECPoint:);
  methods[12].selector = @selector(addUserIDWithLibOrgBouncycastleCryptoDigest:withByteArray:);
  methods[13].selector = @selector(addFieldElementWithLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[14].selector = @selector(digestDoFinal);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "userID_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "staticKey_", "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "staticPubPoint_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ephemeralPubPoint_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecParams_", "LLibOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "w_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ephemeralKey_", "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initiator_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoCipherParameters;", "calculateKey", "ILLibOrgBouncycastleCryptoCipherParameters;", "calculateKeyWithConfirmation", "I[BLLibOrgBouncycastleCryptoCipherParameters;", "calculateU", "LLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters;", "kdf", "LLibOrgBouncycastleMathEcECPoint;[B[BI", "reduce", "LJavaMathBigInteger;", "S1", "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleMathEcECPoint;[B", "calculateInnerHash", "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleMathEcECPoint;[B[BLLibOrgBouncycastleMathEcECPoint;LLibOrgBouncycastleMathEcECPoint;", "S2", "getZ", "LLibOrgBouncycastleCryptoDigest;[BLLibOrgBouncycastleMathEcECPoint;", "addUserID", "LLibOrgBouncycastleCryptoDigest;[B", "addFieldElement", "LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleMathEcECFieldElement;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementSM2KeyExchange = { "SM2KeyExchange", "lib.org.bouncycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 15, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementSM2KeyExchange;
}

@end

void LibOrgBouncycastleCryptoAgreementSM2KeyExchange_init(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self) {
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsSM3Digest_init());
}

LibOrgBouncycastleCryptoAgreementSM2KeyExchange *new_LibOrgBouncycastleCryptoAgreementSM2KeyExchange_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, init)
}

LibOrgBouncycastleCryptoAgreementSM2KeyExchange *create_LibOrgBouncycastleCryptoAgreementSM2KeyExchange_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, init)
}

void LibOrgBouncycastleCryptoAgreementSM2KeyExchange_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
}

LibOrgBouncycastleCryptoAgreementSM2KeyExchange *new_LibOrgBouncycastleCryptoAgreementSM2KeyExchange_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoAgreementSM2KeyExchange *create_LibOrgBouncycastleCryptoAgreementSM2KeyExchange_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementSM2KeyExchange, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateUWithLibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *otherPub) {
  LibOrgBouncycastleCryptoParamsECDomainParameters *params = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(self->staticKey_)) getParameters];
  LibOrgBouncycastleMathEcECPoint *p1 = LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(params)) getCurve], [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsSM2KeyExchangePublicParameters *) nil_chk(otherPub)) getStaticPublicKey])) getQ]);
  LibOrgBouncycastleMathEcECPoint *p2 = LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_([params getCurve], [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk([otherPub getEphemeralPublicKey])) getQ]);
  JavaMathBigInteger *x1 = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(self, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(self->ephemeralPubPoint_)) getAffineXCoord])) toBigInteger]);
  JavaMathBigInteger *x2 = LibOrgBouncycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(self, [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p2)) getAffineXCoord])) toBigInteger]);
  JavaMathBigInteger *tA = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(self->staticKey_)) getD])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x1)) multiplyWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(self->ephemeralKey_)) getD]]];
  JavaMathBigInteger *k1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getH])) multiplyWithJavaMathBigInteger:tA])) modWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getN]];
  JavaMathBigInteger *k2 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(k1)) multiplyWithJavaMathBigInteger:x2])) modWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getN]];
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk(LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(p1, k1, p2, k2))) normalize];
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_kdfWithLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withInt_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, LibOrgBouncycastleMathEcECPoint *u, IOSByteArray *za, IOSByteArray *zb, jint klen) {
  jint digestSize = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:JavaLangMath_maxWithInt_withInt_(4, digestSize)];
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:(klen + 7) / 8];
  jint off = 0;
  id<LibOrgBouncycastleUtilMemoable> memo = nil;
  id<LibOrgBouncycastleUtilMemoable> copy_ = nil;
  if ([LibOrgBouncycastleUtilMemoable_class_() isInstance:self->digest_]) {
    LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(u)) getAffineXCoord]);
    LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [u getAffineYCoord]);
    [self->digest_ updateWithByteArray:za withInt:0 withInt:((IOSByteArray *) nil_chk(za))->size_];
    [self->digest_ updateWithByteArray:zb withInt:0 withInt:((IOSByteArray *) nil_chk(zb))->size_];
    memo = (id<LibOrgBouncycastleUtilMemoable>) cast_check(self->digest_, LibOrgBouncycastleUtilMemoable_class_());
    copy_ = [memo copy__];
  }
  jint ct = 0;
  while (off < rv->size_) {
    if (memo != nil) {
      [memo resetWithLibOrgBouncycastleUtilMemoable:copy_];
    }
    else {
      LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(u)) getAffineXCoord]);
      LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, self->digest_, [u getAffineYCoord]);
      [self->digest_ updateWithByteArray:za withInt:0 withInt:((IOSByteArray *) nil_chk(za))->size_];
      [self->digest_ updateWithByteArray:zb withInt:0 withInt:((IOSByteArray *) nil_chk(zb))->size_];
    }
    LibOrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(++ct, buf, 0);
    [self->digest_ updateWithByteArray:buf withInt:0 withInt:4];
    [self->digest_ doFinalWithByteArray:buf withInt:0];
    jint copyLen = JavaLangMath_minWithInt_withInt_(digestSize, rv->size_ - off);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, rv, off, copyLen);
    off += copyLen;
  }
  return rv;
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, JavaMathBigInteger *x) {
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x)) and__WithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(1))) shiftLeftWithInt:self->w_])) subtractWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(1)]])) setBitWithInt:self->w_];
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S1WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECPoint *u, IOSByteArray *inner) {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByte:(jbyte) (jint) 0x02];
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(u)) getAffineYCoord]);
  [digest updateWithByteArray:inner withInt:0 withInt:((IOSByteArray *) nil_chk(inner))->size_];
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_digestDoFinal(self);
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_withByteArray_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECPoint *u, IOSByteArray *za, IOSByteArray *zb, LibOrgBouncycastleMathEcECPoint *p1, LibOrgBouncycastleMathEcECPoint *p2) {
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(u)) getAffineXCoord]);
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:za withInt:0 withInt:((IOSByteArray *) nil_chk(za))->size_];
  [digest updateWithByteArray:zb withInt:0 withInt:((IOSByteArray *) nil_chk(zb))->size_];
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p1)) getAffineXCoord]);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [p1 getAffineYCoord]);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p2)) getAffineXCoord]);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [p2 getAffineYCoord]);
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_digestDoFinal(self);
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_S2WithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECPoint_withByteArray_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECPoint *u, IOSByteArray *inner) {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByte:(jbyte) (jint) 0x03];
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(u)) getAffineYCoord]);
  [digest updateWithByteArray:inner withInt:0 withInt:((IOSByteArray *) nil_chk(inner))->size_];
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_digestDoFinal(self);
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_getZWithLibOrgBouncycastleCryptoDigest_withByteArray_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *userID, LibOrgBouncycastleMathEcECPoint *pubPoint) {
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addUserIDWithLibOrgBouncycastleCryptoDigest_withByteArray_(self, digest, userID);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getCurve])) getA]);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getCurve])) getB]);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG])) getAffineXCoord]);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG])) getAffineYCoord]);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(pubPoint)) getAffineXCoord]);
  LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(self, digest, [pubPoint getAffineYCoord]);
  return LibOrgBouncycastleCryptoAgreementSM2KeyExchange_digestDoFinal(self);
}

void LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addUserIDWithLibOrgBouncycastleCryptoDigest_withByteArray_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, IOSByteArray *userID) {
  jint len = ((IOSByteArray *) nil_chk(userID))->size_ * 8;
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByte:(jbyte) (JreURShift32(len, 8))];
  [digest updateWithByte:(jbyte) len];
  [digest updateWithByteArray:userID withInt:0 withInt:userID->size_];
}

void LibOrgBouncycastleCryptoAgreementSM2KeyExchange_addFieldElementWithLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self, id<LibOrgBouncycastleCryptoDigest> digest, LibOrgBouncycastleMathEcECFieldElement *v) {
  IOSByteArray *p = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(v)) getEncoded];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:p withInt:0 withInt:((IOSByteArray *) nil_chk(p))->size_];
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementSM2KeyExchange_digestDoFinal(LibOrgBouncycastleCryptoAgreementSM2KeyExchange *self) {
  IOSByteArray *result = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize]];
  [self->digest_ doFinalWithByteArray:result withInt:0];
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementSM2KeyExchange)
