//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/PKCS5S1ParametersGenerator.java
//

#include "CipherParameters.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "PBEParametersGenerator.h"
#include "PKCS5S1ParametersGenerator.h"
#include "ParametersWithIV.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
}

- (IOSByteArray *)generateDerivedKey;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator, digest_, id<LibOrgBouncycastleCryptoDigest>)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_generateDerivedKey(LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator *self);

@implementation LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (IOSByteArray *)generateDerivedKey {
  return LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_generateDerivedKey(self);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedParametersWithInt:(jint)keySize {
  keySize = keySize / 8;
  if (keySize > [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Can't generate a derived key ", keySize, @" bytes long."));
  }
  IOSByteArray *dKey = LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_generateDerivedKey(self);
  return new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(dKey, 0, keySize);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedParametersWithInt:(jint)keySize
                                                                         withInt:(jint)ivSize {
  keySize = keySize / 8;
  ivSize = ivSize / 8;
  if ((keySize + ivSize) > [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Can't generate a derived key ", (keySize + ivSize), @" bytes long."));
  }
  IOSByteArray *dKey = LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_generateDerivedKey(self);
  return new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_withInt_withInt_(new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(dKey, 0, keySize), dKey, keySize, ivSize);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedMacParametersWithInt:(jint)keySize {
  return [self generateDerivedParametersWithInt:keySize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 4, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(generateDerivedKey);
  methods[2].selector = @selector(generateDerivedParametersWithInt:);
  methods[3].selector = @selector(generateDerivedParametersWithInt:withInt:);
  methods[4].selector = @selector(generateDerivedMacParametersWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "generateDerivedParameters", "I", "II", "generateDerivedMacParameters" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator = { "PKCS5S1ParametersGenerator", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator;
}

@end

void LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  LibOrgBouncycastleCryptoPBEParametersGenerator_init(self);
  self->digest_ = digest;
}

LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator *new_LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator *create_LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

IOSByteArray *LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator_generateDerivedKey(LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator *self) {
  IOSByteArray *digestBytes = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:self->password_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->password_))->size_];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:self->salt_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->salt_))->size_];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:digestBytes withInt:0];
  for (jint i = 1; i < self->iterationCount_; i++) {
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:digestBytes withInt:0 withInt:digestBytes->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:digestBytes withInt:0];
  }
  return digestBytes;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsPKCS5S1ParametersGenerator)
