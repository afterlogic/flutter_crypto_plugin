//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/ECDHBasicAgreement.java
//

#include "CipherParameters.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECDHBasicAgreement.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoAgreementECDHBasicAgreement () {
 @public
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *key_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementECDHBasicAgreement, key_, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)

@implementation LibOrgBouncycastleCryptoAgreementECDHBasicAgreement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)key {
  self->key_ = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
}

- (jint)getFieldSize {
  return ([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getParameters])) getCurve])) getFieldSize] + 7) / 8;
}

- (JavaMathBigInteger *)calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)pubKey {
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *pub = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(pubKey, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  LibOrgBouncycastleCryptoParamsECDomainParameters *params = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getParameters];
  if (![((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(params)) isEqual:[((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(pub)) getParameters]]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECDH public key has wrong domain parameters");
  }
  JavaMathBigInteger *d = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getD];
  LibOrgBouncycastleMathEcECPoint *Q = LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_([params getCurve], [pub getQ]);
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(Q)) isInfinity]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Infinity is not a valid public key for ECDH");
  }
  JavaMathBigInteger *h = [params getH];
  if (![((JavaMathBigInteger *) nil_chk(h)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)]) {
    d = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([params getHInv])) multiplyWithJavaMathBigInteger:d])) modWithJavaMathBigInteger:[params getN]];
    Q = LibOrgBouncycastleMathEcECAlgorithms_referenceMultiplyWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(Q, h);
  }
  LibOrgBouncycastleMathEcECPoint *P = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(Q)) multiplyWithJavaMathBigInteger:d])) normalize];
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(P)) isInfinity]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Infinity is not a valid agreement value for ECDH");
  }
  return [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([P getAffineXCoord])) toBigInteger];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoCipherParameters;", "calculateAgreement" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementECDHBasicAgreement = { "ECDHBasicAgreement", "lib.org.bouncycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement;
}

@end

void LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init(LibOrgBouncycastleCryptoAgreementECDHBasicAgreement *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoAgreementECDHBasicAgreement *new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementECDHBasicAgreement, init)
}

LibOrgBouncycastleCryptoAgreementECDHBasicAgreement *create_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementECDHBasicAgreement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementECDHBasicAgreement)
