//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ExporterLabel.java
//

#ifndef ExporterLabel_H
#define ExporterLabel_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsExporterLabel : NSObject
@property (readonly, copy, class) NSString *client_finished NS_SWIFT_NAME(client_finished);
@property (readonly, copy, class) NSString *server_finished NS_SWIFT_NAME(server_finished);
@property (readonly, copy, class) NSString *master_secret NS_SWIFT_NAME(master_secret);
@property (readonly, copy, class) NSString *key_expansion NS_SWIFT_NAME(key_expansion);
@property (readonly, copy, class) NSString *client_EAP_encryption NS_SWIFT_NAME(client_EAP_encryption);
@property (readonly, copy, class) NSString *ttls_keying_material NS_SWIFT_NAME(ttls_keying_material);
@property (readonly, copy, class) NSString *ttls_challenge NS_SWIFT_NAME(ttls_challenge);
@property (readonly, copy, class) NSString *dtls_srtp NS_SWIFT_NAME(dtls_srtp);
@property (readonly, copy, class) NSString *extended_master_secret NS_SWIFT_NAME(extended_master_secret);

+ (NSString *)client_finished;

+ (NSString *)server_finished;

+ (NSString *)master_secret;

+ (NSString *)key_expansion;

+ (NSString *)client_EAP_encryption;

+ (NSString *)ttls_keying_material;

+ (NSString *)ttls_challenge;

+ (NSString *)dtls_srtp;

+ (NSString *)extended_master_secret;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsExporterLabel)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_client_finished(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_client_finished;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, client_finished, NSString *)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_server_finished(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_server_finished;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, server_finished, NSString *)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_master_secret(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_master_secret;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, master_secret, NSString *)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_key_expansion(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_key_expansion;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, key_expansion, NSString *)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_client_EAP_encryption(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_client_EAP_encryption;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, client_EAP_encryption, NSString *)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_ttls_keying_material(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_ttls_keying_material;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, ttls_keying_material, NSString *)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_ttls_challenge(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_ttls_challenge;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, ttls_challenge, NSString *)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_dtls_srtp(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_dtls_srtp;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, dtls_srtp, NSString *)

inline NSString *LibOrgBouncycastleCryptoTlsExporterLabel_get_extended_master_secret(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleCryptoTlsExporterLabel_extended_master_secret;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsExporterLabel, extended_master_secret, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsExporterLabel_init(LibOrgBouncycastleCryptoTlsExporterLabel *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsExporterLabel *new_LibOrgBouncycastleCryptoTlsExporterLabel_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsExporterLabel *create_LibOrgBouncycastleCryptoTlsExporterLabel_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsExporterLabel)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ExporterLabel_H
