//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/Strings.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "StringList.h"
#include "Strings.h"
#include "UTF8.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"
#include "java/util/ArrayList.h"
#include "java/util/Vector.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline NSString *LibOrgBouncycastleUtilStrings_get_LINE_SEPARATOR(void);
inline NSString *LibOrgBouncycastleUtilStrings_set_LINE_SEPARATOR(NSString *value);
static NSString *LibOrgBouncycastleUtilStrings_LINE_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleUtilStrings, LINE_SEPARATOR, NSString *)

@interface LibOrgBouncycastleUtilStrings_1 : NSObject < JavaSecurityPrivilegedAction >

- (instancetype)init;

- (NSString *)run;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleUtilStrings_1)

__attribute__((unused)) static void LibOrgBouncycastleUtilStrings_1_init(LibOrgBouncycastleUtilStrings_1 *self);

__attribute__((unused)) static LibOrgBouncycastleUtilStrings_1 *new_LibOrgBouncycastleUtilStrings_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleUtilStrings_1 *create_LibOrgBouncycastleUtilStrings_1_init(void);

@interface LibOrgBouncycastleUtilStrings_StringListImpl : JavaUtilArrayList < LibOrgBouncycastleUtilStringList >

- (instancetype)init;

- (jboolean)addWithId:(NSString *)s;

- (NSString *)setWithInt:(jint)index
                  withId:(NSString *)element;

- (void)addWithInt:(jint)index
            withId:(NSString *)element;

- (IOSObjectArray *)toStringArray;

- (IOSObjectArray *)toStringArrayWithInt:(jint)from
                                 withInt:(jint)to;

- (NSString *)removeWithInt:(jint)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleUtilStrings_StringListImpl)

__attribute__((unused)) static void LibOrgBouncycastleUtilStrings_StringListImpl_init(LibOrgBouncycastleUtilStrings_StringListImpl *self);

__attribute__((unused)) static LibOrgBouncycastleUtilStrings_StringListImpl *new_LibOrgBouncycastleUtilStrings_StringListImpl_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleUtilStrings_StringListImpl *create_LibOrgBouncycastleUtilStrings_StringListImpl_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilStrings_StringListImpl)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleUtilStrings)

@implementation LibOrgBouncycastleUtilStrings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleUtilStrings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)fromUTF8ByteArrayWithByteArray:(IOSByteArray *)bytes {
  return LibOrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(bytes);
}

+ (IOSByteArray *)toUTF8ByteArrayWithNSString:(NSString *)string {
  return LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
}

+ (IOSByteArray *)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string {
  return LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_(string);
}

+ (void)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string
              withJavaIoOutputStream:(JavaIoOutputStream *)sOut {
  LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(string, sOut);
}

+ (NSString *)toUpperCaseWithNSString:(NSString *)string {
  return LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_(string);
}

+ (NSString *)toLowerCaseWithNSString:(NSString *)string {
  return LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(string);
}

+ (IOSByteArray *)toByteArrayWithCharArray:(IOSCharArray *)chars {
  return LibOrgBouncycastleUtilStrings_toByteArrayWithCharArray_(chars);
}

+ (IOSByteArray *)toByteArrayWithNSString:(NSString *)string {
  return LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(string);
}

+ (jint)toByteArrayWithNSString:(NSString *)s
                  withByteArray:(IOSByteArray *)buf
                        withInt:(jint)off {
  return LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_withByteArray_withInt_(s, buf, off);
}

+ (NSString *)fromByteArrayWithByteArray:(IOSByteArray *)bytes {
  return LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(bytes);
}

+ (IOSCharArray *)asCharArrayWithByteArray:(IOSByteArray *)bytes {
  return LibOrgBouncycastleUtilStrings_asCharArrayWithByteArray_(bytes);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)input
                             withChar:(jchar)delimiter {
  return LibOrgBouncycastleUtilStrings_splitWithNSString_withChar_(input, delimiter);
}

+ (id<LibOrgBouncycastleUtilStringList>)newList {
  return LibOrgBouncycastleUtilStrings_newList();
}

+ (NSString *)lineSeparator {
  return LibOrgBouncycastleUtilStrings_lineSeparator();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 9, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 9, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleUtilStringList;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromUTF8ByteArrayWithByteArray:);
  methods[2].selector = @selector(toUTF8ByteArrayWithNSString:);
  methods[3].selector = @selector(toUTF8ByteArrayWithCharArray:);
  methods[4].selector = @selector(toUTF8ByteArrayWithCharArray:withJavaIoOutputStream:);
  methods[5].selector = @selector(toUpperCaseWithNSString:);
  methods[6].selector = @selector(toLowerCaseWithNSString:);
  methods[7].selector = @selector(toByteArrayWithCharArray:);
  methods[8].selector = @selector(toByteArrayWithNSString:);
  methods[9].selector = @selector(toByteArrayWithNSString:withByteArray:withInt:);
  methods[10].selector = @selector(fromByteArrayWithByteArray:);
  methods[11].selector = @selector(asCharArrayWithByteArray:);
  methods[12].selector = @selector(splitWithNSString:withChar:);
  methods[13].selector = @selector(newList);
  methods[14].selector = @selector(lineSeparator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LINE_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "fromUTF8ByteArray", "[B", "toUTF8ByteArray", "LNSString;", "[C", "[CLJavaIoOutputStream;", "LJavaIoIOException;", "toUpperCase", "toLowerCase", "toByteArray", "LNSString;[BI", "fromByteArray", "asCharArray", "split", "LNSString;C", &LibOrgBouncycastleUtilStrings_LINE_SEPARATOR, "LLibOrgBouncycastleUtilStrings_StringListImpl;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilStrings = { "Strings", "lib.org.bouncycastle.util", ptrTable, methods, fields, 7, 0x11, 15, 1, -1, 16, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilStrings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleUtilStrings class]) {
    {
      @try {
        LibOrgBouncycastleUtilStrings_LINE_SEPARATOR = JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_LibOrgBouncycastleUtilStrings_1_init());
      }
      @catch (JavaLangException *e) {
        @try {
          LibOrgBouncycastleUtilStrings_LINE_SEPARATOR = NSString_java_formatWithNSString_withNSObjectArray_(@"%n", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
        }
        @catch (JavaLangException *ef) {
          LibOrgBouncycastleUtilStrings_LINE_SEPARATOR = @"\n";
        }
      }
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleUtilStrings)
  }
}

@end

void LibOrgBouncycastleUtilStrings_init(LibOrgBouncycastleUtilStrings *self) {
  NSObject_init(self);
}

LibOrgBouncycastleUtilStrings *new_LibOrgBouncycastleUtilStrings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilStrings, init)
}

LibOrgBouncycastleUtilStrings *create_LibOrgBouncycastleUtilStrings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilStrings, init)
}

NSString *LibOrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(IOSByteArray *bytes) {
  LibOrgBouncycastleUtilStrings_initialize();
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
  jint len = LibOrgBouncycastleUtilEncodersUTF8_transcodeToUTF16WithByteArray_withCharArray_(bytes, chars);
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid UTF-8 input");
  }
  return [NSString java_stringWithCharacters:chars offset:0 length:len];
}

IOSByteArray *LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(NSString *string) {
  LibOrgBouncycastleUtilStrings_initialize();
  return LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_([((NSString *) nil_chk(string)) java_toCharArray]);
}

IOSByteArray *LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_(IOSCharArray *string) {
  LibOrgBouncycastleUtilStrings_initialize();
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  @try {
    LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(string, bOut);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cannot encode string to byte array!");
  }
  return [bOut toByteArray];
}

void LibOrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(IOSCharArray *string, JavaIoOutputStream *sOut) {
  LibOrgBouncycastleUtilStrings_initialize();
  IOSCharArray *c = string;
  jint i = 0;
  while (i < ((IOSCharArray *) nil_chk(c))->size_) {
    jchar ch = IOSCharArray_Get(c, i);
    if (ch < (jint) 0x0080) {
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:ch];
    }
    else if (ch < (jint) 0x0800) {
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xc0 | (JreRShift32(ch, 6))];
      [sOut writeWithInt:(jint) 0x80 | (ch & (jint) 0x3f)];
    }
    else if (ch >= (jint) 0xD800 && ch <= (jint) 0xDFFF) {
      if (i + 1 >= c->size_) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"invalid UTF-16 codepoint");
      }
      jchar W1 = ch;
      ch = IOSCharArray_Get(c, ++i);
      jchar W2 = ch;
      if (W1 > (jint) 0xDBFF) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"invalid UTF-16 codepoint");
      }
      jint codePoint = ((JreLShift32((W1 & (jint) 0x03FF), 10)) | (W2 & (jint) 0x03FF)) + (jint) 0x10000;
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xf0 | (JreRShift32(codePoint, 18))];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(codePoint, 12)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(codePoint, 6)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | (codePoint & (jint) 0x3F)];
    }
    else {
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xe0 | (JreRShift32(ch, 12))];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | (ch & (jint) 0x3F)];
    }
    i++;
  }
}

NSString *LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_(NSString *string) {
  LibOrgBouncycastleUtilStrings_initialize();
  jboolean changed = false;
  IOSCharArray *chars = [((NSString *) nil_chk(string)) java_toCharArray];
  for (jint i = 0; i != ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    jchar ch = IOSCharArray_Get(chars, i);
    if ('a' <= ch && 'z' >= ch) {
      changed = true;
      *IOSCharArray_GetRef(chars, i) = (jchar) (ch - 'a' + 'A');
    }
  }
  if (changed) {
    return [NSString java_stringWithCharacters:chars];
  }
  return string;
}

NSString *LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(NSString *string) {
  LibOrgBouncycastleUtilStrings_initialize();
  jboolean changed = false;
  IOSCharArray *chars = [((NSString *) nil_chk(string)) java_toCharArray];
  for (jint i = 0; i != ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    jchar ch = IOSCharArray_Get(chars, i);
    if ('A' <= ch && 'Z' >= ch) {
      changed = true;
      *IOSCharArray_GetRef(chars, i) = (jchar) (ch - 'A' + 'a');
    }
  }
  if (changed) {
    return [NSString java_stringWithCharacters:chars];
  }
  return string;
}

IOSByteArray *LibOrgBouncycastleUtilStrings_toByteArrayWithCharArray_(IOSCharArray *chars) {
  LibOrgBouncycastleUtilStrings_initialize();
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(chars))->size_];
  for (jint i = 0; i != bytes->size_; i++) {
    *IOSByteArray_GetRef(bytes, i) = (jbyte) IOSCharArray_Get(chars, i);
  }
  return bytes;
}

IOSByteArray *LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(NSString *string) {
  LibOrgBouncycastleUtilStrings_initialize();
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:[((NSString *) nil_chk(string)) java_length]];
  for (jint i = 0; i != bytes->size_; i++) {
    jchar ch = [string charAtWithInt:i];
    *IOSByteArray_GetRef(bytes, i) = (jbyte) ch;
  }
  return bytes;
}

jint LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_withByteArray_withInt_(NSString *s, IOSByteArray *buf, jint off) {
  LibOrgBouncycastleUtilStrings_initialize();
  jint count = [((NSString *) nil_chk(s)) java_length];
  for (jint i = 0; i < count; ++i) {
    jchar c = [s charAtWithInt:i];
    *IOSByteArray_GetRef(nil_chk(buf), off + i) = (jbyte) c;
  }
  return count;
}

NSString *LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(IOSByteArray *bytes) {
  LibOrgBouncycastleUtilStrings_initialize();
  return [NSString java_stringWithCharacters:LibOrgBouncycastleUtilStrings_asCharArrayWithByteArray_(bytes)];
}

IOSCharArray *LibOrgBouncycastleUtilStrings_asCharArrayWithByteArray_(IOSByteArray *bytes) {
  LibOrgBouncycastleUtilStrings_initialize();
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
  for (jint i = 0; i != chars->size_; i++) {
    *IOSCharArray_GetRef(chars, i) = (jchar) (IOSByteArray_Get(bytes, i) & (jint) 0xff);
  }
  return chars;
}

IOSObjectArray *LibOrgBouncycastleUtilStrings_splitWithNSString_withChar_(NSString *input, jchar delimiter) {
  LibOrgBouncycastleUtilStrings_initialize();
  JavaUtilVector *v = new_JavaUtilVector_init();
  jboolean moreTokens = true;
  NSString *subString;
  while (moreTokens) {
    jint tokenLocation = [((NSString *) nil_chk(input)) java_indexOf:delimiter];
    if (tokenLocation > 0) {
      subString = [input java_substring:0 endIndex:tokenLocation];
      [v addElementWithId:subString];
      input = [input java_substring:tokenLocation + 1];
    }
    else {
      moreTokens = false;
      [v addElementWithId:input];
    }
  }
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:[v size] type:NSString_class_()];
  for (jint i = 0; i != res->size_; i++) {
    (void) IOSObjectArray_Set(res, i, (NSString *) cast_chk([v elementAtWithInt:i], [NSString class]));
  }
  return res;
}

id<LibOrgBouncycastleUtilStringList> LibOrgBouncycastleUtilStrings_newList() {
  LibOrgBouncycastleUtilStrings_initialize();
  return new_LibOrgBouncycastleUtilStrings_StringListImpl_init();
}

NSString *LibOrgBouncycastleUtilStrings_lineSeparator() {
  LibOrgBouncycastleUtilStrings_initialize();
  return LibOrgBouncycastleUtilStrings_LINE_SEPARATOR;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilStrings)

@implementation LibOrgBouncycastleUtilStrings_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleUtilStrings_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)run {
  return JavaLangSystem_getPropertyWithNSString_(@"line.separator");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleUtilStrings;", "Ljava/lang/Object;Ljava/security/PrivilegedAction<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilStrings_1 = { "", "lib.org.bouncycastle.util", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_LibOrgBouncycastleUtilStrings_1;
}

@end

void LibOrgBouncycastleUtilStrings_1_init(LibOrgBouncycastleUtilStrings_1 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleUtilStrings_1 *new_LibOrgBouncycastleUtilStrings_1_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilStrings_1, init)
}

LibOrgBouncycastleUtilStrings_1 *create_LibOrgBouncycastleUtilStrings_1_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilStrings_1, init)
}

@implementation LibOrgBouncycastleUtilStrings_StringListImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleUtilStrings_StringListImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)addWithId:(NSString *)s {
  return [super addWithId:s];
}

- (NSString *)setWithInt:(jint)index
                  withId:(NSString *)element {
  return [super setWithInt:index withId:element];
}

- (void)addWithInt:(jint)index
            withId:(NSString *)element {
  [super addWithInt:index withId:element];
}

- (IOSObjectArray *)toStringArray {
  IOSObjectArray *strs = [IOSObjectArray newArrayWithLength:[self size] type:NSString_class_()];
  for (jint i = 0; i != strs->size_; i++) {
    (void) IOSObjectArray_Set(strs, i, [self getWithInt:i]);
  }
  return strs;
}

- (IOSObjectArray *)toStringArrayWithInt:(jint)from
                                 withInt:(jint)to {
  IOSObjectArray *strs = [IOSObjectArray newArrayWithLength:to - from type:NSString_class_()];
  for (jint i = from; i != [self size] && i != to; i++) {
    (void) IOSObjectArray_Set(strs, i - from, [self getWithInt:i]);
  }
  return strs;
}

- (jboolean)addWithNSString:(NSString *)arg0 {
  return [self addWithId:arg0];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(setWithInt:withId:);
  methods[3].selector = @selector(addWithInt:withId:);
  methods[4].selector = @selector(toStringArray);
  methods[5].selector = @selector(toStringArrayWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "add", "LNSString;", "set", "ILNSString;", "toStringArray", "II", "LLibOrgBouncycastleUtilStrings;", "Ljava/util/ArrayList<Ljava/lang/String;>;Llib/org/bouncycastle/util/StringList;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilStrings_StringListImpl = { "StringListImpl", "lib.org.bouncycastle.util", ptrTable, methods, NULL, 7, 0xa, 6, 0, 6, -1, -1, 7, -1 };
  return &_LibOrgBouncycastleUtilStrings_StringListImpl;
}

@end

void LibOrgBouncycastleUtilStrings_StringListImpl_init(LibOrgBouncycastleUtilStrings_StringListImpl *self) {
  JavaUtilArrayList_init(self);
}

LibOrgBouncycastleUtilStrings_StringListImpl *new_LibOrgBouncycastleUtilStrings_StringListImpl_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilStrings_StringListImpl, init)
}

LibOrgBouncycastleUtilStrings_StringListImpl *create_LibOrgBouncycastleUtilStrings_StringListImpl_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilStrings_StringListImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilStrings_StringListImpl)
