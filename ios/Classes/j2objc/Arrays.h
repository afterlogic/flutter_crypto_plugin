//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/Arrays.java
//

#ifndef Arrays_H
#define Arrays_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/util/Iterator.h"

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@protocol JavaUtilFunctionConsumer;

@interface LibOrgBouncycastleUtilArrays : NSObject

#pragma mark Public

+ (IOSByteArray *)appendWithByteArray:(IOSByteArray *)a
                             withByte:(jbyte)b;

+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)a
                            withInt:(jint)b;

+ (IOSShortArray *)appendWithShortArray:(IOSShortArray *)a
                              withShort:(jshort)b;

+ (IOSObjectArray *)appendWithNSStringArray:(IOSObjectArray *)a
                               withNSString:(NSString *)b;

+ (jboolean)areAllZeroesWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)off
                              withInt:(jint)len;

+ (jboolean)areEqualWithBooleanArray:(IOSBooleanArray *)a
                    withBooleanArray:(IOSBooleanArray *)b;

+ (jboolean)areEqualWithByteArray:(IOSByteArray *)a
                    withByteArray:(IOSByteArray *)b;

+ (jboolean)areEqualWithCharArray:(IOSCharArray *)a
                    withCharArray:(IOSCharArray *)b;

+ (jboolean)areEqualWithIntArray:(IOSIntArray *)a
                    withIntArray:(IOSIntArray *)b;

+ (jboolean)areEqualWithLongArray:(IOSLongArray *)a
                    withLongArray:(IOSLongArray *)b;

+ (jboolean)areEqualWithNSObjectArray:(IOSObjectArray *)a
                    withNSObjectArray:(IOSObjectArray *)b;

+ (jboolean)areEqualWithShortArray:(IOSShortArray *)a
                    withShortArray:(IOSShortArray *)b;

+ (void)clearWithByteArray:(IOSByteArray *)array;

+ (IOSObjectArray *)cloneWithJavaMathBigIntegerArray:(IOSObjectArray *)data;

+ (IOSByteArray *)cloneWithByteArray:(IOSByteArray *)data;

+ (IOSByteArray *)cloneWithByteArray:(IOSByteArray *)data
                       withByteArray:(IOSByteArray *)existing;

+ (IOSObjectArray *)cloneWithByteArray2:(IOSObjectArray *)data;

+ (IOSObjectArray *)cloneWithByteArray3:(IOSObjectArray *)data;

+ (IOSCharArray *)cloneWithCharArray:(IOSCharArray *)data;

+ (IOSIntArray *)cloneWithIntArray:(IOSIntArray *)data;

+ (IOSLongArray *)cloneWithLongArray:(IOSLongArray *)data;

+ (IOSLongArray *)cloneWithLongArray:(IOSLongArray *)data
                       withLongArray:(IOSLongArray *)existing;

+ (IOSShortArray *)cloneWithShortArray:(IOSShortArray *)data;

+ (jint)compareUnsignedWithByteArray:(IOSByteArray *)a
                       withByteArray:(IOSByteArray *)b;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b
                             withByteArray:(IOSByteArray *)c;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b
                             withByteArray:(IOSByteArray *)c
                             withByteArray:(IOSByteArray *)d;

+ (IOSByteArray *)concatenateWithByteArray2:(IOSObjectArray *)arrays;

+ (IOSIntArray *)concatenateWithIntArray:(IOSIntArray *)a
                            withIntArray:(IOSIntArray *)b;

+ (jboolean)constantTimeAreEqualWithByteArray:(IOSByteArray *)expected
                                withByteArray:(IOSByteArray *)supplied;

+ (jboolean)containsWithIntArray:(IOSIntArray *)a
                         withInt:(jint)n;

+ (jboolean)containsWithShortArray:(IOSShortArray *)a
                         withShort:(jshort)n;

+ (IOSObjectArray *)copyOfWithJavaMathBigIntegerArray:(IOSObjectArray *)data
                                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)data
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSCharArray *)copyOfWithCharArray:(IOSCharArray *)data
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)copyOfWithIntArray:(IOSIntArray *)data
                            withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)copyOfWithLongArray:(IOSLongArray *)data
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)copyOfRangeWithJavaMathBigIntegerArray:(IOSObjectArray *)data
                                                   withInt:(jint)from
                                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSByteArray *)copyOfRangeWithByteArray:(IOSByteArray *)data
                                   withInt:(jint)from
                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)copyOfRangeWithIntArray:(IOSIntArray *)data
                                 withInt:(jint)from
                                 withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)copyOfRangeWithLongArray:(IOSLongArray *)data
                                   withInt:(jint)from
                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (void)fillWithByteArray:(IOSByteArray *)array
                 withByte:(jbyte)value;

+ (void)fillWithByteArray:(IOSByteArray *)array
                  withInt:(jint)outArg
                 withByte:(jbyte)value;

+ (void)fillWithByteArray:(IOSByteArray *)array
                  withInt:(jint)start
                  withInt:(jint)finish
                 withByte:(jbyte)value;

+ (void)fillWithCharArray:(IOSCharArray *)array
                 withChar:(jchar)value;

+ (void)fillWithIntArray:(IOSIntArray *)array
                 withInt:(jint)value;

+ (void)fillWithIntArray:(IOSIntArray *)array
                 withInt:(jint)outArg
                 withInt:(jint)value;

+ (void)fillWithLongArray:(IOSLongArray *)array
                  withInt:(jint)outArg
                 withLong:(jlong)value;

+ (void)fillWithLongArray:(IOSLongArray *)array
                 withLong:(jlong)value;

+ (void)fillWithShortArray:(IOSShortArray *)array
                   withInt:(jint)outArg
                 withShort:(jshort)value;

+ (void)fillWithShortArray:(IOSShortArray *)array
                 withShort:(jshort)value;

+ (jint)hashCodeWithByteArray:(IOSByteArray *)data;

+ (jint)hashCodeWithByteArray:(IOSByteArray *)data
                      withInt:(jint)off
                      withInt:(jint)len;

+ (jint)hashCodeWithCharArray:(IOSCharArray *)data;

+ (jint)hashCodeWithIntArray:(IOSIntArray *)data;

+ (jint)hashCodeWithIntArray:(IOSIntArray *)data
                     withInt:(jint)off
                     withInt:(jint)len;

+ (jint)hashCodeWithIntArray2:(IOSObjectArray *)ints;

+ (jint)hashCodeWithLongArray:(IOSLongArray *)data;

+ (jint)hashCodeWithLongArray:(IOSLongArray *)data
                      withInt:(jint)off
                      withInt:(jint)len;

+ (jint)hashCodeWithNSObjectArray:(IOSObjectArray *)data;

+ (jint)hashCodeWithShortArray:(IOSShortArray *)data;

+ (jint)hashCodeWithShortArray2:(IOSObjectArray *)shorts;

+ (jint)hashCodeWithShortArray3:(IOSObjectArray *)shorts;

+ (IOSByteArray *)prependWithByteArray:(IOSByteArray *)a
                              withByte:(jbyte)b;

+ (IOSIntArray *)prependWithIntArray:(IOSIntArray *)a
                             withInt:(jint)b;

+ (IOSShortArray *)prependWithShortArray:(IOSShortArray *)a
                               withShort:(jshort)b;

+ (IOSByteArray *)reverseWithByteArray:(IOSByteArray *)a;

+ (IOSIntArray *)reverseWithIntArray:(IOSIntArray *)a;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleUtilArrays)

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_areAllZeroesWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint len);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_areEqualWithBooleanArray_withBooleanArray_(IOSBooleanArray *a, IOSBooleanArray *b);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_areEqualWithCharArray_withCharArray_(IOSCharArray *a, IOSCharArray *b);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_areEqualWithShortArray_withShortArray_(IOSShortArray *a, IOSShortArray *b);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(IOSByteArray *expected, IOSByteArray *supplied);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_areEqualWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_areEqualWithLongArray_withLongArray_(IOSLongArray *a, IOSLongArray *b);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_areEqualWithNSObjectArray_withNSObjectArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_compareUnsignedWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_containsWithShortArray_withShort_(IOSShortArray *a, jshort n);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleUtilArrays_containsWithIntArray_withInt_(IOSIntArray *a, jint n);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(IOSByteArray *array, jbyte value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithByteArray_withInt_withInt_withByte_(IOSByteArray *array, jint start, jint finish, jbyte value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithCharArray_withChar_(IOSCharArray *array, jchar value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithLongArray_withLong_(IOSLongArray *array, jlong value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithShortArray_withShort_(IOSShortArray *array, jshort value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithIntArray_withInt_(IOSIntArray *array, jint value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithByteArray_withInt_withByte_(IOSByteArray *array, jint outArg, jbyte value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithIntArray_withInt_withInt_(IOSIntArray *array, jint outArg, jint value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithShortArray_withInt_withShort_(IOSShortArray *array, jint outArg, jshort value);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_fillWithLongArray_withInt_withLong_(IOSLongArray *array, jint outArg, jlong value);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint len);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithCharArray_(IOSCharArray *data);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithIntArray2_(IOSObjectArray *ints);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithIntArray_(IOSIntArray *data);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithIntArray_withInt_withInt_(IOSIntArray *data, jint off, jint len);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithLongArray_(IOSLongArray *data);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithLongArray_withInt_withInt_(IOSLongArray *data, jint off, jint len);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithShortArray3_(IOSObjectArray *shorts);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithShortArray2_(IOSObjectArray *shorts);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithShortArray_(IOSShortArray *data);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilArrays_hashCodeWithNSObjectArray_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_cloneWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSCharArray *LibOrgBouncycastleUtilArrays_cloneWithCharArray_(IOSCharArray *data);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_cloneWithByteArray_withByteArray_(IOSByteArray *data, IOSByteArray *existing);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleUtilArrays_cloneWithByteArray2_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleUtilArrays_cloneWithByteArray3_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleUtilArrays_cloneWithIntArray_(IOSIntArray *data);

FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastleUtilArrays_cloneWithLongArray_(IOSLongArray *data);

FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastleUtilArrays_cloneWithLongArray_withLongArray_(IOSLongArray *data, IOSLongArray *existing);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleUtilArrays_cloneWithShortArray_(IOSShortArray *data);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleUtilArrays_cloneWithJavaMathBigIntegerArray_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(IOSByteArray *data, jint newLength);

FOUNDATION_EXPORT IOSCharArray *LibOrgBouncycastleUtilArrays_copyOfWithCharArray_withInt_(IOSCharArray *data, jint newLength);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(IOSIntArray *data, jint newLength);

FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastleUtilArrays_copyOfWithLongArray_withInt_(IOSLongArray *data, jint newLength);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleUtilArrays_copyOfWithJavaMathBigIntegerArray_withInt_(IOSObjectArray *data, jint newLength);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(IOSByteArray *data, jint from, jint to);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(IOSIntArray *data, jint from, jint to);

FOUNDATION_EXPORT IOSLongArray *LibOrgBouncycastleUtilArrays_copyOfRangeWithLongArray_withInt_withInt_(IOSLongArray *data, jint from, jint to);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleUtilArrays_copyOfRangeWithJavaMathBigIntegerArray_withInt_withInt_(IOSObjectArray *data, jint from, jint to);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_appendWithByteArray_withByte_(IOSByteArray *a, jbyte b);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleUtilArrays_appendWithShortArray_withShort_(IOSShortArray *a, jshort b);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleUtilArrays_appendWithIntArray_withInt_(IOSIntArray *a, jint b);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleUtilArrays_appendWithNSStringArray_withNSString_(IOSObjectArray *a, NSString *b);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b, IOSByteArray *c);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b, IOSByteArray *c, IOSByteArray *d);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_concatenateWithByteArray2_(IOSObjectArray *arrays);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleUtilArrays_concatenateWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_prependWithByteArray_withByte_(IOSByteArray *a, jbyte b);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleUtilArrays_prependWithShortArray_withShort_(IOSShortArray *a, jshort b);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleUtilArrays_prependWithIntArray_withInt_(IOSIntArray *a, jint b);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilArrays_reverseWithByteArray_(IOSByteArray *a);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleUtilArrays_reverseWithIntArray_(IOSIntArray *a);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_clearWithByteArray_(IOSByteArray *array);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilArrays)

@interface LibOrgBouncycastleUtilArrays_Iterator : NSObject < JavaUtilIterator >

#pragma mark Public

- (instancetype __nonnull)initWithNSObjectArray:(IOSObjectArray *)dataArray;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleUtilArrays_Iterator)

FOUNDATION_EXPORT void LibOrgBouncycastleUtilArrays_Iterator_initWithNSObjectArray_(LibOrgBouncycastleUtilArrays_Iterator *self, IOSObjectArray *dataArray);

FOUNDATION_EXPORT LibOrgBouncycastleUtilArrays_Iterator *new_LibOrgBouncycastleUtilArrays_Iterator_initWithNSObjectArray_(IOSObjectArray *dataArray) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilArrays_Iterator *create_LibOrgBouncycastleUtilArrays_Iterator_initWithNSObjectArray_(IOSObjectArray *dataArray);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilArrays_Iterator)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Arrays_H
