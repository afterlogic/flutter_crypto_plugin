//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ess/OtherCertID.java
//

#ifndef OtherCertID_H
#define OtherCertID_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@class LibOrgBouncycastleAsn1X509IssuerSerial;

@interface LibOrgBouncycastleAsn1EssOtherCertID : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algId
                                                                  withByteArray:(IOSByteArray *)digest;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algId
                                                                  withByteArray:(IOSByteArray *)digest
                                     withLibOrgBouncycastleAsn1X509IssuerSerial:(LibOrgBouncycastleAsn1X509IssuerSerial *)issuerSerial;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getAlgorithmHash;

- (IOSByteArray *)getCertHash;

+ (LibOrgBouncycastleAsn1EssOtherCertID *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1X509IssuerSerial *)getIssuerSerial;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1EssOtherCertID)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EssOtherCertID *LibOrgBouncycastleAsn1EssOtherCertID_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1EssOtherCertID_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1EssOtherCertID *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId, IOSByteArray *digest);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EssOtherCertID *new_LibOrgBouncycastleAsn1EssOtherCertID_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId, IOSByteArray *digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EssOtherCertID *create_LibOrgBouncycastleAsn1EssOtherCertID_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId, IOSByteArray *digest);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1EssOtherCertID_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withLibOrgBouncycastleAsn1X509IssuerSerial_(LibOrgBouncycastleAsn1EssOtherCertID *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId, IOSByteArray *digest, LibOrgBouncycastleAsn1X509IssuerSerial *issuerSerial);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EssOtherCertID *new_LibOrgBouncycastleAsn1EssOtherCertID_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withLibOrgBouncycastleAsn1X509IssuerSerial_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId, IOSByteArray *digest, LibOrgBouncycastleAsn1X509IssuerSerial *issuerSerial) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EssOtherCertID *create_LibOrgBouncycastleAsn1EssOtherCertID_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_withLibOrgBouncycastleAsn1X509IssuerSerial_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId, IOSByteArray *digest, LibOrgBouncycastleAsn1X509IssuerSerial *issuerSerial);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1EssOtherCertID)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OtherCertID_H
