//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java
//

#include "CertStoreCollectionSpi.h"
#include "J2ObjC_source.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/cert/CRL.h"
#include "java/security/cert/CRLSelector.h"
#include "java/security/cert/CertSelector.h"
#include "java/security/cert/CertStoreParameters.h"
#include "java/security/cert/CertStoreSpi.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CollectionCertStoreParameters.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleJceProviderCertStoreCollectionSpi () {
 @public
  JavaSecurityCertCollectionCertStoreParameters *params_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderCertStoreCollectionSpi, params_, JavaSecurityCertCollectionCertStoreParameters *)

@implementation LibOrgBouncycastleJceProviderCertStoreCollectionSpi

- (instancetype)initWithJavaSecurityCertCertStoreParameters:(id<JavaSecurityCertCertStoreParameters>)params {
  LibOrgBouncycastleJceProviderCertStoreCollectionSpi_initWithJavaSecurityCertCertStoreParameters_(self, params);
  return self;
}

- (id<JavaUtilCollection>)engineGetCertificatesWithJavaSecurityCertCertSelector:(id<JavaSecurityCertCertSelector>)selector {
  id<JavaUtilList> col = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaSecurityCertCollectionCertStoreParameters *) nil_chk(params_)) getCollection])) iterator];
  if (selector == nil) {
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      id obj = [iter next];
      if ([obj isKindOfClass:[JavaSecurityCertCertificate class]]) {
        [col addWithId:obj];
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      id obj = [iter next];
      if (([obj isKindOfClass:[JavaSecurityCertCertificate class]]) && [selector matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *) cast_chk(obj, [JavaSecurityCertCertificate class])]) {
        [col addWithId:obj];
      }
    }
  }
  return col;
}

- (id<JavaUtilCollection>)engineGetCRLsWithJavaSecurityCertCRLSelector:(id<JavaSecurityCertCRLSelector>)selector {
  id<JavaUtilList> col = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaSecurityCertCollectionCertStoreParameters *) nil_chk(params_)) getCollection])) iterator];
  if (selector == nil) {
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      id obj = [iter next];
      if ([obj isKindOfClass:[JavaSecurityCertCRL class]]) {
        [col addWithId:obj];
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      id obj = [iter next];
      if (([obj isKindOfClass:[JavaSecurityCertCRL class]]) && [selector matchWithJavaSecurityCertCRL:(JavaSecurityCertCRL *) cast_chk(obj, [JavaSecurityCertCRL class])]) {
        [col addWithId:obj];
      }
    }
  }
  return col;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 5, 6, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecurityCertCertStoreParameters:);
  methods[1].selector = @selector(engineGetCertificatesWithJavaSecurityCertCertSelector:);
  methods[2].selector = @selector(engineGetCRLsWithJavaSecurityCertCRLSelector:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LJavaSecurityCertCollectionCertStoreParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityCertCertStoreParameters;", "LJavaSecurityInvalidAlgorithmParameterException;", "engineGetCertificates", "LJavaSecurityCertCertSelector;", "LJavaSecurityCertCertStoreException;", "engineGetCRLs", "LJavaSecurityCertCRLSelector;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderCertStoreCollectionSpi = { "CertStoreCollectionSpi", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderCertStoreCollectionSpi;
}

@end

void LibOrgBouncycastleJceProviderCertStoreCollectionSpi_initWithJavaSecurityCertCertStoreParameters_(LibOrgBouncycastleJceProviderCertStoreCollectionSpi *self, id<JavaSecurityCertCertStoreParameters> params) {
  JavaSecurityCertCertStoreSpi_initWithJavaSecurityCertCertStoreParameters_(self, params);
  if (!([params isKindOfClass:[JavaSecurityCertCollectionCertStoreParameters class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"lib.org.bouncycastle.jce.provider.CertStoreCollectionSpi: parameter must be a CollectionCertStoreParameters object\n", [((id<JavaSecurityCertCertStoreParameters>) nil_chk(params)) description]));
  }
  self->params_ = (JavaSecurityCertCollectionCertStoreParameters *) cast_chk(params, [JavaSecurityCertCollectionCertStoreParameters class]);
}

LibOrgBouncycastleJceProviderCertStoreCollectionSpi *new_LibOrgBouncycastleJceProviderCertStoreCollectionSpi_initWithJavaSecurityCertCertStoreParameters_(id<JavaSecurityCertCertStoreParameters> params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderCertStoreCollectionSpi, initWithJavaSecurityCertCertStoreParameters_, params)
}

LibOrgBouncycastleJceProviderCertStoreCollectionSpi *create_LibOrgBouncycastleJceProviderCertStoreCollectionSpi_initWithJavaSecurityCertCertStoreParameters_(id<JavaSecurityCertCertStoreParameters> params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderCertStoreCollectionSpi, initWithJavaSecurityCertCertStoreParameters_, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderCertStoreCollectionSpi)
