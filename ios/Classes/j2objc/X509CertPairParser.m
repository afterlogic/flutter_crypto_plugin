//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/X509CertPairParser.java
//

#include "ASN1InputStream.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "CertificatePair.h"
#include "J2ObjC_source.h"
#include "X509CertPairParser.h"
#include "X509CertificatePair.h"
#include "X509StreamParserSpi.h"
#include "X509StreamParsingException.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleJceProviderX509CertPairParser () {
 @public
  JavaIoInputStream *currentStream_;
}

- (LibOrgBouncycastleX509X509CertificatePair *)readDERCrossCertificatePairWithJavaIoInputStream:(JavaIoInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderX509CertPairParser, currentStream_, JavaIoInputStream *)

__attribute__((unused)) static LibOrgBouncycastleX509X509CertificatePair *LibOrgBouncycastleJceProviderX509CertPairParser_readDERCrossCertificatePairWithJavaIoInputStream_(LibOrgBouncycastleJceProviderX509CertPairParser *self, JavaIoInputStream *inArg);

@implementation LibOrgBouncycastleJceProviderX509CertPairParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderX509CertPairParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleX509X509CertificatePair *)readDERCrossCertificatePairWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return LibOrgBouncycastleJceProviderX509CertPairParser_readDERCrossCertificatePairWithJavaIoInputStream_(self, inArg);
}

- (void)engineInitWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  currentStream_ = inArg;
  if (![((JavaIoInputStream *) nil_chk(currentStream_)) markSupported]) {
    currentStream_ = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(currentStream_);
  }
}

- (id)engineRead {
  @try {
    [((JavaIoInputStream *) nil_chk(currentStream_)) markWithInt:10];
    jint tag = [((JavaIoInputStream *) nil_chk(currentStream_)) read];
    if (tag == -1) {
      return nil;
    }
    [((JavaIoInputStream *) nil_chk(currentStream_)) reset];
    return LibOrgBouncycastleJceProviderX509CertPairParser_readDERCrossCertificatePairWithJavaIoInputStream_(self, currentStream_);
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleX509UtilX509StreamParsingException_initWithNSString_withJavaLangThrowable_([e description], e);
  }
}

- (id<JavaUtilCollection>)engineReadAll {
  LibOrgBouncycastleX509X509CertificatePair *pair;
  id<JavaUtilList> certs = new_JavaUtilArrayList_init();
  while ((pair = (LibOrgBouncycastleX509X509CertificatePair *) cast_chk([self engineRead], [LibOrgBouncycastleX509X509CertificatePair class])) != nil) {
    [certs addWithId:pair];
  }
  return certs;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleX509X509CertificatePair;", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readDERCrossCertificatePairWithJavaIoInputStream:);
  methods[2].selector = @selector(engineInitWithJavaIoInputStream:);
  methods[3].selector = @selector(engineRead);
  methods[4].selector = @selector(engineReadAll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "currentStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readDERCrossCertificatePair", "LJavaIoInputStream;", "LJavaIoIOException;LJavaSecurityCertCertificateParsingException;", "engineInit", "LLibOrgBouncycastleX509UtilX509StreamParsingException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderX509CertPairParser = { "X509CertPairParser", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderX509CertPairParser;
}

@end

void LibOrgBouncycastleJceProviderX509CertPairParser_init(LibOrgBouncycastleJceProviderX509CertPairParser *self) {
  LibOrgBouncycastleX509X509StreamParserSpi_init(self);
  self->currentStream_ = nil;
}

LibOrgBouncycastleJceProviderX509CertPairParser *new_LibOrgBouncycastleJceProviderX509CertPairParser_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderX509CertPairParser, init)
}

LibOrgBouncycastleJceProviderX509CertPairParser *create_LibOrgBouncycastleJceProviderX509CertPairParser_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderX509CertPairParser, init)
}

LibOrgBouncycastleX509X509CertificatePair *LibOrgBouncycastleJceProviderX509CertPairParser_readDERCrossCertificatePairWithJavaIoInputStream_(LibOrgBouncycastleJceProviderX509CertPairParser *self, JavaIoInputStream *inArg) {
  LibOrgBouncycastleAsn1ASN1InputStream *dIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inArg);
  LibOrgBouncycastleAsn1ASN1Sequence *seq = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([dIn readObject], [LibOrgBouncycastleAsn1ASN1Sequence class]);
  LibOrgBouncycastleAsn1X509CertificatePair *pair = LibOrgBouncycastleAsn1X509CertificatePair_getInstanceWithId_(seq);
  return new_LibOrgBouncycastleX509X509CertificatePair_initWithLibOrgBouncycastleAsn1X509CertificatePair_(pair);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderX509CertPairParser)
