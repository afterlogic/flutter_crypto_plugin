//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/misc/ScryptParams.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Integer.h"
#include "ASN1Object.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "Arrays.h"
#include "DEROctetString.h"
#include "DERSequence.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ScryptParams.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleAsn1MiscScryptParams () {
 @public
  IOSByteArray *salt_;
  JavaMathBigInteger *costParameter_;
  JavaMathBigInteger *blockSize_;
  JavaMathBigInteger *parallelizationParameter_;
  JavaMathBigInteger *keyLength_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1MiscScryptParams, salt_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1MiscScryptParams, costParameter_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1MiscScryptParams, blockSize_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1MiscScryptParams, parallelizationParameter_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1MiscScryptParams, keyLength_, JavaMathBigInteger *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1MiscScryptParams_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1MiscScryptParams *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1MiscScryptParams *new_LibOrgBouncycastleAsn1MiscScryptParams_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1MiscScryptParams *create_LibOrgBouncycastleAsn1MiscScryptParams_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1MiscScryptParams

- (instancetype)initWithByteArray:(IOSByteArray *)salt
                          withInt:(jint)costParameter
                          withInt:(jint)blockSize
                          withInt:(jint)parallelizationParameter {
  LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_(self, salt, costParameter, blockSize, parallelizationParameter);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)salt
                          withInt:(jint)costParameter
                          withInt:(jint)blockSize
                          withInt:(jint)parallelizationParameter
                          withInt:(jint)keyLength {
  LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_withInt_(self, salt, costParameter, blockSize, parallelizationParameter, keyLength);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)salt
           withJavaMathBigInteger:(JavaMathBigInteger *)costParameter
           withJavaMathBigInteger:(JavaMathBigInteger *)blockSize
           withJavaMathBigInteger:(JavaMathBigInteger *)parallelizationParameter
           withJavaMathBigInteger:(JavaMathBigInteger *)keyLength {
  LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, salt, costParameter, blockSize, parallelizationParameter, keyLength);
  return self;
}

+ (LibOrgBouncycastleAsn1MiscScryptParams *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1MiscScryptParams_getInstanceWithId_(o);
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1MiscScryptParams_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

- (IOSByteArray *)getSalt {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(salt_);
}

- (JavaMathBigInteger *)getCostParameter {
  return costParameter_;
}

- (JavaMathBigInteger *)getBlockSize {
  return blockSize_;
}

- (JavaMathBigInteger *)getParallelizationParameter {
  return parallelizationParameter_;
}

- (JavaMathBigInteger *)getKeyLength {
  return keyLength_;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(salt_)];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(costParameter_)];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(blockSize_)];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(parallelizationParameter_)];
  if (keyLength_ != nil) {
    [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(keyLength_)];
  }
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1MiscScryptParams;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withInt:withInt:withInt:);
  methods[1].selector = @selector(initWithByteArray:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(initWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(getInstanceWithId:);
  methods[4].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[5].selector = @selector(getSalt);
  methods[6].selector = @selector(getCostParameter);
  methods[7].selector = @selector(getBlockSize);
  methods[8].selector = @selector(getParallelizationParameter);
  methods[9].selector = @selector(getKeyLength);
  methods[10].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "salt_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "costParameter_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockSize_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parallelizationParameter_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyLength_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BIII", "[BIIII", "[BLJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "getInstance", "LNSObject;", "LLibOrgBouncycastleAsn1ASN1Sequence;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1MiscScryptParams = { "ScryptParams", "lib.org.bouncycastle.asn1.misc", ptrTable, methods, fields, 7, 0x1, 11, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1MiscScryptParams;
}

@end

void LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_(LibOrgBouncycastleAsn1MiscScryptParams *self, IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter) {
  LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, salt, JavaMathBigInteger_valueOfWithLong_(costParameter), JavaMathBigInteger_valueOfWithLong_(blockSize), JavaMathBigInteger_valueOfWithLong_(parallelizationParameter), nil);
}

LibOrgBouncycastleAsn1MiscScryptParams *new_LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_(IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1MiscScryptParams, initWithByteArray_withInt_withInt_withInt_, salt, costParameter, blockSize, parallelizationParameter)
}

LibOrgBouncycastleAsn1MiscScryptParams *create_LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_(IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1MiscScryptParams, initWithByteArray_withInt_withInt_withInt_, salt, costParameter, blockSize, parallelizationParameter)
}

void LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_withInt_(LibOrgBouncycastleAsn1MiscScryptParams *self, IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter, jint keyLength) {
  LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, salt, JavaMathBigInteger_valueOfWithLong_(costParameter), JavaMathBigInteger_valueOfWithLong_(blockSize), JavaMathBigInteger_valueOfWithLong_(parallelizationParameter), JavaMathBigInteger_valueOfWithLong_(keyLength));
}

LibOrgBouncycastleAsn1MiscScryptParams *new_LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter, jint keyLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1MiscScryptParams, initWithByteArray_withInt_withInt_withInt_withInt_, salt, costParameter, blockSize, parallelizationParameter, keyLength)
}

LibOrgBouncycastleAsn1MiscScryptParams *create_LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *salt, jint costParameter, jint blockSize, jint parallelizationParameter, jint keyLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1MiscScryptParams, initWithByteArray_withInt_withInt_withInt_withInt_, salt, costParameter, blockSize, parallelizationParameter, keyLength)
}

void LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleAsn1MiscScryptParams *self, IOSByteArray *salt, JavaMathBigInteger *costParameter, JavaMathBigInteger *blockSize, JavaMathBigInteger *parallelizationParameter, JavaMathBigInteger *keyLength) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->salt_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(salt);
  self->costParameter_ = costParameter;
  self->blockSize_ = blockSize;
  self->parallelizationParameter_ = parallelizationParameter;
  self->keyLength_ = keyLength;
}

LibOrgBouncycastleAsn1MiscScryptParams *new_LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(IOSByteArray *salt, JavaMathBigInteger *costParameter, JavaMathBigInteger *blockSize, JavaMathBigInteger *parallelizationParameter, JavaMathBigInteger *keyLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1MiscScryptParams, initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, salt, costParameter, blockSize, parallelizationParameter, keyLength)
}

LibOrgBouncycastleAsn1MiscScryptParams *create_LibOrgBouncycastleAsn1MiscScryptParams_initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(IOSByteArray *salt, JavaMathBigInteger *costParameter, JavaMathBigInteger *blockSize, JavaMathBigInteger *parallelizationParameter, JavaMathBigInteger *keyLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1MiscScryptParams, initWithByteArray_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, salt, costParameter, blockSize, parallelizationParameter, keyLength)
}

LibOrgBouncycastleAsn1MiscScryptParams *LibOrgBouncycastleAsn1MiscScryptParams_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1MiscScryptParams_initialize();
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1MiscScryptParams class]]) {
    return (LibOrgBouncycastleAsn1MiscScryptParams *) o;
  }
  else if (o != nil) {
    return new_LibOrgBouncycastleAsn1MiscScryptParams_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(o));
  }
  return nil;
}

void LibOrgBouncycastleAsn1MiscScryptParams_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1MiscScryptParams *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] != 4 && [seq size] != 5) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"invalid sequence: size = ", [seq size]));
  }
  self->salt_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([seq getObjectAtWithInt:0]))) getOctets]);
  self->costParameter_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:1]))) getValue];
  self->blockSize_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:2]))) getValue];
  self->parallelizationParameter_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:3]))) getValue];
  if ([seq size] == 5) {
    self->keyLength_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:4]))) getValue];
  }
  else {
    self->keyLength_ = nil;
  }
}

LibOrgBouncycastleAsn1MiscScryptParams *new_LibOrgBouncycastleAsn1MiscScryptParams_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1MiscScryptParams, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1MiscScryptParams *create_LibOrgBouncycastleAsn1MiscScryptParams_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1MiscScryptParams, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1MiscScryptParams)
