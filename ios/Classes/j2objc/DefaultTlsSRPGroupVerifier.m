//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsSRPGroupVerifier.java
//

#include "DefaultTlsSRPGroupVerifier.h"
#include "J2ObjC_source.h"
#include "SRP6GroupParameters.h"
#include "SRP6StandardGroups.h"
#include "java/math/BigInteger.h"
#include "java/util/Vector.h"

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier)

JavaUtilVector *LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS;

@implementation LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier

+ (JavaUtilVector *)DEFAULT_GROUPS {
  return LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)groups {
  LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(self, groups);
  return self;
}

- (jboolean)acceptWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)group {
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(groups_)) size]; ++i) {
    if ([self areGroupsEqualWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:group withLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *) cast_chk([((JavaUtilVector *) nil_chk(groups_)) elementAtWithInt:i], [LibOrgBouncycastleCryptoParamsSRP6GroupParameters class])]) {
      return true;
    }
  }
  return false;
}

- (jboolean)areGroupsEqualWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)a
                          withLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)b {
  return a == b || ([self areParametersEqualWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsSRP6GroupParameters *) nil_chk(a)) getN] withJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsSRP6GroupParameters *) nil_chk(b)) getN]] && [self areParametersEqualWithJavaMathBigInteger:[a getG] withJavaMathBigInteger:[b getG]]);
}

- (jboolean)areParametersEqualWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return a == b || [((JavaMathBigInteger *) nil_chk(a)) isEqual:b];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilVector:);
  methods[2].selector = @selector(acceptWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:);
  methods[3].selector = @selector(areGroupsEqualWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:withLibOrgBouncycastleCryptoParamsSRP6GroupParameters:);
  methods[4].selector = @selector(areParametersEqualWithJavaMathBigInteger:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_GROUPS", "LJavaUtilVector;", .constantValue.asLong = 0, 0x1c, -1, 7, -1, -1 },
    { "groups_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilVector;", "accept", "LLibOrgBouncycastleCryptoParamsSRP6GroupParameters;", "areGroupsEqual", "LLibOrgBouncycastleCryptoParamsSRP6GroupParameters;LLibOrgBouncycastleCryptoParamsSRP6GroupParameters;", "areParametersEqual", "LJavaMathBigInteger;LJavaMathBigInteger;", &LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier = { "DefaultTlsSRPGroupVerifier", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier class]) {
    LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS = new_JavaUtilVector_init();
    {
      [LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS addElementWithId:JreLoadStatic(LibOrgBouncycastleCryptoAgreementSrpSRP6StandardGroups, rfc5054_1024)];
      [LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS addElementWithId:JreLoadStatic(LibOrgBouncycastleCryptoAgreementSrpSRP6StandardGroups, rfc5054_1536)];
      [LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS addElementWithId:JreLoadStatic(LibOrgBouncycastleCryptoAgreementSrpSRP6StandardGroups, rfc5054_2048)];
      [LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS addElementWithId:JreLoadStatic(LibOrgBouncycastleCryptoAgreementSrpSRP6StandardGroups, rfc5054_3072)];
      [LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS addElementWithId:JreLoadStatic(LibOrgBouncycastleCryptoAgreementSrpSRP6StandardGroups, rfc5054_4096)];
      [LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS addElementWithId:JreLoadStatic(LibOrgBouncycastleCryptoAgreementSrpSRP6StandardGroups, rfc5054_6144)];
      [LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS addElementWithId:JreLoadStatic(LibOrgBouncycastleCryptoAgreementSrpSRP6StandardGroups, rfc5054_8192)];
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier)
  }
}

@end

void LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *self) {
  LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(self, LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS);
}

LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier, init)
}

LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier, init)
}

void LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *self, JavaUtilVector *groups) {
  NSObject_init(self);
  self->groups_ = groups;
}

LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(JavaUtilVector *groups) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier, initWithJavaUtilVector_, groups)
}

LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(JavaUtilVector *groups) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier, initWithJavaUtilVector_, groups)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier)
