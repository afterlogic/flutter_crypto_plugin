//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/WNafUtil.java
//

#include "ECAlgorithms.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "ECPointMap.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PreCompCallback.h"
#include "PreCompInfo.h"
#include "WNafPreCompInfo.h"
#include "WNafUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleMathEcWNafUtil ()

+ (IOSByteArray *)trimWithByteArray:(IOSByteArray *)a
                            withInt:(jint)length;

+ (IOSIntArray *)trimWithIntArray:(IOSIntArray *)a
                          withInt:(jint)length;

+ (IOSObjectArray *)resizeTableWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)a
                                                                withInt:(jint)length;

@end

inline IOSIntArray *LibOrgBouncycastleMathEcWNafUtil_get_DEFAULT_WINDOW_SIZE_CUTOFFS(void);
static IOSIntArray *LibOrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcWNafUtil, DEFAULT_WINDOW_SIZE_CUTOFFS, IOSIntArray *)

inline IOSByteArray *LibOrgBouncycastleMathEcWNafUtil_get_EMPTY_BYTES(void);
static IOSByteArray *LibOrgBouncycastleMathEcWNafUtil_EMPTY_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcWNafUtil, EMPTY_BYTES, IOSByteArray *)

inline IOSIntArray *LibOrgBouncycastleMathEcWNafUtil_get_EMPTY_INTS(void);
static IOSIntArray *LibOrgBouncycastleMathEcWNafUtil_EMPTY_INTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcWNafUtil, EMPTY_INTS, IOSIntArray *)

inline IOSObjectArray *LibOrgBouncycastleMathEcWNafUtil_get_EMPTY_POINTS(void);
static IOSObjectArray *LibOrgBouncycastleMathEcWNafUtil_EMPTY_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleMathEcWNafUtil, EMPTY_POINTS, IOSObjectArray *)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(IOSByteArray *a, jint length);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(IOSIntArray *a, jint length);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleMathEcWNafUtil_resizeTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(IOSObjectArray *a, jint length);

@interface LibOrgBouncycastleMathEcWNafUtil_1 : NSObject < LibOrgBouncycastleMathEcPreCompCallback > {
 @public
  LibOrgBouncycastleMathEcWNafPreCompInfo *val$wnafPreCompP_;
  id<LibOrgBouncycastleMathEcECPointMap> val$pointMap_;
  jboolean val$includeNegated_;
}

- (instancetype)initWithLibOrgBouncycastleMathEcWNafPreCompInfo:(LibOrgBouncycastleMathEcWNafPreCompInfo *)capture$0
                         withLibOrgBouncycastleMathEcECPointMap:(id<LibOrgBouncycastleMathEcECPointMap>)capture$1
                                                    withBoolean:(jboolean)capture$2;

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)existing;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcWNafUtil_1)

__attribute__((unused)) static void LibOrgBouncycastleMathEcWNafUtil_1_initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_(LibOrgBouncycastleMathEcWNafUtil_1 *self, LibOrgBouncycastleMathEcWNafPreCompInfo *capture$0, id<LibOrgBouncycastleMathEcECPointMap> capture$1, jboolean capture$2);

__attribute__((unused)) static LibOrgBouncycastleMathEcWNafUtil_1 *new_LibOrgBouncycastleMathEcWNafUtil_1_initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_(LibOrgBouncycastleMathEcWNafPreCompInfo *capture$0, id<LibOrgBouncycastleMathEcECPointMap> capture$1, jboolean capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleMathEcWNafUtil_1 *create_LibOrgBouncycastleMathEcWNafUtil_1_initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_(LibOrgBouncycastleMathEcWNafPreCompInfo *capture$0, id<LibOrgBouncycastleMathEcECPointMap> capture$1, jboolean capture$2);

@interface LibOrgBouncycastleMathEcWNafUtil_2 : NSObject < LibOrgBouncycastleMathEcPreCompCallback > {
 @public
  jint val$width_;
  jboolean val$includeNegated_;
  LibOrgBouncycastleMathEcECPoint *val$p_;
  LibOrgBouncycastleMathEcECCurve *val$c_;
}

- (instancetype)initWithInt:(jint)capture$0
                withBoolean:(jboolean)capture$1
withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)capture$2
withLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)capture$3;

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)existing;

- (jboolean)checkExistingWithLibOrgBouncycastleMathEcWNafPreCompInfo:(LibOrgBouncycastleMathEcWNafPreCompInfo *)existingWNaf
                                                             withInt:(jint)reqPreCompLen
                                                         withBoolean:(jboolean)includeNegated;

- (jboolean)checkTableWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)table
                                                       withInt:(jint)reqLen;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcWNafUtil_2)

__attribute__((unused)) static void LibOrgBouncycastleMathEcWNafUtil_2_initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcWNafUtil_2 *self, jint capture$0, jboolean capture$1, LibOrgBouncycastleMathEcECPoint *capture$2, LibOrgBouncycastleMathEcECCurve *capture$3);

__attribute__((unused)) static LibOrgBouncycastleMathEcWNafUtil_2 *new_LibOrgBouncycastleMathEcWNafUtil_2_initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_(jint capture$0, jboolean capture$1, LibOrgBouncycastleMathEcECPoint *capture$2, LibOrgBouncycastleMathEcECCurve *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleMathEcWNafUtil_2 *create_LibOrgBouncycastleMathEcWNafUtil_2_initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_(jint capture$0, jboolean capture$1, LibOrgBouncycastleMathEcECPoint *capture$2, LibOrgBouncycastleMathEcECCurve *capture$3);

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcWNafUtil_2_checkExistingWithLibOrgBouncycastleMathEcWNafPreCompInfo_withInt_withBoolean_(LibOrgBouncycastleMathEcWNafUtil_2 *self, LibOrgBouncycastleMathEcWNafPreCompInfo *existingWNaf, jint reqPreCompLen, jboolean includeNegated);

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcWNafUtil_2_checkTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(LibOrgBouncycastleMathEcWNafUtil_2 *self, IOSObjectArray *table, jint reqLen);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleMathEcWNafUtil)

NSString *LibOrgBouncycastleMathEcWNafUtil_PRECOMP_NAME = @"bc_wnaf";

@implementation LibOrgBouncycastleMathEcWNafUtil

+ (NSString *)PRECOMP_NAME {
  return LibOrgBouncycastleMathEcWNafUtil_PRECOMP_NAME;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcWNafUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSIntArray *)generateCompactNafWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return LibOrgBouncycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(k);
}

+ (IOSIntArray *)generateCompactWindowNafWithInt:(jint)width
                          withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return LibOrgBouncycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(width, k);
}

+ (IOSByteArray *)generateJSFWithJavaMathBigInteger:(JavaMathBigInteger *)g
                             withJavaMathBigInteger:(JavaMathBigInteger *)h {
  return LibOrgBouncycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(g, h);
}

+ (IOSByteArray *)generateNafWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return LibOrgBouncycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(k);
}

+ (IOSByteArray *)generateWindowNafWithInt:(jint)width
                    withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, k);
}

+ (jint)getNafWeightWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return LibOrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(k);
}

+ (LibOrgBouncycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  return LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcECPoint_(p);
}

+ (LibOrgBouncycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)preCompInfo {
  return LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo_(preCompInfo);
}

+ (jint)getWindowSizeWithInt:(jint)bits {
  return LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_(bits);
}

+ (jint)getWindowSizeWithInt:(jint)bits
                withIntArray:(IOSIntArray *)windowSizeCutoffs {
  return LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(bits, windowSizeCutoffs);
}

+ (LibOrgBouncycastleMathEcECPoint *)mapPointWithPrecompWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                                                    withInt:(jint)width
                                                                                withBoolean:(jboolean)includeNegated
                                                     withLibOrgBouncycastleMathEcECPointMap:(id<LibOrgBouncycastleMathEcECPointMap>)pointMap {
  return LibOrgBouncycastleMathEcWNafUtil_mapPointWithPrecompWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_withLibOrgBouncycastleMathEcECPointMap_(p, width, includeNegated, pointMap);
}

+ (LibOrgBouncycastleMathEcWNafPreCompInfo *)precomputeWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                                                   withInt:(jint)width
                                                                               withBoolean:(jboolean)includeNegated {
  return LibOrgBouncycastleMathEcWNafUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_(p, width, includeNegated);
}

+ (IOSByteArray *)trimWithByteArray:(IOSByteArray *)a
                            withInt:(jint)length {
  return LibOrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(a, length);
}

+ (IOSIntArray *)trimWithIntArray:(IOSIntArray *)a
                          withInt:(jint)length {
  return LibOrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(a, length);
}

+ (IOSObjectArray *)resizeTableWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)a
                                                                withInt:(jint)length {
  return LibOrgBouncycastleMathEcWNafUtil_resizeTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(a, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcWNafPreCompInfo;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcWNafPreCompInfo;", 0x9, 9, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 14, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcWNafPreCompInfo;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 19, 21, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleMathEcECPoint;", 0xa, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateCompactNafWithJavaMathBigInteger:);
  methods[2].selector = @selector(generateCompactWindowNafWithInt:withJavaMathBigInteger:);
  methods[3].selector = @selector(generateJSFWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(generateNafWithJavaMathBigInteger:);
  methods[5].selector = @selector(generateWindowNafWithInt:withJavaMathBigInteger:);
  methods[6].selector = @selector(getNafWeightWithJavaMathBigInteger:);
  methods[7].selector = @selector(getWNafPreCompInfoWithLibOrgBouncycastleMathEcECPoint:);
  methods[8].selector = @selector(getWNafPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo:);
  methods[9].selector = @selector(getWindowSizeWithInt:);
  methods[10].selector = @selector(getWindowSizeWithInt:withIntArray:);
  methods[11].selector = @selector(mapPointWithPrecompWithLibOrgBouncycastleMathEcECPoint:withInt:withBoolean:withLibOrgBouncycastleMathEcECPointMap:);
  methods[12].selector = @selector(precomputeWithLibOrgBouncycastleMathEcECPoint:withInt:withBoolean:);
  methods[13].selector = @selector(trimWithByteArray:withInt:);
  methods[14].selector = @selector(trimWithIntArray:withInt:);
  methods[15].selector = @selector(resizeTableWithLibOrgBouncycastleMathEcECPointArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRECOMP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "DEFAULT_WINDOW_SIZE_CUTOFFS", "[I", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "EMPTY_BYTES", "[B", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "EMPTY_INTS", "[I", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "EMPTY_POINTS", "[LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "generateCompactNaf", "LJavaMathBigInteger;", "generateCompactWindowNaf", "ILJavaMathBigInteger;", "generateJSF", "LJavaMathBigInteger;LJavaMathBigInteger;", "generateNaf", "generateWindowNaf", "getNafWeight", "getWNafPreCompInfo", "LLibOrgBouncycastleMathEcECPoint;", "LLibOrgBouncycastleMathEcPreCompInfo;", "getWindowSize", "I", "I[I", "mapPointWithPrecomp", "LLibOrgBouncycastleMathEcECPoint;IZLLibOrgBouncycastleMathEcECPointMap;", "precompute", "LLibOrgBouncycastleMathEcECPoint;IZ", "trim", "[BI", "[II", "resizeTable", "[LLibOrgBouncycastleMathEcECPoint;I", &LibOrgBouncycastleMathEcWNafUtil_PRECOMP_NAME, &LibOrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS, &LibOrgBouncycastleMathEcWNafUtil_EMPTY_BYTES, &LibOrgBouncycastleMathEcWNafUtil_EMPTY_INTS, &LibOrgBouncycastleMathEcWNafUtil_EMPTY_POINTS };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcWNafUtil = { "WNafUtil", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x401, 16, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcWNafUtil;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleMathEcWNafUtil class]) {
    LibOrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS = [IOSIntArray newArrayWithInts:(jint[]){ 13, 41, 121, 337, 897, 2305 } count:6];
    LibOrgBouncycastleMathEcWNafUtil_EMPTY_BYTES = [IOSByteArray newArrayWithLength:0];
    LibOrgBouncycastleMathEcWNafUtil_EMPTY_INTS = [IOSIntArray newArrayWithLength:0];
    LibOrgBouncycastleMathEcWNafUtil_EMPTY_POINTS = [IOSObjectArray newArrayWithLength:0 type:LibOrgBouncycastleMathEcECPoint_class_()];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleMathEcWNafUtil)
  }
}

@end

void LibOrgBouncycastleMathEcWNafUtil_init(LibOrgBouncycastleMathEcWNafUtil *self) {
  NSObject_init(self);
}

IOSIntArray *LibOrgBouncycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  if ((JreURShift32([((JavaMathBigInteger *) nil_chk(k)) bitLength], 16)) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'k' must have bitlength < 2^16");
  }
  if ([k signum] == 0) {
    return LibOrgBouncycastleMathEcWNafUtil_EMPTY_INTS;
  }
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  jint bits = [((JavaMathBigInteger *) nil_chk(_3k)) bitLength];
  IOSIntArray *naf = [IOSIntArray newArrayWithLength:JreRShift32(bits, 1)];
  JavaMathBigInteger *diff = [_3k xor__WithJavaMathBigInteger:k];
  jint highBit = bits - 1;
  jint length = 0;
  jint zeroes = 0;
  for (jint i = 1; i < highBit; ++i) {
    if (![((JavaMathBigInteger *) nil_chk(diff)) testBitWithInt:i]) {
      ++zeroes;
      continue;
    }
    jint digit = [k testBitWithInt:i] ? -1 : 1;
    *IOSIntArray_GetRef(naf, length++) = (JreLShift32(digit, 16)) | zeroes;
    zeroes = 1;
    ++i;
  }
  *IOSIntArray_GetRef(naf, length++) = (JreLShift32(1, 16)) | zeroes;
  if (naf->size_ > length) {
    naf = LibOrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(naf, length);
  }
  return naf;
}

IOSIntArray *LibOrgBouncycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  if (width == 2) {
    return LibOrgBouncycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(k);
  }
  if (width < 2 || width > 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'width' must be in the range [2, 16]");
  }
  if ((JreURShift32([((JavaMathBigInteger *) nil_chk(k)) bitLength], 16)) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'k' must have bitlength < 2^16");
  }
  if ([k signum] == 0) {
    return LibOrgBouncycastleMathEcWNafUtil_EMPTY_INTS;
  }
  IOSIntArray *wnaf = [IOSIntArray newArrayWithLength:[k bitLength] / width + 1];
  jint pow2 = JreLShift32(1, width);
  jint mask = pow2 - 1;
  jint sign = JreURShift32(pow2, 1);
  jboolean carry = false;
  jint length = 0;
  jint pos = 0;
  while (pos <= [k bitLength]) {
    if ([k testBitWithInt:pos] == carry) {
      ++pos;
      continue;
    }
    k = [k shiftRightWithInt:pos];
    jint digit = [((JavaMathBigInteger *) nil_chk(k)) intValue] & mask;
    if (carry) {
      ++digit;
    }
    carry = ((digit & sign) != 0);
    if (carry) {
      digit -= pow2;
    }
    jint zeroes = length > 0 ? pos - 1 : pos;
    *IOSIntArray_GetRef(wnaf, length++) = (JreLShift32(digit, 16)) | zeroes;
    pos = width;
  }
  if (wnaf->size_ > length) {
    wnaf = LibOrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(wnaf, length);
  }
  return wnaf;
}

IOSByteArray *LibOrgBouncycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *g, JavaMathBigInteger *h) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  jint digits = JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(g)) bitLength], [((JavaMathBigInteger *) nil_chk(h)) bitLength]) + 1;
  IOSByteArray *jsf = [IOSByteArray newArrayWithLength:digits];
  JavaMathBigInteger *k0 = g;
  JavaMathBigInteger *k1 = h;
  jint j = 0;
  jint d0 = 0;
  jint d1 = 0;
  jint offset = 0;
  while ((d0 | d1) != 0 || [((JavaMathBigInteger *) nil_chk(k0)) bitLength] > offset || [((JavaMathBigInteger *) nil_chk(k1)) bitLength] > offset) {
    jint n0 = ((JreURShift32([((JavaMathBigInteger *) nil_chk(k0)) intValue], offset)) + d0) & 7;
    jint n1 = ((JreURShift32([((JavaMathBigInteger *) nil_chk(k1)) intValue], offset)) + d1) & 7;
    jint u0 = n0 & 1;
    if (u0 != 0) {
      u0 -= (n0 & 2);
      if ((n0 + u0) == 4 && (n1 & 3) == 2) {
        u0 = -u0;
      }
    }
    jint u1 = n1 & 1;
    if (u1 != 0) {
      u1 -= (n1 & 2);
      if ((n1 + u1) == 4 && (n0 & 3) == 2) {
        u1 = -u1;
      }
    }
    if ((JreLShift32(d0, 1)) == 1 + u0) {
      d0 ^= 1;
    }
    if ((JreLShift32(d1, 1)) == 1 + u1) {
      d1 ^= 1;
    }
    if (++offset == 30) {
      offset = 0;
      k0 = [k0 shiftRightWithInt:30];
      k1 = [k1 shiftRightWithInt:30];
    }
    *IOSByteArray_GetRef(jsf, j++) = (jbyte) ((JreLShift32(u0, 4)) | (u1 & (jint) 0xF));
  }
  if (jsf->size_ > j) {
    jsf = LibOrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(jsf, j);
  }
  return jsf;
}

IOSByteArray *LibOrgBouncycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    return LibOrgBouncycastleMathEcWNafUtil_EMPTY_BYTES;
  }
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  jint digits = [((JavaMathBigInteger *) nil_chk(_3k)) bitLength] - 1;
  IOSByteArray *naf = [IOSByteArray newArrayWithLength:digits];
  JavaMathBigInteger *diff = [_3k xor__WithJavaMathBigInteger:k];
  for (jint i = 1; i < digits; ++i) {
    if ([((JavaMathBigInteger *) nil_chk(diff)) testBitWithInt:i]) {
      *IOSByteArray_GetRef(naf, i - 1) = (jbyte) ([k testBitWithInt:i] ? -1 : 1);
      ++i;
    }
  }
  *IOSByteArray_GetRef(naf, digits - 1) = 1;
  return naf;
}

IOSByteArray *LibOrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  if (width == 2) {
    return LibOrgBouncycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(k);
  }
  if (width < 2 || width > 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'width' must be in the range [2, 8]");
  }
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    return LibOrgBouncycastleMathEcWNafUtil_EMPTY_BYTES;
  }
  IOSByteArray *wnaf = [IOSByteArray newArrayWithLength:[k bitLength] + 1];
  jint pow2 = JreLShift32(1, width);
  jint mask = pow2 - 1;
  jint sign = JreURShift32(pow2, 1);
  jboolean carry = false;
  jint length = 0;
  jint pos = 0;
  while (pos <= [k bitLength]) {
    if ([k testBitWithInt:pos] == carry) {
      ++pos;
      continue;
    }
    k = [k shiftRightWithInt:pos];
    jint digit = [((JavaMathBigInteger *) nil_chk(k)) intValue] & mask;
    if (carry) {
      ++digit;
    }
    carry = ((digit & sign) != 0);
    if (carry) {
      digit -= pow2;
    }
    length += (length > 0) ? pos - 1 : pos;
    *IOSByteArray_GetRef(wnaf, length++) = (jbyte) digit;
    pos = width;
  }
  if (wnaf->size_ > length) {
    wnaf = LibOrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(wnaf, length);
  }
  return wnaf;
}

jint LibOrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    return 0;
  }
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  JavaMathBigInteger *diff = [((JavaMathBigInteger *) nil_chk(_3k)) xor__WithJavaMathBigInteger:k];
  return [((JavaMathBigInteger *) nil_chk(diff)) bitCount];
}

LibOrgBouncycastleMathEcWNafPreCompInfo *LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *p) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  return LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo_([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve])) getPreCompInfoWithLibOrgBouncycastleMathEcECPoint:p withNSString:LibOrgBouncycastleMathEcWNafUtil_PRECOMP_NAME]);
}

LibOrgBouncycastleMathEcWNafPreCompInfo *LibOrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo_(id<LibOrgBouncycastleMathEcPreCompInfo> preCompInfo) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  return ([preCompInfo isKindOfClass:[LibOrgBouncycastleMathEcWNafPreCompInfo class]]) ? (LibOrgBouncycastleMathEcWNafPreCompInfo *) cast_chk(preCompInfo, [LibOrgBouncycastleMathEcWNafPreCompInfo class]) : nil;
}

jint LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_(jint bits) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  return LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(bits, LibOrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS);
}

jint LibOrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(jint bits, IOSIntArray *windowSizeCutoffs) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  jint w = 0;
  for (; w < ((IOSIntArray *) nil_chk(windowSizeCutoffs))->size_; ++w) {
    if (bits < IOSIntArray_Get(windowSizeCutoffs, w)) {
      break;
    }
  }
  return w + 2;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcWNafUtil_mapPointWithPrecompWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_withLibOrgBouncycastleMathEcECPointMap_(LibOrgBouncycastleMathEcECPoint *p, jint width, jboolean includeNegated, id<LibOrgBouncycastleMathEcECPointMap> pointMap) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  LibOrgBouncycastleMathEcECCurve *c = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  LibOrgBouncycastleMathEcWNafPreCompInfo *wnafPreCompP = LibOrgBouncycastleMathEcWNafUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_(p, width, includeNegated);
  LibOrgBouncycastleMathEcECPoint *q = [((id<LibOrgBouncycastleMathEcECPointMap>) nil_chk(pointMap)) mapWithLibOrgBouncycastleMathEcECPoint:p];
  (void) [((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) precomputeWithLibOrgBouncycastleMathEcECPoint:q withNSString:LibOrgBouncycastleMathEcWNafUtil_PRECOMP_NAME withLibOrgBouncycastleMathEcPreCompCallback:new_LibOrgBouncycastleMathEcWNafUtil_1_initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_(wnafPreCompP, pointMap, includeNegated)];
  return q;
}

LibOrgBouncycastleMathEcWNafPreCompInfo *LibOrgBouncycastleMathEcWNafUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_withInt_withBoolean_(LibOrgBouncycastleMathEcECPoint *p, jint width, jboolean includeNegated) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  LibOrgBouncycastleMathEcECCurve *c = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  return (LibOrgBouncycastleMathEcWNafPreCompInfo *) cast_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) precomputeWithLibOrgBouncycastleMathEcECPoint:p withNSString:LibOrgBouncycastleMathEcWNafUtil_PRECOMP_NAME withLibOrgBouncycastleMathEcPreCompCallback:new_LibOrgBouncycastleMathEcWNafUtil_2_initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_(width, includeNegated, p, c)], [LibOrgBouncycastleMathEcWNafPreCompInfo class]);
}

IOSByteArray *LibOrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(IOSByteArray *a, jint length) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, result->size_);
  return result;
}

IOSIntArray *LibOrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(IOSIntArray *a, jint length) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, result->size_);
  return result;
}

IOSObjectArray *LibOrgBouncycastleMathEcWNafUtil_resizeTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(IOSObjectArray *a, jint length) {
  LibOrgBouncycastleMathEcWNafUtil_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:length type:LibOrgBouncycastleMathEcECPoint_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, ((IOSObjectArray *) nil_chk(a))->size_);
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcWNafUtil)

@implementation LibOrgBouncycastleMathEcWNafUtil_1

- (instancetype)initWithLibOrgBouncycastleMathEcWNafPreCompInfo:(LibOrgBouncycastleMathEcWNafPreCompInfo *)capture$0
                         withLibOrgBouncycastleMathEcECPointMap:(id<LibOrgBouncycastleMathEcECPointMap>)capture$1
                                                    withBoolean:(jboolean)capture$2 {
  LibOrgBouncycastleMathEcWNafUtil_1_initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_(self, capture$0, capture$1, capture$2);
  return self;
}

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)existing {
  LibOrgBouncycastleMathEcWNafPreCompInfo *result = new_LibOrgBouncycastleMathEcWNafPreCompInfo_init();
  LibOrgBouncycastleMathEcECPoint *twiceP = [((LibOrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(val$wnafPreCompP_)) getTwice];
  if (twiceP != nil) {
    LibOrgBouncycastleMathEcECPoint *twiceQ = [((id<LibOrgBouncycastleMathEcECPointMap>) nil_chk(val$pointMap_)) mapWithLibOrgBouncycastleMathEcECPoint:twiceP];
    [result setTwiceWithLibOrgBouncycastleMathEcECPoint:twiceQ];
  }
  IOSObjectArray *preCompP = [val$wnafPreCompP_ getPreComp];
  IOSObjectArray *preCompQ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(preCompP))->size_ type:LibOrgBouncycastleMathEcECPoint_class_()];
  for (jint i = 0; i < preCompP->size_; ++i) {
    (void) IOSObjectArray_Set(preCompQ, i, [((id<LibOrgBouncycastleMathEcECPointMap>) nil_chk(val$pointMap_)) mapWithLibOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(preCompP, i)]);
  }
  [result setPreCompWithLibOrgBouncycastleMathEcECPointArray:preCompQ];
  if (val$includeNegated_) {
    IOSObjectArray *preCompNegQ = [IOSObjectArray newArrayWithLength:preCompQ->size_ type:LibOrgBouncycastleMathEcECPoint_class_()];
    for (jint i = 0; i < preCompNegQ->size_; ++i) {
      (void) IOSObjectArray_Set(preCompNegQ, i, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(preCompQ, i))) negate]);
    }
    [result setPreCompNegWithLibOrgBouncycastleMathEcECPointArray:preCompNegQ];
  }
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcPreCompInfo;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcWNafPreCompInfo:withLibOrgBouncycastleMathEcECPointMap:withBoolean:);
  methods[1].selector = @selector(precomputeWithLibOrgBouncycastleMathEcPreCompInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$wnafPreCompP_", "LLibOrgBouncycastleMathEcWNafPreCompInfo;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$pointMap_", "LLibOrgBouncycastleMathEcECPointMap;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$includeNegated_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "precompute", "LLibOrgBouncycastleMathEcPreCompInfo;", "LLibOrgBouncycastleMathEcWNafUtil;", "mapPointWithPrecompWithLibOrgBouncycastleMathEcECPoint:withInt:withBoolean:withLibOrgBouncycastleMathEcECPointMap:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcWNafUtil_1 = { "", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8018, 2, 3, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleMathEcWNafUtil_1;
}

@end

void LibOrgBouncycastleMathEcWNafUtil_1_initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_(LibOrgBouncycastleMathEcWNafUtil_1 *self, LibOrgBouncycastleMathEcWNafPreCompInfo *capture$0, id<LibOrgBouncycastleMathEcECPointMap> capture$1, jboolean capture$2) {
  self->val$wnafPreCompP_ = capture$0;
  self->val$pointMap_ = capture$1;
  self->val$includeNegated_ = capture$2;
  NSObject_init(self);
}

LibOrgBouncycastleMathEcWNafUtil_1 *new_LibOrgBouncycastleMathEcWNafUtil_1_initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_(LibOrgBouncycastleMathEcWNafPreCompInfo *capture$0, id<LibOrgBouncycastleMathEcECPointMap> capture$1, jboolean capture$2) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcWNafUtil_1, initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_, capture$0, capture$1, capture$2)
}

LibOrgBouncycastleMathEcWNafUtil_1 *create_LibOrgBouncycastleMathEcWNafUtil_1_initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_(LibOrgBouncycastleMathEcWNafPreCompInfo *capture$0, id<LibOrgBouncycastleMathEcECPointMap> capture$1, jboolean capture$2) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcWNafUtil_1, initWithLibOrgBouncycastleMathEcWNafPreCompInfo_withLibOrgBouncycastleMathEcECPointMap_withBoolean_, capture$0, capture$1, capture$2)
}

@implementation LibOrgBouncycastleMathEcWNafUtil_2

- (instancetype)initWithInt:(jint)capture$0
                withBoolean:(jboolean)capture$1
withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)capture$2
withLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)capture$3 {
  LibOrgBouncycastleMathEcWNafUtil_2_initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)existing {
  LibOrgBouncycastleMathEcWNafPreCompInfo *existingWNaf = ([existing isKindOfClass:[LibOrgBouncycastleMathEcWNafPreCompInfo class]]) ? (LibOrgBouncycastleMathEcWNafPreCompInfo *) cast_chk(existing, [LibOrgBouncycastleMathEcWNafPreCompInfo class]) : nil;
  jint reqPreCompLen = JreLShift32(1, JavaLangMath_maxWithInt_withInt_(0, val$width_ - 2));
  if (LibOrgBouncycastleMathEcWNafUtil_2_checkExistingWithLibOrgBouncycastleMathEcWNafPreCompInfo_withInt_withBoolean_(self, existingWNaf, reqPreCompLen, val$includeNegated_)) {
    return existingWNaf;
  }
  IOSObjectArray *preComp = nil;
  IOSObjectArray *preCompNeg = nil;
  LibOrgBouncycastleMathEcECPoint *twiceP = nil;
  if (existingWNaf != nil) {
    preComp = [existingWNaf getPreComp];
    preCompNeg = [existingWNaf getPreCompNeg];
    twiceP = [existingWNaf getTwice];
  }
  jint iniPreCompLen = 0;
  if (preComp == nil) {
    preComp = JreLoadStatic(LibOrgBouncycastleMathEcWNafUtil, EMPTY_POINTS);
  }
  else {
    iniPreCompLen = preComp->size_;
  }
  if (iniPreCompLen < reqPreCompLen) {
    preComp = LibOrgBouncycastleMathEcWNafUtil_resizeTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(preComp, reqPreCompLen);
    if (reqPreCompLen == 1) {
      (void) IOSObjectArray_Set(nil_chk(preComp), 0, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(val$p_)) normalize]);
    }
    else {
      jint curPreCompLen = iniPreCompLen;
      if (curPreCompLen == 0) {
        (void) IOSObjectArray_Set(nil_chk(preComp), 0, val$p_);
        curPreCompLen = 1;
      }
      LibOrgBouncycastleMathEcECFieldElement *iso = nil;
      if (reqPreCompLen == 2) {
        (void) IOSObjectArray_Set(nil_chk(preComp), 1, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(val$p_)) threeTimes]);
      }
      else {
        LibOrgBouncycastleMathEcECPoint *isoTwiceP = twiceP;
        LibOrgBouncycastleMathEcECPoint *last = IOSObjectArray_Get(nil_chk(preComp), curPreCompLen - 1);
        if (isoTwiceP == nil) {
          isoTwiceP = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(preComp, 0))) twice];
          twiceP = isoTwiceP;
          if (![((LibOrgBouncycastleMathEcECPoint *) nil_chk(twiceP)) isInfinity] && LibOrgBouncycastleMathEcECAlgorithms_isFpCurveWithLibOrgBouncycastleMathEcECCurve_(val$c_) && [((LibOrgBouncycastleMathEcECCurve *) nil_chk(val$c_)) getFieldSize] >= 64) {
            switch ([((LibOrgBouncycastleMathEcECCurve *) nil_chk(val$c_)) getCoordinateSystem]) {
              case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
              case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
              case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
              {
                iso = [twiceP getZCoordWithInt:0];
                isoTwiceP = [val$c_ createPointWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([twiceP getXCoord])) toBigInteger] withJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([twiceP getYCoord])) toBigInteger]];
                LibOrgBouncycastleMathEcECFieldElement *iso2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(iso)) square];
                LibOrgBouncycastleMathEcECFieldElement *iso3 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(iso2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:iso];
                last = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(last)) scaleXWithLibOrgBouncycastleMathEcECFieldElement:iso2])) scaleYWithLibOrgBouncycastleMathEcECFieldElement:iso3];
                if (iniPreCompLen == 0) {
                  (void) IOSObjectArray_Set(preComp, 0, last);
                }
                break;
              }
            }
          }
        }
        while (curPreCompLen < reqPreCompLen) {
          (void) IOSObjectArray_Set(preComp, curPreCompLen++, last = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(last)) addWithLibOrgBouncycastleMathEcECPoint:isoTwiceP]);
        }
      }
      [((LibOrgBouncycastleMathEcECCurve *) nil_chk(val$c_)) normalizeAllWithLibOrgBouncycastleMathEcECPointArray:preComp withInt:iniPreCompLen withInt:reqPreCompLen - iniPreCompLen withLibOrgBouncycastleMathEcECFieldElement:iso];
    }
  }
  if (val$includeNegated_) {
    jint pos;
    if (preCompNeg == nil) {
      pos = 0;
      preCompNeg = [IOSObjectArray newArrayWithLength:reqPreCompLen type:LibOrgBouncycastleMathEcECPoint_class_()];
    }
    else {
      pos = preCompNeg->size_;
      if (pos < reqPreCompLen) {
        preCompNeg = LibOrgBouncycastleMathEcWNafUtil_resizeTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(preCompNeg, reqPreCompLen);
      }
    }
    while (pos < reqPreCompLen) {
      (void) IOSObjectArray_Set(nil_chk(preCompNeg), pos, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(preComp), pos))) negate]);
      ++pos;
    }
  }
  LibOrgBouncycastleMathEcWNafPreCompInfo *result = new_LibOrgBouncycastleMathEcWNafPreCompInfo_init();
  [result setPreCompWithLibOrgBouncycastleMathEcECPointArray:preComp];
  [result setPreCompNegWithLibOrgBouncycastleMathEcECPointArray:preCompNeg];
  [result setTwiceWithLibOrgBouncycastleMathEcECPoint:twiceP];
  return result;
}

- (jboolean)checkExistingWithLibOrgBouncycastleMathEcWNafPreCompInfo:(LibOrgBouncycastleMathEcWNafPreCompInfo *)existingWNaf
                                                             withInt:(jint)reqPreCompLen
                                                         withBoolean:(jboolean)includeNegated {
  return LibOrgBouncycastleMathEcWNafUtil_2_checkExistingWithLibOrgBouncycastleMathEcWNafPreCompInfo_withInt_withBoolean_(self, existingWNaf, reqPreCompLen, includeNegated);
}

- (jboolean)checkTableWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)table
                                                       withInt:(jint)reqLen {
  return LibOrgBouncycastleMathEcWNafUtil_2_checkTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(self, table, reqLen);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcPreCompInfo;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withBoolean:withLibOrgBouncycastleMathEcECPoint:withLibOrgBouncycastleMathEcECCurve:);
  methods[1].selector = @selector(precomputeWithLibOrgBouncycastleMathEcPreCompInfo:);
  methods[2].selector = @selector(checkExistingWithLibOrgBouncycastleMathEcWNafPreCompInfo:withInt:withBoolean:);
  methods[3].selector = @selector(checkTableWithLibOrgBouncycastleMathEcECPointArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$width_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$includeNegated_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$p_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$c_", "LLibOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "precompute", "LLibOrgBouncycastleMathEcPreCompInfo;", "checkExisting", "LLibOrgBouncycastleMathEcWNafPreCompInfo;IZ", "checkTable", "[LLibOrgBouncycastleMathEcECPoint;I", "LLibOrgBouncycastleMathEcWNafUtil;", "precomputeWithLibOrgBouncycastleMathEcECPoint:withInt:withBoolean:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcWNafUtil_2 = { "", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8018, 4, 4, 6, -1, 7, -1, -1 };
  return &_LibOrgBouncycastleMathEcWNafUtil_2;
}

@end

void LibOrgBouncycastleMathEcWNafUtil_2_initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcWNafUtil_2 *self, jint capture$0, jboolean capture$1, LibOrgBouncycastleMathEcECPoint *capture$2, LibOrgBouncycastleMathEcECCurve *capture$3) {
  self->val$width_ = capture$0;
  self->val$includeNegated_ = capture$1;
  self->val$p_ = capture$2;
  self->val$c_ = capture$3;
  NSObject_init(self);
}

LibOrgBouncycastleMathEcWNafUtil_2 *new_LibOrgBouncycastleMathEcWNafUtil_2_initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_(jint capture$0, jboolean capture$1, LibOrgBouncycastleMathEcECPoint *capture$2, LibOrgBouncycastleMathEcECCurve *capture$3) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcWNafUtil_2, initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_, capture$0, capture$1, capture$2, capture$3)
}

LibOrgBouncycastleMathEcWNafUtil_2 *create_LibOrgBouncycastleMathEcWNafUtil_2_initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_(jint capture$0, jboolean capture$1, LibOrgBouncycastleMathEcECPoint *capture$2, LibOrgBouncycastleMathEcECCurve *capture$3) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcWNafUtil_2, initWithInt_withBoolean_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleMathEcECCurve_, capture$0, capture$1, capture$2, capture$3)
}

jboolean LibOrgBouncycastleMathEcWNafUtil_2_checkExistingWithLibOrgBouncycastleMathEcWNafPreCompInfo_withInt_withBoolean_(LibOrgBouncycastleMathEcWNafUtil_2 *self, LibOrgBouncycastleMathEcWNafPreCompInfo *existingWNaf, jint reqPreCompLen, jboolean includeNegated) {
  return existingWNaf != nil && LibOrgBouncycastleMathEcWNafUtil_2_checkTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(self, [existingWNaf getPreComp], reqPreCompLen) && (!includeNegated || LibOrgBouncycastleMathEcWNafUtil_2_checkTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(self, [existingWNaf getPreCompNeg], reqPreCompLen));
}

jboolean LibOrgBouncycastleMathEcWNafUtil_2_checkTableWithLibOrgBouncycastleMathEcECPointArray_withInt_(LibOrgBouncycastleMathEcWNafUtil_2 *self, IOSObjectArray *table, jint reqLen) {
  return table != nil && table->size_ >= reqLen;
}
