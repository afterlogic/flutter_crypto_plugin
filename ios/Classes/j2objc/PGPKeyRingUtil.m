//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/key/collection/PGPKeyRingUtil.java
//

#include "J2ObjC_source.h"
#include "OpenPgpV4Fingerprint.h"
#include "PGPKeyRingUtil.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPSecretKeyRing.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@interface LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil () {
 @public
  LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeys_;
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeys_;
}

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil, publicKeys_, LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil, secretKeys_, LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)

@implementation LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)publicKeys
                    withLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secretKeys {
  LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(self, publicKeys, secretKeys);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing:(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)publicKeys {
  LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(self, publicKeys);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)secretKeys {
  LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(self, secretKeys);
  return self;
}

- (jlong)getKeyId {
  return [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([self getMasterKey])) getKeyID];
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getMasterKey {
  LibOrgBouncycastleOpenpgpPGPPublicKey *publicKey = [self hasSecretKeys] ? [((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secretKeys_)) getPublicKey] : [((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(publicKeys_)) getPublicKey];
  if (![publicKey isMasterKey]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Expected master key is not a master key");
  }
  return publicKey;
}

- (LibComAfterlogicPgpKeyOpenPgpV4Fingerprint *)getV4Fingerprint {
  return new_LibComAfterlogicPgpKeyOpenPgpV4Fingerprint_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_([self getMasterKey]);
}

- (jboolean)hasSecretKeys {
  return secretKeys_ != nil;
}

- (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)getPublicKeys {
  return publicKeys_;
}

- (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)getSecretKeys {
  return secretKeys_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyOpenPgpV4Fingerprint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing:withLibOrgBouncycastleOpenpgpPGPSecretKeyRing:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing:);
  methods[3].selector = @selector(getKeyId);
  methods[4].selector = @selector(getMasterKey);
  methods[5].selector = @selector(getV4Fingerprint);
  methods[6].selector = @selector(hasSecretKeys);
  methods[7].selector = @selector(getPublicKeys);
  methods[8].selector = @selector(getSecretKeys);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publicKeys_", "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "secretKeys_", "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil = { "PGPKeyRingUtil", "lib.com.afterlogic.pgp.key.collection", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil;
}

@end

void LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *self, LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeys, LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeys) {
  NSObject_init(self);
  if ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKeyRing *) nil_chk(publicKeys)) getPublicKey])) getKeyID] != [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPSecretKeyRing *) nil_chk(secretKeys)) getPublicKey])) getKeyID]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"publicKeys and secretKeys must have the same master key.");
  }
  self->publicKeys_ = publicKeys;
  self->secretKeys_ = secretKeys;
}

LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *new_LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeys, LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeys) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil, initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_, publicKeys, secretKeys)
}

LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *create_LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeys, LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeys) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil, initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_, publicKeys, secretKeys)
}

void LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *self, LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeys) {
  NSObject_init(self);
  self->publicKeys_ = publicKeys;
}

LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *new_LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeys) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil, initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_, publicKeys)
}

LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *create_LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_(LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeys) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil, initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_, publicKeys)
}

void LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *self, LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeys) {
  NSObject_init(self);
  self->secretKeys_ = secretKeys;
}

LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *new_LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeys) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil, initWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_, secretKeys)
}

LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *create_LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeys) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil, initWithLibOrgBouncycastleOpenpgpPGPSecretKeyRing_, secretKeys)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil)
