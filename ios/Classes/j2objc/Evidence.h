//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cms/Evidence.java
//

#ifndef Evidence_H
#define Evidence_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CmsTimeStampTokenEvidence;

@interface LibOrgBouncycastleAsn1CmsEvidence : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmsTimeStampTokenEvidence:(LibOrgBouncycastleAsn1CmsTimeStampTokenEvidence *)tstEvidence;

+ (LibOrgBouncycastleAsn1CmsEvidence *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1CmsTimeStampTokenEvidence *)getTstEvidence;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmsEvidence)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmsEvidence_initWithLibOrgBouncycastleAsn1CmsTimeStampTokenEvidence_(LibOrgBouncycastleAsn1CmsEvidence *self, LibOrgBouncycastleAsn1CmsTimeStampTokenEvidence *tstEvidence);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsEvidence *new_LibOrgBouncycastleAsn1CmsEvidence_initWithLibOrgBouncycastleAsn1CmsTimeStampTokenEvidence_(LibOrgBouncycastleAsn1CmsTimeStampTokenEvidence *tstEvidence) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsEvidence *create_LibOrgBouncycastleAsn1CmsEvidence_initWithLibOrgBouncycastleAsn1CmsTimeStampTokenEvidence_(LibOrgBouncycastleAsn1CmsTimeStampTokenEvidence *tstEvidence);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmsEvidence *LibOrgBouncycastleAsn1CmsEvidence_getInstanceWithId_(id obj);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmsEvidence)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Evidence_H
