//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsSRTPUtils.java
//

#ifndef TlsSRTPUtils_H
#define TlsSRTPUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaLangInteger;
@class JavaUtilHashtable;
@class LibOrgBouncycastleCryptoTlsUseSRTPData;

@interface LibOrgBouncycastleCryptoTlsTlsSRTPUtils : NSObject
@property (readonly, class) JavaLangInteger *EXT_use_srtp NS_SWIFT_NAME(EXT_use_srtp);

+ (JavaLangInteger *)EXT_use_srtp;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)addUseSRTPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
      withLibOrgBouncycastleCryptoTlsUseSRTPData:(LibOrgBouncycastleCryptoTlsUseSRTPData *)useSRTPData;

+ (IOSByteArray *)createUseSRTPExtensionWithLibOrgBouncycastleCryptoTlsUseSRTPData:(LibOrgBouncycastleCryptoTlsUseSRTPData *)useSRTPData;

+ (LibOrgBouncycastleCryptoTlsUseSRTPData *)getUseSRTPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (LibOrgBouncycastleCryptoTlsUseSRTPData *)readUseSRTPExtensionWithByteArray:(IOSByteArray *)extensionData;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsSRTPUtils)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsSRTPUtils_get_EXT_use_srtp(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsSRTPUtils_EXT_use_srtp;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsSRTPUtils, EXT_use_srtp, JavaLangInteger *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsSRTPUtils_init(LibOrgBouncycastleCryptoTlsTlsSRTPUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsSRTPUtils *new_LibOrgBouncycastleCryptoTlsTlsSRTPUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsSRTPUtils *create_LibOrgBouncycastleCryptoTlsTlsSRTPUtils_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsSRTPUtils_addUseSRTPExtensionWithJavaUtilHashtable_withLibOrgBouncycastleCryptoTlsUseSRTPData_(JavaUtilHashtable *extensions, LibOrgBouncycastleCryptoTlsUseSRTPData *useSRTPData);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsUseSRTPData *LibOrgBouncycastleCryptoTlsTlsSRTPUtils_getUseSRTPExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsSRTPUtils_createUseSRTPExtensionWithLibOrgBouncycastleCryptoTlsUseSRTPData_(LibOrgBouncycastleCryptoTlsUseSRTPData *useSRTPData);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsUseSRTPData *LibOrgBouncycastleCryptoTlsTlsSRTPUtils_readUseSRTPExtensionWithByteArray_(IOSByteArray *extensionData);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsSRTPUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsSRTPUtils_H
