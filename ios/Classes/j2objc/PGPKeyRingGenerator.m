//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPKeyRingGenerator.java
//

#include "BCPGKey.h"
#include "J2ObjC_source.h"
#include "PBESecretKeyEncryptor.h"
#include "PGPContentSignerBuilder.h"
#include "PGPDigestCalculator.h"
#include "PGPException.h"
#include "PGPKeyPair.h"
#include "PGPKeyRingGenerator.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPSecretKey.h"
#include "PGPSecretKeyRing.h"
#include "PGPSignature.h"
#include "PGPSignatureGenerator.h"
#include "PGPSignatureSubpacketVector.h"
#include "PublicKeyPacket.h"
#include "PublicSubkeyPacket.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleOpenpgpPGPKeyRingGenerator () {
 @public
  LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator_;
  LibOrgBouncycastleOpenpgpPGPKeyPair *masterKey_;
  LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks_;
  LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> keySignerBuilder_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator, keyEncryptor_, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator, checksumCalculator_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator, masterKey_, LibOrgBouncycastleOpenpgpPGPKeyPair *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator, hashedPcks_, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator, unhashedPcks_, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator, keySignerBuilder_, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder>)

@implementation LibOrgBouncycastleOpenpgpPGPKeyRingGenerator

- (instancetype)initWithInt:(jint)certificationLevel
withLibOrgBouncycastleOpenpgpPGPKeyPair:(LibOrgBouncycastleOpenpgpPGPKeyPair *)masterKey
               withNSString:(NSString *)id_
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)checksumCalculator
withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)hashedPcks
withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)unhashedPcks
withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:(id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder>)keySignerBuilder
withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)keyEncryptor {
  LibOrgBouncycastleOpenpgpPGPKeyRingGenerator_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(self, certificationLevel, masterKey, id_, checksumCalculator, hashedPcks, unhashedPcks, keySignerBuilder, keyEncryptor);
  return self;
}

- (void)addSubKeyWithLibOrgBouncycastleOpenpgpPGPKeyPair:(LibOrgBouncycastleOpenpgpPGPKeyPair *)keyPair {
  [self addSubKeyWithLibOrgBouncycastleOpenpgpPGPKeyPair:keyPair withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:hashedPcks_ withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:unhashedPcks_];
}

- (void)addSubKeyWithLibOrgBouncycastleOpenpgpPGPKeyPair:(LibOrgBouncycastleOpenpgpPGPKeyPair *)keyPair
withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)hashedPcks
withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)unhashedPcks {
  @try {
    LibOrgBouncycastleOpenpgpPGPSignatureGenerator *sGen = new_LibOrgBouncycastleOpenpgpPGPSignatureGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_(keySignerBuilder_);
    [sGen init__WithInt:LibOrgBouncycastleOpenpgpPGPSignature_SUBKEY_BINDING withLibOrgBouncycastleOpenpgpPGPPrivateKey:[((LibOrgBouncycastleOpenpgpPGPKeyPair *) nil_chk(masterKey_)) getPrivateKey]];
    [sGen setHashedSubpacketsWithLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:hashedPcks];
    [sGen setUnhashedSubpacketsWithLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:unhashedPcks];
    id<JavaUtilList> subSigs = new_JavaUtilArrayList_init();
    [subSigs addWithId:[sGen generateCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:[((LibOrgBouncycastleOpenpgpPGPKeyPair *) nil_chk(masterKey_)) getPublicKey] withLibOrgBouncycastleOpenpgpPGPPublicKey:[((LibOrgBouncycastleOpenpgpPGPKeyPair *) nil_chk(keyPair)) getPublicKey]]];
    LibOrgBouncycastleOpenpgpPGPPublicKey *pubSubKey = new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleBcpgTrustPacket_withJavaUtilList_([keyPair getPublicKey], nil, subSigs);
    pubSubKey->publicPk_ = new_LibOrgBouncycastleBcpgPublicSubkeyPacket_initWithInt_withJavaUtilDate_withLibOrgBouncycastleBcpgBCPGKey_([pubSubKey getAlgorithm], [pubSubKey getCreationTime], [((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(pubSubKey->publicPk_)) getKey]);
    [((id<JavaUtilList>) nil_chk(keys_)) addWithId:new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_([keyPair getPrivateKey], pubSubKey, checksumCalculator_, keyEncryptor_)];
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"exception adding subkey: ", e);
  }
}

- (LibOrgBouncycastleOpenpgpPGPSecretKeyRing *)generateSecretKeyRing {
  return new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaUtilList_(keys_);
}

- (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)generatePublicKeyRing {
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(keys_)) iterator];
  id<JavaUtilList> pubKeys = new_JavaUtilArrayList_init();
  [pubKeys addWithId:[((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([((id<JavaUtilIterator>) nil_chk(it)) next], [LibOrgBouncycastleOpenpgpPGPSecretKey class])))) getPublicKey]];
  while ([it hasNext]) {
    [pubKeys addWithId:[((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSecretKey *) cast_chk([it next], [LibOrgBouncycastleOpenpgpPGPSecretKey class])))) getPublicKey]];
  }
  return new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaUtilList_(pubKeys);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, 1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKeyRing;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLibOrgBouncycastleOpenpgpPGPKeyPair:withNSString:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:);
  methods[1].selector = @selector(addSubKeyWithLibOrgBouncycastleOpenpgpPGPKeyPair:);
  methods[2].selector = @selector(addSubKeyWithLibOrgBouncycastleOpenpgpPGPKeyPair:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:);
  methods[3].selector = @selector(generateSecretKeyRing);
  methods[4].selector = @selector(generatePublicKeyRing);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keyEncryptor_", "LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checksumCalculator_", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "masterKey_", "LLibOrgBouncycastleOpenpgpPGPKeyPair;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashedPcks_", "LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unhashedPcks_", "LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySignerBuilder_", "LLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILLibOrgBouncycastleOpenpgpPGPKeyPair;LNSString;LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", "LLibOrgBouncycastleOpenpgpPGPException;", "addSubKey", "LLibOrgBouncycastleOpenpgpPGPKeyPair;", "LLibOrgBouncycastleOpenpgpPGPKeyPair;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPKeyRingGenerator = { "PGPKeyRingGenerator", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 5, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPKeyRingGenerator;
}

@end

void LibOrgBouncycastleOpenpgpPGPKeyRingGenerator_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator *self, jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *masterKey, NSString *id_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> keySignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  NSObject_init(self);
  self->keys_ = new_JavaUtilArrayList_init();
  self->masterKey_ = masterKey;
  self->keyEncryptor_ = keyEncryptor;
  self->checksumCalculator_ = checksumCalculator;
  self->keySignerBuilder_ = keySignerBuilder;
  self->hashedPcks_ = hashedPcks;
  self->unhashedPcks_ = unhashedPcks;
  [self->keys_ addWithId:new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(certificationLevel, masterKey, id_, checksumCalculator, hashedPcks, unhashedPcks, keySignerBuilder, keyEncryptor)];
}

LibOrgBouncycastleOpenpgpPGPKeyRingGenerator *new_LibOrgBouncycastleOpenpgpPGPKeyRingGenerator_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *masterKey, NSString *id_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> keySignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator, initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, certificationLevel, masterKey, id_, checksumCalculator, hashedPcks, unhashedPcks, keySignerBuilder, keyEncryptor)
}

LibOrgBouncycastleOpenpgpPGPKeyRingGenerator *create_LibOrgBouncycastleOpenpgpPGPKeyRingGenerator_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *masterKey, NSString *id_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> keySignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator, initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, certificationLevel, masterKey, id_, checksumCalculator, hashedPcks, unhashedPcks, keySignerBuilder, keyEncryptor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPKeyRingGenerator)
