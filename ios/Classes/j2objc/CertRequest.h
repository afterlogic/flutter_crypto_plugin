//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/CertRequest.java
//

#ifndef CertRequest_H
#define CertRequest_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Integer;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CrmfCertTemplate;
@class LibOrgBouncycastleAsn1CrmfControls;

@interface LibOrgBouncycastleAsn1CrmfCertRequest : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)certReqId
                         withLibOrgBouncycastleAsn1CrmfCertTemplate:(LibOrgBouncycastleAsn1CrmfCertTemplate *)certTemplate
                             withLibOrgBouncycastleAsn1CrmfControls:(LibOrgBouncycastleAsn1CrmfControls *)controls;

- (instancetype __nonnull)initWithInt:(jint)certReqId
withLibOrgBouncycastleAsn1CrmfCertTemplate:(LibOrgBouncycastleAsn1CrmfCertTemplate *)certTemplate
withLibOrgBouncycastleAsn1CrmfControls:(LibOrgBouncycastleAsn1CrmfControls *)controls;

- (LibOrgBouncycastleAsn1ASN1Integer *)getCertReqId;

- (LibOrgBouncycastleAsn1CrmfCertTemplate *)getCertTemplate;

- (LibOrgBouncycastleAsn1CrmfControls *)getControls;

+ (LibOrgBouncycastleAsn1CrmfCertRequest *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CrmfCertRequest)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertRequest *LibOrgBouncycastleAsn1CrmfCertRequest_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfCertRequest_initWithInt_withLibOrgBouncycastleAsn1CrmfCertTemplate_withLibOrgBouncycastleAsn1CrmfControls_(LibOrgBouncycastleAsn1CrmfCertRequest *self, jint certReqId, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate, LibOrgBouncycastleAsn1CrmfControls *controls);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertRequest *new_LibOrgBouncycastleAsn1CrmfCertRequest_initWithInt_withLibOrgBouncycastleAsn1CrmfCertTemplate_withLibOrgBouncycastleAsn1CrmfControls_(jint certReqId, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate, LibOrgBouncycastleAsn1CrmfControls *controls) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertRequest *create_LibOrgBouncycastleAsn1CrmfCertRequest_initWithInt_withLibOrgBouncycastleAsn1CrmfCertTemplate_withLibOrgBouncycastleAsn1CrmfControls_(jint certReqId, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate, LibOrgBouncycastleAsn1CrmfControls *controls);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfCertRequest_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CrmfCertTemplate_withLibOrgBouncycastleAsn1CrmfControls_(LibOrgBouncycastleAsn1CrmfCertRequest *self, LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate, LibOrgBouncycastleAsn1CrmfControls *controls);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertRequest *new_LibOrgBouncycastleAsn1CrmfCertRequest_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CrmfCertTemplate_withLibOrgBouncycastleAsn1CrmfControls_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate, LibOrgBouncycastleAsn1CrmfControls *controls) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertRequest *create_LibOrgBouncycastleAsn1CrmfCertRequest_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CrmfCertTemplate_withLibOrgBouncycastleAsn1CrmfControls_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate, LibOrgBouncycastleAsn1CrmfControls *controls);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfCertRequest)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertRequest_H
