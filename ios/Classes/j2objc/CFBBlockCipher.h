//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/CFBBlockCipher.java
//

#ifndef CFBBlockCipher_H
#define CFBBlockCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "StreamBlockCipher.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoModesCFBBlockCipher : LibOrgBouncycastleCryptoStreamBlockCipher

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                              withInt:(jint)bitBlockSize;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (IOSByteArray *)getCurrentIV;

- (void)init__WithBoolean:(jboolean)encrypting
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

#pragma mark Protected

- (jbyte)calculateByteWithByte:(jbyte)inArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoModesCFBBlockCipher)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoModesCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleCryptoModesCFBBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoModesCFBBlockCipher *new_LibOrgBouncycastleCryptoModesCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoModesCFBBlockCipher *create_LibOrgBouncycastleCryptoModesCFBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint bitBlockSize);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoModesCFBBlockCipher)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CFBBlockCipher_H
