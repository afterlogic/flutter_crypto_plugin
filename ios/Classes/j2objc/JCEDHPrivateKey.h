//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/JCEDHPrivateKey.java
//

#ifndef JCEDHPrivateKey_H
#define JCEDHPrivateKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PKCS12BagAttributeCarrier.h"
#include "javax/crypto/interfaces/DHPrivateKey.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaxCryptoSpecDHParameterSpec;
@class JavaxCryptoSpecDHPrivateKeySpec;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters;
@protocol JavaUtilEnumeration;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleJceProviderJCEDHPrivateKey : NSObject < JavaxCryptoInterfacesDHPrivateKey, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier > {
 @public
  JavaMathBigInteger *x_;
}
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

- (NSString *)getAlgorithm;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

- (id<JavaUtilEnumeration>)getBagAttributeKeys;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (JavaxCryptoSpecDHParameterSpec *)getParams;

- (JavaMathBigInteger *)getX;

- (void)setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                              withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)attribute;

#pragma mark Protected

- (instancetype __nonnull)init;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaxCryptoInterfacesDHPrivateKey:(id<JavaxCryptoInterfacesDHPrivateKey>)key;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)params;

- (instancetype __nonnull)initWithJavaxCryptoSpecDHPrivateKeySpec:(JavaxCryptoSpecDHPrivateKeySpec *)spec;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)info;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderJCEDHPrivateKey)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEDHPrivateKey, x_, JavaMathBigInteger *)

inline jlong LibOrgBouncycastleJceProviderJCEDHPrivateKey_get_serialVersionUID(void);
#define LibOrgBouncycastleJceProviderJCEDHPrivateKey_serialVersionUID 311058815616901812LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderJCEDHPrivateKey, serialVersionUID, jlong)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEDHPrivateKey_init(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, id<JavaxCryptoInterfacesDHPrivateKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(id<JavaxCryptoInterfacesDHPrivateKey> key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoInterfacesDHPrivateKey_(id<JavaxCryptoInterfacesDHPrivateKey> key);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, JavaxCryptoSpecDHPrivateKeySpec *spec);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(JavaxCryptoSpecDHPrivateKeySpec *spec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithJavaxCryptoSpecDHPrivateKeySpec_(JavaxCryptoSpecDHPrivateKeySpec *spec);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *info);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_(LibOrgBouncycastleJceProviderJCEDHPrivateKey *self, LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *new_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJCEDHPrivateKey *create_LibOrgBouncycastleJceProviderJCEDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderJCEDHPrivateKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // JCEDHPrivateKey_H
