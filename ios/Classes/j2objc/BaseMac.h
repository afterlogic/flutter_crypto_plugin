//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/BaseMac.java
//

#ifndef BaseMac_H
#define BaseMac_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PBE.h"
#include "javax/crypto/MacSpi.h"

@class IOSByteArray;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoMac;

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac : JavaxCryptoMacSpi < LibOrgBouncycastleJcajceProviderSymmetricUtilPBE >

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)macEngine;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)macEngine
                                                      withInt:(jint)scheme
                                                      withInt:(jint)pbeHash
                                                      withInt:(jint)keySize;

- (IOSByteArray *)engineDoFinal;

- (jint)engineGetMacLength;

- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params;

- (void)engineReset;

- (void)engineUpdateWithByte:(jbyte)input;

- (void)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)offset
                          withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac *self, id<LibOrgBouncycastleCryptoMac> macEngine);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoMac> macEngine) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(id<LibOrgBouncycastleCryptoMac> macEngine);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_withInt_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac *self, id<LibOrgBouncycastleCryptoMac> macEngine, jint scheme, jint pbeHash, jint keySize);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac *new_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoMac> macEngine, jint scheme, jint pbeHash, jint keySize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac *create_LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoMac> macEngine, jint scheme, jint pbeHash, jint keySize);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BaseMac_H
