//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/key/selection/key/impl/SignedByMasterKey.java
//

#include "BcPGPContentVerifierBuilderProvider.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PGPException.h"
#include "PGPPublicKey.h"
#include "PGPSignature.h"
#include "PublicKeySelectionStrategy.h"
#include "SignedByMasterKey.h"
#include "java/lang/Long.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

inline JavaUtilLoggingLogger *LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_get_LOGGER(void);
static JavaUtilLoggingLogger *LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey, LOGGER, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey)

@implementation LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_LOGGER, "LLibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey = { "SignedByMasterKey", "lib.com.afterlogic.pgp.key.selection.key.impl", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, 1, -1, -1, -1 };
  return &_LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey;
}

+ (void)initialize {
  if (self == [LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey class]) {
    LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_([LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_class_() getName]);
    J2OBJC_SET_INITIALIZED(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey)
  }
}

@end

void LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_init(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey *self) {
  NSObject_init(self);
}

LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey *new_LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_init() {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey, init)
}

LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey *create_LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_init() {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey)

@implementation LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)acceptWithId:(LibOrgBouncycastleOpenpgpPGPPublicKey *)masterKey
                  withId:(LibOrgBouncycastleOpenpgpPGPPublicKey *)key {
  if (JavaUtilArrays_equalsWithByteArray_withByteArray_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(masterKey)) getFingerprint], [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(key)) getFingerprint])) {
    return true;
  }
  id<JavaUtilIterator> signatures = [key getSignaturesForKeyIDWithLong:[masterKey getKeyID]];
  while ([((id<JavaUtilIterator>) nil_chk(signatures)) hasNext]) {
    LibOrgBouncycastleOpenpgpPGPSignature *signature = [signatures next];
    if ([((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(signature)) getSignatureType] == LibOrgBouncycastleOpenpgpPGPSignature_SUBKEY_BINDING) {
      @try {
        [signature init__WithLibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilderProvider:new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPContentVerifierBuilderProvider_init() withLibOrgBouncycastleOpenpgpPGPPublicKey:masterKey];
        return [signature verifyCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey:masterKey withLibOrgBouncycastleOpenpgpPGPPublicKey:key];
      }
      @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$$", @"Could not verify subkey signature of key ", JavaLangLong_toHexStringWithLong_([masterKey getKeyID]), @" on key ", JavaLangLong_toHexStringWithLong_([key getKeyID]))];
        return false;
      }
    }
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleOpenpgpPGPPublicKey;", "LLibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey;", "Llib/com/afterlogic/pgp/key/selection/key/PublicKeySelectionStrategy<Llib/org/bouncycastle/openpgp/PGPPublicKey;>;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy = { "PubkeySelectionStrategy", "lib.com.afterlogic.pgp.key.selection.key.impl", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy;
}

@end

void LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy_init(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy *self) {
  LibComAfterlogicPgpKeySelectionKeyPublicKeySelectionStrategy_init(self);
}

LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy *new_LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy_init() {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy, init)
}

LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy *create_LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy_init() {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpKeySelectionKeyImplSignedByMasterKey_PubkeySelectionStrategy)
