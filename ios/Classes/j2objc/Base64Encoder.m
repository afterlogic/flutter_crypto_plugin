//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/encoders/Base64Encoder.java
//

#include "Base64Encoder.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"

@interface LibOrgBouncycastleUtilEncodersBase64Encoder ()

- (jboolean)ignoreWithChar:(jchar)c;

- (jint)nextIWithByteArray:(IOSByteArray *)data
                   withInt:(jint)i
                   withInt:(jint)finish;

- (jint)decodeLastBlockWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                     withChar:(jchar)c1
                                     withChar:(jchar)c2
                                     withChar:(jchar)c3
                                     withChar:(jchar)c4;

- (jint)nextIWithNSString:(NSString *)data
                  withInt:(jint)i
                  withInt:(jint)finish;

@end

__attribute__((unused)) static jboolean LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(LibOrgBouncycastleUtilEncodersBase64Encoder *self, jchar c);

__attribute__((unused)) static jint LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(LibOrgBouncycastleUtilEncodersBase64Encoder *self, IOSByteArray *data, jint i, jint finish);

__attribute__((unused)) static jint LibOrgBouncycastleUtilEncodersBase64Encoder_decodeLastBlockWithJavaIoOutputStream_withChar_withChar_withChar_withChar_(LibOrgBouncycastleUtilEncodersBase64Encoder *self, JavaIoOutputStream *outArg, jchar c1, jchar c2, jchar c3, jchar c4);

__attribute__((unused)) static jint LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(LibOrgBouncycastleUtilEncodersBase64Encoder *self, NSString *data, jint i, jint finish);

@implementation LibOrgBouncycastleUtilEncodersBase64Encoder

- (void)initialiseDecodingTable {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(decodingTable_))->size_; i++) {
    *IOSByteArray_GetRef(decodingTable_, i) = (jbyte) (jint) 0xff;
  }
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(encodingTable_))->size_; i++) {
    *IOSByteArray_GetRef(decodingTable_, IOSByteArray_Get(encodingTable_, i)) = (jbyte) i;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleUtilEncodersBase64Encoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)encodeWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  jint modulus = length % 3;
  jint dataLength = (length - modulus);
  jint a1;
  jint a2;
  jint a3;
  for (jint i = off; i < off + dataLength; i += 3) {
    a1 = IOSByteArray_Get(nil_chk(data), i) & (jint) 0xff;
    a2 = IOSByteArray_Get(data, i + 1) & (jint) 0xff;
    a3 = IOSByteArray_Get(data, i + 2) & (jint) 0xff;
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:IOSByteArray_Get(nil_chk(encodingTable_), (JreURShift32(a1, 2)) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(encodingTable_, ((JreLShift32(a1, 4)) | (JreURShift32(a2, 4))) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(encodingTable_, ((JreLShift32(a2, 2)) | (JreURShift32(a3, 6))) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(encodingTable_, a3 & (jint) 0x3f)];
  }
  jint b1;
  jint b2;
  jint b3;
  jint d1;
  jint d2;
  switch (modulus) {
    case 0:
    break;
    case 1:
    d1 = IOSByteArray_Get(nil_chk(data), off + dataLength) & (jint) 0xff;
    b1 = (JreURShift32(d1, 2)) & (jint) 0x3f;
    b2 = (JreLShift32(d1, 4)) & (jint) 0x3f;
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:IOSByteArray_Get(nil_chk(encodingTable_), b1)];
    [outArg writeWithInt:IOSByteArray_Get(encodingTable_, b2)];
    [outArg writeWithInt:padding_];
    [outArg writeWithInt:padding_];
    break;
    case 2:
    d1 = IOSByteArray_Get(nil_chk(data), off + dataLength) & (jint) 0xff;
    d2 = IOSByteArray_Get(data, off + dataLength + 1) & (jint) 0xff;
    b1 = (JreURShift32(d1, 2)) & (jint) 0x3f;
    b2 = ((JreLShift32(d1, 4)) | (JreURShift32(d2, 4))) & (jint) 0x3f;
    b3 = (JreLShift32(d2, 2)) & (jint) 0x3f;
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:IOSByteArray_Get(nil_chk(encodingTable_), b1)];
    [outArg writeWithInt:IOSByteArray_Get(encodingTable_, b2)];
    [outArg writeWithInt:IOSByteArray_Get(encodingTable_, b3)];
    [outArg writeWithInt:padding_];
    break;
  }
  return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);
}

- (jboolean)ignoreWithChar:(jchar)c {
  return LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(self, c);
}

- (jint)decodeWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  jbyte b1;
  jbyte b2;
  jbyte b3;
  jbyte b4;
  jint outLen = 0;
  jint end = off + length;
  while (end > off) {
    if (!LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(self, (jchar) IOSByteArray_Get(nil_chk(data), end - 1))) {
      break;
    }
    end--;
  }
  if (end == 0) {
    return 0;
  }
  jint i = 0;
  jint finish = end;
  while (finish > off && i != 4) {
    if (!LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(self, (jchar) IOSByteArray_Get(nil_chk(data), finish - 1))) {
      i++;
    }
    finish--;
  }
  i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, off, finish);
  while (i < finish) {
    b1 = IOSByteArray_Get(nil_chk(decodingTable_), IOSByteArray_Get(nil_chk(data), i++));
    i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, i, finish);
    b2 = IOSByteArray_Get(decodingTable_, IOSByteArray_Get(data, i++));
    i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, i, finish);
    b3 = IOSByteArray_Get(decodingTable_, IOSByteArray_Get(data, i++));
    i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, i, finish);
    b4 = IOSByteArray_Get(decodingTable_, IOSByteArray_Get(data, i++));
    if ((b1 | b2 | b3 | b4) < 0) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid characters encountered in base64 data");
    }
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(JreLShift32(b1, 2)) | (JreRShift32(b2, 4))];
    [outArg writeWithInt:(JreLShift32(b2, 4)) | (JreRShift32(b3, 2))];
    [outArg writeWithInt:(JreLShift32(b3, 6)) | b4];
    outLen += 3;
    i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, i, finish);
  }
  jint e0 = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, i, end);
  jint e1 = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, e0 + 1, end);
  jint e2 = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, e1 + 1, end);
  jint e3 = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, e2 + 1, end);
  outLen += LibOrgBouncycastleUtilEncodersBase64Encoder_decodeLastBlockWithJavaIoOutputStream_withChar_withChar_withChar_withChar_(self, outArg, (jchar) IOSByteArray_Get(nil_chk(data), e0), (jchar) IOSByteArray_Get(data, e1), (jchar) IOSByteArray_Get(data, e2), (jchar) IOSByteArray_Get(data, e3));
  return outLen;
}

- (jint)nextIWithByteArray:(IOSByteArray *)data
                   withInt:(jint)i
                   withInt:(jint)finish {
  return LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(self, data, i, finish);
}

- (jint)decodeWithNSString:(NSString *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  jbyte b1;
  jbyte b2;
  jbyte b3;
  jbyte b4;
  jint length = 0;
  jint end = [((NSString *) nil_chk(data)) java_length];
  while (end > 0) {
    if (!LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(self, [data charAtWithInt:end - 1])) {
      break;
    }
    end--;
  }
  if (end == 0) {
    return 0;
  }
  jint i = 0;
  jint finish = end;
  while (finish > 0 && i != 4) {
    if (!LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(self, [data charAtWithInt:finish - 1])) {
      i++;
    }
    finish--;
  }
  i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, 0, finish);
  while (i < finish) {
    b1 = IOSByteArray_Get(nil_chk(decodingTable_), [data charAtWithInt:i++]);
    i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, i, finish);
    b2 = IOSByteArray_Get(decodingTable_, [data charAtWithInt:i++]);
    i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, i, finish);
    b3 = IOSByteArray_Get(decodingTable_, [data charAtWithInt:i++]);
    i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, i, finish);
    b4 = IOSByteArray_Get(decodingTable_, [data charAtWithInt:i++]);
    if ((b1 | b2 | b3 | b4) < 0) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid characters encountered in base64 data");
    }
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(JreLShift32(b1, 2)) | (JreRShift32(b2, 4))];
    [outArg writeWithInt:(JreLShift32(b2, 4)) | (JreRShift32(b3, 2))];
    [outArg writeWithInt:(JreLShift32(b3, 6)) | b4];
    length += 3;
    i = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, i, finish);
  }
  jint e0 = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, i, end);
  jint e1 = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, e0 + 1, end);
  jint e2 = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, e1 + 1, end);
  jint e3 = LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, e2 + 1, end);
  length += LibOrgBouncycastleUtilEncodersBase64Encoder_decodeLastBlockWithJavaIoOutputStream_withChar_withChar_withChar_withChar_(self, outArg, [data charAtWithInt:e0], [data charAtWithInt:e1], [data charAtWithInt:e2], [data charAtWithInt:e3]);
  return length;
}

- (jint)decodeLastBlockWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                     withChar:(jchar)c1
                                     withChar:(jchar)c2
                                     withChar:(jchar)c3
                                     withChar:(jchar)c4 {
  return LibOrgBouncycastleUtilEncodersBase64Encoder_decodeLastBlockWithJavaIoOutputStream_withChar_withChar_withChar_withChar_(self, outArg, c1, c2, c3, c4);
}

- (jint)nextIWithNSString:(NSString *)data
                  withInt:(jint)i
                  withInt:(jint)finish {
  return LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(self, data, i, finish);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 8, 2, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 10, 2, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initialiseDecodingTable);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(encodeWithByteArray:withInt:withInt:withJavaIoOutputStream:);
  methods[3].selector = @selector(ignoreWithChar:);
  methods[4].selector = @selector(decodeWithByteArray:withInt:withInt:withJavaIoOutputStream:);
  methods[5].selector = @selector(nextIWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(decodeWithNSString:withJavaIoOutputStream:);
  methods[7].selector = @selector(decodeLastBlockWithJavaIoOutputStream:withChar:withChar:withChar:withChar:);
  methods[8].selector = @selector(nextIWithNSString:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encodingTable_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "padding_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "decodingTable_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "[BIILJavaIoOutputStream;", "LJavaIoIOException;", "ignore", "C", "decode", "nextI", "[BII", "LNSString;LJavaIoOutputStream;", "decodeLastBlock", "LJavaIoOutputStream;CCCC", "LNSString;II" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilEncodersBase64Encoder = { "Base64Encoder", "lib.org.bouncycastle.util.encoders", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleUtilEncodersBase64Encoder;
}

@end

void LibOrgBouncycastleUtilEncodersBase64Encoder_init(LibOrgBouncycastleUtilEncodersBase64Encoder *self) {
  NSObject_init(self);
  self->encodingTable_ = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G', (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N', (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U', (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z', (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g', (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n', (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u', (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z', (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5', (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '+', (jbyte) '/' } count:64];
  self->padding_ = (jbyte) '=';
  self->decodingTable_ = [IOSByteArray newArrayWithLength:128];
  [self initialiseDecodingTable];
}

LibOrgBouncycastleUtilEncodersBase64Encoder *new_LibOrgBouncycastleUtilEncodersBase64Encoder_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilEncodersBase64Encoder, init)
}

LibOrgBouncycastleUtilEncodersBase64Encoder *create_LibOrgBouncycastleUtilEncodersBase64Encoder_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilEncodersBase64Encoder, init)
}

jboolean LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(LibOrgBouncycastleUtilEncodersBase64Encoder *self, jchar c) {
  return (c == 0x000a || c == 0x000d || c == 0x0009 || c == ' ');
}

jint LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithByteArray_withInt_withInt_(LibOrgBouncycastleUtilEncodersBase64Encoder *self, IOSByteArray *data, jint i, jint finish) {
  while ((i < finish) && LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(self, (jchar) IOSByteArray_Get(nil_chk(data), i))) {
    i++;
  }
  return i;
}

jint LibOrgBouncycastleUtilEncodersBase64Encoder_decodeLastBlockWithJavaIoOutputStream_withChar_withChar_withChar_withChar_(LibOrgBouncycastleUtilEncodersBase64Encoder *self, JavaIoOutputStream *outArg, jchar c1, jchar c2, jchar c3, jchar c4) {
  jbyte b1;
  jbyte b2;
  jbyte b3;
  jbyte b4;
  if (c3 == self->padding_) {
    if (c4 != self->padding_) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid characters encountered at end of base64 data");
    }
    b1 = IOSByteArray_Get(nil_chk(self->decodingTable_), c1);
    b2 = IOSByteArray_Get(self->decodingTable_, c2);
    if ((b1 | b2) < 0) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid characters encountered at end of base64 data");
    }
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(JreLShift32(b1, 2)) | (JreRShift32(b2, 4))];
    return 1;
  }
  else if (c4 == self->padding_) {
    b1 = IOSByteArray_Get(nil_chk(self->decodingTable_), c1);
    b2 = IOSByteArray_Get(self->decodingTable_, c2);
    b3 = IOSByteArray_Get(self->decodingTable_, c3);
    if ((b1 | b2 | b3) < 0) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid characters encountered at end of base64 data");
    }
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(JreLShift32(b1, 2)) | (JreRShift32(b2, 4))];
    [outArg writeWithInt:(JreLShift32(b2, 4)) | (JreRShift32(b3, 2))];
    return 2;
  }
  else {
    b1 = IOSByteArray_Get(nil_chk(self->decodingTable_), c1);
    b2 = IOSByteArray_Get(self->decodingTable_, c2);
    b3 = IOSByteArray_Get(self->decodingTable_, c3);
    b4 = IOSByteArray_Get(self->decodingTable_, c4);
    if ((b1 | b2 | b3 | b4) < 0) {
      @throw new_JavaIoIOException_initWithNSString_(@"invalid characters encountered at end of base64 data");
    }
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(JreLShift32(b1, 2)) | (JreRShift32(b2, 4))];
    [outArg writeWithInt:(JreLShift32(b2, 4)) | (JreRShift32(b3, 2))];
    [outArg writeWithInt:(JreLShift32(b3, 6)) | b4];
    return 3;
  }
}

jint LibOrgBouncycastleUtilEncodersBase64Encoder_nextIWithNSString_withInt_withInt_(LibOrgBouncycastleUtilEncodersBase64Encoder *self, NSString *data, jint i, jint finish) {
  while ((i < finish) && LibOrgBouncycastleUtilEncodersBase64Encoder_ignoreWithChar_(self, [((NSString *) nil_chk(data)) charAtWithInt:i])) {
    i++;
  }
  return i;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilEncodersBase64Encoder)
