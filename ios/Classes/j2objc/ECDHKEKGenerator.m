//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/kdf/ECDHKEKGenerator.java
//

#include "ASN1EncodableVector.h"
#include "ASN1Encoding.h"
#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "DERNull.h"
#include "DEROctetString.h"
#include "DERSequence.h"
#include "DERTaggedObject.h"
#include "DHKDFParameters.h"
#include "DataLengthException.h"
#include "DerivationParameters.h"
#include "Digest.h"
#include "DigestDerivationFunction.h"
#include "ECDHKEKGenerator.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KDF2BytesGenerator.h"
#include "KDFParameters.h"
#include "Pack.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator () {
 @public
  id<LibOrgBouncycastleCryptoDigestDerivationFunction> kdf_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm_;
  jint keySize_;
  IOSByteArray *z_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator, kdf_, id<LibOrgBouncycastleCryptoDigestDerivationFunction>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator, algorithm_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator, z_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoDerivationParameters:(id<LibOrgBouncycastleCryptoDerivationParameters>)param {
  LibOrgBouncycastleCryptoAgreementKdfDHKDFParameters *params = (LibOrgBouncycastleCryptoAgreementKdfDHKDFParameters *) cast_chk(param, [LibOrgBouncycastleCryptoAgreementKdfDHKDFParameters class]);
  self->algorithm_ = [((LibOrgBouncycastleCryptoAgreementKdfDHKDFParameters *) nil_chk(params)) getAlgorithm];
  self->keySize_ = [params getKeySize];
  self->z_ = [params getZ];
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return [((id<LibOrgBouncycastleCryptoDigestDerivationFunction>) nil_chk(kdf_)) getDigest];
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  if (outOff + len > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"output buffer too small");
  }
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(algorithm_, JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE))];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(true, 2, new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(LibOrgBouncycastleUtilPack_intToBigEndianWithInt_(keySize_)))];
  @try {
    [((id<LibOrgBouncycastleCryptoDigestDerivationFunction>) nil_chk(kdf_)) init__WithLibOrgBouncycastleCryptoDerivationParameters:new_LibOrgBouncycastleCryptoParamsKDFParameters_initWithByteArray_withByteArray_(z_, [new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER])];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to initialise kdf: ", [e getMessage]));
  }
  return [((id<LibOrgBouncycastleCryptoDigestDerivationFunction>) nil_chk(kdf_)) generateBytesWithByteArray:outArg withInt:outOff withInt:len];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "kdf_", "LLibOrgBouncycastleCryptoDigestDerivationFunction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "algorithm_", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "z_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoDerivationParameters;", "generateBytes", "[BII", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator = { "ECDHKEKGenerator", "lib.org.bouncycastle.crypto.agreement.kdf", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator;
}

@end

void LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->kdf_ = new_LibOrgBouncycastleCryptoGeneratorsKDF2BytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(digest);
}

LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator *new_LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator *create_LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementKdfECDHKEKGenerator)
