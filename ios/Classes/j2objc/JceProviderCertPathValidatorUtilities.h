//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/JceProviderCertPathValidatorUtilities.java
//

#ifndef JceProviderCertPathValidatorUtilities_H
#define JceProviderCertPathValidatorUtilities_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaSecurityCertCertPath;
@class JavaSecurityCertTrustAnchor;
@class JavaSecurityCertX509CRL;
@class JavaSecurityCertX509CRLSelector;
@class JavaSecurityCertX509Certificate;
@class JavaUtilDate;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@class LibOrgBouncycastleAsn1X509CRLDistPoint;
@class LibOrgBouncycastleAsn1X509DistributionPoint;
@class LibOrgBouncycastleJcajcePKIXCertStoreSelector;
@class LibOrgBouncycastleJcajcePKIXExtendedParameters;
@class LibOrgBouncycastleJceProviderJcePKIXCRLUtil;
@class LibOrgBouncycastleJceProviderJceProviderCertStatus;
@class LibOrgBouncycastleJceProviderPKIXPolicyNode;
@protocol JavaSecurityCertX509Extension;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol LibOrgBouncycastleJcajceUtilJcaJceHelper;

@interface LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities : NSObject
@property (readonly, class) LibOrgBouncycastleJceProviderJcePKIXCRLUtil *CRL_UTIL NS_SWIFT_NAME(CRL_UTIL);
@property (readonly, copy, class) NSString *CERTIFICATE_POLICIES NS_SWIFT_NAME(CERTIFICATE_POLICIES);
@property (readonly, copy, class) NSString *BASIC_CONSTRAINTS NS_SWIFT_NAME(BASIC_CONSTRAINTS);
@property (readonly, copy, class) NSString *POLICY_MAPPINGS NS_SWIFT_NAME(POLICY_MAPPINGS);
@property (readonly, copy, class) NSString *SUBJECT_ALTERNATIVE_NAME NS_SWIFT_NAME(SUBJECT_ALTERNATIVE_NAME);
@property (readonly, copy, class) NSString *NAME_CONSTRAINTS NS_SWIFT_NAME(NAME_CONSTRAINTS);
@property (readonly, copy, class) NSString *KEY_USAGE NS_SWIFT_NAME(KEY_USAGE);
@property (readonly, copy, class) NSString *INHIBIT_ANY_POLICY NS_SWIFT_NAME(INHIBIT_ANY_POLICY);
@property (readonly, copy, class) NSString *ISSUING_DISTRIBUTION_POINT NS_SWIFT_NAME(ISSUING_DISTRIBUTION_POINT);
@property (readonly, copy, class) NSString *DELTA_CRL_INDICATOR NS_SWIFT_NAME(DELTA_CRL_INDICATOR);
@property (readonly, copy, class) NSString *POLICY_CONSTRAINTS NS_SWIFT_NAME(POLICY_CONSTRAINTS);
@property (readonly, copy, class) NSString *FRESHEST_CRL NS_SWIFT_NAME(FRESHEST_CRL);
@property (readonly, copy, class) NSString *CRL_DISTRIBUTION_POINTS NS_SWIFT_NAME(CRL_DISTRIBUTION_POINTS);
@property (readonly, copy, class) NSString *AUTHORITY_KEY_IDENTIFIER NS_SWIFT_NAME(AUTHORITY_KEY_IDENTIFIER);
@property (readonly, copy, class) NSString *ANY_POLICY NS_SWIFT_NAME(ANY_POLICY);
@property (readonly, copy, class) NSString *CRL_NUMBER NS_SWIFT_NAME(CRL_NUMBER);
@property (readonly, class) jint KEY_CERT_SIGN NS_SWIFT_NAME(KEY_CERT_SIGN);
@property (readonly, class) jint CRL_SIGN NS_SWIFT_NAME(CRL_SIGN);
@property (readonly, class) IOSObjectArray *crlReasons NS_SWIFT_NAME(crlReasons);

+ (LibOrgBouncycastleJceProviderJcePKIXCRLUtil *)CRL_UTIL;

+ (NSString *)CERTIFICATE_POLICIES;

+ (NSString *)BASIC_CONSTRAINTS;

+ (NSString *)POLICY_MAPPINGS;

+ (NSString *)SUBJECT_ALTERNATIVE_NAME;

+ (NSString *)NAME_CONSTRAINTS;

+ (NSString *)KEY_USAGE;

+ (NSString *)INHIBIT_ANY_POLICY;

+ (NSString *)ISSUING_DISTRIBUTION_POINT;

+ (NSString *)DELTA_CRL_INDICATOR;

+ (NSString *)POLICY_CONSTRAINTS;

+ (NSString *)FRESHEST_CRL;

+ (NSString *)CRL_DISTRIBUTION_POINTS;

+ (NSString *)AUTHORITY_KEY_IDENTIFIER;

+ (NSString *)ANY_POLICY;

+ (NSString *)CRL_NUMBER;

+ (jint)KEY_CERT_SIGN;

+ (jint)CRL_SIGN;

+ (IOSObjectArray *)crlReasons;

#pragma mark Protected

+ (id<JavaUtilCollection>)findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector:(LibOrgBouncycastleJcajcePKIXCertStoreSelector *)certSelect
                                                                           withJavaUtilList:(id<JavaUtilList>)certStores;

+ (JavaSecurityCertTrustAnchor *)findTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withJavaUtilSet:(id<JavaUtilSet>)trustAnchors;

+ (JavaSecurityCertTrustAnchor *)findTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withJavaUtilSet:(id<JavaUtilSet>)trustAnchors
                                                                       withNSString:(NSString *)sigProvider;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getAlgorithmIdentifierWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

+ (void)getCertStatusWithJavaUtilDate:(JavaUtilDate *)validDate
          withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                               withId:(id)cert
withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus;

+ (id<JavaUtilSet>)getCompleteCRLsWithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
                                                                           withId:(id)cert
                                                                 withJavaUtilDate:(JavaUtilDate *)currentDate
                               withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX;

+ (void)getCRLIssuersFromDistributionPointWithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
                                                                   withJavaUtilCollection:(id<JavaUtilCollection>)issuerPrincipals
                                                      withJavaSecurityCertX509CRLSelector:(JavaSecurityCertX509CRLSelector *)selector;

+ (id<JavaUtilSet>)getDeltaCRLsWithJavaUtilDate:(JavaUtilDate *)validityDate
                    withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completeCRL
                               withJavaUtilList:(id<JavaUtilList>)certStores
                               withJavaUtilList:(id<JavaUtilList>)pkixCrlStores;

+ (LibOrgBouncycastleAsn1ASN1Primitive *)getExtensionValueWithJavaSecurityCertX509Extension:(id<JavaSecurityCertX509Extension>)ext
                                                                               withNSString:(NSString *)oid;

+ (id<JavaSecurityPublicKey>)getNextWorkingKeyWithJavaUtilList:(id<JavaUtilList>)certs
                                                       withInt:(jint)index
                  withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper;

+ (id<JavaUtilSet>)getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)qualifiers;

+ (JavaUtilDate *)getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                                                         withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                              withInt:(jint)index;

+ (JavaUtilDate *)getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX;

+ (jboolean)isAnyPolicyWithJavaUtilSet:(id<JavaUtilSet>)policySet;

+ (jboolean)isSelfIssuedWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

+ (void)prepareNextCertB1WithInt:(jint)i
           withJavaUtilListArray:(IOSObjectArray *)policyNodes
                    withNSString:(NSString *)id_p
                 withJavaUtilMap:(id<JavaUtilMap>)m_idp
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)prepareNextCertB2WithInt:(jint)i
                                                    withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                             withNSString:(NSString *)id_p
                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree;

+ (jboolean)processCertD1iWithInt:(jint)index
            withJavaUtilListArray:(IOSObjectArray *)policyNodes
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)pOid
                  withJavaUtilSet:(id<JavaUtilSet>)pq;

+ (void)processCertD1iiWithInt:(jint)index
         withJavaUtilListArray:(IOSObjectArray *)policyNodes
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)_poid
               withJavaUtilSet:(id<JavaUtilSet>)_pq;

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                                           withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                                 withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_node;

+ (void)verifyX509CertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey
                                                    withNSString:(NSString *)sigProvider;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (void)checkCRLsNotEmptyWithJavaUtilSet:(id<JavaUtilSet>)crls
                                  withId:(id)cert;

+ (id<JavaUtilCollection>)findIssuerCertsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                            withJavaUtilList:(id<JavaUtilList>)certStores
                                                            withJavaUtilList:(id<JavaUtilList>)pkixCertStores;

+ (id<JavaUtilList>)getAdditionalStoresFromAltNamesWithByteArray:(IOSByteArray *)issuerAlternativeName
                                                 withJavaUtilMap:(id<JavaUtilMap>)altNameCertStoreMap;

+ (id<JavaUtilList>)getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint:(LibOrgBouncycastleAsn1X509CRLDistPoint *)crldp
                                                                                          withJavaUtilMap:(id<JavaUtilMap>)namedCRLStoreMap;

+ (jboolean)isIssuerTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                   withJavaUtilSet:(id<JavaUtilSet>)trustAnchors
                                                      withNSString:(NSString *)sigProvider;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities)

inline LibOrgBouncycastleJceProviderJcePKIXCRLUtil *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_CRL_UTIL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJcePKIXCRLUtil *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_UTIL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, CRL_UTIL, LibOrgBouncycastleJceProviderJcePKIXCRLUtil *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_CERTIFICATE_POLICIES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, CERTIFICATE_POLICIES, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_BASIC_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, BASIC_CONSTRAINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_POLICY_MAPPINGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, POLICY_MAPPINGS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_SUBJECT_ALTERNATIVE_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, SUBJECT_ALTERNATIVE_NAME, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_NAME_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, NAME_CONSTRAINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_KEY_USAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_KEY_USAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, KEY_USAGE, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_INHIBIT_ANY_POLICY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, INHIBIT_ANY_POLICY, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_ISSUING_DISTRIBUTION_POINT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, ISSUING_DISTRIBUTION_POINT, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_DELTA_CRL_INDICATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, DELTA_CRL_INDICATOR, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_POLICY_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, POLICY_CONSTRAINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_FRESHEST_CRL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_FRESHEST_CRL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, FRESHEST_CRL, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_CRL_DISTRIBUTION_POINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, CRL_DISTRIBUTION_POINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_AUTHORITY_KEY_IDENTIFIER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, AUTHORITY_KEY_IDENTIFIER, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_ANY_POLICY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_ANY_POLICY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, ANY_POLICY, NSString *)

inline NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_CRL_NUMBER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, CRL_NUMBER, NSString *)

inline jint LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_KEY_CERT_SIGN(void);
#define LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_KEY_CERT_SIGN 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, KEY_CERT_SIGN, jint)

inline jint LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_CRL_SIGN(void);
#define LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_CRL_SIGN 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, CRL_SIGN, jint)

inline IOSObjectArray *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_get_crlReasons(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_crlReasons;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities, crlReasons, IOSObjectArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_init(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities *new_LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities *create_LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_init(void);

FOUNDATION_EXPORT JavaSecurityCertTrustAnchor *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors);

FOUNDATION_EXPORT JavaSecurityCertTrustAnchor *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors, NSString *sigProvider);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors, NSString *sigProvider);

FOUNDATION_EXPORT id<JavaUtilList> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_(IOSByteArray *issuerAlternativeName, id<JavaUtilMap> altNameCertStoreMap);

FOUNDATION_EXPORT JavaUtilDate *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(id<JavaSecurityCertX509Extension> ext, NSString *oid);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key);

FOUNDATION_EXPORT id<JavaUtilSet> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *qualifiers);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *_node);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *pOid, id<JavaUtilSet> pq);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *_poid, id<JavaUtilSet> _pq);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(jint i, IOSObjectArray *policyNodes, NSString *id_p, id<JavaUtilMap> m_idp, JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(jint i, IOSObjectArray *policyNodes, NSString *id_p, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(id<JavaUtilSet> policySet);

FOUNDATION_EXPORT id<JavaUtilCollection> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(LibOrgBouncycastleJcajcePKIXCertStoreSelector *certSelect, id<JavaUtilList> certStores);

FOUNDATION_EXPORT id<JavaUtilList> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint_withJavaUtilMap_(LibOrgBouncycastleAsn1X509CRLDistPoint *crldp, id<JavaUtilMap> namedCRLStoreMap);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCRLIssuersFromDistributionPointWithLibOrgBouncycastleAsn1X509DistributionPoint_withJavaUtilCollection_withJavaSecurityCertX509CRLSelector_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id<JavaUtilCollection> issuerPrincipals, JavaSecurityCertX509CRLSelector *selector);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *crl, id cert, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus);

FOUNDATION_EXPORT id<JavaUtilSet> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(JavaUtilDate *validityDate, JavaSecurityCertX509CRL *completeCRL, id<JavaUtilList> certStores, id<JavaUtilList> pkixCrlStores);

FOUNDATION_EXPORT id<JavaUtilSet> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCompleteCRLsWithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id cert, JavaUtilDate *currentDate, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX);

FOUNDATION_EXPORT JavaUtilDate *LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<JavaUtilList> certs, jint index, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper);

FOUNDATION_EXPORT id<JavaUtilCollection> LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(JavaSecurityCertX509Certificate *cert, id<JavaUtilList> certStores, id<JavaUtilList> pkixCertStores);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaSecurityPublicKey> publicKey, NSString *sigProvider);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_checkCRLsNotEmptyWithJavaUtilSet_withId_(id<JavaUtilSet> crls, id cert);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // JceProviderCertPathValidatorUtilities_H
