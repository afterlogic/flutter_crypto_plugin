//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/Pack.java
//

#ifndef Pack_H
#define Pack_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSLongArray;

@interface LibOrgBouncycastleUtilPack : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (jint)bigEndianToIntWithByteArray:(IOSByteArray *)bs
                            withInt:(jint)off;

+ (void)bigEndianToIntWithByteArray:(IOSByteArray *)bs
                            withInt:(jint)off
                       withIntArray:(IOSIntArray *)ns;

+ (jlong)bigEndianToLongWithByteArray:(IOSByteArray *)bs
                              withInt:(jint)off;

+ (void)bigEndianToLongWithByteArray:(IOSByteArray *)bs
                             withInt:(jint)off
                       withLongArray:(IOSLongArray *)ns;

+ (jshort)bigEndianToShortWithByteArray:(IOSByteArray *)bs
                                withInt:(jint)off;

+ (IOSByteArray *)intToBigEndianWithInt:(jint)n;

+ (void)intToBigEndianWithInt:(jint)n
                withByteArray:(IOSByteArray *)bs
                      withInt:(jint)off;

+ (IOSByteArray *)intToBigEndianWithIntArray:(IOSIntArray *)ns;

+ (void)intToBigEndianWithIntArray:(IOSIntArray *)ns
                     withByteArray:(IOSByteArray *)bs
                           withInt:(jint)off;

+ (IOSByteArray *)intToLittleEndianWithInt:(jint)n;

+ (void)intToLittleEndianWithInt:(jint)n
                   withByteArray:(IOSByteArray *)bs
                         withInt:(jint)off;

+ (IOSByteArray *)intToLittleEndianWithIntArray:(IOSIntArray *)ns;

+ (void)intToLittleEndianWithIntArray:(IOSIntArray *)ns
                        withByteArray:(IOSByteArray *)bs
                              withInt:(jint)off;

+ (jint)littleEndianToIntWithByteArray:(IOSByteArray *)bs
                               withInt:(jint)off;

+ (IOSIntArray *)littleEndianToIntWithByteArray:(IOSByteArray *)bs
                                        withInt:(jint)off
                                        withInt:(jint)count;

+ (void)littleEndianToIntWithByteArray:(IOSByteArray *)bs
                               withInt:(jint)off
                          withIntArray:(IOSIntArray *)ns;

+ (void)littleEndianToIntWithByteArray:(IOSByteArray *)bs
                               withInt:(jint)bOff
                          withIntArray:(IOSIntArray *)ns
                               withInt:(jint)nOff
                               withInt:(jint)count;

+ (jlong)littleEndianToLongWithByteArray:(IOSByteArray *)bs
                                 withInt:(jint)off;

+ (void)littleEndianToLongWithByteArray:(IOSByteArray *)bs
                                withInt:(jint)off
                          withLongArray:(IOSLongArray *)ns;

+ (void)littleEndianToLongWithByteArray:(IOSByteArray *)bs
                                withInt:(jint)bsOff
                          withLongArray:(IOSLongArray *)ns
                                withInt:(jint)nsOff
                                withInt:(jint)nsLen;

+ (jshort)littleEndianToShortWithByteArray:(IOSByteArray *)bs
                                   withInt:(jint)off;

+ (IOSByteArray *)longToBigEndianWithLong:(jlong)n;

+ (void)longToBigEndianWithLong:(jlong)n
                  withByteArray:(IOSByteArray *)bs
                        withInt:(jint)off;

+ (IOSByteArray *)longToBigEndianWithLongArray:(IOSLongArray *)ns;

+ (void)longToBigEndianWithLongArray:(IOSLongArray *)ns
                       withByteArray:(IOSByteArray *)bs
                             withInt:(jint)off;

+ (IOSByteArray *)longToLittleEndianWithLong:(jlong)n;

+ (void)longToLittleEndianWithLong:(jlong)n
                     withByteArray:(IOSByteArray *)bs
                           withInt:(jint)off;

+ (IOSByteArray *)longToLittleEndianWithLongArray:(IOSLongArray *)ns;

+ (void)longToLittleEndianWithLongArray:(IOSLongArray *)ns
                          withByteArray:(IOSByteArray *)bs
                                withInt:(jint)off;

+ (void)longToLittleEndianWithLongArray:(IOSLongArray *)ns
                                withInt:(jint)nsOff
                                withInt:(jint)nsLen
                          withByteArray:(IOSByteArray *)bs
                                withInt:(jint)bsOff;

+ (IOSByteArray *)shortToLittleEndianWithShort:(jshort)n;

+ (void)shortToLittleEndianWithShort:(jshort)n
                       withByteArray:(IOSByteArray *)bs
                             withInt:(jint)off;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleUtilPack)

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_init(LibOrgBouncycastleUtilPack *self);

FOUNDATION_EXPORT jshort LibOrgBouncycastleUtilPack_bigEndianToShortWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_withIntArray_(IOSByteArray *bs, jint off, IOSIntArray *ns);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_intToBigEndianWithInt_(jint n);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(jint n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_intToBigEndianWithIntArray_(IOSIntArray *ns);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_intToBigEndianWithIntArray_withByteArray_withInt_(IOSIntArray *ns, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jlong LibOrgBouncycastleUtilPack_bigEndianToLongWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_bigEndianToLongWithByteArray_withInt_withLongArray_(IOSByteArray *bs, jint off, IOSLongArray *ns);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_longToBigEndianWithLong_(jlong n);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(jlong n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_longToBigEndianWithLongArray_(IOSLongArray *ns);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_longToBigEndianWithLongArray_withByteArray_withInt_(IOSLongArray *ns, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jshort LibOrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_(IOSByteArray *bs, jint off, IOSIntArray *ns);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(IOSByteArray *bs, jint bOff, IOSIntArray *ns, jint nOff, jint count);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_withInt_(IOSByteArray *bs, jint off, jint count);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_shortToLittleEndianWithShort_(jshort n);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_shortToLittleEndianWithShort_withByteArray_withInt_(jshort n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_intToLittleEndianWithInt_(jint n);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(jint n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_intToLittleEndianWithIntArray_(IOSIntArray *ns);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_intToLittleEndianWithIntArray_withByteArray_withInt_(IOSIntArray *ns, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jlong LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_withLongArray_(IOSByteArray *bs, jint off, IOSLongArray *ns);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_withLongArray_withInt_withInt_(IOSByteArray *bs, jint bsOff, IOSLongArray *ns, jint nsOff, jint nsLen);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_(jlong n);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(jlong n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilPack_longToLittleEndianWithLongArray_(IOSLongArray *ns);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_longToLittleEndianWithLongArray_withByteArray_withInt_(IOSLongArray *ns, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void LibOrgBouncycastleUtilPack_longToLittleEndianWithLongArray_withInt_withInt_withByteArray_withInt_(IOSLongArray *ns, jint nsOff, jint nsLen, IOSByteArray *bs, jint bsOff);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilPack)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Pack_H
