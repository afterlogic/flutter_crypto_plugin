//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmp/PollRepContent.java
//

#ifndef PollRepContent_H
#define PollRepContent_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Integer;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CmpPKIFreeText;

@interface LibOrgBouncycastleAsn1CmpPollRepContent : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)certReqId
                              withLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)checkAfter;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)certReqId
                              withLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)checkAfter
                           withLibOrgBouncycastleAsn1CmpPKIFreeText:(LibOrgBouncycastleAsn1CmpPKIFreeText *)reason;

- (LibOrgBouncycastleAsn1ASN1Integer *)getCertReqIdWithInt:(jint)index;

- (LibOrgBouncycastleAsn1ASN1Integer *)getCheckAfterWithInt:(jint)index;

+ (LibOrgBouncycastleAsn1CmpPollRepContent *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1CmpPKIFreeText *)getReasonWithInt:(jint)index;

- (jint)size;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmpPollRepContent)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPollRepContent *LibOrgBouncycastleAsn1CmpPollRepContent_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpPollRepContent_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1CmpPollRepContent *self, LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1ASN1Integer *checkAfter);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPollRepContent *new_LibOrgBouncycastleAsn1CmpPollRepContent_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1ASN1Integer *checkAfter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPollRepContent *create_LibOrgBouncycastleAsn1CmpPollRepContent_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1ASN1Integer_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1ASN1Integer *checkAfter);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmpPollRepContent_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIFreeText_(LibOrgBouncycastleAsn1CmpPollRepContent *self, LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1ASN1Integer *checkAfter, LibOrgBouncycastleAsn1CmpPKIFreeText *reason);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPollRepContent *new_LibOrgBouncycastleAsn1CmpPollRepContent_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIFreeText_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1ASN1Integer *checkAfter, LibOrgBouncycastleAsn1CmpPKIFreeText *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmpPollRepContent *create_LibOrgBouncycastleAsn1CmpPollRepContent_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1CmpPKIFreeText_(LibOrgBouncycastleAsn1ASN1Integer *certReqId, LibOrgBouncycastleAsn1ASN1Integer *checkAfter, LibOrgBouncycastleAsn1CmpPKIFreeText *reason);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmpPollRepContent)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PollRepContent_H
