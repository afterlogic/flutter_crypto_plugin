//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ChangeCipherSpec.java
//

#ifndef ChangeCipherSpec_H
#define ChangeCipherSpec_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsChangeCipherSpec : NSObject
@property (readonly, class) jshort change_cipher_spec NS_SWIFT_NAME(change_cipher_spec);

+ (jshort)change_cipher_spec;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsChangeCipherSpec)

inline jshort LibOrgBouncycastleCryptoTlsChangeCipherSpec_get_change_cipher_spec(void);
#define LibOrgBouncycastleCryptoTlsChangeCipherSpec_change_cipher_spec 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsChangeCipherSpec, change_cipher_spec, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsChangeCipherSpec_init(LibOrgBouncycastleCryptoTlsChangeCipherSpec *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsChangeCipherSpec *new_LibOrgBouncycastleCryptoTlsChangeCipherSpec_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsChangeCipherSpec *create_LibOrgBouncycastleCryptoTlsChangeCipherSpec_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsChangeCipherSpec)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ChangeCipherSpec_H
