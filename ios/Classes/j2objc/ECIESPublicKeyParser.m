//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/parsers/ECIESPublicKeyParser.java
//

#include "AsymmetricKeyParameter.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECIESPublicKeyParser.h"
#include "ECPoint.h"
#include "ECPublicKeyParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Streams.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"

@interface LibOrgBouncycastleCryptoParsersECIESPublicKeyParser () {
 @public
  LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParsersECIESPublicKeyParser, ecParams_, LibOrgBouncycastleCryptoParamsECDomainParameters *)

@implementation LibOrgBouncycastleCryptoParsersECIESPublicKeyParser

- (instancetype)initWithLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)ecParams {
  LibOrgBouncycastleCryptoParsersECIESPublicKeyParser_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_(self, ecParams);
  return self;
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)readKeyWithJavaIoInputStream:(JavaIoInputStream *)stream {
  IOSByteArray *V;
  jint first = [((JavaIoInputStream *) nil_chk(stream)) read];
  switch (first) {
    case (jint) 0x00:
    @throw new_JavaIoIOException_initWithNSString_(@"Sender's public key invalid.");
    case (jint) 0x02:
    case (jint) 0x03:
    V = [IOSByteArray newArrayWithLength:1 + ([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getCurve])) getFieldSize] + 7) / 8];
    break;
    case (jint) 0x04:
    case (jint) 0x06:
    case (jint) 0x07:
    V = [IOSByteArray newArrayWithLength:1 + 2 * (([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getCurve])) getFieldSize] + 7) / 8)];
    break;
    default:
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Sender's public key has invalid point encoding 0x", JavaLangInteger_toStringWithInt_withInt_(first, 16)));
  }
  *IOSByteArray_GetRef(nil_chk(V), 0) = (jbyte) first;
  LibOrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(stream, V, 1, V->size_ - 1);
  return new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getCurve])) decodePointWithByteArray:V], ecParams_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsECDomainParameters:);
  methods[1].selector = @selector(readKeyWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ecParams_", "LLibOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsECDomainParameters;", "readKey", "LJavaIoInputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParsersECIESPublicKeyParser = { "ECIESPublicKeyParser", "lib.org.bouncycastle.crypto.parsers", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParsersECIESPublicKeyParser;
}

@end

void LibOrgBouncycastleCryptoParsersECIESPublicKeyParser_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParsersECIESPublicKeyParser *self, LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams) {
  NSObject_init(self);
  self->ecParams_ = ecParams;
}

LibOrgBouncycastleCryptoParsersECIESPublicKeyParser *new_LibOrgBouncycastleCryptoParsersECIESPublicKeyParser_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParsersECIESPublicKeyParser, initWithLibOrgBouncycastleCryptoParamsECDomainParameters_, ecParams)
}

LibOrgBouncycastleCryptoParsersECIESPublicKeyParser *create_LibOrgBouncycastleCryptoParsersECIESPublicKeyParser_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParsersECIESPublicKeyParser, initWithLibOrgBouncycastleCryptoParamsECDomainParameters_, ecParams)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParsersECIESPublicKeyParser)
