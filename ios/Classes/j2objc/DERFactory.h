//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/DERFactory.java
//

#ifndef DERFactory_H
#define DERFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1EncodableVector;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1ASN1Set;

@interface LibOrgBouncycastleAsn1DERFactory : NSObject
@property (readonly, class) LibOrgBouncycastleAsn1ASN1Sequence *EMPTY_SEQUENCE NS_SWIFT_NAME(EMPTY_SEQUENCE);
@property (readonly, class) LibOrgBouncycastleAsn1ASN1Set *EMPTY_SET NS_SWIFT_NAME(EMPTY_SET);

+ (LibOrgBouncycastleAsn1ASN1Sequence *)EMPTY_SEQUENCE;

+ (LibOrgBouncycastleAsn1ASN1Set *)EMPTY_SET;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (LibOrgBouncycastleAsn1ASN1Sequence *)createSequenceWithLibOrgBouncycastleAsn1ASN1EncodableVector:(LibOrgBouncycastleAsn1ASN1EncodableVector *)v;

+ (LibOrgBouncycastleAsn1ASN1Set *)createSetWithLibOrgBouncycastleAsn1ASN1EncodableVector:(LibOrgBouncycastleAsn1ASN1EncodableVector *)v;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleAsn1DERFactory)

inline LibOrgBouncycastleAsn1ASN1Sequence *LibOrgBouncycastleAsn1DERFactory_get_EMPTY_SEQUENCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Sequence *LibOrgBouncycastleAsn1DERFactory_EMPTY_SEQUENCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1DERFactory, EMPTY_SEQUENCE, LibOrgBouncycastleAsn1ASN1Sequence *)

inline LibOrgBouncycastleAsn1ASN1Set *LibOrgBouncycastleAsn1DERFactory_get_EMPTY_SET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Set *LibOrgBouncycastleAsn1DERFactory_EMPTY_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1DERFactory, EMPTY_SET, LibOrgBouncycastleAsn1ASN1Set *)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1DERFactory_init(LibOrgBouncycastleAsn1DERFactory *self);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1DERFactory *new_LibOrgBouncycastleAsn1DERFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1DERFactory *create_LibOrgBouncycastleAsn1DERFactory_init(void);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Sequence *LibOrgBouncycastleAsn1DERFactory_createSequenceWithLibOrgBouncycastleAsn1ASN1EncodableVector_(LibOrgBouncycastleAsn1ASN1EncodableVector *v);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1Set *LibOrgBouncycastleAsn1DERFactory_createSetWithLibOrgBouncycastleAsn1ASN1EncodableVector_(LibOrgBouncycastleAsn1ASN1EncodableVector *v);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1DERFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DERFactory_H
