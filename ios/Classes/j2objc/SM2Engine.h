//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/SM2Engine.java
//

#ifndef SM2Engine_H
#define SM2Engine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoDigest;
@protocol LibOrgBouncycastleMathEcECMultiplier;

@interface LibOrgBouncycastleCryptoEnginesSM2Engine : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

- (jint)getOutputSizeWithInt:(jint)inputLen;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen;

#pragma mark Protected

- (id<LibOrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEnginesSM2Engine)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesSM2Engine_init(LibOrgBouncycastleCryptoEnginesSM2Engine *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSM2Engine *new_LibOrgBouncycastleCryptoEnginesSM2Engine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSM2Engine *create_LibOrgBouncycastleCryptoEnginesSM2Engine_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoEnginesSM2Engine *self, id<LibOrgBouncycastleCryptoDigest> digest);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSM2Engine *new_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesSM2Engine *create_LibOrgBouncycastleCryptoEnginesSM2Engine_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesSM2Engine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SM2Engine_H
