//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/FixedPointUtil.java
//

#include "ECCurve.h"
#include "ECLookupTable.h"
#include "ECPoint.h"
#include "FixedPointPreCompInfo.h"
#include "FixedPointUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "PreCompCallback.h"
#include "PreCompInfo.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleMathEcFixedPointUtil_1 : NSObject < LibOrgBouncycastleMathEcPreCompCallback > {
 @public
  LibOrgBouncycastleMathEcECCurve *val$c_;
  LibOrgBouncycastleMathEcECPoint *val$p_;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)capture$0
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)capture$1;

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)existing;

- (jboolean)checkExistingWithLibOrgBouncycastleMathEcFixedPointPreCompInfo:(LibOrgBouncycastleMathEcFixedPointPreCompInfo *)existingFP
                                                                   withInt:(jint)n;

- (jboolean)checkTableWithLibOrgBouncycastleMathEcECLookupTable:(id<LibOrgBouncycastleMathEcECLookupTable>)table
                                                        withInt:(jint)n;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcFixedPointUtil_1)

__attribute__((unused)) static void LibOrgBouncycastleMathEcFixedPointUtil_1_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcFixedPointUtil_1 *self, LibOrgBouncycastleMathEcECCurve *capture$0, LibOrgBouncycastleMathEcECPoint *capture$1);

__attribute__((unused)) static LibOrgBouncycastleMathEcFixedPointUtil_1 *new_LibOrgBouncycastleMathEcFixedPointUtil_1_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *capture$0, LibOrgBouncycastleMathEcECPoint *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleMathEcFixedPointUtil_1 *create_LibOrgBouncycastleMathEcFixedPointUtil_1_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *capture$0, LibOrgBouncycastleMathEcECPoint *capture$1);

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcFixedPointUtil_1_checkExistingWithLibOrgBouncycastleMathEcFixedPointPreCompInfo_withInt_(LibOrgBouncycastleMathEcFixedPointUtil_1 *self, LibOrgBouncycastleMathEcFixedPointPreCompInfo *existingFP, jint n);

__attribute__((unused)) static jboolean LibOrgBouncycastleMathEcFixedPointUtil_1_checkTableWithLibOrgBouncycastleMathEcECLookupTable_withInt_(LibOrgBouncycastleMathEcFixedPointUtil_1 *self, id<LibOrgBouncycastleMathEcECLookupTable> table, jint n);

NSString *LibOrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME = @"bc_fixed_point";

@implementation LibOrgBouncycastleMathEcFixedPointUtil

+ (NSString *)PRECOMP_NAME {
  return LibOrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcFixedPointUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getCombSizeWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)c {
  return LibOrgBouncycastleMathEcFixedPointUtil_getCombSizeWithLibOrgBouncycastleMathEcECCurve_(c);
}

+ (LibOrgBouncycastleMathEcFixedPointPreCompInfo *)getFixedPointPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)preCompInfo {
  return LibOrgBouncycastleMathEcFixedPointUtil_getFixedPointPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo_(preCompInfo);
}

+ (LibOrgBouncycastleMathEcFixedPointPreCompInfo *)precomputeWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  return LibOrgBouncycastleMathEcFixedPointUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_(p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcFixedPointPreCompInfo;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcFixedPointPreCompInfo;", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getCombSizeWithLibOrgBouncycastleMathEcECCurve:);
  methods[2].selector = @selector(getFixedPointPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo:);
  methods[3].selector = @selector(precomputeWithLibOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRECOMP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "getCombSize", "LLibOrgBouncycastleMathEcECCurve;", "getFixedPointPreCompInfo", "LLibOrgBouncycastleMathEcPreCompInfo;", "precompute", "LLibOrgBouncycastleMathEcECPoint;", &LibOrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcFixedPointUtil = { "FixedPointUtil", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcFixedPointUtil;
}

@end

void LibOrgBouncycastleMathEcFixedPointUtil_init(LibOrgBouncycastleMathEcFixedPointUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleMathEcFixedPointUtil *new_LibOrgBouncycastleMathEcFixedPointUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcFixedPointUtil, init)
}

LibOrgBouncycastleMathEcFixedPointUtil *create_LibOrgBouncycastleMathEcFixedPointUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcFixedPointUtil, init)
}

jint LibOrgBouncycastleMathEcFixedPointUtil_getCombSizeWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *c) {
  LibOrgBouncycastleMathEcFixedPointUtil_initialize();
  JavaMathBigInteger *order = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getOrder];
  return order == nil ? [c getFieldSize] + 1 : [order bitLength];
}

LibOrgBouncycastleMathEcFixedPointPreCompInfo *LibOrgBouncycastleMathEcFixedPointUtil_getFixedPointPreCompInfoWithLibOrgBouncycastleMathEcPreCompInfo_(id<LibOrgBouncycastleMathEcPreCompInfo> preCompInfo) {
  LibOrgBouncycastleMathEcFixedPointUtil_initialize();
  return ([preCompInfo isKindOfClass:[LibOrgBouncycastleMathEcFixedPointPreCompInfo class]]) ? (LibOrgBouncycastleMathEcFixedPointPreCompInfo *) cast_chk(preCompInfo, [LibOrgBouncycastleMathEcFixedPointPreCompInfo class]) : nil;
}

LibOrgBouncycastleMathEcFixedPointPreCompInfo *LibOrgBouncycastleMathEcFixedPointUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *p) {
  LibOrgBouncycastleMathEcFixedPointUtil_initialize();
  LibOrgBouncycastleMathEcECCurve *c = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  return (LibOrgBouncycastleMathEcFixedPointPreCompInfo *) cast_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) precomputeWithLibOrgBouncycastleMathEcECPoint:p withNSString:LibOrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME withLibOrgBouncycastleMathEcPreCompCallback:new_LibOrgBouncycastleMathEcFixedPointUtil_1_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(c, p)], [LibOrgBouncycastleMathEcFixedPointPreCompInfo class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcFixedPointUtil)

@implementation LibOrgBouncycastleMathEcFixedPointUtil_1

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)capture$0
                    withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)capture$1 {
  LibOrgBouncycastleMathEcFixedPointUtil_1_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(self, capture$0, capture$1);
  return self;
}

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcPreCompInfo:(id<LibOrgBouncycastleMathEcPreCompInfo>)existing {
  LibOrgBouncycastleMathEcFixedPointPreCompInfo *existingFP = ([existing isKindOfClass:[LibOrgBouncycastleMathEcFixedPointPreCompInfo class]]) ? (LibOrgBouncycastleMathEcFixedPointPreCompInfo *) cast_chk(existing, [LibOrgBouncycastleMathEcFixedPointPreCompInfo class]) : nil;
  jint bits = LibOrgBouncycastleMathEcFixedPointUtil_getCombSizeWithLibOrgBouncycastleMathEcECCurve_(val$c_);
  jint minWidth = bits > 250 ? 6 : 5;
  jint n = JreLShift32(1, minWidth);
  if (LibOrgBouncycastleMathEcFixedPointUtil_1_checkExistingWithLibOrgBouncycastleMathEcFixedPointPreCompInfo_withInt_(self, existingFP, n)) {
    return existingFP;
  }
  jint d = (bits + minWidth - 1) / minWidth;
  IOSObjectArray *pow2Table = [IOSObjectArray newArrayWithLength:minWidth + 1 type:LibOrgBouncycastleMathEcECPoint_class_()];
  (void) IOSObjectArray_Set(pow2Table, 0, val$p_);
  for (jint i = 1; i < minWidth; ++i) {
    (void) IOSObjectArray_Set(pow2Table, i, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(pow2Table, i - 1))) timesPow2WithInt:d]);
  }
  (void) IOSObjectArray_Set(pow2Table, minWidth, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(pow2Table, 0))) subtractWithLibOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(pow2Table, 1)]);
  [((LibOrgBouncycastleMathEcECCurve *) nil_chk(val$c_)) normalizeAllWithLibOrgBouncycastleMathEcECPointArray:pow2Table];
  IOSObjectArray *lookupTable = [IOSObjectArray newArrayWithLength:n type:LibOrgBouncycastleMathEcECPoint_class_()];
  (void) IOSObjectArray_Set(lookupTable, 0, IOSObjectArray_Get(pow2Table, 0));
  for (jint bit = minWidth - 1; bit >= 0; --bit) {
    LibOrgBouncycastleMathEcECPoint *pow2 = IOSObjectArray_Get(pow2Table, bit);
    jint step = JreLShift32(1, bit);
    for (jint i = step; i < n; i += (JreLShift32(step, 1))) {
      (void) IOSObjectArray_Set(lookupTable, i, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(lookupTable, i - step))) addWithLibOrgBouncycastleMathEcECPoint:pow2]);
    }
  }
  [val$c_ normalizeAllWithLibOrgBouncycastleMathEcECPointArray:lookupTable];
  LibOrgBouncycastleMathEcFixedPointPreCompInfo *result = new_LibOrgBouncycastleMathEcFixedPointPreCompInfo_init();
  [result setLookupTableWithLibOrgBouncycastleMathEcECLookupTable:[val$c_ createCacheSafeLookupTableWithLibOrgBouncycastleMathEcECPointArray:lookupTable withInt:0 withInt:lookupTable->size_]];
  [result setOffsetWithLibOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(pow2Table, minWidth)];
  [result setWidthWithInt:minWidth];
  return result;
}

- (jboolean)checkExistingWithLibOrgBouncycastleMathEcFixedPointPreCompInfo:(LibOrgBouncycastleMathEcFixedPointPreCompInfo *)existingFP
                                                                   withInt:(jint)n {
  return LibOrgBouncycastleMathEcFixedPointUtil_1_checkExistingWithLibOrgBouncycastleMathEcFixedPointPreCompInfo_withInt_(self, existingFP, n);
}

- (jboolean)checkTableWithLibOrgBouncycastleMathEcECLookupTable:(id<LibOrgBouncycastleMathEcECLookupTable>)table
                                                        withInt:(jint)n {
  return LibOrgBouncycastleMathEcFixedPointUtil_1_checkTableWithLibOrgBouncycastleMathEcECLookupTable_withInt_(self, table, n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcPreCompInfo;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECPoint:);
  methods[1].selector = @selector(precomputeWithLibOrgBouncycastleMathEcPreCompInfo:);
  methods[2].selector = @selector(checkExistingWithLibOrgBouncycastleMathEcFixedPointPreCompInfo:withInt:);
  methods[3].selector = @selector(checkTableWithLibOrgBouncycastleMathEcECLookupTable:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LLibOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$p_", "LLibOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "precompute", "LLibOrgBouncycastleMathEcPreCompInfo;", "checkExisting", "LLibOrgBouncycastleMathEcFixedPointPreCompInfo;I", "checkTable", "LLibOrgBouncycastleMathEcECLookupTable;I", "LLibOrgBouncycastleMathEcFixedPointUtil;", "precomputeWithLibOrgBouncycastleMathEcECPoint:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcFixedPointUtil_1 = { "", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8018, 4, 2, 6, -1, 7, -1, -1 };
  return &_LibOrgBouncycastleMathEcFixedPointUtil_1;
}

@end

void LibOrgBouncycastleMathEcFixedPointUtil_1_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcFixedPointUtil_1 *self, LibOrgBouncycastleMathEcECCurve *capture$0, LibOrgBouncycastleMathEcECPoint *capture$1) {
  self->val$c_ = capture$0;
  self->val$p_ = capture$1;
  NSObject_init(self);
}

LibOrgBouncycastleMathEcFixedPointUtil_1 *new_LibOrgBouncycastleMathEcFixedPointUtil_1_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *capture$0, LibOrgBouncycastleMathEcECPoint *capture$1) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcFixedPointUtil_1, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_, capture$0, capture$1)
}

LibOrgBouncycastleMathEcFixedPointUtil_1 *create_LibOrgBouncycastleMathEcFixedPointUtil_1_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *capture$0, LibOrgBouncycastleMathEcECPoint *capture$1) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcFixedPointUtil_1, initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_, capture$0, capture$1)
}

jboolean LibOrgBouncycastleMathEcFixedPointUtil_1_checkExistingWithLibOrgBouncycastleMathEcFixedPointPreCompInfo_withInt_(LibOrgBouncycastleMathEcFixedPointUtil_1 *self, LibOrgBouncycastleMathEcFixedPointPreCompInfo *existingFP, jint n) {
  return existingFP != nil && LibOrgBouncycastleMathEcFixedPointUtil_1_checkTableWithLibOrgBouncycastleMathEcECLookupTable_withInt_(self, [existingFP getLookupTable], n);
}

jboolean LibOrgBouncycastleMathEcFixedPointUtil_1_checkTableWithLibOrgBouncycastleMathEcECLookupTable_withInt_(LibOrgBouncycastleMathEcFixedPointUtil_1 *self, id<LibOrgBouncycastleMathEcECLookupTable> table, jint n) {
  return table != nil && [table getSize] >= n;
}
