//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/OCBBlockCipher.java
//

#ifndef OCBBlockCipher_H
#define OCBBlockCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AEADBlockCipher.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoModesOCBBlockCipher : NSObject < LibOrgBouncycastleCryptoModesAEADBlockCipher >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)hashCipher
                              withLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)mainCipher;

- (jint)doFinalWithByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (IOSByteArray *)getMac;

- (jint)getOutputSizeWithInt:(jint)len;

- (id<LibOrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher;

- (jint)getUpdateOutputSizeWithInt:(jint)len;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters OBJC_METHOD_FAMILY_NONE;

- (void)processAADByteWithByte:(jbyte)input;

- (void)processAADBytesWithByteArray:(IOSByteArray *)input
                             withInt:(jint)off
                             withInt:(jint)len;

- (jint)processByteWithByte:(jbyte)input
              withByteArray:(IOSByteArray *)output
                    withInt:(jint)outOff;

- (jint)processBytesWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outOff;

- (void)reset;

#pragma mark Protected

- (void)clearWithByteArray:(IOSByteArray *)bs;

- (IOSByteArray *)getLSubWithInt:(jint)n;

+ (IOSByteArray *)OCB_doubleWithByteArray:(IOSByteArray *)block;

+ (void)OCB_extendWithByteArray:(IOSByteArray *)block
                        withInt:(jint)pos;

+ (jint)OCB_ntzWithLong:(jlong)x;

- (void)processHashBlock;

- (void)processMainBlockWithByteArray:(IOSByteArray *)output
                              withInt:(jint)outOff;

- (jint)processNonceWithByteArray:(IOSByteArray *)N;

- (void)resetWithBoolean:(jboolean)clearMac;

+ (jint)shiftLeftWithByteArray:(IOSByteArray *)block
                 withByteArray:(IOSByteArray *)output;

- (void)updateHASHWithByteArray:(IOSByteArray *)LSub;

+ (void)xor__WithByteArray:(IOSByteArray *)block
             withByteArray:(IOSByteArray *)val;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoModesOCBBlockCipher)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoModesOCBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoModesOCBBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> hashCipher, id<LibOrgBouncycastleCryptoBlockCipher> mainCipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoModesOCBBlockCipher *new_LibOrgBouncycastleCryptoModesOCBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> hashCipher, id<LibOrgBouncycastleCryptoBlockCipher> mainCipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoModesOCBBlockCipher *create_LibOrgBouncycastleCryptoModesOCBBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> hashCipher, id<LibOrgBouncycastleCryptoBlockCipher> mainCipher);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoModesOCBBlockCipher_OCB_doubleWithByteArray_(IOSByteArray *block);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoModesOCBBlockCipher_OCB_extendWithByteArray_withInt_(IOSByteArray *block, jint pos);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoModesOCBBlockCipher_OCB_ntzWithLong_(jlong x);

FOUNDATION_EXPORT jint LibOrgBouncycastleCryptoModesOCBBlockCipher_shiftLeftWithByteArray_withByteArray_(IOSByteArray *block, IOSByteArray *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoModesOCBBlockCipher_xor__WithByteArray_withByteArray_(IOSByteArray *block, IOSByteArray *val);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoModesOCBBlockCipher)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OCBBlockCipher_H
