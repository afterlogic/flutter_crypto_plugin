//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsStreamCipher.java
//

#include "AlertDescription.h"
#include "Arrays.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "ParametersWithIV.h"
#include "StreamCipher.h"
#include "TlsContext.h"
#include "TlsFatalAlert.h"
#include "TlsMac.h"
#include "TlsStreamCipher.h"
#include "TlsUtils.h"

@implementation LibOrgBouncycastleCryptoTlsTlsStreamCipher

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                     withLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)clientWriteCipher
                     withLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)serverWriteCipher
                           withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)clientWriteDigest
                           withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)serverWriteDigest
                                                      withInt:(jint)cipherKeySize
                                                  withBoolean:(jboolean)usesNonce {
  LibOrgBouncycastleCryptoTlsTlsStreamCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withBoolean_(self, context, clientWriteCipher, serverWriteCipher, clientWriteDigest, serverWriteDigest, cipherKeySize, usesNonce);
  return self;
}

- (jint)getPlaintextLimitWithInt:(jint)ciphertextLimit {
  return ciphertextLimit - [((LibOrgBouncycastleCryptoTlsTlsMac *) nil_chk(writeMac_)) getSize];
}

- (IOSByteArray *)encodePlaintextWithLong:(jlong)seqNo
                                withShort:(jshort)type
                            withByteArray:(IOSByteArray *)plaintext
                                  withInt:(jint)offset
                                  withInt:(jint)len {
  if (usesNonce_) {
    [self updateIVWithLibOrgBouncycastleCryptoStreamCipher:encryptCipher_ withBoolean:true withLong:seqNo];
  }
  IOSByteArray *outBuf = [IOSByteArray newArrayWithLength:len + [((LibOrgBouncycastleCryptoTlsTlsMac *) nil_chk(writeMac_)) getSize]];
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(encryptCipher_)) processBytesWithByteArray:plaintext withInt:offset withInt:len withByteArray:outBuf withInt:0];
  IOSByteArray *mac = [((LibOrgBouncycastleCryptoTlsTlsMac *) nil_chk(writeMac_)) calculateMacWithLong:seqNo withShort:type withByteArray:plaintext withInt:offset withInt:len];
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(encryptCipher_)) processBytesWithByteArray:mac withInt:0 withInt:((IOSByteArray *) nil_chk(mac))->size_ withByteArray:outBuf withInt:len];
  return outBuf;
}

- (IOSByteArray *)decodeCiphertextWithLong:(jlong)seqNo
                                 withShort:(jshort)type
                             withByteArray:(IOSByteArray *)ciphertext
                                   withInt:(jint)offset
                                   withInt:(jint)len {
  if (usesNonce_) {
    [self updateIVWithLibOrgBouncycastleCryptoStreamCipher:decryptCipher_ withBoolean:false withLong:seqNo];
  }
  jint macSize = [((LibOrgBouncycastleCryptoTlsTlsMac *) nil_chk(readMac_)) getSize];
  if (len < macSize) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decode_error);
  }
  jint plaintextLength = len - macSize;
  IOSByteArray *deciphered = [IOSByteArray newArrayWithLength:len];
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(decryptCipher_)) processBytesWithByteArray:ciphertext withInt:offset withInt:len withByteArray:deciphered withInt:0];
  [self checkMACWithLong:seqNo withShort:type withByteArray:deciphered withInt:plaintextLength withInt:len withByteArray:deciphered withInt:0 withInt:plaintextLength];
  return LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(deciphered, 0, plaintextLength);
}

- (void)checkMACWithLong:(jlong)seqNo
               withShort:(jshort)type
           withByteArray:(IOSByteArray *)recBuf
                 withInt:(jint)recStart
                 withInt:(jint)recEnd
           withByteArray:(IOSByteArray *)calcBuf
                 withInt:(jint)calcOff
                 withInt:(jint)calcLen {
  IOSByteArray *receivedMac = LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(recBuf, recStart, recEnd);
  IOSByteArray *computedMac = [((LibOrgBouncycastleCryptoTlsTlsMac *) nil_chk(readMac_)) calculateMacWithLong:seqNo withShort:type withByteArray:calcBuf withInt:calcOff withInt:calcLen];
  if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(receivedMac, computedMac)) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_bad_record_mac);
  }
}

- (void)updateIVWithLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)cipher
                                             withBoolean:(jboolean)forEncryption
                                                withLong:(jlong)seqNo {
  IOSByteArray *nonce = [IOSByteArray newArrayWithLength:8];
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint64WithLong_withByteArray_withInt_(seqNo, nonce, 0);
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(cipher)) init__WithBoolean:forEncryption withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(nil, nonce)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, 1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsContext:withLibOrgBouncycastleCryptoStreamCipher:withLibOrgBouncycastleCryptoStreamCipher:withLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleCryptoDigest:withInt:withBoolean:);
  methods[1].selector = @selector(getPlaintextLimitWithInt:);
  methods[2].selector = @selector(encodePlaintextWithLong:withShort:withByteArray:withInt:withInt:);
  methods[3].selector = @selector(decodeCiphertextWithLong:withShort:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(checkMACWithLong:withShort:withByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[5].selector = @selector(updateIVWithLibOrgBouncycastleCryptoStreamCipher:withBoolean:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LLibOrgBouncycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encryptCipher_", "LLibOrgBouncycastleCryptoStreamCipher;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "decryptCipher_", "LLibOrgBouncycastleCryptoStreamCipher;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "writeMac_", "LLibOrgBouncycastleCryptoTlsTlsMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "readMac_", "LLibOrgBouncycastleCryptoTlsTlsMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "usesNonce_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoTlsTlsContext;LLibOrgBouncycastleCryptoStreamCipher;LLibOrgBouncycastleCryptoStreamCipher;LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleCryptoDigest;IZ", "LJavaIoIOException;", "getPlaintextLimit", "I", "encodePlaintext", "JS[BII", "decodeCiphertext", "checkMAC", "JS[BII[BII", "updateIV", "LLibOrgBouncycastleCryptoStreamCipher;ZJ" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsStreamCipher = { "TlsStreamCipher", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 6, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsStreamCipher;
}

@end

void LibOrgBouncycastleCryptoTlsTlsStreamCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withBoolean_(LibOrgBouncycastleCryptoTlsTlsStreamCipher *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoStreamCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoStreamCipher> serverWriteCipher, id<LibOrgBouncycastleCryptoDigest> clientWriteDigest, id<LibOrgBouncycastleCryptoDigest> serverWriteDigest, jint cipherKeySize, jboolean usesNonce) {
  NSObject_init(self);
  jboolean isServer = [((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context)) isServer];
  self->context_ = context;
  self->usesNonce_ = usesNonce;
  self->encryptCipher_ = clientWriteCipher;
  self->decryptCipher_ = serverWriteCipher;
  jint key_block_size = (2 * cipherKeySize) + [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(clientWriteDigest)) getDigestSize] + [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(serverWriteDigest)) getDigestSize];
  IOSByteArray *key_block = LibOrgBouncycastleCryptoTlsTlsUtils_calculateKeyBlockWithLibOrgBouncycastleCryptoTlsTlsContext_withInt_(context, key_block_size);
  jint offset = 0;
  LibOrgBouncycastleCryptoTlsTlsMac *clientWriteMac = new_LibOrgBouncycastleCryptoTlsTlsMac_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_withInt_(context, clientWriteDigest, key_block, offset, [clientWriteDigest getDigestSize]);
  offset += [clientWriteDigest getDigestSize];
  LibOrgBouncycastleCryptoTlsTlsMac *serverWriteMac = new_LibOrgBouncycastleCryptoTlsTlsMac_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_withInt_(context, serverWriteDigest, key_block, offset, [serverWriteDigest getDigestSize]);
  offset += [serverWriteDigest getDigestSize];
  LibOrgBouncycastleCryptoParamsKeyParameter *clientWriteKey = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key_block, offset, cipherKeySize);
  offset += cipherKeySize;
  LibOrgBouncycastleCryptoParamsKeyParameter *serverWriteKey = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key_block, offset, cipherKeySize);
  offset += cipherKeySize;
  if (offset != key_block_size) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  id<LibOrgBouncycastleCryptoCipherParameters> encryptParams;
  id<LibOrgBouncycastleCryptoCipherParameters> decryptParams;
  if (isServer) {
    self->writeMac_ = serverWriteMac;
    self->readMac_ = clientWriteMac;
    self->encryptCipher_ = serverWriteCipher;
    self->decryptCipher_ = clientWriteCipher;
    encryptParams = serverWriteKey;
    decryptParams = clientWriteKey;
  }
  else {
    self->writeMac_ = clientWriteMac;
    self->readMac_ = serverWriteMac;
    self->encryptCipher_ = clientWriteCipher;
    self->decryptCipher_ = serverWriteCipher;
    encryptParams = clientWriteKey;
    decryptParams = serverWriteKey;
  }
  if (usesNonce) {
    IOSByteArray *dummyNonce = [IOSByteArray newArrayWithLength:8];
    encryptParams = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(encryptParams, dummyNonce);
    decryptParams = new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(decryptParams, dummyNonce);
  }
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(self->encryptCipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:encryptParams];
  [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(self->decryptCipher_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:decryptParams];
}

LibOrgBouncycastleCryptoTlsTlsStreamCipher *new_LibOrgBouncycastleCryptoTlsTlsStreamCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withBoolean_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoStreamCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoStreamCipher> serverWriteCipher, id<LibOrgBouncycastleCryptoDigest> clientWriteDigest, id<LibOrgBouncycastleCryptoDigest> serverWriteDigest, jint cipherKeySize, jboolean usesNonce) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsStreamCipher, initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withBoolean_, context, clientWriteCipher, serverWriteCipher, clientWriteDigest, serverWriteDigest, cipherKeySize, usesNonce)
}

LibOrgBouncycastleCryptoTlsTlsStreamCipher *create_LibOrgBouncycastleCryptoTlsTlsStreamCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withBoolean_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoStreamCipher> clientWriteCipher, id<LibOrgBouncycastleCryptoStreamCipher> serverWriteCipher, id<LibOrgBouncycastleCryptoDigest> clientWriteDigest, id<LibOrgBouncycastleCryptoDigest> serverWriteDigest, jint cipherKeySize, jboolean usesNonce) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsStreamCipher, initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoStreamCipher_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_withInt_withBoolean_, context, clientWriteCipher, serverWriteCipher, clientWriteDigest, serverWriteDigest, cipherKeySize, usesNonce)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsStreamCipher)
