//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/edec/BCXDHPrivateKey.java
//

#ifndef BCXDHPrivateKey_H
#define BCXDHPrivateKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "XDHKey.h"
#include "java/security/PrivateKey.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey : NSObject < LibOrgBouncycastleJcajceInterfacesXDHKey, JavaSecurityPrivateKey >
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSString *)getAlgorithm;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privKey;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)engineGetKeyParameters;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey)

inline jlong LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_get_serialVersionUID(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey, serialVersionUID, jlong)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey *self, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privKey);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privKey);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey *self, LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricEdecBCXDHPrivateKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BCXDHPrivateKey_H
