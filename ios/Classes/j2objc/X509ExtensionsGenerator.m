//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/X509ExtensionsGenerator.java
//

#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "DEROctetString.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "X509Extension.h"
#include "X509Extensions.h"
#include "X509ExtensionsGenerator.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"

@interface LibOrgBouncycastleAsn1X509X509ExtensionsGenerator () {
 @public
  JavaUtilHashtable *extensions_;
  JavaUtilVector *extOrdering_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509X509ExtensionsGenerator, extensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509X509ExtensionsGenerator, extOrdering_, JavaUtilVector *)

@implementation LibOrgBouncycastleAsn1X509X509ExtensionsGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleAsn1X509X509ExtensionsGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  extensions_ = new_JavaUtilHashtable_init();
  extOrdering_ = new_JavaUtilVector_init();
}

- (void)addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                       withBoolean:(jboolean)critical
                           withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)value {
  @try {
    [self addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withBoolean:critical withByteArray:[((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(value)) toASN1Primitive])) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"error encoding value: ", e));
  }
}

- (void)addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                       withBoolean:(jboolean)critical
                                                     withByteArray:(IOSByteArray *)value {
  if ([((JavaUtilHashtable *) nil_chk(extensions_)) containsKeyWithId:oid]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"extension ", oid, @" already added"));
  }
  [((JavaUtilVector *) nil_chk(extOrdering_)) addElementWithId:oid];
  (void) [((JavaUtilHashtable *) nil_chk(extensions_)) putWithId:oid withId:new_LibOrgBouncycastleAsn1X509X509Extension_initWithBoolean_withLibOrgBouncycastleAsn1ASN1OctetString_(critical, new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(value))];
}

- (jboolean)isEmpty {
  return [((JavaUtilVector *) nil_chk(extOrdering_)) isEmpty];
}

- (LibOrgBouncycastleAsn1X509X509Extensions *)generate {
  return new_LibOrgBouncycastleAsn1X509X509Extensions_initWithJavaUtilVector_withJavaUtilHashtable_(extOrdering_, extensions_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withBoolean:withLibOrgBouncycastleAsn1ASN1Encodable:);
  methods[3].selector = @selector(addExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withBoolean:withByteArray:);
  methods[4].selector = @selector(isEmpty);
  methods[5].selector = @selector(generate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "extensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extOrdering_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addExtension", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;ZLLibOrgBouncycastleAsn1ASN1Encodable;", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;Z[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1X509X509ExtensionsGenerator = { "X509ExtensionsGenerator", "lib.org.bouncycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1X509X509ExtensionsGenerator;
}

@end

void LibOrgBouncycastleAsn1X509X509ExtensionsGenerator_init(LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *self) {
  NSObject_init(self);
  self->extensions_ = new_JavaUtilHashtable_init();
  self->extOrdering_ = new_JavaUtilVector_init();
}

LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *new_LibOrgBouncycastleAsn1X509X509ExtensionsGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509X509ExtensionsGenerator, init)
}

LibOrgBouncycastleAsn1X509X509ExtensionsGenerator *create_LibOrgBouncycastleAsn1X509X509ExtensionsGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509X509ExtensionsGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1X509X509ExtensionsGenerator)
