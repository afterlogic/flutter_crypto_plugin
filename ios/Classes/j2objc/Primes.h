//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/Primes.java
//

#ifndef Primes_H
#define Primes_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleMathPrimes_MROutput;
@class LibOrgBouncycastleMathPrimes_STOutput;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastleMathPrimes : NSObject
@property (readonly, class) jint SMALL_FACTOR_LIMIT NS_SWIFT_NAME(SMALL_FACTOR_LIMIT);

+ (jint)SMALL_FACTOR_LIMIT;

#pragma mark Public

- (instancetype __nonnull)init;

+ (LibOrgBouncycastleMathPrimes_MROutput *)enhancedMRProbablePrimeTestWithJavaMathBigInteger:(JavaMathBigInteger *)candidate
                                                                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                     withInt:(jint)iterations;

+ (LibOrgBouncycastleMathPrimes_STOutput *)generateSTRandomPrimeWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)hash_
                                                                                           withInt:(jint)length
                                                                                     withByteArray:(IOSByteArray *)inputSeed;

+ (jboolean)hasAnySmallFactorsWithJavaMathBigInteger:(JavaMathBigInteger *)candidate;

+ (jboolean)isMRProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)candidate
                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                            withInt:(jint)iterations;

+ (jboolean)isMRProbablePrimeToBaseWithJavaMathBigInteger:(JavaMathBigInteger *)candidate
                                   withJavaMathBigInteger:(JavaMathBigInteger *)base;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleMathPrimes)

inline jint LibOrgBouncycastleMathPrimes_get_SMALL_FACTOR_LIMIT(void);
#define LibOrgBouncycastleMathPrimes_SMALL_FACTOR_LIMIT 211
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathPrimes, SMALL_FACTOR_LIMIT, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleMathPrimes_init(LibOrgBouncycastleMathPrimes *self);

FOUNDATION_EXPORT LibOrgBouncycastleMathPrimes_STOutput *LibOrgBouncycastleMathPrimes_generateSTRandomPrimeWithLibOrgBouncycastleCryptoDigest_withInt_withByteArray_(id<LibOrgBouncycastleCryptoDigest> hash_, jint length, IOSByteArray *inputSeed);

FOUNDATION_EXPORT LibOrgBouncycastleMathPrimes_MROutput *LibOrgBouncycastleMathPrimes_enhancedMRProbablePrimeTestWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_(JavaMathBigInteger *candidate, JavaSecuritySecureRandom *random, jint iterations);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathPrimes_hasAnySmallFactorsWithJavaMathBigInteger_(JavaMathBigInteger *candidate);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathPrimes_isMRProbablePrimeWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_(JavaMathBigInteger *candidate, JavaSecuritySecureRandom *random, jint iterations);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleMathPrimes_isMRProbablePrimeToBaseWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *candidate, JavaMathBigInteger *base);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathPrimes)

@interface LibOrgBouncycastleMathPrimes_MROutput : NSObject

#pragma mark Public

- (JavaMathBigInteger *)getFactor;

- (jboolean)isNotPrimePower;

- (jboolean)isProvablyComposite;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathPrimes_MROutput)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathPrimes_MROutput)

@interface LibOrgBouncycastleMathPrimes_STOutput : NSObject

#pragma mark Public

- (JavaMathBigInteger *)getPrime;

- (jint)getPrimeGenCounter;

- (IOSByteArray *)getPrimeSeed;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathPrimes_STOutput)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleMathPrimes_STOutput)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Primes_H
