//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/DESedeParameters.java
//

#ifndef DESedeParameters_H
#define DESedeParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DESParameters.h"
#include "J2ObjC_header.h"

@class IOSByteArray;

@interface LibOrgBouncycastleCryptoParamsDESedeParameters : LibOrgBouncycastleCryptoParamsDESParameters
@property (readonly, class) jint DES_EDE_KEY_LENGTH NS_SWIFT_NAME(DES_EDE_KEY_LENGTH);

+ (jint)DES_EDE_KEY_LENGTH;

#pragma mark Public

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)key;

+ (jboolean)isReal2KeyWithByteArray:(IOSByteArray *)key
                            withInt:(jint)offset;

+ (jboolean)isReal3KeyWithByteArray:(IOSByteArray *)key
                            withInt:(jint)offset;

+ (jboolean)isRealEDEKeyWithByteArray:(IOSByteArray *)key
                              withInt:(jint)offset;

+ (jboolean)isWeakKeyWithByteArray:(IOSByteArray *)key
                           withInt:(jint)offset;

+ (jboolean)isWeakKeyWithByteArray:(IOSByteArray *)key
                           withInt:(jint)offset
                           withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsDESedeParameters)

inline jint LibOrgBouncycastleCryptoParamsDESedeParameters_get_DES_EDE_KEY_LENGTH(void);
#define LibOrgBouncycastleCryptoParamsDESedeParameters_DES_EDE_KEY_LENGTH 24
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsDESedeParameters, DES_EDE_KEY_LENGTH, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsDESedeParameters_initWithByteArray_(LibOrgBouncycastleCryptoParamsDESedeParameters *self, IOSByteArray *key);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDESedeParameters *new_LibOrgBouncycastleCryptoParamsDESedeParameters_initWithByteArray_(IOSByteArray *key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDESedeParameters *create_LibOrgBouncycastleCryptoParamsDESedeParameters_initWithByteArray_(IOSByteArray *key);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoParamsDESedeParameters_isWeakKeyWithByteArray_withInt_withInt_(IOSByteArray *key, jint offset, jint length);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoParamsDESedeParameters_isWeakKeyWithByteArray_withInt_(IOSByteArray *key, jint offset);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoParamsDESedeParameters_isRealEDEKeyWithByteArray_withInt_(IOSByteArray *key, jint offset);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoParamsDESedeParameters_isReal2KeyWithByteArray_withInt_(IOSByteArray *key, jint offset);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoParamsDESedeParameters_isReal3KeyWithByteArray_withInt_(IOSByteArray *key, jint offset);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsDESedeParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DESedeParameters_H
