//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/prng/DigestRandomGenerator.java
//

#include "Digest.h"
#include "DigestRandomGenerator.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoPrngDigestRandomGenerator () {
 @public
  jlong stateCounter_;
  jlong seedCounter_;
  id<LibOrgBouncycastleCryptoDigest> digest_;
  IOSByteArray *state_;
  IOSByteArray *seed_;
}

- (void)cycleSeed;

- (void)generateState;

- (void)digestAddCounterWithLong:(jlong)seed;

- (void)digestUpdateWithByteArray:(IOSByteArray *)inSeed;

- (void)digestDoFinalWithByteArray:(IOSByteArray *)result;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoPrngDigestRandomGenerator, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoPrngDigestRandomGenerator, state_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoPrngDigestRandomGenerator, seed_, IOSByteArray *)

inline jlong LibOrgBouncycastleCryptoPrngDigestRandomGenerator_get_CYCLE_COUNT(void);
inline jlong LibOrgBouncycastleCryptoPrngDigestRandomGenerator_set_CYCLE_COUNT(jlong value);
inline jlong *LibOrgBouncycastleCryptoPrngDigestRandomGenerator_getRef_CYCLE_COUNT(void);
static jlong LibOrgBouncycastleCryptoPrngDigestRandomGenerator_CYCLE_COUNT = 10;
J2OBJC_STATIC_FIELD_PRIMITIVE(LibOrgBouncycastleCryptoPrngDigestRandomGenerator, CYCLE_COUNT, jlong)

__attribute__((unused)) static void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_cycleSeed(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_generateState(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self);

__attribute__((unused)) static void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestAddCounterWithLong_(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self, jlong seed);

__attribute__((unused)) static void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self, IOSByteArray *inSeed);

__attribute__((unused)) static void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestDoFinalWithByteArray_(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self, IOSByteArray *result);

@implementation LibOrgBouncycastleCryptoPrngDigestRandomGenerator

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)addSeedMaterialWithByteArray:(IOSByteArray *)inSeed {
  @synchronized(self) {
    LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(self, inSeed);
    LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(self, seed_);
    LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestDoFinalWithByteArray_(self, seed_);
  }
}

- (void)addSeedMaterialWithLong:(jlong)rSeed {
  @synchronized(self) {
    LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestAddCounterWithLong_(self, rSeed);
    LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(self, seed_);
    LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestDoFinalWithByteArray_(self, seed_);
  }
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes {
  [self nextBytesWithByteArray:bytes withInt:0 withInt:((IOSByteArray *) nil_chk(bytes))->size_];
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes
                       withInt:(jint)start
                       withInt:(jint)len {
  @synchronized(self) {
    jint stateOff = 0;
    LibOrgBouncycastleCryptoPrngDigestRandomGenerator_generateState(self);
    jint end = start + len;
    for (jint i = start; i != end; i++) {
      if (stateOff == ((IOSByteArray *) nil_chk(state_))->size_) {
        LibOrgBouncycastleCryptoPrngDigestRandomGenerator_generateState(self);
        stateOff = 0;
      }
      *IOSByteArray_GetRef(nil_chk(bytes), i) = IOSByteArray_Get(nil_chk(state_), stateOff++);
    }
  }
}

- (void)cycleSeed {
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_cycleSeed(self);
}

- (void)generateState {
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_generateState(self);
}

- (void)digestAddCounterWithLong:(jlong)seed {
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestAddCounterWithLong_(self, seed);
}

- (void)digestUpdateWithByteArray:(IOSByteArray *)inSeed {
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(self, inSeed);
}

- (void)digestDoFinalWithByteArray:(IOSByteArray *)result {
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestDoFinalWithByteArray_(self, result);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(addSeedMaterialWithByteArray:);
  methods[2].selector = @selector(addSeedMaterialWithLong:);
  methods[3].selector = @selector(nextBytesWithByteArray:);
  methods[4].selector = @selector(nextBytesWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(cycleSeed);
  methods[6].selector = @selector(generateState);
  methods[7].selector = @selector(digestAddCounterWithLong:);
  methods[8].selector = @selector(digestUpdateWithByteArray:);
  methods[9].selector = @selector(digestDoFinalWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CYCLE_COUNT", "J", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "stateCounter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seedCounter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "state_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "addSeedMaterial", "[B", "J", "nextBytes", "[BII", "digestAddCounter", "digestUpdate", "digestDoFinal", &LibOrgBouncycastleCryptoPrngDigestRandomGenerator_CYCLE_COUNT };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoPrngDigestRandomGenerator = { "DigestRandomGenerator", "lib.org.bouncycastle.crypto.prng", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoPrngDigestRandomGenerator;
}

@end

void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
  self->seed_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize]];
  self->seedCounter_ = 1;
  self->state_ = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  self->stateCounter_ = 1;
}

LibOrgBouncycastleCryptoPrngDigestRandomGenerator *new_LibOrgBouncycastleCryptoPrngDigestRandomGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoPrngDigestRandomGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoPrngDigestRandomGenerator *create_LibOrgBouncycastleCryptoPrngDigestRandomGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoPrngDigestRandomGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_cycleSeed(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self) {
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(self, self->seed_);
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestAddCounterWithLong_(self, self->seedCounter_++);
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestDoFinalWithByteArray_(self, self->seed_);
}

void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_generateState(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self) {
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestAddCounterWithLong_(self, self->stateCounter_++);
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(self, self->state_);
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(self, self->seed_);
  LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestDoFinalWithByteArray_(self, self->state_);
  if ((self->stateCounter_ % LibOrgBouncycastleCryptoPrngDigestRandomGenerator_CYCLE_COUNT) == 0) {
    LibOrgBouncycastleCryptoPrngDigestRandomGenerator_cycleSeed(self);
  }
}

void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestAddCounterWithLong_(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self, jlong seed) {
  for (jint i = 0; i != 8; i++) {
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByte:(jbyte) seed];
    JreURShiftAssignLong(&seed, 8);
  }
}

void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestUpdateWithByteArray_(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self, IOSByteArray *inSeed) {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:inSeed withInt:0 withInt:((IOSByteArray *) nil_chk(inSeed))->size_];
}

void LibOrgBouncycastleCryptoPrngDigestRandomGenerator_digestDoFinalWithByteArray_(LibOrgBouncycastleCryptoPrngDigestRandomGenerator *self, IOSByteArray *result) {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:result withInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoPrngDigestRandomGenerator)
