//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/SymmetricAlgorithmProvider.java
//

#include "AlgorithmProvider.h"
#include "ConfigurableProvider.h"
#include "J2ObjC_source.h"
#include "SymmetricAlgorithmProvider.h"

@implementation LibOrgBouncycastleJcajceProviderSymmetricSymmetricAlgorithmProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricSymmetricAlgorithmProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addCMacAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider
                                                                          withNSString:(NSString *)algorithm
                                                                          withNSString:(NSString *)algorithmClassName
                                                                          withNSString:(NSString *)keyGeneratorClassName {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$$$", @"Mac.", algorithm, @"-CMAC") withNSString:algorithmClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$$", @"Alg.Alias.Mac.", algorithm, @"CMAC") withNSString:JreStrcat("$$", algorithm, @"-CMAC")];
  [provider addAlgorithmWithNSString:JreStrcat("$$$", @"KeyGenerator.", algorithm, @"-CMAC") withNSString:keyGeneratorClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$$", @"Alg.Alias.KeyGenerator.", algorithm, @"CMAC") withNSString:JreStrcat("$$", algorithm, @"-CMAC")];
}

- (void)addGMacAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider
                                                                          withNSString:(NSString *)algorithm
                                                                          withNSString:(NSString *)algorithmClassName
                                                                          withNSString:(NSString *)keyGeneratorClassName {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$$$", @"Mac.", algorithm, @"-GMAC") withNSString:algorithmClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$$", @"Alg.Alias.Mac.", algorithm, @"GMAC") withNSString:JreStrcat("$$", algorithm, @"-GMAC")];
  [provider addAlgorithmWithNSString:JreStrcat("$$$", @"KeyGenerator.", algorithm, @"-GMAC") withNSString:keyGeneratorClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$$", @"Alg.Alias.KeyGenerator.", algorithm, @"GMAC") withNSString:JreStrcat("$$", algorithm, @"-GMAC")];
}

- (void)addPoly1305AlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider
                                                                              withNSString:(NSString *)algorithm
                                                                              withNSString:(NSString *)algorithmClassName
                                                                              withNSString:(NSString *)keyGeneratorClassName {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$$", @"Mac.POLY1305-", algorithm) withNSString:algorithmClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.Mac.POLY1305", algorithm) withNSString:JreStrcat("$$", @"POLY1305-", algorithm)];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"KeyGenerator.POLY1305-", algorithm) withNSString:keyGeneratorClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.KeyGenerator.POLY1305", algorithm) withNSString:JreStrcat("$$", @"POLY1305-", algorithm)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addCMacAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:withNSString:withNSString:withNSString:);
  methods[2].selector = @selector(addGMacAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:withNSString:withNSString:withNSString:);
  methods[3].selector = @selector(addPoly1305AlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:withNSString:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addCMacAlgorithm", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;LNSString;LNSString;LNSString;", "addGMacAlgorithm", "addPoly1305Algorithm" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricSymmetricAlgorithmProvider = { "SymmetricAlgorithmProvider", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x400, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricSymmetricAlgorithmProvider;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricSymmetricAlgorithmProvider_init(LibOrgBouncycastleJcajceProviderSymmetricSymmetricAlgorithmProvider *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricSymmetricAlgorithmProvider)
