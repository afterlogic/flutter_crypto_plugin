//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/Wots.java
//

#include "HashFunctions.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SPHINCS256Config.h"
#include "Seed.h"
#include "Wots.h"

@interface LibOrgBouncycastlePqcCryptoSphincsWots ()

+ (void)clearWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)offSet
                   withInt:(jint)length;

@end

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoSphincsWots_clearWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offSet, jint length);

@implementation LibOrgBouncycastlePqcCryptoSphincsWots

+ (jint)WOTS_LOGW {
  return LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_LOGW;
}

+ (jint)WOTS_W {
  return LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W;
}

+ (jint)WOTS_L1 {
  return LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L1;
}

+ (jint)WOTS_L {
  return LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L;
}

+ (jint)WOTS_LOG_L {
  return LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L;
}

+ (jint)WOTS_SIGBYTES {
  return LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_SIGBYTES;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoSphincsWots_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)expand_seedWithByteArray:(IOSByteArray *)outseeds
                         withInt:(jint)outOff
                   withByteArray:(IOSByteArray *)inseed
                         withInt:(jint)inOff {
  LibOrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(outseeds, outOff, inseed, inOff);
}

+ (void)clearWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)offSet
                   withInt:(jint)length {
  LibOrgBouncycastlePqcCryptoSphincsWots_clearWithByteArray_withInt_withInt_(bytes, offSet, length);
}

+ (void)gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                       withByteArray:(IOSByteArray *)outArg
                                                             withInt:(jint)outOff
                                                       withByteArray:(IOSByteArray *)seed
                                                             withInt:(jint)seedOff
                                                       withByteArray:(IOSByteArray *)masks
                                                             withInt:(jint)masksOff
                                                             withInt:(jint)chainlen {
  LibOrgBouncycastlePqcCryptoSphincsWots_gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(hs, outArg, outOff, seed, seedOff, masks, masksOff, chainlen);
}

- (void)wots_pkgenWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                        withByteArray:(IOSByteArray *)pk
                                                              withInt:(jint)pkOff
                                                        withByteArray:(IOSByteArray *)sk
                                                              withInt:(jint)skOff
                                                        withByteArray:(IOSByteArray *)masks
                                                              withInt:(jint)masksOff {
  jint i;
  LibOrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(pk, pkOff, sk, skOff);
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++) LibOrgBouncycastlePqcCryptoSphincsWots_gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(hs, pk, pkOff + i * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, pk, pkOff + i * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, masks, masksOff, LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1);
}

- (void)wots_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                       withByteArray:(IOSByteArray *)sig
                                                             withInt:(jint)sigOff
                                                       withByteArray:(IOSByteArray *)msg
                                                       withByteArray:(IOSByteArray *)sk
                                                       withByteArray:(IOSByteArray *)masks {
  IOSIntArray *basew = [IOSIntArray newArrayWithLength:LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L];
  jint i;
  jint c = 0;
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L1; i += 2) {
    *IOSIntArray_GetRef(basew, i) = IOSByteArray_Get(nil_chk(msg), i / 2) & (jint) 0xf;
    *IOSIntArray_GetRef(basew, i + 1) = JreURShift32((IOSByteArray_Get(msg, i / 2) & (jint) 0xff), 4);
    c += LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i);
    c += LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i + 1);
  }
  for (; i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++) {
    *IOSIntArray_GetRef(basew, i) = c & (jint) 0xf;
    JreURShiftAssignInt(&c, 4);
  }
  LibOrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(sig, sigOff, sk, 0);
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++) LibOrgBouncycastlePqcCryptoSphincsWots_gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(hs, sig, sigOff + i * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, sig, sigOff + i * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, masks, 0, IOSIntArray_Get(basew, i));
}

- (void)wots_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                         withByteArray:(IOSByteArray *)pk
                                                         withByteArray:(IOSByteArray *)sig
                                                               withInt:(jint)sigOff
                                                         withByteArray:(IOSByteArray *)msg
                                                         withByteArray:(IOSByteArray *)masks {
  IOSIntArray *basew = [IOSIntArray newArrayWithLength:LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L];
  jint i;
  jint c = 0;
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L1; i += 2) {
    *IOSIntArray_GetRef(basew, i) = IOSByteArray_Get(nil_chk(msg), i / 2) & (jint) 0xf;
    *IOSIntArray_GetRef(basew, i + 1) = JreURShift32((IOSByteArray_Get(msg, i / 2) & (jint) 0xff), 4);
    c += LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i);
    c += LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i + 1);
  }
  for (; i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++) {
    *IOSIntArray_GetRef(basew, i) = c & (jint) 0xf;
    JreURShiftAssignInt(&c, 4);
  }
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++) LibOrgBouncycastlePqcCryptoSphincsWots_gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(hs, pk, i * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, sig, sigOff + i * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, masks, (IOSIntArray_Get(basew, i) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(expand_seedWithByteArray:withInt:withByteArray:withInt:);
  methods[2].selector = @selector(clearWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withInt:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(wots_pkgenWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(wots_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withByteArray:withByteArray:);
  methods[6].selector = @selector(wots_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withInt:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WOTS_LOGW", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_LOGW, 0x18, -1, -1, -1, -1 },
    { "WOTS_W", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W, 0x18, -1, -1, -1, -1 },
    { "WOTS_L1", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L1, 0x18, -1, -1, -1, -1 },
    { "WOTS_L", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L, 0x18, -1, -1, -1, -1 },
    { "WOTS_LOG_L", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L, 0x18, -1, -1, -1, -1 },
    { "WOTS_SIGBYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_SIGBYTES, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "expand_seed", "[BI[BI", "clear", "[BII", "gen_chain", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BI[BII", "wots_pkgen", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BI[BI", "wots_sign", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[B[B[B", "wots_verify", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[B[BI[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoSphincsWots = { "Wots", "lib.org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x0, 7, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoSphincsWots;
}

@end

void LibOrgBouncycastlePqcCryptoSphincsWots_init(LibOrgBouncycastlePqcCryptoSphincsWots *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoSphincsWots *new_LibOrgBouncycastlePqcCryptoSphincsWots_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoSphincsWots, init)
}

LibOrgBouncycastlePqcCryptoSphincsWots *create_LibOrgBouncycastlePqcCryptoSphincsWots_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoSphincsWots, init)
}

void LibOrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(IOSByteArray *outseeds, jint outOff, IOSByteArray *inseed, jint inOff) {
  LibOrgBouncycastlePqcCryptoSphincsWots_initialize();
  LibOrgBouncycastlePqcCryptoSphincsWots_clearWithByteArray_withInt_withInt_(outseeds, outOff, LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  LibOrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(outseeds, outOff, LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_L * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, inseed, inOff);
}

void LibOrgBouncycastlePqcCryptoSphincsWots_clearWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offSet, jint length) {
  LibOrgBouncycastlePqcCryptoSphincsWots_initialize();
  for (jint i = 0; i != length; i++) {
    *IOSByteArray_GetRef(nil_chk(bytes), i + offSet) = 0;
  }
}

void LibOrgBouncycastlePqcCryptoSphincsWots_gen_chainWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *outArg, jint outOff, IOSByteArray *seed, jint seedOff, IOSByteArray *masks, jint masksOff, jint chainlen) {
  LibOrgBouncycastlePqcCryptoSphincsWots_initialize();
  jint i;
  jint j;
  for (j = 0; j < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) *IOSByteArray_GetRef(nil_chk(outArg), j + outOff) = IOSByteArray_Get(nil_chk(seed), j + seedOff);
  for (i = 0; i < chainlen && i < LibOrgBouncycastlePqcCryptoSphincsWots_WOTS_W; i++) [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_n_n_maskWithByteArray:outArg withInt:outOff withByteArray:outArg withInt:outOff withByteArray:masks withInt:masksOff + (i * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoSphincsWots)
