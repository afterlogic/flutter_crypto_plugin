//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/CryptoServicesRegistrar.java
//

#include "CryptoServicesPermission.h"
#include "CryptoServicesRegistrar.h"
#include "DHParameters.h"
#include "DHValidationParameters.h"
#include "DSAParameters.h"
#include "DSAValidationParameters.h"
#include "Hex.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "X9ECParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/math/BigInteger.h"
#include "java/security/AccessController.h"
#include "java/security/Permission.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/SecureRandom.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface LibOrgBouncycastleCryptoCryptoServicesRegistrar ()

- (instancetype)init;

+ (IOSObjectArray *)lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property;

+ (void)localSetThreadWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                 withNSObjectArray:(IOSObjectArray *)propertyValue;

+ (void)localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                         withNSObjectArray:(IOSObjectArray *)propertyValue;

+ (IOSObjectArray *)localClearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property;

+ (void)checkPermissionWithJavaSecurityPermission:(JavaSecurityPermission *)permission;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)toDHWithLibOrgBouncycastleCryptoParamsDSAParameters:(LibOrgBouncycastleCryptoParamsDSAParameters *)dsaParams;

+ (jint)chooseLowerBoundWithInt:(jint)pSize;

@end

inline JavaSecurityPermission *LibOrgBouncycastleCryptoCryptoServicesRegistrar_get_CanSetDefaultProperty(void);
static JavaSecurityPermission *LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultProperty;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoCryptoServicesRegistrar, CanSetDefaultProperty, JavaSecurityPermission *)

inline JavaSecurityPermission *LibOrgBouncycastleCryptoCryptoServicesRegistrar_get_CanSetThreadProperty(void);
static JavaSecurityPermission *LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetThreadProperty;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoCryptoServicesRegistrar, CanSetThreadProperty, JavaSecurityPermission *)

inline JavaSecurityPermission *LibOrgBouncycastleCryptoCryptoServicesRegistrar_get_CanSetDefaultRandom(void);
static JavaSecurityPermission *LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultRandom;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoCryptoServicesRegistrar, CanSetDefaultRandom, JavaSecurityPermission *)

inline JavaLangThreadLocal *LibOrgBouncycastleCryptoCryptoServicesRegistrar_get_threadProperties(void);
static JavaLangThreadLocal *LibOrgBouncycastleCryptoCryptoServicesRegistrar_threadProperties;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoCryptoServicesRegistrar, threadProperties, JavaLangThreadLocal *)

inline id<JavaUtilMap> LibOrgBouncycastleCryptoCryptoServicesRegistrar_get_globalProperties(void);
static id<JavaUtilMap> LibOrgBouncycastleCryptoCryptoServicesRegistrar_globalProperties;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoCryptoServicesRegistrar, globalProperties, id<JavaUtilMap>)

inline JavaSecuritySecureRandom *LibOrgBouncycastleCryptoCryptoServicesRegistrar_get_defaultSecureRandom(void);
inline JavaSecuritySecureRandom *LibOrgBouncycastleCryptoCryptoServicesRegistrar_set_defaultSecureRandom(JavaSecuritySecureRandom *value);
static volatile_id LibOrgBouncycastleCryptoCryptoServicesRegistrar_defaultSecureRandom;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(LibOrgBouncycastleCryptoCryptoServicesRegistrar, defaultSecureRandom, JavaSecuritySecureRandom *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoCryptoServicesRegistrar_init(LibOrgBouncycastleCryptoCryptoServicesRegistrar *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoCryptoServicesRegistrar *new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoCryptoServicesRegistrar *create_LibOrgBouncycastleCryptoCryptoServicesRegistrar_init(void);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleCryptoCryptoServicesRegistrar_lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property);

__attribute__((unused)) static void LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetThreadWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, IOSObjectArray *propertyValue);

__attribute__((unused)) static void LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, IOSObjectArray *propertyValue);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleCryptoCryptoServicesRegistrar_localClearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property);

__attribute__((unused)) static void LibOrgBouncycastleCryptoCryptoServicesRegistrar_checkPermissionWithJavaSecurityPermission_(JavaSecurityPermission *permission);

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoCryptoServicesRegistrar_toDHWithLibOrgBouncycastleCryptoParamsDSAParameters_(LibOrgBouncycastleCryptoParamsDSAParameters *dsaParams);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoCryptoServicesRegistrar_chooseLowerBoundWithInt_(jint pSize);

@interface LibOrgBouncycastleCryptoCryptoServicesRegistrar_1 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  JavaLangSecurityManager *val$securityManager_;
  JavaSecurityPermission *val$permission_;
}

- (instancetype)initWithJavaLangSecurityManager:(JavaLangSecurityManager *)capture$0
                     withJavaSecurityPermission:(JavaSecurityPermission *)capture$1;

- (id)run;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoCryptoServicesRegistrar_1)

__attribute__((unused)) static void LibOrgBouncycastleCryptoCryptoServicesRegistrar_1_initWithJavaLangSecurityManager_withJavaSecurityPermission_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_1 *self, JavaLangSecurityManager *capture$0, JavaSecurityPermission *capture$1);

__attribute__((unused)) static LibOrgBouncycastleCryptoCryptoServicesRegistrar_1 *new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_1_initWithJavaLangSecurityManager_withJavaSecurityPermission_(JavaLangSecurityManager *capture$0, JavaSecurityPermission *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoCryptoServicesRegistrar_1 *create_LibOrgBouncycastleCryptoCryptoServicesRegistrar_1_initWithJavaLangSecurityManager_withJavaSecurityPermission_(JavaLangSecurityManager *capture$0, JavaSecurityPermission *capture$1);

@interface LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property () {
 @public
  NSString *name_;
  IOSClass *type_;
}

- (instancetype)initWithNSString:(NSString *)name
                    withIOSClass:(IOSClass *)type;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property, name_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property, type_, IOSClass *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *self, NSString *name, IOSClass *type);

__attribute__((unused)) static LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(NSString *name, IOSClass *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *create_LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(NSString *name, IOSClass *type);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoCryptoServicesRegistrar)

@implementation LibOrgBouncycastleCryptoCryptoServicesRegistrar

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaSecuritySecureRandom *)getSecureRandom {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
}

+ (void)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_setSecureRandomWithJavaSecuritySecureRandom_(secureRandom);
}

+ (id)getPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_getPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
}

+ (IOSObjectArray *)lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
}

+ (IOSObjectArray *)getSizedPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSizedPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
}

+ (id)getSizedPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                           withInt:(jint)size {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSizedPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withInt_(property, size);
}

+ (void)setThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                    withNSObjectArray:(IOSObjectArray *)propertyValue {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_setThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(property, propertyValue);
}

+ (void)setGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                    withNSObjectArray:(IOSObjectArray *)propertyValue {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_setGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(property, propertyValue);
}

+ (void)localSetThreadWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                 withNSObjectArray:(IOSObjectArray *)propertyValue {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetThreadWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(property, propertyValue);
}

+ (void)localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                         withNSObjectArray:(IOSObjectArray *)propertyValue {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(property, propertyValue);
}

+ (IOSObjectArray *)clearGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_clearGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
}

+ (IOSObjectArray *)clearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_clearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
}

+ (IOSObjectArray *)localClearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_localClearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
}

+ (void)checkPermissionWithJavaSecurityPermission:(JavaSecurityPermission *)permission {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_checkPermissionWithJavaSecurityPermission_(permission);
}

+ (LibOrgBouncycastleCryptoParamsDHParameters *)toDHWithLibOrgBouncycastleCryptoParamsDSAParameters:(LibOrgBouncycastleCryptoParamsDSAParameters *)dsaParams {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_toDHWithLibOrgBouncycastleCryptoParamsDSAParameters_(dsaParams);
}

+ (jint)chooseLowerBoundWithInt:(jint)pSize {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_chooseLowerBoundWithInt_(pSize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "[LNSObject;", 0xa, 5, 3, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 6, 3, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x89, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x89, 13, 11, -1, 12, -1, -1 },
    { NULL, "V", 0xa, 14, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x8a, 15, 11, -1, 12, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 16, 3, -1, 7, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 17, 3, -1, 7, -1, -1 },
    { NULL, "[LNSObject;", 0xa, 18, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsDHParameters;", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSecureRandom);
  methods[2].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[3].selector = @selector(getPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:);
  methods[4].selector = @selector(lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:);
  methods[5].selector = @selector(getSizedPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:);
  methods[6].selector = @selector(getSizedPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:withInt:);
  methods[7].selector = @selector(setThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:withNSObjectArray:);
  methods[8].selector = @selector(setGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:withNSObjectArray:);
  methods[9].selector = @selector(localSetThreadWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:withNSObjectArray:);
  methods[10].selector = @selector(localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:withNSObjectArray:);
  methods[11].selector = @selector(clearGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:);
  methods[12].selector = @selector(clearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:);
  methods[13].selector = @selector(localClearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property:);
  methods[14].selector = @selector(checkPermissionWithJavaSecurityPermission:);
  methods[15].selector = @selector(toDHWithLibOrgBouncycastleCryptoParamsDSAParameters:);
  methods[16].selector = @selector(chooseLowerBoundWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CanSetDefaultProperty", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "CanSetThreadProperty", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "CanSetDefaultRandom", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "threadProperties", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 28, 29, -1 },
    { "globalProperties", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 30, 31, -1 },
    { "defaultSecureRandom", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x4a, -1, 32, -1, -1 },
  };
  static const void *ptrTable[] = { "setSecureRandom", "LJavaSecuritySecureRandom;", "getProperty", "LLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property;", "<T:Ljava/lang/Object;>(Llib/org/bouncycastle/crypto/CryptoServicesRegistrar$Property;)TT;", "lookupProperty", "getSizedProperty", "<T:Ljava/lang/Object;>(Llib/org/bouncycastle/crypto/CryptoServicesRegistrar$Property;)[TT;", "LLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property;I", "<T:Ljava/lang/Object;>(Llib/org/bouncycastle/crypto/CryptoServicesRegistrar$Property;I)TT;", "setThreadProperty", "LLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property;[LNSObject;", "<T:Ljava/lang/Object;>(Llib/org/bouncycastle/crypto/CryptoServicesRegistrar$Property;[TT;)V", "setGlobalProperty", "localSetThread", "localSetGlobalProperty", "clearGlobalProperty", "clearThreadProperty", "localClearThreadProperty", "checkPermission", "LJavaSecurityPermission;", "toDH", "LLibOrgBouncycastleCryptoParamsDSAParameters;", "chooseLowerBound", "I", &LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultProperty, &LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetThreadProperty, &LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultRandom, &LibOrgBouncycastleCryptoCryptoServicesRegistrar_threadProperties, "Ljava/lang/ThreadLocal<Ljava/util/Map<Ljava/lang/String;[Ljava/lang/Object;>;>;", &LibOrgBouncycastleCryptoCryptoServicesRegistrar_globalProperties, "Ljava/util/Map<Ljava/lang/String;[Ljava/lang/Object;>;", &LibOrgBouncycastleCryptoCryptoServicesRegistrar_defaultSecureRandom };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoCryptoServicesRegistrar = { "CryptoServicesRegistrar", "lib.org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x11, 17, 6, -1, 3, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoCryptoServicesRegistrar;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoCryptoServicesRegistrar class]) {
    LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultProperty = new_LibOrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(LibOrgBouncycastleCryptoCryptoServicesPermission_GLOBAL_CONFIG);
    LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetThreadProperty = new_LibOrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(LibOrgBouncycastleCryptoCryptoServicesPermission_THREAD_LOCAL_CONFIG);
    LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultRandom = new_LibOrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(LibOrgBouncycastleCryptoCryptoServicesPermission_DEFAULT_RANDOM);
    LibOrgBouncycastleCryptoCryptoServicesRegistrar_threadProperties = new_JavaLangThreadLocal_init();
    LibOrgBouncycastleCryptoCryptoServicesRegistrar_globalProperties = JavaUtilCollections_synchronizedMapWithJavaUtilMap_(new_JavaUtilHashMap_init());
    {
      LibOrgBouncycastleCryptoParamsDSAParameters *def512Params = new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAValidationParameters_(new_JavaMathBigInteger_initWithNSString_withInt_(@"fca682ce8e12caba26efccf7110e526db078b05edecbcd1eb4a208f3ae1617ae01f35b91a47e6df63413c5e12ed0899bcd132acd50d99151bdc43ee737592e17", 16), new_JavaMathBigInteger_initWithNSString_withInt_(@"962eddcc369cba8ebb260ee6b6a126d9346e38c5", 16), new_JavaMathBigInteger_initWithNSString_withInt_(@"678471b27a9cf44ee91a49c5147db1a9aaf244f05a434d6486931d2d14271b9e35030b71fd73da179069b32e2935630e1c2062354d0da20a6c416e50be794ca4", 16), new_LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_(@"b869c82b35d70e1b1ff91b28e37a62ecdc34409b"), 123));
      LibOrgBouncycastleCryptoParamsDSAParameters *def768Params = new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAValidationParameters_(new_JavaMathBigInteger_initWithNSString_withInt_(@"e9e642599d355f37c97ffd3567120b8e25c9cd43e927b3a9670fbec5d890141922d2c3b3ad2480093799869d1e846aab49fab0ad26d2ce6a22219d470bce7d777d4a21fbe9c270b57f607002f3cef8393694cf45ee3688c11a8c56ab127a3daf", 16), new_JavaMathBigInteger_initWithNSString_withInt_(@"9cdbd84c9f1ac2f38d0f80f42ab952e7338bf511", 16), new_JavaMathBigInteger_initWithNSString_withInt_(@"30470ad5a005fb14ce2d9dcd87e38bc7d1b1c5facbaecbe95f190aa7a31d23c4dbbcbe06174544401a5b2c020965d8c2bd2171d3668445771f74ba084d2029d83c1c158547f3a9f1a2715be23d51ae4d3e5a1f6a7064f316933a346d3f529252", 16), new_LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_(@"77d0f8c4dad15eb8c4f2f8d6726cefd96d5bb399"), 263));
      LibOrgBouncycastleCryptoParamsDSAParameters *def1024Params = new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAValidationParameters_(new_JavaMathBigInteger_initWithNSString_withInt_(@"fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c7", 16), new_JavaMathBigInteger_initWithNSString_withInt_(@"9760508f15230bccb292b982a2eb840bf0581cf5", 16), new_JavaMathBigInteger_initWithNSString_withInt_(@"f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a", 16), new_LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_(@"8d5155894229d5e689ee01e6018a237e2cae64cd"), 92));
      LibOrgBouncycastleCryptoParamsDSAParameters *def2048Params = new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAValidationParameters_(new_JavaMathBigInteger_initWithNSString_withInt_(@"95475cf5d93e596c3fcd1d902add02f427f5f3c7210313bb45fb4d5bb2e5fe1cbd678cd4bbdd84c9836be1f31c0777725aeb6c2fc38b85f48076fa76bcd8146cc89a6fb2f706dd719898c2083dc8d896f84062e2c9c94d137b054a8d8096adb8d51952398eeca852a0af12df83e475aa65d4ec0c38a9560d5661186ff98b9fc9eb60eee8b030376b236bc73be3acdbd74fd61c1d2475fa3077b8f080467881ff7e1ca56fee066d79506ade51edbb5443a563927dbc4ba520086746175c8885925ebc64c6147906773496990cb714ec667304e261faee33b3cbdf008e0c3fa90650d97d3909c9275bf4ac86ffcb3d03e6dfc8ada5934242dd6d3bcca2a406cb0b", 16), new_JavaMathBigInteger_initWithNSString_withInt_(@"f8183668ba5fc5bb06b5981e6d8b795d30b8978d43ca0ec572e37e09939a9773", 16), new_JavaMathBigInteger_initWithNSString_withInt_(@"42debb9da5b3d88cc956e08787ec3f3a09bba5f48b889a74aaf53174aa0fbe7e3c5b8fcd7a53bef563b0e98560328960a9517f4014d3325fc7962bf1e049370d76d1314a76137e792f3f0db859d095e4a5b932024f079ecf2ef09c797452b0770e1350782ed57ddf794979dcef23cb96f183061965c4ebc93c9c71c56b925955a75f94cccf1449ac43d586d0beee43251b0b2287349d68de0d144403f13e802f4146d882e057af19b6f6275c6676c8fa0e3ca2713a3257fd1b27d0639f695e347d8d1cf9ac819a26ca9b04cb0eb9b7b035988d15bbac65212a55239cfc7e58fae38d7250ab9991ffbc97134025fe8ce04c4399ad96569be91a546f4978693c7a", 16), new_LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(LibOrgBouncycastleUtilEncodersHex_decodeWithNSString_(@"b0b4417601b59cbc9d8ac8f935cadaec4f5fbb2f23785609ae466748d9b5a536"), 497));
      LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(JreLoadStatic(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property, DSA_DEFAULT_PARAMS), [IOSObjectArray newArrayWithObjects:(id[]){ def512Params, def768Params, def1024Params, def2048Params } count:4 type:LibOrgBouncycastleCryptoParamsDSAParameters_class_()]);
      LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(JreLoadStatic(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property, DH_DEFAULT_PARAMS), [IOSObjectArray newArrayWithObjects:(id[]){ LibOrgBouncycastleCryptoCryptoServicesRegistrar_toDHWithLibOrgBouncycastleCryptoParamsDSAParameters_(def512Params), LibOrgBouncycastleCryptoCryptoServicesRegistrar_toDHWithLibOrgBouncycastleCryptoParamsDSAParameters_(def768Params), LibOrgBouncycastleCryptoCryptoServicesRegistrar_toDHWithLibOrgBouncycastleCryptoParamsDSAParameters_(def1024Params), LibOrgBouncycastleCryptoCryptoServicesRegistrar_toDHWithLibOrgBouncycastleCryptoParamsDSAParameters_(def2048Params) } count:4 type:LibOrgBouncycastleCryptoParamsDHParameters_class_()]);
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoCryptoServicesRegistrar)
  }
}

@end

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_init(LibOrgBouncycastleCryptoCryptoServicesRegistrar *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoCryptoServicesRegistrar *new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoCryptoServicesRegistrar, init)
}

LibOrgBouncycastleCryptoCryptoServicesRegistrar *create_LibOrgBouncycastleCryptoCryptoServicesRegistrar_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoCryptoServicesRegistrar, init)
}

JavaSecuritySecureRandom *LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom() {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  if (JreLoadVolatileId(&LibOrgBouncycastleCryptoCryptoServicesRegistrar_defaultSecureRandom) == nil) {
    return new_JavaSecuritySecureRandom_init();
  }
  return JreLoadVolatileId(&LibOrgBouncycastleCryptoCryptoServicesRegistrar_defaultSecureRandom);
}

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_setSecureRandomWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_checkPermissionWithJavaSecurityPermission_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultRandom);
  (void) JreVolatileStrongAssign(&LibOrgBouncycastleCryptoCryptoServicesRegistrar_defaultSecureRandom, secureRandom);
}

id LibOrgBouncycastleCryptoCryptoServicesRegistrar_getPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  IOSObjectArray *values = LibOrgBouncycastleCryptoCryptoServicesRegistrar_lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
  if (values != nil) {
    return IOSObjectArray_Get(values, 0);
  }
  return nil;
}

IOSObjectArray *LibOrgBouncycastleCryptoCryptoServicesRegistrar_lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  id<JavaUtilMap> properties = [((JavaLangThreadLocal *) nil_chk(LibOrgBouncycastleCryptoCryptoServicesRegistrar_threadProperties)) get];
  IOSObjectArray *values;
  if (properties == nil || ![properties containsKeyWithId:((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->name_]) {
    values = [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoCryptoServicesRegistrar_globalProperties)) getWithId:((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->name_];
  }
  else {
    values = [properties getWithId:((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->name_];
  }
  return values;
}

IOSObjectArray *LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSizedPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  IOSObjectArray *values = LibOrgBouncycastleCryptoCryptoServicesRegistrar_lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
  if (values == nil) {
    return nil;
  }
  return [values java_clone];
}

id LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSizedPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withInt_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, jint size) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  IOSObjectArray *values = LibOrgBouncycastleCryptoCryptoServicesRegistrar_lookupPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
  if (values == nil) {
    return nil;
  }
  if ([((IOSClass *) nil_chk(((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->type_)) isAssignableFrom:LibOrgBouncycastleCryptoParamsDHParameters_class_()]) {
    for (jint i = 0; i != values->size_; i++) {
      LibOrgBouncycastleCryptoParamsDHParameters *params = (LibOrgBouncycastleCryptoParamsDHParameters *) cast_chk(IOSObjectArray_Get(values, i), [LibOrgBouncycastleCryptoParamsDHParameters class]);
      if ([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(params)) getP])) bitLength] == size) {
        return params;
      }
    }
  }
  else if ([property->type_ isAssignableFrom:LibOrgBouncycastleCryptoParamsDSAParameters_class_()]) {
    for (jint i = 0; i != values->size_; i++) {
      LibOrgBouncycastleCryptoParamsDSAParameters *params = (LibOrgBouncycastleCryptoParamsDSAParameters *) cast_chk(IOSObjectArray_Get(values, i), [LibOrgBouncycastleCryptoParamsDSAParameters class]);
      if ([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk(params)) getP])) bitLength] == size) {
        return params;
      }
    }
  }
  return nil;
}

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_setThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, IOSObjectArray *propertyValue) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_checkPermissionWithJavaSecurityPermission_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetThreadProperty);
  if (![((IOSClass *) nil_chk(((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->type_)) isAssignableFrom:[nil_chk(IOSObjectArray_Get(nil_chk(propertyValue), 0)) java_getClass]]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Bad property value passed");
  }
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetThreadWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(property, [propertyValue java_clone]);
}

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_setGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, IOSObjectArray *propertyValue) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_checkPermissionWithJavaSecurityPermission_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultProperty);
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(property, [((IOSObjectArray *) nil_chk(propertyValue)) java_clone]);
}

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetThreadWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, IOSObjectArray *propertyValue) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  id<JavaUtilMap> properties = [((JavaLangThreadLocal *) nil_chk(LibOrgBouncycastleCryptoCryptoServicesRegistrar_threadProperties)) get];
  if (properties == nil) {
    properties = new_JavaUtilHashMap_init();
    [LibOrgBouncycastleCryptoCryptoServicesRegistrar_threadProperties setWithId:properties];
  }
  (void) [properties putWithId:((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->name_ withId:propertyValue];
}

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, IOSObjectArray *propertyValue) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  if (![((IOSClass *) nil_chk(((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->type_)) isAssignableFrom:[nil_chk(IOSObjectArray_Get(nil_chk(propertyValue), 0)) java_getClass]]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Bad property value passed");
  }
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_localSetThreadWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(property, propertyValue);
  (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoCryptoServicesRegistrar_globalProperties)) putWithId:property->name_ withId:propertyValue];
}

IOSObjectArray *LibOrgBouncycastleCryptoCryptoServicesRegistrar_clearGlobalPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_checkPermissionWithJavaSecurityPermission_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetDefaultProperty);
  (void) LibOrgBouncycastleCryptoCryptoServicesRegistrar_localClearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
  return [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoCryptoServicesRegistrar_globalProperties)) removeWithId:((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->name_];
}

IOSObjectArray *LibOrgBouncycastleCryptoCryptoServicesRegistrar_clearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_checkPermissionWithJavaSecurityPermission_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_CanSetThreadProperty);
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_localClearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(property);
}

IOSObjectArray *LibOrgBouncycastleCryptoCryptoServicesRegistrar_localClearThreadPropertyWithLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *property) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  id<JavaUtilMap> properties = [((JavaLangThreadLocal *) nil_chk(LibOrgBouncycastleCryptoCryptoServicesRegistrar_threadProperties)) get];
  if (properties == nil) {
    properties = new_JavaUtilHashMap_init();
    [LibOrgBouncycastleCryptoCryptoServicesRegistrar_threadProperties setWithId:properties];
  }
  return [properties removeWithId:((LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *) nil_chk(property))->name_];
}

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_checkPermissionWithJavaSecurityPermission_(JavaSecurityPermission *permission) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  JavaLangSecurityManager *securityManager = JavaLangSystem_getSecurityManager();
  if (securityManager != nil) {
    (void) JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_1_initWithJavaLangSecurityManager_withJavaSecurityPermission_(securityManager, permission));
  }
}

LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoCryptoServicesRegistrar_toDHWithLibOrgBouncycastleCryptoParamsDSAParameters_(LibOrgBouncycastleCryptoParamsDSAParameters *dsaParams) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  jint pSize = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk(dsaParams)) getP])) bitLength];
  jint m = LibOrgBouncycastleCryptoCryptoServicesRegistrar_chooseLowerBoundWithInt_(pSize);
  return new_LibOrgBouncycastleCryptoParamsDHParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withInt_withJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDHValidationParameters_([dsaParams getP], [dsaParams getG], [dsaParams getQ], m, 0, nil, new_LibOrgBouncycastleCryptoParamsDHValidationParameters_initWithByteArray_withInt_([((LibOrgBouncycastleCryptoParamsDSAValidationParameters *) nil_chk([dsaParams getValidationParameters])) getSeed], [((LibOrgBouncycastleCryptoParamsDSAValidationParameters *) nil_chk([dsaParams getValidationParameters])) getCounter]));
}

jint LibOrgBouncycastleCryptoCryptoServicesRegistrar_chooseLowerBoundWithInt_(jint pSize) {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_initialize();
  jint m = 160;
  if (pSize > 1024) {
    if (pSize <= 2048) {
      m = 224;
    }
    else if (pSize <= 3072) {
      m = 256;
    }
    else if (pSize <= 7680) {
      m = 384;
    }
    else {
      m = 512;
    }
  }
  return m;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoCryptoServicesRegistrar)

@implementation LibOrgBouncycastleCryptoCryptoServicesRegistrar_1

- (instancetype)initWithJavaLangSecurityManager:(JavaLangSecurityManager *)capture$0
                     withJavaSecurityPermission:(JavaSecurityPermission *)capture$1 {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_1_initWithJavaLangSecurityManager_withJavaSecurityPermission_(self, capture$0, capture$1);
  return self;
}

- (id)run {
  [((JavaLangSecurityManager *) nil_chk(val$securityManager_)) checkPermissionWithJavaSecurityPermission:val$permission_];
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangSecurityManager:withJavaSecurityPermission:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$securityManager_", "LJavaLangSecurityManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$permission_", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoCryptoServicesRegistrar;", "checkPermissionWithJavaSecurityPermission:", "Ljava/lang/Object;Ljava/security/PrivilegedAction<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoCryptoServicesRegistrar_1 = { "", "lib.org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, 2, -1 };
  return &_LibOrgBouncycastleCryptoCryptoServicesRegistrar_1;
}

@end

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_1_initWithJavaLangSecurityManager_withJavaSecurityPermission_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_1 *self, JavaLangSecurityManager *capture$0, JavaSecurityPermission *capture$1) {
  self->val$securityManager_ = capture$0;
  self->val$permission_ = capture$1;
  NSObject_init(self);
}

LibOrgBouncycastleCryptoCryptoServicesRegistrar_1 *new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_1_initWithJavaLangSecurityManager_withJavaSecurityPermission_(JavaLangSecurityManager *capture$0, JavaSecurityPermission *capture$1) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoCryptoServicesRegistrar_1, initWithJavaLangSecurityManager_withJavaSecurityPermission_, capture$0, capture$1)
}

LibOrgBouncycastleCryptoCryptoServicesRegistrar_1 *create_LibOrgBouncycastleCryptoCryptoServicesRegistrar_1_initWithJavaLangSecurityManager_withJavaSecurityPermission_(JavaLangSecurityManager *capture$0, JavaSecurityPermission *capture$1) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoCryptoServicesRegistrar_1, initWithJavaLangSecurityManager_withJavaSecurityPermission_, capture$0, capture$1)
}

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property)

LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_EC_IMPLICITLY_CA;
LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_DH_DEFAULT_PARAMS;
LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_DSA_DEFAULT_PARAMS;

@implementation LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property

+ (LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)EC_IMPLICITLY_CA {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_EC_IMPLICITLY_CA;
}

+ (LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)DH_DEFAULT_PARAMS {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_DH_DEFAULT_PARAMS;
}

+ (LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *)DSA_DEFAULT_PARAMS {
  return LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_DSA_DEFAULT_PARAMS;
}

- (instancetype)initWithNSString:(NSString *)name
                    withIOSClass:(IOSClass *)type {
  LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(self, name, type);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EC_IMPLICITLY_CA", "LLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property;", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "DH_DEFAULT_PARAMS", "LLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "DSA_DEFAULT_PARAMS", "LLibOrgBouncycastleCryptoCryptoServicesRegistrar_Property;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "type_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LIOSClass;", &LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_EC_IMPLICITLY_CA, &LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_DH_DEFAULT_PARAMS, &LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_DSA_DEFAULT_PARAMS, "LLibOrgBouncycastleCryptoCryptoServicesRegistrar;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property = { "Property", "lib.org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x19, 1, 5, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property class]) {
    LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_EC_IMPLICITLY_CA = new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(@"ecImplicitlyCA", LibOrgBouncycastleAsn1X9X9ECParameters_class_());
    LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_DH_DEFAULT_PARAMS = new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(@"dhDefaultParams", LibOrgBouncycastleCryptoParamsDHParameters_class_());
    LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_DSA_DEFAULT_PARAMS = new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(@"dsaDefaultParams", LibOrgBouncycastleCryptoParamsDSAParameters_class_());
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property)
  }
}

@end

void LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *self, NSString *name, IOSClass *type) {
  NSObject_init(self);
  self->name_ = name;
  self->type_ = type;
}

LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *new_LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(NSString *name, IOSClass *type) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property, initWithNSString_withIOSClass_, name, type)
}

LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property *create_LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property_initWithNSString_withIOSClass_(NSString *name, IOSClass *type) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property, initWithNSString_withIOSClass_, name, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoCryptoServicesRegistrar_Property)
