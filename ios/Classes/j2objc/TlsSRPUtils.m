//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsSRPUtils.java
//

#include "AlertDescription.h"
#include "BigIntegers.h"
#include "CipherSuite.h"
#include "ExtensionType.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "TlsFatalAlert.h"
#include "TlsProtocol.h"
#include "TlsSRPUtils.h"
#include "TlsUtils.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "java/util/Hashtable.h"

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoTlsTlsSRPUtils)

JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsSRPUtils_EXT_SRP;

@implementation LibOrgBouncycastleCryptoTlsTlsSRPUtils

+ (JavaLangInteger *)EXT_SRP {
  return LibOrgBouncycastleCryptoTlsTlsSRPUtils_EXT_SRP;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)addSRPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                               withByteArray:(IOSByteArray *)identity {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_addSRPExtensionWithJavaUtilHashtable_withByteArray_(extensions, identity);
}

+ (IOSByteArray *)getSRPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsSRPUtils_getSRPExtensionWithJavaUtilHashtable_(extensions);
}

+ (IOSByteArray *)createSRPExtensionWithByteArray:(IOSByteArray *)identity {
  return LibOrgBouncycastleCryptoTlsTlsSRPUtils_createSRPExtensionWithByteArray_(identity);
}

+ (IOSByteArray *)readSRPExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPExtensionWithByteArray_(extensionData);
}

+ (JavaMathBigInteger *)readSRPParameterWithJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPParameterWithJavaIoInputStream_(input);
}

+ (void)writeSRPParameterWithJavaMathBigInteger:(JavaMathBigInteger *)x
                         withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_writeSRPParameterWithJavaMathBigInteger_withJavaIoOutputStream_(x, output);
}

+ (jboolean)isSRPCipherSuiteWithInt:(jint)cipherSuite {
  return LibOrgBouncycastleCryptoTlsTlsSRPUtils_isSRPCipherSuiteWithInt_(cipherSuite);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 5, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 6, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 8, 9, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addSRPExtensionWithJavaUtilHashtable:withByteArray:);
  methods[2].selector = @selector(getSRPExtensionWithJavaUtilHashtable:);
  methods[3].selector = @selector(createSRPExtensionWithByteArray:);
  methods[4].selector = @selector(readSRPExtensionWithByteArray:);
  methods[5].selector = @selector(readSRPParameterWithJavaIoInputStream:);
  methods[6].selector = @selector(writeSRPParameterWithJavaMathBigInteger:withJavaIoOutputStream:);
  methods[7].selector = @selector(isSRPCipherSuiteWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXT_SRP", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "addSRPExtension", "LJavaUtilHashtable;[B", "LJavaIoIOException;", "getSRPExtension", "LJavaUtilHashtable;", "createSRPExtension", "[B", "readSRPExtension", "readSRPParameter", "LJavaIoInputStream;", "writeSRPParameter", "LJavaMathBigInteger;LJavaIoOutputStream;", "isSRPCipherSuite", "I", &LibOrgBouncycastleCryptoTlsTlsSRPUtils_EXT_SRP };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsSRPUtils = { "TlsSRPUtils", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsSRPUtils;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoTlsTlsSRPUtils class]) {
    LibOrgBouncycastleCryptoTlsTlsSRPUtils_EXT_SRP = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_srp);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoTlsTlsSRPUtils)
  }
}

@end

void LibOrgBouncycastleCryptoTlsTlsSRPUtils_init(LibOrgBouncycastleCryptoTlsTlsSRPUtils *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsTlsSRPUtils *new_LibOrgBouncycastleCryptoTlsTlsSRPUtils_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsSRPUtils, init)
}

LibOrgBouncycastleCryptoTlsTlsSRPUtils *create_LibOrgBouncycastleCryptoTlsTlsSRPUtils_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsSRPUtils, init)
}

void LibOrgBouncycastleCryptoTlsTlsSRPUtils_addSRPExtensionWithJavaUtilHashtable_withByteArray_(JavaUtilHashtable *extensions, IOSByteArray *identity) {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsSRPUtils_EXT_SRP withId:LibOrgBouncycastleCryptoTlsTlsSRPUtils_createSRPExtensionWithByteArray_(identity)];
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsSRPUtils_getSRPExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsSRPUtils_EXT_SRP);
  return extensionData == nil ? nil : LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPExtensionWithByteArray_(extensionData);
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsSRPUtils_createSRPExtensionWithByteArray_(IOSByteArray *identity) {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_initialize();
  if (identity == nil) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  return LibOrgBouncycastleCryptoTlsTlsUtils_encodeOpaque8WithByteArray_(identity);
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  IOSByteArray *identity = LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(buf);
  LibOrgBouncycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  return identity;
}

JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPParameterWithJavaIoInputStream_(JavaIoInputStream *input) {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_initialize();
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input));
}

void LibOrgBouncycastleCryptoTlsTlsSRPUtils_writeSRPParameterWithJavaMathBigInteger_withJavaIoOutputStream_(JavaMathBigInteger *x, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_initialize();
  LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(x), output);
}

jboolean LibOrgBouncycastleCryptoTlsTlsSRPUtils_isSRPCipherSuiteWithInt_(jint cipherSuite) {
  LibOrgBouncycastleCryptoTlsTlsSRPUtils_initialize();
  switch (cipherSuite) {
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_256_CBC_SHA:
    return true;
    default:
    return false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsSRPUtils)
