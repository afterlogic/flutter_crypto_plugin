//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/Poly1305KeyGenerator.java
//

#ifndef Poly1305KeyGenerator_H
#define Poly1305KeyGenerator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CipherKeyGenerator.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoKeyGenerationParameters;

@interface LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator : LibOrgBouncycastleCryptoCipherKeyGenerator

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)checkKeyWithByteArray:(IOSByteArray *)key;

+ (void)clampWithByteArray:(IOSByteArray *)key;

- (IOSByteArray *)generateKey;

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator_init(LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator *new_LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator *create_LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator_clampWithByteArray_(IOSByteArray *key);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator_checkKeyWithByteArray_(IOSByteArray *key);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoGeneratorsPoly1305KeyGenerator)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Poly1305KeyGenerator_H
