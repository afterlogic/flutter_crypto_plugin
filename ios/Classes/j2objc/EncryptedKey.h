//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/EncryptedKey.java
//

#ifndef EncryptedKey_H
#define EncryptedKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CmsEnvelopedData;
@class LibOrgBouncycastleAsn1CrmfEncryptedValue;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1CrmfEncryptedKey : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CrmfEncryptedValue:(LibOrgBouncycastleAsn1CrmfEncryptedValue *)encryptedValue;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmsEnvelopedData:(LibOrgBouncycastleAsn1CmsEnvelopedData *)envelopedData;

+ (LibOrgBouncycastleAsn1CrmfEncryptedKey *)getInstanceWithId:(id)o;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getValue;

- (jboolean)isEncryptedValue;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CrmfEncryptedKey)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfEncryptedKey *LibOrgBouncycastleAsn1CrmfEncryptedKey_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfEncryptedKey_initWithLibOrgBouncycastleAsn1CmsEnvelopedData_(LibOrgBouncycastleAsn1CrmfEncryptedKey *self, LibOrgBouncycastleAsn1CmsEnvelopedData *envelopedData);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfEncryptedKey *new_LibOrgBouncycastleAsn1CrmfEncryptedKey_initWithLibOrgBouncycastleAsn1CmsEnvelopedData_(LibOrgBouncycastleAsn1CmsEnvelopedData *envelopedData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfEncryptedKey *create_LibOrgBouncycastleAsn1CrmfEncryptedKey_initWithLibOrgBouncycastleAsn1CmsEnvelopedData_(LibOrgBouncycastleAsn1CmsEnvelopedData *envelopedData);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfEncryptedKey_initWithLibOrgBouncycastleAsn1CrmfEncryptedValue_(LibOrgBouncycastleAsn1CrmfEncryptedKey *self, LibOrgBouncycastleAsn1CrmfEncryptedValue *encryptedValue);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfEncryptedKey *new_LibOrgBouncycastleAsn1CrmfEncryptedKey_initWithLibOrgBouncycastleAsn1CrmfEncryptedValue_(LibOrgBouncycastleAsn1CrmfEncryptedValue *encryptedValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfEncryptedKey *create_LibOrgBouncycastleAsn1CrmfEncryptedKey_initWithLibOrgBouncycastleAsn1CrmfEncryptedValue_(LibOrgBouncycastleAsn1CrmfEncryptedValue *encryptedValue);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfEncryptedKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // EncryptedKey_H
