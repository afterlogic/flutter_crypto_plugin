//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/x509/X509CRLStoreSelector.java
//

#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "Arrays.h"
#include "Extension.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "X509AttributeCertificate.h"
#include "X509CRLStoreSelector.h"
#include "X509ExtensionUtil.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/cert/CRL.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"

@interface LibOrgBouncycastleX509X509CRLStoreSelector () {
 @public
  jboolean deltaCRLIndicator_;
  jboolean completeCRLEnabled_;
  JavaMathBigInteger *maxBaseCRLNumber_;
  IOSByteArray *issuingDistributionPoint_;
  jboolean issuingDistributionPointEnabled_;
  id<LibOrgBouncycastleX509X509AttributeCertificate> attrCertChecking_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509CRLStoreSelector, maxBaseCRLNumber_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509CRLStoreSelector, issuingDistributionPoint_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509CRLStoreSelector, attrCertChecking_, id<LibOrgBouncycastleX509X509AttributeCertificate>)

@implementation LibOrgBouncycastleX509X509CRLStoreSelector

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleX509X509CRLStoreSelector_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isIssuingDistributionPointEnabled {
  return issuingDistributionPointEnabled_;
}

- (void)setIssuingDistributionPointEnabledWithBoolean:(jboolean)issuingDistributionPointEnabled {
  self->issuingDistributionPointEnabled_ = issuingDistributionPointEnabled;
}

- (void)setAttrCertificateCheckingWithLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert {
  attrCertChecking_ = attrCert;
}

- (id<LibOrgBouncycastleX509X509AttributeCertificate>)getAttrCertificateChecking {
  return attrCertChecking_;
}

- (jboolean)matchWithId:(id)obj {
  if (!([obj isKindOfClass:[JavaSecurityCertX509CRL class]])) {
    return false;
  }
  JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk(obj, [JavaSecurityCertX509CRL class]);
  LibOrgBouncycastleAsn1ASN1Integer *dci = nil;
  @try {
    IOSByteArray *bytes = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, deltaCRLIndicator))) getId]];
    if (bytes != nil) {
      dci = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(LibOrgBouncycastleX509ExtensionX509ExtensionUtil_fromExtensionValueWithByteArray_(bytes));
    }
  }
  @catch (JavaLangException *e) {
    return false;
  }
  if ([self isDeltaCRLIndicatorEnabled]) {
    if (dci == nil) {
      return false;
    }
  }
  if ([self isCompleteCRLEnabled]) {
    if (dci != nil) {
      return false;
    }
  }
  if (dci != nil) {
    if (maxBaseCRLNumber_ != nil) {
      if ([((JavaMathBigInteger *) nil_chk([dci getPositiveValue])) compareToWithId:maxBaseCRLNumber_] == 1) {
        return false;
      }
    }
  }
  if (issuingDistributionPointEnabled_) {
    IOSByteArray *idp = [crl getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
    if (issuingDistributionPoint_ == nil) {
      if (idp != nil) {
        return false;
      }
    }
    else {
      if (!LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(idp, issuingDistributionPoint_)) {
        return false;
      }
    }
  }
  return [super matchWithJavaSecurityCertCRL:(JavaSecurityCertX509CRL *) cast_chk(obj, [JavaSecurityCertX509CRL class])];
}

- (jboolean)matchWithJavaSecurityCertCRL:(JavaSecurityCertCRL *)crl {
  return [self matchWithId:crl];
}

- (jboolean)isDeltaCRLIndicatorEnabled {
  return deltaCRLIndicator_;
}

- (void)setDeltaCRLIndicatorEnabledWithBoolean:(jboolean)deltaCRLIndicator {
  self->deltaCRLIndicator_ = deltaCRLIndicator;
}

+ (LibOrgBouncycastleX509X509CRLStoreSelector *)getInstanceWithJavaSecurityCertX509CRLSelector:(JavaSecurityCertX509CRLSelector *)selector {
  return LibOrgBouncycastleX509X509CRLStoreSelector_getInstanceWithJavaSecurityCertX509CRLSelector_(selector);
}

- (id)java_clone {
  LibOrgBouncycastleX509X509CRLStoreSelector *sel = LibOrgBouncycastleX509X509CRLStoreSelector_getInstanceWithJavaSecurityCertX509CRLSelector_(self);
  ((LibOrgBouncycastleX509X509CRLStoreSelector *) nil_chk(sel))->deltaCRLIndicator_ = deltaCRLIndicator_;
  sel->completeCRLEnabled_ = completeCRLEnabled_;
  sel->maxBaseCRLNumber_ = maxBaseCRLNumber_;
  sel->attrCertChecking_ = attrCertChecking_;
  sel->issuingDistributionPointEnabled_ = issuingDistributionPointEnabled_;
  sel->issuingDistributionPoint_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(issuingDistributionPoint_);
  return sel;
}

- (jboolean)isCompleteCRLEnabled {
  return completeCRLEnabled_;
}

- (void)setCompleteCRLEnabledWithBoolean:(jboolean)completeCRLEnabled {
  self->completeCRLEnabled_ = completeCRLEnabled;
}

- (JavaMathBigInteger *)getMaxBaseCRLNumber {
  return maxBaseCRLNumber_;
}

- (void)setMaxBaseCRLNumberWithJavaMathBigInteger:(JavaMathBigInteger *)maxBaseCRLNumber {
  self->maxBaseCRLNumber_ = maxBaseCRLNumber;
}

- (IOSByteArray *)getIssuingDistributionPoint {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(issuingDistributionPoint_);
}

- (void)setIssuingDistributionPointWithByteArray:(IOSByteArray *)issuingDistributionPoint {
  self->issuingDistributionPoint_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(issuingDistributionPoint);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleX509X509AttributeCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleX509X509CRLStoreSelector;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isIssuingDistributionPointEnabled);
  methods[2].selector = @selector(setIssuingDistributionPointEnabledWithBoolean:);
  methods[3].selector = @selector(setAttrCertificateCheckingWithLibOrgBouncycastleX509X509AttributeCertificate:);
  methods[4].selector = @selector(getAttrCertificateChecking);
  methods[5].selector = @selector(matchWithId:);
  methods[6].selector = @selector(matchWithJavaSecurityCertCRL:);
  methods[7].selector = @selector(isDeltaCRLIndicatorEnabled);
  methods[8].selector = @selector(setDeltaCRLIndicatorEnabledWithBoolean:);
  methods[9].selector = @selector(getInstanceWithJavaSecurityCertX509CRLSelector:);
  methods[10].selector = @selector(java_clone);
  methods[11].selector = @selector(isCompleteCRLEnabled);
  methods[12].selector = @selector(setCompleteCRLEnabledWithBoolean:);
  methods[13].selector = @selector(getMaxBaseCRLNumber);
  methods[14].selector = @selector(setMaxBaseCRLNumberWithJavaMathBigInteger:);
  methods[15].selector = @selector(getIssuingDistributionPoint);
  methods[16].selector = @selector(setIssuingDistributionPointWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "deltaCRLIndicator_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "completeCRLEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxBaseCRLNumber_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "issuingDistributionPoint_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "issuingDistributionPointEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attrCertChecking_", "LLibOrgBouncycastleX509X509AttributeCertificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setIssuingDistributionPointEnabled", "Z", "setAttrCertificateChecking", "LLibOrgBouncycastleX509X509AttributeCertificate;", "match", "LNSObject;", "LJavaSecurityCertCRL;", "setDeltaCRLIndicatorEnabled", "getInstance", "LJavaSecurityCertX509CRLSelector;", "clone", "setCompleteCRLEnabled", "setMaxBaseCRLNumber", "LJavaMathBigInteger;", "setIssuingDistributionPoint", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleX509X509CRLStoreSelector = { "X509CRLStoreSelector", "lib.org.bouncycastle.x509", ptrTable, methods, fields, 7, 0x1, 17, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleX509X509CRLStoreSelector;
}

@end

void LibOrgBouncycastleX509X509CRLStoreSelector_init(LibOrgBouncycastleX509X509CRLStoreSelector *self) {
  JavaSecurityCertX509CRLSelector_init(self);
  self->deltaCRLIndicator_ = false;
  self->completeCRLEnabled_ = false;
  self->maxBaseCRLNumber_ = nil;
  self->issuingDistributionPoint_ = nil;
  self->issuingDistributionPointEnabled_ = false;
}

LibOrgBouncycastleX509X509CRLStoreSelector *new_LibOrgBouncycastleX509X509CRLStoreSelector_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509X509CRLStoreSelector, init)
}

LibOrgBouncycastleX509X509CRLStoreSelector *create_LibOrgBouncycastleX509X509CRLStoreSelector_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509X509CRLStoreSelector, init)
}

LibOrgBouncycastleX509X509CRLStoreSelector *LibOrgBouncycastleX509X509CRLStoreSelector_getInstanceWithJavaSecurityCertX509CRLSelector_(JavaSecurityCertX509CRLSelector *selector) {
  LibOrgBouncycastleX509X509CRLStoreSelector_initialize();
  if (selector == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot create from null selector");
  }
  LibOrgBouncycastleX509X509CRLStoreSelector *cs = new_LibOrgBouncycastleX509X509CRLStoreSelector_init();
  [cs setCertificateCheckingWithJavaSecurityCertX509Certificate:[selector getCertificateChecking]];
  [cs setDateAndTimeWithJavaUtilDate:[selector getDateAndTime]];
  @try {
    [cs setIssuerNamesWithJavaUtilCollection:[selector getIssuerNames]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_([e getMessage]);
  }
  [cs setIssuersWithJavaUtilCollection:[selector getIssuers]];
  [cs setMaxCRLNumberWithJavaMathBigInteger:[selector getMaxCRL]];
  [cs setMinCRLNumberWithJavaMathBigInteger:[selector getMinCRL]];
  return cs;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleX509X509CRLStoreSelector)
