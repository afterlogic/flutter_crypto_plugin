//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/PKIArchiveOptions.java
//

#ifndef PKIArchiveOptions_H
#define PKIArchiveOptions_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1OctetString;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CrmfEncryptedKey;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1CrmfPKIArchiveOptions : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >
@property (readonly, class) jint encryptedPrivKey NS_SWIFT_NAME(encryptedPrivKey);
@property (readonly, class) jint keyGenParameters NS_SWIFT_NAME(keyGenParameters);
@property (readonly, class) jint archiveRemGenPrivKey NS_SWIFT_NAME(archiveRemGenPrivKey);

+ (jint)encryptedPrivKey;

+ (jint)keyGenParameters;

+ (jint)archiveRemGenPrivKey;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1OctetString:(LibOrgBouncycastleAsn1ASN1OctetString *)keyGenParameters;

- (instancetype __nonnull)initWithBoolean:(jboolean)archiveRemGenPrivKey;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CrmfEncryptedKey:(LibOrgBouncycastleAsn1CrmfEncryptedKey *)encKey;

+ (LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *)getInstanceWithId:(id)o;

- (jint)getType;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getValue;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CrmfPKIArchiveOptions)

inline jint LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_get_encryptedPrivKey(void);
#define LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_encryptedPrivKey 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1CrmfPKIArchiveOptions, encryptedPrivKey, jint)

inline jint LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_get_keyGenParameters(void);
#define LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_keyGenParameters 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1CrmfPKIArchiveOptions, keyGenParameters, jint)

inline jint LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_get_archiveRemGenPrivKey(void);
#define LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_archiveRemGenPrivKey 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1CrmfPKIArchiveOptions, archiveRemGenPrivKey, jint)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_getInstanceWithId_(id o);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithLibOrgBouncycastleAsn1CrmfEncryptedKey_(LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *self, LibOrgBouncycastleAsn1CrmfEncryptedKey *encKey);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *new_LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithLibOrgBouncycastleAsn1CrmfEncryptedKey_(LibOrgBouncycastleAsn1CrmfEncryptedKey *encKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *create_LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithLibOrgBouncycastleAsn1CrmfEncryptedKey_(LibOrgBouncycastleAsn1CrmfEncryptedKey *encKey);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *self, LibOrgBouncycastleAsn1ASN1OctetString *keyGenParameters);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *new_LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1ASN1OctetString *keyGenParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *create_LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1ASN1OctetString *keyGenParameters);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithBoolean_(LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *self, jboolean archiveRemGenPrivKey);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *new_LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithBoolean_(jboolean archiveRemGenPrivKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKIArchiveOptions *create_LibOrgBouncycastleAsn1CrmfPKIArchiveOptions_initWithBoolean_(jboolean archiveRemGenPrivKey);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfPKIArchiveOptions)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PKIArchiveOptions_H
