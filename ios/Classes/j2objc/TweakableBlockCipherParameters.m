//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/TweakableBlockCipherParameters.java
//

#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "TweakableBlockCipherParameters.h"

@interface LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters () {
 @public
  IOSByteArray *tweak_;
  LibOrgBouncycastleCryptoParamsKeyParameter *key_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters, tweak_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters, key_, LibOrgBouncycastleCryptoParamsKeyParameter *)

@implementation LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters

- (instancetype)initWithLibOrgBouncycastleCryptoParamsKeyParameter:(LibOrgBouncycastleCryptoParamsKeyParameter *)key
                                                     withByteArray:(IOSByteArray *)tweak {
  LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withByteArray_(self, key, tweak);
  return self;
}

- (LibOrgBouncycastleCryptoParamsKeyParameter *)getKey {
  return key_;
}

- (IOSByteArray *)getTweak {
  return tweak_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsKeyParameter:withByteArray:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(getTweak);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tweak_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsKeyParameter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsKeyParameter;[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters = { "TweakableBlockCipherParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters;
}

@end

void LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withByteArray_(LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters *self, LibOrgBouncycastleCryptoParamsKeyParameter *key, IOSByteArray *tweak) {
  NSObject_init(self);
  self->key_ = key;
  self->tweak_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(tweak);
}

LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters *new_LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withByteArray_(LibOrgBouncycastleCryptoParamsKeyParameter *key, IOSByteArray *tweak) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters, initWithLibOrgBouncycastleCryptoParamsKeyParameter_withByteArray_, key, tweak)
}

LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters *create_LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withByteArray_(LibOrgBouncycastleCryptoParamsKeyParameter *key, IOSByteArray *tweak) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters, initWithLibOrgBouncycastleCryptoParamsKeyParameter_withByteArray_, key, tweak)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsTweakableBlockCipherParameters)
