//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/util/PBESecretKeyFactory.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCPBEKey.h"
#include "BaseSecretKeyFactory.h"
#include "CipherParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PBE.h"
#include "PBESecretKeyFactory.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/spec/PBEKeySpec.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory () {
 @public
  jboolean forCipher_;
  jint scheme_;
  jint digest_;
  jint keySize_;
  jint ivSize_;
}

@end

@implementation LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory

- (instancetype)initWithNSString:(NSString *)algorithm
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                     withBoolean:(jboolean)forCipher
                         withInt:(jint)scheme
                         withInt:(jint)digest
                         withInt:(jint)keySize
                         withInt:(jint)ivSize {
  LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(self, algorithm, oid, forCipher, scheme, digest, keySize, ivSize);
  return self;
}

- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[JavaxCryptoSpecPBEKeySpec class]]) {
    JavaxCryptoSpecPBEKeySpec *pbeSpec = (JavaxCryptoSpecPBEKeySpec *) keySpec;
    id<LibOrgBouncycastleCryptoCipherParameters> param;
    if ([((JavaxCryptoSpecPBEKeySpec *) nil_chk(pbeSpec)) getSalt] == nil) {
      return new_LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withInt_withInt_withInt_withJavaxCryptoSpecPBEKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(self->algName_, self->algOid_, scheme_, digest_, keySize_, ivSize_, pbeSpec, nil);
    }
    if (forCipher_) {
      param = LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_Util_makePBEParametersWithJavaxCryptoSpecPBEKeySpec_withInt_withInt_withInt_withInt_(pbeSpec, scheme_, digest_, keySize_, ivSize_);
    }
    else {
      param = LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_Util_makePBEMacParametersWithJavaxCryptoSpecPBEKeySpec_withInt_withInt_withInt_(pbeSpec, scheme_, digest_, keySize_);
    }
    return new_LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withInt_withInt_withInt_withJavaxCryptoSpecPBEKeySpec_withLibOrgBouncycastleCryptoCipherParameters_(self->algName_, self->algOid_, scheme_, digest_, keySize_, ivSize_, pbeSpec, param);
  }
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Invalid KeySpec");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKey;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withBoolean:withInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(engineGenerateSecretWithJavaSecuritySpecKeySpec:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "forCipher_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scheme_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digest_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ivSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;ZIIII", "engineGenerateSecret", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory = { "PBESecretKeyFactory", "lib.org.bouncycastle.jcajce.provider.symmetric.util", ptrTable, methods, fields, 7, 0x1, 2, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory *self, NSString *algorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jboolean forCipher, jint scheme, jint digest, jint keySize, jint ivSize) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseSecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, algorithm, oid);
  self->forCipher_ = forCipher;
  self->scheme_ = scheme;
  self->digest_ = digest;
  self->keySize_ = keySize;
  self->ivSize_ = ivSize;
}

LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory *new_LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(NSString *algorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jboolean forCipher, jint scheme, jint digest, jint keySize, jint ivSize) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory, initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_, algorithm, oid, forCipher, scheme, digest, keySize, ivSize)
}

LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory *create_LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(NSString *algorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jboolean forCipher, jint scheme, jint digest, jint keySize, jint ivSize) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory, initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_, algorithm, oid, forCipher, scheme, digest, keySize, ivSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory)
