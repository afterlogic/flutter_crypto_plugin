//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/GOST3412_2015Engine.java
//

#include "Arrays.h"
#include "CipherParameters.h"
#include "DataLengthException.h"
#include "GOST3412_2015Engine.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OutputLengthException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine () {
 @public
  IOSByteArray *lFactors_;
  jint KEY_LENGTH_;
  jint SUB_LENGTH_;
  IOSObjectArray *subKeys_;
  jboolean forEncryption_;
  IOSObjectArray *_gf_mul_;
}

+ (IOSObjectArray *)init_gf256_mul_table OBJC_METHOD_FAMILY_NONE;

+ (jbyte)kuz_mul_gf256_slowWithByte:(jbyte)a
                           withByte:(jbyte)b;

- (void)generateSubKeysWithByteArray:(IOSByteArray *)userKey;

- (void)CWithByteArray:(IOSByteArray *)c
               withInt:(jint)i;

- (void)FWithByteArray:(IOSByteArray *)k
         withByteArray:(IOSByteArray *)a1
         withByteArray:(IOSByteArray *)a0;

- (void)GOST3412_2015FuncWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                         withByteArray:(IOSByteArray *)outArg
                               withInt:(jint)outOff;

- (IOSByteArray *)LSXWithByteArray:(IOSByteArray *)k
                     withByteArray:(IOSByteArray *)a;

- (IOSByteArray *)XSLWithByteArray:(IOSByteArray *)k
                     withByteArray:(IOSByteArray *)a;

- (void)XWithByteArray:(IOSByteArray *)result
         withByteArray:(IOSByteArray *)data;

- (void)SWithByteArray:(IOSByteArray *)data;

- (void)inverseSWithByteArray:(IOSByteArray *)data;

- (jint)unsignedByteWithByte:(jbyte)b;

- (void)LWithByteArray:(IOSByteArray *)data;

- (void)inverseLWithByteArray:(IOSByteArray *)data;

- (void)RWithByteArray:(IOSByteArray *)data;

- (void)inverseRWithByteArray:(IOSByteArray *)data;

- (jbyte)lWithByteArray:(IOSByteArray *)data;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine, lFactors_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine, subKeys_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine, _gf_mul_, IOSObjectArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_get_PI(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_PI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine, PI, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_get_inversePI(void);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inversePI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine, inversePI, IOSByteArray *)

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_init_gf256_mul_table(void);

__attribute__((unused)) static jbyte LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_kuz_mul_gf256_slowWithByte_withByte_(jbyte a, jbyte b);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_generateSubKeysWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *userKey);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_CWithByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *c, jint i);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_FWithByteArray_withByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *k, IOSByteArray *a1, IOSByteArray *a0);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_GOST3412_2015FuncWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LSXWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *k, IOSByteArray *a);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XSLWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *k, IOSByteArray *a);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *result, IOSByteArray *data);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_SWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseSWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_unsignedByteWithByte_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, jbyte b);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseLWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_RWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseRWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data);

__attribute__((unused)) static jbyte LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_lWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine)

@implementation LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine

+ (jint)BLOCK_SIZE {
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)init_gf256_mul_table {
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_init_gf256_mul_table();
}

+ (jbyte)kuz_mul_gf256_slowWithByte:(jbyte)a
                           withByte:(jbyte)b {
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_kuz_mul_gf256_slowWithByte_withByte_(a, b);
}

- (NSString *)getAlgorithmName {
  return @"GOST3412_2015";
}

- (jint)getBlockSize {
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]]) {
    self->forEncryption_ = forEncryption;
    LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_generateSubKeysWithByteArray_(self, [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) params))) getKey]);
  }
  else if (params != nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to GOST3412_2015 init - ", [[params java_getClass] getName]));
  }
}

- (void)generateSubKeysWithByteArray:(IOSByteArray *)userKey {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_generateSubKeysWithByteArray_(self, userKey);
}

- (void)CWithByteArray:(IOSByteArray *)c
               withInt:(jint)i {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_CWithByteArray_withInt_(self, c, i);
}

- (void)FWithByteArray:(IOSByteArray *)k
         withByteArray:(IOSByteArray *)a1
         withByteArray:(IOSByteArray *)a0 {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_FWithByteArray_withByteArray_withByteArray_(self, k, a1, a0);
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (subKeys_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"GOST3412_2015 engine not initialised");
  }
  if ((inOff + LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_GOST3412_2015FuncWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE;
}

- (void)GOST3412_2015FuncWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                         withByteArray:(IOSByteArray *)outArg
                               withInt:(jint)outOff {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_GOST3412_2015FuncWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (IOSByteArray *)LSXWithByteArray:(IOSByteArray *)k
                     withByteArray:(IOSByteArray *)a {
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LSXWithByteArray_withByteArray_(self, k, a);
}

- (IOSByteArray *)XSLWithByteArray:(IOSByteArray *)k
                     withByteArray:(IOSByteArray *)a {
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XSLWithByteArray_withByteArray_(self, k, a);
}

- (void)XWithByteArray:(IOSByteArray *)result
         withByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XWithByteArray_withByteArray_(self, result, data);
}

- (void)SWithByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_SWithByteArray_(self, data);
}

- (void)inverseSWithByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseSWithByteArray_(self, data);
}

- (jint)unsignedByteWithByte:(jbyte)b {
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_unsignedByteWithByte_(self, b);
}

- (void)LWithByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LWithByteArray_(self, data);
}

- (void)inverseLWithByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseLWithByteArray_(self, data);
}

- (void)RWithByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_RWithByteArray_(self, data);
}

- (void)inverseRWithByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseRWithByteArray_(self, data);
}

- (jbyte)lWithByteArray:(IOSByteArray *)data {
  return LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_lWithByteArray_(self, data);
}

- (void)reset {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[B", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 6, -1, -1, -1, -1 },
    { NULL, "B", 0x2, 27, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init_gf256_mul_table);
  methods[2].selector = @selector(kuz_mul_gf256_slowWithByte:withByte:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[6].selector = @selector(generateSubKeysWithByteArray:);
  methods[7].selector = @selector(CWithByteArray:withInt:);
  methods[8].selector = @selector(FWithByteArray:withByteArray:withByteArray:);
  methods[9].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[10].selector = @selector(GOST3412_2015FuncWithByteArray:withInt:withByteArray:withInt:);
  methods[11].selector = @selector(LSXWithByteArray:withByteArray:);
  methods[12].selector = @selector(XSLWithByteArray:withByteArray:);
  methods[13].selector = @selector(XWithByteArray:withByteArray:);
  methods[14].selector = @selector(SWithByteArray:);
  methods[15].selector = @selector(inverseSWithByteArray:);
  methods[16].selector = @selector(unsignedByteWithByte:);
  methods[17].selector = @selector(LWithByteArray:);
  methods[18].selector = @selector(inverseLWithByteArray:);
  methods[19].selector = @selector(RWithByteArray:);
  methods[20].selector = @selector(inverseRWithByteArray:);
  methods[21].selector = @selector(lWithByteArray:);
  methods[22].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PI", "[B", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "inversePI", "[B", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "lFactors_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "BLOCK_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE, 0x1c, -1, -1, -1, -1 },
    { "KEY_LENGTH_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SUB_LENGTH_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subKeys_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_gf_mul_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "kuz_mul_gf256_slow", "BB", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "generateSubKeys", "[B", "C", "[BI", "F", "[B[B[B", "processBlock", "[BI[BI", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "GOST3412_2015Func", "LSX", "[B[B", "XSL", "X", "S", "inverseS", "unsignedByte", "B", "L", "inverseL", "R", "inverseR", "l", &LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_PI, &LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inversePI };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine = { "GOST3412_2015Engine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 23, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine class]) {
    LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_PI = [IOSByteArray newArrayWithBytes:(jbyte[]){} count:256];
    LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inversePI = [IOSByteArray newArrayWithBytes:(jbyte[]){ -91, 45, 50, -113, 14, 48, 56, -64, 84, -26, -98, 57, 85, 126, 82, -111, 100, 3, 87, 90, 28, 96, 7, 24, 33, 114, -88, -47, 41, -58, -92, 63, -32, 39, -115, 12, -126, -22, -82, -76, -102, 99, 73, -27, 66, -28, 21, -73, -56, 6, 112, -99, 65, 117, 25, -55, -86, -4, 77, -65, 42, 115, -124, -43, -61, -81, 43, -122, -89, -79, -78, 91, 70, -45, -97, -3, -44, 15, -100, 47, -101, 67, -17, -39, 121, -74, 83, 127, -63, -16, 35, -25, 37, 94, -75, 30, -94, -33, -90, -2, -84, 34, -7, -30, 74, -68, 53, -54, -18, 120, 5, 107, 81, -31, 89, -93, -14, 113, 86, 17, 106, -119, -108, 101, -116, -69, 119, 60, 123, 40, -85, -46, 49, -34, -60, 95, -52, -49, 118, 44, -72, -40, 46, 54, -37, 105, -77, 20, -107, -66, 98, -95, 59, 22, 102, -23, 92, 108, 109, -83, 55, 97, 75, -71, -29, -70, -15, -96, -123, -125, -38, 71, -59, -80, 51, -6, -106, 111, 110, -62, -10, 80, -1, 93, -87, -114, 23, 27, -105, 125, -20, 88, -9, 31, -5, 124, 9, 13, 122, 103, 69, -121, -36, -24, 79, 29, 78, 4, -21, -8, -13, 62, 61, -67, -118, -120, -35, -51, 11, 19, -104, 2, -109, -128, -112, -48, 36, 52, -53, -19, -12, -50, -103, 16, 68, 64, -110, 58, 1, 38, 18, 26, 72, 104, -11, -127, -117, -57, -42, 32, 10, 8, 0, 76, -41, 116 } count:256];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine)
  }
}

@end

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_init(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self) {
  NSObject_init(self);
  self->lFactors_ = [IOSByteArray newArrayWithBytes:(jbyte[]){ -108, 32, -123, 16, -62, -64, 1, -5, 1, -64, -62, 16, -123, 32, -108, 1 } count:16];
  self->KEY_LENGTH_ = 32;
  self->SUB_LENGTH_ = self->KEY_LENGTH_ / 2;
  self->subKeys_ = nil;
  self->_gf_mul_ = LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_init_gf256_mul_table();
}

LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *new_LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine, init)
}

LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *create_LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine, init)
}

IOSObjectArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_init_gf256_mul_table() {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_initialize();
  IOSObjectArray *mul_table = [IOSObjectArray newArrayWithLength:256 type:IOSClass_byteArray(1)];
  for (jint x = 0; x < 256; x++) {
    (void) IOSObjectArray_SetAndConsume(mul_table, x, [IOSByteArray newArrayWithLength:256]);
    for (jint y = 0; y < 256; y++) {
      *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(mul_table, x)), y) = LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_kuz_mul_gf256_slowWithByte_withByte_((jbyte) x, (jbyte) y);
    }
  }
  return mul_table;
}

jbyte LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_kuz_mul_gf256_slowWithByte_withByte_(jbyte a, jbyte b) {
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_initialize();
  jbyte p = 0;
  jbyte counter;
  jbyte hi_bit_set;
  for (counter = 0; counter < 8 && a != 0 && b != 0; counter++) {
    if ((b & 1) != 0) {
      p ^= a;
    }
    hi_bit_set = (jbyte) (a & (jint) 0x80);
    JreLShiftAssignByte(&a, 1);
    if (hi_bit_set != 0) {
      a ^= (jint) 0xc3;
    }
    JreRShiftAssignByte(&b, 1);
  }
  return p;
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_generateSubKeysWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *userKey) {
  if (((IOSByteArray *) nil_chk(userKey))->size_ != self->KEY_LENGTH_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Key length invalid. Key needs to be 32 byte - 256 bit!!!");
  }
  self->subKeys_ = [IOSObjectArray newArrayWithLength:10 type:IOSClass_byteArray(1)];
  for (jint i = 0; i < 10; i++) {
    (void) IOSObjectArray_SetAndConsume(self->subKeys_, i, [IOSByteArray newArrayWithLength:self->SUB_LENGTH_]);
  }
  IOSByteArray *x = [IOSByteArray newArrayWithLength:self->SUB_LENGTH_];
  IOSByteArray *y = [IOSByteArray newArrayWithLength:self->SUB_LENGTH_];
  for (jint i = 0; i < self->SUB_LENGTH_; i++) {
    *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(self->subKeys_, 0)), i) = *IOSByteArray_GetRef(x, i) = IOSByteArray_Get(userKey, i);
    *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(self->subKeys_, 1)), i) = *IOSByteArray_GetRef(y, i) = IOSByteArray_Get(userKey, i + self->SUB_LENGTH_);
  }
  IOSByteArray *c = [IOSByteArray newArrayWithLength:self->SUB_LENGTH_];
  for (jint k = 1; k < 5; k++) {
    for (jint j = 1; j <= 8; j++) {
      LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_CWithByteArray_withInt_(self, c, 8 * (k - 1) + j);
      LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_FWithByteArray_withByteArray_withByteArray_(self, c, x, y);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(x, 0, IOSObjectArray_Get(nil_chk(self->subKeys_), 2 * k), 0, self->SUB_LENGTH_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(y, 0, IOSObjectArray_Get(nil_chk(self->subKeys_), 2 * k + 1), 0, self->SUB_LENGTH_);
  }
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_CWithByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *c, jint i) {
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(c);
  *IOSByteArray_GetRef(nil_chk(c), 15) = (jbyte) i;
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LWithByteArray_(self, c);
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_FWithByteArray_withByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *k, IOSByteArray *a1, IOSByteArray *a0) {
  IOSByteArray *temp = LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LSXWithByteArray_withByteArray_(self, k, a1);
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XWithByteArray_withByteArray_(self, temp, a0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a1, 0, a0, 0, self->SUB_LENGTH_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temp, 0, a1, 0, self->SUB_LENGTH_);
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_GOST3412_2015FuncWithByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  IOSByteArray *block = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, block, 0, LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE);
  if (self->forEncryption_) {
    for (jint i = 0; i < 9; i++) {
      IOSByteArray *temp = LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LSXWithByteArray_withByteArray_(self, IOSObjectArray_Get(nil_chk(self->subKeys_), i), block);
      block = LibOrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(temp, LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE);
    }
    LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XWithByteArray_withByteArray_(self, block, IOSObjectArray_Get(nil_chk(self->subKeys_), 9));
  }
  else {
    for (jint i = 9; i > 0; i--) {
      IOSByteArray *temp = LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XSLWithByteArray_withByteArray_(self, IOSObjectArray_Get(nil_chk(self->subKeys_), i), block);
      block = LibOrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(temp, LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE);
    }
    LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XWithByteArray_withByteArray_(self, block, IOSObjectArray_Get(nil_chk(self->subKeys_), 0));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, outArg, outOff, LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_BLOCK_SIZE);
}

IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LSXWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *k, IOSByteArray *a) {
  IOSByteArray *result = LibOrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(k, ((IOSByteArray *) nil_chk(k))->size_);
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XWithByteArray_withByteArray_(self, result, a);
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_SWithByteArray_(self, result);
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LWithByteArray_(self, result);
  return result;
}

IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XSLWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *k, IOSByteArray *a) {
  IOSByteArray *result = LibOrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(k, ((IOSByteArray *) nil_chk(k))->size_);
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XWithByteArray_withByteArray_(self, result, a);
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseLWithByteArray_(self, result);
  LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseSWithByteArray_(self, result);
  return result;
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_XWithByteArray_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *result, IOSByteArray *data) {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(result))->size_; i++) {
    *IOSByteArray_GetRef(result, i) ^= IOSByteArray_Get(nil_chk(data), i);
  }
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_SWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data) {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data))->size_; i++) {
    *IOSByteArray_GetRef(data, i) = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_PI), LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_unsignedByteWithByte_(self, IOSByteArray_Get(data, i)));
  }
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseSWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data) {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data))->size_; i++) {
    *IOSByteArray_GetRef(data, i) = IOSByteArray_Get(nil_chk(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inversePI), LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_unsignedByteWithByte_(self, IOSByteArray_Get(data, i)));
  }
}

jint LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_unsignedByteWithByte_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, jbyte b) {
  return b & (jint) 0xFF;
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_LWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data) {
  for (jint i = 0; i < 16; i++) {
    LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_RWithByteArray_(self, data);
  }
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseLWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data) {
  for (jint i = 0; i < 16; i++) {
    LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseRWithByteArray_(self, data);
  }
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_RWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data) {
  jbyte z = LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_lWithByteArray_(self, data);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, data, 1, 15);
  *IOSByteArray_GetRef(nil_chk(data), 0) = z;
}

void LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_inverseRWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data) {
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:16];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 1, temp, 0, 15);
  *IOSByteArray_GetRef(temp, 15) = IOSByteArray_Get(nil_chk(data), 0);
  jbyte z = LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_lWithByteArray_(self, temp);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 1, data, 0, 15);
  *IOSByteArray_GetRef(data, 15) = z;
}

jbyte LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_lWithByteArray_(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine *self, IOSByteArray *data) {
  jbyte x = IOSByteArray_Get(nil_chk(data), 15);
  for (jint i = 14; i >= 0; i--) {
    x ^= IOSByteArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->_gf_mul_), LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_unsignedByteWithByte_(self, IOSByteArray_Get(data, i)))), LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine_unsignedByteWithByte_(self, IOSByteArray_Get(nil_chk(self->lFactors_), i)));
  }
  return x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesGOST3412_2015Engine)
