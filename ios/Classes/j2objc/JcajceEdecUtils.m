//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/edec/JcajceEdecUtils.java
//

#include "AsymmetricKeyParameter.h"
#include "Ed25519PublicKeyParameters.h"
#include "Ed448PublicKeyParameters.h"
#include "Fingerprint.h"
#include "Hex.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceEdecUtils.h"
#include "Strings.h"
#include "X25519PublicKeyParameters.h"
#include "X448PublicKeyParameters.h"
#include "java/lang/StringBuffer.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils ()

+ (NSString *)generateKeyFingerprintWithByteArray:(IOSByteArray *)keyBytes;

@end

__attribute__((unused)) static NSString *LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_generateKeyFingerprintWithByteArray_(IOSByteArray *keyBytes);

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isValidPrefixWithByteArray:(IOSByteArray *)prefix
                         withByteArray:(IOSByteArray *)encoding {
  return LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_isValidPrefixWithByteArray_withByteArray_(prefix, encoding);
}

+ (NSString *)keyToStringWithNSString:(NSString *)label
                         withNSString:(NSString *)algorithm
withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)pubKey {
  return LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_keyToStringWithNSString_withNSString_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(label, algorithm, pubKey);
}

+ (NSString *)generateKeyFingerprintWithByteArray:(IOSByteArray *)keyBytes {
  return LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_generateKeyFingerprintWithByteArray_(keyBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isValidPrefixWithByteArray:withByteArray:);
  methods[2].selector = @selector(keyToStringWithNSString:withNSString:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[3].selector = @selector(generateKeyFingerprintWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isValidPrefix", "[B[B", "keyToString", "LNSString;LNSString;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "generateKeyFingerprint", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils = { "JcajceEdecUtils", "lib.org.bouncycastle.jcajce.provider.asymmetric.edec", ptrTable, methods, NULL, 7, 0x0, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_init(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils *new_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils *create_LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils, init)
}

jboolean LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_isValidPrefixWithByteArray_withByteArray_(IOSByteArray *prefix, IOSByteArray *encoding) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_initialize();
  if (((IOSByteArray *) nil_chk(encoding))->size_ < ((IOSByteArray *) nil_chk(prefix))->size_) {
    return !LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_isValidPrefixWithByteArray_withByteArray_(prefix, prefix);
  }
  jint nonEqual = 0;
  for (jint i = 0; i != prefix->size_; i++) {
    nonEqual |= (IOSByteArray_Get(prefix, i) ^ IOSByteArray_Get(encoding, i));
  }
  return nonEqual == 0;
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_keyToStringWithNSString_withNSString_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(NSString *label, NSString *algorithm, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *pubKey) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = LibOrgBouncycastleUtilStrings_lineSeparator();
  IOSByteArray *keyBytes;
  if ([pubKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX448PublicKeyParameters class]]) {
    keyBytes = [((LibOrgBouncycastleCryptoParamsX448PublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsX448PublicKeyParameters *) pubKey))) getEncoded];
  }
  else if ([pubKey isKindOfClass:[LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters class]]) {
    keyBytes = [((LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters *) pubKey))) getEncoded];
  }
  else if ([pubKey isKindOfClass:[LibOrgBouncycastleCryptoParamsX25519PublicKeyParameters class]]) {
    keyBytes = [((LibOrgBouncycastleCryptoParamsX25519PublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsX25519PublicKeyParameters *) pubKey))) getEncoded];
  }
  else {
    keyBytes = [((LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *) cast_chk(pubKey, [LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters class])))) getEncoded];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:algorithm])) appendWithNSString:@" "])) appendWithNSString:label])) appendWithNSString:@" ["])) appendWithNSString:LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_generateKeyFingerprintWithByteArray_(keyBytes)])) appendWithNSString:@"]"])) appendWithNSString:nl])) appendWithNSString:@"    public data: "])) appendWithNSString:LibOrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_(keyBytes)])) appendWithNSString:nl];
  return [buf description];
}

NSString *LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_generateKeyFingerprintWithByteArray_(IOSByteArray *keyBytes) {
  LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils_initialize();
  return [new_LibOrgBouncycastleUtilFingerprint_initWithByteArray_(keyBytes) description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEdecJcajceEdecUtils)
