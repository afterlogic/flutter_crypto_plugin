//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/RSAKeyParameters.java
//

#include "AsymmetricKeyParameter.h"
#include "J2ObjC_source.h"
#include "RSAKeyParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoParamsRSAKeyParameters () {
 @public
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *exponent_;
}

- (JavaMathBigInteger *)validateWithJavaMathBigInteger:(JavaMathBigInteger *)modulus;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsRSAKeyParameters, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsRSAKeyParameters, exponent_, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoParamsRSAKeyParameters_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoParamsRSAKeyParameters_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoParamsRSAKeyParameters, ONE, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoParamsRSAKeyParameters_validateWithJavaMathBigInteger_(LibOrgBouncycastleCryptoParamsRSAKeyParameters *self, JavaMathBigInteger *modulus);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoParamsRSAKeyParameters)

@implementation LibOrgBouncycastleCryptoParamsRSAKeyParameters

- (instancetype)initWithBoolean:(jboolean)isPrivate
         withJavaMathBigInteger:(JavaMathBigInteger *)modulus
         withJavaMathBigInteger:(JavaMathBigInteger *)exponent {
  LibOrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(self, isPrivate, modulus, exponent);
  return self;
}

- (JavaMathBigInteger *)validateWithJavaMathBigInteger:(JavaMathBigInteger *)modulus {
  return LibOrgBouncycastleCryptoParamsRSAKeyParameters_validateWithJavaMathBigInteger_(self, modulus);
}

- (JavaMathBigInteger *)getModulus {
  return modulus_;
}

- (JavaMathBigInteger *)getExponent {
  return exponent_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(validateWithJavaMathBigInteger:);
  methods[2].selector = @selector(getModulus);
  methods[3].selector = @selector(getExponent);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "modulus_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLJavaMathBigInteger;LJavaMathBigInteger;", "validate", "LJavaMathBigInteger;", &LibOrgBouncycastleCryptoParamsRSAKeyParameters_ONE };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsRSAKeyParameters = { "RSAKeyParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsRSAKeyParameters;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoParamsRSAKeyParameters class]) {
    LibOrgBouncycastleCryptoParamsRSAKeyParameters_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoParamsRSAKeyParameters)
  }
}

@end

void LibOrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleCryptoParamsRSAKeyParameters *self, jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, isPrivate);
  if (!isPrivate) {
    if (([((JavaMathBigInteger *) nil_chk(exponent)) intValue] & 1) == 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"RSA publicExponent is even");
    }
  }
  self->modulus_ = LibOrgBouncycastleCryptoParamsRSAKeyParameters_validateWithJavaMathBigInteger_(self, modulus);
  self->exponent_ = exponent;
}

LibOrgBouncycastleCryptoParamsRSAKeyParameters *new_LibOrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsRSAKeyParameters, initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_, isPrivate, modulus, exponent)
}

LibOrgBouncycastleCryptoParamsRSAKeyParameters *create_LibOrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsRSAKeyParameters, initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_, isPrivate, modulus, exponent)
}

JavaMathBigInteger *LibOrgBouncycastleCryptoParamsRSAKeyParameters_validateWithJavaMathBigInteger_(LibOrgBouncycastleCryptoParamsRSAKeyParameters *self, JavaMathBigInteger *modulus) {
  if (([((JavaMathBigInteger *) nil_chk(modulus)) intValue] & 1) == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"RSA modulus is even");
  }
  if (![((JavaMathBigInteger *) nil_chk([modulus gcdWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(@"1451887755777639901511587432083070202422614380984889313550570919659315177065956574359078912654149167643992684236991305777574330831666511589145701059710742276692757882915756220901998212975756543223550490431013061082131040808010565293748926901442915057819663730454818359472391642885328171302299245556663073719855")])) isEqual:LibOrgBouncycastleCryptoParamsRSAKeyParameters_ONE]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"RSA modulus has a small prime factor");
  }
  return modulus;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsRSAKeyParameters)
