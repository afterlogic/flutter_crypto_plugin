//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x9/X9Curve.java
//

#ifndef X9Curve_H
#define X9Curve_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"
#include "X9ObjectIdentifiers.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1X9X9FieldID;
@class LibOrgBouncycastleMathEcECCurve;

@interface LibOrgBouncycastleAsn1X9X9Curve : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1X9X9ObjectIdentifiers >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve;

- (instancetype __nonnull)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                                                    withByteArray:(IOSByteArray *)seed;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X9X9FieldID:(LibOrgBouncycastleAsn1X9X9FieldID *)fieldID
                                             withJavaMathBigInteger:(JavaMathBigInteger *)order
                                             withJavaMathBigInteger:(JavaMathBigInteger *)cofactor
                             withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

- (LibOrgBouncycastleMathEcECCurve *)getCurve;

- (IOSByteArray *)getSeed;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X9X9Curve)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleAsn1X9X9Curve *self, LibOrgBouncycastleMathEcECCurve *curve);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9Curve *new_LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *curve) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9Curve *create_LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleMathEcECCurve *curve);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleMathEcECCurve_withByteArray_(LibOrgBouncycastleAsn1X9X9Curve *self, LibOrgBouncycastleMathEcECCurve *curve, IOSByteArray *seed);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9Curve *new_LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleMathEcECCurve_withByteArray_(LibOrgBouncycastleMathEcECCurve *curve, IOSByteArray *seed) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9Curve *create_LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleMathEcECCurve_withByteArray_(LibOrgBouncycastleMathEcECCurve *curve, IOSByteArray *seed);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X9X9Curve *self, LibOrgBouncycastleAsn1X9X9FieldID *fieldID, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, LibOrgBouncycastleAsn1ASN1Sequence *seq);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9Curve *new_LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X9X9FieldID *fieldID, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9Curve *create_LibOrgBouncycastleAsn1X9X9Curve_initWithLibOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X9X9FieldID *fieldID, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, LibOrgBouncycastleAsn1ASN1Sequence *seq);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X9X9Curve)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // X9Curve_H
