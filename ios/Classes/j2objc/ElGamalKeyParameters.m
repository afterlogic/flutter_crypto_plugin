//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/ElGamalKeyParameters.java
//

#include "AsymmetricKeyParameter.h"
#include "ElGamalKeyParameters.h"
#include "ElGamalParameters.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoParamsElGamalKeyParameters () {
 @public
  LibOrgBouncycastleCryptoParamsElGamalParameters *params_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsElGamalKeyParameters, params_, LibOrgBouncycastleCryptoParamsElGamalParameters *)

@implementation LibOrgBouncycastleCryptoParamsElGamalKeyParameters

- (instancetype)initWithBoolean:(jboolean)isPrivate
withLibOrgBouncycastleCryptoParamsElGamalParameters:(LibOrgBouncycastleCryptoParamsElGamalParameters *)params {
  LibOrgBouncycastleCryptoParamsElGamalKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsElGamalParameters_(self, isPrivate, params);
  return self;
}

- (LibOrgBouncycastleCryptoParamsElGamalParameters *)getParameters {
  return params_;
}

- (NSUInteger)hash {
  return (params_ != nil) ? ((jint) [((LibOrgBouncycastleCryptoParamsElGamalParameters *) nil_chk(params_)) hash]) : 0;
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[LibOrgBouncycastleCryptoParamsElGamalKeyParameters class]])) {
    return false;
  }
  LibOrgBouncycastleCryptoParamsElGamalKeyParameters *dhKey = (LibOrgBouncycastleCryptoParamsElGamalKeyParameters *) cast_chk(obj, [LibOrgBouncycastleCryptoParamsElGamalKeyParameters class]);
  if (params_ == nil) {
    return [((LibOrgBouncycastleCryptoParamsElGamalKeyParameters *) nil_chk(dhKey)) getParameters] == nil;
  }
  else {
    return [params_ isEqual:[((LibOrgBouncycastleCryptoParamsElGamalKeyParameters *) nil_chk(dhKey)) getParameters]];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsElGamalParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withLibOrgBouncycastleCryptoParamsElGamalParameters:);
  methods[1].selector = @selector(getParameters);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastleCryptoParamsElGamalParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLLibOrgBouncycastleCryptoParamsElGamalParameters;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsElGamalKeyParameters = { "ElGamalKeyParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsElGamalKeyParameters;
}

@end

void LibOrgBouncycastleCryptoParamsElGamalKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsElGamalParameters_(LibOrgBouncycastleCryptoParamsElGamalKeyParameters *self, jboolean isPrivate, LibOrgBouncycastleCryptoParamsElGamalParameters *params) {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, isPrivate);
  self->params_ = params;
}

LibOrgBouncycastleCryptoParamsElGamalKeyParameters *new_LibOrgBouncycastleCryptoParamsElGamalKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsElGamalParameters_(jboolean isPrivate, LibOrgBouncycastleCryptoParamsElGamalParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsElGamalKeyParameters, initWithBoolean_withLibOrgBouncycastleCryptoParamsElGamalParameters_, isPrivate, params)
}

LibOrgBouncycastleCryptoParamsElGamalKeyParameters *create_LibOrgBouncycastleCryptoParamsElGamalKeyParameters_initWithBoolean_withLibOrgBouncycastleCryptoParamsElGamalParameters_(jboolean isPrivate, LibOrgBouncycastleCryptoParamsElGamalParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsElGamalKeyParameters, initWithBoolean_withLibOrgBouncycastleCryptoParamsElGamalParameters_, isPrivate, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsElGamalKeyParameters)
