//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/io/CryptoIoCipherInputStream.java
//

#ifndef CryptoIoCipherInputStream_H
#define CryptoIoCipherInputStream_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/io/FilterInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class LibOrgBouncycastleCryptoBufferedBlockCipher;
@protocol LibOrgBouncycastleCryptoModesAEADBlockCipher;
@protocol LibOrgBouncycastleCryptoStreamCipher;

@interface LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream : JavaIoFilterInputStream

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)is
   withLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)cipher;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)is
   withLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)cipher
                                            withInt:(jint)bufSize;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)is
    withLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)cipher;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)is
    withLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)cipher
                                            withInt:(jint)bufSize;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)is
           withLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)cipher;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)is
           withLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)cipher
                                            withInt:(jint)bufSize;

- (jint)available;

- (void)close;

- (void)markWithInt:(jint)readlimit;

- (jboolean)markSupported;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)b;

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

- (void)reset;

- (jlong)skipWithLong:(jlong)n;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *self, JavaIoInputStream *is, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(JavaIoInputStream *is, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(JavaIoInputStream *is, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoStreamCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *self, JavaIoInputStream *is, id<LibOrgBouncycastleCryptoStreamCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoStreamCipher_(JavaIoInputStream *is, id<LibOrgBouncycastleCryptoStreamCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoStreamCipher_(JavaIoInputStream *is, id<LibOrgBouncycastleCryptoStreamCipher> cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *self, JavaIoInputStream *is, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(JavaIoInputStream *is, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(JavaIoInputStream *is, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_withInt_(LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *self, JavaIoInputStream *is, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher, jint bufSize);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_withInt_(JavaIoInputStream *is, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher, jint bufSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_withInt_(JavaIoInputStream *is, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher, jint bufSize);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoStreamCipher_withInt_(LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *self, JavaIoInputStream *is, id<LibOrgBouncycastleCryptoStreamCipher> cipher, jint bufSize);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoStreamCipher_withInt_(JavaIoInputStream *is, id<LibOrgBouncycastleCryptoStreamCipher> cipher, jint bufSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoStreamCipher_withInt_(JavaIoInputStream *is, id<LibOrgBouncycastleCryptoStreamCipher> cipher, jint bufSize);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_(LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *self, JavaIoInputStream *is, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher, jint bufSize);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_(JavaIoInputStream *is, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher, jint bufSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream_initWithJavaIoInputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_withInt_(JavaIoInputStream *is, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher, jint bufSize);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoIoCryptoIoCipherInputStream)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CryptoIoCipherInputStream_H
