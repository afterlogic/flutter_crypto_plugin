//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ExtensionType.java
//

#ifndef ExtensionType_H
#define ExtensionType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsExtensionType : NSObject
@property (readonly, class) jint server_name NS_SWIFT_NAME(server_name);
@property (readonly, class) jint max_fragment_length NS_SWIFT_NAME(max_fragment_length);
@property (readonly, class) jint client_certificate_url NS_SWIFT_NAME(client_certificate_url);
@property (readonly, class) jint trusted_ca_keys NS_SWIFT_NAME(trusted_ca_keys);
@property (readonly, class) jint truncated_hmac NS_SWIFT_NAME(truncated_hmac);
@property (readonly, class) jint status_request NS_SWIFT_NAME(status_request);
@property (readonly, class) jint user_mapping NS_SWIFT_NAME(user_mapping);
@property (readonly, class) jint client_authz NS_SWIFT_NAME(client_authz);
@property (readonly, class) jint server_authz NS_SWIFT_NAME(server_authz);
@property (readonly, class) jint cert_type NS_SWIFT_NAME(cert_type);
@property (readonly, class) jint supported_groups NS_SWIFT_NAME(supported_groups);
@property (readonly, class) jint elliptic_curves NS_SWIFT_NAME(elliptic_curves);
@property (readonly, class) jint ec_point_formats NS_SWIFT_NAME(ec_point_formats);
@property (readonly, class) jint srp NS_SWIFT_NAME(srp);
@property (readonly, class) jint signature_algorithms NS_SWIFT_NAME(signature_algorithms);
@property (readonly, class) jint use_srtp NS_SWIFT_NAME(use_srtp);
@property (readonly, class) jint heartbeat NS_SWIFT_NAME(heartbeat);
@property (readonly, class) jint application_layer_protocol_negotiation NS_SWIFT_NAME(application_layer_protocol_negotiation);
@property (readonly, class) jint status_request_v2 NS_SWIFT_NAME(status_request_v2);
@property (readonly, class) jint signed_certificate_timestamp NS_SWIFT_NAME(signed_certificate_timestamp);
@property (readonly, class) jint client_certificate_type NS_SWIFT_NAME(client_certificate_type);
@property (readonly, class) jint server_certificate_type NS_SWIFT_NAME(server_certificate_type);
@property (readonly, class) jint padding NS_SWIFT_NAME(padding);
@property (readonly, class) jint encrypt_then_mac NS_SWIFT_NAME(encrypt_then_mac);
@property (readonly, class) jint extended_master_secret NS_SWIFT_NAME(extended_master_secret);
@property (readonly, class) jint DRAFT_token_binding NS_SWIFT_NAME(DRAFT_token_binding);
@property (readonly, class) jint cached_info NS_SWIFT_NAME(cached_info);
@property (readonly, class) jint session_ticket NS_SWIFT_NAME(session_ticket);
@property (readonly, class) jint negotiated_ff_dhe_groups NS_SWIFT_NAME(negotiated_ff_dhe_groups);
@property (readonly, class) jint renegotiation_info NS_SWIFT_NAME(renegotiation_info);

+ (jint)server_name;

+ (jint)max_fragment_length;

+ (jint)client_certificate_url;

+ (jint)trusted_ca_keys;

+ (jint)truncated_hmac;

+ (jint)status_request;

+ (jint)user_mapping;

+ (jint)client_authz;

+ (jint)server_authz;

+ (jint)cert_type;

+ (jint)supported_groups;

+ (jint)elliptic_curves;

+ (jint)ec_point_formats;

+ (jint)srp;

+ (jint)signature_algorithms;

+ (jint)use_srtp;

+ (jint)heartbeat;

+ (jint)application_layer_protocol_negotiation;

+ (jint)status_request_v2;

+ (jint)signed_certificate_timestamp;

+ (jint)client_certificate_type;

+ (jint)server_certificate_type;

+ (jint)padding;

+ (jint)encrypt_then_mac;

+ (jint)extended_master_secret;

+ (jint)DRAFT_token_binding;

+ (jint)cached_info;

+ (jint)session_ticket;

+ (jint)negotiated_ff_dhe_groups;

+ (jint)renegotiation_info;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsExtensionType)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_server_name(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_server_name 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, server_name, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_max_fragment_length(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_max_fragment_length 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, max_fragment_length, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_client_certificate_url(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_client_certificate_url 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, client_certificate_url, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_trusted_ca_keys(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_trusted_ca_keys 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, trusted_ca_keys, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_truncated_hmac(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_truncated_hmac 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, truncated_hmac, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_status_request(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_status_request 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, status_request, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_user_mapping(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_user_mapping 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, user_mapping, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_client_authz(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_client_authz 7
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, client_authz, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_server_authz(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_server_authz 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, server_authz, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_cert_type(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_cert_type 9
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, cert_type, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_supported_groups(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_supported_groups 10
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, supported_groups, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_elliptic_curves(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_elliptic_curves 10
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, elliptic_curves, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_ec_point_formats(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_ec_point_formats 11
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, ec_point_formats, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_srp(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_srp 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, srp, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_signature_algorithms(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_signature_algorithms 13
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, signature_algorithms, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_use_srtp(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_use_srtp 14
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, use_srtp, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_heartbeat(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_heartbeat 15
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, heartbeat, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_application_layer_protocol_negotiation(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_application_layer_protocol_negotiation 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, application_layer_protocol_negotiation, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_status_request_v2(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_status_request_v2 17
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, status_request_v2, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_signed_certificate_timestamp(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_signed_certificate_timestamp 18
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, signed_certificate_timestamp, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_client_certificate_type(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_client_certificate_type 19
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, client_certificate_type, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_server_certificate_type(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_server_certificate_type 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, server_certificate_type, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_padding(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_padding 21
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, padding, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_encrypt_then_mac(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_encrypt_then_mac 22
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, encrypt_then_mac, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_extended_master_secret(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_extended_master_secret 23
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, extended_master_secret, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_DRAFT_token_binding(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_DRAFT_token_binding 24
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, DRAFT_token_binding, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_cached_info(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_cached_info 25
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, cached_info, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_session_ticket(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_session_ticket 35
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, session_ticket, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_negotiated_ff_dhe_groups(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_negotiated_ff_dhe_groups 101
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, negotiated_ff_dhe_groups, jint)

inline jint LibOrgBouncycastleCryptoTlsExtensionType_get_renegotiation_info(void);
#define LibOrgBouncycastleCryptoTlsExtensionType_renegotiation_info 65281
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsExtensionType, renegotiation_info, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsExtensionType_init(LibOrgBouncycastleCryptoTlsExtensionType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsExtensionType *new_LibOrgBouncycastleCryptoTlsExtensionType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsExtensionType *create_LibOrgBouncycastleCryptoTlsExtensionType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsExtensionType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ExtensionType_H
