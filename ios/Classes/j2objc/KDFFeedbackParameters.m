//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/KDFFeedbackParameters.java
//

#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KDFFeedbackParameters.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastleCryptoParamsKDFFeedbackParameters () {
 @public
  IOSByteArray *ki_;
  IOSByteArray *iv_;
  jboolean useCounter_;
  jint r_;
  IOSByteArray *fixedInputData_;
}

- (instancetype)initWithByteArray:(IOSByteArray *)ki
                    withByteArray:(IOSByteArray *)iv
                    withByteArray:(IOSByteArray *)fixedInputData
                          withInt:(jint)r
                      withBoolean:(jboolean)useCounter;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters, ki_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters, iv_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters, fixedInputData_, IOSByteArray *)

inline jint LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_get_UNUSED_R(void);
#define LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_UNUSED_R -1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters, UNUSED_R, jint)

__attribute__((unused)) static void LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *self, IOSByteArray *ki, IOSByteArray *iv, IOSByteArray *fixedInputData, jint r, jboolean useCounter);

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *new_LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(IOSByteArray *ki, IOSByteArray *iv, IOSByteArray *fixedInputData, jint r, jboolean useCounter) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *create_LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(IOSByteArray *ki, IOSByteArray *iv, IOSByteArray *fixedInputData, jint r, jboolean useCounter);

@implementation LibOrgBouncycastleCryptoParamsKDFFeedbackParameters

- (instancetype)initWithByteArray:(IOSByteArray *)ki
                    withByteArray:(IOSByteArray *)iv
                    withByteArray:(IOSByteArray *)fixedInputData
                          withInt:(jint)r
                      withBoolean:(jboolean)useCounter {
  LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(self, ki, iv, fixedInputData, r, useCounter);
  return self;
}

+ (LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *)createWithCounterWithByteArray:(IOSByteArray *)ki
                                                                          withByteArray:(IOSByteArray *)iv
                                                                          withByteArray:(IOSByteArray *)fixedInputData
                                                                                withInt:(jint)r {
  return LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_createWithCounterWithByteArray_withByteArray_withByteArray_withInt_(ki, iv, fixedInputData, r);
}

+ (LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *)createWithoutCounterWithByteArray:(IOSByteArray *)ki
                                                                             withByteArray:(IOSByteArray *)iv
                                                                             withByteArray:(IOSByteArray *)fixedInputData {
  return LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_createWithoutCounterWithByteArray_withByteArray_withByteArray_(ki, iv, fixedInputData);
}

- (IOSByteArray *)getKI {
  return ki_;
}

- (IOSByteArray *)getIV {
  return iv_;
}

- (jboolean)useCounter {
  return useCounter_;
}

- (jint)getR {
  return r_;
}

- (IOSByteArray *)getFixedInputData {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(fixedInputData_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsKDFFeedbackParameters;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsKDFFeedbackParameters;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withByteArray:withByteArray:withInt:withBoolean:);
  methods[1].selector = @selector(createWithCounterWithByteArray:withByteArray:withByteArray:withInt:);
  methods[2].selector = @selector(createWithoutCounterWithByteArray:withByteArray:withByteArray:);
  methods[3].selector = @selector(getKI);
  methods[4].selector = @selector(getIV);
  methods[5].selector = @selector(useCounter);
  methods[6].selector = @selector(getR);
  methods[7].selector = @selector(getFixedInputData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNUSED_R", "I", .constantValue.asInt = LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_UNUSED_R, 0x1a, -1, -1, -1, -1 },
    { "ki_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "useCounter_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "r_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fixedInputData_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B[B[BIZ", "createWithCounter", "[B[B[BI", "createWithoutCounter", "[B[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsKDFFeedbackParameters = { "KDFFeedbackParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x11, 8, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsKDFFeedbackParameters;
}

@end

void LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *self, IOSByteArray *ki, IOSByteArray *iv, IOSByteArray *fixedInputData, jint r, jboolean useCounter) {
  NSObject_init(self);
  if (ki == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A KDF requires Ki (a seed) as input");
  }
  self->ki_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(ki);
  if (fixedInputData == nil) {
    self->fixedInputData_ = [IOSByteArray newArrayWithLength:0];
  }
  else {
    self->fixedInputData_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(fixedInputData);
  }
  self->r_ = r;
  if (iv == nil) {
    self->iv_ = [IOSByteArray newArrayWithLength:0];
  }
  else {
    self->iv_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(iv);
  }
  self->useCounter_ = useCounter;
}

LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *new_LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(IOSByteArray *ki, IOSByteArray *iv, IOSByteArray *fixedInputData, jint r, jboolean useCounter) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters, initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_, ki, iv, fixedInputData, r, useCounter)
}

LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *create_LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(IOSByteArray *ki, IOSByteArray *iv, IOSByteArray *fixedInputData, jint r, jboolean useCounter) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters, initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_, ki, iv, fixedInputData, r, useCounter)
}

LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_createWithCounterWithByteArray_withByteArray_withByteArray_withInt_(IOSByteArray *ki, IOSByteArray *iv, IOSByteArray *fixedInputData, jint r) {
  LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initialize();
  if (r != 8 && r != 16 && r != 24 && r != 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Length of counter should be 8, 16, 24 or 32");
  }
  return new_LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(ki, iv, fixedInputData, r, true);
}

LibOrgBouncycastleCryptoParamsKDFFeedbackParameters *LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_createWithoutCounterWithByteArray_withByteArray_withByteArray_(IOSByteArray *ki, IOSByteArray *iv, IOSByteArray *fixedInputData) {
  LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initialize();
  return new_LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_initWithByteArray_withByteArray_withByteArray_withInt_withBoolean_(ki, iv, fixedInputData, LibOrgBouncycastleCryptoParamsKDFFeedbackParameters_UNUSED_R, false);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsKDFFeedbackParameters)
