//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsDSASigner.java
//

#ifndef TlsDSASigner_H
#define TlsDSASigner_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsSigner.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoDSA;
@protocol LibOrgBouncycastleCryptoSigner;

@interface LibOrgBouncycastleCryptoTlsTlsDSASigner : LibOrgBouncycastleCryptoTlsAbstractTlsSigner

#pragma mark Public

- (instancetype __nonnull)init;

- (id<LibOrgBouncycastleCryptoSigner>)createSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                  withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey;

- (id<LibOrgBouncycastleCryptoSigner>)createVerifyerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                    withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey;

- (IOSByteArray *)generateRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                      withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey
                                                                                 withByteArray:(IOSByteArray *)hash_;

- (jboolean)verifyRawSignatureWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                         withByteArray:(IOSByteArray *)sigBytes
                              withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey
                                                                         withByteArray:(IOSByteArray *)hash_;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoDSA>)createDSAImplWithShort:(jshort)hashAlgorithm;

- (jshort)getSignatureAlgorithm;

- (id<LibOrgBouncycastleCryptoCipherParameters>)makeInitParametersWithBoolean:(jboolean)forSigning
                                 withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)cp;

- (id<LibOrgBouncycastleCryptoSigner>)makeSignerWithLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm:(LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                                             withBoolean:(jboolean)raw
                                                                                             withBoolean:(jboolean)forSigning
                                                            withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)cp;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsDSASigner)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDSASigner_init(LibOrgBouncycastleCryptoTlsTlsDSASigner *self);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsDSASigner)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsDSASigner_H
