//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/AlgorithmIdentifierFactory.java
//

#ifndef AlgorithmIdentifierFactory_H
#define AlgorithmIdentifierFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaSecuritySecureRandom;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;

@interface LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory : NSObject
@property (readonly, class) LibOrgBouncycastleAsn1ASN1ObjectIdentifier *IDEA_CBC NS_SWIFT_NAME(IDEA_CBC);
@property (readonly, class) LibOrgBouncycastleAsn1ASN1ObjectIdentifier *CAST5_CBC NS_SWIFT_NAME(CAST5_CBC);

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)IDEA_CBC;

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)CAST5_CBC;

#pragma mark Public

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)generateEncryptionAlgIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)encryptionOID
                                                                                                                 withInt:(jint)keySize
                                                                                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory)

inline LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory_get_IDEA_CBC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory_IDEA_CBC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory, IDEA_CBC, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)

inline LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory_get_CAST5_CBC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory_CAST5_CBC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory, CAST5_CBC, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory_generateEncryptionAlgIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withJavaSecuritySecureRandom_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *encryptionOID, jint keySize, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilAlgorithmIdentifierFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // AlgorithmIdentifierFactory_H
