//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/exception/JceExtCertificateEncodingException.java
//

#include "J2ObjC_source.h"
#include "JceExtCertificateEncodingException.h"
#include "java/lang/Throwable.h"
#include "java/security/cert/CertificateEncodingException.h"

@interface LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException () {
 @public
  JavaLangThrowable *cause_JceExtCertificateEncodingException_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException, cause_JceExtCertificateEncodingException_, JavaLangThrowable *)

@implementation LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException

- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(self, message, cause);
  return self;
}

- (JavaLangThrowable *)getCause {
  return cause_JceExtCertificateEncodingException_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaLangThrowable:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cause_JceExtCertificateEncodingException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaLangThrowable;", "cause" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException = { "JceExtCertificateEncodingException", "lib.org.bouncycastle.jce.exception", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException;
}

@end

void LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException *self, NSString *message, JavaLangThrowable *cause) {
  JavaSecurityCertCertificateEncodingException_initWithNSString_(self, message);
  self->cause_JceExtCertificateEncodingException_ = cause;
}

LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException *new_LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException, initWithNSString_withJavaLangThrowable_, message, cause)
}

LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException *create_LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException, initWithNSString_withJavaLangThrowable_, message, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceExceptionJceExtCertificateEncodingException)
