//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/IDEA.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmProvider.h"
#include "BaseAlgorithmParameterGenerator.h"
#include "BaseAlgorithmParameters.h"
#include "BaseBlockCipher.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CBCBlockCipher.h"
#include "CBCBlockCipherMac.h"
#include "CFBBlockCipherMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "CryptoServicesRegistrar.h"
#include "IDEA.h"
#include "IDEACBCPar.h"
#include "IDEAEngine.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MiscObjectIdentifiers.h"
#include "PBE.h"
#include "PBESecretKeyFactory.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/InvalidParameterSpecException.h"
#include "javax/crypto/spec/IvParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricIDEA ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricIDEA_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricIDEA *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricIDEA *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_init(void);

@interface LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams () {
 @public
  IOSByteArray *iv_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams, iv_, IOSByteArray *)

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac;LLibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA = { "IDEA", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB = { "ECB", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, new_LibOrgBouncycastleCryptoEnginesIDEAEngine_init());
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_ECB)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC = { "CBC", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesIDEAEngine_init()), 64);
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_CBC)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"IDEA", 128, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen = { "PBEWithSHAAndIDEAKeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(self, @"PBEwithSHAandIDEA-CBC", nil, true, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_PKCS12, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_SHA1, 128, 64);
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEAKeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA = { "PBEWithSHAAndIDEA", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesIDEAEngine_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_PBEWithSHAAndIDEA)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)engineInitWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)genParamSpec
                                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"No supported AlgorithmParameterSpec for IDEA parameter generation.");
}

- (JavaSecurityAlgorithmParameters *)engineGenerateParameters {
  IOSByteArray *iv = [IOSByteArray newArrayWithLength:8];
  if (random_ == nil) {
    random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  }
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:iv];
  JavaSecurityAlgorithmParameters *params;
  @try {
    params = [self createParametersInstanceWithNSString:@"IDEA"];
    [((JavaSecurityAlgorithmParameters *) nil_chk(params)) init__WithJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_(iv)];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_([e getMessage]);
  }
  return params;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineInitWithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(engineGenerateParameters);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "engineInit", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen = { "AlgParamGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 3, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseAlgorithmParameterGenerator_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParamGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)engineGetEncoded {
  return [self engineGetEncodedWithNSString:@"ASN.1"];
}

- (IOSByteArray *)engineGetEncodedWithNSString:(NSString *)format {
  if ([self isASN1FormatStringWithNSString:format]) {
    return [new_LibOrgBouncycastleAsn1MiscIDEACBCPar_initWithByteArray_([self engineGetEncodedWithNSString:@"RAW"]) getEncoded];
  }
  if ([((NSString *) nil_chk(format)) isEqual:@"RAW"]) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(iv_))->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv_, 0, tmp, 0, iv_->size_);
    return tmp;
  }
  return nil;
}

- (id<JavaSecuritySpecAlgorithmParameterSpec>)localEngineGetParameterSpecWithIOSClass:(IOSClass *)paramSpec {
  if (paramSpec == JavaxCryptoSpecIvParameterSpec_class_()) {
    return new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_(iv_);
  }
  @throw new_JavaSecuritySpecInvalidParameterSpecException_initWithNSString_(@"unknown parameter spec passed to IV parameters object.");
}

- (void)engineInitWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)paramSpec {
  if (!([paramSpec isKindOfClass:[JavaxCryptoSpecIvParameterSpec class]])) {
    @throw new_JavaSecuritySpecInvalidParameterSpecException_initWithNSString_(@"IvParameterSpec required to initialise a IV parameters algorithm parameters object");
  }
  self->iv_ = [((JavaxCryptoSpecIvParameterSpec *) nil_chk(((JavaxCryptoSpecIvParameterSpec *) cast_chk(paramSpec, [JavaxCryptoSpecIvParameterSpec class])))) getIV];
}

- (void)engineInitWithByteArray:(IOSByteArray *)params {
  self->iv_ = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(params))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(params, 0, iv_, 0, iv_->size_);
}

- (void)engineInitWithByteArray:(IOSByteArray *)params
                   withNSString:(NSString *)format {
  if ([((NSString *) nil_chk(format)) isEqual:@"RAW"]) {
    [self engineInitWithByteArray:params];
    return;
  }
  if ([format isEqual:@"ASN.1"]) {
    LibOrgBouncycastleAsn1MiscIDEACBCPar *oct = LibOrgBouncycastleAsn1MiscIDEACBCPar_getInstanceWithId_(params);
    [self engineInitWithByteArray:[((LibOrgBouncycastleAsn1MiscIDEACBCPar *) nil_chk(oct)) getIV]];
    return;
  }
  @throw new_JavaIoIOException_initWithNSString_(@"Unknown parameters format in IV parameters object");
}

- (NSString *)engineToString {
  return @"IDEA Parameters";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "[B", 0x4, 1, 2, 0, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecAlgorithmParameterSpec;", 0x4, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 8, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 9, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGetEncoded);
  methods[2].selector = @selector(engineGetEncodedWithNSString:);
  methods[3].selector = @selector(localEngineGetParameterSpecWithIOSClass:);
  methods[4].selector = @selector(engineInitWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[5].selector = @selector(engineInitWithByteArray:);
  methods[6].selector = @selector(engineInitWithByteArray:withNSString:);
  methods[7].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "engineGetEncoded", "LNSString;", "localEngineGetParameterSpec", "LIOSClass;", "LJavaSecuritySpecInvalidParameterSpecException;", "engineInit", "LJavaSecuritySpecAlgorithmParameterSpec;", "[B", "[BLNSString;", "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams = { "AlgParams", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 8, 1, 10, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseAlgorithmParameters_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_AlgParams)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac = { "Mac", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesIDEAEngine_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mac)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac = { "CFB8Mac", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsCFBBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesIDEAEngine_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_CFB8Mac)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"AlgorithmParameterGenerator.IDEA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$AlgParamGen")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameterGenerator.1.3.6.1.4.1.188.7.1.1.2" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$AlgParamGen")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.IDEA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$AlgParams")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.1.3.6.1.4.1.188.7.1.1.2" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$AlgParams")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDIDEA" withNSString:@"PKCS12PBE"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.AlgorithmParameters.PBEWITHSHAANDIDEA-CBC" withNSString:@"PKCS12PBE"];
  [provider addAlgorithmWithNSString:@"Cipher.IDEA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$ECB")];
  [provider addAlgorithmWithNSString:@"Cipher" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, as_sys_sec_alg_ideaCBC) withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$CBC")];
  [provider addAlgorithmWithNSString:@"Cipher.PBEWITHSHAANDIDEA-CBC" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$PBEWithSHAAndIDEA")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.IDEA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"KeyGenerator" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, as_sys_sec_alg_ideaCBC) withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.PBEWITHSHAANDIDEA-CBC" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$PBEWithSHAAndIDEAKeyGen")];
  [provider addAlgorithmWithNSString:@"Mac.IDEAMAC" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$Mac")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Mac.IDEA" withNSString:@"IDEAMAC"];
  [provider addAlgorithmWithNSString:@"Mac.IDEAMAC/CFB8" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, @"$CFB8Mac")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Mac.IDEA/CFB8" withNSString:@"IDEAMAC/CFB8"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricIDEA;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricIDEA_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricIDEA_Mappings)
