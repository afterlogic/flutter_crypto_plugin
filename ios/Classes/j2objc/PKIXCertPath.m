//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/x509/PKIXCertPath.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Encoding.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "BCJcaJceHelper.h"
#include "ContentInfo.h"
#include "DERSequence.h"
#include "DERSet.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "PKCSObjectIdentifiers.h"
#include "PKIXCertPath.h"
#include "PemObject.h"
#include "PemWriter.h"
#include "SignedData.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/lang/Exception.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
  id<JavaUtilList> certificates_;
}

- (id<JavaUtilList>)sortCertsWithJavaUtilList:(id<JavaUtilList>)certs;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1ObjectWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

- (IOSByteArray *)toDEREncodedWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)obj;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath, certificates_, id<JavaUtilList>)

__attribute__((unused)) static id<JavaUtilList> LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<JavaUtilList> certs);

__attribute__((unused)) static LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, JavaSecurityCertX509Certificate *cert);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<LibOrgBouncycastleAsn1ASN1Encodable> obj);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath)

id<JavaUtilList> LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings;

@implementation LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath

+ (id<JavaUtilList>)certPathEncodings {
  return LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings;
}

- (id<JavaUtilList>)sortCertsWithJavaUtilList:(id<JavaUtilList>)certs {
  return LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(self, certs);
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)certificates {
  LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(self, certificates);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inStream
                             withNSString:(NSString *)encoding {
  LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(self, inStream, encoding);
  return self;
}

- (id<JavaUtilIterator>)getEncodings {
  return [((id<JavaUtilList>) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings)) iterator];
}

- (IOSByteArray *)getEncoded {
  id<JavaUtilIterator> iter = [self getEncodings];
  if ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id enc = [iter next];
    if ([enc isKindOfClass:[NSString class]]) {
      return [self getEncodedWithNSString:(NSString *) enc];
    }
  }
  return nil;
}

- (IOSByteArray *)getEncodedWithNSString:(NSString *)encoding {
  if ([((NSString *) nil_chk(encoding)) java_equalsIgnoreCase:@"PkiPath"]) {
    LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
    id<JavaUtilListIterator> iter = [((id<JavaUtilList>) nil_chk(certificates_)) listIteratorWithInt:[certificates_ size]];
    while ([((id<JavaUtilListIterator>) nil_chk(iter)) hasPrevious]) {
      [v addWithLibOrgBouncycastleAsn1ASN1Encodable:LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(self, (JavaSecurityCertX509Certificate *) cast_chk([iter previous], [JavaSecurityCertX509Certificate class]))];
    }
    return LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithLibOrgBouncycastleAsn1ASN1Encodable_(self, new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v));
  }
  else if ([encoding java_equalsIgnoreCase:@"PKCS7"]) {
    LibOrgBouncycastleAsn1PkcsContentInfo *encInfo = new_LibOrgBouncycastleAsn1PkcsContentInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, data), nil);
    LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(certificates_)) size]; i++) {
      [v addWithLibOrgBouncycastleAsn1ASN1Encodable:LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(self, (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certificates_)) getWithInt:i], [JavaSecurityCertX509Certificate class]))];
    }
    LibOrgBouncycastleAsn1PkcsSignedData *sd = new_LibOrgBouncycastleAsn1PkcsSignedData_initWithLibOrgBouncycastleAsn1ASN1Integer_withLibOrgBouncycastleAsn1ASN1Set_withLibOrgBouncycastleAsn1PkcsContentInfo_withLibOrgBouncycastleAsn1ASN1Set_withLibOrgBouncycastleAsn1ASN1Set_withLibOrgBouncycastleAsn1ASN1Set_(new_LibOrgBouncycastleAsn1ASN1Integer_initWithLong_(1), new_LibOrgBouncycastleAsn1DERSet_init(), encInfo, new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v), nil, new_LibOrgBouncycastleAsn1DERSet_init());
    return LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithLibOrgBouncycastleAsn1ASN1Encodable_(self, new_LibOrgBouncycastleAsn1PkcsContentInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, signedData), sd));
  }
  else if ([encoding java_equalsIgnoreCase:@"PEM"]) {
    JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
    LibOrgBouncycastleUtilIoPemPemWriter *pWrt = new_LibOrgBouncycastleUtilIoPemPemWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(bOut));
    @try {
      for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(certificates_)) size]; i++) {
        [pWrt writeObjectWithLibOrgBouncycastleUtilIoPemPemObjectGenerator:new_LibOrgBouncycastleUtilIoPemPemObject_initWithNSString_withByteArray_(@"CERTIFICATE", [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certificates_)) getWithInt:i], [JavaSecurityCertX509Certificate class])))) getEncoded])];
      }
      [pWrt close];
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_(@"can't encode certificate for PEM encoded path");
    }
    return [bOut toByteArray];
  }
  else {
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_(JreStrcat("$$", @"unsupported encoding: ", encoding));
  }
}

- (id<JavaUtilList>)getCertificates {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(new_JavaUtilArrayList_initWithJavaUtilCollection_(certificates_));
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1ObjectWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(self, cert);
}

- (IOSByteArray *)toDEREncodedWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)obj {
  return LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithLibOrgBouncycastleAsn1ASN1Encodable_(self, obj);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x2, 7, 8, 4, -1, -1, -1 },
    { NULL, "[B", 0x2, 9, 10, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(sortCertsWithJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(initWithJavaIoInputStream:withNSString:);
  methods[3].selector = @selector(getEncodings);
  methods[4].selector = @selector(getEncoded);
  methods[5].selector = @selector(getEncodedWithNSString:);
  methods[6].selector = @selector(getCertificates);
  methods[7].selector = @selector(toASN1ObjectWithJavaSecurityCertX509Certificate:);
  methods[8].selector = @selector(toDEREncodedWithLibOrgBouncycastleAsn1ASN1Encodable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "certPathEncodings", "LJavaUtilList;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "certificates_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "sortCerts", "LJavaUtilList;", "LJavaIoInputStream;LNSString;", "LJavaSecurityCertCertificateException;", "LJavaSecurityCertCertificateEncodingException;", "getEncoded", "LNSString;", "toASN1Object", "LJavaSecurityCertX509Certificate;", "toDEREncoded", "LLibOrgBouncycastleAsn1ASN1Encodable;", &LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath = { "PKIXCertPath", "lib.org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath class]) {
    {
      id<JavaUtilList> encodings = new_JavaUtilArrayList_init();
      [encodings addWithId:@"PkiPath"];
      [encodings addWithId:@"PEM"];
      [encodings addWithId:@"PKCS7"];
      LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings = JavaUtilCollections_unmodifiableListWithJavaUtilList_(encodings);
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath)
  }
}

@end

id<JavaUtilList> LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<JavaUtilList> certs) {
  if ([((id<JavaUtilList>) nil_chk(certs)) size] < 2) {
    return certs;
  }
  JavaxSecurityAuthX500X500Principal *issuer = [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:0], [JavaSecurityCertX509Certificate class])))) getIssuerX500Principal];
  jboolean okay = true;
  for (jint i = 1; i != [certs size]; i++) {
    JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class]);
    if ([((JavaxSecurityAuthX500X500Principal *) nil_chk(issuer)) isEqual:[((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal]]) {
      issuer = [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class])))) getIssuerX500Principal];
    }
    else {
      okay = false;
      break;
    }
  }
  if (okay) {
    return certs;
  }
  id<JavaUtilList> retList = new_JavaUtilArrayList_initWithInt_([certs size]);
  id<JavaUtilList> orig = new_JavaUtilArrayList_initWithJavaUtilCollection_(certs);
  for (jint i = 0; i < [certs size]; i++) {
    JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class]);
    jboolean found = false;
    JavaxSecurityAuthX500X500Principal *subject = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal];
    for (jint j = 0; j != [certs size]; j++) {
      JavaSecurityCertX509Certificate *c = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:j], [JavaSecurityCertX509Certificate class]);
      if ([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(c)) getIssuerX500Principal])) isEqual:subject]) {
        found = true;
        break;
      }
    }
    if (!found) {
      [retList addWithId:cert];
      (void) [certs removeWithInt:i];
    }
  }
  if ([retList size] > 1) {
    return orig;
  }
  for (jint i = 0; i != [retList size]; i++) {
    issuer = [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([retList getWithInt:i], [JavaSecurityCertX509Certificate class])))) getIssuerX500Principal];
    for (jint j = 0; j < [certs size]; j++) {
      JavaSecurityCertX509Certificate *c = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:j], [JavaSecurityCertX509Certificate class]);
      if ([((JavaxSecurityAuthX500X500Principal *) nil_chk(issuer)) isEqual:[((JavaSecurityCertX509Certificate *) nil_chk(c)) getSubjectX500Principal]]) {
        [retList addWithId:c];
        (void) [certs removeWithInt:j];
        break;
      }
    }
  }
  if ([certs size] > 0) {
    return orig;
  }
  return retList;
}

void LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<JavaUtilList> certificates) {
  JavaSecurityCertCertPath_initWithNSString_(self, @"X.509");
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->certificates_ = LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(self, new_JavaUtilArrayList_initWithJavaUtilCollection_(certificates));
}

LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *new_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(id<JavaUtilList> certificates) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath, initWithJavaUtilList_, certificates)
}

LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *create_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(id<JavaUtilList> certificates) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath, initWithJavaUtilList_, certificates)
}

void LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, JavaIoInputStream *inStream, NSString *encoding) {
  JavaSecurityCertCertPath_initWithNSString_(self, @"X.509");
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  @try {
    if ([((NSString *) nil_chk(encoding)) java_equalsIgnoreCase:@"PkiPath"]) {
      LibOrgBouncycastleAsn1ASN1InputStream *derInStream = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inStream);
      LibOrgBouncycastleAsn1ASN1Primitive *derObject = [derInStream readObject];
      if (!([derObject isKindOfClass:[LibOrgBouncycastleAsn1ASN1Sequence class]])) {
        @throw new_JavaSecurityCertCertificateException_initWithNSString_(@"input stream does not contain a ASN1 SEQUENCE while reading PkiPath encoded data to load CertPath");
      }
      id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(((LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(derObject, [LibOrgBouncycastleAsn1ASN1Sequence class])))) getObjects];
      self->certificates_ = new_JavaUtilArrayList_init();
      JavaSecurityCertCertificateFactory *certFactory = [self->helper_ createCertificateFactoryWithNSString:@"X.509"];
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        id<LibOrgBouncycastleAsn1ASN1Encodable> element = (id<LibOrgBouncycastleAsn1ASN1Encodable>) cast_check([e nextElement], LibOrgBouncycastleAsn1ASN1Encodable_class_());
        IOSByteArray *encoded = [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(element)) toASN1Primitive])) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
        [((id<JavaUtilList>) nil_chk(self->certificates_)) addWithInt:0 withId:[((JavaSecurityCertCertificateFactory *) nil_chk(certFactory)) generateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_(encoded)]];
      }
    }
    else if ([encoding java_equalsIgnoreCase:@"PKCS7"] || [encoding java_equalsIgnoreCase:@"PEM"]) {
      inStream = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(inStream);
      self->certificates_ = new_JavaUtilArrayList_init();
      JavaSecurityCertCertificateFactory *certFactory = [self->helper_ createCertificateFactoryWithNSString:@"X.509"];
      JavaSecurityCertCertificate *cert;
      while ((cert = [((JavaSecurityCertCertificateFactory *) nil_chk(certFactory)) generateCertificateWithJavaIoInputStream:inStream]) != nil) {
        [((id<JavaUtilList>) nil_chk(self->certificates_)) addWithId:cert];
      }
    }
    else {
      @throw new_JavaSecurityCertCertificateException_initWithNSString_(JreStrcat("$$", @"unsupported encoding: ", encoding));
    }
  }
  @catch (JavaIoIOException *ex) {
    @throw new_JavaSecurityCertCertificateException_initWithNSString_(JreStrcat("$$", @"IOException throw while decoding CertPath:\n", [ex description]));
  }
  @catch (JavaSecurityNoSuchProviderException *ex) {
    @throw new_JavaSecurityCertCertificateException_initWithNSString_(JreStrcat("$$", @"BouncyCastle provider not found while trying to get a CertificateFactory:\n", [ex description]));
  }
  self->certificates_ = LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(self, self->certificates_);
}

LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *new_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *inStream, NSString *encoding) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath, initWithJavaIoInputStream_withNSString_, inStream, encoding)
}

LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *create_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *inStream, NSString *encoding) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath, initWithJavaIoInputStream_withNSString_, inStream, encoding)
}

LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, JavaSecurityCertX509Certificate *cert) {
  @try {
    return [new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getEncoded]) readObject];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_(JreStrcat("$$", @"Exception while encoding certificate: ", [e description]));
  }
}

IOSByteArray *LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<LibOrgBouncycastleAsn1ASN1Encodable> obj) {
  @try {
    return [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(obj)) toASN1Primitive])) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_(JreStrcat("$@", @"Exception thrown: ", e));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath)
