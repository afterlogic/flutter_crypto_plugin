//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSMTParameters.java
//

#include "DefaultXMSSMTOid.h"
#include "Digest.h"
#include "J2ObjC_source.h"
#include "WOTSPlus.h"
#include "WOTSPlusParameters.h"
#include "XMSSMTParameters.h"
#include "XMSSOid.h"
#include "XMSSParameters.h"
#include "java/lang/IllegalArgumentException.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters () {
 @public
  id<LibOrgBouncycastlePqcCryptoXmssXMSSOid> oid_;
  LibOrgBouncycastlePqcCryptoXmssXMSSParameters *xmssParams_;
  jint height_;
  jint layers_;
}

+ (jint)xmssTreeHeightWithInt:(jint)height
                      withInt:(jint)layers;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters, oid_, id<LibOrgBouncycastlePqcCryptoXmssXMSSOid>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters, xmssParams_, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_xmssTreeHeightWithInt_withInt_(jint height, jint layers);

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters

- (instancetype)initWithInt:(jint)height
                    withInt:(jint)layers
withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_initWithInt_withInt_withLibOrgBouncycastleCryptoDigest_(self, height, layers, digest);
  return self;
}

+ (jint)xmssTreeHeightWithInt:(jint)height
                      withInt:(jint)layers {
  return LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_xmssTreeHeightWithInt_withInt_(height, layers);
}

- (jint)getHeight {
  return height_;
}

- (jint)getLayers {
  return layers_;
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)getXMSSParameters {
  return xmssParams_;
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)getWOTSPlus {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getWOTSPlus];
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getDigest];
}

- (jint)getDigestSize {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getDigestSize];
}

- (jint)getWinternitzParameter {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getWinternitzParameter];
}

- (jint)getLen {
  return [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getWOTSPlus])) getParams])) getLen];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(xmssTreeHeightWithInt:withInt:);
  methods[2].selector = @selector(getHeight);
  methods[3].selector = @selector(getLayers);
  methods[4].selector = @selector(getXMSSParameters);
  methods[5].selector = @selector(getWOTSPlus);
  methods[6].selector = @selector(getDigest);
  methods[7].selector = @selector(getDigestSize);
  methods[8].selector = @selector(getWinternitzParameter);
  methods[9].selector = @selector(getLen);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "oid_", "LLibOrgBouncycastlePqcCryptoXmssXMSSOid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "xmssParams_", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "layers_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILLibOrgBouncycastleCryptoDigest;", "xmssTreeHeight", "II", "LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters = { "XMSSMTParameters", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 10, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_initWithInt_withInt_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *self, jint height, jint layers, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->height_ = height;
  self->layers_ = layers;
  self->xmssParams_ = new_LibOrgBouncycastlePqcCryptoXmssXMSSParameters_initWithInt_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_xmssTreeHeightWithInt_withInt_(height, layers), digest);
  self->oid_ = LibOrgBouncycastlePqcCryptoXmssDefaultXMSSMTOid_lookupWithNSString_withInt_withInt_withInt_withInt_withInt_([((id<LibOrgBouncycastleCryptoDigest>) nil_chk([self getDigest])) getAlgorithmName], [self getDigestSize], [self getWinternitzParameter], [self getLen], [self getHeight], layers);
}

LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *new_LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_initWithInt_withInt_withLibOrgBouncycastleCryptoDigest_(jint height, jint layers, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters, initWithInt_withInt_withLibOrgBouncycastleCryptoDigest_, height, layers, digest)
}

LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *create_LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_initWithInt_withInt_withLibOrgBouncycastleCryptoDigest_(jint height, jint layers, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters, initWithInt_withInt_withLibOrgBouncycastleCryptoDigest_, height, layers, digest)
}

jint LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_xmssTreeHeightWithInt_withInt_(jint height, jint layers) {
  LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_initialize();
  if (height < 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"totalHeight must be > 1");
  }
  if (height % layers != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"layers must divide totalHeight without remainder");
  }
  if (height / layers == 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"height / layers must be greater than 1");
  }
  return height / layers;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters)
