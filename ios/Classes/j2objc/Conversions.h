//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/mceliece/Conversions.java
//

#ifndef Conversions_H
#define Conversions_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastlePqcMathLinearalgebraGF2Vector;

@interface LibOrgBouncycastlePqcCryptoMcelieceConversions : NSObject

#pragma mark Public

+ (IOSByteArray *)decodeWithInt:(jint)n
                        withInt:(jint)t
withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector:(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)vec;

+ (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)encodeWithInt:(jint)n
                                                           withInt:(jint)t
                                                     withByteArray:(IOSByteArray *)m;

+ (IOSByteArray *)signConversionWithInt:(jint)n
                                withInt:(jint)t
                          withByteArray:(IOSByteArray *)m;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcCryptoMcelieceConversions)

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *LibOrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(jint n, jint t, IOSByteArray *m);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcCryptoMcelieceConversions_decodeWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(jint n, jint t, LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *vec);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcCryptoMcelieceConversions_signConversionWithInt_withInt_withByteArray_(jint n, jint t, IOSByteArray *m);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoMcelieceConversions)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Conversions_H
