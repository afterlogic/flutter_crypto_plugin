//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/SSHBuilder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SSHBuilder.h"
#include "Strings.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"

@interface LibOrgBouncycastleCryptoUtilSSHBuilder () {
 @public
  JavaIoByteArrayOutputStream *bos_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoUtilSSHBuilder, bos_, JavaIoByteArrayOutputStream *)

@implementation LibOrgBouncycastleCryptoUtilSSHBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilSSHBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)u32WithLong:(jlong)value {
  [((JavaIoByteArrayOutputStream *) nil_chk(bos_)) writeWithInt:(jint) ((JreURShift64(value, 24)) & (jint) 0xFF)];
  [bos_ writeWithInt:(jint) ((JreURShift64(value, 16)) & (jint) 0xFF)];
  [bos_ writeWithInt:(jint) ((JreURShift64(value, 8)) & (jint) 0xFF)];
  [bos_ writeWithInt:(jint) (value & (jint) 0xFF)];
}

- (void)rawArrayWithByteArray:(IOSByteArray *)value {
  [self u32WithLong:((IOSByteArray *) nil_chk(value))->size_];
  @try {
    [((JavaIoByteArrayOutputStream *) nil_chk(bos_)) writeWithByteArray:value];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

- (void)writeWithByteArray:(IOSByteArray *)value {
  @try {
    [((JavaIoByteArrayOutputStream *) nil_chk(bos_)) writeWithByteArray:value];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

- (void)writeStringWithNSString:(NSString *)str {
  [self rawArrayWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(str)];
}

- (IOSByteArray *)getBytes {
  return [((JavaIoByteArrayOutputStream *) nil_chk(bos_)) toByteArray];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(u32WithLong:);
  methods[2].selector = @selector(rawArrayWithByteArray:);
  methods[3].selector = @selector(writeWithByteArray:);
  methods[4].selector = @selector(writeStringWithNSString:);
  methods[5].selector = @selector(getBytes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bos_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "u32", "J", "rawArray", "[B", "write", "writeString", "LNSString;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilSSHBuilder = { "SSHBuilder", "lib.org.bouncycastle.crypto.util", ptrTable, methods, fields, 7, 0x0, 6, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilSSHBuilder;
}

@end

void LibOrgBouncycastleCryptoUtilSSHBuilder_init(LibOrgBouncycastleCryptoUtilSSHBuilder *self) {
  NSObject_init(self);
  self->bos_ = new_JavaIoByteArrayOutputStream_init();
}

LibOrgBouncycastleCryptoUtilSSHBuilder *new_LibOrgBouncycastleCryptoUtilSSHBuilder_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilSSHBuilder, init)
}

LibOrgBouncycastleCryptoUtilSSHBuilder *create_LibOrgBouncycastleCryptoUtilSSHBuilder_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilSSHBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilSSHBuilder)
