//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/CCMParameters.java
//

#include "AEADParameters.h"
#include "CCMParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"

@implementation LibOrgBouncycastleCryptoParamsCCMParameters

- (instancetype)initWithLibOrgBouncycastleCryptoParamsKeyParameter:(LibOrgBouncycastleCryptoParamsKeyParameter *)key
                                                           withInt:(jint)macSize
                                                     withByteArray:(IOSByteArray *)nonce
                                                     withByteArray:(IOSByteArray *)associatedText {
  LibOrgBouncycastleCryptoParamsCCMParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(self, key, macSize, nonce, associatedText);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsKeyParameter:withInt:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsKeyParameter;I[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsCCMParameters = { "CCMParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsCCMParameters;
}

@end

void LibOrgBouncycastleCryptoParamsCCMParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(LibOrgBouncycastleCryptoParamsCCMParameters *self, LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce, IOSByteArray *associatedText) {
  LibOrgBouncycastleCryptoParamsAEADParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(self, key, macSize, nonce, associatedText);
}

LibOrgBouncycastleCryptoParamsCCMParameters *new_LibOrgBouncycastleCryptoParamsCCMParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce, IOSByteArray *associatedText) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsCCMParameters, initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_, key, macSize, nonce, associatedText)
}

LibOrgBouncycastleCryptoParamsCCMParameters *create_LibOrgBouncycastleCryptoParamsCCMParameters_initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_(LibOrgBouncycastleCryptoParamsKeyParameter *key, jint macSize, IOSByteArray *nonce, IOSByteArray *associatedText) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsCCMParameters, initWithLibOrgBouncycastleCryptoParamsKeyParameter_withInt_withByteArray_withByteArray_, key, macSize, nonce, associatedText)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsCCMParameters)
