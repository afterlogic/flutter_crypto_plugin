//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java
//

#ifndef NaccacheSternKeyGenerationParameters_H
#define NaccacheSternKeyGenerationParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "KeyGenerationParameters.h"

@class JavaSecuritySecureRandom;

@interface LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters : LibOrgBouncycastleCryptoKeyGenerationParameters

#pragma mark Public

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                   withInt:(jint)strength
                                                   withInt:(jint)certainty
                                                   withInt:(jint)cntSmallPrimes;

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                   withInt:(jint)strength
                                                   withInt:(jint)certainty
                                                   withInt:(jint)cntSmallPrimes
                                               withBoolean:(jboolean)debug;

- (jint)getCertainty;

- (jint)getCntSmallPrimes;

- (jboolean)isDebug;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)arg0
                                                   withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_(LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters *self, JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters *new_LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_(JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters *create_LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_(JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_(LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters *self, JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes, jboolean debug);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters *new_LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_(JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes, jboolean debug) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters *create_LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_(JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes, jboolean debug);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // NaccacheSternKeyGenerationParameters_H
