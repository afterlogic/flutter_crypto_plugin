//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/algorithm/KeyFlag.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "KeyFlag.h"
#include "KeyFlags.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface LibComAfterlogicPgpAlgorithmKeyFlag () {
 @public
  jint flag_;
}

@end

__attribute__((unused)) static void LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibComAfterlogicPgpAlgorithmKeyFlag *self, jint flag, NSString *__name, jint __ordinal);

__attribute__((unused)) static LibComAfterlogicPgpAlgorithmKeyFlag *new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(jint flag, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(LibComAfterlogicPgpAlgorithmKeyFlag)

LibComAfterlogicPgpAlgorithmKeyFlag *LibComAfterlogicPgpAlgorithmKeyFlag_values_[7];

@implementation LibComAfterlogicPgpAlgorithmKeyFlag

+ (LibComAfterlogicPgpAlgorithmKeyFlag *)CERTIFY_OTHER {
  return JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, CERTIFY_OTHER);
}

+ (LibComAfterlogicPgpAlgorithmKeyFlag *)SIGN_DATA {
  return JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SIGN_DATA);
}

+ (LibComAfterlogicPgpAlgorithmKeyFlag *)ENCRYPT_COMMS {
  return JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, ENCRYPT_COMMS);
}

+ (LibComAfterlogicPgpAlgorithmKeyFlag *)ENCRYPT_STORAGE {
  return JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, ENCRYPT_STORAGE);
}

+ (LibComAfterlogicPgpAlgorithmKeyFlag *)SPLIT {
  return JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SPLIT);
}

+ (LibComAfterlogicPgpAlgorithmKeyFlag *)AUTHENTICATION {
  return JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, AUTHENTICATION);
}

+ (LibComAfterlogicPgpAlgorithmKeyFlag *)SHARED {
  return JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SHARED);
}

- (jint)getFlag {
  return flag_;
}

+ (id<JavaUtilList>)fromIntegerWithInt:(jint)bitmask {
  return LibComAfterlogicPgpAlgorithmKeyFlag_fromIntegerWithInt_(bitmask);
}

+ (IOSObjectArray *)values {
  return LibComAfterlogicPgpAlgorithmKeyFlag_values();
}

+ (LibComAfterlogicPgpAlgorithmKeyFlag *)valueOfWithNSString:(NSString *)name {
  return LibComAfterlogicPgpAlgorithmKeyFlag_valueOfWithNSString_(name);
}

- (LibComAfterlogicPgpAlgorithmKeyFlag_Enum)toNSEnum {
  return (LibComAfterlogicPgpAlgorithmKeyFlag_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "[LLibComAfterlogicPgpAlgorithmKeyFlag;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpAlgorithmKeyFlag;", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getFlag);
  methods[1].selector = @selector(fromIntegerWithInt:);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CERTIFY_OTHER", "LLibComAfterlogicPgpAlgorithmKeyFlag;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "SIGN_DATA", "LLibComAfterlogicPgpAlgorithmKeyFlag;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "ENCRYPT_COMMS", "LLibComAfterlogicPgpAlgorithmKeyFlag;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "ENCRYPT_STORAGE", "LLibComAfterlogicPgpAlgorithmKeyFlag;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "SPLIT", "LLibComAfterlogicPgpAlgorithmKeyFlag;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "AUTHENTICATION", "LLibComAfterlogicPgpAlgorithmKeyFlag;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "SHARED", "LLibComAfterlogicPgpAlgorithmKeyFlag;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "flag_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromInteger", "I", "(I)Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/KeyFlag;>;", "valueOf", "LNSString;", &JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, CERTIFY_OTHER), &JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SIGN_DATA), &JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, ENCRYPT_COMMS), &JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, ENCRYPT_STORAGE), &JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SPLIT), &JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, AUTHENTICATION), &JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SHARED), "Ljava/lang/Enum<Llib/com/afterlogic/pgp/algorithm/KeyFlag;>;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpAlgorithmKeyFlag = { "KeyFlag", "lib.com.afterlogic.pgp.algorithm", ptrTable, methods, fields, 7, 0x4011, 4, 8, -1, -1, -1, 12, -1 };
  return &_LibComAfterlogicPgpAlgorithmKeyFlag;
}

+ (void)initialize {
  if (self == [LibComAfterlogicPgpAlgorithmKeyFlag class]) {
    JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, CERTIFY_OTHER) = new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgSigKeyFlags_CERTIFY_OTHER, JreEnumConstantName(LibComAfterlogicPgpAlgorithmKeyFlag_class_(), 0), 0);
    JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SIGN_DATA) = new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgSigKeyFlags_SIGN_DATA, JreEnumConstantName(LibComAfterlogicPgpAlgorithmKeyFlag_class_(), 1), 1);
    JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, ENCRYPT_COMMS) = new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgSigKeyFlags_ENCRYPT_COMMS, JreEnumConstantName(LibComAfterlogicPgpAlgorithmKeyFlag_class_(), 2), 2);
    JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, ENCRYPT_STORAGE) = new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgSigKeyFlags_ENCRYPT_STORAGE, JreEnumConstantName(LibComAfterlogicPgpAlgorithmKeyFlag_class_(), 3), 3);
    JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SPLIT) = new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgSigKeyFlags_SPLIT, JreEnumConstantName(LibComAfterlogicPgpAlgorithmKeyFlag_class_(), 4), 4);
    JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, AUTHENTICATION) = new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgSigKeyFlags_AUTHENTICATION, JreEnumConstantName(LibComAfterlogicPgpAlgorithmKeyFlag_class_(), 5), 5);
    JreEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SHARED) = new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibOrgBouncycastleBcpgSigKeyFlags_SHARED, JreEnumConstantName(LibComAfterlogicPgpAlgorithmKeyFlag_class_(), 6), 6);
    J2OBJC_SET_INITIALIZED(LibComAfterlogicPgpAlgorithmKeyFlag)
  }
}

@end

void LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(LibComAfterlogicPgpAlgorithmKeyFlag *self, jint flag, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->flag_ = flag;
}

LibComAfterlogicPgpAlgorithmKeyFlag *new_LibComAfterlogicPgpAlgorithmKeyFlag_initWithInt_withNSString_withInt_(jint flag, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpAlgorithmKeyFlag, initWithInt_withNSString_withInt_, flag, __name, __ordinal)
}

id<JavaUtilList> LibComAfterlogicPgpAlgorithmKeyFlag_fromIntegerWithInt_(jint bitmask) {
  LibComAfterlogicPgpAlgorithmKeyFlag_initialize();
  id<JavaUtilList> flags = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = LibComAfterlogicPgpAlgorithmKeyFlag_values();
    LibComAfterlogicPgpAlgorithmKeyFlag * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    LibComAfterlogicPgpAlgorithmKeyFlag * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      LibComAfterlogicPgpAlgorithmKeyFlag *f = *b__++;
      if ((bitmask & ((LibComAfterlogicPgpAlgorithmKeyFlag *) nil_chk(f))->flag_) != 0) {
        [flags addWithId:f];
      }
    }
  }
  return flags;
}

IOSObjectArray *LibComAfterlogicPgpAlgorithmKeyFlag_values() {
  LibComAfterlogicPgpAlgorithmKeyFlag_initialize();
  return [IOSObjectArray arrayWithObjects:LibComAfterlogicPgpAlgorithmKeyFlag_values_ count:7 type:LibComAfterlogicPgpAlgorithmKeyFlag_class_()];
}

LibComAfterlogicPgpAlgorithmKeyFlag *LibComAfterlogicPgpAlgorithmKeyFlag_valueOfWithNSString_(NSString *name) {
  LibComAfterlogicPgpAlgorithmKeyFlag_initialize();
  for (int i = 0; i < 7; i++) {
    LibComAfterlogicPgpAlgorithmKeyFlag *e = LibComAfterlogicPgpAlgorithmKeyFlag_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

LibComAfterlogicPgpAlgorithmKeyFlag *LibComAfterlogicPgpAlgorithmKeyFlag_fromOrdinal(NSUInteger ordinal) {
  LibComAfterlogicPgpAlgorithmKeyFlag_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return LibComAfterlogicPgpAlgorithmKeyFlag_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpAlgorithmKeyFlag)
