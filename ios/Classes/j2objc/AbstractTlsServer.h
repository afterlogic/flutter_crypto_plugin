//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/AbstractTlsServer.java
//

#ifndef AbstractTlsServer_H
#define AbstractTlsServer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsPeer.h"
#include "J2ObjC_header.h"
#include "TlsServer.h"

@class IOSIntArray;
@class IOSShortArray;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@class LibOrgBouncycastleCryptoTlsCertificateStatus;
@class LibOrgBouncycastleCryptoTlsNewSessionTicket;
@class LibOrgBouncycastleCryptoTlsProtocolVersion;
@protocol LibOrgBouncycastleCryptoTlsTlsCipher;
@protocol LibOrgBouncycastleCryptoTlsTlsCipherFactory;
@protocol LibOrgBouncycastleCryptoTlsTlsCompression;
@protocol LibOrgBouncycastleCryptoTlsTlsServerContext;

@interface LibOrgBouncycastleCryptoTlsAbstractTlsServer : LibOrgBouncycastleCryptoTlsAbstractTlsPeer < LibOrgBouncycastleCryptoTlsTlsServer > {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory_;
  id<LibOrgBouncycastleCryptoTlsTlsServerContext> context_;
  LibOrgBouncycastleCryptoTlsProtocolVersion *clientVersion_;
  IOSIntArray *offeredCipherSuites_;
  IOSShortArray *offeredCompressionMethods_;
  JavaUtilHashtable *clientExtensions_;
  jboolean encryptThenMACOffered_;
  jshort maxFragmentLengthOffered_;
  jboolean truncatedHMacOffered_;
  JavaUtilVector *supportedSignatureAlgorithms_;
  jboolean eccCipherSuitesOffered_;
  IOSIntArray *namedCurves_;
  IOSShortArray *clientECPointFormats_;
  IOSShortArray *serverECPointFormats_;
  LibOrgBouncycastleCryptoTlsProtocolVersion *serverVersion_;
  jint selectedCipherSuite_;
  jshort selectedCompressionMethod_;
  JavaUtilHashtable *serverExtensions_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory;

- (LibOrgBouncycastleCryptoTlsCertificateRequest *)getCertificateRequest;

- (LibOrgBouncycastleCryptoTlsCertificateStatus *)getCertificateStatus;

- (id<LibOrgBouncycastleCryptoTlsTlsCipher>)getCipher;

- (id<LibOrgBouncycastleCryptoTlsTlsCompression>)getCompression;

- (LibOrgBouncycastleCryptoTlsNewSessionTicket *)getNewSessionTicket;

- (jint)getSelectedCipherSuite;

- (jshort)getSelectedCompressionMethod;

- (JavaUtilHashtable *)getServerExtensions;

- (JavaUtilVector *)getServerSupplementalData;

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getServerVersion;

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsServerContext:(id<LibOrgBouncycastleCryptoTlsTlsServerContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)notifyClientCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)clientCertificate;

- (void)notifyClientVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)clientVersion;

- (void)notifyFallbackWithBoolean:(jboolean)isFallback;

- (void)notifyOfferedCipherSuitesWithIntArray:(IOSIntArray *)offeredCipherSuites;

- (void)notifyOfferedCompressionMethodsWithShortArray:(IOSShortArray *)offeredCompressionMethods;

- (void)processClientExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions;

- (void)processClientSupplementalDataWithJavaUtilVector:(JavaUtilVector *)clientSupplementalData;

#pragma mark Protected

- (jboolean)allowEncryptThenMAC;

- (jboolean)allowTruncatedHMac;

- (JavaUtilHashtable *)checkServerExtensions;

- (IOSIntArray *)getCipherSuites;

- (IOSShortArray *)getCompressionMethods;

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getMaximumVersion;

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getMinimumVersion;

- (jboolean)supportsClientECCCapabilitiesWithIntArray:(IOSIntArray *)namedCurves
                                       withShortArray:(IOSShortArray *)ecPointFormats;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsAbstractTlsServer)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, cipherFactory_, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, context_, id<LibOrgBouncycastleCryptoTlsTlsServerContext>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, clientVersion_, LibOrgBouncycastleCryptoTlsProtocolVersion *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, offeredCipherSuites_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, offeredCompressionMethods_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, clientExtensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, supportedSignatureAlgorithms_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, namedCurves_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, clientECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, serverECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, serverVersion_, LibOrgBouncycastleCryptoTlsProtocolVersion *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsAbstractTlsServer, serverExtensions_, JavaUtilHashtable *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsAbstractTlsServer_init(LibOrgBouncycastleCryptoTlsAbstractTlsServer *self);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsAbstractTlsServer_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(LibOrgBouncycastleCryptoTlsAbstractTlsServer *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsAbstractTlsServer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // AbstractTlsServer_H
