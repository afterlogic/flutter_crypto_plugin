//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/eac/CertificateHolderAuthorization.java
//

#ifndef CertificateHolderAuthorization_H
#define CertificateHolderAuthorization_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class JavaUtilHashtable;
@class LibOrgBouncycastleAsn1ASN1ApplicationSpecific;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1EacBidirectionalMap;

@interface LibOrgBouncycastleAsn1EacCertificateHolderAuthorization : LibOrgBouncycastleAsn1ASN1Object {
 @public
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid_;
  LibOrgBouncycastleAsn1ASN1ApplicationSpecific *accessRights_;
}
@property (readonly, class) LibOrgBouncycastleAsn1ASN1ObjectIdentifier *id_role_EAC NS_SWIFT_NAME(id_role_EAC);
@property (readonly, class) jint CVCA NS_SWIFT_NAME(CVCA);
@property (readonly, class) jint DV_DOMESTIC NS_SWIFT_NAME(DV_DOMESTIC);
@property (readonly, class) jint DV_FOREIGN NS_SWIFT_NAME(DV_FOREIGN);
@property (readonly, class) jint IS NS_SWIFT_NAME(IS);
@property (readonly, class) jint RADG4 NS_SWIFT_NAME(RADG4);
@property (readonly, class) jint RADG3 NS_SWIFT_NAME(RADG3);
@property (class) JavaUtilHashtable *RightsDecodeMap NS_SWIFT_NAME(RightsDecodeMap);
@property (class) LibOrgBouncycastleAsn1EacBidirectionalMap *AuthorizationRole NS_SWIFT_NAME(AuthorizationRole);
@property (class) JavaUtilHashtable *ReverseMap NS_SWIFT_NAME(ReverseMap);

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)id_role_EAC;

+ (jint)CVCA;

+ (jint)DV_DOMESTIC;

+ (jint)DV_FOREIGN;

+ (jint)IS;

+ (jint)RADG4;

+ (jint)RADG3;

+ (JavaUtilHashtable *)RightsDecodeMap;

+ (void)setRightsDecodeMap:(JavaUtilHashtable *)value;

+ (LibOrgBouncycastleAsn1EacBidirectionalMap *)AuthorizationRole;

+ (void)setAuthorizationRole:(LibOrgBouncycastleAsn1EacBidirectionalMap *)value;

+ (JavaUtilHashtable *)ReverseMap;

+ (void)setReverseMap:(JavaUtilHashtable *)value;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific:(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)aSpe;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                                     withInt:(jint)rights;

- (jint)getAccessRights;

+ (jint)getFlagWithNSString:(NSString *)description_;

- (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getOid;

+ (NSString *)getRoleDescriptionWithInt:(jint)i;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, oid_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, accessRights_, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)

inline LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_id_role_EAC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_id_role_EAC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, id_role_EAC, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)

inline jint LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_CVCA(void);
#define LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_CVCA 192
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, CVCA, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_DV_DOMESTIC(void);
#define LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_DV_DOMESTIC 128
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, DV_DOMESTIC, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_DV_FOREIGN(void);
#define LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_DV_FOREIGN 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, DV_FOREIGN, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_IS(void);
#define LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_IS 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, IS, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_RADG4(void);
#define LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_RADG4 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, RADG4, jint)

inline jint LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_RADG3(void);
#define LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_RADG3 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, RADG3, jint)

inline JavaUtilHashtable *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_RightsDecodeMap(void);
inline JavaUtilHashtable *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_set_RightsDecodeMap(JavaUtilHashtable *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_RightsDecodeMap;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, RightsDecodeMap, JavaUtilHashtable *)

inline LibOrgBouncycastleAsn1EacBidirectionalMap *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_AuthorizationRole(void);
inline LibOrgBouncycastleAsn1EacBidirectionalMap *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_set_AuthorizationRole(LibOrgBouncycastleAsn1EacBidirectionalMap *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1EacBidirectionalMap *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_AuthorizationRole;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, AuthorizationRole, LibOrgBouncycastleAsn1EacBidirectionalMap *)

inline JavaUtilHashtable *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_get_ReverseMap(void);
inline JavaUtilHashtable *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_set_ReverseMap(JavaUtilHashtable *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_ReverseMap;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization, ReverseMap, JavaUtilHashtable *)

FOUNDATION_EXPORT NSString *LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_getRoleDescriptionWithInt_(jint i);

FOUNDATION_EXPORT jint LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_getFlagWithNSString_(NSString *description_);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jint rights);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *new_LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jint rights) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *create_LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, jint rights);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *self, LibOrgBouncycastleAsn1ASN1ApplicationSpecific *aSpe);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *new_LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *aSpe) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EacCertificateHolderAuthorization *create_LibOrgBouncycastleAsn1EacCertificateHolderAuthorization_initWithLibOrgBouncycastleAsn1ASN1ApplicationSpecific_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *aSpe);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1EacCertificateHolderAuthorization)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertificateHolderAuthorization_H
