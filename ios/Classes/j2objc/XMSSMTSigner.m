//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSMTSigner.java
//

#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "BDS.h"
#include "BDSStateMap.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyedHashFunctions.h"
#include "OTSHashAddress.h"
#include "WOTSPlus.h"
#include "WOTSPlusParameters.h"
#include "WOTSPlusSignature.h"
#include "XMSSAddress.h"
#include "XMSSMTParameters.h"
#include "XMSSMTPrivateKeyParameters.h"
#include "XMSSMTPublicKeyParameters.h"
#include "XMSSMTSignature.h"
#include "XMSSMTSigner.h"
#include "XMSSNode.h"
#include "XMSSParameters.h"
#include "XMSSReducedSignature.h"
#include "XMSSUtil.h"
#include "XMSSVerifierUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner () {
 @public
  LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey_;
  LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *nextKeyGenerator_;
  LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *publicKey_;
  LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *params_;
  LibOrgBouncycastlePqcCryptoXmssXMSSParameters *xmssParams_;
  LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  jboolean hasGenerated_;
  jboolean initSign_;
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner, privateKey_, LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner, nextKeyGenerator_, LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner, publicKey_, LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner, params_, LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner, xmssParams_, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner, wotsPlus_, LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *self, IOSByteArray *messageDigest, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if (forSigning) {
    initSign_ = true;
    hasGenerated_ = false;
    privateKey_ = (LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters class]);
    nextKeyGenerator_ = privateKey_;
    params_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getParameters];
    xmssParams_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getXMSSParameters];
  }
  else {
    initSign_ = false;
    publicKey_ = (LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters class]);
    params_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getParameters];
    xmssParams_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getXMSSParameters];
  }
  wotsPlus_ = new_LibOrgBouncycastlePqcCryptoXmssWOTSPlus_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(new_LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_initWithLibOrgBouncycastleCryptoDigest_([((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigest]));
}

- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (initSign_) {
    if (privateKey_ == nil) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"signing key no longer usable");
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"signer not initialized for signature generation");
  }
  if ([((LibOrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk([privateKey_ getBDSState])) isEmpty]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialized");
  }
  LibOrgBouncycastlePqcCryptoXmssBDSStateMap *bdsState = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState];
  jlong globalIndex = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getIndex];
  jint totalHeight = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getHeight];
  jint xmssHeight = [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getHeight];
  if (!LibOrgBouncycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_(totalHeight, globalIndex)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"index out of bounds");
  }
  IOSByteArray *random = [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) PRFWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF] withByteArray:LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(globalIndex, 32)];
  IOSByteArray *concatenated = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(random, [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getRoot], LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(globalIndex, [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]));
  IOSByteArray *messageDigest = [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) HMsgWithByteArray:concatenated withByteArray:message];
  LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature *signature = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withIndexWithLong:globalIndex])) withRandomWithByteArray:random])) build];
  jlong indexTree = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(globalIndex, xmssHeight);
  jint indexLeaf = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(globalIndex, xmssHeight);
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed]];
  LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:indexLeaf])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  if ([((LibOrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(bdsState)) getWithInt:0] == nil || indexLeaf == 0) {
    [bdsState putWithInt:0 withLibOrgBouncycastlePqcCryptoXmssBDS:new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(xmssParams_, [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed], [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed], otsHashAddress)];
  }
  LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *wotsPlusSignature = LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
  LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature *reducedSignature = [((LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(xmssParams_) withWOTSPlusSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:wotsPlusSignature])) withAuthPathWithJavaUtilList:[((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:0])) getAuthenticationPath]])) build];
  [((id<JavaUtilList>) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature *) nil_chk(signature)) getReducedSignatures])) addWithId:reducedSignature];
  for (jint layer = 1; layer < [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getLayers]; layer++) {
    LibOrgBouncycastlePqcCryptoXmssXMSSNode *root = [((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:layer - 1])) getRoot];
    indexLeaf = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(indexTree, xmssHeight);
    indexTree = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(indexTree, xmssHeight);
    otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:layer])) withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:indexLeaf])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    wotsPlusSignature = LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(root)) getValue], otsHashAddress);
    if ([bdsState getWithInt:layer] == nil || LibOrgBouncycastlePqcCryptoXmssXMSSUtil_isNewBDSInitNeededWithLong_withInt_withInt_(globalIndex, xmssHeight, layer)) {
      [bdsState putWithInt:layer withLibOrgBouncycastlePqcCryptoXmssBDS:new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(xmssParams_, [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed], [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed], otsHashAddress)];
    }
    reducedSignature = [((LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(xmssParams_) withWOTSPlusSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:wotsPlusSignature])) withAuthPathWithJavaUtilList:[((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:layer])) getAuthenticationPath]])) build];
    [((id<JavaUtilList>) nil_chk([signature getReducedSignatures])) addWithId:reducedSignature];
  }
  hasGenerated_ = true;
  if (nextKeyGenerator_ != nil) {
    privateKey_ = [nextKeyGenerator_ getNextKey];
    nextKeyGenerator_ = privateKey_;
  }
  else {
    privateKey_ = nil;
  }
  return [signature toByteArray];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (signature == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (publicKey_ == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature *sig = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withSignatureWithByteArray:signature])) build];
  IOSByteArray *concatenated = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSMTSignature *) nil_chk(sig)) getRandom], [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getRoot], LibOrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_([sig getIndex], [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]));
  IOSByteArray *messageDigest = [((LibOrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) HMsgWithByteArray:concatenated withByteArray:message];
  jlong globalIndex = [sig getIndex];
  jint xmssHeight = [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getHeight];
  jlong indexTree = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(globalIndex, xmssHeight);
  jint indexLeaf = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(globalIndex, xmssHeight);
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getPublicSeed]];
  LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:indexLeaf])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  LibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature *xmssMTSignature = [((id<JavaUtilList>) nil_chk([sig getReducedSignatures])) getWithInt:0];
  LibOrgBouncycastlePqcCryptoXmssXMSSNode *rootNode = LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus_, xmssHeight, messageDigest, xmssMTSignature, otsHashAddress, indexLeaf);
  for (jint layer = 1; layer < [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getLayers]; layer++) {
    xmssMTSignature = [((id<JavaUtilList>) nil_chk([sig getReducedSignatures])) getWithInt:layer];
    indexLeaf = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(indexTree, xmssHeight);
    indexTree = LibOrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(indexTree, xmssHeight);
    otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:layer])) withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:indexLeaf])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    rootNode = LibOrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withLibOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus_, xmssHeight, [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(rootNode)) getValue], xmssMTSignature, otsHashAddress, indexLeaf);
  }
  return LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(rootNode)) getValue], [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getRoot]);
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  return LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
}

- (jlong)getUsagesRemaining {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getUsagesRemaining];
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getUpdatedPrivateKey {
  if (hasGenerated_) {
    LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privKey = privateKey_;
    privateKey_ = nil;
    nextKeyGenerator_ = nil;
    return privKey;
  }
  else {
    LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(nextKeyGenerator_)) getNextKey];
    nextKeyGenerator_ = nil;
    return privKey;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[4].selector = @selector(wotsSignWithByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[5].selector = @selector(getUsagesRemaining);
  methods[6].selector = @selector(getUpdatedPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privateKey_", "LLibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextKeyGenerator_", "LLibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LLibOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "params_", "LLibOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmssParams_", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wotsPlus_", "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasGenerated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initSign_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B", "wotsSign", "[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner = { "XMSSMTSigner", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 7, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *new_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner, init)
}

LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *create_LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner, init)
}

LibOrgBouncycastlePqcCryptoXmssWOTSPlusSignature *LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner *self, IOSByteArray *messageDigest, LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((LibOrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(self->params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) importKeysWithByteArray:[self->wotsPlus_ getWOTSPlusSecretKeyWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(self->privateKey_)) getSecretKeySeed] withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
  return [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) signWithByteArray:messageDigest withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSMTSigner)
