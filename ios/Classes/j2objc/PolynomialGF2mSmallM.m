//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM.java
//

#include "GF2mField.h"
#include "GF2mVector.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntUtils.h"
#include "J2ObjC_source.h"
#include "PolynomialGF2mSmallM.h"
#include "RandUtils.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM () {
 @public
  LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field_;
  jint degree_;
  IOSIntArray *coefficients_;
}

- (IOSIntArray *)createRandomIrreduciblePolynomialWithInt:(jint)deg
                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

+ (jint)headCoefficientWithIntArray:(IOSIntArray *)a;

- (IOSIntArray *)addWithIntArray:(IOSIntArray *)a
                    withIntArray:(IOSIntArray *)b;

- (IOSIntArray *)multWithElementWithIntArray:(IOSIntArray *)a
                                     withInt:(jint)element;

+ (IOSIntArray *)multWithMonomialWithIntArray:(IOSIntArray *)a
                                      withInt:(jint)k;

- (IOSObjectArray *)divWithIntArray:(IOSIntArray *)a
                       withIntArray:(IOSIntArray *)f;

- (IOSIntArray *)gcdWithIntArray:(IOSIntArray *)f
                    withIntArray:(IOSIntArray *)g;

- (IOSIntArray *)multiplyWithIntArray:(IOSIntArray *)a
                         withIntArray:(IOSIntArray *)b;

- (jboolean)isIrreducibleWithIntArray:(IOSIntArray *)a;

- (IOSIntArray *)modWithIntArray:(IOSIntArray *)a
                    withIntArray:(IOSIntArray *)f;

- (IOSIntArray *)modMultiplyWithIntArray:(IOSIntArray *)a
                            withIntArray:(IOSIntArray *)b
                            withIntArray:(IOSIntArray *)g;

- (IOSIntArray *)modDivWithIntArray:(IOSIntArray *)a
                       withIntArray:(IOSIntArray *)b
                       withIntArray:(IOSIntArray *)g;

+ (jboolean)isEqualWithIntArray:(IOSIntArray *)a
                   withIntArray:(IOSIntArray *)b;

- (void)computeDegree;

+ (jint)computeDegreeWithIntArray:(IOSIntArray *)a;

+ (IOSIntArray *)normalFormWithIntArray:(IOSIntArray *)a;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, field_, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, coefficients_, IOSIntArray *)

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_createRandomIrreduciblePolynomialWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, jint deg, JavaSecuritySecureRandom *sr);

__attribute__((unused)) static jint LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(IOSIntArray *a);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *b);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, jint element);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(IOSIntArray *a, jint k);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_divWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *f);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_gcdWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *f, IOSIntArray *g);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *b);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isIrreducibleWithIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *f);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *b, IOSIntArray *g);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modDivWithIntArray_withIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *b, IOSIntArray *g);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isEqualWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegree(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self);

__attribute__((unused)) static jint LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(IOSIntArray *a);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(IOSIntArray *a);

@implementation LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM

+ (jchar)RANDOM_IRREDUCIBLE_POLYNOMIAL {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_RANDOM_IRREDUCIBLE_POLYNOMIAL;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_(self, field);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                                withInt:(jint)deg
                                                               withChar:(jchar)typeOfPolynomial
                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_(self, field, deg, typeOfPolynomial, sr);
  return self;
}

- (IOSIntArray *)createRandomIrreduciblePolynomialWithInt:(jint)deg
                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_createRandomIrreduciblePolynomialWithInt_withJavaSecuritySecureRandom_(self, deg, sr);
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                                withInt:(jint)degree {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_(self, field, degree);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                           withIntArray:(IOSIntArray *)coeffs {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(self, field, coeffs);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                          withByteArray:(IOSByteArray *)enc {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(self, field, enc);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)other {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(self, other);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector:(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *)vect {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_(self, vect);
  return self;
}

- (jint)getDegree {
  jint d = ((IOSIntArray *) nil_chk(coefficients_))->size_ - 1;
  if (IOSIntArray_Get(coefficients_, d) == 0) {
    return -1;
  }
  return d;
}

- (jint)getHeadCoefficient {
  if (degree_ == -1) {
    return 0;
  }
  return IOSIntArray_Get(nil_chk(coefficients_), degree_);
}

+ (jint)headCoefficientWithIntArray:(IOSIntArray *)a {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(a);
}

- (jint)getCoefficientWithInt:(jint)index {
  if ((index < 0) || (index > degree_)) {
    return 0;
  }
  return IOSIntArray_Get(nil_chk(coefficients_), index);
}

- (IOSByteArray *)getEncoded {
  jint d = 8;
  jint count = 1;
  while ([((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) getDegree] > d) {
    count++;
    d += 8;
  }
  IOSByteArray *res = [IOSByteArray newArrayWithLength:((IOSIntArray *) nil_chk(coefficients_))->size_ * count];
  count = 0;
  for (jint i = 0; i < coefficients_->size_; i++) {
    for (jint j = 0; j < d; j += 8) {
      *IOSByteArray_GetRef(res, count++) = (jbyte) (JreURShift32(IOSIntArray_Get(coefficients_, i), j));
    }
  }
  return res;
}

- (jint)evaluateAtWithInt:(jint)e {
  jint result = IOSIntArray_Get(nil_chk(coefficients_), degree_);
  for (jint i = degree_ - 1; i >= 0; i--) {
    result = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) multWithInt:result withInt:e] ^ IOSIntArray_Get(nil_chk(coefficients_), i);
  }
  return result;
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)addWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)addend {
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(addend))->coefficients_);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (void)addToThisWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)addend {
  coefficients_ = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(addend))->coefficients_);
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegree(self);
}

- (IOSIntArray *)addWithIntArray:(IOSIntArray *)a
                    withIntArray:(IOSIntArray *)b {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, a, b);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)addMonomialWithInt:(jint)degree {
  IOSIntArray *monomial = [IOSIntArray newArrayWithLength:degree + 1];
  *IOSIntArray_GetRef(monomial, degree) = 1;
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, coefficients_, monomial);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)multWithElementWithInt:(jint)element {
  if (![((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) isElementOfThisFieldWithInt:element]) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Not an element of the finite field this polynomial is defined over.");
  }
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(self, coefficients_, element);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (void)multThisWithElementWithInt:(jint)element {
  if (![((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) isElementOfThisFieldWithInt:element]) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Not an element of the finite field this polynomial is defined over.");
  }
  coefficients_ = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(self, coefficients_, element);
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegree(self);
}

- (IOSIntArray *)multWithElementWithIntArray:(IOSIntArray *)a
                                     withInt:(jint)element {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(self, a, element);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)multWithMonomialWithInt:(jint)k {
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(coefficients_, k);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

+ (IOSIntArray *)multWithMonomialWithIntArray:(IOSIntArray *)a
                                      withInt:(jint)k {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(a, k);
}

- (IOSObjectArray *)divWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)f {
  IOSObjectArray *resultCoeffs = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_divWithIntArray_withIntArray_(self, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(f))->coefficients_);
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, IOSObjectArray_Get(nil_chk(resultCoeffs), 0)), create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, IOSObjectArray_Get(resultCoeffs, 1)) } count:2 type:LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_class_()];
}

- (IOSObjectArray *)divWithIntArray:(IOSIntArray *)a
                       withIntArray:(IOSIntArray *)f {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_divWithIntArray_withIntArray_(self, a, f);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)gcdWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)f {
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_gcdWithIntArray_withIntArray_(self, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(f))->coefficients_);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (IOSIntArray *)gcdWithIntArray:(IOSIntArray *)f
                    withIntArray:(IOSIntArray *)g {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_gcdWithIntArray_withIntArray_(self, f, g);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)factor {
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(self, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(factor))->coefficients_);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (IOSIntArray *)multiplyWithIntArray:(IOSIntArray *)a
                         withIntArray:(IOSIntArray *)b {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(self, a, b);
}

- (jboolean)isIrreducibleWithIntArray:(IOSIntArray *)a {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isIrreducibleWithIntArray_(self, a);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)modWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)f {
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(self, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(f))->coefficients_);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (IOSIntArray *)modWithIntArray:(IOSIntArray *)a
                    withIntArray:(IOSIntArray *)f {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(self, a, f);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)modMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)a
                                                                           withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)b {
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(self, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(a))->coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(b))->coefficients_);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)modSquareMatrixWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallMArray:(IOSObjectArray *)matrix {
  jint length = ((IOSObjectArray *) nil_chk(matrix))->size_;
  IOSIntArray *resultCoeff = [IOSIntArray newArrayWithLength:length];
  IOSIntArray *thisSquare = [IOSIntArray newArrayWithLength:length];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coefficients_))->size_; i++) {
    *IOSIntArray_GetRef(thisSquare, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) multWithInt:IOSIntArray_Get(coefficients_, i) withInt:IOSIntArray_Get(coefficients_, i)];
  }
  for (jint i = 0; i < length; i++) {
    for (jint j = 0; j < length; j++) {
      if (i >= ((IOSIntArray *) nil_chk(((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(IOSObjectArray_Get(matrix, j)))->coefficients_))->size_) {
        continue;
      }
      jint scalarTerm = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) multWithInt:IOSIntArray_Get(((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(IOSObjectArray_Get(matrix, j)))->coefficients_, i) withInt:IOSIntArray_Get(thisSquare, j)];
      *IOSIntArray_GetRef(resultCoeff, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) addWithInt:IOSIntArray_Get(resultCoeff, i) withInt:scalarTerm];
    }
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (IOSIntArray *)modMultiplyWithIntArray:(IOSIntArray *)a
                            withIntArray:(IOSIntArray *)b
                            withIntArray:(IOSIntArray *)g {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(self, a, b, g);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)modSquareRootWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)a {
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(coefficients_);
  IOSIntArray *help = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(self, resultCoeff, resultCoeff, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(a))->coefficients_);
  while (!LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isEqualWithIntArray_withIntArray_(help, coefficients_)) {
    resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(help);
    help = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(self, resultCoeff, resultCoeff, a->coefficients_);
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)modSquareRootMatrixWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallMArray:(IOSObjectArray *)matrix {
  jint length = ((IOSObjectArray *) nil_chk(matrix))->size_;
  IOSIntArray *resultCoeff = [IOSIntArray newArrayWithLength:length];
  for (jint i = 0; i < length; i++) {
    for (jint j = 0; j < length; j++) {
      if (i >= ((IOSIntArray *) nil_chk(((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(IOSObjectArray_Get(matrix, j)))->coefficients_))->size_) {
        continue;
      }
      if (j < coefficients_->size_) {
        jint scalarTerm = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) multWithInt:IOSIntArray_Get(((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(IOSObjectArray_Get(matrix, j)))->coefficients_, i) withInt:IOSIntArray_Get(coefficients_, j)];
        *IOSIntArray_GetRef(resultCoeff, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) addWithInt:IOSIntArray_Get(resultCoeff, i) withInt:scalarTerm];
      }
    }
  }
  for (jint i = 0; i < length; i++) {
    *IOSIntArray_GetRef(resultCoeff, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) sqRootWithInt:IOSIntArray_Get(resultCoeff, i)];
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)modDivWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)divisor
                                                                      withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)modulus {
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modDivWithIntArray_withIntArray_withIntArray_(self, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(divisor))->coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(modulus))->coefficients_);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (IOSIntArray *)modDivWithIntArray:(IOSIntArray *)a
                       withIntArray:(IOSIntArray *)b
                       withIntArray:(IOSIntArray *)g {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modDivWithIntArray_withIntArray_withIntArray_(self, a, b, g);
}

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)modInverseWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)a {
  IOSIntArray *unit = [IOSIntArray newArrayWithInts:(jint[]){ 1 } count:1];
  IOSIntArray *resultCoeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modDivWithIntArray_withIntArray_withIntArray_(self, unit, coefficients_, ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(a))->coefficients_);
  return new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, resultCoeff);
}

- (IOSObjectArray *)modPolynomialToFractonWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)g {
  jint dg = JreRShift32(((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(g))->degree_, 1);
  IOSIntArray *a0 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(g->coefficients_);
  IOSIntArray *a1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(self, coefficients_, g->coefficients_);
  IOSIntArray *b0 = [IOSIntArray newArrayWithInts:(jint[]){ 0 } count:1];
  IOSIntArray *b1 = [IOSIntArray newArrayWithInts:(jint[]){ 1 } count:1];
  while (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a1) > dg) {
    IOSObjectArray *q = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_divWithIntArray_withIntArray_(self, a0, a1);
    a0 = a1;
    a1 = IOSObjectArray_Get(nil_chk(q), 1);
    IOSIntArray *b2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, b0, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(self, IOSObjectArray_Get(q, 0), b1, g->coefficients_));
    b0 = b1;
    b1 = b2;
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, a1), create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(field_, b1) } count:2 type:LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_class_()];
}

- (jboolean)isEqual:(id)other {
  if (other == nil || !([other isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM class]])) {
    return false;
  }
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *p = (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) cast_chk(other, [LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM class]);
  if (([((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) isEqual:p->field_]) && (degree_ == p->degree_) && (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isEqualWithIntArray_withIntArray_(coefficients_, p->coefficients_))) {
    return true;
  }
  return false;
}

+ (jboolean)isEqualWithIntArray:(IOSIntArray *)a
                   withIntArray:(IOSIntArray *)b {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isEqualWithIntArray_withIntArray_(a, b);
}

- (NSUInteger)hash {
  jint hash_ = ((jint) [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) hash]);
  for (jint j = 0; j < ((IOSIntArray *) nil_chk(coefficients_))->size_; j++) {
    hash_ = hash_ * 31 + IOSIntArray_Get(coefficients_, j);
  }
  return hash_;
}

- (NSString *)description {
  NSString *str = JreStrcat("$$$", @" PqcMathPolynomial over ", [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) description], @": \n");
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coefficients_))->size_; i++) {
    str = JreStrcat("$$$IC", str, [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) elementToStrWithInt:IOSIntArray_Get(coefficients_, i)], @"Y^", i, '+');
  }
  str = JreStrcat("$C", str, ';');
  return str;
}

- (void)computeDegree {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegree(self);
}

+ (jint)computeDegreeWithIntArray:(IOSIntArray *)a {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a);
}

+ (IOSIntArray *)normalFormWithIntArray:(IOSIntArray *)a {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 14, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 14, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 18, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 12, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 18, 20, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 21, 12, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 21, 20, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 22, 7, -1, -1, -1, -1 },
    { NULL, "[[I", 0x2, 22, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 23, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 23, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 24, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 24, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 25, 10, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 26, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 26, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 27, 31, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 32, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 34, 28, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 34, 31, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 35, 7, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", 0x1, 36, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 39, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 40, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 41, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 42, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 43, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:);
  methods[1].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:withInt:withChar:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(createRandomIrreduciblePolynomialWithInt:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:withInt:);
  methods[4].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:withIntArray:);
  methods[5].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:withByteArray:);
  methods[6].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[7].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector:);
  methods[8].selector = @selector(getDegree);
  methods[9].selector = @selector(getHeadCoefficient);
  methods[10].selector = @selector(headCoefficientWithIntArray:);
  methods[11].selector = @selector(getCoefficientWithInt:);
  methods[12].selector = @selector(getEncoded);
  methods[13].selector = @selector(evaluateAtWithInt:);
  methods[14].selector = @selector(addWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[15].selector = @selector(addToThisWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[16].selector = @selector(addWithIntArray:withIntArray:);
  methods[17].selector = @selector(addMonomialWithInt:);
  methods[18].selector = @selector(multWithElementWithInt:);
  methods[19].selector = @selector(multThisWithElementWithInt:);
  methods[20].selector = @selector(multWithElementWithIntArray:withInt:);
  methods[21].selector = @selector(multWithMonomialWithInt:);
  methods[22].selector = @selector(multWithMonomialWithIntArray:withInt:);
  methods[23].selector = @selector(divWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[24].selector = @selector(divWithIntArray:withIntArray:);
  methods[25].selector = @selector(gcdWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[26].selector = @selector(gcdWithIntArray:withIntArray:);
  methods[27].selector = @selector(multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[28].selector = @selector(multiplyWithIntArray:withIntArray:);
  methods[29].selector = @selector(isIrreducibleWithIntArray:);
  methods[30].selector = @selector(modWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[31].selector = @selector(modWithIntArray:withIntArray:);
  methods[32].selector = @selector(modMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[33].selector = @selector(modSquareMatrixWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallMArray:);
  methods[34].selector = @selector(modMultiplyWithIntArray:withIntArray:withIntArray:);
  methods[35].selector = @selector(modSquareRootWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[36].selector = @selector(modSquareRootMatrixWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallMArray:);
  methods[37].selector = @selector(modDivWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[38].selector = @selector(modDivWithIntArray:withIntArray:withIntArray:);
  methods[39].selector = @selector(modInverseWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[40].selector = @selector(modPolynomialToFractonWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:);
  methods[41].selector = @selector(isEqual:);
  methods[42].selector = @selector(isEqualWithIntArray:withIntArray:);
  methods[43].selector = @selector(hash);
  methods[44].selector = @selector(description);
  methods[45].selector = @selector(computeDegree);
  methods[46].selector = @selector(computeDegreeWithIntArray:);
  methods[47].selector = @selector(normalFormWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "degree_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "coefficients_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "RANDOM_IRREDUCIBLE_POLYNOMIAL", "C", .constantValue.asUnichar = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_RANDOM_IRREDUCIBLE_POLYNOMIAL, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;ICLJavaSecuritySecureRandom;", "createRandomIrreduciblePolynomial", "ILJavaSecuritySecureRandom;", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;I", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;[I", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;[B", "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mVector;", "headCoefficient", "[I", "getCoefficient", "I", "evaluateAt", "add", "addToThis", "[I[I", "addMonomial", "multWithElement", "multThisWithElement", "[II", "multWithMonomial", "div", "gcd", "multiply", "isIrreducible", "mod", "modMultiply", "LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", "modSquareMatrix", "[LLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;", "[I[I[I", "modSquareRoot", "modSquareRootMatrix", "modDiv", "modInverse", "modPolynomialToFracton", "equals", "LNSObject;", "isEqual", "hashCode", "toString", "computeDegree", "normalForm" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM = { "PolynomialGF2mSmallM", "lib.org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 48, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;
}

@end

void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field) {
  NSObject_init(self);
  self->field_ = field;
  self->degree_ = -1;
  self->coefficients_ = [IOSIntArray newArrayWithLength:1];
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_, field)
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_, field)
}

void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, jint deg, jchar typeOfPolynomial, JavaSecuritySecureRandom *sr) {
  NSObject_init(self);
  self->field_ = field;
  switch (typeOfPolynomial) {
    case LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_RANDOM_IRREDUCIBLE_POLYNOMIAL:
    self->coefficients_ = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_createRandomIrreduciblePolynomialWithInt_withJavaSecuritySecureRandom_(self, deg, sr);
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$", @" Error: type ", typeOfPolynomial, @" is not defined for GF2smallmPolynomial"));
  }
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegree(self);
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, jint deg, jchar typeOfPolynomial, JavaSecuritySecureRandom *sr) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_, field, deg, typeOfPolynomial, sr)
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, jint deg, jchar typeOfPolynomial, JavaSecuritySecureRandom *sr) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_, field, deg, typeOfPolynomial, sr)
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_createRandomIrreduciblePolynomialWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, jint deg, JavaSecuritySecureRandom *sr) {
  IOSIntArray *resCoeff = [IOSIntArray newArrayWithLength:deg + 1];
  *IOSIntArray_GetRef(resCoeff, deg) = 1;
  *IOSIntArray_GetRef(resCoeff, 0) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) getRandomNonZeroElementWithJavaSecuritySecureRandom:sr];
  for (jint i = 1; i < deg; i++) {
    *IOSIntArray_GetRef(resCoeff, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) getRandomElementWithJavaSecuritySecureRandom:sr];
  }
  while (!LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isIrreducibleWithIntArray_(self, resCoeff)) {
    jint n = LibOrgBouncycastlePqcMathLinearalgebraRandUtils_nextIntWithJavaSecuritySecureRandom_withInt_(sr, deg);
    if (n == 0) {
      *IOSIntArray_GetRef(resCoeff, 0) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) getRandomNonZeroElementWithJavaSecuritySecureRandom:sr];
    }
    else {
      *IOSIntArray_GetRef(resCoeff, n) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) getRandomElementWithJavaSecuritySecureRandom:sr];
    }
  }
  return resCoeff;
}

void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, jint degree) {
  NSObject_init(self);
  self->field_ = field;
  self->degree_ = degree;
  self->coefficients_ = [IOSIntArray newArrayWithLength:degree + 1];
  *IOSIntArray_GetRef(self->coefficients_, degree) = 1;
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, jint degree) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_, field, degree)
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, jint degree) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_, field, degree)
}

void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSIntArray *coeffs) {
  NSObject_init(self);
  self->field_ = field;
  self->coefficients_ = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(coeffs);
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegree(self);
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSIntArray *coeffs) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_, field, coeffs)
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSIntArray *coeffs) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_, field, coeffs)
}

void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  NSObject_init(self);
  self->field_ = field;
  jint d = 8;
  jint count = 1;
  while ([((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field)) getDegree] > d) {
    count++;
    d += 8;
  }
  if ((((IOSByteArray *) nil_chk(enc))->size_ % count) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@" Error: byte array is not encoded polynomial over given finite field GF2m");
  }
  self->coefficients_ = [IOSIntArray newArrayWithLength:enc->size_ / count];
  count = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->coefficients_))->size_; i++) {
    for (jint j = 0; j < d; j += 8) {
      *IOSIntArray_GetRef(self->coefficients_, i) ^= JreLShift32((IOSByteArray_Get(enc, count++) & (jint) 0x000000ff), j);
    }
    if (![((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) isElementOfThisFieldWithInt:IOSIntArray_Get(self->coefficients_, i)]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@" Error: byte array is not encoded polynomial over given finite field GF2m");
    }
  }
  if ((self->coefficients_->size_ != 1) && (IOSIntArray_Get(self->coefficients_, self->coefficients_->size_ - 1) == 0)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@" Error: byte array is not encoded polynomial over given finite field GF2m");
  }
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegree(self);
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_, field, enc)
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_, field, enc)
}

void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *other) {
  NSObject_init(self);
  self->field_ = ((LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *) nil_chk(other))->field_;
  self->degree_ = other->degree_;
  self->coefficients_ = LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(other->coefficients_);
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *other) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_, other)
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *other) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_, other)
}

void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *vect) {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray_(self, [((LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *) nil_chk(vect)) getField], [vect getIntArrayForm]);
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *vect) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_, vect)
}

LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *create_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_(LibOrgBouncycastlePqcMathLinearalgebraGF2mVector *vect) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mVector_, vect)
}

jint LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(IOSIntArray *a) {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initialize();
  jint degree = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a);
  if (degree == -1) {
    return 0;
  }
  return IOSIntArray_Get(nil_chk(a), degree);
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *b) {
  IOSIntArray *result;
  IOSIntArray *addend;
  if (((IOSIntArray *) nil_chk(a))->size_ < ((IOSIntArray *) nil_chk(b))->size_) {
    result = [IOSIntArray newArrayWithLength:b->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, result, 0, b->size_);
    addend = a;
  }
  else {
    result = [IOSIntArray newArrayWithLength:a->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, a->size_);
    addend = b;
  }
  for (jint i = addend->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(result, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) addWithInt:IOSIntArray_Get(result, i) withInt:IOSIntArray_Get(addend, i)];
  }
  return result;
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, jint element) {
  jint degree = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a);
  if (degree == -1 || element == 0) {
    return [IOSIntArray newArrayWithLength:1];
  }
  if (element == 1) {
    return LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(a);
  }
  IOSIntArray *result = [IOSIntArray newArrayWithLength:degree + 1];
  for (jint i = degree; i >= 0; i--) {
    *IOSIntArray_GetRef(result, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) multWithInt:IOSIntArray_Get(nil_chk(a), i) withInt:element];
  }
  return result;
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(IOSIntArray *a, jint k) {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initialize();
  jint d = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a);
  if (d == -1) {
    return [IOSIntArray newArrayWithLength:1];
  }
  IOSIntArray *result = [IOSIntArray newArrayWithLength:d + k + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, k, d + 1);
  return result;
}

IOSObjectArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_divWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *f) {
  jint df = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(f);
  jint da = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a) + 1;
  if (df == -1) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Division by zero.");
  }
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:2 type:IOSClass_intArray(1)];
  (void) IOSObjectArray_SetAndConsume(result, 0, [IOSIntArray newArrayWithLength:1]);
  (void) IOSObjectArray_SetAndConsume(result, 1, [IOSIntArray newArrayWithLength:da]);
  jint hc = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(f);
  hc = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) inverseWithInt:hc];
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result, 0)), 0) = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, IOSObjectArray_Get(result, 1), 0, ((IOSIntArray *) nil_chk(IOSObjectArray_Get(result, 1)))->size_);
  while (df <= LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(IOSObjectArray_Get(result, 1))) {
    IOSIntArray *q;
    IOSIntArray *coeff = [IOSIntArray newArrayWithLength:1];
    *IOSIntArray_GetRef(coeff, 0) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) multWithInt:LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(IOSObjectArray_Get(result, 1)) withInt:hc];
    q = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(self, f, IOSIntArray_Get(coeff, 0));
    jint n = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(IOSObjectArray_Get(result, 1)) - df;
    q = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(q, n);
    coeff = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(coeff, n);
    (void) IOSObjectArray_Set(result, 0, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, coeff, IOSObjectArray_Get(result, 0)));
    (void) IOSObjectArray_Set(result, 1, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, q, IOSObjectArray_Get(result, 1)));
  }
  return result;
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_gcdWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *f, IOSIntArray *g) {
  IOSIntArray *a = f;
  IOSIntArray *b = g;
  if (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a) == -1) {
    return b;
  }
  while (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(b) != -1) {
    IOSIntArray *c = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(self, a, b);
    a = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(b))->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, a, 0, a->size_);
    b = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(c))->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, b, 0, b->size_);
  }
  jint coeff = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) inverseWithInt:LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(a)];
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(self, a, coeff);
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *b) {
  IOSIntArray *mult1;
  IOSIntArray *mult2;
  if (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a) < LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(b)) {
    mult1 = b;
    mult2 = a;
  }
  else {
    mult1 = a;
    mult2 = b;
  }
  mult1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(mult1);
  mult2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(mult2);
  if (((IOSIntArray *) nil_chk(mult2))->size_ == 1) {
    return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(self, mult1, IOSIntArray_Get(mult2, 0));
  }
  jint d1 = ((IOSIntArray *) nil_chk(mult1))->size_;
  jint d2 = mult2->size_;
  IOSIntArray *result = [IOSIntArray newArrayWithLength:d1 + d2 - 1];
  if (d2 != d1) {
    IOSIntArray *res1 = [IOSIntArray newArrayWithLength:d2];
    IOSIntArray *res2 = [IOSIntArray newArrayWithLength:d1 - d2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mult1, 0, res1, 0, res1->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mult1, d2, res2, 0, res2->size_);
    res1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(self, res1, mult2);
    res2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(self, res2, mult2);
    res2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(res2, d2);
    result = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, res1, res2);
  }
  else {
    d2 = JreURShift32((d1 + 1), 1);
    jint d = d1 - d2;
    IOSIntArray *firstPartMult1 = [IOSIntArray newArrayWithLength:d2];
    IOSIntArray *firstPartMult2 = [IOSIntArray newArrayWithLength:d2];
    IOSIntArray *secondPartMult1 = [IOSIntArray newArrayWithLength:d];
    IOSIntArray *secondPartMult2 = [IOSIntArray newArrayWithLength:d];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mult1, 0, firstPartMult1, 0, firstPartMult1->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mult1, d2, secondPartMult1, 0, secondPartMult1->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mult2, 0, firstPartMult2, 0, firstPartMult2->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mult2, d2, secondPartMult2, 0, secondPartMult2->size_);
    IOSIntArray *helpPoly1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, firstPartMult1, secondPartMult1);
    IOSIntArray *helpPoly2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, firstPartMult2, secondPartMult2);
    IOSIntArray *res1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(self, firstPartMult1, firstPartMult2);
    IOSIntArray *res2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(self, helpPoly1, helpPoly2);
    IOSIntArray *res3 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(self, secondPartMult1, secondPartMult2);
    res2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, res2, res1);
    res2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, res2, res3);
    res3 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(res3, d2);
    result = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, res2, res3);
    result = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(result, d2);
    result = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, result, res1);
  }
  return result;
}

jboolean LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isIrreducibleWithIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a) {
  if (IOSIntArray_Get(nil_chk(a), 0) == 0) {
    return false;
  }
  jint d = JreRShift32(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a), 1);
  IOSIntArray *u = [IOSIntArray newArrayWithInts:(jint[]){ 0, 1 } count:2];
  IOSIntArray *Y = [IOSIntArray newArrayWithInts:(jint[]){ 0, 1 } count:2];
  jint fieldDegree = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) getDegree];
  for (jint i = 0; i < d; i++) {
    for (jint j = fieldDegree - 1; j >= 0; j--) {
      u = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(self, u, u, a);
    }
    u = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(u);
    IOSIntArray *g = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_gcdWithIntArray_withIntArray_(self, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, u, Y), a);
    if (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(g) != 0) {
      return false;
    }
  }
  return true;
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *f) {
  jint df = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(f);
  if (df == -1) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Division by zero");
  }
  IOSIntArray *result = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(a))->size_];
  jint hc = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(f);
  hc = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) inverseWithInt:hc];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, result->size_);
  while (df <= LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(result)) {
    IOSIntArray *q;
    jint coeff = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) multWithInt:LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(result) withInt:hc];
    q = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithMonomialWithIntArray_withInt_(f, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(result) - df);
    q = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(self, q, coeff);
    result = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, q, result);
  }
  return result;
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *b, IOSIntArray *g) {
  return LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(self, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multiplyWithIntArray_withIntArray_(self, a, b), g);
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modDivWithIntArray_withIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self, IOSIntArray *a, IOSIntArray *b, IOSIntArray *g) {
  IOSIntArray *r0 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(g);
  IOSIntArray *r1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(self, b, g);
  IOSIntArray *s0 = [IOSIntArray newArrayWithInts:(jint[]){ 0 } count:1];
  IOSIntArray *s1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modWithIntArray_withIntArray_(self, a, g);
  IOSIntArray *s2;
  IOSObjectArray *q;
  while (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(r1) != -1) {
    q = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_divWithIntArray_withIntArray_(self, r0, r1);
    r0 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(r1);
    r1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(IOSObjectArray_Get(nil_chk(q), 1));
    s2 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_addWithIntArray_withIntArray_(self, s0, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_modMultiplyWithIntArray_withIntArray_withIntArray_(self, IOSObjectArray_Get(q, 0), s1, g));
    s0 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(s1);
    s1 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(s2);
  }
  jint hc = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_headCoefficientWithIntArray_(r0);
  s0 = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_multWithElementWithIntArray_withInt_(self, s0, [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) inverseWithInt:hc]);
  return s0;
}

jboolean LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_isEqualWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b) {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initialize();
  jint da = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a);
  jint db = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(b);
  if (da != db) {
    return false;
  }
  for (jint i = 0; i <= da; i++) {
    if (IOSIntArray_Get(nil_chk(a), i) != IOSIntArray_Get(nil_chk(b), i)) {
      return false;
    }
  }
  return true;
}

void LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegree(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *self) {
  for (self->degree_ = ((IOSIntArray *) nil_chk(self->coefficients_))->size_ - 1; self->degree_ >= 0 && IOSIntArray_Get(self->coefficients_, self->degree_) == 0; self->degree_--) {
    
    ;
  }
}

jint LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(IOSIntArray *a) {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initialize();
  jint degree;
  for (degree = ((IOSIntArray *) nil_chk(a))->size_ - 1; degree >= 0 && IOSIntArray_Get(a, degree) == 0; degree--) {
    
    ;
  }
  return degree;
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_normalFormWithIntArray_(IOSIntArray *a) {
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initialize();
  jint d = LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_computeDegreeWithIntArray_(a);
  if (d == -1) {
    return [IOSIntArray newArrayWithLength:1];
  }
  if (((IOSIntArray *) nil_chk(a))->size_ == d + 1) {
    return LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(a);
  }
  IOSIntArray *result = [IOSIntArray newArrayWithLength:d + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, d + 1);
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM)
