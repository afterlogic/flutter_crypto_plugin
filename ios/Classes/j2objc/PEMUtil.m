//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/PEMUtil.java
//

#include "ASN1InputStream.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "Base64.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PEMUtil.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/StringBuffer.h"

@interface LibOrgBouncycastleJceProviderPEMUtil () {
 @public
  NSString *_header1_;
  NSString *_header2_;
  NSString *_footer1_;
  NSString *_footer2_;
}

- (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderPEMUtil, _header1_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderPEMUtil, _header2_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderPEMUtil, _footer1_, NSString *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderPEMUtil, _footer2_, NSString *)

__attribute__((unused)) static NSString *LibOrgBouncycastleJceProviderPEMUtil_readLineWithJavaIoInputStream_(LibOrgBouncycastleJceProviderPEMUtil *self, JavaIoInputStream *inArg);

@implementation LibOrgBouncycastleJceProviderPEMUtil

- (instancetype)initWithNSString:(NSString *)type {
  LibOrgBouncycastleJceProviderPEMUtil_initWithNSString_(self, type);
  return self;
}

- (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return LibOrgBouncycastleJceProviderPEMUtil_readLineWithJavaIoInputStream_(self, inArg);
}

- (LibOrgBouncycastleAsn1ASN1Sequence *)readPEMObjectWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  NSString *line;
  JavaLangStringBuffer *pemBuf = new_JavaLangStringBuffer_init();
  while ((line = LibOrgBouncycastleJceProviderPEMUtil_readLineWithJavaIoInputStream_(self, inArg)) != nil) {
    if ([((NSString *) nil_chk(line)) java_hasPrefix:_header1_] || [line java_hasPrefix:_header2_]) {
      break;
    }
  }
  while ((line = LibOrgBouncycastleJceProviderPEMUtil_readLineWithJavaIoInputStream_(self, inArg)) != nil) {
    if ([((NSString *) nil_chk(line)) java_hasPrefix:_footer1_] || [line java_hasPrefix:_footer2_]) {
      break;
    }
    (void) [pemBuf appendWithNSString:line];
  }
  if ([pemBuf java_length] != 0) {
    LibOrgBouncycastleAsn1ASN1Primitive *o = [new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(LibOrgBouncycastleUtilEncodersBase64_decodeWithNSString_([pemBuf description])) readObject];
    if (!([o isKindOfClass:[LibOrgBouncycastleAsn1ASN1Sequence class]])) {
      @throw new_JavaIoIOException_initWithNSString_(@"malformed PEM data encountered");
    }
    return (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(o, [LibOrgBouncycastleAsn1ASN1Sequence class]);
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Sequence;", 0x0, 4, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(readLineWithJavaIoInputStream:);
  methods[2].selector = @selector(readPEMObjectWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_header1_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_header2_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_footer1_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_footer2_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "readLine", "LJavaIoInputStream;", "LJavaIoIOException;", "readPEMObject" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderPEMUtil = { "PEMUtil", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 3, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderPEMUtil;
}

@end

void LibOrgBouncycastleJceProviderPEMUtil_initWithNSString_(LibOrgBouncycastleJceProviderPEMUtil *self, NSString *type) {
  NSObject_init(self);
  self->_header1_ = JreStrcat("$$$", @"-----BEGIN ", type, @"-----");
  self->_header2_ = JreStrcat("$$$", @"-----BEGIN X509 ", type, @"-----");
  self->_footer1_ = JreStrcat("$$$", @"-----END ", type, @"-----");
  self->_footer2_ = JreStrcat("$$$", @"-----END X509 ", type, @"-----");
}

LibOrgBouncycastleJceProviderPEMUtil *new_LibOrgBouncycastleJceProviderPEMUtil_initWithNSString_(NSString *type) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderPEMUtil, initWithNSString_, type)
}

LibOrgBouncycastleJceProviderPEMUtil *create_LibOrgBouncycastleJceProviderPEMUtil_initWithNSString_(NSString *type) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderPEMUtil, initWithNSString_, type)
}

NSString *LibOrgBouncycastleJceProviderPEMUtil_readLineWithJavaIoInputStream_(LibOrgBouncycastleJceProviderPEMUtil *self, JavaIoInputStream *inArg) {
  jint c;
  JavaLangStringBuffer *l = new_JavaLangStringBuffer_init();
  do {
    while (((c = [((JavaIoInputStream *) nil_chk(inArg)) read]) != 0x000d) && c != 0x000a && (c >= 0)) {
      if (c == 0x000d) {
        continue;
      }
      (void) [l appendWithChar:(jchar) c];
    }
  }
  while (c >= 0 && [l java_length] == 0);
  if (c < 0) {
    return nil;
  }
  return [l description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderPEMUtil)
