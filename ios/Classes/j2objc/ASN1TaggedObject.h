//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ASN1TaggedObject.java
//

#ifndef ASN1TaggedObject_H
#define ASN1TaggedObject_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Primitive.h"
#include "ASN1TaggedObjectParser.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1OutputStream;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1ASN1TaggedObject : LibOrgBouncycastleAsn1ASN1Primitive < LibOrgBouncycastleAsn1ASN1TaggedObjectParser > {
 @public
  jint tagNo_;
  jboolean empty_;
  jboolean explicit__;
  id<LibOrgBouncycastleAsn1ASN1Encodable> obj_;
}

#pragma mark Public

- (instancetype __nonnull)initWithBoolean:(jboolean)explicit_
                                  withInt:(jint)tagNo
  withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)obj;

+ (LibOrgBouncycastleAsn1ASN1TaggedObject *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                      withBoolean:(jboolean)explicit_;

+ (LibOrgBouncycastleAsn1ASN1TaggedObject *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1ASN1Primitive *)getLoadedObject;

- (LibOrgBouncycastleAsn1ASN1Primitive *)getObject;

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getObjectParserWithInt:(jint)tag
                                                      withBoolean:(jboolean)isExplicit;

- (jint)getTagNo;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (jboolean)isExplicit;

- (NSString *)description;

#pragma mark Package-Private

- (jboolean)asn1EqualsWithLibOrgBouncycastleAsn1ASN1Primitive:(LibOrgBouncycastleAsn1ASN1Primitive *)o;

- (void)encodeWithLibOrgBouncycastleAsn1ASN1OutputStream:(LibOrgBouncycastleAsn1ASN1OutputStream *)outArg;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toDERObject;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toDLObject;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1ASN1TaggedObject)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1ASN1TaggedObject, obj_, id<LibOrgBouncycastleAsn1ASN1Encodable>)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1TaggedObject *LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1TaggedObject *LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1TaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1ASN1TaggedObject *self, jboolean explicit_, jint tagNo, id<LibOrgBouncycastleAsn1ASN1Encodable> obj);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1ASN1TaggedObject)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ASN1TaggedObject_H
