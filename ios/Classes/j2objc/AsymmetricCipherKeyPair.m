//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/AsymmetricCipherKeyPair.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoAsymmetricCipherKeyPair () {
 @public
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicParam_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateParam_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair, publicParam_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair, privateParam_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)

@implementation LibOrgBouncycastleCryptoAsymmetricCipherKeyPair

- (instancetype)initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicParam
                    withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateParam {
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(self, publicParam, privateParam);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)publicParam
                    withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)privateParam {
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_(self, publicParam, privateParam);
  return self;
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublic {
  return publicParam_;
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPrivate {
  return privateParam_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoCipherParameters:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getPublic);
  methods[3].selector = @selector(getPrivate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publicParam_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateParam_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "LLibOrgBouncycastleCryptoCipherParameters;LLibOrgBouncycastleCryptoCipherParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAsymmetricCipherKeyPair = { "AsymmetricCipherKeyPair", "lib.org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;
}

@end

void LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *self, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicParam, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateParam) {
  NSObject_init(self);
  self->publicParam_ = publicParam;
  self->privateParam_ = privateParam;
}

LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicParam, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateParam) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, publicParam, privateParam)
}

LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *create_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicParam, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateParam) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_, publicParam, privateParam)
}

void LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *self, id<LibOrgBouncycastleCryptoCipherParameters> publicParam, id<LibOrgBouncycastleCryptoCipherParameters> privateParam) {
  NSObject_init(self);
  self->publicParam_ = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk(publicParam, [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  self->privateParam_ = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk(privateParam, [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
}

LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_(id<LibOrgBouncycastleCryptoCipherParameters> publicParam, id<LibOrgBouncycastleCryptoCipherParameters> privateParam) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair, initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_, publicParam, privateParam)
}

LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *create_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_(id<LibOrgBouncycastleCryptoCipherParameters> publicParam, id<LibOrgBouncycastleCryptoCipherParameters> privateParam) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair, initWithLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleCryptoCipherParameters_, publicParam, privateParam)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair)
