//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/SHA1.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCMessageDigest.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestAlgorithmProvider.h"
#include "HMac.h"
#include "IANAObjectIdentifiers.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OIWObjectIdentifiers.h"
#include "PBE.h"
#include "PBESecretKeyFactory.h"
#include "PKCSObjectIdentifiers.h"
#include "SHA1.h"
#include "SHA1Digest.h"

@interface LibOrgBouncycastleJcajceProviderDigestSHA1 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderDigestSHA1_init(LibOrgBouncycastleJcajceProviderDigestSHA1 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSHA1 *new_LibOrgBouncycastleJcajceProviderDigestSHA1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSHA1 *create_LibOrgBouncycastleJcajceProviderDigestSHA1_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA1_Digest;LLibOrgBouncycastleJcajceProviderDigestSHA1_HashMac;LLibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator;LLibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac;LLibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory;LLibOrgBouncycastleJcajceProviderDigestSHA1_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA1 = { "SHA1", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA1;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA1_init(LibOrgBouncycastleJcajceProviderDigestSHA1 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSHA1 *new_LibOrgBouncycastleJcajceProviderDigestSHA1_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA1 *create_LibOrgBouncycastleJcajceProviderDigestSHA1_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA1)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA1_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA1_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestSHA1_Digest *d = (LibOrgBouncycastleJcajceProviderDigestSHA1_Digest *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestSHA1_Digest class]);
  ((LibOrgBouncycastleJcajceProviderDigestSHA1_Digest *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsSHA1Digest_initWithLibOrgBouncycastleCryptoDigestsSHA1Digest_((LibOrgBouncycastleCryptoDigestsSHA1Digest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsSHA1Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestSHA1;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA1_Digest = { "Digest", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA1_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA1_Digest_init(LibOrgBouncycastleJcajceProviderDigestSHA1_Digest *self) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA1_Digest *new_LibOrgBouncycastleJcajceProviderDigestSHA1_Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_Digest, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA1_Digest *create_LibOrgBouncycastleJcajceProviderDigestSHA1_Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA1_Digest)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA1;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac = { "HashMac", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac_init(LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init()));
}

LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac *new_LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac *create_LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA1_HashMac)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA1;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator = { "KeyGenerator", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator_init(LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACSHA1", 160, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator *new_LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator *create_LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA1_KeyGenerator)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA1;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac = { "SHA1Mac", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac_init(LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init()));
}

LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac *new_LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac *create_LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA1_SHA1Mac)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA1;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory = { "PBEWithMacKeyFactory", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory_init(LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilPBESecretKeyFactory_initWithNSString_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(self, @"PBEwithHmacSHA", nil, false, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_PKCS12, LibOrgBouncycastleJcajceProviderSymmetricUtilPBE_SHA1, 160, 0);
}

LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory *new_LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory *create_LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA1_PBEWithMacKeyFactory)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.SHA-1" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SHA1" withNSString:@"SHA-1"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SHA" withNSString:@"SHA-1"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, idSHA1)) withNSString:@"SHA-1"];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA1" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX, @"$HashMac") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX, @"$KeyGenerator")];
  [self addHMACAliasWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA1" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA1)];
  [self addHMACAliasWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA1" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1IanaIANAObjectIdentifiers, hmacSHA1)];
  [provider addAlgorithmWithNSString:@"Mac.PBEWITHHMACSHA" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX, @"$SHA1Mac")];
  [provider addAlgorithmWithNSString:@"Mac.PBEWITHHMACSHA1" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX, @"$SHA1Mac")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.SecretKeyFactory.PBEWITHHMACSHA" withNSString:@"PBEWITHHMACSHA1"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.SecretKeyFactory.", JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, idSHA1)) withNSString:@"PBEWITHHMACSHA1"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.Mac.", JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, idSHA1)) withNSString:@"PBEWITHHMACSHA"];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.PBEWITHHMACSHA1" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX, @"$PBEWithMacKeyFactory")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderDigestSHA1;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings class]) {
    LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderDigestSHA1_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_init(LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings *self) {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings *new_LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings *create_LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA1_Mappings)
