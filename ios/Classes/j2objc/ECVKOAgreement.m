//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/ECVKOAgreement.java
//

#include "BigIntegers.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "ECAlgorithms.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "ECVKOAgreement.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithUKM.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoAgreementECVKOAgreement () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *key_;
  JavaMathBigInteger *ukm_;
}

+ (JavaMathBigInteger *)toIntegerWithByteArray:(IOSByteArray *)ukm;

- (IOSByteArray *)fromPointWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)v;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementECVKOAgreement, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementECVKOAgreement, key_, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementECVKOAgreement, ukm_, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementECVKOAgreement_toIntegerWithByteArray_(IOSByteArray *ukm);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoAgreementECVKOAgreement_fromPointWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleCryptoAgreementECVKOAgreement *self, LibOrgBouncycastleMathEcECPoint *v);

@implementation LibOrgBouncycastleCryptoAgreementECVKOAgreement

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoAgreementECVKOAgreement_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)key {
  LibOrgBouncycastleCryptoParamsParametersWithUKM *p = (LibOrgBouncycastleCryptoParamsParametersWithUKM *) cast_chk(key, [LibOrgBouncycastleCryptoParamsParametersWithUKM class]);
  self->key_ = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithUKM *) nil_chk(p)) getParameters], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
  self->ukm_ = LibOrgBouncycastleCryptoAgreementECVKOAgreement_toIntegerWithByteArray_([p getUKM]);
}

- (jint)getFieldSize {
  return ([((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getParameters])) getCurve])) getFieldSize] + 7) / 8;
}

- (IOSByteArray *)calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)pubKey {
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *pub = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(pubKey, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  LibOrgBouncycastleCryptoParamsECDomainParameters *params = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getParameters];
  if (![((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(params)) isEqual:[((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(pub)) getParameters]]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECVKO public key has wrong domain parameters");
  }
  JavaMathBigInteger *hd = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([params getH])) multiplyWithJavaMathBigInteger:ukm_])) multiplyWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getD]])) modWithJavaMathBigInteger:[params getN]];
  LibOrgBouncycastleMathEcECPoint *pubPoint = LibOrgBouncycastleMathEcECAlgorithms_cleanPointWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_([params getCurve], [pub getQ]);
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(pubPoint)) isInfinity]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Infinity is not a valid public key for ECDHC");
  }
  LibOrgBouncycastleMathEcECPoint *P = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([pubPoint multiplyWithJavaMathBigInteger:hd])) normalize];
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(P)) isInfinity]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Infinity is not a valid agreement value for ECVKO");
  }
  return LibOrgBouncycastleCryptoAgreementECVKOAgreement_fromPointWithLibOrgBouncycastleMathEcECPoint_(self, P);
}

+ (JavaMathBigInteger *)toIntegerWithByteArray:(IOSByteArray *)ukm {
  return LibOrgBouncycastleCryptoAgreementECVKOAgreement_toIntegerWithByteArray_(ukm);
}

- (IOSByteArray *)fromPointWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)v {
  return LibOrgBouncycastleCryptoAgreementECVKOAgreement_fromPointWithLibOrgBouncycastleMathEcECPoint_(self, v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:);
  methods[4].selector = @selector(toIntegerWithByteArray:);
  methods[5].selector = @selector(fromPointWithLibOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ukm_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoCipherParameters;", "calculateAgreement", "toInteger", "[B", "fromPoint", "LLibOrgBouncycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementECVKOAgreement = { "ECVKOAgreement", "lib.org.bouncycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementECVKOAgreement;
}

@end

void LibOrgBouncycastleCryptoAgreementECVKOAgreement_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoAgreementECVKOAgreement *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
}

LibOrgBouncycastleCryptoAgreementECVKOAgreement *new_LibOrgBouncycastleCryptoAgreementECVKOAgreement_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementECVKOAgreement, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoAgreementECVKOAgreement *create_LibOrgBouncycastleCryptoAgreementECVKOAgreement_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementECVKOAgreement, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementECVKOAgreement_toIntegerWithByteArray_(IOSByteArray *ukm) {
  LibOrgBouncycastleCryptoAgreementECVKOAgreement_initialize();
  IOSByteArray *v = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(ukm))->size_];
  for (jint i = 0; i != v->size_; i++) {
    *IOSByteArray_GetRef(v, i) = IOSByteArray_Get(ukm, ukm->size_ - i - 1);
  }
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, v);
}

IOSByteArray *LibOrgBouncycastleCryptoAgreementECVKOAgreement_fromPointWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleCryptoAgreementECVKOAgreement *self, LibOrgBouncycastleMathEcECPoint *v) {
  JavaMathBigInteger *bX = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(v)) getAffineXCoord])) toBigInteger];
  JavaMathBigInteger *bY = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([v getAffineYCoord])) toBigInteger];
  jint size;
  if (((IOSByteArray *) nil_chk([((JavaMathBigInteger *) nil_chk(bX)) toByteArray]))->size_ > 33) {
    size = 64;
  }
  else {
    size = 32;
  }
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:2 * size];
  IOSByteArray *x = LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(size, bX);
  IOSByteArray *y = LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(size, bY);
  for (jint i = 0; i != size; i++) {
    *IOSByteArray_GetRef(bytes, i) = IOSByteArray_Get(nil_chk(x), size - i - 1);
  }
  for (jint i = 0; i != size; i++) {
    *IOSByteArray_GetRef(bytes, size + i) = IOSByteArray_Get(nil_chk(y), size - i - 1);
  }
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:bytes withInt:0 withInt:bytes->size_];
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:[self->digest_ getDigestSize]];
  [self->digest_ doFinalWithByteArray:rv withInt:0];
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementECVKOAgreement)
