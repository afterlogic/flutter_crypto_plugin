//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/ECCurve.java
//

#include "BigIntegers.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECEndomorphism.h"
#include "ECFieldElement.h"
#include "ECLookupTable.h"
#include "ECMultiplier.h"
#include "ECPoint.h"
#include "FiniteField.h"
#include "FiniteFields.h"
#include "GLVEndomorphism.h"
#include "GLVMultiplier.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "LongArray.h"
#include "Nat.h"
#include "PolynomialExtensionField.h"
#include "PreCompCallback.h"
#include "PreCompInfo.h"
#include "Tnaf.h"
#include "WNafL2RMultiplier.h"
#include "WTauNafMultiplier.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/Hashtable.h"
#include "java/util/Random.h"

__attribute__((unused)) static id<LibOrgBouncycastleMathEcECMultiplier> LibOrgBouncycastleMathEcECCurve_createDefaultMultiplier(LibOrgBouncycastleMathEcECCurve *self);

__attribute__((unused)) static LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECCurve_importPointWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *self, LibOrgBouncycastleMathEcECPoint *p);

@interface LibOrgBouncycastleMathEcECCurve_Config () {
 @public
  LibOrgBouncycastleMathEcECCurve *this$0_;
}

@end

@interface LibOrgBouncycastleMathEcECCurve_1 : NSObject < LibOrgBouncycastleMathEcECLookupTable > {
 @public
  LibOrgBouncycastleMathEcECCurve *this$0_;
  jint val$len_;
  jint val$FE_BYTES_;
  IOSByteArray *val$table_;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)outer$
                                                withInt:(jint)capture$0
                                                withInt:(jint)capture$1
                                          withByteArray:(IOSByteArray *)capture$2;

- (jint)getSize;

- (LibOrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcECCurve_1)

__attribute__((unused)) static void LibOrgBouncycastleMathEcECCurve_1_initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(LibOrgBouncycastleMathEcECCurve_1 *self, LibOrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2);

__attribute__((unused)) static LibOrgBouncycastleMathEcECCurve_1 *new_LibOrgBouncycastleMathEcECCurve_1_initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(LibOrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleMathEcECCurve_1 *create_LibOrgBouncycastleMathEcECCurve_1_initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(LibOrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2);

inline jint LibOrgBouncycastleMathEcECCurve_Fp_get_FP_DEFAULT_COORDS(void);
#define LibOrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcECCurve_Fp, FP_DEFAULT_COORDS, jint)

@interface LibOrgBouncycastleMathEcECCurve_AbstractF2m () {
 @public
  IOSObjectArray *si_;
}

+ (id<LibOrgBouncycastleMathFieldFiniteField>)buildFieldWithInt:(jint)m
                                                        withInt:(jint)k1
                                                        withInt:(jint)k2
                                                        withInt:(jint)k3;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleMathEcECCurve_AbstractF2m, si_, IOSObjectArray *)

__attribute__((unused)) static id<LibOrgBouncycastleMathFieldFiniteField> LibOrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(jint m, jint k1, jint k2, jint k3);

@interface LibOrgBouncycastleMathEcECCurve_F2m () {
 @public
  jint m_;
  jint k1_;
  jint k2_;
  jint k3_;
  LibOrgBouncycastleMathEcECPoint_F2m *infinity_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleMathEcECCurve_F2m, infinity_, LibOrgBouncycastleMathEcECPoint_F2m *)

inline jint LibOrgBouncycastleMathEcECCurve_F2m_get_F2M_DEFAULT_COORDS(void);
#define LibOrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleMathEcECCurve_F2m, F2M_DEFAULT_COORDS, jint)

@interface LibOrgBouncycastleMathEcECCurve_F2m_1 : NSObject < LibOrgBouncycastleMathEcECLookupTable > {
 @public
  LibOrgBouncycastleMathEcECCurve_F2m *this$0_;
  jint val$len_;
  jint val$FE_LONGS_;
  IOSLongArray *val$table_;
  IOSIntArray *val$ks_;
}

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve_F2m:(LibOrgBouncycastleMathEcECCurve_F2m *)outer$
                                                    withInt:(jint)capture$0
                                                    withInt:(jint)capture$1
                                              withLongArray:(IOSLongArray *)capture$2
                                               withIntArray:(IOSIntArray *)capture$3;

- (jint)getSize;

- (LibOrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleMathEcECCurve_F2m_1)

__attribute__((unused)) static void LibOrgBouncycastleMathEcECCurve_F2m_1_initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(LibOrgBouncycastleMathEcECCurve_F2m_1 *self, LibOrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3);

__attribute__((unused)) static LibOrgBouncycastleMathEcECCurve_F2m_1 *new_LibOrgBouncycastleMathEcECCurve_F2m_1_initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(LibOrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleMathEcECCurve_F2m_1 *create_LibOrgBouncycastleMathEcECCurve_F2m_1_initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(LibOrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3);

@implementation LibOrgBouncycastleMathEcECCurve

+ (jint)COORD_AFFINE {
  return LibOrgBouncycastleMathEcECCurve_COORD_AFFINE;
}

+ (jint)COORD_HOMOGENEOUS {
  return LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS;
}

+ (jint)COORD_JACOBIAN {
  return LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN;
}

+ (jint)COORD_JACOBIAN_CHUDNOVSKY {
  return LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY;
}

+ (jint)COORD_JACOBIAN_MODIFIED {
  return LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED;
}

+ (jint)COORD_LAMBDA_AFFINE {
  return LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE;
}

+ (jint)COORD_LAMBDA_PROJECTIVE {
  return LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE;
}

+ (jint)COORD_SKEWED {
  return LibOrgBouncycastleMathEcECCurve_COORD_SKEWED;
}

+ (IOSIntArray *)getAllCoordinateSystems {
  return LibOrgBouncycastleMathEcECCurve_getAllCoordinateSystems();
}

- (instancetype)initWithLibOrgBouncycastleMathFieldFiniteField:(id<LibOrgBouncycastleMathFieldFiniteField>)field {
  LibOrgBouncycastleMathEcECCurve_initWithLibOrgBouncycastleMathFieldFiniteField_(self, field);
  return self;
}

- (jint)getFieldSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECCurve_Config *)configure {
  @synchronized(self) {
    return new_LibOrgBouncycastleMathEcECCurve_Config_initWithLibOrgBouncycastleMathEcECCurve_withInt_withLibOrgBouncycastleMathEcEndoECEndomorphism_withLibOrgBouncycastleMathEcECMultiplier_(self, self->coord_, self->endomorphism_, self->multiplier_);
  }
}

- (LibOrgBouncycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                                  withJavaMathBigInteger:(JavaMathBigInteger *)y {
  LibOrgBouncycastleMathEcECPoint *p = [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y];
  if (![((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point coordinates");
  }
  return p;
}

- (LibOrgBouncycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                                  withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                             withBoolean:(jboolean)withCompression {
  LibOrgBouncycastleMathEcECPoint *p = [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y withBoolean:withCompression];
  if (![((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point coordinates");
  }
  return p;
}

- (LibOrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                                withJavaMathBigInteger:(JavaMathBigInteger *)y {
  return [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y withBoolean:false];
}

- (LibOrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                                withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                           withBoolean:(jboolean)withCompression {
  return [self createRawPointWithLibOrgBouncycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:x] withLibOrgBouncycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:y] withBoolean:withCompression];
}

- (LibOrgBouncycastleMathEcECCurve *)cloneCurve {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECPoint *)createRawPointWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                                                   withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                                                                  withBoolean:(jboolean)withCompression {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECPoint *)createRawPointWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                                                   withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                              withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                                  withBoolean:(jboolean)withCompression {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<LibOrgBouncycastleMathEcECMultiplier>)createDefaultMultiplier {
  return LibOrgBouncycastleMathEcECCurve_createDefaultMultiplier(self);
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  return coord == LibOrgBouncycastleMathEcECCurve_COORD_AFFINE;
}

- (id<LibOrgBouncycastleMathEcPreCompInfo>)getPreCompInfoWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point
                                                                                withNSString:(NSString *)name {
  [self checkPointWithLibOrgBouncycastleMathEcECPoint:point];
  JavaUtilHashtable *table;
  @synchronized(point) {
    table = ((LibOrgBouncycastleMathEcECPoint *) nil_chk(point))->preCompTable_;
  }
  if (nil == table) {
    return nil;
  }
  @synchronized(table) {
    return (id<LibOrgBouncycastleMathEcPreCompInfo>) cast_check([table getWithId:name], LibOrgBouncycastleMathEcPreCompInfo_class_());
  }
}

- (id<LibOrgBouncycastleMathEcPreCompInfo>)precomputeWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point
                                                                            withNSString:(NSString *)name
                                             withLibOrgBouncycastleMathEcPreCompCallback:(id<LibOrgBouncycastleMathEcPreCompCallback>)callback {
  [self checkPointWithLibOrgBouncycastleMathEcECPoint:point];
  JavaUtilHashtable *table;
  @synchronized(point) {
    table = ((LibOrgBouncycastleMathEcECPoint *) nil_chk(point))->preCompTable_;
    if (nil == table) {
      point->preCompTable_ = table = new_JavaUtilHashtable_initWithInt_(4);
    }
  }
  @synchronized(table) {
    id<LibOrgBouncycastleMathEcPreCompInfo> existing = (id<LibOrgBouncycastleMathEcPreCompInfo>) cast_check([table getWithId:name], LibOrgBouncycastleMathEcPreCompInfo_class_());
    id<LibOrgBouncycastleMathEcPreCompInfo> result = [((id<LibOrgBouncycastleMathEcPreCompCallback>) nil_chk(callback)) precomputeWithLibOrgBouncycastleMathEcPreCompInfo:existing];
    if (result != existing) {
      (void) [table putWithId:name withId:result];
    }
    return result;
  }
}

- (LibOrgBouncycastleMathEcECPoint *)importPointWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  return LibOrgBouncycastleMathEcECCurve_importPointWithLibOrgBouncycastleMathEcECPoint_(self, p);
}

- (void)normalizeAllWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points {
  [self normalizeAllWithLibOrgBouncycastleMathEcECPointArray:points withInt:0 withInt:((IOSObjectArray *) nil_chk(points))->size_ withLibOrgBouncycastleMathEcECFieldElement:nil];
}

- (void)normalizeAllWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                     withInt:(jint)off
                                                     withInt:(jint)len
                  withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)iso {
  [self checkPointsWithLibOrgBouncycastleMathEcECPointArray:points withInt:off withInt:len];
  switch ([self getCoordinateSystem]) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      if (iso != nil) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'iso' not valid for affine coordinates");
      }
      return;
    }
  }
  IOSObjectArray *zs = [IOSObjectArray newArrayWithLength:len type:LibOrgBouncycastleMathEcECFieldElement_class_()];
  IOSIntArray *indices = [IOSIntArray newArrayWithLength:len];
  jint count = 0;
  for (jint i = 0; i < len; ++i) {
    LibOrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(nil_chk(points), off + i);
    if (nil != p && (iso != nil || ![p isNormalized])) {
      (void) IOSObjectArray_Set(zs, count, [p getZCoordWithInt:0]);
      *IOSIntArray_GetRef(indices, count++) = off + i;
    }
  }
  if (count == 0) {
    return;
  }
  LibOrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithLibOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_(zs, 0, count, iso);
  for (jint j = 0; j < count; ++j) {
    jint index = IOSIntArray_Get(indices, j);
    (void) IOSObjectArray_Set(nil_chk(points), index, [((LibOrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, index))) normalizeWithLibOrgBouncycastleMathEcECFieldElement:IOSObjectArray_Get(zs, j)]);
  }
}

- (LibOrgBouncycastleMathEcECPoint *)getInfinity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<LibOrgBouncycastleMathFieldFiniteField>)getField {
  return field_;
}

- (LibOrgBouncycastleMathEcECFieldElement *)getA {
  return a_;
}

- (LibOrgBouncycastleMathEcECFieldElement *)getB {
  return b_;
}

- (JavaMathBigInteger *)getOrder {
  return order_;
}

- (JavaMathBigInteger *)getCofactor {
  return cofactor_;
}

- (jint)getCoordinateSystem {
  return coord_;
}

- (LibOrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                     withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<LibOrgBouncycastleMathEcEndoECEndomorphism>)getEndomorphism {
  return endomorphism_;
}

- (id<LibOrgBouncycastleMathEcECMultiplier>)getMultiplier {
  @synchronized(self) {
    if (self->multiplier_ == nil) {
      self->multiplier_ = [self createDefaultMultiplier];
    }
    return self->multiplier_;
  }
}

- (LibOrgBouncycastleMathEcECPoint *)decodePointWithByteArray:(IOSByteArray *)encoded {
  LibOrgBouncycastleMathEcECPoint *p = nil;
  jint expectedLength = ([self getFieldSize] + 7) / 8;
  jbyte type = IOSByteArray_Get(nil_chk(encoded), 0);
  switch (type) {
    case (jint) 0x00:
    {
      if (encoded->size_ != 1) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for infinity encoding");
      }
      p = [self getInfinity];
      break;
    }
    case (jint) 0x02:
    case (jint) 0x03:
    {
      if (encoded->size_ != (expectedLength + 1)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for compressed encoding");
      }
      jint yTilde = type & 1;
      JavaMathBigInteger *X = LibOrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      p = [self decompressPointWithInt:yTilde withJavaMathBigInteger:X];
      if (![((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) implIsValidWithBoolean:true withBoolean:true]) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point");
      }
      break;
    }
    case (jint) 0x04:
    {
      if (encoded->size_ != (2 * expectedLength + 1)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for uncompressed encoding");
      }
      JavaMathBigInteger *X = LibOrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      JavaMathBigInteger *Y = LibOrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1 + expectedLength, expectedLength);
      p = [self validatePointWithJavaMathBigInteger:X withJavaMathBigInteger:Y];
      break;
    }
    case (jint) 0x06:
    case (jint) 0x07:
    {
      if (encoded->size_ != (2 * expectedLength + 1)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for hybrid encoding");
      }
      JavaMathBigInteger *X = LibOrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      JavaMathBigInteger *Y = LibOrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1 + expectedLength, expectedLength);
      if ([((JavaMathBigInteger *) nil_chk(Y)) testBitWithInt:0] != (type == (jint) 0x07)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Inconsistent Y coordinate in hybrid encoding");
      }
      p = [self validatePointWithJavaMathBigInteger:X withJavaMathBigInteger:Y];
      break;
    }
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid point encoding 0x", JavaLangInteger_toStringWithInt_withInt_(type, 16)));
  }
  if (type != (jint) 0x00 && [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) isInfinity]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid infinity encoding");
  }
  return p;
}

- (id<LibOrgBouncycastleMathEcECLookupTable>)createCacheSafeLookupTableWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                                                                        withInt:(jint)off
                                                                                                        withInt:(jint)len {
  jint FE_BYTES = JreURShift32(([self getFieldSize] + 7), 3);
  IOSByteArray *table = [IOSByteArray newArrayWithLength:len * FE_BYTES * 2];
  {
    jint pos = 0;
    for (jint i = 0; i < len; ++i) {
      LibOrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(nil_chk(points), off + i);
      IOSByteArray *px = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getRawXCoord])) toBigInteger])) toByteArray];
      IOSByteArray *py = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([p getRawYCoord])) toBigInteger])) toByteArray];
      jint pxStart = ((IOSByteArray *) nil_chk(px))->size_ > FE_BYTES ? 1 : 0;
      jint pxLen = px->size_ - pxStart;
      jint pyStart = ((IOSByteArray *) nil_chk(py))->size_ > FE_BYTES ? 1 : 0;
      jint pyLen = py->size_ - pyStart;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(px, pxStart, table, pos + FE_BYTES - pxLen, pxLen);
      pos += FE_BYTES;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(py, pyStart, table, pos + FE_BYTES - pyLen, pyLen);
      pos += FE_BYTES;
    }
  }
  return new_LibOrgBouncycastleMathEcECCurve_1_initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(self, len, FE_BYTES, table);
}

- (void)checkPointWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point {
  if (nil == point || (self != [point getCurve])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'point' must be non-null and on this curve");
  }
}

- (void)checkPointsWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points {
  [self checkPointsWithLibOrgBouncycastleMathEcECPointArray:points withInt:0 withInt:((IOSObjectArray *) nil_chk(points))->size_];
}

- (void)checkPointsWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                    withInt:(jint)off
                                                    withInt:(jint)len {
  if (points == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'points' cannot be null");
  }
  if (off < 0 || len < 0 || (off > (points->size_ - len))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid range specified for 'points'");
  }
  for (jint i = 0; i < len; ++i) {
    LibOrgBouncycastleMathEcECPoint *point = IOSObjectArray_Get(points, off + i);
    if (nil != point && self != [point getCurve]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'points' entries must be null or on this curve");
    }
  }
}

- (jboolean)equalsWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)other {
  return self == other || (nil != other && [((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) isEqual:[other getField]] && [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self getA])) toBigInteger])) isEqual:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([other getA])) toBigInteger]] && [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self getB])) toBigInteger])) isEqual:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([other getB])) toBigInteger]]);
}

- (jboolean)isEqual:(id)obj {
  return self == obj || ([obj isKindOfClass:[LibOrgBouncycastleMathEcECCurve class]] && [self equalsWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *) cast_chk(obj, [LibOrgBouncycastleMathEcECCurve class])]);
}

- (NSUInteger)hash {
  return ((jint) [((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) hash]) ^ LibOrgBouncycastleUtilIntegers_rotateLeftWithInt_withInt_(((jint) [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self getA])) toBigInteger])) hash]), 8) ^ LibOrgBouncycastleUtilIntegers_rotateLeftWithInt_withInt_(((jint) [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self getB])) toBigInteger])) hash]), 16);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 3, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve_Config;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x404, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x404, 8, 10, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcPreCompInfo;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcPreCompInfo;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathFieldFiniteField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x404, 22, 23, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcEndoECEndomorphism;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECMultiplier;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECLookupTable;", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 28, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 29, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 29, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 33, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAllCoordinateSystems);
  methods[1].selector = @selector(initWithLibOrgBouncycastleMathFieldFiniteField:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[4].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[5].selector = @selector(configure);
  methods[6].selector = @selector(validatePointWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[7].selector = @selector(validatePointWithJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[8].selector = @selector(createPointWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[9].selector = @selector(createPointWithJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[10].selector = @selector(cloneCurve);
  methods[11].selector = @selector(createRawPointWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withBoolean:);
  methods[12].selector = @selector(createRawPointWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElementArray:withBoolean:);
  methods[13].selector = @selector(createDefaultMultiplier);
  methods[14].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[15].selector = @selector(getPreCompInfoWithLibOrgBouncycastleMathEcECPoint:withNSString:);
  methods[16].selector = @selector(precomputeWithLibOrgBouncycastleMathEcECPoint:withNSString:withLibOrgBouncycastleMathEcPreCompCallback:);
  methods[17].selector = @selector(importPointWithLibOrgBouncycastleMathEcECPoint:);
  methods[18].selector = @selector(normalizeAllWithLibOrgBouncycastleMathEcECPointArray:);
  methods[19].selector = @selector(normalizeAllWithLibOrgBouncycastleMathEcECPointArray:withInt:withInt:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[20].selector = @selector(getInfinity);
  methods[21].selector = @selector(getField);
  methods[22].selector = @selector(getA);
  methods[23].selector = @selector(getB);
  methods[24].selector = @selector(getOrder);
  methods[25].selector = @selector(getCofactor);
  methods[26].selector = @selector(getCoordinateSystem);
  methods[27].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  methods[28].selector = @selector(getEndomorphism);
  methods[29].selector = @selector(getMultiplier);
  methods[30].selector = @selector(decodePointWithByteArray:);
  methods[31].selector = @selector(createCacheSafeLookupTableWithLibOrgBouncycastleMathEcECPointArray:withInt:withInt:);
  methods[32].selector = @selector(checkPointWithLibOrgBouncycastleMathEcECPoint:);
  methods[33].selector = @selector(checkPointsWithLibOrgBouncycastleMathEcECPointArray:);
  methods[34].selector = @selector(checkPointsWithLibOrgBouncycastleMathEcECPointArray:withInt:withInt:);
  methods[35].selector = @selector(equalsWithLibOrgBouncycastleMathEcECCurve:);
  methods[36].selector = @selector(isEqual:);
  methods[37].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COORD_AFFINE", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_COORD_AFFINE, 0x19, -1, -1, -1, -1 },
    { "COORD_HOMOGENEOUS", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN_CHUDNOVSKY", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN_MODIFIED", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED, 0x19, -1, -1, -1, -1 },
    { "COORD_LAMBDA_AFFINE", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE, 0x19, -1, -1, -1, -1 },
    { "COORD_LAMBDA_PROJECTIVE", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE, 0x19, -1, -1, -1, -1 },
    { "COORD_SKEWED", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_COORD_SKEWED, 0x19, -1, -1, -1, -1 },
    { "field_", "LLibOrgBouncycastleMathFieldFiniteField;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "a_", "LLibOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "b_", "LLibOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "order_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cofactor_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "coord_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "endomorphism_", "LLibOrgBouncycastleMathEcEndoECEndomorphism;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "multiplier_", "LLibOrgBouncycastleMathEcECMultiplier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleMathFieldFiniteField;", "fromBigInteger", "LJavaMathBigInteger;", "isValidFieldElement", "validatePoint", "LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;Z", "createPoint", "createRawPoint", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;Z", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;[LLibOrgBouncycastleMathEcECFieldElement;Z", "supportsCoordinateSystem", "I", "getPreCompInfo", "LLibOrgBouncycastleMathEcECPoint;LNSString;", "precompute", "LLibOrgBouncycastleMathEcECPoint;LNSString;LLibOrgBouncycastleMathEcPreCompCallback;", "importPoint", "LLibOrgBouncycastleMathEcECPoint;", "normalizeAll", "[LLibOrgBouncycastleMathEcECPoint;", "[LLibOrgBouncycastleMathEcECPoint;IILLibOrgBouncycastleMathEcECFieldElement;", "decompressPoint", "ILJavaMathBigInteger;", "decodePoint", "[B", "createCacheSafeLookupTable", "[LLibOrgBouncycastleMathEcECPoint;II", "checkPoint", "checkPoints", "equals", "LLibOrgBouncycastleMathEcECCurve;", "LNSObject;", "hashCode", "LLibOrgBouncycastleMathEcECCurve_Config;LLibOrgBouncycastleMathEcECCurve_AbstractFp;LLibOrgBouncycastleMathEcECCurve_Fp;LLibOrgBouncycastleMathEcECCurve_AbstractF2m;LLibOrgBouncycastleMathEcECCurve_F2m;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECCurve = { "ECCurve", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x401, 38, 16, -1, 34, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECCurve;
}

@end

IOSIntArray *LibOrgBouncycastleMathEcECCurve_getAllCoordinateSystems() {
  LibOrgBouncycastleMathEcECCurve_initialize();
  return [IOSIntArray newArrayWithInts:(jint[]){ LibOrgBouncycastleMathEcECCurve_COORD_AFFINE, LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS, LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN, LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY, LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED, LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE, LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE, LibOrgBouncycastleMathEcECCurve_COORD_SKEWED } count:8];
}

void LibOrgBouncycastleMathEcECCurve_initWithLibOrgBouncycastleMathFieldFiniteField_(LibOrgBouncycastleMathEcECCurve *self, id<LibOrgBouncycastleMathFieldFiniteField> field) {
  NSObject_init(self);
  self->coord_ = LibOrgBouncycastleMathEcECCurve_COORD_AFFINE;
  self->endomorphism_ = nil;
  self->multiplier_ = nil;
  self->field_ = field;
}

id<LibOrgBouncycastleMathEcECMultiplier> LibOrgBouncycastleMathEcECCurve_createDefaultMultiplier(LibOrgBouncycastleMathEcECCurve *self) {
  if ([LibOrgBouncycastleMathEcEndoGLVEndomorphism_class_() isInstance:self->endomorphism_]) {
    return new_LibOrgBouncycastleMathEcGLVMultiplier_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcEndoGLVEndomorphism_(self, (id<LibOrgBouncycastleMathEcEndoGLVEndomorphism>) cast_check(self->endomorphism_, LibOrgBouncycastleMathEcEndoGLVEndomorphism_class_()));
  }
  return new_LibOrgBouncycastleMathEcWNafL2RMultiplier_init();
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleMathEcECCurve_importPointWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECCurve *self, LibOrgBouncycastleMathEcECPoint *p) {
  if (self == [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve]) {
    return p;
  }
  if ([p isInfinity]) {
    return [self getInfinity];
  }
  p = [p normalize];
  return [self createPointWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getXCoord])) toBigInteger] withJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([p getYCoord])) toBigInteger] withBoolean:p->withCompression_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECCurve)

@implementation LibOrgBouncycastleMathEcECCurve_Config

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)outer$
                                                withInt:(jint)coord
         withLibOrgBouncycastleMathEcEndoECEndomorphism:(id<LibOrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
               withLibOrgBouncycastleMathEcECMultiplier:(id<LibOrgBouncycastleMathEcECMultiplier>)multiplier {
  LibOrgBouncycastleMathEcECCurve_Config_initWithLibOrgBouncycastleMathEcECCurve_withInt_withLibOrgBouncycastleMathEcEndoECEndomorphism_withLibOrgBouncycastleMathEcECMultiplier_(self, outer$, coord, endomorphism, multiplier);
  return self;
}

- (LibOrgBouncycastleMathEcECCurve_Config *)setCoordinateSystemWithInt:(jint)coord {
  self->coord_ = coord;
  return self;
}

- (LibOrgBouncycastleMathEcECCurve_Config *)setEndomorphismWithLibOrgBouncycastleMathEcEndoECEndomorphism:(id<LibOrgBouncycastleMathEcEndoECEndomorphism>)endomorphism {
  self->endomorphism_ = endomorphism;
  return self;
}

- (LibOrgBouncycastleMathEcECCurve_Config *)setMultiplierWithLibOrgBouncycastleMathEcECMultiplier:(id<LibOrgBouncycastleMathEcECMultiplier>)multiplier {
  self->multiplier_ = multiplier;
  return self;
}

- (LibOrgBouncycastleMathEcECCurve *)create {
  if (![this$0_ supportsCoordinateSystemWithInt:coord_]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
  }
  LibOrgBouncycastleMathEcECCurve *c = [this$0_ cloneCurve];
  if (c == this$0_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"implementation returned current curve");
  }
  @synchronized(c) {
    ((LibOrgBouncycastleMathEcECCurve *) nil_chk(c))->coord_ = coord_;
    c->endomorphism_ = endomorphism_;
    c->multiplier_ = multiplier_;
  }
  return c;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve_Config;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve_Config;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve_Config;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withInt:withLibOrgBouncycastleMathEcEndoECEndomorphism:withLibOrgBouncycastleMathEcECMultiplier:);
  methods[1].selector = @selector(setCoordinateSystemWithInt:);
  methods[2].selector = @selector(setEndomorphismWithLibOrgBouncycastleMathEcEndoECEndomorphism:);
  methods[3].selector = @selector(setMultiplierWithLibOrgBouncycastleMathEcECMultiplier:);
  methods[4].selector = @selector(create);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "coord_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "endomorphism_", "LLibOrgBouncycastleMathEcEndoECEndomorphism;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "multiplier_", "LLibOrgBouncycastleMathEcECMultiplier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILLibOrgBouncycastleMathEcEndoECEndomorphism;LLibOrgBouncycastleMathEcECMultiplier;", "setCoordinateSystem", "I", "setEndomorphism", "LLibOrgBouncycastleMathEcEndoECEndomorphism;", "setMultiplier", "LLibOrgBouncycastleMathEcECMultiplier;", "LLibOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECCurve_Config = { "Config", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x1, 5, 4, 7, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECCurve_Config;
}

@end

void LibOrgBouncycastleMathEcECCurve_Config_initWithLibOrgBouncycastleMathEcECCurve_withInt_withLibOrgBouncycastleMathEcEndoECEndomorphism_withLibOrgBouncycastleMathEcECMultiplier_(LibOrgBouncycastleMathEcECCurve_Config *self, LibOrgBouncycastleMathEcECCurve *outer$, jint coord, id<LibOrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<LibOrgBouncycastleMathEcECMultiplier> multiplier) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->coord_ = coord;
  self->endomorphism_ = endomorphism;
  self->multiplier_ = multiplier;
}

LibOrgBouncycastleMathEcECCurve_Config *new_LibOrgBouncycastleMathEcECCurve_Config_initWithLibOrgBouncycastleMathEcECCurve_withInt_withLibOrgBouncycastleMathEcEndoECEndomorphism_withLibOrgBouncycastleMathEcECMultiplier_(LibOrgBouncycastleMathEcECCurve *outer$, jint coord, id<LibOrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<LibOrgBouncycastleMathEcECMultiplier> multiplier) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_Config, initWithLibOrgBouncycastleMathEcECCurve_withInt_withLibOrgBouncycastleMathEcEndoECEndomorphism_withLibOrgBouncycastleMathEcECMultiplier_, outer$, coord, endomorphism, multiplier)
}

LibOrgBouncycastleMathEcECCurve_Config *create_LibOrgBouncycastleMathEcECCurve_Config_initWithLibOrgBouncycastleMathEcECCurve_withInt_withLibOrgBouncycastleMathEcEndoECEndomorphism_withLibOrgBouncycastleMathEcECMultiplier_(LibOrgBouncycastleMathEcECCurve *outer$, jint coord, id<LibOrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<LibOrgBouncycastleMathEcECMultiplier> multiplier) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_Config, initWithLibOrgBouncycastleMathEcECCurve_withInt_withLibOrgBouncycastleMathEcEndoECEndomorphism_withLibOrgBouncycastleMathEcECMultiplier_, outer$, coord, endomorphism, multiplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECCurve_Config)

@implementation LibOrgBouncycastleMathEcECCurve_1

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)outer$
                                                withInt:(jint)capture$0
                                                withInt:(jint)capture$1
                                          withByteArray:(IOSByteArray *)capture$2 {
  LibOrgBouncycastleMathEcECCurve_1_initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (jint)getSize {
  return val$len_;
}

- (LibOrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index {
  IOSByteArray *x = [IOSByteArray newArrayWithLength:val$FE_BYTES_];
  IOSByteArray *y = [IOSByteArray newArrayWithLength:val$FE_BYTES_];
  jint pos = 0;
  for (jint i = 0; i < val$len_; ++i) {
    jint MASK = JreRShift32(((i ^ index) - 1), 31);
    for (jint j = 0; j < val$FE_BYTES_; ++j) {
      *IOSByteArray_GetRef(x, j) ^= IOSByteArray_Get(nil_chk(val$table_), pos + j) & MASK;
      *IOSByteArray_GetRef(y, j) ^= IOSByteArray_Get(val$table_, pos + val$FE_BYTES_ + j) & MASK;
    }
    pos += (val$FE_BYTES_ * 2);
  }
  return [this$0_ createRawPointWithLibOrgBouncycastleMathEcECFieldElement:[this$0_ fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withByteArray_(1, x)] withLibOrgBouncycastleMathEcECFieldElement:[this$0_ fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withByteArray_(1, y)] withBoolean:false];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve:withInt:withInt:withByteArray:);
  methods[1].selector = @selector(getSize);
  methods[2].selector = @selector(lookupWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$len_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$FE_BYTES_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$table_", "[B", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "lookup", "I", "LLibOrgBouncycastleMathEcECCurve;", "createCacheSafeLookupTableWithLibOrgBouncycastleMathEcECPointArray:withInt:withInt:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECCurve_1 = { "", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8010, 3, 4, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleMathEcECCurve_1;
}

@end

void LibOrgBouncycastleMathEcECCurve_1_initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(LibOrgBouncycastleMathEcECCurve_1 *self, LibOrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2) {
  self->this$0_ = outer$;
  self->val$len_ = capture$0;
  self->val$FE_BYTES_ = capture$1;
  self->val$table_ = capture$2;
  NSObject_init(self);
}

LibOrgBouncycastleMathEcECCurve_1 *new_LibOrgBouncycastleMathEcECCurve_1_initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(LibOrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_1, initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_, outer$, capture$0, capture$1, capture$2)
}

LibOrgBouncycastleMathEcECCurve_1 *create_LibOrgBouncycastleMathEcECCurve_1_initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(LibOrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_1, initWithLibOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_, outer$, capture$0, capture$1, capture$2)
}

@implementation LibOrgBouncycastleMathEcECCurve_AbstractFp

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q {
  LibOrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self, q);
  return self;
}

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return x != nil && [x signum] >= 0 && [x compareToWithId:[((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) getCharacteristic]] < 0;
}

- (LibOrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                     withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  LibOrgBouncycastleMathEcECFieldElement *x = [self fromBigIntegerWithJavaMathBigInteger:X1];
  LibOrgBouncycastleMathEcECFieldElement *rhs = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(x)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:self->a_])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:x])) addWithLibOrgBouncycastleMathEcECFieldElement:self->b_];
  LibOrgBouncycastleMathEcECFieldElement *y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(rhs)) sqrt];
  if (y == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point compression");
  }
  if ([y testBitZero] != (yTilde == 1)) {
    y = [y negate];
  }
  return [self createRawPointWithLibOrgBouncycastleMathEcECFieldElement:x withLibOrgBouncycastleMathEcECFieldElement:y withBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:);
  methods[1].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[2].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaMathBigInteger;", "isValidFieldElement", "decompressPoint", "ILJavaMathBigInteger;", "LLibOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECCurve_AbstractFp = { "AbstractFp", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 3, 0, 4, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECCurve_AbstractFp;
}

@end

void LibOrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_AbstractFp *self, JavaMathBigInteger *q) {
  LibOrgBouncycastleMathEcECCurve_initWithLibOrgBouncycastleMathFieldFiniteField_(self, LibOrgBouncycastleMathFieldFiniteFields_getPrimeFieldWithJavaMathBigInteger_(q));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECCurve_AbstractFp)

@implementation LibOrgBouncycastleMathEcECCurve_Fp

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b {
  LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, a, b);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, a, b, order, cofactor);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)a
withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)b {
  LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(self, q, r, a, b);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)a
withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, r, a, b, order, cofactor);
  return self;
}

- (LibOrgBouncycastleMathEcECCurve *)cloneCurve {
  return new_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self->q_, self->r_, self->a_, self->b_, self->order_, self->cofactor_);
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    return true;
    default:
    return false;
  }
}

- (JavaMathBigInteger *)getQ {
  return q_;
}

- (jint)getFieldSize {
  return [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
}

- (LibOrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return new_LibOrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self->q_, self->r_, x);
}

- (LibOrgBouncycastleMathEcECPoint *)createRawPointWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                                                   withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                                                                  withBoolean:(jboolean)withCompression {
  return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(self, x, y, withCompression);
}

- (LibOrgBouncycastleMathEcECPoint *)createRawPointWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                                                   withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                              withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                                  withBoolean:(jboolean)withCompression {
  return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(self, x, y, zs, withCompression);
}

- (LibOrgBouncycastleMathEcECPoint *)importPointWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  if (self != [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve] && [self getCoordinateSystem] == LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN && ![p isInfinity]) {
    switch ([((LibOrgBouncycastleMathEcECCurve *) nil_chk([p getCurve])) getCoordinateSystem]) {
      case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
      case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
      case LibOrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
      return new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(self, [self fromBigIntegerWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(p->x_)) toBigInteger]], [self fromBigIntegerWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(p->y_)) toBigInteger]], [IOSObjectArray newArrayWithObjects:(id[]){ [self fromBigIntegerWithJavaMathBigInteger:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(nil_chk(p->zs_), 0))) toBigInteger]] } count:1 type:LibOrgBouncycastleMathEcECFieldElement_class_()], p->withCompression_);
      default:
      break;
    }
  }
  return LibOrgBouncycastleMathEcECCurve_importPointWithLibOrgBouncycastleMathEcECPoint_(self, p);
}

- (LibOrgBouncycastleMathEcECPoint *)getInfinity {
  return infinity_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 8, 10, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[3].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(cloneCurve);
  methods[5].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[6].selector = @selector(getQ);
  methods[7].selector = @selector(getFieldSize);
  methods[8].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[9].selector = @selector(createRawPointWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withBoolean:);
  methods[10].selector = @selector(createRawPointWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElementArray:withBoolean:);
  methods[11].selector = @selector(importPointWithLibOrgBouncycastleMathEcECPoint:);
  methods[12].selector = @selector(getInfinity);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FP_DEFAULT_COORDS", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS, 0x1a, -1, -1, -1, -1 },
    { "q_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "r_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "infinity_", "LLibOrgBouncycastleMathEcECPoint_Fp;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;", "LJavaMathBigInteger;LJavaMathBigInteger;LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;LJavaMathBigInteger;LJavaMathBigInteger;", "supportsCoordinateSystem", "I", "fromBigInteger", "LJavaMathBigInteger;", "createRawPoint", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;Z", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;[LLibOrgBouncycastleMathEcECFieldElement;Z", "importPoint", "LLibOrgBouncycastleMathEcECPoint;", "LLibOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECCurve_Fp = { "Fp", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 13, 4, 13, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECCurve_Fp;
}

@end

void LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, a, b, nil, nil);
}

LibOrgBouncycastleMathEcECCurve_Fp *new_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b)
}

LibOrgBouncycastleMathEcECCurve_Fp *create_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b)
}

void LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  LibOrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self, q);
  self->q_ = q;
  self->r_ = LibOrgBouncycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(q);
  self->infinity_ = new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(self, nil, nil, false);
  self->a_ = [self fromBigIntegerWithJavaMathBigInteger:a];
  self->b_ = [self fromBigIntegerWithJavaMathBigInteger:b];
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->coord_ = LibOrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS;
}

LibOrgBouncycastleMathEcECCurve_Fp *new_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b, order, cofactor)
}

LibOrgBouncycastleMathEcECCurve_Fp *create_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b, order, cofactor)
}

void LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b) {
  LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, r, a, b, nil, nil);
}

LibOrgBouncycastleMathEcECCurve_Fp *new_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(JavaMathBigInteger *q, JavaMathBigInteger *r, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_, q, r, a, b)
}

LibOrgBouncycastleMathEcECCurve_Fp *create_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_(JavaMathBigInteger *q, JavaMathBigInteger *r, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_, q, r, a, b)
}

void LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  LibOrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self, q);
  self->q_ = q;
  self->r_ = r;
  self->infinity_ = new_LibOrgBouncycastleMathEcECPoint_Fp_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(self, nil, nil, false);
  self->a_ = a;
  self->b_ = b;
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->coord_ = LibOrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS;
}

LibOrgBouncycastleMathEcECCurve_Fp *new_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, a, b, order, cofactor)
}

LibOrgBouncycastleMathEcECCurve_Fp *create_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, a, b, order, cofactor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECCurve_Fp)

@implementation LibOrgBouncycastleMathEcECCurve_AbstractF2m

+ (JavaMathBigInteger *)inverseWithInt:(jint)m
                          withIntArray:(IOSIntArray *)ks
                withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return LibOrgBouncycastleMathEcECCurve_AbstractF2m_inverseWithInt_withIntArray_withJavaMathBigInteger_(m, ks, x);
}

+ (id<LibOrgBouncycastleMathFieldFiniteField>)buildFieldWithInt:(jint)m
                                                        withInt:(jint)k1
                                                        withInt:(jint)k2
                                                        withInt:(jint)k3 {
  return LibOrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(m, k1, k2, k3);
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3 {
  LibOrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self, m, k1, k2, k3);
  return self;
}

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return x != nil && [x signum] >= 0 && [x bitLength] <= [self getFieldSize];
}

- (LibOrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                                withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                           withBoolean:(jboolean)withCompression {
  LibOrgBouncycastleMathEcECFieldElement *X = [self fromBigIntegerWithJavaMathBigInteger:x];
  LibOrgBouncycastleMathEcECFieldElement *Y = [self fromBigIntegerWithJavaMathBigInteger:y];
  jint coord = [self getCoordinateSystem];
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
        if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) square])) isEqual:[self getB]]) {
          @throw new_JavaLangIllegalArgumentException_init();
        }
      }
      else {
        Y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) divideWithLibOrgBouncycastleMathEcECFieldElement:X])) addWithLibOrgBouncycastleMathEcECFieldElement:X];
      }
      break;
    }
    default:
    {
      break;
    }
  }
  return [self createRawPointWithLibOrgBouncycastleMathEcECFieldElement:X withLibOrgBouncycastleMathEcECFieldElement:Y withBoolean:withCompression];
}

- (LibOrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                     withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  LibOrgBouncycastleMathEcECFieldElement *x = [self fromBigIntegerWithJavaMathBigInteger:X1];
  LibOrgBouncycastleMathEcECFieldElement *y = nil;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(x)) isZero]) {
    y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([self getB])) sqrt];
  }
  else {
    LibOrgBouncycastleMathEcECFieldElement *beta = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([x square])) invert])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[self getB]])) addWithLibOrgBouncycastleMathEcECFieldElement:[self getA]])) addWithLibOrgBouncycastleMathEcECFieldElement:x];
    LibOrgBouncycastleMathEcECFieldElement *z = [self solveQuadraticEquationWithLibOrgBouncycastleMathEcECFieldElement:beta];
    if (z != nil) {
      if ([z testBitZero] != (yTilde == 1)) {
        z = [z addOne];
      }
      switch ([self getCoordinateSystem]) {
        case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
        case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
        {
          y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(z)) addWithLibOrgBouncycastleMathEcECFieldElement:x];
          break;
        }
        default:
        {
          y = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(z)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:x];
          break;
        }
      }
    }
  }
  if (y == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point compression");
  }
  return [self createRawPointWithLibOrgBouncycastleMathEcECFieldElement:x withLibOrgBouncycastleMathEcECFieldElement:y withBoolean:true];
}

- (LibOrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)beta {
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) isZero]) {
    return beta;
  }
  LibOrgBouncycastleMathEcECFieldElement *gamma;
  LibOrgBouncycastleMathEcECFieldElement *z;
  LibOrgBouncycastleMathEcECFieldElement *zeroElement = [self fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)];
  jint m = [self getFieldSize];
  JavaUtilRandom *rand = new_JavaUtilRandom_init();
  do {
    LibOrgBouncycastleMathEcECFieldElement *t = [self fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(m, rand)];
    z = zeroElement;
    LibOrgBouncycastleMathEcECFieldElement *w = beta;
    for (jint i = 1; i < m; i++) {
      LibOrgBouncycastleMathEcECFieldElement *w2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w)) square];
      z = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:t]];
      w = [w2 addWithLibOrgBouncycastleMathEcECFieldElement:beta];
    }
    if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w)) isZero]) {
      return nil;
    }
    gamma = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:z];
  }
  while ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) isZero]);
  return z;
}

- (IOSObjectArray *)getSi {
  @synchronized(self) {
    if (si_ == nil) {
      si_ = LibOrgBouncycastleMathEcTnaf_getSiWithLibOrgBouncycastleMathEcECCurve_AbstractF2m_(self);
    }
    return si_;
  }
}

- (jboolean)isKoblitz {
  return self->order_ != nil && self->cofactor_ != nil && [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(self->b_)) isOne] && ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(self->a_)) isZero] || [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(self->a_)) isOne]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathFieldFiniteField;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(inverseWithInt:withIntArray:withJavaMathBigInteger:);
  methods[1].selector = @selector(buildFieldWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[4].selector = @selector(createPointWithJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[5].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  methods[6].selector = @selector(solveQuadraticEquationWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[7].selector = @selector(getSi);
  methods[8].selector = @selector(isKoblitz);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "si_", "[LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "inverse", "I[ILJavaMathBigInteger;", "buildField", "IIII", "isValidFieldElement", "LJavaMathBigInteger;", "createPoint", "LJavaMathBigInteger;LJavaMathBigInteger;Z", "decompressPoint", "ILJavaMathBigInteger;", "solveQuadraticEquation", "LLibOrgBouncycastleMathEcECFieldElement;", "LLibOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECCurve_AbstractF2m = { "AbstractF2m", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x409, 9, 1, 12, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECCurve_AbstractF2m;
}

@end

JavaMathBigInteger *LibOrgBouncycastleMathEcECCurve_AbstractF2m_inverseWithInt_withIntArray_withJavaMathBigInteger_(jint m, IOSIntArray *ks, JavaMathBigInteger *x) {
  LibOrgBouncycastleMathEcECCurve_AbstractF2m_initialize();
  return [((LibOrgBouncycastleMathEcLongArray *) nil_chk([new_LibOrgBouncycastleMathEcLongArray_initWithJavaMathBigInteger_(x) modInverseWithInt:m withIntArray:ks])) toBigInteger];
}

id<LibOrgBouncycastleMathFieldFiniteField> LibOrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(jint m, jint k1, jint k2, jint k3) {
  LibOrgBouncycastleMathEcECCurve_AbstractF2m_initialize();
  if (k1 == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k1 must be > 0");
  }
  if (k2 == 0) {
    if (k3 != 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k3 must be 0 if k2 == 0");
    }
    return LibOrgBouncycastleMathFieldFiniteFields_getBinaryExtensionFieldWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ 0, k1, m } count:3]);
  }
  if (k2 <= k1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k2 must be > k1");
  }
  if (k3 <= k2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k3 must be > k2");
  }
  return LibOrgBouncycastleMathFieldFiniteFields_getBinaryExtensionFieldWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ 0, k1, k2, k3, m } count:5]);
}

void LibOrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(LibOrgBouncycastleMathEcECCurve_AbstractF2m *self, jint m, jint k1, jint k2, jint k3) {
  LibOrgBouncycastleMathEcECCurve_initWithLibOrgBouncycastleMathFieldFiniteField_(self, LibOrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(m, k1, k2, k3));
  self->si_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECCurve_AbstractF2m)

@implementation LibOrgBouncycastleMathEcECCurve_F2m

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, a, b);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, a, b, order, cofactor);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b, order, cofactor);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)a
withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b, order, cofactor);
  return self;
}

- (LibOrgBouncycastleMathEcECCurve *)cloneCurve {
  return new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self->m_, self->k1_, self->k2_, self->k3_, self->a_, self->b_, self->order_, self->cofactor_);
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  switch (coord) {
    case LibOrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case LibOrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case LibOrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    return true;
    default:
    return false;
  }
}

- (id<LibOrgBouncycastleMathEcECMultiplier>)createDefaultMultiplier {
  if ([self isKoblitz]) {
    return new_LibOrgBouncycastleMathEcWTauNafMultiplier_init();
  }
  return LibOrgBouncycastleMathEcECCurve_createDefaultMultiplier(self);
}

- (jint)getFieldSize {
  return m_;
}

- (LibOrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return new_LibOrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(self->m_, self->k1_, self->k2_, self->k3_, x);
}

- (LibOrgBouncycastleMathEcECPoint *)createRawPointWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                                                   withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                                                                  withBoolean:(jboolean)withCompression {
  return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(self, x, y, withCompression);
}

- (LibOrgBouncycastleMathEcECPoint *)createRawPointWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                                                   withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)y
                                              withLibOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                                  withBoolean:(jboolean)withCompression {
  return new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElementArray_withBoolean_(self, x, y, zs, withCompression);
}

- (LibOrgBouncycastleMathEcECPoint *)getInfinity {
  return infinity_;
}

- (jint)getM {
  return m_;
}

- (jboolean)isTrinomial {
  return k2_ == 0 && k3_ == 0;
}

- (jint)getK1 {
  return k1_;
}

- (jint)getK2 {
  return k2_;
}

- (jint)getK3 {
  return k3_;
}

- (id<LibOrgBouncycastleMathEcECLookupTable>)createCacheSafeLookupTableWithLibOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                                                                        withInt:(jint)off
                                                                                                        withInt:(jint)len {
  jint FE_LONGS = JreURShift32((m_ + 63), 6);
  IOSIntArray *ks = [self isTrinomial] ? [IOSIntArray newArrayWithInts:(jint[]){ k1_ } count:1] : [IOSIntArray newArrayWithInts:(jint[]){ k1_, k2_, k3_ } count:3];
  IOSLongArray *table = [IOSLongArray newArrayWithLength:len * FE_LONGS * 2];
  {
    jint pos = 0;
    for (jint i = 0; i < len; ++i) {
      LibOrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(nil_chk(points), off + i);
      [((LibOrgBouncycastleMathEcLongArray *) nil_chk(((LibOrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((LibOrgBouncycastleMathEcECFieldElement_F2m *) cast_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getRawXCoord], [LibOrgBouncycastleMathEcECFieldElement_F2m class]))))->x_)) copyToWithLongArray:table withInt:pos];
      pos += FE_LONGS;
      [((LibOrgBouncycastleMathEcLongArray *) nil_chk(((LibOrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((LibOrgBouncycastleMathEcECFieldElement_F2m *) cast_chk([p getRawYCoord], [LibOrgBouncycastleMathEcECFieldElement_F2m class]))))->x_)) copyToWithLongArray:table withInt:pos];
      pos += FE_LONGS;
    }
  }
  return new_LibOrgBouncycastleMathEcECCurve_F2m_1_initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(self, len, FE_LONGS, table, ks);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 4, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECCurve;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 9, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECLookupTable;", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithInt:withInt:withInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(initWithInt:withInt:withInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(initWithInt:withInt:withInt:withInt:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(cloneCurve);
  methods[6].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[7].selector = @selector(createDefaultMultiplier);
  methods[8].selector = @selector(getFieldSize);
  methods[9].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[10].selector = @selector(createRawPointWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withBoolean:);
  methods[11].selector = @selector(createRawPointWithLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElement:withLibOrgBouncycastleMathEcECFieldElementArray:withBoolean:);
  methods[12].selector = @selector(getInfinity);
  methods[13].selector = @selector(getM);
  methods[14].selector = @selector(isTrinomial);
  methods[15].selector = @selector(getK1);
  methods[16].selector = @selector(getK2);
  methods[17].selector = @selector(getK3);
  methods[18].selector = @selector(createCacheSafeLookupTableWithLibOrgBouncycastleMathEcECPointArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "F2M_DEFAULT_COORDS", "I", .constantValue.asInt = LibOrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS, 0x1a, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k2_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k3_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "infinity_", "LLibOrgBouncycastleMathEcECPoint_F2m;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILJavaMathBigInteger;LJavaMathBigInteger;", "IILJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "IIIILJavaMathBigInteger;LJavaMathBigInteger;", "IIIILJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "IIIILLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;LJavaMathBigInteger;LJavaMathBigInteger;", "supportsCoordinateSystem", "I", "fromBigInteger", "LJavaMathBigInteger;", "createRawPoint", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;Z", "LLibOrgBouncycastleMathEcECFieldElement;LLibOrgBouncycastleMathEcECFieldElement;[LLibOrgBouncycastleMathEcECFieldElement;Z", "createCacheSafeLookupTable", "[LLibOrgBouncycastleMathEcECPoint;II", "LLibOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECCurve_F2m = { "F2m", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 19, 6, 14, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcECCurve_F2m;
}

@end

void LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, 0, 0, a, b, nil, nil);
}

LibOrgBouncycastleMathEcECCurve_F2m *new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b)
}

LibOrgBouncycastleMathEcECCurve_F2m *create_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b)
}

void LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, 0, 0, a, b, order, cofactor);
}

LibOrgBouncycastleMathEcECCurve_F2m *new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b, order, cofactor)
}

LibOrgBouncycastleMathEcECCurve_F2m *create_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b, order, cofactor)
}

void LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b, nil, nil);
}

LibOrgBouncycastleMathEcECCurve_F2m *new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b)
}

LibOrgBouncycastleMathEcECCurve_F2m *create_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b)
}

void LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  LibOrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self, m, k1, k2, k3);
  self->m_ = m;
  self->k1_ = k1;
  self->k2_ = k2;
  self->k3_ = k3;
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->infinity_ = new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(self, nil, nil, false);
  self->a_ = [self fromBigIntegerWithJavaMathBigInteger:a];
  self->b_ = [self fromBigIntegerWithJavaMathBigInteger:b];
  self->coord_ = LibOrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS;
}

LibOrgBouncycastleMathEcECCurve_F2m *new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

LibOrgBouncycastleMathEcECCurve_F2m *create_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

void LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  LibOrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self, m, k1, k2, k3);
  self->m_ = m;
  self->k1_ = k1;
  self->k2_ = k2;
  self->k3_ = k3;
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->infinity_ = new_LibOrgBouncycastleMathEcECPoint_F2m_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withBoolean_(self, nil, nil, false);
  self->a_ = a;
  self->b_ = b;
  self->coord_ = LibOrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS;
}

LibOrgBouncycastleMathEcECCurve_F2m *new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

LibOrgBouncycastleMathEcECCurve_F2m *create_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, LibOrgBouncycastleMathEcECFieldElement *a, LibOrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withLibOrgBouncycastleMathEcECFieldElement_withLibOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcECCurve_F2m)

@implementation LibOrgBouncycastleMathEcECCurve_F2m_1

- (instancetype)initWithLibOrgBouncycastleMathEcECCurve_F2m:(LibOrgBouncycastleMathEcECCurve_F2m *)outer$
                                                    withInt:(jint)capture$0
                                                    withInt:(jint)capture$1
                                              withLongArray:(IOSLongArray *)capture$2
                                               withIntArray:(IOSIntArray *)capture$3 {
  LibOrgBouncycastleMathEcECCurve_F2m_1_initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (jint)getSize {
  return val$len_;
}

- (LibOrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index {
  IOSLongArray *x = LibOrgBouncycastleMathRawNat_create64WithInt_(val$FE_LONGS_);
  IOSLongArray *y = LibOrgBouncycastleMathRawNat_create64WithInt_(val$FE_LONGS_);
  jint pos = 0;
  for (jint i = 0; i < val$len_; ++i) {
    jlong MASK = JreRShift32(((i ^ index) - 1), 31);
    for (jint j = 0; j < val$FE_LONGS_; ++j) {
      *IOSLongArray_GetRef(nil_chk(x), j) ^= IOSLongArray_Get(nil_chk(val$table_), pos + j) & MASK;
      *IOSLongArray_GetRef(nil_chk(y), j) ^= IOSLongArray_Get(val$table_, pos + val$FE_LONGS_ + j) & MASK;
    }
    pos += (val$FE_LONGS_ * 2);
  }
  return [this$0_ createRawPointWithLibOrgBouncycastleMathEcECFieldElement:new_LibOrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withLibOrgBouncycastleMathEcLongArray_(this$0_->m_, val$ks_, new_LibOrgBouncycastleMathEcLongArray_initWithLongArray_(x)) withLibOrgBouncycastleMathEcECFieldElement:new_LibOrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withLibOrgBouncycastleMathEcLongArray_(this$0_->m_, val$ks_, new_LibOrgBouncycastleMathEcLongArray_initWithLongArray_(y)) withBoolean:false];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleMathEcECCurve_F2m:withInt:withInt:withLongArray:withIntArray:);
  methods[1].selector = @selector(getSize);
  methods[2].selector = @selector(lookupWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleMathEcECCurve_F2m;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$len_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$FE_LONGS_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$table_", "[J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$ks_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "lookup", "I", "LLibOrgBouncycastleMathEcECCurve_F2m;", "createCacheSafeLookupTableWithLibOrgBouncycastleMathEcECPointArray:withInt:withInt:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcECCurve_F2m_1 = { "", "lib.org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8010, 3, 5, 2, -1, 3, -1, -1 };
  return &_LibOrgBouncycastleMathEcECCurve_F2m_1;
}

@end

void LibOrgBouncycastleMathEcECCurve_F2m_1_initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(LibOrgBouncycastleMathEcECCurve_F2m_1 *self, LibOrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3) {
  self->this$0_ = outer$;
  self->val$len_ = capture$0;
  self->val$FE_LONGS_ = capture$1;
  self->val$table_ = capture$2;
  self->val$ks_ = capture$3;
  NSObject_init(self);
}

LibOrgBouncycastleMathEcECCurve_F2m_1 *new_LibOrgBouncycastleMathEcECCurve_F2m_1_initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(LibOrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcECCurve_F2m_1, initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_, outer$, capture$0, capture$1, capture$2, capture$3)
}

LibOrgBouncycastleMathEcECCurve_F2m_1 *create_LibOrgBouncycastleMathEcECCurve_F2m_1_initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(LibOrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcECCurve_F2m_1, initWithLibOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_, outer$, capture$0, capture$1, capture$2, capture$3)
}
