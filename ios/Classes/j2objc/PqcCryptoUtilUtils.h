//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/util/PqcCryptoUtilUtils.java
//

#ifndef PqcCryptoUtilUtils_H
#define PqcCryptoUtilUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@class LibOrgBouncycastlePqcAsn1SPHINCS256KeyParams;
@protocol JavaUtilMap;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils : NSObject
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *AlgID_qTESLA_I NS_SWIFT_NAME(AlgID_qTESLA_I);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *AlgID_qTESLA_III_size NS_SWIFT_NAME(AlgID_qTESLA_III_size);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *AlgID_qTESLA_III_speed NS_SWIFT_NAME(AlgID_qTESLA_III_speed);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *AlgID_qTESLA_p_I NS_SWIFT_NAME(AlgID_qTESLA_p_I);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *AlgID_qTESLA_p_III NS_SWIFT_NAME(AlgID_qTESLA_p_III);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *SPHINCS_SHA3_256 NS_SWIFT_NAME(SPHINCS_SHA3_256);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *SPHINCS_SHA512_256 NS_SWIFT_NAME(SPHINCS_SHA512_256);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *XMSS_SHA256 NS_SWIFT_NAME(XMSS_SHA256);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *XMSS_SHA512 NS_SWIFT_NAME(XMSS_SHA512);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *XMSS_SHAKE128 NS_SWIFT_NAME(XMSS_SHAKE128);
@property (readonly, class) LibOrgBouncycastleAsn1X509AlgorithmIdentifier *XMSS_SHAKE256 NS_SWIFT_NAME(XMSS_SHAKE256);
@property (readonly, class) id<JavaUtilMap> categories NS_SWIFT_NAME(categories);

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)AlgID_qTESLA_I;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)AlgID_qTESLA_III_size;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)AlgID_qTESLA_III_speed;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)AlgID_qTESLA_p_I;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)AlgID_qTESLA_p_III;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)SPHINCS_SHA3_256;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)SPHINCS_SHA512_256;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)XMSS_SHA256;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)XMSS_SHA512;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)XMSS_SHAKE128;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)XMSS_SHAKE256;

+ (id<JavaUtilMap>)categories;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (id<LibOrgBouncycastleCryptoDigest>)getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)qTeslaLookupAlgIDWithInt:(jint)securityCategory;

+ (jint)qTeslaLookupSecurityCategoryWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algorithm;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)sphincs256LookupTreeAlgIDWithNSString:(NSString *)treeDigest;

+ (NSString *)sphincs256LookupTreeAlgNameWithLibOrgBouncycastlePqcAsn1SPHINCS256KeyParams:(LibOrgBouncycastlePqcAsn1SPHINCS256KeyParams *)keyParams;

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)xmssLookupTreeAlgIDWithNSString:(NSString *)treeDigest;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_AlgID_qTESLA_I(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_AlgID_qTESLA_I;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, AlgID_qTESLA_I, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_AlgID_qTESLA_III_size(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_AlgID_qTESLA_III_size;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, AlgID_qTESLA_III_size, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_AlgID_qTESLA_III_speed(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_AlgID_qTESLA_III_speed;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, AlgID_qTESLA_III_speed, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_AlgID_qTESLA_p_I(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_AlgID_qTESLA_p_I;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, AlgID_qTESLA_p_I, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_AlgID_qTESLA_p_III(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_AlgID_qTESLA_p_III;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, AlgID_qTESLA_p_III, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_SPHINCS_SHA3_256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_SPHINCS_SHA3_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, SPHINCS_SHA3_256, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_SPHINCS_SHA512_256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_SPHINCS_SHA512_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, SPHINCS_SHA512_256, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_XMSS_SHA256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_XMSS_SHA256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, XMSS_SHA256, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_XMSS_SHA512(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_XMSS_SHA512;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, XMSS_SHA512, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_XMSS_SHAKE128(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_XMSS_SHAKE128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, XMSS_SHAKE128, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_XMSS_SHAKE256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_XMSS_SHAKE256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, XMSS_SHAKE256, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline id<JavaUtilMap> LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_get_categories(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilMap> LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_categories;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils, categories, id<JavaUtilMap>)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_init(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils *new_LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils *create_LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_init(void);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_qTeslaLookupSecurityCategoryWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algorithm);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_qTeslaLookupAlgIDWithInt_(jint securityCategory);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_sphincs256LookupTreeAlgIDWithNSString_(NSString *treeDigest);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_xmssLookupTreeAlgIDWithNSString_(NSString *treeDigest);

FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_sphincs256LookupTreeAlgNameWithLibOrgBouncycastlePqcAsn1SPHINCS256KeyParams_(LibOrgBouncycastlePqcAsn1SPHINCS256KeyParams *keyParams);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils_getDigestWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoUtilPqcCryptoUtilUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PqcCryptoUtilUtils_H
