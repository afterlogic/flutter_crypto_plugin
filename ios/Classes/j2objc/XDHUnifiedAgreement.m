//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/XDHUnifiedAgreement.java
//

#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RawAgreement.h"
#include "XDHUPrivateParameters.h"
#include "XDHUPublicParameters.h"
#include "XDHUnifiedAgreement.h"

@interface LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement () {
 @public
  id<LibOrgBouncycastleCryptoRawAgreement> xAgreement_;
  LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *privParams_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement, xAgreement_, id<LibOrgBouncycastleCryptoRawAgreement>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement, privParams_, LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *)

@implementation LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement

- (instancetype)initWithLibOrgBouncycastleCryptoRawAgreement:(id<LibOrgBouncycastleCryptoRawAgreement>)xAgreement {
  LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement_initWithLibOrgBouncycastleCryptoRawAgreement_(self, xAgreement);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)key {
  self->privParams_ = (LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *) cast_chk(key, [LibOrgBouncycastleCryptoParamsXDHUPrivateParameters class]);
}

- (jint)getAgreementSize {
  return [((id<LibOrgBouncycastleCryptoRawAgreement>) nil_chk(xAgreement_)) getAgreementSize] * 2;
}

- (void)calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)publicKey
                                                         withByteArray:(IOSByteArray *)buf
                                                               withInt:(jint)off {
  LibOrgBouncycastleCryptoParamsXDHUPublicParameters *pubParams = (LibOrgBouncycastleCryptoParamsXDHUPublicParameters *) cast_chk(publicKey, [LibOrgBouncycastleCryptoParamsXDHUPublicParameters class]);
  [((id<LibOrgBouncycastleCryptoRawAgreement>) nil_chk(xAgreement_)) init__WithLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *) nil_chk(privParams_)) getEphemeralPrivateKey]];
  [xAgreement_ calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastleCryptoParamsXDHUPublicParameters *) nil_chk(pubParams)) getEphemeralPublicKey] withByteArray:buf withInt:off];
  [xAgreement_ init__WithLibOrgBouncycastleCryptoCipherParameters:[((LibOrgBouncycastleCryptoParamsXDHUPrivateParameters *) nil_chk(privParams_)) getStaticPrivateKey]];
  [xAgreement_ calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:[pubParams getStaticPublicKey] withByteArray:buf withInt:off + [xAgreement_ getAgreementSize]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoRawAgreement:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAgreementSize);
  methods[3].selector = @selector(calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "xAgreement_", "LLibOrgBouncycastleCryptoRawAgreement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "privParams_", "LLibOrgBouncycastleCryptoParamsXDHUPrivateParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoRawAgreement;", "init", "LLibOrgBouncycastleCryptoCipherParameters;", "calculateAgreement", "LLibOrgBouncycastleCryptoCipherParameters;[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement = { "XDHUnifiedAgreement", "lib.org.bouncycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement;
}

@end

void LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement_initWithLibOrgBouncycastleCryptoRawAgreement_(LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement *self, id<LibOrgBouncycastleCryptoRawAgreement> xAgreement) {
  NSObject_init(self);
  self->xAgreement_ = xAgreement;
}

LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement *new_LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement_initWithLibOrgBouncycastleCryptoRawAgreement_(id<LibOrgBouncycastleCryptoRawAgreement> xAgreement) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement, initWithLibOrgBouncycastleCryptoRawAgreement_, xAgreement)
}

LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement *create_LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement_initWithLibOrgBouncycastleCryptoRawAgreement_(id<LibOrgBouncycastleCryptoRawAgreement> xAgreement) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement, initWithLibOrgBouncycastleCryptoRawAgreement_, xAgreement)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementXDHUnifiedAgreement)
