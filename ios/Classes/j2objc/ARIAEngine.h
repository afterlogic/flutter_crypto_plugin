//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/ARIAEngine.java
//

#ifndef ARIAEngine_H
#define ARIAEngine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BlockCipher.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSObjectArray;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoEnginesARIAEngine : NSObject < LibOrgBouncycastleCryptoBlockCipher >
@property (readonly, class) jint BLOCK_SIZE NS_SWIFT_NAME(BLOCK_SIZE);

+ (jint)BLOCK_SIZE;

#pragma mark Public

- (instancetype __nonnull)init;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

#pragma mark Protected

+ (void)AWithByteArray:(IOSByteArray *)z;

+ (void)FEWithByteArray:(IOSByteArray *)D
          withByteArray:(IOSByteArray *)RK;

+ (void)FOWithByteArray:(IOSByteArray *)D
          withByteArray:(IOSByteArray *)RK;

+ (IOSObjectArray *)keyScheduleWithBoolean:(jboolean)forEncryption
                             withByteArray:(IOSByteArray *)K;

+ (void)keyScheduleRoundWithByteArray:(IOSByteArray *)rk
                        withByteArray:(IOSByteArray *)w
                        withByteArray:(IOSByteArray *)wr
                              withInt:(jint)n;

+ (void)reverseKeysWithByteArray2:(IOSObjectArray *)keys;

+ (jbyte)SB1WithByte:(jbyte)x;

+ (jbyte)SB2WithByte:(jbyte)x;

+ (jbyte)SB3WithByte:(jbyte)x;

+ (jbyte)SB4WithByte:(jbyte)x;

+ (void)SL1WithByteArray:(IOSByteArray *)z;

+ (void)SL2WithByteArray:(IOSByteArray *)z;

+ (void)xor__WithByteArray:(IOSByteArray *)z
             withByteArray:(IOSByteArray *)x;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoEnginesARIAEngine)

inline jint LibOrgBouncycastleCryptoEnginesARIAEngine_get_BLOCK_SIZE(void);
#define LibOrgBouncycastleCryptoEnginesARIAEngine_BLOCK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoEnginesARIAEngine, BLOCK_SIZE, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_init(LibOrgBouncycastleCryptoEnginesARIAEngine *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesARIAEngine *new_LibOrgBouncycastleCryptoEnginesARIAEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEnginesARIAEngine *create_LibOrgBouncycastleCryptoEnginesARIAEngine_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_AWithByteArray_(IOSByteArray *z);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_FEWithByteArray_withByteArray_(IOSByteArray *D, IOSByteArray *RK);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_FOWithByteArray_withByteArray_(IOSByteArray *D, IOSByteArray *RK);

FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleCryptoEnginesARIAEngine_keyScheduleWithBoolean_withByteArray_(jboolean forEncryption, IOSByteArray *K);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_keyScheduleRoundWithByteArray_withByteArray_withByteArray_withInt_(IOSByteArray *rk, IOSByteArray *w, IOSByteArray *wr, jint n);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_reverseKeysWithByteArray2_(IOSObjectArray *keys);

FOUNDATION_EXPORT jbyte LibOrgBouncycastleCryptoEnginesARIAEngine_SB1WithByte_(jbyte x);

FOUNDATION_EXPORT jbyte LibOrgBouncycastleCryptoEnginesARIAEngine_SB2WithByte_(jbyte x);

FOUNDATION_EXPORT jbyte LibOrgBouncycastleCryptoEnginesARIAEngine_SB3WithByte_(jbyte x);

FOUNDATION_EXPORT jbyte LibOrgBouncycastleCryptoEnginesARIAEngine_SB4WithByte_(jbyte x);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_SL1WithByteArray_(IOSByteArray *z);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_SL2WithByteArray_(IOSByteArray *z);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEnginesARIAEngine_xor__WithByteArray_withByteArray_(IOSByteArray *z, IOSByteArray *x);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEnginesARIAEngine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ARIAEngine_H
