//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/PBESecretKeyEncryptor.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OpenPgpOperatorPGPUtil.h"
#include "PBESecretKeyEncryptor.h"
#include "PGPDigestCalculator.h"
#include "PGPException.h"
#include "S2K.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/SecureRandom.h"

@implementation LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor

- (instancetype)initWithInt:(jint)encAlgorithm
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
              withCharArray:(IOSCharArray *)passPhrase {
  LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withJavaSecuritySecureRandom_withCharArray_(self, encAlgorithm, s2kDigestCalculator, random, passPhrase);
  return self;
}

- (instancetype)initWithInt:(jint)encAlgorithm
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator
                    withInt:(jint)s2kCount
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
              withCharArray:(IOSCharArray *)passPhrase {
  LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(self, encAlgorithm, s2kDigestCalculator, s2kCount, random, passPhrase);
  return self;
}

- (jint)getAlgorithm {
  return encAlgorithm_;
}

- (jint)getHashAlgorithm {
  if (s2kDigestCalculator_ != nil) {
    return [s2kDigestCalculator_ getAlgorithm];
  }
  return -1;
}

- (IOSByteArray *)getKey {
  return LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(s2kDigestCalculator_, encAlgorithm_, s2k_, passPhrase_);
}

- (LibOrgBouncycastleBcpgS2K *)getS2K {
  return s2k_;
}

- (IOSByteArray *)encryptKeyDataWithByteArray:(IOSByteArray *)keyData
                                      withInt:(jint)keyOff
                                      withInt:(jint)keyLen {
  if (s2k_ == nil) {
    IOSByteArray *iv = [IOSByteArray newArrayWithLength:8];
    [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:iv];
    s2k_ = new_LibOrgBouncycastleBcpgS2K_initWithInt_withByteArray_withInt_([((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(s2kDigestCalculator_)) getAlgorithm], iv, s2kCount_);
  }
  return [self encryptKeyDataWithByteArray:[self getKey] withByteArray:keyData withInt:keyOff withInt:keyLen];
}

- (IOSByteArray *)encryptKeyDataWithByteArray:(IOSByteArray *)key
                                withByteArray:(IOSByteArray *)keyData
                                      withInt:(jint)keyOff
                                      withInt:(jint)keyLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)encryptKeyDataWithByteArray:(IOSByteArray *)key
                                withByteArray:(IOSByteArray *)iv
                                withByteArray:(IOSByteArray *)keyData
                                      withInt:(jint)keyOff
                                      withInt:(jint)keyLen {
  @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"encryption of version 3 keys not supported.");
}

- (IOSByteArray *)getCipherIV {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgS2K;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 3, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withJavaSecuritySecureRandom:withCharArray:);
  methods[1].selector = @selector(initWithInt:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withInt:withJavaSecuritySecureRandom:withCharArray:);
  methods[2].selector = @selector(getAlgorithm);
  methods[3].selector = @selector(getHashAlgorithm);
  methods[4].selector = @selector(getKey);
  methods[5].selector = @selector(getS2K);
  methods[6].selector = @selector(encryptKeyDataWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(encryptKeyDataWithByteArray:withByteArray:withInt:withInt:);
  methods[8].selector = @selector(encryptKeyDataWithByteArray:withByteArray:withByteArray:withInt:withInt:);
  methods[9].selector = @selector(getCipherIV);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encAlgorithm_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "passPhrase_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "s2kDigestCalculator_", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "s2kCount_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "s2k_", "LLibOrgBouncycastleBcpgS2K;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;LJavaSecuritySecureRandom;[C", "ILLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;ILJavaSecuritySecureRandom;[C", "LLibOrgBouncycastleOpenpgpPGPException;", "encryptKeyData", "[BII", "[B[BII", "[B[B[BII" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor = { "PBESecretKeyEncryptor", "lib.org.bouncycastle.openpgp.operator", ptrTable, methods, fields, 7, 0x401, 10, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;
}

@end

void LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withJavaSecuritySecureRandom_withCharArray_(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *self, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, JavaSecuritySecureRandom *random, IOSCharArray *passPhrase) {
  LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(self, encAlgorithm, s2kDigestCalculator, (jint) 0x60, random, passPhrase);
}

void LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *self, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount, JavaSecuritySecureRandom *random, IOSCharArray *passPhrase) {
  NSObject_init(self);
  self->encAlgorithm_ = encAlgorithm;
  self->passPhrase_ = passPhrase;
  self->random_ = random;
  self->s2kDigestCalculator_ = s2kDigestCalculator;
  if (s2kCount < 0 || s2kCount > (jint) 0xff) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"s2kCount value outside of range 0 to 255.");
  }
  self->s2kCount_ = s2kCount;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor)
