//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsNullCipher.java
//

#include "AlertDescription.h"
#include "Arrays.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "TlsContext.h"
#include "TlsFatalAlert.h"
#include "TlsMac.h"
#include "TlsNullCipher.h"
#include "TlsUtils.h"
#include "java/lang/System.h"

@implementation LibOrgBouncycastleCryptoTlsTlsNullCipher

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context {
  LibOrgBouncycastleCryptoTlsTlsNullCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_(self, context);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                           withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)clientWriteDigest
                           withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)serverWriteDigest {
  LibOrgBouncycastleCryptoTlsTlsNullCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(self, context, clientWriteDigest, serverWriteDigest);
  return self;
}

- (jint)getPlaintextLimitWithInt:(jint)ciphertextLimit {
  jint result = ciphertextLimit;
  if (writeMac_ != nil) {
    result -= [writeMac_ getSize];
  }
  return result;
}

- (IOSByteArray *)encodePlaintextWithLong:(jlong)seqNo
                                withShort:(jshort)type
                            withByteArray:(IOSByteArray *)plaintext
                                  withInt:(jint)offset
                                  withInt:(jint)len {
  if (writeMac_ == nil) {
    return LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(plaintext, offset, offset + len);
  }
  IOSByteArray *mac = [writeMac_ calculateMacWithLong:seqNo withShort:type withByteArray:plaintext withInt:offset withInt:len];
  IOSByteArray *ciphertext = [IOSByteArray newArrayWithLength:len + ((IOSByteArray *) nil_chk(mac))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(plaintext, offset, ciphertext, 0, len);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mac, 0, ciphertext, len, mac->size_);
  return ciphertext;
}

- (IOSByteArray *)decodeCiphertextWithLong:(jlong)seqNo
                                 withShort:(jshort)type
                             withByteArray:(IOSByteArray *)ciphertext
                                   withInt:(jint)offset
                                   withInt:(jint)len {
  if (readMac_ == nil) {
    return LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ciphertext, offset, offset + len);
  }
  jint macSize = [readMac_ getSize];
  if (len < macSize) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decode_error);
  }
  jint macInputLen = len - macSize;
  IOSByteArray *receivedMac = LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ciphertext, offset + macInputLen, offset + len);
  IOSByteArray *computedMac = [((LibOrgBouncycastleCryptoTlsTlsMac *) nil_chk(readMac_)) calculateMacWithLong:seqNo withShort:type withByteArray:ciphertext withInt:offset withInt:macInputLen];
  if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(receivedMac, computedMac)) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_bad_record_mac);
  }
  return LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ciphertext, offset, offset + macInputLen);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 6, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsContext:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsContext:withLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleCryptoDigest:);
  methods[2].selector = @selector(getPlaintextLimitWithInt:);
  methods[3].selector = @selector(encodePlaintextWithLong:withShort:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(decodeCiphertextWithLong:withShort:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LLibOrgBouncycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "writeMac_", "LLibOrgBouncycastleCryptoTlsTlsMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "readMac_", "LLibOrgBouncycastleCryptoTlsTlsMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoTlsTlsContext;", "LLibOrgBouncycastleCryptoTlsTlsContext;LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleCryptoDigest;", "LJavaIoIOException;", "getPlaintextLimit", "I", "encodePlaintext", "JS[BII", "decodeCiphertext" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsNullCipher = { "TlsNullCipher", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsNullCipher;
}

@end

void LibOrgBouncycastleCryptoTlsTlsNullCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_(LibOrgBouncycastleCryptoTlsTlsNullCipher *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context) {
  NSObject_init(self);
  self->context_ = context;
  self->writeMac_ = nil;
  self->readMac_ = nil;
}

LibOrgBouncycastleCryptoTlsTlsNullCipher *new_LibOrgBouncycastleCryptoTlsTlsNullCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_(id<LibOrgBouncycastleCryptoTlsTlsContext> context) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsNullCipher, initWithLibOrgBouncycastleCryptoTlsTlsContext_, context)
}

LibOrgBouncycastleCryptoTlsTlsNullCipher *create_LibOrgBouncycastleCryptoTlsTlsNullCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_(id<LibOrgBouncycastleCryptoTlsTlsContext> context) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsNullCipher, initWithLibOrgBouncycastleCryptoTlsTlsContext_, context)
}

void LibOrgBouncycastleCryptoTlsTlsNullCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoTlsTlsNullCipher *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoDigest> clientWriteDigest, id<LibOrgBouncycastleCryptoDigest> serverWriteDigest) {
  NSObject_init(self);
  if ((clientWriteDigest == nil) != (serverWriteDigest == nil)) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  self->context_ = context;
  LibOrgBouncycastleCryptoTlsTlsMac *clientWriteMac = nil;
  LibOrgBouncycastleCryptoTlsTlsMac *serverWriteMac = nil;
  if (clientWriteDigest != nil) {
    jint key_block_size = [clientWriteDigest getDigestSize] + [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(serverWriteDigest)) getDigestSize];
    IOSByteArray *key_block = LibOrgBouncycastleCryptoTlsTlsUtils_calculateKeyBlockWithLibOrgBouncycastleCryptoTlsTlsContext_withInt_(context, key_block_size);
    jint offset = 0;
    clientWriteMac = new_LibOrgBouncycastleCryptoTlsTlsMac_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_withInt_(context, clientWriteDigest, key_block, offset, [clientWriteDigest getDigestSize]);
    offset += [clientWriteDigest getDigestSize];
    serverWriteMac = new_LibOrgBouncycastleCryptoTlsTlsMac_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withByteArray_withInt_withInt_(context, serverWriteDigest, key_block, offset, [serverWriteDigest getDigestSize]);
    offset += [serverWriteDigest getDigestSize];
    if (offset != key_block_size) {
      @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
    }
  }
  if ([((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context)) isServer]) {
    self->writeMac_ = serverWriteMac;
    self->readMac_ = clientWriteMac;
  }
  else {
    self->writeMac_ = clientWriteMac;
    self->readMac_ = serverWriteMac;
  }
}

LibOrgBouncycastleCryptoTlsTlsNullCipher *new_LibOrgBouncycastleCryptoTlsTlsNullCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoDigest> clientWriteDigest, id<LibOrgBouncycastleCryptoDigest> serverWriteDigest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsNullCipher, initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_, context, clientWriteDigest, serverWriteDigest)
}

LibOrgBouncycastleCryptoTlsTlsNullCipher *create_LibOrgBouncycastleCryptoTlsTlsNullCipher_initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, id<LibOrgBouncycastleCryptoDigest> clientWriteDigest, id<LibOrgBouncycastleCryptoDigest> serverWriteDigest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsNullCipher, initWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoDigest_, context, clientWriteDigest, serverWriteDigest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsNullCipher)
