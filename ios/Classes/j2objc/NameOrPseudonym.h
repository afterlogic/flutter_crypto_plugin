//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/sigi/NameOrPseudonym.java
//

#ifndef NameOrPseudonym_H
#define NameOrPseudonym_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1X500DirectoryString;

@interface LibOrgBouncycastleAsn1X509SigiNameOrPseudonym : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X500DirectoryString:(LibOrgBouncycastleAsn1X500DirectoryString *)pseudonym;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X500DirectoryString:(LibOrgBouncycastleAsn1X500DirectoryString *)surname
                                     withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)givenName;

- (instancetype __nonnull)initWithNSString:(NSString *)pseudonym;

- (IOSObjectArray *)getGivenName;

+ (LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1X500DirectoryString *)getPseudonym;

- (LibOrgBouncycastleAsn1X500DirectoryString *)getSurname;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509SigiNameOrPseudonym)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithLibOrgBouncycastleAsn1X500DirectoryString_(LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *self, LibOrgBouncycastleAsn1X500DirectoryString *pseudonym);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *new_LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithLibOrgBouncycastleAsn1X500DirectoryString_(LibOrgBouncycastleAsn1X500DirectoryString *pseudonym) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *create_LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithLibOrgBouncycastleAsn1X500DirectoryString_(LibOrgBouncycastleAsn1X500DirectoryString *pseudonym);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithNSString_(LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *self, NSString *pseudonym);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *new_LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithNSString_(NSString *pseudonym) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *create_LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithNSString_(NSString *pseudonym);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithLibOrgBouncycastleAsn1X500DirectoryString_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *self, LibOrgBouncycastleAsn1X500DirectoryString *surname, LibOrgBouncycastleAsn1ASN1Sequence *givenName);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *new_LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithLibOrgBouncycastleAsn1X500DirectoryString_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X500DirectoryString *surname, LibOrgBouncycastleAsn1ASN1Sequence *givenName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509SigiNameOrPseudonym *create_LibOrgBouncycastleAsn1X509SigiNameOrPseudonym_initWithLibOrgBouncycastleAsn1X500DirectoryString_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X500DirectoryString *surname, LibOrgBouncycastleAsn1ASN1Sequence *givenName);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509SigiNameOrPseudonym)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // NameOrPseudonym_H
