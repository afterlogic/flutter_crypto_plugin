//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/PBEKeyEncryptionMethodGenerator.java
//

#include "ContainedPacket.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OpenPgpOperatorPGPUtil.h"
#include "PBEKeyEncryptionMethodGenerator.h"
#include "PGPDigestCalculator.h"
#include "PGPKeyEncryptionMethodGenerator.h"
#include "S2K.h"
#include "SymmetricKeyEncSessionPacket.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator () {
 @public
  IOSCharArray *passPhrase_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator_;
  LibOrgBouncycastleBcpgS2K *s2k_;
  JavaSecuritySecureRandom *random_;
  jint s2kCount_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator, passPhrase_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator, s2kDigestCalculator_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator, s2k_, LibOrgBouncycastleBcpgS2K *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator, random_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator

- (instancetype)initWithCharArray:(IOSCharArray *)passPhrase
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator {
  LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(self, passPhrase, s2kDigestCalculator);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)passPhrase
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator
                          withInt:(jint)s2kCount {
  LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(self, passPhrase, s2kDigestCalculator, s2kCount);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  return self;
}

- (IOSByteArray *)getKeyWithInt:(jint)encAlgorithm {
  if (s2k_ == nil) {
    IOSByteArray *iv = [IOSByteArray newArrayWithLength:8];
    if (random_ == nil) {
      random_ = new_JavaSecuritySecureRandom_init();
    }
    [random_ nextBytesWithByteArray:iv];
    s2k_ = new_LibOrgBouncycastleBcpgS2K_initWithInt_withByteArray_withInt_([((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(s2kDigestCalculator_)) getAlgorithm], iv, s2kCount_);
  }
  return LibOrgBouncycastleOpenpgpOperatorOpenPgpOperatorPGPUtil_makeKeyFromPassPhraseWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withLibOrgBouncycastleBcpgS2K_withCharArray_(s2kDigestCalculator_, encAlgorithm, s2k_, passPhrase_);
}

- (LibOrgBouncycastleBcpgContainedPacket *)generateWithInt:(jint)encAlgorithm
                                             withByteArray:(IOSByteArray *)sessionInfo {
  IOSByteArray *key = [self getKeyWithInt:encAlgorithm];
  if (sessionInfo == nil) {
    return new_LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_initWithInt_withLibOrgBouncycastleBcpgS2K_withByteArray_(encAlgorithm, s2k_, nil);
  }
  IOSByteArray *nSessionInfo = [IOSByteArray newArrayWithLength:sessionInfo->size_ - 2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sessionInfo, 0, nSessionInfo, 0, nSessionInfo->size_);
  return new_LibOrgBouncycastleBcpgSymmetricKeyEncSessionPacket_initWithInt_withLibOrgBouncycastleBcpgS2K_withByteArray_(encAlgorithm, s2k_, [self encryptSessionInfoWithInt:encAlgorithm withByteArray:key withByteArray:nSessionInfo]);
}

- (IOSByteArray *)encryptSessionInfoWithInt:(jint)encAlgorithm
                              withByteArray:(IOSByteArray *)key
                              withByteArray:(IOSByteArray *)sessionInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgContainedPacket;", 0x1, 7, 8, 6, -1, -1, -1 },
    { NULL, "[B", 0x404, 9, 10, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:);
  methods[1].selector = @selector(initWithCharArray:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withInt:);
  methods[2].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[3].selector = @selector(getKeyWithInt:);
  methods[4].selector = @selector(generateWithInt:withByteArray:);
  methods[5].selector = @selector(encryptSessionInfoWithInt:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "passPhrase_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "s2kDigestCalculator_", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "s2k_", "LLibOrgBouncycastleBcpgS2K;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "s2kCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[CLLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", "[CLLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;I", "setSecureRandom", "LJavaSecuritySecureRandom;", "getKey", "I", "LLibOrgBouncycastleOpenpgpPGPException;", "generate", "I[B", "encryptSessionInfo", "I[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator = { "PBEKeyEncryptionMethodGenerator", "lib.org.bouncycastle.openpgp.operator", ptrTable, methods, fields, 7, 0x401, 6, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator;
}

@end

void LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator *self, IOSCharArray *passPhrase, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator) {
  LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(self, passPhrase, s2kDigestCalculator, (jint) 0x60);
}

void LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator_initWithCharArray_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator *self, IOSCharArray *passPhrase, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount) {
  LibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator_init(self);
  self->passPhrase_ = passPhrase;
  self->s2kDigestCalculator_ = s2kDigestCalculator;
  if (s2kCount < 0 || s2kCount > (jint) 0xff) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"s2kCount value outside of range 0 to 255.");
  }
  self->s2kCount_ = s2kCount;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorPBEKeyEncryptionMethodGenerator)
