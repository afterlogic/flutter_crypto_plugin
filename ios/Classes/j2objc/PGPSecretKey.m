//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPSecretKey.java
//

#include "BCPGInputStream.h"
#include "BCPGKey.h"
#include "BCPGObject.h"
#include "BCPGOutputStream.h"
#include "ContainedPacket.h"
#include "DSASecretBCPGKey.h"
#include "ECSecretBCPGKey.h"
#include "ElGamalSecretBCPGKey.h"
#include "HashAlgorithmTags.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFingerPrintCalculator.h"
#include "PBEProtectionRemoverFactory.h"
#include "PBESecretKeyDecryptor.h"
#include "PBESecretKeyEncryptor.h"
#include "PGPContentSignerBuilder.h"
#include "PGPDigestCalculator.h"
#include "PGPException.h"
#include "PGPKeyPair.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "PGPSecretKey.h"
#include "PGPSignature.h"
#include "PGPSignatureGenerator.h"
#include "PGPSignatureSubpacketVector.h"
#include "PGPUserAttributeSubpacketVector.h"
#include "PublicKeyAlgorithmTags.h"
#include "PublicKeyPacket.h"
#include "RSASecretBCPGKey.h"
#include "S2K.h"
#include "SExprParser.h"
#include "SecretKeyPacket.h"
#include "SecretSubkeyPacket.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "TrustPacket.h"
#include "UserAttributePacket.h"
#include "UserIDPacket.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleOpenpgpPGPSecretKey ()

+ (LibOrgBouncycastleBcpgSecretKeyPacket *)buildSecretKeyPacketWithBoolean:(jboolean)isMasterKey
                                withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privKey
                                 withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
                withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)keyEncryptor
                  withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)checksumCalculator;

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)certifiedPublicKeyWithInt:(jint)certificationLevel
                             withLibOrgBouncycastleOpenpgpPGPKeyPair:(LibOrgBouncycastleOpenpgpPGPKeyPair *)keyPair
                                                        withNSString:(NSString *)id_
            withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)hashedPcks
            withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)unhashedPcks
        withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:(id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder>)certificationSignerBuilder;

- (IOSByteArray *)extractKeyDataWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)decryptorFactory;

+ (IOSByteArray *)checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)digCalc
                                                                     withByteArray:(IOSByteArray *)bytes
                                                                           withInt:(jint)length;

@end

__attribute__((unused)) static LibOrgBouncycastleBcpgSecretKeyPacket *LibOrgBouncycastleOpenpgpPGPSecretKey_buildSecretKeyPacketWithBoolean_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(jboolean isMasterKey, LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPSecretKey_certifiedPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_(jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> certificationSignerBuilder);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleOpenpgpPGPSecretKey_extractKeyDataWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_(LibOrgBouncycastleOpenpgpPGPSecretKey *self, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *decryptorFactory);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleOpenpgpPGPSecretKey_checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withByteArray_withInt_(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digCalc, IOSByteArray *bytes, jint length);

@implementation LibOrgBouncycastleOpenpgpPGPSecretKey

- (instancetype)initWithLibOrgBouncycastleBcpgSecretKeyPacket:(LibOrgBouncycastleBcpgSecretKeyPacket *)secret
                    withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pub {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(self, secret, pub);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privKey
                     withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
      withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)checksumCalculator
    withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)keyEncryptor {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(self, privKey, pubKey, checksumCalculator, keyEncryptor);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privKey
                     withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
      withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)checksumCalculator
                                                   withBoolean:(jboolean)isMasterKey
    withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)keyEncryptor {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withBoolean_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(self, privKey, pubKey, checksumCalculator, isMasterKey, keyEncryptor);
  return self;
}

+ (LibOrgBouncycastleBcpgSecretKeyPacket *)buildSecretKeyPacketWithBoolean:(jboolean)isMasterKey
                                withLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privKey
                                 withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
                withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)keyEncryptor
                  withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)checksumCalculator {
  return LibOrgBouncycastleOpenpgpPGPSecretKey_buildSecretKeyPacketWithBoolean_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(isMasterKey, privKey, pubKey, keyEncryptor, checksumCalculator);
}

- (instancetype)initWithInt:(jint)certificationLevel
withLibOrgBouncycastleOpenpgpPGPKeyPair:(LibOrgBouncycastleOpenpgpPGPKeyPair *)keyPair
               withNSString:(NSString *)id_
withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)hashedPcks
withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)unhashedPcks
withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:(id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder>)certificationSignerBuilder
withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)keyEncryptor {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(self, certificationLevel, keyPair, id_, hashedPcks, unhashedPcks, certificationSignerBuilder, keyEncryptor);
  return self;
}

- (instancetype)initWithInt:(jint)certificationLevel
withLibOrgBouncycastleOpenpgpPGPKeyPair:(LibOrgBouncycastleOpenpgpPGPKeyPair *)keyPair
               withNSString:(NSString *)id_
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)checksumCalculator
withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)hashedPcks
withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)unhashedPcks
withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:(id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder>)certificationSignerBuilder
withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)keyEncryptor {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(self, certificationLevel, keyPair, id_, checksumCalculator, hashedPcks, unhashedPcks, certificationSignerBuilder, keyEncryptor);
  return self;
}

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)certifiedPublicKeyWithInt:(jint)certificationLevel
                             withLibOrgBouncycastleOpenpgpPGPKeyPair:(LibOrgBouncycastleOpenpgpPGPKeyPair *)keyPair
                                                        withNSString:(NSString *)id_
            withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)hashedPcks
            withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:(LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *)unhashedPcks
        withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:(id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder>)certificationSignerBuilder {
  return LibOrgBouncycastleOpenpgpPGPSecretKey_certifiedPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_(certificationLevel, keyPair, id_, hashedPcks, unhashedPcks, certificationSignerBuilder);
}

- (jboolean)isSigningKey {
  jint algorithm = [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_)) getAlgorithm];
  return ((algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL) || (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN) || (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA) || (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA) || (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL));
}

- (jboolean)isMasterKey {
  return [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_)) isMasterKey];
}

- (jboolean)isPrivateKeyEmpty {
  IOSByteArray *secKeyData = [((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(secret_)) getSecretKeyData];
  return (secKeyData == nil || secKeyData->size_ < 1);
}

- (jint)getKeyEncryptionAlgorithm {
  return [((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(secret_)) getEncAlgorithm];
}

- (jlong)getKeyID {
  return [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_)) getKeyID];
}

- (jint)getS2KUsage {
  return [((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(secret_)) getS2KUsage];
}

- (LibOrgBouncycastleBcpgS2K *)getS2K {
  return [((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(secret_)) getS2K];
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKey {
  return pub_;
}

- (id<JavaUtilIterator>)getUserIDs {
  return [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_)) getUserIDs];
}

- (id<JavaUtilIterator>)getUserAttributes {
  return [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_)) getUserAttributes];
}

- (IOSByteArray *)extractKeyDataWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)decryptorFactory {
  return LibOrgBouncycastleOpenpgpPGPSecretKey_extractKeyDataWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_(self, decryptorFactory);
}

- (LibOrgBouncycastleOpenpgpPGPPrivateKey *)extractPrivateKeyWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)decryptorFactory {
  if ([self isPrivateKeyEmpty]) {
    return nil;
  }
  LibOrgBouncycastleBcpgPublicKeyPacket *pubPk = [((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(secret_)) getPublicKeyPacket];
  @try {
    IOSByteArray *data = LibOrgBouncycastleOpenpgpPGPSecretKey_extractKeyDataWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_(self, decryptorFactory);
    LibOrgBouncycastleBcpgBCPGInputStream *in = new_LibOrgBouncycastleBcpgBCPGInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(data));
    {
      LibOrgBouncycastleBcpgRSASecretBCPGKey *rsaPriv;
      LibOrgBouncycastleBcpgDSASecretBCPGKey *dsaPriv;
      LibOrgBouncycastleBcpgElGamalSecretBCPGKey *elPriv;
      LibOrgBouncycastleBcpgECSecretBCPGKey *ecPriv;
      switch ([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(pubPk)) getAlgorithm]) {
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN:
        rsaPriv = new_LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in);
        return new_LibOrgBouncycastleOpenpgpPGPPrivateKey_initWithLong_withLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgBCPGKey_([self getKeyID], pubPk, rsaPriv);
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
        dsaPriv = new_LibOrgBouncycastleBcpgDSASecretBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in);
        return new_LibOrgBouncycastleOpenpgpPGPPrivateKey_initWithLong_withLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgBCPGKey_([self getKeyID], pubPk, dsaPriv);
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
        elPriv = new_LibOrgBouncycastleBcpgElGamalSecretBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in);
        return new_LibOrgBouncycastleOpenpgpPGPPrivateKey_initWithLong_withLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgBCPGKey_([self getKeyID], pubPk, elPriv);
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA:
        ecPriv = new_LibOrgBouncycastleBcpgECSecretBCPGKey_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in);
        return new_LibOrgBouncycastleOpenpgpPGPPrivateKey_initWithLong_withLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgBCPGKey_([self getKeyID], pubPk, ecPriv);
        default:
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"unknown public key algorithm encountered");
      }
    }
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"Exception constructing key", e);
  }
}

+ (IOSByteArray *)checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)digCalc
                                                                     withByteArray:(IOSByteArray *)bytes
                                                                           withInt:(jint)length {
  return LibOrgBouncycastleOpenpgpPGPSecretKey_checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withByteArray_withInt_(digCalc, bytes, length);
}

- (IOSByteArray *)getEncoded {
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [self encodeWithJavaIoOutputStream:bOut];
  return [bOut toByteArray];
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outStream {
  LibOrgBouncycastleBcpgBCPGOutputStream *out;
  if ([outStream isKindOfClass:[LibOrgBouncycastleBcpgBCPGOutputStream class]]) {
    out = (LibOrgBouncycastleBcpgBCPGOutputStream *) outStream;
  }
  else {
    out = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_(outStream);
  }
  [((LibOrgBouncycastleBcpgBCPGOutputStream *) nil_chk(out)) writePacketWithLibOrgBouncycastleBcpgContainedPacket:secret_];
  if (((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->trustPk_ != nil) {
    [out writePacketWithLibOrgBouncycastleBcpgContainedPacket:pub_->trustPk_];
  }
  if (((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->subSigs_ == nil) {
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->keySigs_)) size]; i++) {
      [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->keySigs_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPSignature class])))) encodeWithJavaIoOutputStream:out];
    }
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->ids_)) size]; i++) {
      if ([[((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->ids_)) getWithInt:i] isKindOfClass:[LibOrgBouncycastleBcpgUserIDPacket class]]) {
        LibOrgBouncycastleBcpgUserIDPacket *id_ = (LibOrgBouncycastleBcpgUserIDPacket *) cast_chk([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->ids_)) getWithInt:i], [LibOrgBouncycastleBcpgUserIDPacket class]);
        [out writePacketWithLibOrgBouncycastleBcpgContainedPacket:id_];
      }
      else {
        LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *v = (LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *) cast_chk([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->ids_)) getWithInt:i], [LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector class]);
        [out writePacketWithLibOrgBouncycastleBcpgContainedPacket:new_LibOrgBouncycastleBcpgUserAttributePacket_initWithLibOrgBouncycastleBcpgUserAttributeSubpacketArray_([((LibOrgBouncycastleOpenpgpPGPUserAttributeSubpacketVector *) nil_chk(v)) toSubpacketArray])];
      }
      if ([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->idTrusts_)) getWithInt:i] != nil) {
        [out writePacketWithLibOrgBouncycastleBcpgContainedPacket:(LibOrgBouncycastleBcpgContainedPacket *) cast_chk([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->idTrusts_)) getWithInt:i], [LibOrgBouncycastleBcpgContainedPacket class])];
      }
      id<JavaUtilList> sigs = (JavaUtilArrayList *) cast_chk([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->idSigs_)) getWithInt:i], [JavaUtilArrayList class]);
      for (jint j = 0; j != [((id<JavaUtilList>) nil_chk(sigs)) size]; j++) {
        [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([sigs getWithInt:j], [LibOrgBouncycastleOpenpgpPGPSignature class])))) encodeWithJavaIoOutputStream:out];
      }
    }
  }
  else {
    for (jint j = 0; j != [((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->subSigs_)) size]; j++) {
      [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(((LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([((id<JavaUtilList>) nil_chk(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub_))->subSigs_)) getWithInt:j], [LibOrgBouncycastleOpenpgpPGPSignature class])))) encodeWithJavaIoOutputStream:out];
    }
  }
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKey *)copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKey:(LibOrgBouncycastleOpenpgpPGPSecretKey *)key
                                             withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *)oldKeyDecryptor
                                             withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:(LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)newKeyEncryptor {
  return LibOrgBouncycastleOpenpgpPGPSecretKey_copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKey_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(key, oldKeyDecryptor, newKeyEncryptor);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKey *)replacePublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey:(LibOrgBouncycastleOpenpgpPGPSecretKey *)secretKey
                                                           withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)publicKey {
  return LibOrgBouncycastleOpenpgpPGPSecretKey_replacePublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_(secretKey, publicKey);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKey *)parseSecretKeyFromSExprWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                       withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory
                                              withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey {
  return LibOrgBouncycastleOpenpgpPGPSecretKey_parseSecretKeyFromSExprWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_withLibOrgBouncycastleOpenpgpPGPPublicKey_(inputStream, keyProtectionRemoverFactory, pubKey);
}

+ (LibOrgBouncycastleOpenpgpPGPSecretKey *)parseSecretKeyFromSExprWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                       withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory
                          withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  return LibOrgBouncycastleOpenpgpPGPSecretKey_parseSecretKeyFromSExprWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(inputStream, keyProtectionRemoverFactory, fingerPrintCalculator);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgSecretKeyPacket;", 0xa, 4, 5, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0xa, 8, 9, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleBcpgS2K;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "[B", 0x2, 12, 13, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPrivateKey;", 0x1, 14, 13, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 15, 16, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 17, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x9, 20, 21, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x9, 24, 25, 26, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x9, 24, 27, 26, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgSecretKeyPacket:withLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPrivateKey:withLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPPrivateKey:withLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withBoolean:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:);
  methods[3].selector = @selector(buildSecretKeyPacketWithBoolean:withLibOrgBouncycastleOpenpgpPGPPrivateKey:withLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:);
  methods[4].selector = @selector(initWithInt:withLibOrgBouncycastleOpenpgpPGPKeyPair:withNSString:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:);
  methods[5].selector = @selector(initWithInt:withLibOrgBouncycastleOpenpgpPGPKeyPair:withNSString:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:);
  methods[6].selector = @selector(certifiedPublicKeyWithInt:withLibOrgBouncycastleOpenpgpPGPKeyPair:withNSString:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder:);
  methods[7].selector = @selector(isSigningKey);
  methods[8].selector = @selector(isMasterKey);
  methods[9].selector = @selector(isPrivateKeyEmpty);
  methods[10].selector = @selector(getKeyEncryptionAlgorithm);
  methods[11].selector = @selector(getKeyID);
  methods[12].selector = @selector(getS2KUsage);
  methods[13].selector = @selector(getS2K);
  methods[14].selector = @selector(getPublicKey);
  methods[15].selector = @selector(getUserIDs);
  methods[16].selector = @selector(getUserAttributes);
  methods[17].selector = @selector(extractKeyDataWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:);
  methods[18].selector = @selector(extractPrivateKeyWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:);
  methods[19].selector = @selector(checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withByteArray:withInt:);
  methods[20].selector = @selector(getEncoded);
  methods[21].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[22].selector = @selector(copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKey:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor:);
  methods[23].selector = @selector(replacePublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey:withLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[24].selector = @selector(parseSecretKeyFromSExprWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:withLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[25].selector = @selector(parseSecretKeyFromSExprWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "secret_", "LLibOrgBouncycastleBcpgSecretKeyPacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pub_", "LLibOrgBouncycastleOpenpgpPGPPublicKey;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleBcpgSecretKeyPacket;LLibOrgBouncycastleOpenpgpPGPPublicKey;", "LLibOrgBouncycastleOpenpgpPGPPrivateKey;LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", "LLibOrgBouncycastleOpenpgpPGPException;", "LLibOrgBouncycastleOpenpgpPGPPrivateKey;LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;ZLLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", "buildSecretKeyPacket", "ZLLibOrgBouncycastleOpenpgpPGPPrivateKey;LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", "ILLibOrgBouncycastleOpenpgpPGPKeyPair;LNSString;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", "ILLibOrgBouncycastleOpenpgpPGPKeyPair;LNSString;LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", "certifiedPublicKey", "ILLibOrgBouncycastleOpenpgpPGPKeyPair;LNSString;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector;LLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder;", "()Ljava/util/Iterator<Ljava/lang/String;>;", "()Ljava/util/Iterator<Llib/org/bouncycastle/openpgp/PGPUserAttributeSubpacketVector;>;", "extractKeyData", "LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor;", "extractPrivateKey", "checksum", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;[BI", "LJavaIoIOException;", "encode", "LJavaIoOutputStream;", "copyWithNewPassword", "LLibOrgBouncycastleOpenpgpPGPSecretKey;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor;LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", "replacePublicKey", "LLibOrgBouncycastleOpenpgpPGPSecretKey;LLibOrgBouncycastleOpenpgpPGPPublicKey;", "parseSecretKeyFromSExpr", "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;LLibOrgBouncycastleOpenpgpPGPPublicKey;", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPSecretKey = { "PGPSecretKey", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 26, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPSecretKey;
}

@end

void LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPSecretKey *self, LibOrgBouncycastleBcpgSecretKeyPacket *secret, LibOrgBouncycastleOpenpgpPGPPublicKey *pub) {
  NSObject_init(self);
  self->secret_ = secret;
  self->pub_ = pub;
}

LibOrgBouncycastleOpenpgpPGPSecretKey *new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleBcpgSecretKeyPacket *secret, LibOrgBouncycastleOpenpgpPGPPublicKey *pub) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_, secret, pub)
}

LibOrgBouncycastleOpenpgpPGPSecretKey *create_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleBcpgSecretKeyPacket *secret, LibOrgBouncycastleOpenpgpPGPPublicKey *pub) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_, secret, pub)
}

void LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSecretKey *self, LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withBoolean_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(self, privKey, pubKey, checksumCalculator, false, keyEncryptor);
}

LibOrgBouncycastleOpenpgpPGPSecretKey *new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, privKey, pubKey, checksumCalculator, keyEncryptor)
}

LibOrgBouncycastleOpenpgpPGPSecretKey *create_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, privKey, pubKey, checksumCalculator, keyEncryptor)
}

void LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withBoolean_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSecretKey *self, LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, jboolean isMasterKey, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  NSObject_init(self);
  self->pub_ = pubKey;
  self->secret_ = LibOrgBouncycastleOpenpgpPGPSecretKey_buildSecretKeyPacketWithBoolean_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(isMasterKey, privKey, pubKey, keyEncryptor, checksumCalculator);
}

LibOrgBouncycastleOpenpgpPGPSecretKey *new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withBoolean_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, jboolean isMasterKey, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withBoolean_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, privKey, pubKey, checksumCalculator, isMasterKey, keyEncryptor)
}

LibOrgBouncycastleOpenpgpPGPSecretKey *create_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withBoolean_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, jboolean isMasterKey, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withBoolean_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, privKey, pubKey, checksumCalculator, isMasterKey, keyEncryptor)
}

LibOrgBouncycastleBcpgSecretKeyPacket *LibOrgBouncycastleOpenpgpPGPSecretKey_buildSecretKeyPacketWithBoolean_withLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(jboolean isMasterKey, LibOrgBouncycastleOpenpgpPGPPrivateKey *privKey, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initialize();
  LibOrgBouncycastleBcpgBCPGObject *secKey = (LibOrgBouncycastleBcpgBCPGObject *) cast_chk([((LibOrgBouncycastleOpenpgpPGPPrivateKey *) nil_chk(privKey)) getPrivateKeyDataPacket], [LibOrgBouncycastleBcpgBCPGObject class]);
  if (secKey == nil) {
    if (isMasterKey) {
      return new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey))->publicPk_, LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [IOSByteArray newArrayWithLength:0]);
    }
    else {
      return new_LibOrgBouncycastleBcpgSecretSubkeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey))->publicPk_, LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [IOSByteArray newArrayWithLength:0]);
    }
  }
  @try {
    JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
    LibOrgBouncycastleBcpgBCPGOutputStream *pOut = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_(bOut);
    [pOut writeObjectWithLibOrgBouncycastleBcpgBCPGObject:secKey];
    IOSByteArray *keyData = [bOut toByteArray];
    jint encAlgorithm = (keyEncryptor != nil) ? [((LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *) nil_chk(keyEncryptor)) getAlgorithm] : LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL;
    if (encAlgorithm != LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL) {
      [pOut writeWithByteArray:LibOrgBouncycastleOpenpgpPGPSecretKey_checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withByteArray_withInt_(checksumCalculator, keyData, ((IOSByteArray *) nil_chk(keyData))->size_)];
      keyData = [bOut toByteArray];
      IOSByteArray *encData = [((LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *) nil_chk(keyEncryptor)) encryptKeyDataWithByteArray:keyData withInt:0 withInt:((IOSByteArray *) nil_chk(keyData))->size_];
      IOSByteArray *iv = [keyEncryptor getCipherIV];
      LibOrgBouncycastleBcpgS2K *s2k = [keyEncryptor getS2K];
      jint s2kUsage;
      if (checksumCalculator != nil) {
        if ([checksumCalculator getAlgorithm] != LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1) {
          @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"only SHA1 supported for key checksum calculations.");
        }
        s2kUsage = LibOrgBouncycastleBcpgSecretKeyPacket_USAGE_SHA1;
      }
      else {
        s2kUsage = LibOrgBouncycastleBcpgSecretKeyPacket_USAGE_CHECKSUM;
      }
      if (isMasterKey) {
        return new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey))->publicPk_, encAlgorithm, s2kUsage, s2k, iv, encData);
      }
      else {
        return new_LibOrgBouncycastleBcpgSecretSubkeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey))->publicPk_, encAlgorithm, s2kUsage, s2k, iv, encData);
      }
    }
    else {
      [pOut writeWithByteArray:LibOrgBouncycastleOpenpgpPGPSecretKey_checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withByteArray_withInt_(nil, keyData, ((IOSByteArray *) nil_chk(keyData))->size_)];
      if (isMasterKey) {
        return new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey))->publicPk_, encAlgorithm, nil, nil, [bOut toByteArray]);
      }
      else {
        return new_LibOrgBouncycastleBcpgSecretSubkeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey))->publicPk_, encAlgorithm, nil, nil, [bOut toByteArray]);
      }
    }
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"Exception encrypting key", e);
  }
}

void LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSecretKey *self, jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> certificationSignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(self, certificationLevel, keyPair, id_, nil, hashedPcks, unhashedPcks, certificationSignerBuilder, keyEncryptor);
}

LibOrgBouncycastleOpenpgpPGPSecretKey *new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> certificationSignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, certificationLevel, keyPair, id_, hashedPcks, unhashedPcks, certificationSignerBuilder, keyEncryptor)
}

LibOrgBouncycastleOpenpgpPGPSecretKey *create_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> certificationSignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, certificationLevel, keyPair, id_, hashedPcks, unhashedPcks, certificationSignerBuilder, keyEncryptor)
}

void LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSecretKey *self, jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair, NSString *id_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> certificationSignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleOpenpgpPGPPrivateKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withBoolean_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(self, [((LibOrgBouncycastleOpenpgpPGPKeyPair *) nil_chk(keyPair)) getPrivateKey], LibOrgBouncycastleOpenpgpPGPSecretKey_certifiedPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_(certificationLevel, keyPair, id_, hashedPcks, unhashedPcks, certificationSignerBuilder), checksumCalculator, true, keyEncryptor);
}

LibOrgBouncycastleOpenpgpPGPSecretKey *new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair, NSString *id_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> certificationSignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, certificationLevel, keyPair, id_, checksumCalculator, hashedPcks, unhashedPcks, certificationSignerBuilder, keyEncryptor)
}

LibOrgBouncycastleOpenpgpPGPSecretKey *create_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair, NSString *id_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> checksumCalculator, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> certificationSignerBuilder, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *keyEncryptor) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPSecretKey, initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_, certificationLevel, keyPair, id_, checksumCalculator, hashedPcks, unhashedPcks, certificationSignerBuilder, keyEncryptor)
}

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpPGPSecretKey_certifiedPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_(jint certificationLevel, LibOrgBouncycastleOpenpgpPGPKeyPair *keyPair, NSString *id_, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedPcks, LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *unhashedPcks, id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> certificationSignerBuilder) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initialize();
  LibOrgBouncycastleOpenpgpPGPSignatureGenerator *sGen;
  @try {
    sGen = new_LibOrgBouncycastleOpenpgpPGPSignatureGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_(certificationSignerBuilder);
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$@", @"creating signature generator: ", e), e);
  }
  [((LibOrgBouncycastleOpenpgpPGPSignatureGenerator *) nil_chk(sGen)) init__WithInt:certificationLevel withLibOrgBouncycastleOpenpgpPGPPrivateKey:[((LibOrgBouncycastleOpenpgpPGPKeyPair *) nil_chk(keyPair)) getPrivateKey]];
  [sGen setHashedSubpacketsWithLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:hashedPcks];
  [sGen setUnhashedSubpacketsWithLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:unhashedPcks];
  @try {
    LibOrgBouncycastleOpenpgpPGPSignature *certification = [sGen generateCertificationWithNSString:id_ withLibOrgBouncycastleOpenpgpPGPPublicKey:[keyPair getPublicKey]];
    return LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withLibOrgBouncycastleOpenpgpPGPSignature_([keyPair getPublicKey], id_, certification);
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$@", @"exception doing certification: ", e), e);
  }
}

IOSByteArray *LibOrgBouncycastleOpenpgpPGPSecretKey_extractKeyDataWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_(LibOrgBouncycastleOpenpgpPGPSecretKey *self, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *decryptorFactory) {
  IOSByteArray *encData = [((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getSecretKeyData];
  IOSByteArray *data = nil;
  if ([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getEncAlgorithm] != LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL) {
    @try {
      if ([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getPublicKeyPacket])) getVersion] == 4) {
        IOSByteArray *key = [((LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *) nil_chk(decryptorFactory)) makeKeyFromPassPhraseWithInt:[((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getEncAlgorithm] withLibOrgBouncycastleBcpgS2K:[((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getS2K]];
        data = [decryptorFactory recoverKeyDataWithInt:[((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getEncAlgorithm] withByteArray:key withByteArray:[((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getIV] withByteArray:encData withInt:0 withInt:((IOSByteArray *) nil_chk(encData))->size_];
        jboolean useSHA1 = [((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getS2KUsage] == LibOrgBouncycastleBcpgSecretKeyPacket_USAGE_SHA1;
        IOSByteArray *check = LibOrgBouncycastleOpenpgpPGPSecretKey_checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withByteArray_withInt_(useSHA1 ? [decryptorFactory getChecksumCalculatorWithInt:LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1] : nil, data, (useSHA1) ? ((IOSByteArray *) nil_chk(data))->size_ - 20 : ((IOSByteArray *) nil_chk(data))->size_ - 2);
        for (jint i = 0; i != ((IOSByteArray *) nil_chk(check))->size_; i++) {
          if (IOSByteArray_Get(check, i) != IOSByteArray_Get(data, data->size_ - check->size_ + i)) {
            @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I$I", @"checksum mismatch at ", i, @" of ", check->size_));
          }
        }
      }
      else {
        IOSByteArray *key = [((LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *) nil_chk(decryptorFactory)) makeKeyFromPassPhraseWithInt:[((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getEncAlgorithm] withLibOrgBouncycastleBcpgS2K:[((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getS2K]];
        data = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(encData))->size_];
        IOSByteArray *iv = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getIV]))->size_];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getIV], 0, iv, 0, iv->size_);
        jint pos = 0;
        for (jint i = 0; i != 4; i++) {
          jint encLen = (((JreLShift32(IOSByteArray_Get(encData, pos), 8)) | (IOSByteArray_Get(encData, pos + 1) & (jint) 0xff)) + 7) / 8;
          *IOSByteArray_GetRef(data, pos) = IOSByteArray_Get(encData, pos);
          *IOSByteArray_GetRef(data, pos + 1) = IOSByteArray_Get(encData, pos + 1);
          IOSByteArray *tmp = [decryptorFactory recoverKeyDataWithInt:[((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(self->secret_)) getEncAlgorithm] withByteArray:key withByteArray:iv withByteArray:encData withInt:pos + 2 withInt:encLen];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmp, 0, data, pos + 2, ((IOSByteArray *) nil_chk(tmp))->size_);
          pos += 2 + encLen;
          if (i != 3) {
            JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(encData, pos - iv->size_, iv, 0, iv->size_);
          }
        }
        *IOSByteArray_GetRef(data, pos) = IOSByteArray_Get(encData, pos);
        *IOSByteArray_GetRef(data, pos + 1) = IOSByteArray_Get(encData, pos + 1);
        jint cs = ((JreLShift32(IOSByteArray_Get(encData, pos), 8)) & (jint) 0xff00) | (IOSByteArray_Get(encData, pos + 1) & (jint) 0xff);
        jint calcCs = 0;
        for (jint j = 0; j < data->size_ - 2; j++) {
          calcCs += IOSByteArray_Get(data, j) & (jint) 0xff;
        }
        calcCs &= (jint) 0xffff;
        if (calcCs != cs) {
          @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$$$$", @"checksum mismatch: passphrase wrong, expected ", JavaLangInteger_toHexStringWithInt_(cs), @" found ", JavaLangInteger_toHexStringWithInt_(calcCs)));
        }
      }
    }
    @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
      @throw e;
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"Exception decrypting key", e);
    }
  }
  else {
    data = encData;
  }
  return data;
}

IOSByteArray *LibOrgBouncycastleOpenpgpPGPSecretKey_checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withByteArray_withInt_(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digCalc, IOSByteArray *bytes, jint length) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initialize();
  if (digCalc != nil) {
    JavaIoOutputStream *dOut = [digCalc getOutputStream];
    @try {
      [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:bytes withInt:0 withInt:length];
      [dOut close];
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"checksum digest calculation failed: ", [e getMessage]), e);
    }
    return [digCalc getDigest];
  }
  else {
    jint checksum = 0;
    for (jint i = 0; i != length; i++) {
      checksum += IOSByteArray_Get(nil_chk(bytes), i) & (jint) 0xff;
    }
    IOSByteArray *check = [IOSByteArray newArrayWithLength:2];
    *IOSByteArray_GetRef(check, 0) = (jbyte) (JreRShift32(checksum, 8));
    *IOSByteArray_GetRef(check, 1) = (jbyte) checksum;
    return check;
  }
}

LibOrgBouncycastleOpenpgpPGPSecretKey *LibOrgBouncycastleOpenpgpPGPSecretKey_copyWithNewPasswordWithLibOrgBouncycastleOpenpgpPGPSecretKey_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSecretKey *key, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *oldKeyDecryptor, LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *newKeyEncryptor) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initialize();
  if ([((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(key)) isPrivateKeyEmpty]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"no private key in this SecretKey - public key present only.");
  }
  IOSByteArray *rawKeyData = LibOrgBouncycastleOpenpgpPGPSecretKey_extractKeyDataWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor_(key, oldKeyDecryptor);
  jint s2kUsage = [((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(key->secret_)) getS2KUsage];
  IOSByteArray *iv = nil;
  LibOrgBouncycastleBcpgS2K *s2k = nil;
  IOSByteArray *keyData;
  jint newEncAlgorithm = LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL;
  if (newKeyEncryptor == nil || [newKeyEncryptor getAlgorithm] == LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL) {
    s2kUsage = LibOrgBouncycastleBcpgSecretKeyPacket_USAGE_NONE;
    if ([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(key->secret_)) getS2KUsage] == LibOrgBouncycastleBcpgSecretKeyPacket_USAGE_SHA1) {
      keyData = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(rawKeyData))->size_ - 18];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(rawKeyData, 0, keyData, 0, keyData->size_ - 2);
      IOSByteArray *check = LibOrgBouncycastleOpenpgpPGPSecretKey_checksumWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withByteArray_withInt_(nil, keyData, keyData->size_ - 2);
      *IOSByteArray_GetRef(keyData, keyData->size_ - 2) = IOSByteArray_Get(nil_chk(check), 0);
      *IOSByteArray_GetRef(keyData, keyData->size_ - 1) = IOSByteArray_Get(check, 1);
    }
    else {
      keyData = rawKeyData;
    }
  }
  else {
    if (s2kUsage == LibOrgBouncycastleBcpgSecretKeyPacket_USAGE_NONE) {
      s2kUsage = LibOrgBouncycastleBcpgSecretKeyPacket_USAGE_CHECKSUM;
    }
    if ([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(key->secret_)) getPublicKeyPacket])) getVersion] < 4) {
      IOSByteArray *encKey = [newKeyEncryptor getKey];
      keyData = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(rawKeyData))->size_];
      if ([newKeyEncryptor getHashAlgorithm] != LibOrgBouncycastleBcpgHashAlgorithmTags_MD5) {
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"MD5 Digest Calculator required for version 3 key encryptor.");
      }
      jint pos = 0;
      for (jint i = 0; i != 4; i++) {
        jint encLen = (((JreLShift32(IOSByteArray_Get(rawKeyData, pos), 8)) | (IOSByteArray_Get(rawKeyData, pos + 1) & (jint) 0xff)) + 7) / 8;
        *IOSByteArray_GetRef(keyData, pos) = IOSByteArray_Get(rawKeyData, pos);
        *IOSByteArray_GetRef(keyData, pos + 1) = IOSByteArray_Get(rawKeyData, pos + 1);
        IOSByteArray *tmp;
        if (i == 0) {
          tmp = [newKeyEncryptor encryptKeyDataWithByteArray:encKey withByteArray:rawKeyData withInt:pos + 2 withInt:encLen];
          iv = [newKeyEncryptor getCipherIV];
        }
        else {
          IOSByteArray *tmpIv = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(iv))->size_];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keyData, pos - iv->size_, tmpIv, 0, tmpIv->size_);
          tmp = [newKeyEncryptor encryptKeyDataWithByteArray:encKey withByteArray:tmpIv withByteArray:rawKeyData withInt:pos + 2 withInt:encLen];
        }
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmp, 0, keyData, pos + 2, ((IOSByteArray *) nil_chk(tmp))->size_);
        pos += 2 + encLen;
      }
      *IOSByteArray_GetRef(keyData, pos) = IOSByteArray_Get(rawKeyData, pos);
      *IOSByteArray_GetRef(keyData, pos + 1) = IOSByteArray_Get(rawKeyData, pos + 1);
      s2k = [newKeyEncryptor getS2K];
      newEncAlgorithm = [newKeyEncryptor getAlgorithm];
    }
    else {
      keyData = [newKeyEncryptor encryptKeyDataWithByteArray:rawKeyData withInt:0 withInt:((IOSByteArray *) nil_chk(rawKeyData))->size_];
      iv = [newKeyEncryptor getCipherIV];
      s2k = [newKeyEncryptor getS2K];
      newEncAlgorithm = [newKeyEncryptor getAlgorithm];
    }
  }
  LibOrgBouncycastleBcpgSecretKeyPacket *secret;
  if ([key->secret_ isKindOfClass:[LibOrgBouncycastleBcpgSecretSubkeyPacket class]]) {
    secret = new_LibOrgBouncycastleBcpgSecretSubkeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(key->secret_)) getPublicKeyPacket], newEncAlgorithm, s2kUsage, s2k, iv, keyData);
  }
  else {
    secret = new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_([((LibOrgBouncycastleBcpgSecretKeyPacket *) nil_chk(key->secret_)) getPublicKeyPacket], newEncAlgorithm, s2kUsage, s2k, iv, keyData);
  }
  return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(secret, key->pub_);
}

LibOrgBouncycastleOpenpgpPGPSecretKey *LibOrgBouncycastleOpenpgpPGPSecretKey_replacePublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey_withLibOrgBouncycastleOpenpgpPGPPublicKey_(LibOrgBouncycastleOpenpgpPGPSecretKey *secretKey, LibOrgBouncycastleOpenpgpPGPPublicKey *publicKey) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initialize();
  if ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(publicKey)) getKeyID] != [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(secretKey)) getKeyID]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"keyIDs do not match");
  }
  return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(secretKey->secret_, publicKey);
}

LibOrgBouncycastleOpenpgpPGPSecretKey *LibOrgBouncycastleOpenpgpPGPSecretKey_parseSecretKeyFromSExprWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_withLibOrgBouncycastleOpenpgpPGPPublicKey_(JavaIoInputStream *inputStream, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initialize();
  return [new_LibOrgBouncycastleGpgSExprParser_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_(nil) parseSecretKeyWithJavaIoInputStream:inputStream withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:keyProtectionRemoverFactory withLibOrgBouncycastleOpenpgpPGPPublicKey:pubKey];
}

LibOrgBouncycastleOpenpgpPGPSecretKey *LibOrgBouncycastleOpenpgpPGPSecretKey_parseSecretKeyFromSExprWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inputStream, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  LibOrgBouncycastleOpenpgpPGPSecretKey_initialize();
  return [new_LibOrgBouncycastleGpgSExprParser_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_(nil) parseSecretKeyWithJavaIoInputStream:inputStream withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:keyProtectionRemoverFactory withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:fingerPrintCalculator];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPSecretKey)
