//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/x509/PKIXCertPath.java
//

#ifndef PKIXCertPath_H
#define PKIXCertPath_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/security/cert/CertPath.h"

@class IOSByteArray;
@class JavaIoInputStream;
@protocol JavaUtilIterator;
@protocol JavaUtilList;

@interface LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath : JavaSecurityCertCertPath
@property (readonly, class) id<JavaUtilList> certPathEncodings NS_SWIFT_NAME(certPathEncodings);

+ (id<JavaUtilList>)certPathEncodings;

#pragma mark Public

- (id<JavaUtilList>)getCertificates;

- (IOSByteArray *)getEncoded;

- (IOSByteArray *)getEncodedWithNSString:(NSString *)encoding;

- (id<JavaUtilIterator>)getEncodings;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inStream
                                       withNSString:(NSString *)encoding;

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)certificates;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath)

inline id<JavaUtilList> LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_get_certPathEncodings(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath, certPathEncodings, id<JavaUtilList>)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<JavaUtilList> certificates);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *new_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(id<JavaUtilList> certificates) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *create_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(id<JavaUtilList> certificates);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *self, JavaIoInputStream *inStream, NSString *encoding);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *new_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *inStream, NSString *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath *create_LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *inStream, NSString *encoding);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PKIXCertPath_H
