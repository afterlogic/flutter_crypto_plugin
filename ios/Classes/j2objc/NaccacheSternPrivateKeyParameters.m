//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/NaccacheSternPrivateKeyParameters.java
//

#include "J2ObjC_source.h"
#include "NaccacheSternKeyParameters.h"
#include "NaccacheSternPrivateKeyParameters.h"
#include "java/math/BigInteger.h"
#include "java/util/Vector.h"

@interface LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters () {
 @public
  JavaMathBigInteger *phi_n_;
  JavaUtilVector *smallPrimes_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters, phi_n_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters, smallPrimes_, JavaUtilVector *)

@implementation LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)g
                    withJavaMathBigInteger:(JavaMathBigInteger *)n
                                   withInt:(jint)lowerSigmaBound
                        withJavaUtilVector:(JavaUtilVector *)smallPrimes
                    withJavaMathBigInteger:(JavaMathBigInteger *)phi_n {
  LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaUtilVector_withJavaMathBigInteger_(self, g, n, lowerSigmaBound, smallPrimes, phi_n);
  return self;
}

- (JavaMathBigInteger *)getPhi_n {
  return phi_n_;
}

- (JavaUtilVector *)getSmallPrimes {
  return smallPrimes_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withInt:withJavaUtilVector:withJavaMathBigInteger:);
  methods[1].selector = @selector(getPhi_n);
  methods[2].selector = @selector(getSmallPrimes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "phi_n_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "smallPrimes_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;ILJavaUtilVector;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters = { "NaccacheSternPrivateKeyParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters;
}

@end

void LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaUtilVector_withJavaMathBigInteger_(LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters *self, JavaMathBigInteger *g, JavaMathBigInteger *n, jint lowerSigmaBound, JavaUtilVector *smallPrimes, JavaMathBigInteger *phi_n) {
  LibOrgBouncycastleCryptoParamsNaccacheSternKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(self, true, g, n, lowerSigmaBound);
  self->smallPrimes_ = smallPrimes;
  self->phi_n_ = phi_n;
}

LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters *new_LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaUtilVector_withJavaMathBigInteger_(JavaMathBigInteger *g, JavaMathBigInteger *n, jint lowerSigmaBound, JavaUtilVector *smallPrimes, JavaMathBigInteger *phi_n) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaUtilVector_withJavaMathBigInteger_, g, n, lowerSigmaBound, smallPrimes, phi_n)
}

LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters *create_LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaUtilVector_withJavaMathBigInteger_(JavaMathBigInteger *g, JavaMathBigInteger *n, jint lowerSigmaBound, JavaUtilVector *smallPrimes, JavaMathBigInteger *phi_n) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaUtilVector_withJavaMathBigInteger_, g, n, lowerSigmaBound, smallPrimes, phi_n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsNaccacheSternPrivateKeyParameters)
