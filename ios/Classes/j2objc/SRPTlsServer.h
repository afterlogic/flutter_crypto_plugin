//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SRPTlsServer.java
//

#ifndef SRPTlsServer_H
#define SRPTlsServer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsServer.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaUtilHashtable;
@class LibOrgBouncycastleCryptoTlsTlsSRPLoginParameters;
@protocol LibOrgBouncycastleCryptoTlsTlsCipherFactory;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;
@protocol LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager;
@protocol LibOrgBouncycastleCryptoTlsTlsSignerCredentials;

@interface LibOrgBouncycastleCryptoTlsSRPTlsServer : LibOrgBouncycastleCryptoTlsAbstractTlsServer {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager_;
  IOSByteArray *srpIdentity_;
  LibOrgBouncycastleCryptoTlsTlsSRPLoginParameters *loginParameters_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory
                         withLibOrgBouncycastleCryptoTlsTlsSRPIdentityManager:(id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager>)srpIdentityManager;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsSRPIdentityManager:(id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager>)srpIdentityManager;

- (id<LibOrgBouncycastleCryptoTlsTlsCredentials>)getCredentials;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange;

- (jint)getSelectedCipherSuite;

- (void)processClientExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createSRPKeyExchangeWithInt:(jint)keyExchange;

- (IOSIntArray *)getCipherSuites;

- (id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>)getDSASignerCredentials;

- (id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>)getRSASignerCredentials;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsSRPTlsServer)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSRPTlsServer, srpIdentityManager_, id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSRPTlsServer, srpIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSRPTlsServer, loginParameters_, LibOrgBouncycastleCryptoTlsTlsSRPLoginParameters *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSRPTlsServer_initWithLibOrgBouncycastleCryptoTlsTlsSRPIdentityManager_(LibOrgBouncycastleCryptoTlsSRPTlsServer *self, id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsServer *new_LibOrgBouncycastleCryptoTlsSRPTlsServer_initWithLibOrgBouncycastleCryptoTlsTlsSRPIdentityManager_(id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsServer *create_LibOrgBouncycastleCryptoTlsSRPTlsServer_initWithLibOrgBouncycastleCryptoTlsTlsSRPIdentityManager_(id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSRPTlsServer_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPIdentityManager_(LibOrgBouncycastleCryptoTlsSRPTlsServer *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsServer *new_LibOrgBouncycastleCryptoTlsSRPTlsServer_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPIdentityManager_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRPTlsServer *create_LibOrgBouncycastleCryptoTlsSRPTlsServer_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_withLibOrgBouncycastleCryptoTlsTlsSRPIdentityManager_(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory, id<LibOrgBouncycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsSRPTlsServer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SRPTlsServer_H
