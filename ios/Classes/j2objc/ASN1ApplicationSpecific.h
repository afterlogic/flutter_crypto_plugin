//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ASN1ApplicationSpecific.java
//

#ifndef ASN1ApplicationSpecific_H
#define ASN1ApplicationSpecific_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Primitive.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleAsn1ASN1OutputStream;

@interface LibOrgBouncycastleAsn1ASN1ApplicationSpecific : LibOrgBouncycastleAsn1ASN1Primitive {
 @public
  jboolean isConstructed_;
  jint tag_;
  IOSByteArray *octets_;
}

#pragma mark Public

- (jint)getApplicationTag;

- (IOSByteArray *)getContents;

+ (LibOrgBouncycastleAsn1ASN1ApplicationSpecific *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1ASN1Primitive *)getObject;

- (LibOrgBouncycastleAsn1ASN1Primitive *)getObjectWithInt:(jint)derTagNo;

- (NSUInteger)hash;

- (jboolean)isConstructed;

- (NSString *)description;

#pragma mark Protected

+ (jint)getLengthOfHeaderWithByteArray:(IOSByteArray *)data;

#pragma mark Package-Private

- (instancetype __nonnull)initWithBoolean:(jboolean)isConstructed
                                  withInt:(jint)tag
                            withByteArray:(IOSByteArray *)octets;

- (jboolean)asn1EqualsWithLibOrgBouncycastleAsn1ASN1Primitive:(LibOrgBouncycastleAsn1ASN1Primitive *)o;

- (void)encodeWithLibOrgBouncycastleAsn1ASN1OutputStream:(LibOrgBouncycastleAsn1ASN1OutputStream *)outArg;

- (jint)encodedLength;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1ASN1ApplicationSpecific)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1ASN1ApplicationSpecific, octets_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1ASN1ApplicationSpecific_initWithBoolean_withInt_withByteArray_(LibOrgBouncycastleAsn1ASN1ApplicationSpecific *self, jboolean isConstructed, jint tag, IOSByteArray *octets);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ApplicationSpecific *LibOrgBouncycastleAsn1ASN1ApplicationSpecific_getInstanceWithId_(id obj);

FOUNDATION_EXPORT jint LibOrgBouncycastleAsn1ASN1ApplicationSpecific_getLengthOfHeaderWithByteArray_(IOSByteArray *data);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1ASN1ApplicationSpecific)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ASN1ApplicationSpecific_H
