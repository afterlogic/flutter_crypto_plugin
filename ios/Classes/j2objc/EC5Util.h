//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util.java
//

#ifndef EC5Util_H
#define EC5Util_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaSecuritySpecECParameterSpec;
@class JavaSecuritySpecECPoint;
@class JavaSecuritySpecEllipticCurve;
@class LibOrgBouncycastleAsn1X9X962Parameters;
@class LibOrgBouncycastleAsn1X9X9ECParameters;
@class LibOrgBouncycastleCryptoParamsECDomainParameters;
@class LibOrgBouncycastleJceSpecECParameterSpec;
@class LibOrgBouncycastleMathEcECCurve;
@class LibOrgBouncycastleMathEcECPoint;
@protocol JavaSecuritySpecECField;
@protocol LibOrgBouncycastleJcajceProviderConfigProviderConfiguration;
@protocol LibOrgBouncycastleMathFieldFiniteField;

@interface LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (JavaSecuritySpecEllipticCurve *)convertCurveWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                                                                     withByteArray:(IOSByteArray *)seed;

+ (LibOrgBouncycastleMathEcECCurve *)convertCurveWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ec;

+ (id<JavaSecuritySpecECField>)convertFieldWithLibOrgBouncycastleMathFieldFiniteField:(id<LibOrgBouncycastleMathFieldFiniteField>)field;

+ (LibOrgBouncycastleMathEcECPoint *)convertPointWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                                                         withJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)point
                                                                         withBoolean:(jboolean)withCompression;

+ (LibOrgBouncycastleMathEcECPoint *)convertPointWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)ecSpec
                                                         withJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)point
                                                                         withBoolean:(jboolean)withCompression;

+ (JavaSecuritySpecECPoint *)convertPointWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point;

+ (LibOrgBouncycastleJceSpecECParameterSpec *)convertSpecWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)ecSpec
                                                                                 withBoolean:(jboolean)withCompression;

+ (JavaSecuritySpecECParameterSpec *)convertSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                                     withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec;

+ (JavaSecuritySpecECParameterSpec *)convertToSpecWithLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)domainParameters;

+ (JavaSecuritySpecECParameterSpec *)convertToSpecWithLibOrgBouncycastleAsn1X9X962Parameters:(LibOrgBouncycastleAsn1X9X962Parameters *)params
                                                         withLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve;

+ (JavaSecuritySpecECParameterSpec *)convertToSpecWithLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)domainParameters;

+ (LibOrgBouncycastleMathEcECCurve *)getCurveWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                  withLibOrgBouncycastleAsn1X9X962Parameters:(LibOrgBouncycastleAsn1X9X962Parameters *)params;

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                                     withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_init(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util *new_LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util *create_LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_init(void);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECCurve *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getCurveWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleAsn1X9X962Parameters_(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, LibOrgBouncycastleAsn1X9X962Parameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaSecuritySpecECParameterSpec_(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, JavaSecuritySpecECParameterSpec *params);

FOUNDATION_EXPORT JavaSecuritySpecECParameterSpec *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertToSpecWithLibOrgBouncycastleAsn1X9X962Parameters_withLibOrgBouncycastleMathEcECCurve_(LibOrgBouncycastleAsn1X9X962Parameters *params, LibOrgBouncycastleMathEcECCurve *curve);

FOUNDATION_EXPORT JavaSecuritySpecECParameterSpec *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertToSpecWithLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleAsn1X9X9ECParameters *domainParameters);

FOUNDATION_EXPORT JavaSecuritySpecECParameterSpec *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertToSpecWithLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParamsECDomainParameters *domainParameters);

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_(LibOrgBouncycastleMathEcECCurve *curve, IOSByteArray *seed);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECCurve *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_(JavaSecuritySpecEllipticCurve *ec);

FOUNDATION_EXPORT id<JavaSecuritySpecECField> LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertFieldWithLibOrgBouncycastleMathFieldFiniteField_(id<LibOrgBouncycastleMathFieldFiniteField> field);

FOUNDATION_EXPORT JavaSecuritySpecECParameterSpec *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(JavaSecuritySpecEllipticCurve *ellipticCurve, LibOrgBouncycastleJceSpecECParameterSpec *spec);

FOUNDATION_EXPORT LibOrgBouncycastleJceSpecECParameterSpec *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_(JavaSecuritySpecECParameterSpec *ecSpec, jboolean withCompression);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_(JavaSecuritySpecECParameterSpec *ecSpec, JavaSecuritySpecECPoint *point, jboolean withCompression);

FOUNDATION_EXPORT LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECCurve_withJavaSecuritySpecECPoint_withBoolean_(LibOrgBouncycastleMathEcECCurve *curve, JavaSecuritySpecECPoint *point, jboolean withCompression);

FOUNDATION_EXPORT JavaSecuritySpecECPoint *LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *point);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // EC5Util_H
