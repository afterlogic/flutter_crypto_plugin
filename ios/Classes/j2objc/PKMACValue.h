//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/PKMACValue.java
//

#ifndef PKMACValue_H
#define PKMACValue_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@class LibOrgBouncycastleAsn1CmpPBMParameter;
@class LibOrgBouncycastleAsn1DERBitString;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;

@interface LibOrgBouncycastleAsn1CrmfPKMACValue : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)aid
                                         withLibOrgBouncycastleAsn1DERBitString:(LibOrgBouncycastleAsn1DERBitString *)value;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmpPBMParameter:(LibOrgBouncycastleAsn1CmpPBMParameter *)params
                                 withLibOrgBouncycastleAsn1DERBitString:(LibOrgBouncycastleAsn1DERBitString *)value;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getAlgId;

+ (LibOrgBouncycastleAsn1CrmfPKMACValue *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                    withBoolean:(jboolean)isExplicit;

+ (LibOrgBouncycastleAsn1CrmfPKMACValue *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1DERBitString *)getValue;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CrmfPKMACValue)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKMACValue *LibOrgBouncycastleAsn1CrmfPKMACValue_getInstanceWithId_(id o);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKMACValue *LibOrgBouncycastleAsn1CrmfPKMACValue_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean isExplicit);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfPKMACValue_initWithLibOrgBouncycastleAsn1CmpPBMParameter_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1CrmfPKMACValue *self, LibOrgBouncycastleAsn1CmpPBMParameter *params, LibOrgBouncycastleAsn1DERBitString *value);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKMACValue *new_LibOrgBouncycastleAsn1CrmfPKMACValue_initWithLibOrgBouncycastleAsn1CmpPBMParameter_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1CmpPBMParameter *params, LibOrgBouncycastleAsn1DERBitString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKMACValue *create_LibOrgBouncycastleAsn1CrmfPKMACValue_initWithLibOrgBouncycastleAsn1CmpPBMParameter_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1CmpPBMParameter *params, LibOrgBouncycastleAsn1DERBitString *value);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfPKMACValue_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1CrmfPKMACValue *self, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *aid, LibOrgBouncycastleAsn1DERBitString *value);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKMACValue *new_LibOrgBouncycastleAsn1CrmfPKMACValue_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *aid, LibOrgBouncycastleAsn1DERBitString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfPKMACValue *create_LibOrgBouncycastleAsn1CrmfPKMACValue_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1DERBitString_(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *aid, LibOrgBouncycastleAsn1DERBitString *value);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfPKMACValue)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PKMACValue_H
