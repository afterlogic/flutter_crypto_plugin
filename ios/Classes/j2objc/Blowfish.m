//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/Blowfish.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmProvider.h"
#include "BaseBlockCipher.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "Blowfish.h"
#include "BlowfishEngine.h"
#include "CBCBlockCipher.h"
#include "CMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "IOSClass.h"
#include "IvAlgorithmParameters.h"
#include "J2ObjC_source.h"
#include "MiscObjectIdentifiers.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricBlowfish ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricBlowfish_init(LibOrgBouncycastleJcajceProviderSymmetricBlowfish *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricBlowfish *new_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricBlowfish *create_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricBlowfish

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricBlowfish_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB;LLibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC;LLibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC;LLibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams;LLibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricBlowfish = { "Blowfish", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricBlowfish;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricBlowfish_init(LibOrgBouncycastleJcajceProviderSymmetricBlowfish *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish *new_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish, init)
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish *create_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricBlowfish)

@implementation LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricBlowfish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB = { "ECB", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB_init(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, new_LibOrgBouncycastleCryptoEnginesBlowfishEngine_init());
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB *new_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB, init)
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB *create_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_ECB)

@implementation LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricBlowfish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC = { "CBC", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC_init(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesBlowfishEngine_init()), 64);
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC *new_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC, init)
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC *create_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CBC)

@implementation LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricBlowfish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC = { "CMAC", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC_init(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesBlowfishEngine_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC *new_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC, init)
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC *create_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_CMAC)

@implementation LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricBlowfish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"Blowfish", 128, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)engineToString {
  return @"Blowfish IV";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricBlowfish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams = { "AlgParams", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams_init(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilIvAlgorithmParameters_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams *new_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams, init)
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams *create_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_AlgParams)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"Mac.BLOWFISHCMAC" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_PREFIX, @"$CMAC")];
  [provider addAlgorithmWithNSString:@"Cipher.BLOWFISH" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_PREFIX, @"$ECB")];
  [provider addAlgorithmWithNSString:@"Cipher" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, cryptlib_algorithm_blowfish_CBC) withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_PREFIX, @"$CBC")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.BLOWFISH" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.KeyGenerator" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, cryptlib_algorithm_blowfish_CBC) withNSString:@"BLOWFISH"];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.BLOWFISH" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_PREFIX, @"$AlgParams")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.AlgorithmParameters" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1MiscMiscObjectIdentifiers, cryptlib_algorithm_blowfish_CBC) withNSString:@"BLOWFISH"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricBlowfish;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricBlowfish_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricBlowfish_Mappings)
