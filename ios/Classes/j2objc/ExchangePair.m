//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/ExchangePair.java
//

#include "Arrays.h"
#include "AsymmetricKeyParameter.h"
#include "ExchangePair.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastlePqcCryptoExchangePair () {
 @public
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicKey_;
  IOSByteArray *shared_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoExchangePair, publicKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoExchangePair, shared_, IOSByteArray *)

@implementation LibOrgBouncycastlePqcCryptoExchangePair

- (instancetype)initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey
                                                               withByteArray:(IOSByteArray *)shared {
  LibOrgBouncycastlePqcCryptoExchangePair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(self, publicKey, shared);
  return self;
}

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKey {
  return publicKey_;
}

- (IOSByteArray *)getSharedValue {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(shared_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[1].selector = @selector(getPublicKey);
  methods[2].selector = @selector(getSharedValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publicKey_", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "shared_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoExchangePair = { "ExchangePair", "lib.org.bouncycastle.pqc.crypto", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoExchangePair;
}

@end

void LibOrgBouncycastlePqcCryptoExchangePair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(LibOrgBouncycastlePqcCryptoExchangePair *self, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicKey, IOSByteArray *shared) {
  NSObject_init(self);
  self->publicKey_ = publicKey;
  self->shared_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(shared);
}

LibOrgBouncycastlePqcCryptoExchangePair *new_LibOrgBouncycastlePqcCryptoExchangePair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicKey, IOSByteArray *shared) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoExchangePair, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_, publicKey, shared)
}

LibOrgBouncycastlePqcCryptoExchangePair *create_LibOrgBouncycastlePqcCryptoExchangePair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicKey, IOSByteArray *shared) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoExchangePair, initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_, publicKey, shared)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoExchangePair)
