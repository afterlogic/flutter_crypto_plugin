//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.java
//

#ifndef SparseTernaryPolynomial_H
#define SparseTernaryPolynomial_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TernaryPolynomial.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;
@class LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;

@interface LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial : NSObject < LibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial >

#pragma mark Public

- (instancetype __nonnull)initWithIntArray:(IOSIntArray *)coeffs;

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)intPoly;

- (void)clear;

- (jboolean)isEqual:(id)obj;

+ (LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)fromBinaryWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                            withInt:(jint)N
                                                                                            withInt:(jint)numOnes
                                                                                            withInt:(jint)numNegOnes;

+ (LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                                                  withInt:(jint)numOnes
                                                                                  withInt:(jint)numNegOnes
                                                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (IOSIntArray *)getNegOnes;

- (IOSIntArray *)getOnes;

- (NSUInteger)hash;

- (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                       withInt:(jint)modulus;

- (jint)size;

- (IOSByteArray *)toBinary;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial;

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)N
                         withIntArray:(IOSIntArray *)ones
                         withIntArray:(IOSIntArray *)negOnes;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, jint N, IOSIntArray *ones, IOSIntArray *negOnes);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(jint N, IOSIntArray *ones, IOSIntArray *negOnes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(jint N, IOSIntArray *ones, IOSIntArray *negOnes);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, IOSIntArray *coeffs);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_(JavaIoInputStream *is, jint N, jint numOnes, jint numNegOnes);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SparseTernaryPolynomial_H
