//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/x509/CertPathValidatorUtilities.java
//

#include "ASN1Encodable.h"
#include "ASN1Enumerated.h"
#include "ASN1InputStream.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1OutputStream.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "AnnotatedException.h"
#include "AttributeCertificateIssuer.h"
#include "BouncyCastleProvider.h"
#include "CRLReason.h"
#include "CertPathValidatorUtilities.h"
#include "CertStatus.h"
#include "CertificateFactory.h"
#include "Encodable.h"
#include "ExtCertPathValidatorException.h"
#include "Extension.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuingDistributionPoint.h"
#include "J2ObjC_source.h"
#include "PKIXCRLUtil.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXPolicyNode.h"
#include "PolicyInformation.h"
#include "Store.h"
#include "StoreException.h"
#include "SubjectPublicKeyInfo.h"
#include "X509AttributeCertStoreSelector.h"
#include "X509AttributeCertificate.h"
#include "X509CertStoreSelector.h"
#include "X509Extension.h"
#include "X509Store.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/KeyFactory.h"
#include "java/security/Principal.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/CertStoreException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/PKIXParameters.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/PolicyQualifierInfo.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLEntry.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/cert/X509Extension.h"
#include "java/security/interfaces/DSAParams.h"
#include "java/security/interfaces/DSAPublicKey.h"
#include "java/security/spec/DSAPublicKeySpec.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleX509CertPathValidatorUtilities ()

+ (LibOrgBouncycastleAsn1ASN1Primitive *)getObjectWithNSString:(NSString *)oid
                                                 withByteArray:(IOSByteArray *)ext;

+ (void)removePolicyNodeRecurseWithJavaUtilListArray:(IOSObjectArray *)policyNodes
     withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_node;

+ (JavaMathBigInteger *)getSerialNumberWithId:(id)cert;

@end

__attribute__((unused)) static LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleX509CertPathValidatorUtilities_getObjectWithNSString_withByteArray_(NSString *oid, IOSByteArray *ext);

__attribute__((unused)) static void LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *_node);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleX509CertPathValidatorUtilities_getSerialNumberWithId_(id cert);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleX509CertPathValidatorUtilities)

LibOrgBouncycastleX509PKIXCRLUtil *LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_UTIL;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_CERTIFICATE_POLICIES;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_BASIC_CONSTRAINTS;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_POLICY_MAPPINGS;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_NAME_CONSTRAINTS;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_KEY_USAGE;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_INHIBIT_ANY_POLICY;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_DELTA_CRL_INDICATOR;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_POLICY_CONSTRAINTS;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_FRESHEST_CRL;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER;
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY = @"2.5.29.32.0";
NSString *LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_NUMBER;
IOSObjectArray *LibOrgBouncycastleX509CertPathValidatorUtilities_crlReasons;

@implementation LibOrgBouncycastleX509CertPathValidatorUtilities

+ (LibOrgBouncycastleX509PKIXCRLUtil *)CRL_UTIL {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_UTIL;
}

+ (NSString *)CERTIFICATE_POLICIES {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_CERTIFICATE_POLICIES;
}

+ (NSString *)BASIC_CONSTRAINTS {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_BASIC_CONSTRAINTS;
}

+ (NSString *)POLICY_MAPPINGS {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_POLICY_MAPPINGS;
}

+ (NSString *)SUBJECT_ALTERNATIVE_NAME {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME;
}

+ (NSString *)NAME_CONSTRAINTS {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_NAME_CONSTRAINTS;
}

+ (NSString *)KEY_USAGE {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_KEY_USAGE;
}

+ (NSString *)INHIBIT_ANY_POLICY {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_INHIBIT_ANY_POLICY;
}

+ (NSString *)ISSUING_DISTRIBUTION_POINT {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT;
}

+ (NSString *)DELTA_CRL_INDICATOR {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_DELTA_CRL_INDICATOR;
}

+ (NSString *)POLICY_CONSTRAINTS {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_POLICY_CONSTRAINTS;
}

+ (NSString *)FRESHEST_CRL {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_FRESHEST_CRL;
}

+ (NSString *)CRL_DISTRIBUTION_POINTS {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS;
}

+ (NSString *)AUTHORITY_KEY_IDENTIFIER {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER;
}

+ (NSString *)ANY_POLICY {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY;
}

+ (NSString *)CRL_NUMBER {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_NUMBER;
}

+ (jint)KEY_CERT_SIGN {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_KEY_CERT_SIGN;
}

+ (jint)CRL_SIGN {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_SIGN;
}

+ (IOSObjectArray *)crlReasons {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_crlReasons;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleX509CertPathValidatorUtilities_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaxSecurityAuthX500X500Principal *)getEncodedIssuerPrincipalWithId:(id)cert {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getEncodedIssuerPrincipalWithId_(cert);
}

+ (JavaUtilDate *)getValidDateWithJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)paramsPKIX {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getValidDateWithJavaSecurityCertPKIXParameters_(paramsPKIX);
}

+ (JavaxSecurityAuthX500X500Principal *)getSubjectPrincipalWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(cert);
}

+ (jboolean)isSelfIssuedWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert);
}

+ (LibOrgBouncycastleAsn1ASN1Primitive *)getExtensionValueWithJavaSecurityCertX509Extension:(id<JavaSecurityCertX509Extension>)ext
                                                                               withNSString:(NSString *)oid {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(ext, oid);
}

+ (LibOrgBouncycastleAsn1ASN1Primitive *)getObjectWithNSString:(NSString *)oid
                                                 withByteArray:(IOSByteArray *)ext {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getObjectWithNSString_withByteArray_(oid, ext);
}

+ (JavaxSecurityAuthX500X500Principal *)getIssuerPrincipalWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl);
}

+ (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getAlgorithmIdentifierWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(key);
}

+ (id<JavaUtilSet>)getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)qualifiers {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_(qualifiers);
}

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                                           withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                                 withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_node {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, _node);
}

+ (void)removePolicyNodeRecurseWithJavaUtilListArray:(IOSObjectArray *)policyNodes
     withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)_node {
  LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(policyNodes, _node);
}

+ (jboolean)processCertD1iWithInt:(jint)index
            withJavaUtilListArray:(IOSObjectArray *)policyNodes
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)pOid
                  withJavaUtilSet:(id<JavaUtilSet>)pq {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(index, policyNodes, pOid, pq);
}

+ (void)processCertD1iiWithInt:(jint)index
         withJavaUtilListArray:(IOSObjectArray *)policyNodes
withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)_poid
               withJavaUtilSet:(id<JavaUtilSet>)_pq {
  LibOrgBouncycastleX509CertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(index, policyNodes, _poid, _pq);
}

+ (void)prepareNextCertB1WithInt:(jint)i
           withJavaUtilListArray:(IOSObjectArray *)policyNodes
                    withNSString:(NSString *)id_p
                 withJavaUtilMap:(id<JavaUtilMap>)m_idp
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  LibOrgBouncycastleX509CertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(i, policyNodes, id_p, m_idp, cert);
}

+ (LibOrgBouncycastleJceProviderPKIXPolicyNode *)prepareNextCertB2WithInt:(jint)i
                                                    withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                             withNSString:(NSString *)id_p
                          withLibOrgBouncycastleJceProviderPKIXPolicyNode:(LibOrgBouncycastleJceProviderPKIXPolicyNode *)validPolicyTree {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(i, policyNodes, id_p, validPolicyTree);
}

+ (jboolean)isAnyPolicyWithJavaUtilSet:(id<JavaUtilSet>)policySet {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(policySet);
}

+ (id<JavaUtilCollection>)findCertificatesWithLibOrgBouncycastleX509X509CertStoreSelector:(LibOrgBouncycastleX509X509CertStoreSelector *)certSelect
                                                                         withJavaUtilList:(id<JavaUtilList>)certStores {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleX509X509CertStoreSelector_withJavaUtilList_(certSelect, certStores);
}

+ (id<JavaUtilCollection>)findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector:(LibOrgBouncycastleJcajcePKIXCertStoreSelector *)certSelect
                                                                           withJavaUtilList:(id<JavaUtilList>)certStores {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, certStores);
}

+ (id<JavaUtilCollection>)findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector:(LibOrgBouncycastleX509X509AttributeCertStoreSelector *)certSelect
                                                                                  withJavaUtilList:(id<JavaUtilList>)certStores {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector_withJavaUtilList_(certSelect, certStores);
}

+ (JavaMathBigInteger *)getSerialNumberWithId:(id)cert {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getSerialNumberWithId_(cert);
}

+ (void)getCertStatusWithJavaUtilDate:(JavaUtilDate *)validDate
          withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                               withId:(id)cert
 withLibOrgBouncycastleX509CertStatus:(LibOrgBouncycastleX509CertStatus *)certStatus {
  LibOrgBouncycastleX509CertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleX509CertStatus_(validDate, crl, cert, certStatus);
}

+ (id<JavaSecurityPublicKey>)getNextWorkingKeyWithJavaUtilList:(id<JavaUtilList>)certs
                                                       withInt:(jint)index {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_(certs, index);
}

+ (void)verifyX509CertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey
                                                    withNSString:(NSString *)sigProvider {
  LibOrgBouncycastleX509CertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, publicKey, sigProvider);
}

+ (jboolean)isIndirectCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return LibOrgBouncycastleX509CertPathValidatorUtilities_isIndirectCRLWithJavaSecurityCertX509CRL_(crl);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xc, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0xc, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 6, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0xc, 7, 8, 9, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0xa, 10, 11, 9, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0xc, 12, 13, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0xc, 14, 15, 16, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1c, 17, 18, 16, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0xc, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 25, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 26, 27, 28, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleJceProviderPKIXPolicyNode;", 0xc, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 31, 32, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xc, 33, 34, 9, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xc, 33, 35, 9, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xc, 33, 36, 9, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 37, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 38, 39, 9, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0xc, 40, 41, 16, -1, -1, -1 },
    { NULL, "V", 0xc, 42, 43, 44, -1, -1, -1 },
    { NULL, "Z", 0x8, 45, 13, 46, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getEncodedIssuerPrincipalWithId:);
  methods[2].selector = @selector(getValidDateWithJavaSecurityCertPKIXParameters:);
  methods[3].selector = @selector(getSubjectPrincipalWithJavaSecurityCertX509Certificate:);
  methods[4].selector = @selector(isSelfIssuedWithJavaSecurityCertX509Certificate:);
  methods[5].selector = @selector(getExtensionValueWithJavaSecurityCertX509Extension:withNSString:);
  methods[6].selector = @selector(getObjectWithNSString:withByteArray:);
  methods[7].selector = @selector(getIssuerPrincipalWithJavaSecurityCertX509CRL:);
  methods[8].selector = @selector(getAlgorithmIdentifierWithJavaSecurityPublicKey:);
  methods[9].selector = @selector(getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[10].selector = @selector(removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode:withJavaUtilListArray:withLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[11].selector = @selector(removePolicyNodeRecurseWithJavaUtilListArray:withLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[12].selector = @selector(processCertD1iWithInt:withJavaUtilListArray:withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withJavaUtilSet:);
  methods[13].selector = @selector(processCertD1iiWithInt:withJavaUtilListArray:withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withJavaUtilSet:);
  methods[14].selector = @selector(prepareNextCertB1WithInt:withJavaUtilListArray:withNSString:withJavaUtilMap:withJavaSecurityCertX509Certificate:);
  methods[15].selector = @selector(prepareNextCertB2WithInt:withJavaUtilListArray:withNSString:withLibOrgBouncycastleJceProviderPKIXPolicyNode:);
  methods[16].selector = @selector(isAnyPolicyWithJavaUtilSet:);
  methods[17].selector = @selector(findCertificatesWithLibOrgBouncycastleX509X509CertStoreSelector:withJavaUtilList:);
  methods[18].selector = @selector(findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector:withJavaUtilList:);
  methods[19].selector = @selector(findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector:withJavaUtilList:);
  methods[20].selector = @selector(getSerialNumberWithId:);
  methods[21].selector = @selector(getCertStatusWithJavaUtilDate:withJavaSecurityCertX509CRL:withId:withLibOrgBouncycastleX509CertStatus:);
  methods[22].selector = @selector(getNextWorkingKeyWithJavaUtilList:withInt:);
  methods[23].selector = @selector(verifyX509CertificateWithJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withNSString:);
  methods[24].selector = @selector(isIndirectCRLWithJavaSecurityCertX509CRL:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CRL_UTIL", "LLibOrgBouncycastleX509PKIXCRLUtil;", .constantValue.asLong = 0, 0x1c, -1, 47, -1, -1 },
    { "CERTIFICATE_POLICIES", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 48, -1, -1 },
    { "BASIC_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 49, -1, -1 },
    { "POLICY_MAPPINGS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 50, -1, -1 },
    { "SUBJECT_ALTERNATIVE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 51, -1, -1 },
    { "NAME_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 52, -1, -1 },
    { "KEY_USAGE", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 53, -1, -1 },
    { "INHIBIT_ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 54, -1, -1 },
    { "ISSUING_DISTRIBUTION_POINT", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 55, -1, -1 },
    { "DELTA_CRL_INDICATOR", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 56, -1, -1 },
    { "POLICY_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 57, -1, -1 },
    { "FRESHEST_CRL", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 58, -1, -1 },
    { "CRL_DISTRIBUTION_POINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 59, -1, -1 },
    { "AUTHORITY_KEY_IDENTIFIER", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 60, -1, -1 },
    { "ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 61, -1, -1 },
    { "CRL_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 62, -1, -1 },
    { "KEY_CERT_SIGN", "I", .constantValue.asInt = LibOrgBouncycastleX509CertPathValidatorUtilities_KEY_CERT_SIGN, 0x1c, -1, -1, -1, -1 },
    { "CRL_SIGN", "I", .constantValue.asInt = LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_SIGN, 0x1c, -1, -1, -1, -1 },
    { "crlReasons", "[LNSString;", .constantValue.asLong = 0, 0x1c, -1, 63, -1, -1 },
  };
  static const void *ptrTable[] = { "getEncodedIssuerPrincipal", "LNSObject;", "getValidDate", "LJavaSecurityCertPKIXParameters;", "getSubjectPrincipal", "LJavaSecurityCertX509Certificate;", "isSelfIssued", "getExtensionValue", "LJavaSecurityCertX509Extension;LNSString;", "LLibOrgBouncycastleJceProviderAnnotatedException;", "getObject", "LNSString;[B", "getIssuerPrincipal", "LJavaSecurityCertX509CRL;", "getAlgorithmIdentifier", "LJavaSecurityPublicKey;", "LJavaSecurityCertCertPathValidatorException;", "getQualifierSet", "LLibOrgBouncycastleAsn1ASN1Sequence;", "removePolicyNode", "LLibOrgBouncycastleJceProviderPKIXPolicyNode;[LJavaUtilList;LLibOrgBouncycastleJceProviderPKIXPolicyNode;", "removePolicyNodeRecurse", "[LJavaUtilList;LLibOrgBouncycastleJceProviderPKIXPolicyNode;", "processCertD1i", "I[LJavaUtilList;LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;LJavaUtilSet;", "processCertD1ii", "prepareNextCertB1", "I[LJavaUtilList;LNSString;LJavaUtilMap;LJavaSecurityCertX509Certificate;", "LLibOrgBouncycastleJceProviderAnnotatedException;LJavaSecurityCertCertPathValidatorException;", "prepareNextCertB2", "I[LJavaUtilList;LNSString;LLibOrgBouncycastleJceProviderPKIXPolicyNode;", "isAnyPolicy", "LJavaUtilSet;", "findCertificates", "LLibOrgBouncycastleX509X509CertStoreSelector;LJavaUtilList;", "LLibOrgBouncycastleJcajcePKIXCertStoreSelector;LJavaUtilList;", "LLibOrgBouncycastleX509X509AttributeCertStoreSelector;LJavaUtilList;", "getSerialNumber", "getCertStatus", "LJavaUtilDate;LJavaSecurityCertX509CRL;LNSObject;LLibOrgBouncycastleX509CertStatus;", "getNextWorkingKey", "LJavaUtilList;I", "verifyX509Certificate", "LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LNSString;", "LJavaSecurityGeneralSecurityException;", "isIndirectCRL", "LJavaSecurityCertCRLException;", &LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_UTIL, &LibOrgBouncycastleX509CertPathValidatorUtilities_CERTIFICATE_POLICIES, &LibOrgBouncycastleX509CertPathValidatorUtilities_BASIC_CONSTRAINTS, &LibOrgBouncycastleX509CertPathValidatorUtilities_POLICY_MAPPINGS, &LibOrgBouncycastleX509CertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME, &LibOrgBouncycastleX509CertPathValidatorUtilities_NAME_CONSTRAINTS, &LibOrgBouncycastleX509CertPathValidatorUtilities_KEY_USAGE, &LibOrgBouncycastleX509CertPathValidatorUtilities_INHIBIT_ANY_POLICY, &LibOrgBouncycastleX509CertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT, &LibOrgBouncycastleX509CertPathValidatorUtilities_DELTA_CRL_INDICATOR, &LibOrgBouncycastleX509CertPathValidatorUtilities_POLICY_CONSTRAINTS, &LibOrgBouncycastleX509CertPathValidatorUtilities_FRESHEST_CRL, &LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS, &LibOrgBouncycastleX509CertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER, &LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY, &LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_NUMBER, &LibOrgBouncycastleX509CertPathValidatorUtilities_crlReasons };
  static const J2ObjcClassInfo _LibOrgBouncycastleX509CertPathValidatorUtilities = { "CertPathValidatorUtilities", "lib.org.bouncycastle.x509", ptrTable, methods, fields, 7, 0x0, 25, 19, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleX509CertPathValidatorUtilities;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleX509CertPathValidatorUtilities class]) {
    LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_UTIL = new_LibOrgBouncycastleX509PKIXCRLUtil_init();
    LibOrgBouncycastleX509CertPathValidatorUtilities_CERTIFICATE_POLICIES = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, certificatePolicies))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_BASIC_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, basicConstraints))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_POLICY_MAPPINGS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, policyMappings))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, subjectAlternativeName))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_NAME_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, nameConstraints))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_KEY_USAGE = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, keyUsage))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_INHIBIT_ANY_POLICY = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, inhibitAnyPolicy))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuingDistributionPoint))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_DELTA_CRL_INDICATOR = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, deltaCRLIndicator))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_POLICY_CONSTRAINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, policyConstraints))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_FRESHEST_CRL = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, freshestCRL))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, cRLDistributionPoints))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, authorityKeyIdentifier))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_CRL_NUMBER = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, cRLNumber))) getId];
    LibOrgBouncycastleX509CertPathValidatorUtilities_crlReasons = [IOSObjectArray newArrayWithObjects:(id[]){ @"unspecified", @"keyCompromise", @"cACompromise", @"affiliationChanged", @"superseded", @"cessationOfOperation", @"certificateHold", @"unknown", @"removeFromCRL", @"privilegeWithdrawn", @"aACompromise" } count:11 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleX509CertPathValidatorUtilities)
  }
}

@end

void LibOrgBouncycastleX509CertPathValidatorUtilities_init(LibOrgBouncycastleX509CertPathValidatorUtilities *self) {
  NSObject_init(self);
}

LibOrgBouncycastleX509CertPathValidatorUtilities *new_LibOrgBouncycastleX509CertPathValidatorUtilities_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509CertPathValidatorUtilities, init)
}

LibOrgBouncycastleX509CertPathValidatorUtilities *create_LibOrgBouncycastleX509CertPathValidatorUtilities_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509CertPathValidatorUtilities, init)
}

JavaxSecurityAuthX500X500Principal *LibOrgBouncycastleX509CertPathValidatorUtilities_getEncodedIssuerPrincipalWithId_(id cert) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
    return [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cert))) getIssuerX500Principal];
  }
  else {
    return (JavaxSecurityAuthX500X500Principal *) cast_chk(IOSObjectArray_Get(nil_chk([((LibOrgBouncycastleX509AttributeCertificateIssuer *) nil_chk([((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(((id<LibOrgBouncycastleX509X509AttributeCertificate>) cast_check(cert, LibOrgBouncycastleX509X509AttributeCertificate_class_())))) getIssuer])) getPrincipals]), 0), [JavaxSecurityAuthX500X500Principal class]);
  }
}

JavaUtilDate *LibOrgBouncycastleX509CertPathValidatorUtilities_getValidDateWithJavaSecurityCertPKIXParameters_(JavaSecurityCertPKIXParameters *paramsPKIX) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  JavaUtilDate *validDate = [((JavaSecurityCertPKIXParameters *) nil_chk(paramsPKIX)) getDate];
  if (validDate == nil) {
    validDate = new_JavaUtilDate_init();
  }
  return validDate;
}

JavaxSecurityAuthX500X500Principal *LibOrgBouncycastleX509CertPathValidatorUtilities_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  return [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal];
}

jboolean LibOrgBouncycastleX509CertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  return [((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectDN])) isEqual:[cert getIssuerDN]];
}

LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(id<JavaSecurityCertX509Extension> ext, NSString *oid) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  IOSByteArray *bytes = [((id<JavaSecurityCertX509Extension>) nil_chk(ext)) getExtensionValueWithNSString:oid];
  if (bytes == nil) {
    return nil;
  }
  return LibOrgBouncycastleX509CertPathValidatorUtilities_getObjectWithNSString_withByteArray_(oid, bytes);
}

LibOrgBouncycastleAsn1ASN1Primitive *LibOrgBouncycastleX509CertPathValidatorUtilities_getObjectWithNSString_withByteArray_(NSString *oid, IOSByteArray *ext) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  @try {
    LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(ext);
    LibOrgBouncycastleAsn1ASN1OctetString *octs = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([aIn readObject], [LibOrgBouncycastleAsn1ASN1OctetString class]);
    aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(octs)) getOctets]);
    return [aIn readObject];
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"exception processing extension ", oid), e);
  }
}

JavaxSecurityAuthX500X500Principal *LibOrgBouncycastleX509CertPathValidatorUtilities_getIssuerPrincipalWithJavaSecurityCertX509CRL_(JavaSecurityCertX509CRL *crl) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  return [((JavaSecurityCertX509CRL *) nil_chk(crl)) getIssuerX500Principal];
}

LibOrgBouncycastleAsn1X509AlgorithmIdentifier *LibOrgBouncycastleX509CertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  @try {
    LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded]);
    LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([aIn readObject]);
    return [((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithmId];
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Subject public key cannot be decoded.", e);
  }
}

id<JavaUtilSet> LibOrgBouncycastleX509CertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *qualifiers) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  id<JavaUtilSet> pq = new_JavaUtilHashSet_init();
  if (qualifiers == nil) {
    return pq;
  }
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  LibOrgBouncycastleAsn1ASN1OutputStream *aOut = new_LibOrgBouncycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(bOut);
  id<JavaUtilEnumeration> e = [qualifiers getObjects];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    @try {
      [aOut writeObjectWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>) cast_check([e nextElement], LibOrgBouncycastleAsn1ASN1Encodable_class_())];
      [pq addWithId:new_JavaSecurityCertPolicyQualifierInfo_initWithByteArray_([bOut toByteArray])];
    }
    @catch (JavaIoIOException *ex) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Policy qualifier info cannot be decoded.", ex);
    }
    [bOut reset];
  }
  return pq;
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *_node) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  LibOrgBouncycastleJceProviderPKIXPolicyNode *_parent = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getParent], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
  if (validPolicyTree == nil) {
    return nil;
  }
  if (_parent == nil) {
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(policyNodes))->size_; j++) {
      (void) IOSObjectArray_SetAndConsume(policyNodes, j, new_JavaUtilArrayList_init());
    }
    return nil;
  }
  else {
    [_parent removeChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:_node];
    LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(policyNodes, _node);
    return validPolicyTree;
  }
}

void LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(IOSObjectArray *policyNodes, LibOrgBouncycastleJceProviderPKIXPolicyNode *_node) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getDepth]))) removeWithId:_node];
  if ([_node hasChildren]) {
    id<JavaUtilIterator> _iter = [_node getChildren];
    while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
      LibOrgBouncycastleJceProviderPKIXPolicyNode *_child = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([_iter next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
      LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(policyNodes, _child);
    }
  }
}

jboolean LibOrgBouncycastleX509CertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *pOid, id<JavaUtilSet> pq) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  id<JavaUtilList> policyNodeVec = IOSObjectArray_Get(nil_chk(policyNodes), index - 1);
  for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(policyNodeVec)) size]; j++) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([policyNodeVec getWithInt:j], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
    id<JavaUtilSet> expectedPolicies = [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getExpectedPolicies];
    if ([((id<JavaUtilSet>) nil_chk(expectedPolicies)) containsWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(pOid)) getId]]) {
      id<JavaUtilSet> childExpectedPolicies = new_JavaUtilHashSet_init();
      [childExpectedPolicies addWithId:[pOid getId]];
      LibOrgBouncycastleJceProviderPKIXPolicyNode *child = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), index, childExpectedPolicies, node, pq, [pOid getId], false);
      [node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:child];
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, index))) addWithId:child];
      return true;
    }
  }
  return false;
}

void LibOrgBouncycastleX509CertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *_poid, id<JavaUtilSet> _pq) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  id<JavaUtilList> policyNodeVec = IOSObjectArray_Get(nil_chk(policyNodes), index - 1);
  for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(policyNodeVec)) size]; j++) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([policyNodeVec getWithInt:j], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
    if ([((NSString *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
      id<JavaUtilSet> _childExpectedPolicies = new_JavaUtilHashSet_init();
      [_childExpectedPolicies addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(_poid)) getId]];
      LibOrgBouncycastleJceProviderPKIXPolicyNode *_child = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), index, _childExpectedPolicies, _node, _pq, [_poid getId], false);
      [_node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:_child];
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, index))) addWithId:_child];
      return;
    }
  }
}

void LibOrgBouncycastleX509CertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(jint i, IOSObjectArray *policyNodes, NSString *id_p, id<JavaUtilMap> m_idp, JavaSecurityCertX509Certificate *cert) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  jboolean idp_found = false;
  id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
    if ([((NSString *) nil_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
      idp_found = true;
      [node setExpectedPoliciesWithJavaUtilSet:(id<JavaUtilSet>) cast_check([((id<JavaUtilMap>) nil_chk(m_idp)) getWithId:id_p], JavaUtilSet_class_())];
      break;
    }
  }
  if (!idp_found) {
    nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
      LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
      if ([((NSString *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY)) isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy]]) {
        id<JavaUtilSet> pq = nil;
        LibOrgBouncycastleAsn1ASN1Sequence *policies = nil;
        @try {
          policies = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, LibOrgBouncycastleX509CertPathValidatorUtilities_CERTIFICATE_POLICIES));
        }
        @catch (JavaLangException *e) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"X509Certificate policies cannot be decoded.", e);
        }
        id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(policies)) getObjects];
        while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
          LibOrgBouncycastleAsn1X509PolicyInformation *pinfo = nil;
          @try {
            pinfo = LibOrgBouncycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
          }
          @catch (JavaLangException *ex) {
            @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Policy information cannot be decoded.", ex);
          }
          if ([LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509PolicyInformation *) nil_chk(pinfo)) getPolicyIdentifier])) getId]]) {
            @try {
              pq = LibOrgBouncycastleX509CertPathValidatorUtilities_getQualifierSetWithLibOrgBouncycastleAsn1ASN1Sequence_([pinfo getPolicyQualifiers]);
            }
            @catch (JavaSecurityCertCertPathValidatorException *ex) {
              @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Policy qualifier info set could not be built.", ex);
            }
            break;
          }
        }
        jboolean ci = false;
        if ([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs] != nil) {
          ci = [((id<JavaUtilSet>) nil_chk([cert getCriticalExtensionOIDs])) containsWithId:LibOrgBouncycastleX509CertPathValidatorUtilities_CERTIFICATE_POLICIES];
        }
        LibOrgBouncycastleJceProviderPKIXPolicyNode *p_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
        if ([LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY isEqual:[((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) getValidPolicy]]) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *c_node = new_LibOrgBouncycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), i, (id<JavaUtilSet>) cast_check([((id<JavaUtilMap>) nil_chk(m_idp)) getWithId:id_p], JavaUtilSet_class_()), p_node, pq, id_p, ci);
          [p_node addChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:c_node];
          [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) addWithId:c_node];
        }
        break;
      }
    }
  }
}

LibOrgBouncycastleJceProviderPKIXPolicyNode *LibOrgBouncycastleX509CertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(jint i, IOSObjectArray *policyNodes, NSString *id_p, LibOrgBouncycastleJceProviderPKIXPolicyNode *validPolicyTree) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
    LibOrgBouncycastleJceProviderPKIXPolicyNode *node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
    if ([((NSString *) nil_chk([((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
      LibOrgBouncycastleJceProviderPKIXPolicyNode *p_node = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
      [((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) removeChildWithLibOrgBouncycastleJceProviderPKIXPolicyNode:node];
      [nodes_i remove];
      for (jint k = (i - 1); k >= 0; k--) {
        id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, k);
        for (jint l = 0; l < [((id<JavaUtilList>) nil_chk(nodes)) size]; l++) {
          LibOrgBouncycastleJceProviderPKIXPolicyNode *node2 = (LibOrgBouncycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:l], [LibOrgBouncycastleJceProviderPKIXPolicyNode class]);
          if (![((LibOrgBouncycastleJceProviderPKIXPolicyNode *) nil_chk(node2)) hasChildren]) {
            validPolicyTree = LibOrgBouncycastleX509CertPathValidatorUtilities_removePolicyNodeWithLibOrgBouncycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withLibOrgBouncycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, node2);
            if (validPolicyTree == nil) {
              break;
            }
          }
        }
      }
    }
  }
  return validPolicyTree;
}

jboolean LibOrgBouncycastleX509CertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(id<JavaUtilSet> policySet) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  return policySet == nil || [policySet containsWithId:LibOrgBouncycastleX509CertPathValidatorUtilities_ANY_POLICY] || [policySet isEmpty];
}

id<JavaUtilCollection> LibOrgBouncycastleX509CertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleX509X509CertStoreSelector_withJavaUtilList_(LibOrgBouncycastleX509X509CertStoreSelector *certSelect, id<JavaUtilList> certStores) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  id<JavaUtilSet> certs = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(certStores)) iterator];
  LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *certFact = new_LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_init();
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id obj = [iter next];
    if ([LibOrgBouncycastleUtilStore_class_() isInstance:obj]) {
      id<LibOrgBouncycastleUtilStore> certStore = (id<LibOrgBouncycastleUtilStore>) cast_check(obj, LibOrgBouncycastleUtilStore_class_());
      @try {
        for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((id<LibOrgBouncycastleUtilStore>) nil_chk(certStore)) getMatchesWithLibOrgBouncycastleUtilSelector:certSelect])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
          id cert = [it next];
          if ([LibOrgBouncycastleUtilEncodable_class_() isInstance:cert]) {
            [certs addWithId:[certFact engineGenerateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_([((id<LibOrgBouncycastleUtilEncodable>) nil_chk(((id<LibOrgBouncycastleUtilEncodable>) cast_check(cert, LibOrgBouncycastleUtilEncodable_class_())))) getEncoded])]];
          }
          else if ([cert isKindOfClass:[JavaSecurityCertCertificate class]]) {
            [certs addWithId:cert];
          }
          else {
            @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Unknown object found in certificate store.");
          }
        }
      }
      @catch (LibOrgBouncycastleUtilStoreException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while picking certificates from X.509 store.", e);
      }
      @catch (JavaIoIOException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while extracting certificates from X.509 store.", e);
      }
      @catch (JavaSecurityCertCertificateException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while extracting certificates from X.509 store.", e);
      }
    }
    else {
      JavaSecurityCertCertStore *certStore = (JavaSecurityCertCertStore *) cast_chk(obj, [JavaSecurityCertCertStore class]);
      @try {
        [certs addAllWithJavaUtilCollection:[((JavaSecurityCertCertStore *) nil_chk(certStore)) getCertificatesWithJavaSecurityCertCertSelector:certSelect]];
      }
      @catch (JavaSecurityCertCertStoreException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while picking certificates from certificate store.", e);
      }
    }
  }
  return certs;
}

id<JavaUtilCollection> LibOrgBouncycastleX509CertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(LibOrgBouncycastleJcajcePKIXCertStoreSelector *certSelect, id<JavaUtilList> certStores) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  id<JavaUtilSet> certs = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(certStores)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id obj = [iter next];
    if ([LibOrgBouncycastleUtilStore_class_() isInstance:obj]) {
      id<LibOrgBouncycastleUtilStore> certStore = (id<LibOrgBouncycastleUtilStore>) cast_check(obj, LibOrgBouncycastleUtilStore_class_());
      @try {
        [certs addAllWithJavaUtilCollection:[((id<LibOrgBouncycastleUtilStore>) nil_chk(certStore)) getMatchesWithLibOrgBouncycastleUtilSelector:certSelect]];
      }
      @catch (LibOrgBouncycastleUtilStoreException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while picking certificates from X.509 store.", e);
      }
    }
    else {
      JavaSecurityCertCertStore *certStore = (JavaSecurityCertCertStore *) cast_chk(obj, [JavaSecurityCertCertStore class]);
      @try {
        [certs addAllWithJavaUtilCollection:LibOrgBouncycastleJcajcePKIXCertStoreSelector_getCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaSecurityCertCertStore_(certSelect, certStore)];
      }
      @catch (JavaSecurityCertCertStoreException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while picking certificates from certificate store.", e);
      }
    }
  }
  return certs;
}

id<JavaUtilCollection> LibOrgBouncycastleX509CertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleX509X509AttributeCertStoreSelector_withJavaUtilList_(LibOrgBouncycastleX509X509AttributeCertStoreSelector *certSelect, id<JavaUtilList> certStores) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  id<JavaUtilSet> certs = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(certStores)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id obj = [iter next];
    if ([obj isKindOfClass:[LibOrgBouncycastleX509X509Store class]]) {
      LibOrgBouncycastleX509X509Store *certStore = (LibOrgBouncycastleX509X509Store *) obj;
      @try {
        [certs addAllWithJavaUtilCollection:[((LibOrgBouncycastleX509X509Store *) nil_chk(certStore)) getMatchesWithLibOrgBouncycastleUtilSelector:certSelect]];
      }
      @catch (LibOrgBouncycastleUtilStoreException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Problem while picking certificates from X.509 store.", e);
      }
    }
  }
  return certs;
}

JavaMathBigInteger *LibOrgBouncycastleX509CertPathValidatorUtilities_getSerialNumberWithId_(id cert) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
    return [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cert))) getSerialNumber];
  }
  else {
    return [((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(((id<LibOrgBouncycastleX509X509AttributeCertificate>) cast_check(cert, LibOrgBouncycastleX509X509AttributeCertificate_class_())))) getSerialNumber];
  }
}

void LibOrgBouncycastleX509CertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleX509CertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *crl, id cert, LibOrgBouncycastleX509CertStatus *certStatus) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  JavaSecurityCertX509CRLEntry *crl_entry = nil;
  jboolean isIndirect;
  @try {
    isIndirect = LibOrgBouncycastleX509CertPathValidatorUtilities_isIndirectCRLWithJavaSecurityCertX509CRL_(crl);
  }
  @catch (JavaSecurityCertCRLException *exception) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Failed check for indirect CRL.", exception);
  }
  if (isIndirect) {
    crl_entry = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getRevokedCertificateWithJavaMathBigInteger:LibOrgBouncycastleX509CertPathValidatorUtilities_getSerialNumberWithId_(cert)];
    if (crl_entry == nil) {
      return;
    }
    JavaxSecurityAuthX500X500Principal *certIssuer = [crl_entry getCertificateIssuer];
    if (certIssuer == nil) {
      certIssuer = LibOrgBouncycastleX509CertPathValidatorUtilities_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl);
    }
    if (![((JavaxSecurityAuthX500X500Principal *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getEncodedIssuerPrincipalWithId_(cert))) isEqual:certIssuer]) {
      return;
    }
  }
  else if (![((JavaxSecurityAuthX500X500Principal *) nil_chk(LibOrgBouncycastleX509CertPathValidatorUtilities_getEncodedIssuerPrincipalWithId_(cert))) isEqual:LibOrgBouncycastleX509CertPathValidatorUtilities_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl)]) {
    return;
  }
  else {
    crl_entry = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getRevokedCertificateWithJavaMathBigInteger:LibOrgBouncycastleX509CertPathValidatorUtilities_getSerialNumberWithId_(cert)];
    if (crl_entry == nil) {
      return;
    }
  }
  LibOrgBouncycastleAsn1ASN1Enumerated *reasonCode = nil;
  if ([crl_entry hasExtensions]) {
    @try {
      reasonCode = LibOrgBouncycastleAsn1ASN1Enumerated_getInstanceWithId_(LibOrgBouncycastleX509CertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl_entry, [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509X509Extension, reasonCode))) getId]));
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Reason code CRL entry extension could not be decoded.", e);
    }
  }
  if (!([((JavaUtilDate *) nil_chk(validDate)) getTime] < [((JavaUtilDate *) nil_chk([crl_entry getRevocationDate])) getTime]) || reasonCode == nil || [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 0 || [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 1 || [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 2 || [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 8) {
    if (reasonCode != nil) {
      [((LibOrgBouncycastleX509CertStatus *) nil_chk(certStatus)) setCertStatusWithInt:[((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue]];
    }
    else {
      [((LibOrgBouncycastleX509CertStatus *) nil_chk(certStatus)) setCertStatusWithInt:LibOrgBouncycastleAsn1X509CRLReason_unspecified];
    }
    [certStatus setRevocationDateWithJavaUtilDate:[crl_entry getRevocationDate]];
  }
}

id<JavaSecurityPublicKey> LibOrgBouncycastleX509CertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_(id<JavaUtilList> certs, jint index) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  JavaSecurityCertCertificate *cert = (JavaSecurityCertCertificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertCertificate class]);
  id<JavaSecurityPublicKey> pubKey = [((JavaSecurityCertCertificate *) nil_chk(cert)) getPublicKey];
  if (!([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:pubKey])) {
    return pubKey;
  }
  id<JavaSecurityInterfacesDSAPublicKey> dsaPubKey = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pubKey, JavaSecurityInterfacesDSAPublicKey_class_());
  if ([((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(dsaPubKey)) getParams] != nil) {
    return dsaPubKey;
  }
  for (jint i = index + 1; i < [certs size]; i++) {
    JavaSecurityCertX509Certificate *parentCert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class]);
    pubKey = [((JavaSecurityCertX509Certificate *) nil_chk(parentCert)) getPublicKey];
    if (!([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:pubKey])) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"JcajceDSA parameters cannot be inherited from previous certificate.");
    }
    id<JavaSecurityInterfacesDSAPublicKey> prevDSAPubKey = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pubKey, JavaSecurityInterfacesDSAPublicKey_class_());
    if ([((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(prevDSAPubKey)) getParams] == nil) {
      continue;
    }
    id<JavaSecurityInterfacesDSAParams> dsaParams = [prevDSAPubKey getParams];
    JavaSecuritySpecDSAPublicKeySpec *dsaPubKeySpec = new_JavaSecuritySpecDSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([dsaPubKey getY], [((id<JavaSecurityInterfacesDSAParams>) nil_chk(dsaParams)) getP], [dsaParams getQ], [dsaParams getG]);
    @try {
      JavaSecurityKeyFactory *keyFactory = JavaSecurityKeyFactory_getInstanceWithNSString_withNSString_(@"JcajceDSA", LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
      return [((JavaSecurityKeyFactory *) nil_chk(keyFactory)) generatePublicWithJavaSecuritySpecKeySpec:dsaPubKeySpec];
    }
    @catch (JavaLangException *exception) {
      @throw new_JavaLangRuntimeException_initWithNSString_([exception getMessage]);
    }
  }
  @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"JcajceDSA parameters cannot be inherited from previous certificate.");
}

void LibOrgBouncycastleX509CertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaSecurityPublicKey> publicKey, NSString *sigProvider) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  if (sigProvider == nil) {
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) verifyWithJavaSecurityPublicKey:publicKey];
  }
  else {
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) verifyWithJavaSecurityPublicKey:publicKey withNSString:sigProvider];
  }
}

jboolean LibOrgBouncycastleX509CertPathValidatorUtilities_isIndirectCRLWithJavaSecurityCertX509CRL_(JavaSecurityCertX509CRL *crl) {
  LibOrgBouncycastleX509CertPathValidatorUtilities_initialize();
  @try {
    IOSByteArray *idp = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
    return idp != nil && [((LibOrgBouncycastleAsn1X509IssuingDistributionPoint *) nil_chk(LibOrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_(idp))) getOctets]))) isIndirectCRL];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityCertCRLException_initWithNSString_(JreStrcat("$@", @"Exception reading IssuingDistributionPoint: ", e));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleX509CertPathValidatorUtilities)
