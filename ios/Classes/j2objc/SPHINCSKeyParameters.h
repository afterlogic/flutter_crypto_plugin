//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/SPHINCSKeyParameters.java
//

#ifndef SPHINCSKeyParameters_H
#define SPHINCSKeyParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricKeyParameter.h"
#include "J2ObjC_header.h"

@interface LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters : LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter
@property (readonly, copy, class) NSString *SHA512_256 NS_SWIFT_NAME(SHA512_256);
@property (readonly, copy, class) NSString *SHA3_256 NS_SWIFT_NAME(SHA3_256);

+ (NSString *)SHA512_256;

+ (NSString *)SHA3_256;

#pragma mark Public

- (NSString *)getTreeDigest;

#pragma mark Protected

- (instancetype __nonnull)initWithBoolean:(jboolean)isPrivateKey
                             withNSString:(NSString *)treeDigest;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters)

inline NSString *LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_get_SHA512_256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_SHA512_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters, SHA512_256, NSString *)

inline NSString *LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_get_SHA3_256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_SHA3_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters, SHA3_256, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_initWithBoolean_withNSString_(LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters *self, jboolean isPrivateKey, NSString *treeDigest);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters *new_LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_initWithBoolean_withNSString_(jboolean isPrivateKey, NSString *treeDigest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters *create_LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_initWithBoolean_withNSString_(jboolean isPrivateKey, NSString *treeDigest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SPHINCSKeyParameters_H
