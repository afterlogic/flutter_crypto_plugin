//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/KeyBoxByteBuffer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyBoxByteBuffer.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"

@interface LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer () {
 @public
  JavaNioByteBuffer *buffer_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer, buffer_, JavaNioByteBuffer *)

@implementation LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_initWithJavaNioByteBuffer_(self, buffer);
  return self;
}

+ (LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *)wrapWithId:(id)src {
  return LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_wrapWithId_(src);
}

- (jint)size {
  return [((JavaNioByteBuffer *) nil_chk(self->buffer_)) limit] - 20;
}

- (IOSByteArray *)rangeOfWithInt:(jint)start
                         withInt:(jint)end {
  jint p = [((JavaNioByteBuffer *) nil_chk(buffer_)) position];
  (void) [buffer_ positionWithInt:start];
  IOSByteArray *data = [IOSByteArray newArrayWithLength:end - start];
  (void) [buffer_ getWithByteArray:data];
  (void) [buffer_ positionWithInt:p];
  return data;
}

- (jboolean)hasRemaining {
  return [((JavaNioByteBuffer *) nil_chk(buffer_)) hasRemaining];
}

- (jint)position {
  return [((JavaNioByteBuffer *) nil_chk(buffer_)) position];
}

- (void)positionWithInt:(jint)p {
  (void) [((JavaNioByteBuffer *) nil_chk(buffer_)) positionWithInt:p];
}

- (jint)u16 {
  return (JreLShift32([self u8], 8)) | [self u8];
}

- (jlong)u32 {
  return ((JreLShift32([self u8], 24)) | (JreLShift32([self u8], 16)) | (JreLShift32([self u8], 8)) | [self u8]);
}

- (jint)u8 {
  return ((jint) [((JavaNioByteBuffer *) nil_chk(buffer_)) get] & (jint) 0xFF);
}

- (void)bNWithByteArray:(IOSByteArray *)array {
  (void) [((JavaNioByteBuffer *) nil_chk(buffer_)) getWithByteArray:array];
}

- (JavaNioByteBuffer *)getBuffer {
  return buffer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer;", 0x8, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNioByteBuffer:);
  methods[1].selector = @selector(wrapWithId:);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(rangeOfWithInt:withInt:);
  methods[4].selector = @selector(hasRemaining);
  methods[5].selector = @selector(position);
  methods[6].selector = @selector(positionWithInt:);
  methods[7].selector = @selector(u16);
  methods[8].selector = @selector(u32);
  methods[9].selector = @selector(u8);
  methods[10].selector = @selector(bNWithByteArray:);
  methods[11].selector = @selector(getBuffer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioByteBuffer;", "wrap", "LNSObject;", "LJavaIoIOException;", "rangeOf", "II", "position", "I", "bN", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer = { "KeyBoxByteBuffer", "lib.org.bouncycastle.gpg.keybox", ptrTable, methods, fields, 7, 0x0, 12, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer;
}

@end

void LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_initWithJavaNioByteBuffer_(LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *self, JavaNioByteBuffer *buffer) {
  NSObject_init(self);
  self->buffer_ = buffer;
}

LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *new_LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_initWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer, initWithJavaNioByteBuffer_, buffer)
}

LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *create_LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_initWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer, initWithJavaNioByteBuffer_, buffer)
}

LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_wrapWithId_(id src) {
  LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_initialize();
  if (src == nil) {
    return nil;
  }
  else if ([src isKindOfClass:[LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer class]]) {
    return (LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *) src;
  }
  else if ([src isKindOfClass:[JavaNioByteBuffer class]]) {
    return new_LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_initWithJavaNioByteBuffer_((JavaNioByteBuffer *) src);
  }
  else if ([src isKindOfClass:[IOSByteArray class]]) {
    return LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_wrapWithId_(JavaNioByteBuffer_wrapWithByteArray_((IOSByteArray *) cast_chk(src, [IOSByteArray class])));
  }
  else if ([src isKindOfClass:[JavaIoByteArrayOutputStream class]]) {
    return LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_wrapWithId_([((JavaIoByteArrayOutputStream *) src) toByteArray]);
  }
  else if ([src isKindOfClass:[JavaIoInputStream class]]) {
    JavaIoByteArrayOutputStream *bos = new_JavaIoByteArrayOutputStream_init();
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:4096];
    jint i;
    while ((i = [((JavaIoInputStream *) src) readWithByteArray:buf]) >= 0) {
      [bos writeWithByteArray:buf withInt:0 withInt:i];
    }
    [bos flush];
    [bos close];
    return LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_wrapWithId_(bos);
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"Could not convert ", [[src java_getClass] getCanonicalName], @" to KeyBoxByteBuffer"));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer)
