//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/apache/bzip2/CBZip2InputStream.java
//

#include "BZip2Constants.h"
#include "CBZip2InputStream.h"
#include "CRC.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleApacheBzip2CBZip2InputStream () {
 @public
  jint last_;
  jint origPtr_;
  jint blockSize100k_;
  jboolean blockRandomised_;
  jint bsBuff_;
  jint bsLive_;
  LibOrgBouncycastleApacheBzip2CRC *mCrc_;
  IOSBooleanArray *inUse_;
  jint nInUse_;
  IOSCharArray *seqToUnseq_;
  IOSCharArray *unseqToSeq_;
  IOSCharArray *selector_;
  IOSCharArray *selectorMtf_;
  IOSIntArray *tt_;
  IOSCharArray *ll8_;
  IOSIntArray *unzftab_;
  IOSObjectArray *limit_;
  IOSObjectArray *base_;
  IOSObjectArray *perm_;
  IOSIntArray *minLens_;
  JavaIoInputStream *bsStream_;
  jboolean streamEnd_;
  jint currentChar_;
  jint currentState_;
  jint storedBlockCRC_;
  jint storedCombinedCRC_;
  jint computedBlockCRC_;
  jint computedCombinedCRC_;
}

+ (void)cadvise;

+ (void)compressedStreamEOF;

- (void)makeMaps;

- (void)initialize__ OBJC_METHOD_FAMILY_NONE;

- (void)initBlock OBJC_METHOD_FAMILY_NONE;

- (void)endBlock;

- (void)complete;

+ (void)blockOverrun;

+ (void)badBlockHeader;

+ (void)crcError;

- (void)bsFinishedWithStream;

- (void)bsSetStreamWithJavaIoInputStream:(JavaIoInputStream *)f;

- (jint)bsRWithInt:(jint)n;

- (jchar)bsGetUChar;

- (jint)bsGetint;

- (jint)bsGetIntVSWithInt:(jint)numBits;

- (jint)bsGetInt32;

- (void)hbCreateDecodeTablesWithIntArray:(IOSIntArray *)limit
                            withIntArray:(IOSIntArray *)base
                            withIntArray:(IOSIntArray *)perm
                           withCharArray:(IOSCharArray *)length
                                 withInt:(jint)minLen
                                 withInt:(jint)maxLen
                                 withInt:(jint)alphaSize;

- (void)recvDecodingTables;

- (void)getAndMoveToFrontDecode;

- (void)setupBlock;

- (void)setupRandPartA;

- (void)setupNoRandPartA;

- (void)setupRandPartB;

- (void)setupRandPartC;

- (void)setupNoRandPartB;

- (void)setupNoRandPartC;

- (void)setDecompressStructureSizesWithInt:(jint)newSize100k;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, mCrc_, LibOrgBouncycastleApacheBzip2CRC *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, inUse_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, seqToUnseq_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, unseqToSeq_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, selector_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, selectorMtf_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, tt_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, ll8_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, unzftab_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, limit_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, base_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, perm_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, minLens_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleApacheBzip2CBZip2InputStream, bsStream_, JavaIoInputStream *)

inline jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_get_START_BLOCK_STATE(void);
#define LibOrgBouncycastleApacheBzip2CBZip2InputStream_START_BLOCK_STATE 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleApacheBzip2CBZip2InputStream, START_BLOCK_STATE, jint)

inline jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_get_RAND_PART_A_STATE(void);
#define LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_A_STATE 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleApacheBzip2CBZip2InputStream, RAND_PART_A_STATE, jint)

inline jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_get_RAND_PART_B_STATE(void);
#define LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_B_STATE 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleApacheBzip2CBZip2InputStream, RAND_PART_B_STATE, jint)

inline jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_get_RAND_PART_C_STATE(void);
#define LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_C_STATE 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleApacheBzip2CBZip2InputStream, RAND_PART_C_STATE, jint)

inline jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_get_NO_RAND_PART_A_STATE(void);
#define LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_A_STATE 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleApacheBzip2CBZip2InputStream, NO_RAND_PART_A_STATE, jint)

inline jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_get_NO_RAND_PART_B_STATE(void);
#define LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_B_STATE 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleApacheBzip2CBZip2InputStream, NO_RAND_PART_B_STATE, jint)

inline jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_get_NO_RAND_PART_C_STATE(void);
#define LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_C_STATE 7
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleApacheBzip2CBZip2InputStream, NO_RAND_PART_C_STATE, jint)

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_cadvise(void);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF(void);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_makeMaps(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize__(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_initBlock(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_endBlock(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_complete(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_blockOverrun(void);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_badBlockHeader(void);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_crcError(void);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsFinishedWithStream(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsSetStreamWithJavaIoInputStream_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, JavaIoInputStream *f);

__attribute__((unused)) static jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, jint n);

__attribute__((unused)) static jchar LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetint(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetIntVSWithInt_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, jint numBits);

__attribute__((unused)) static jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetInt32(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_hbCreateDecodeTablesWithIntArray_withIntArray_withIntArray_withCharArray_withInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, IOSIntArray *limit, IOSIntArray *base, IOSIntArray *perm, IOSCharArray *length, jint minLen, jint maxLen, jint alphaSize);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_recvDecodingTables(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_getAndMoveToFrontDecode(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupBlock(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartA(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartA(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartB(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartC(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartB(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartC(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self);

__attribute__((unused)) static void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setDecompressStructureSizesWithInt_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, jint newSize100k);

@implementation LibOrgBouncycastleApacheBzip2CBZip2InputStream

+ (void)cadvise {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_cadvise();
}

+ (void)compressedStreamEOF {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF();
}

- (void)makeMaps {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_makeMaps(self);
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)zStream {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initWithJavaIoInputStream_(self, zStream);
  return self;
}

- (jint)read {
  if (streamEnd_) {
    return -1;
  }
  else {
    jint retChar = currentChar_;
    switch (currentState_) {
      case LibOrgBouncycastleApacheBzip2CBZip2InputStream_START_BLOCK_STATE:
      break;
      case LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_A_STATE:
      break;
      case LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_B_STATE:
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartB(self);
      break;
      case LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_C_STATE:
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartC(self);
      break;
      case LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_A_STATE:
      break;
      case LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_B_STATE:
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartB(self);
      break;
      case LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_C_STATE:
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartC(self);
      break;
      default:
      break;
    }
    return retChar;
  }
}

- (void)initialize__ {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize__(self);
}

- (void)initBlock {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initBlock(self);
}

- (void)endBlock {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_endBlock(self);
}

- (void)complete {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_complete(self);
}

+ (void)blockOverrun {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_blockOverrun();
}

+ (void)badBlockHeader {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_badBlockHeader();
}

+ (void)crcError {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_crcError();
}

- (void)bsFinishedWithStream {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsFinishedWithStream(self);
}

- (void)bsSetStreamWithJavaIoInputStream:(JavaIoInputStream *)f {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsSetStreamWithJavaIoInputStream_(self, f);
}

- (jint)bsRWithInt:(jint)n {
  return LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, n);
}

- (jchar)bsGetUChar {
  return LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
}

- (jint)bsGetint {
  return LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetint(self);
}

- (jint)bsGetIntVSWithInt:(jint)numBits {
  return LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetIntVSWithInt_(self, numBits);
}

- (jint)bsGetInt32 {
  return LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetInt32(self);
}

- (void)hbCreateDecodeTablesWithIntArray:(IOSIntArray *)limit
                            withIntArray:(IOSIntArray *)base
                            withIntArray:(IOSIntArray *)perm
                           withCharArray:(IOSCharArray *)length
                                 withInt:(jint)minLen
                                 withInt:(jint)maxLen
                                 withInt:(jint)alphaSize {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_hbCreateDecodeTablesWithIntArray_withIntArray_withIntArray_withCharArray_withInt_withInt_withInt_(self, limit, base, perm, length, minLen, maxLen, alphaSize);
}

- (void)recvDecodingTables {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_recvDecodingTables(self);
}

- (void)getAndMoveToFrontDecode {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_getAndMoveToFrontDecode(self);
}

- (void)setupBlock {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupBlock(self);
}

- (void)setupRandPartA {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartA(self);
}

- (void)setupNoRandPartA {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartA(self);
}

- (void)setupRandPartB {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartB(self);
}

- (void)setupRandPartC {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartC(self);
}

- (void)setupNoRandPartB {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartB(self);
}

- (void)setupNoRandPartC {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartC(self);
}

- (void)setDecompressStructureSizesWithInt:(jint)newSize100k {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setDecompressStructureSizesWithInt_(self, newSize100k);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(cadvise);
  methods[1].selector = @selector(compressedStreamEOF);
  methods[2].selector = @selector(makeMaps);
  methods[3].selector = @selector(initWithJavaIoInputStream:);
  methods[4].selector = @selector(read);
  methods[5].selector = @selector(initialize__);
  methods[6].selector = @selector(initBlock);
  methods[7].selector = @selector(endBlock);
  methods[8].selector = @selector(complete);
  methods[9].selector = @selector(blockOverrun);
  methods[10].selector = @selector(badBlockHeader);
  methods[11].selector = @selector(crcError);
  methods[12].selector = @selector(bsFinishedWithStream);
  methods[13].selector = @selector(bsSetStreamWithJavaIoInputStream:);
  methods[14].selector = @selector(bsRWithInt:);
  methods[15].selector = @selector(bsGetUChar);
  methods[16].selector = @selector(bsGetint);
  methods[17].selector = @selector(bsGetIntVSWithInt:);
  methods[18].selector = @selector(bsGetInt32);
  methods[19].selector = @selector(hbCreateDecodeTablesWithIntArray:withIntArray:withIntArray:withCharArray:withInt:withInt:withInt:);
  methods[20].selector = @selector(recvDecodingTables);
  methods[21].selector = @selector(getAndMoveToFrontDecode);
  methods[22].selector = @selector(setupBlock);
  methods[23].selector = @selector(setupRandPartA);
  methods[24].selector = @selector(setupNoRandPartA);
  methods[25].selector = @selector(setupRandPartB);
  methods[26].selector = @selector(setupRandPartC);
  methods[27].selector = @selector(setupNoRandPartB);
  methods[28].selector = @selector(setupNoRandPartC);
  methods[29].selector = @selector(setDecompressStructureSizesWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "last_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "origPtr_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize100k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockRandomised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bsBuff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bsLive_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCrc_", "LLibOrgBouncycastleApacheBzip2CRC;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inUse_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nInUse_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seqToUnseq_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unseqToSeq_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selector_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectorMtf_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tt_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ll8_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unzftab_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "limit_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "base_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "perm_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minLens_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bsStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "streamEnd_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentChar_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "START_BLOCK_STATE", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2InputStream_START_BLOCK_STATE, 0x1a, -1, -1, -1, -1 },
    { "RAND_PART_A_STATE", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_A_STATE, 0x1a, -1, -1, -1, -1 },
    { "RAND_PART_B_STATE", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_B_STATE, 0x1a, -1, -1, -1, -1 },
    { "RAND_PART_C_STATE", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_C_STATE, 0x1a, -1, -1, -1, -1 },
    { "NO_RAND_PART_A_STATE", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_A_STATE, 0x1a, -1, -1, -1, -1 },
    { "NO_RAND_PART_B_STATE", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_B_STATE, 0x1a, -1, -1, -1, -1 },
    { "NO_RAND_PART_C_STATE", "I", .constantValue.asInt = LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_C_STATE, 0x1a, -1, -1, -1, -1 },
    { "currentState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storedBlockCRC_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storedCombinedCRC_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "computedBlockCRC_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "computedCombinedCRC_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "i2_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "chPrev_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ch2_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tPos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "rNToGo_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "rTPos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "j2_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "z_", "C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "initialize", "bsSetStream", "bsR", "I", "bsGetIntVS", "hbCreateDecodeTables", "[I[I[I[CIII", "setDecompressStructureSizes" };
  static const J2ObjcClassInfo _LibOrgBouncycastleApacheBzip2CBZip2InputStream = { "CBZip2InputStream", "lib.org.bouncycastle.apache.bzip2", ptrTable, methods, fields, 7, 0x1, 30, 45, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleApacheBzip2CBZip2InputStream;
}

@end

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_cadvise() {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"CRC Error"];
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF() {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize();
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_cadvise();
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_makeMaps(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  jint i;
  self->nInUse_ = 0;
  for (i = 0; i < 256; i++) {
    if (IOSBooleanArray_Get(nil_chk(self->inUse_), i)) {
      *IOSCharArray_GetRef(nil_chk(self->seqToUnseq_), self->nInUse_) = (jchar) i;
      *IOSCharArray_GetRef(nil_chk(self->unseqToSeq_), i) = (jchar) self->nInUse_;
      self->nInUse_++;
    }
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_initWithJavaIoInputStream_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, JavaIoInputStream *zStream) {
  JavaIoInputStream_init(self);
  self->mCrc_ = new_LibOrgBouncycastleApacheBzip2CRC_init();
  self->inUse_ = [IOSBooleanArray newArrayWithLength:256];
  self->seqToUnseq_ = [IOSCharArray newArrayWithLength:256];
  self->unseqToSeq_ = [IOSCharArray newArrayWithLength:256];
  self->selector_ = [IOSCharArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_SELECTORS];
  self->selectorMtf_ = [IOSCharArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_SELECTORS];
  self->unzftab_ = [IOSIntArray newArrayWithLength:256];
  self->limit_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS, LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE }];
  self->base_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS, LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE }];
  self->perm_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS, LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE }];
  self->minLens_ = [IOSIntArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS];
  self->streamEnd_ = false;
  self->currentChar_ = -1;
  self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_START_BLOCK_STATE;
  self->rNToGo_ = 0;
  self->rTPos_ = 0;
  self->ll8_ = nil;
  self->tt_ = nil;
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsSetStreamWithJavaIoInputStream_(self, zStream);
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize__(self);
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initBlock(self);
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupBlock(self);
}

LibOrgBouncycastleApacheBzip2CBZip2InputStream *new_LibOrgBouncycastleApacheBzip2CBZip2InputStream_initWithJavaIoInputStream_(JavaIoInputStream *zStream) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleApacheBzip2CBZip2InputStream, initWithJavaIoInputStream_, zStream)
}

LibOrgBouncycastleApacheBzip2CBZip2InputStream *create_LibOrgBouncycastleApacheBzip2CBZip2InputStream_initWithJavaIoInputStream_(JavaIoInputStream *zStream) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleApacheBzip2CBZip2InputStream, initWithJavaIoInputStream_, zStream)
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize__(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  jchar magic3;
  jchar magic4;
  magic3 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  magic4 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  if (magic3 != 'B' && magic4 != 'Z') {
    @throw new_JavaIoIOException_initWithNSString_(@"Not a BZIP2 marked stream");
  }
  magic3 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  magic4 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  if (magic3 != 'h' || magic4 < '1' || magic4 > '9') {
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsFinishedWithStream(self);
    self->streamEnd_ = true;
    return;
  }
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_setDecompressStructureSizesWithInt_(self, magic4 - '0');
  self->computedCombinedCRC_ = 0;
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_initBlock(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  jchar magic1;
  jchar magic2;
  jchar magic3;
  jchar magic4;
  jchar magic5;
  jchar magic6;
  magic1 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  magic2 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  magic3 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  magic4 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  magic5 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  magic6 = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(self);
  if (magic1 == (jint) 0x17 && magic2 == (jint) 0x72 && magic3 == (jint) 0x45 && magic4 == (jint) 0x38 && magic5 == (jint) 0x50 && magic6 == (jint) 0x90) {
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_complete(self);
    return;
  }
  if (magic1 != (jint) 0x31 || magic2 != (jint) 0x41 || magic3 != (jint) 0x59 || magic4 != (jint) 0x26 || magic5 != (jint) 0x53 || magic6 != (jint) 0x59) {
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_badBlockHeader();
    self->streamEnd_ = true;
    return;
  }
  self->storedBlockCRC_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetInt32(self);
  if (LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 1) == 1) {
    self->blockRandomised_ = true;
  }
  else {
    self->blockRandomised_ = false;
  }
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_getAndMoveToFrontDecode(self);
  [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) initialiseCRC];
  self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_START_BLOCK_STATE;
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_endBlock(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  self->computedBlockCRC_ = [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) getFinalCRC];
  if (self->storedBlockCRC_ != self->computedBlockCRC_) {
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_crcError();
  }
  self->computedCombinedCRC_ = (JreLShift32(self->computedCombinedCRC_, 1)) | (JreURShift32(self->computedCombinedCRC_, 31));
  self->computedCombinedCRC_ ^= self->computedBlockCRC_;
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_complete(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  self->storedCombinedCRC_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetInt32(self);
  if (self->storedCombinedCRC_ != self->computedCombinedCRC_) {
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_crcError();
  }
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsFinishedWithStream(self);
  self->streamEnd_ = true;
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_blockOverrun() {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize();
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_cadvise();
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_badBlockHeader() {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize();
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_cadvise();
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_crcError() {
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_initialize();
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_cadvise();
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsFinishedWithStream(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  @try {
    if (self->bsStream_ != nil) {
      if (self->bsStream_ != JreLoadStatic(JavaLangSystem, in)) {
        [self->bsStream_ close];
        self->bsStream_ = nil;
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsSetStreamWithJavaIoInputStream_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, JavaIoInputStream *f) {
  self->bsStream_ = f;
  self->bsLive_ = 0;
  self->bsBuff_ = 0;
}

jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, jint n) {
  jint v;
  while (self->bsLive_ < n) {
    jint zzi;
    jchar thech = 0;
    @try {
      thech = (jchar) [((JavaIoInputStream *) nil_chk(self->bsStream_)) read];
    }
    @catch (JavaIoIOException *e) {
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF();
    }
    if (thech == -1) {
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF();
    }
    zzi = thech;
    self->bsBuff_ = (JreLShift32(self->bsBuff_, 8)) | (zzi & (jint) 0xff);
    self->bsLive_ += 8;
  }
  v = (JreRShift32(self->bsBuff_, (self->bsLive_ - n))) & ((JreLShift32(1, n)) - 1);
  self->bsLive_ -= n;
  return v;
}

jchar LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetUChar(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  return (jchar) LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 8);
}

jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetint(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  jint u = 0;
  u = (JreLShift32(u, 8)) | LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 8);
  u = (JreLShift32(u, 8)) | LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 8);
  u = (JreLShift32(u, 8)) | LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 8);
  u = (JreLShift32(u, 8)) | LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 8);
  return u;
}

jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetIntVSWithInt_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, jint numBits) {
  return (jint) LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, numBits);
}

jint LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetInt32(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  return (jint) LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetint(self);
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_hbCreateDecodeTablesWithIntArray_withIntArray_withIntArray_withCharArray_withInt_withInt_withInt_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, IOSIntArray *limit, IOSIntArray *base, IOSIntArray *perm, IOSCharArray *length, jint minLen, jint maxLen, jint alphaSize) {
  jint pp;
  jint i;
  jint j;
  jint vec;
  pp = 0;
  for (i = minLen; i <= maxLen; i++) {
    for (j = 0; j < alphaSize; j++) {
      if (IOSCharArray_Get(nil_chk(length), j) == i) {
        *IOSIntArray_GetRef(nil_chk(perm), pp) = j;
        pp++;
      }
    }
  }
  for (i = 0; i < LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_CODE_LEN; i++) {
    *IOSIntArray_GetRef(nil_chk(base), i) = 0;
  }
  for (i = 0; i < alphaSize; i++) {
    (*IOSIntArray_GetRef(nil_chk(base), IOSCharArray_Get(nil_chk(length), i) + 1))++;
  }
  for (i = 1; i < LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_CODE_LEN; i++) {
    *IOSIntArray_GetRef(nil_chk(base), i) += IOSIntArray_Get(base, i - 1);
  }
  for (i = 0; i < LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_CODE_LEN; i++) {
    *IOSIntArray_GetRef(nil_chk(limit), i) = 0;
  }
  vec = 0;
  for (i = minLen; i <= maxLen; i++) {
    vec += (IOSIntArray_Get(nil_chk(base), i + 1) - IOSIntArray_Get(base, i));
    *IOSIntArray_GetRef(nil_chk(limit), i) = vec - 1;
    JreLShiftAssignInt(&vec, 1);
  }
  for (i = minLen + 1; i <= maxLen; i++) {
    *IOSIntArray_GetRef(nil_chk(base), i) = (JreLShift32((IOSIntArray_Get(nil_chk(limit), i - 1) + 1), 1)) - IOSIntArray_Get(base, i);
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_recvDecodingTables(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  IOSObjectArray *len = [IOSCharArray newArrayWithDimensions:2 lengths:(jint[]){ LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS, LibOrgBouncycastleApacheBzip2BZip2Constants_MAX_ALPHA_SIZE }];
  jint i;
  jint j;
  jint t;
  jint nGroups;
  jint nSelectors;
  jint alphaSize;
  jint minLen;
  jint maxLen;
  IOSBooleanArray *inUse16 = [IOSBooleanArray newArrayWithLength:16];
  for (i = 0; i < 16; i++) {
    if (LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 1) == 1) {
      *IOSBooleanArray_GetRef(inUse16, i) = true;
    }
    else {
      *IOSBooleanArray_GetRef(inUse16, i) = false;
    }
  }
  for (i = 0; i < 256; i++) {
    *IOSBooleanArray_GetRef(nil_chk(self->inUse_), i) = false;
  }
  for (i = 0; i < 16; i++) {
    if (IOSBooleanArray_Get(inUse16, i)) {
      for (j = 0; j < 16; j++) {
        if (LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 1) == 1) {
          *IOSBooleanArray_GetRef(nil_chk(self->inUse_), i * 16 + j) = true;
        }
      }
    }
  }
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_makeMaps(self);
  alphaSize = self->nInUse_ + 2;
  nGroups = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 3);
  nSelectors = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 15);
  for (i = 0; i < nSelectors; i++) {
    j = 0;
    while (LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 1) == 1) {
      j++;
    }
    *IOSCharArray_GetRef(nil_chk(self->selectorMtf_), i) = (jchar) j;
  }
  {
    IOSCharArray *pos = [IOSCharArray newArrayWithLength:LibOrgBouncycastleApacheBzip2BZip2Constants_N_GROUPS];
    jchar tmp;
    jchar v;
    for (v = 0; v < nGroups; v++) {
      *IOSCharArray_GetRef(pos, v) = v;
    }
    for (i = 0; i < nSelectors; i++) {
      v = IOSCharArray_Get(nil_chk(self->selectorMtf_), i);
      tmp = IOSCharArray_Get(pos, v);
      while (v > 0) {
        *IOSCharArray_GetRef(pos, v) = IOSCharArray_Get(pos, v - 1);
        v--;
      }
      *IOSCharArray_GetRef(pos, 0) = tmp;
      *IOSCharArray_GetRef(nil_chk(self->selector_), i) = tmp;
    }
  }
  for (t = 0; t < nGroups; t++) {
    jint curr = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 5);
    for (i = 0; i < alphaSize; i++) {
      while (LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 1) == 1) {
        if (LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, 1) == 0) {
          curr++;
        }
        else {
          curr--;
        }
      }
      *IOSCharArray_GetRef(nil_chk(IOSObjectArray_Get(len, t)), i) = (jchar) curr;
    }
  }
  for (t = 0; t < nGroups; t++) {
    minLen = 32;
    maxLen = 0;
    for (i = 0; i < alphaSize; i++) {
      if (IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i) > maxLen) {
        maxLen = IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i);
      }
      if (IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i) < minLen) {
        minLen = IOSCharArray_Get(nil_chk(IOSObjectArray_Get(len, t)), i);
      }
    }
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_hbCreateDecodeTablesWithIntArray_withIntArray_withIntArray_withCharArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(nil_chk(self->limit_), t), IOSObjectArray_Get(nil_chk(self->base_), t), IOSObjectArray_Get(nil_chk(self->perm_), t), IOSObjectArray_Get(len, t), minLen, maxLen, alphaSize);
    *IOSIntArray_GetRef(nil_chk(self->minLens_), t) = minLen;
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_getAndMoveToFrontDecode(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  IOSCharArray *yy = [IOSCharArray newArrayWithLength:256];
  jint i;
  jint j;
  jint nextSym;
  jint limitLast;
  jint EOB;
  jint groupNo;
  jint groupPos;
  limitLast = LibOrgBouncycastleApacheBzip2BZip2Constants_baseBlockSize * self->blockSize100k_;
  self->origPtr_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsGetIntVSWithInt_(self, 24);
  LibOrgBouncycastleApacheBzip2CBZip2InputStream_recvDecodingTables(self);
  EOB = self->nInUse_ + 1;
  groupNo = -1;
  groupPos = 0;
  for (i = 0; i <= 255; i++) {
    *IOSIntArray_GetRef(nil_chk(self->unzftab_), i) = 0;
  }
  for (i = 0; i <= 255; i++) {
    *IOSCharArray_GetRef(yy, i) = (jchar) i;
  }
  self->last_ = -1;
  {
    jint zt;
    jint zn;
    jint zvec;
    jint zj;
    if (groupPos == 0) {
      groupNo++;
      groupPos = LibOrgBouncycastleApacheBzip2BZip2Constants_G_SIZE;
    }
    groupPos--;
    zt = IOSCharArray_Get(nil_chk(self->selector_), groupNo);
    zn = IOSIntArray_Get(nil_chk(self->minLens_), zt);
    zvec = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, zn);
    while (zvec > IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->limit_), zt)), zn)) {
      zn++;
      {
        {
          while (self->bsLive_ < 1) {
            jint zzi;
            jchar thech = 0;
            @try {
              thech = (jchar) [((JavaIoInputStream *) nil_chk(self->bsStream_)) read];
            }
            @catch (JavaIoIOException *e) {
              LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF();
            }
            if (thech == -1) {
              LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF();
            }
            zzi = thech;
            self->bsBuff_ = (JreLShift32(self->bsBuff_, 8)) | (zzi & (jint) 0xff);
            self->bsLive_ += 8;
          }
        }
        zj = (JreRShift32(self->bsBuff_, (self->bsLive_ - 1))) & 1;
        self->bsLive_--;
      }
      zvec = (JreLShift32(zvec, 1)) | zj;
    }
    nextSym = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->perm_), zt)), zvec - IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->base_), zt)), zn));
  }
  while (true) {
    if (nextSym == EOB) {
      break;
    }
    if (nextSym == LibOrgBouncycastleApacheBzip2BZip2Constants_RUNA || nextSym == LibOrgBouncycastleApacheBzip2BZip2Constants_RUNB) {
      jchar ch;
      jint s = -1;
      jint N = 1;
      do {
        if (nextSym == LibOrgBouncycastleApacheBzip2BZip2Constants_RUNA) {
          s = s + (0 + 1) * N;
        }
        else if (nextSym == LibOrgBouncycastleApacheBzip2BZip2Constants_RUNB) {
          s = s + (1 + 1) * N;
        }
        N = N * 2;
        {
          jint zt;
          jint zn;
          jint zvec;
          jint zj;
          if (groupPos == 0) {
            groupNo++;
            groupPos = LibOrgBouncycastleApacheBzip2BZip2Constants_G_SIZE;
          }
          groupPos--;
          zt = IOSCharArray_Get(nil_chk(self->selector_), groupNo);
          zn = IOSIntArray_Get(nil_chk(self->minLens_), zt);
          zvec = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, zn);
          while (zvec > IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->limit_), zt)), zn)) {
            zn++;
            {
              {
                while (self->bsLive_ < 1) {
                  jint zzi;
                  jchar thech = 0;
                  @try {
                    thech = (jchar) [((JavaIoInputStream *) nil_chk(self->bsStream_)) read];
                  }
                  @catch (JavaIoIOException *e) {
                    LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF();
                  }
                  if (thech == -1) {
                    LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF();
                  }
                  zzi = thech;
                  self->bsBuff_ = (JreLShift32(self->bsBuff_, 8)) | (zzi & (jint) 0xff);
                  self->bsLive_ += 8;
                }
              }
              zj = (JreRShift32(self->bsBuff_, (self->bsLive_ - 1))) & 1;
              self->bsLive_--;
            }
            zvec = (JreLShift32(zvec, 1)) | zj;
          }
          nextSym = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->perm_), zt)), zvec - IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->base_), zt)), zn));
        }
      }
      while (nextSym == LibOrgBouncycastleApacheBzip2BZip2Constants_RUNA || nextSym == LibOrgBouncycastleApacheBzip2BZip2Constants_RUNB);
      s++;
      ch = IOSCharArray_Get(nil_chk(self->seqToUnseq_), IOSCharArray_Get(yy, 0));
      *IOSIntArray_GetRef(nil_chk(self->unzftab_), ch) += s;
      while (s > 0) {
        self->last_++;
        *IOSCharArray_GetRef(nil_chk(self->ll8_), self->last_) = ch;
        s--;
      }
      if (self->last_ >= limitLast) {
        LibOrgBouncycastleApacheBzip2CBZip2InputStream_blockOverrun();
      }
      continue;
    }
    else {
      jchar tmp;
      self->last_++;
      if (self->last_ >= limitLast) {
        LibOrgBouncycastleApacheBzip2CBZip2InputStream_blockOverrun();
      }
      tmp = IOSCharArray_Get(yy, nextSym - 1);
      (*IOSIntArray_GetRef(nil_chk(self->unzftab_), IOSCharArray_Get(nil_chk(self->seqToUnseq_), tmp)))++;
      *IOSCharArray_GetRef(nil_chk(self->ll8_), self->last_) = IOSCharArray_Get(self->seqToUnseq_, tmp);
      j = nextSym - 1;
      for (; j > 3; j -= 4) {
        *IOSCharArray_GetRef(yy, j) = IOSCharArray_Get(yy, j - 1);
        *IOSCharArray_GetRef(yy, j - 1) = IOSCharArray_Get(yy, j - 2);
        *IOSCharArray_GetRef(yy, j - 2) = IOSCharArray_Get(yy, j - 3);
        *IOSCharArray_GetRef(yy, j - 3) = IOSCharArray_Get(yy, j - 4);
      }
      for (; j > 0; j--) {
        *IOSCharArray_GetRef(yy, j) = IOSCharArray_Get(yy, j - 1);
      }
      *IOSCharArray_GetRef(yy, 0) = tmp;
      {
        jint zt;
        jint zn;
        jint zvec;
        jint zj;
        if (groupPos == 0) {
          groupNo++;
          groupPos = LibOrgBouncycastleApacheBzip2BZip2Constants_G_SIZE;
        }
        groupPos--;
        zt = IOSCharArray_Get(nil_chk(self->selector_), groupNo);
        zn = IOSIntArray_Get(nil_chk(self->minLens_), zt);
        zvec = LibOrgBouncycastleApacheBzip2CBZip2InputStream_bsRWithInt_(self, zn);
        while (zvec > IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->limit_), zt)), zn)) {
          zn++;
          {
            {
              while (self->bsLive_ < 1) {
                jint zzi;
                jchar thech = 0;
                @try {
                  thech = (jchar) [((JavaIoInputStream *) nil_chk(self->bsStream_)) read];
                }
                @catch (JavaIoIOException *e) {
                  LibOrgBouncycastleApacheBzip2CBZip2InputStream_compressedStreamEOF();
                }
                zzi = thech;
                self->bsBuff_ = (JreLShift32(self->bsBuff_, 8)) | (zzi & (jint) 0xff);
                self->bsLive_ += 8;
              }
            }
            zj = (JreRShift32(self->bsBuff_, (self->bsLive_ - 1))) & 1;
            self->bsLive_--;
          }
          zvec = (JreLShift32(zvec, 1)) | zj;
        }
        nextSym = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->perm_), zt)), zvec - IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->base_), zt)), zn));
      }
      continue;
    }
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupBlock(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  IOSIntArray *cftab = [IOSIntArray newArrayWithLength:257];
  jchar ch;
  *IOSIntArray_GetRef(cftab, 0) = 0;
  for (self->i_ = 1; self->i_ <= 256; self->i_++) {
    *IOSIntArray_GetRef(cftab, self->i_) = IOSIntArray_Get(nil_chk(self->unzftab_), self->i_ - 1);
  }
  for (self->i_ = 1; self->i_ <= 256; self->i_++) {
    *IOSIntArray_GetRef(cftab, self->i_) += IOSIntArray_Get(cftab, self->i_ - 1);
  }
  for (self->i_ = 0; self->i_ <= self->last_; self->i_++) {
    ch = (jchar) IOSCharArray_Get(nil_chk(self->ll8_), self->i_);
    *IOSIntArray_GetRef(nil_chk(self->tt_), IOSIntArray_Get(cftab, ch)) = self->i_;
    (*IOSIntArray_GetRef(cftab, ch))++;
  }
  cftab = nil;
  self->tPos_ = IOSIntArray_Get(nil_chk(self->tt_), self->origPtr_);
  self->count_ = 0;
  self->i2_ = 0;
  self->ch2_ = 256;
  if (self->blockRandomised_) {
    self->rNToGo_ = 0;
    self->rTPos_ = 0;
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartA(self);
  }
  else {
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartA(self);
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartA(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  if (self->i2_ <= self->last_) {
    self->chPrev_ = self->ch2_;
    self->ch2_ = IOSCharArray_Get(nil_chk(self->ll8_), self->tPos_);
    self->tPos_ = IOSIntArray_Get(nil_chk(self->tt_), self->tPos_);
    if (self->rNToGo_ == 0) {
      self->rNToGo_ = IOSIntArray_Get(nil_chk(JreLoadStatic(LibOrgBouncycastleApacheBzip2BZip2Constants, rNums)), self->rTPos_);
      self->rTPos_++;
      if (self->rTPos_ == 512) {
        self->rTPos_ = 0;
      }
    }
    self->rNToGo_--;
    self->ch2_ ^= (jint) ((self->rNToGo_ == 1) ? 1 : 0);
    self->i2_++;
    self->currentChar_ = self->ch2_;
    self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_B_STATE;
    [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) updateCRCWithInt:self->ch2_];
  }
  else {
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_endBlock(self);
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_initBlock(self);
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupBlock(self);
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartA(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  if (self->i2_ <= self->last_) {
    self->chPrev_ = self->ch2_;
    self->ch2_ = IOSCharArray_Get(nil_chk(self->ll8_), self->tPos_);
    self->tPos_ = IOSIntArray_Get(nil_chk(self->tt_), self->tPos_);
    self->i2_++;
    self->currentChar_ = self->ch2_;
    self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_B_STATE;
    [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) updateCRCWithInt:self->ch2_];
  }
  else {
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_endBlock(self);
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_initBlock(self);
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupBlock(self);
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartB(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  if (self->ch2_ != self->chPrev_) {
    self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_A_STATE;
    self->count_ = 1;
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartA(self);
  }
  else {
    self->count_++;
    if (self->count_ >= 4) {
      self->z_ = IOSCharArray_Get(nil_chk(self->ll8_), self->tPos_);
      self->tPos_ = IOSIntArray_Get(nil_chk(self->tt_), self->tPos_);
      if (self->rNToGo_ == 0) {
        self->rNToGo_ = IOSIntArray_Get(nil_chk(JreLoadStatic(LibOrgBouncycastleApacheBzip2BZip2Constants, rNums)), self->rTPos_);
        self->rTPos_++;
        if (self->rTPos_ == 512) {
          self->rTPos_ = 0;
        }
      }
      self->rNToGo_--;
      self->z_ ^= ((self->rNToGo_ == 1) ? 1 : 0);
      self->j2_ = 0;
      self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_C_STATE;
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartC(self);
    }
    else {
      self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_A_STATE;
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartA(self);
    }
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartC(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  if (self->j2_ < (jint) self->z_) {
    self->currentChar_ = self->ch2_;
    [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) updateCRCWithInt:self->ch2_];
    self->j2_++;
  }
  else {
    self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_RAND_PART_A_STATE;
    self->i2_++;
    self->count_ = 0;
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupRandPartA(self);
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartB(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  if (self->ch2_ != self->chPrev_) {
    self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_A_STATE;
    self->count_ = 1;
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartA(self);
  }
  else {
    self->count_++;
    if (self->count_ >= 4) {
      self->z_ = IOSCharArray_Get(nil_chk(self->ll8_), self->tPos_);
      self->tPos_ = IOSIntArray_Get(nil_chk(self->tt_), self->tPos_);
      self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_C_STATE;
      self->j2_ = 0;
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartC(self);
    }
    else {
      self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_A_STATE;
      LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartA(self);
    }
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartC(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self) {
  if (self->j2_ < (jint) self->z_) {
    self->currentChar_ = self->ch2_;
    [((LibOrgBouncycastleApacheBzip2CRC *) nil_chk(self->mCrc_)) updateCRCWithInt:self->ch2_];
    self->j2_++;
  }
  else {
    self->currentState_ = LibOrgBouncycastleApacheBzip2CBZip2InputStream_NO_RAND_PART_A_STATE;
    self->i2_++;
    self->count_ = 0;
    LibOrgBouncycastleApacheBzip2CBZip2InputStream_setupNoRandPartA(self);
  }
}

void LibOrgBouncycastleApacheBzip2CBZip2InputStream_setDecompressStructureSizesWithInt_(LibOrgBouncycastleApacheBzip2CBZip2InputStream *self, jint newSize100k) {
  if (!(0 <= newSize100k && newSize100k <= 9 && 0 <= self->blockSize100k_ && self->blockSize100k_ <= 9)) {
  }
  self->blockSize100k_ = newSize100k;
  if (newSize100k == 0) {
    return;
  }
  jint n = LibOrgBouncycastleApacheBzip2BZip2Constants_baseBlockSize * newSize100k;
  self->ll8_ = [IOSCharArray newArrayWithLength:n];
  self->tt_ = [IOSIntArray newArrayWithLength:n];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleApacheBzip2CBZip2InputStream)
