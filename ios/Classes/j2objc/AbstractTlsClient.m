//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/AbstractTlsClient.java
//

#include "AbstractTlsClient.h"
#include "AbstractTlsPeer.h"
#include "AlertDescription.h"
#include "CompressionMethod.h"
#include "DefaultTlsCipherFactory.h"
#include "ECPointFormat.h"
#include "ExtensionType.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NamedCurve.h"
#include "NewSessionTicket.h"
#include "ProtocolVersion.h"
#include "TlsCipher.h"
#include "TlsCipherFactory.h"
#include "TlsClientContext.h"
#include "TlsCompression.h"
#include "TlsECCUtils.h"
#include "TlsExtensionsUtils.h"
#include "TlsFatalAlert.h"
#include "TlsNullCompression.h"
#include "TlsSession.h"
#include "TlsUtils.h"
#include "java/lang/Integer.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation LibOrgBouncycastleCryptoTlsAbstractTlsClient

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsAbstractTlsClient_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory {
  LibOrgBouncycastleCryptoTlsAbstractTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  return self;
}

- (jboolean)allowUnexpectedServerExtensionWithJavaLangInteger:(JavaLangInteger *)extensionType
                                                withByteArray:(IOSByteArray *)extensionData {
  switch ([((JavaLangInteger *) nil_chk(extensionType)) intValue]) {
    case LibOrgBouncycastleCryptoTlsExtensionType_elliptic_curves:
    (void) LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(extensionData);
    return true;
    case LibOrgBouncycastleCryptoTlsExtensionType_ec_point_formats:
    (void) LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(extensionData);
    return true;
    default:
    return false;
  }
}

- (void)checkForUnexpectedServerExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions
                                           withJavaLangInteger:(JavaLangInteger *)extensionType {
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(serverExtensions, extensionType);
  if (extensionData != nil && ![self allowUnexpectedServerExtensionWithJavaLangInteger:extensionType withByteArray:extensionData]) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
  }
}

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsClientContext:(id<LibOrgBouncycastleCryptoTlsTlsClientContext>)context {
  self->context_ = context;
}

- (id<LibOrgBouncycastleCryptoTlsTlsSession>)getSessionToResume {
  return nil;
}

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getClientHelloRecordLayerVersion {
  return [self getClientVersion];
}

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getClientVersion {
  return JreLoadStatic(LibOrgBouncycastleCryptoTlsProtocolVersion, TLSv12);
}

- (jboolean)isFallback {
  return false;
}

- (JavaUtilHashtable *)getClientExtensions {
  JavaUtilHashtable *clientExtensions = nil;
  LibOrgBouncycastleCryptoTlsProtocolVersion *clientVersion = [((id<LibOrgBouncycastleCryptoTlsTlsClientContext>) nil_chk(context_)) getClientVersion];
  if (LibOrgBouncycastleCryptoTlsTlsUtils_isSignatureAlgorithmsExtensionAllowedWithLibOrgBouncycastleCryptoTlsProtocolVersion_(clientVersion)) {
    self->supportedSignatureAlgorithms_ = LibOrgBouncycastleCryptoTlsTlsUtils_getDefaultSupportedSignatureAlgorithms();
    clientExtensions = LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(clientExtensions);
    LibOrgBouncycastleCryptoTlsTlsUtils_addSignatureAlgorithmsExtensionWithJavaUtilHashtable_withJavaUtilVector_(clientExtensions, supportedSignatureAlgorithms_);
  }
  if (LibOrgBouncycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_([self getCipherSuites])) {
    self->namedCurves_ = [IOSIntArray newArrayWithInts:(jint[]){ LibOrgBouncycastleCryptoTlsNamedCurve_secp256r1, LibOrgBouncycastleCryptoTlsNamedCurve_secp384r1 } count:2];
    self->clientECPointFormats_ = [IOSShortArray newArrayWithShorts:(jshort[]){ LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed, LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_prime, LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_char2 } count:3];
    clientExtensions = LibOrgBouncycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(clientExtensions);
    LibOrgBouncycastleCryptoTlsTlsECCUtils_addSupportedEllipticCurvesExtensionWithJavaUtilHashtable_withIntArray_(clientExtensions, namedCurves_);
    LibOrgBouncycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_(clientExtensions, clientECPointFormats_);
  }
  return clientExtensions;
}

- (LibOrgBouncycastleCryptoTlsProtocolVersion *)getMinimumVersion {
  return JreLoadStatic(LibOrgBouncycastleCryptoTlsProtocolVersion, TLSv10);
}

- (void)notifyServerVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:(LibOrgBouncycastleCryptoTlsProtocolVersion *)serverVersion {
  if (![((LibOrgBouncycastleCryptoTlsProtocolVersion *) nil_chk([self getMinimumVersion])) isEqualOrEarlierVersionOfWithLibOrgBouncycastleCryptoTlsProtocolVersion:serverVersion]) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_protocol_version);
  }
}

- (IOSShortArray *)getCompressionMethods {
  return [IOSShortArray newArrayWithShorts:(jshort[]){ LibOrgBouncycastleCryptoTlsCompressionMethod__null } count:1];
}

- (void)notifySessionIDWithByteArray:(IOSByteArray *)sessionID {
}

- (void)notifySelectedCipherSuiteWithInt:(jint)selectedCipherSuite {
  self->selectedCipherSuite_ = selectedCipherSuite;
}

- (void)notifySelectedCompressionMethodWithShort:(jshort)selectedCompressionMethod {
  self->selectedCompressionMethod_ = selectedCompressionMethod;
}

- (void)processServerExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions {
  if (serverExtensions != nil) {
    [self checkForUnexpectedServerExtensionWithJavaUtilHashtable:serverExtensions withJavaLangInteger:JreLoadStatic(LibOrgBouncycastleCryptoTlsTlsUtils, EXT_signature_algorithms)];
    [self checkForUnexpectedServerExtensionWithJavaUtilHashtable:serverExtensions withJavaLangInteger:JreLoadStatic(LibOrgBouncycastleCryptoTlsTlsECCUtils, EXT_elliptic_curves)];
    if (LibOrgBouncycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(self->selectedCipherSuite_)) {
      self->serverECPointFormats_ = LibOrgBouncycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(serverExtensions);
    }
    else {
      [self checkForUnexpectedServerExtensionWithJavaUtilHashtable:serverExtensions withJavaLangInteger:JreLoadStatic(LibOrgBouncycastleCryptoTlsTlsECCUtils, EXT_ec_point_formats)];
    }
    [self checkForUnexpectedServerExtensionWithJavaUtilHashtable:serverExtensions withJavaLangInteger:JreLoadStatic(LibOrgBouncycastleCryptoTlsTlsExtensionsUtils, EXT_padding)];
  }
}

- (void)processServerSupplementalDataWithJavaUtilVector:(JavaUtilVector *)serverSupplementalData {
  if (serverSupplementalData != nil) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (JavaUtilVector *)getClientSupplementalData {
  return nil;
}

- (id<LibOrgBouncycastleCryptoTlsTlsCompression>)getCompression {
  switch (selectedCompressionMethod_) {
    case LibOrgBouncycastleCryptoTlsCompressionMethod__null:
    return new_LibOrgBouncycastleCryptoTlsTlsNullCompression_init();
    default:
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<LibOrgBouncycastleCryptoTlsTlsCipher>)getCipher {
  jint encryptionAlgorithm = LibOrgBouncycastleCryptoTlsTlsUtils_getEncryptionAlgorithmWithInt_(selectedCipherSuite_);
  jint macAlgorithm = LibOrgBouncycastleCryptoTlsTlsUtils_getMACAlgorithmWithInt_(selectedCipherSuite_);
  return [((id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>) nil_chk(cipherFactory_)) createCipherWithLibOrgBouncycastleCryptoTlsTlsContext:context_ withInt:encryptionAlgorithm withInt:macAlgorithm];
}

- (void)notifyNewSessionTicketWithLibOrgBouncycastleCryptoTlsNewSessionTicket:(LibOrgBouncycastleCryptoTlsNewSessionTicket *)newSessionTicket {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsSession;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsProtocolVersion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsProtocolVersion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsProtocolVersion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "[S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 3, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsCompression;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsCipher;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:);
  methods[2].selector = @selector(allowUnexpectedServerExtensionWithJavaLangInteger:withByteArray:);
  methods[3].selector = @selector(checkForUnexpectedServerExtensionWithJavaUtilHashtable:withJavaLangInteger:);
  methods[4].selector = @selector(init__WithLibOrgBouncycastleCryptoTlsTlsClientContext:);
  methods[5].selector = @selector(getSessionToResume);
  methods[6].selector = @selector(getClientHelloRecordLayerVersion);
  methods[7].selector = @selector(getClientVersion);
  methods[8].selector = @selector(isFallback);
  methods[9].selector = @selector(getClientExtensions);
  methods[10].selector = @selector(getMinimumVersion);
  methods[11].selector = @selector(notifyServerVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion:);
  methods[12].selector = @selector(getCompressionMethods);
  methods[13].selector = @selector(notifySessionIDWithByteArray:);
  methods[14].selector = @selector(notifySelectedCipherSuiteWithInt:);
  methods[15].selector = @selector(notifySelectedCompressionMethodWithShort:);
  methods[16].selector = @selector(processServerExtensionsWithJavaUtilHashtable:);
  methods[17].selector = @selector(processServerSupplementalDataWithJavaUtilVector:);
  methods[18].selector = @selector(getClientSupplementalData);
  methods[19].selector = @selector(getCompression);
  methods[20].selector = @selector(getCipher);
  methods[21].selector = @selector(notifyNewSessionTicketWithLibOrgBouncycastleCryptoTlsNewSessionTicket:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipherFactory_", "LLibOrgBouncycastleCryptoTlsTlsCipherFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "context_", "LLibOrgBouncycastleCryptoTlsTlsClientContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "supportedSignatureAlgorithms_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "namedCurves_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientECPointFormats_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverECPointFormats_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "selectedCipherSuite_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "selectedCompressionMethod_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoTlsTlsCipherFactory;", "allowUnexpectedServerExtension", "LJavaLangInteger;[B", "LJavaIoIOException;", "checkForUnexpectedServerExtension", "LJavaUtilHashtable;LJavaLangInteger;", "init", "LLibOrgBouncycastleCryptoTlsTlsClientContext;", "notifyServerVersion", "LLibOrgBouncycastleCryptoTlsProtocolVersion;", "notifySessionID", "[B", "notifySelectedCipherSuite", "I", "notifySelectedCompressionMethod", "S", "processServerExtensions", "LJavaUtilHashtable;", "processServerSupplementalData", "LJavaUtilVector;", "notifyNewSessionTicket", "LLibOrgBouncycastleCryptoTlsNewSessionTicket;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsAbstractTlsClient = { "AbstractTlsClient", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x401, 22, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsAbstractTlsClient;
}

@end

void LibOrgBouncycastleCryptoTlsAbstractTlsClient_init(LibOrgBouncycastleCryptoTlsAbstractTlsClient *self) {
  LibOrgBouncycastleCryptoTlsAbstractTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(self, new_LibOrgBouncycastleCryptoTlsDefaultTlsCipherFactory_init());
}

void LibOrgBouncycastleCryptoTlsAbstractTlsClient_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(LibOrgBouncycastleCryptoTlsAbstractTlsClient *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory) {
  LibOrgBouncycastleCryptoTlsAbstractTlsPeer_init(self);
  self->cipherFactory_ = cipherFactory;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsAbstractTlsClient)
