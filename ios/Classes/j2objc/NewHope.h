//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/newhope/NewHope.java
//

#ifndef NewHope_H
#define NewHope_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSShortArray;
@class JavaSecuritySecureRandom;

@interface LibOrgBouncycastlePqcCryptoNewhopeNewHope : NSObject
@property (readonly, class) jint AGREEMENT_SIZE NS_SWIFT_NAME(AGREEMENT_SIZE);
@property (readonly, class) jint POLY_SIZE NS_SWIFT_NAME(POLY_SIZE);
@property (readonly, class) jint SENDA_BYTES NS_SWIFT_NAME(SENDA_BYTES);
@property (readonly, class) jint SENDB_BYTES NS_SWIFT_NAME(SENDB_BYTES);

+ (jint)AGREEMENT_SIZE;

+ (jint)POLY_SIZE;

+ (jint)SENDA_BYTES;

+ (jint)SENDB_BYTES;

#pragma mark Public

+ (void)keygenWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand
                             withByteArray:(IOSByteArray *)send
                            withShortArray:(IOSShortArray *)sk;

+ (void)sharedAWithByteArray:(IOSByteArray *)sharedKey
              withShortArray:(IOSShortArray *)sk
               withByteArray:(IOSByteArray *)received;

+ (void)sharedBWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand
                              withByteArray:(IOSByteArray *)sharedKey
                              withByteArray:(IOSByteArray *)send
                              withByteArray:(IOSByteArray *)received;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (void)decodeAWithShortArray:(IOSShortArray *)pk
                withByteArray:(IOSByteArray *)seed
                withByteArray:(IOSByteArray *)r;

+ (void)decodeBWithShortArray:(IOSShortArray *)b
               withShortArray:(IOSShortArray *)c
                withByteArray:(IOSByteArray *)r;

+ (void)encodeAWithByteArray:(IOSByteArray *)r
              withShortArray:(IOSShortArray *)pk
               withByteArray:(IOSByteArray *)seed;

+ (void)encodeBWithByteArray:(IOSByteArray *)r
              withShortArray:(IOSShortArray *)b
              withShortArray:(IOSShortArray *)c;

+ (void)generateAWithShortArray:(IOSShortArray *)a
                  withByteArray:(IOSByteArray *)seed;

+ (void)sha3WithByteArray:(IOSByteArray *)sharedKey;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoNewhopeNewHope)

inline jint LibOrgBouncycastlePqcCryptoNewhopeNewHope_get_AGREEMENT_SIZE(void);
#define LibOrgBouncycastlePqcCryptoNewhopeNewHope_AGREEMENT_SIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoNewhopeNewHope, AGREEMENT_SIZE, jint)

inline jint LibOrgBouncycastlePqcCryptoNewhopeNewHope_get_POLY_SIZE(void);
#define LibOrgBouncycastlePqcCryptoNewhopeNewHope_POLY_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoNewhopeNewHope, POLY_SIZE, jint)

inline jint LibOrgBouncycastlePqcCryptoNewhopeNewHope_get_SENDA_BYTES(void);
#define LibOrgBouncycastlePqcCryptoNewhopeNewHope_SENDA_BYTES 1824
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoNewhopeNewHope, SENDA_BYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoNewhopeNewHope_get_SENDB_BYTES(void);
#define LibOrgBouncycastlePqcCryptoNewhopeNewHope_SENDB_BYTES 2048
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoNewhopeNewHope, SENDB_BYTES, jint)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_init(LibOrgBouncycastlePqcCryptoNewhopeNewHope *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNewhopeNewHope *new_LibOrgBouncycastlePqcCryptoNewhopeNewHope_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNewhopeNewHope *create_LibOrgBouncycastlePqcCryptoNewhopeNewHope_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_keygenWithJavaSecuritySecureRandom_withByteArray_withShortArray_(JavaSecuritySecureRandom *rand, IOSByteArray *send, IOSShortArray *sk);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_sharedBWithJavaSecuritySecureRandom_withByteArray_withByteArray_withByteArray_(JavaSecuritySecureRandom *rand, IOSByteArray *sharedKey, IOSByteArray *send, IOSByteArray *received);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_sharedAWithByteArray_withShortArray_withByteArray_(IOSByteArray *sharedKey, IOSShortArray *sk, IOSByteArray *received);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_decodeAWithShortArray_withByteArray_withByteArray_(IOSShortArray *pk, IOSByteArray *seed, IOSByteArray *r);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_decodeBWithShortArray_withShortArray_withByteArray_(IOSShortArray *b, IOSShortArray *c, IOSByteArray *r);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_encodeAWithByteArray_withShortArray_withByteArray_(IOSByteArray *r, IOSShortArray *pk, IOSByteArray *seed);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_encodeBWithByteArray_withShortArray_withShortArray_(IOSByteArray *r, IOSShortArray *b, IOSShortArray *c);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_generateAWithShortArray_withByteArray_(IOSShortArray *a, IOSByteArray *seed);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNewhopeNewHope_sha3WithByteArray_(IOSByteArray *sharedKey);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoNewhopeNewHope)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // NewHope_H
