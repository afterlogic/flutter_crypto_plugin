//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyGenerationParameters.java
//

#ifndef SPHINCS256KeyGenerationParameters_H
#define SPHINCS256KeyGenerationParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "KeyGenerationParameters.h"

@class JavaSecuritySecureRandom;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters : LibOrgBouncycastleCryptoKeyGenerationParameters

#pragma mark Public

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                        withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)treeDigest;

- (id<LibOrgBouncycastleCryptoDigest>)getTreeDigest;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)arg0
                                                   withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *self, JavaSecuritySecureRandom *random, id<LibOrgBouncycastleCryptoDigest> treeDigest);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *new_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoDigest_(JavaSecuritySecureRandom *random, id<LibOrgBouncycastleCryptoDigest> treeDigest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *create_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoDigest_(JavaSecuritySecureRandom *random, id<LibOrgBouncycastleCryptoDigest> treeDigest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SPHINCS256KeyGenerationParameters_H
