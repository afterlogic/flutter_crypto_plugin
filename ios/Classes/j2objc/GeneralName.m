//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/GeneralName.java
//

#include "ASN1Encodable.h"
#include "ASN1Object.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "DERIA5String.h"
#include "DEROctetString.h"
#include "DERTaggedObject.h"
#include "GeneralName.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IPAddress.h"
#include "J2ObjC_source.h"
#include "X500Name.h"
#include "X509Name.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/StringTokenizer.h"

@interface LibOrgBouncycastleAsn1X509GeneralName () {
 @public
  id<LibOrgBouncycastleAsn1ASN1Encodable> obj_;
  jint tag_;
}

- (IOSByteArray *)toGeneralNameEncodingWithNSString:(NSString *)ip;

- (void)parseIPv4MaskWithNSString:(NSString *)mask
                    withByteArray:(IOSByteArray *)addr
                          withInt:(jint)offset;

- (void)parseIPv4WithNSString:(NSString *)ip
                withByteArray:(IOSByteArray *)addr
                      withInt:(jint)offset;

- (IOSIntArray *)parseMaskWithNSString:(NSString *)mask;

- (void)copyIntsWithIntArray:(IOSIntArray *)parsedIp
               withByteArray:(IOSByteArray *)addr
                     withInt:(jint)offSet OBJC_METHOD_FAMILY_NONE;

- (IOSIntArray *)parseIPv6WithNSString:(NSString *)ip;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509GeneralName, obj_, id<LibOrgBouncycastleAsn1ASN1Encodable>)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *ip);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *mask, IOSByteArray *addr, jint offset);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *ip, IOSByteArray *addr, jint offset);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastleAsn1X509GeneralName_parseMaskWithNSString_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *mask);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(LibOrgBouncycastleAsn1X509GeneralName *self, IOSIntArray *parsedIp, IOSByteArray *addr, jint offSet);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *ip);

@implementation LibOrgBouncycastleAsn1X509GeneralName

+ (jint)otherName {
  return LibOrgBouncycastleAsn1X509GeneralName_otherName;
}

+ (jint)rfc822Name {
  return LibOrgBouncycastleAsn1X509GeneralName_rfc822Name;
}

+ (jint)dNSName {
  return LibOrgBouncycastleAsn1X509GeneralName_dNSName;
}

+ (jint)x400Address {
  return LibOrgBouncycastleAsn1X509GeneralName_x400Address;
}

+ (jint)directoryName {
  return LibOrgBouncycastleAsn1X509GeneralName_directoryName;
}

+ (jint)ediPartyName {
  return LibOrgBouncycastleAsn1X509GeneralName_ediPartyName;
}

+ (jint)uniformResourceIdentifier {
  return LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier;
}

+ (jint)iPAddress {
  return LibOrgBouncycastleAsn1X509GeneralName_iPAddress;
}

+ (jint)registeredID {
  return LibOrgBouncycastleAsn1X509GeneralName_registeredID;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509X509Name:(LibOrgBouncycastleAsn1X509X509Name *)dirName {
  LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X509X509Name_(self, dirName);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)dirName {
  LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(self, dirName);
  return self;
}

- (instancetype)initWithInt:(jint)tag
withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)name {
  LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(self, tag, name);
  return self;
}

- (instancetype)initWithInt:(jint)tag
               withNSString:(NSString *)name {
  LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(self, tag, name);
  return self;
}

+ (LibOrgBouncycastleAsn1X509GeneralName *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(obj);
}

+ (LibOrgBouncycastleAsn1X509GeneralName *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)tagObj
                                                                                     withBoolean:(jboolean)explicit_ {
  return LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, explicit_);
}

- (jint)getTagNo {
  return tag_;
}

- (id<LibOrgBouncycastleAsn1ASN1Encodable>)getName {
  return obj_;
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  (void) [buf appendWithInt:tag_];
  (void) [buf appendWithNSString:@": "];
  switch (tag_) {
    case LibOrgBouncycastleAsn1X509GeneralName_rfc822Name:
    case LibOrgBouncycastleAsn1X509GeneralName_dNSName:
    case LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
    (void) [buf appendWithNSString:[((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(LibOrgBouncycastleAsn1DERIA5String_getInstanceWithId_(obj_))) getString]];
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_directoryName:
    (void) [buf appendWithNSString:[((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_(obj_))) description]];
    break;
    default:
    (void) [buf appendWithNSString:[((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk(obj_)) description]];
  }
  return [buf description];
}

- (IOSByteArray *)toGeneralNameEncodingWithNSString:(NSString *)ip {
  return LibOrgBouncycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(self, ip);
}

- (void)parseIPv4MaskWithNSString:(NSString *)mask
                    withByteArray:(IOSByteArray *)addr
                          withInt:(jint)offset {
  LibOrgBouncycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(self, mask, addr, offset);
}

- (void)parseIPv4WithNSString:(NSString *)ip
                withByteArray:(IOSByteArray *)addr
                      withInt:(jint)offset {
  LibOrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, ip, addr, offset);
}

- (IOSIntArray *)parseMaskWithNSString:(NSString *)mask {
  return LibOrgBouncycastleAsn1X509GeneralName_parseMaskWithNSString_(self, mask);
}

- (void)copyIntsWithIntArray:(IOSIntArray *)parsedIp
               withByteArray:(IOSByteArray *)addr
                     withInt:(jint)offSet {
  LibOrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, offSet);
}

- (IOSIntArray *)parseIPv6WithNSString:(NSString *)ip {
  return LibOrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, ip);
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  if (tag_ == LibOrgBouncycastleAsn1X509GeneralName_directoryName) {
    return new_LibOrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(true, tag_, obj_);
  }
  else {
    return new_LibOrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(false, tag_, obj_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509GeneralName;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509GeneralName;", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Encodable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 16, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleAsn1X509X509Name:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1X500X500Name:);
  methods[2].selector = @selector(initWithInt:withLibOrgBouncycastleAsn1ASN1Encodable:);
  methods[3].selector = @selector(initWithInt:withNSString:);
  methods[4].selector = @selector(getInstanceWithId:);
  methods[5].selector = @selector(getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[6].selector = @selector(getTagNo);
  methods[7].selector = @selector(getName);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(toGeneralNameEncodingWithNSString:);
  methods[10].selector = @selector(parseIPv4MaskWithNSString:withByteArray:withInt:);
  methods[11].selector = @selector(parseIPv4WithNSString:withByteArray:withInt:);
  methods[12].selector = @selector(parseMaskWithNSString:);
  methods[13].selector = @selector(copyIntsWithIntArray:withByteArray:withInt:);
  methods[14].selector = @selector(parseIPv6WithNSString:);
  methods[15].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "otherName", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_otherName, 0x19, -1, -1, -1, -1 },
    { "rfc822Name", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_rfc822Name, 0x19, -1, -1, -1, -1 },
    { "dNSName", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_dNSName, 0x19, -1, -1, -1, -1 },
    { "x400Address", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_x400Address, 0x19, -1, -1, -1, -1 },
    { "directoryName", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_directoryName, 0x19, -1, -1, -1, -1 },
    { "ediPartyName", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_ediPartyName, 0x19, -1, -1, -1, -1 },
    { "uniformResourceIdentifier", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier, 0x19, -1, -1, -1, -1 },
    { "iPAddress", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_iPAddress, 0x19, -1, -1, -1, -1 },
    { "registeredID", "I", .constantValue.asInt = LibOrgBouncycastleAsn1X509GeneralName_registeredID, 0x19, -1, -1, -1, -1 },
    { "obj_", "LLibOrgBouncycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tag_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleAsn1X509X509Name;", "LLibOrgBouncycastleAsn1X500X500Name;", "ILLibOrgBouncycastleAsn1ASN1Encodable;", "ILNSString;", "getInstance", "LNSObject;", "LLibOrgBouncycastleAsn1ASN1TaggedObject;Z", "toString", "toGeneralNameEncoding", "LNSString;", "parseIPv4Mask", "LNSString;[BI", "parseIPv4", "parseMask", "copyInts", "[I[BI", "parseIPv6" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1X509GeneralName = { "GeneralName", "lib.org.bouncycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 16, 11, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1X509GeneralName;
}

@end

void LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X509X509Name_(LibOrgBouncycastleAsn1X509GeneralName *self, LibOrgBouncycastleAsn1X509X509Name *dirName) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->obj_ = LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_(dirName);
  self->tag_ = 4;
}

LibOrgBouncycastleAsn1X509GeneralName *new_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X509X509Name_(LibOrgBouncycastleAsn1X509X509Name *dirName) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509GeneralName, initWithLibOrgBouncycastleAsn1X509X509Name_, dirName)
}

LibOrgBouncycastleAsn1X509GeneralName *create_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X509X509Name_(LibOrgBouncycastleAsn1X509X509Name *dirName) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509GeneralName, initWithLibOrgBouncycastleAsn1X509X509Name_, dirName)
}

void LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X509GeneralName *self, LibOrgBouncycastleAsn1X500X500Name *dirName) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->obj_ = dirName;
  self->tag_ = 4;
}

LibOrgBouncycastleAsn1X509GeneralName *new_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name *dirName) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509GeneralName, initWithLibOrgBouncycastleAsn1X500X500Name_, dirName)
}

LibOrgBouncycastleAsn1X509GeneralName *create_LibOrgBouncycastleAsn1X509GeneralName_initWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X500X500Name *dirName) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509GeneralName, initWithLibOrgBouncycastleAsn1X500X500Name_, dirName)
}

void LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1X509GeneralName *self, jint tag, id<LibOrgBouncycastleAsn1ASN1Encodable> name) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->obj_ = name;
  self->tag_ = tag;
}

LibOrgBouncycastleAsn1X509GeneralName *new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(jint tag, id<LibOrgBouncycastleAsn1ASN1Encodable> name) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509GeneralName, initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_, tag, name)
}

LibOrgBouncycastleAsn1X509GeneralName *create_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(jint tag, id<LibOrgBouncycastleAsn1ASN1Encodable> name) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509GeneralName, initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_, tag, name)
}

void LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(LibOrgBouncycastleAsn1X509GeneralName *self, jint tag, NSString *name) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->tag_ = tag;
  if (tag == LibOrgBouncycastleAsn1X509GeneralName_rfc822Name || tag == LibOrgBouncycastleAsn1X509GeneralName_dNSName || tag == LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier) {
    self->obj_ = new_LibOrgBouncycastleAsn1DERIA5String_initWithNSString_(name);
  }
  else if (tag == LibOrgBouncycastleAsn1X509GeneralName_registeredID) {
    self->obj_ = new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(name);
  }
  else if (tag == LibOrgBouncycastleAsn1X509GeneralName_directoryName) {
    self->obj_ = new_LibOrgBouncycastleAsn1X500X500Name_initWithNSString_(name);
  }
  else if (tag == LibOrgBouncycastleAsn1X509GeneralName_iPAddress) {
    IOSByteArray *enc = LibOrgBouncycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(self, name);
    if (enc != nil) {
      self->obj_ = new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(enc);
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"IP Address is invalid");
    }
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"can't process String for tag: ", tag));
  }
}

LibOrgBouncycastleAsn1X509GeneralName *new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(jint tag, NSString *name) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509GeneralName, initWithInt_withNSString_, tag, name)
}

LibOrgBouncycastleAsn1X509GeneralName *create_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(jint tag, NSString *name) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509GeneralName, initWithInt_withNSString_, tag, name)
}

LibOrgBouncycastleAsn1X509GeneralName *LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1X509GeneralName_initialize();
  if (obj == nil || [obj isKindOfClass:[LibOrgBouncycastleAsn1X509GeneralName class]]) {
    return (LibOrgBouncycastleAsn1X509GeneralName *) cast_chk(obj, [LibOrgBouncycastleAsn1X509GeneralName class]);
  }
  if ([obj isKindOfClass:[LibOrgBouncycastleAsn1ASN1TaggedObject class]]) {
    LibOrgBouncycastleAsn1ASN1TaggedObject *tagObj = (LibOrgBouncycastleAsn1ASN1TaggedObject *) obj;
    jint tag = [tagObj getTagNo];
    switch (tag) {
      case LibOrgBouncycastleAsn1X509GeneralName_otherName:
      return new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(tag, LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case LibOrgBouncycastleAsn1X509GeneralName_rfc822Name:
      return new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(tag, LibOrgBouncycastleAsn1DERIA5String_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case LibOrgBouncycastleAsn1X509GeneralName_dNSName:
      return new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(tag, LibOrgBouncycastleAsn1DERIA5String_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case LibOrgBouncycastleAsn1X509GeneralName_x400Address:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown tag: ", tag));
      case LibOrgBouncycastleAsn1X509GeneralName_directoryName:
      return new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(tag, LibOrgBouncycastleAsn1X500X500Name_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, true));
      case LibOrgBouncycastleAsn1X509GeneralName_ediPartyName:
      return new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(tag, LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
      return new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(tag, LibOrgBouncycastleAsn1DERIA5String_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case LibOrgBouncycastleAsn1X509GeneralName_iPAddress:
      return new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(tag, LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case LibOrgBouncycastleAsn1X509GeneralName_registeredID:
      return new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(tag, LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
    }
  }
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    @try {
      return LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_((IOSByteArray *) cast_chk(obj, [IOSByteArray class])));
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unable to parse encoded general name");
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown object in getInstance: ", [[obj java_getClass] getName]));
}

LibOrgBouncycastleAsn1X509GeneralName *LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *tagObj, jboolean explicit_) {
  LibOrgBouncycastleAsn1X509GeneralName_initialize();
  return LibOrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, true));
}

IOSByteArray *LibOrgBouncycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *ip) {
  if (LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(ip) || LibOrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(ip)) {
    jint slashIndex = [((NSString *) nil_chk(ip)) java_indexOf:'/'];
    if (slashIndex < 0) {
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:16];
      IOSIntArray *parsedIp = LibOrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, ip);
      LibOrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 0);
      return addr;
    }
    else {
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:32];
      IOSIntArray *parsedIp = LibOrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, [ip java_substring:0 endIndex:slashIndex]);
      LibOrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 0);
      NSString *mask = [ip java_substring:slashIndex + 1];
      if ([((NSString *) nil_chk(mask)) java_indexOf:':'] > 0) {
        parsedIp = LibOrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, mask);
      }
      else {
        parsedIp = LibOrgBouncycastleAsn1X509GeneralName_parseMaskWithNSString_(self, mask);
      }
      LibOrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 16);
      return addr;
    }
  }
  else if (LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(ip) || LibOrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(ip)) {
    jint slashIndex = [((NSString *) nil_chk(ip)) java_indexOf:'/'];
    if (slashIndex < 0) {
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:4];
      LibOrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, ip, addr, 0);
      return addr;
    }
    else {
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:8];
      LibOrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, [ip java_substring:0 endIndex:slashIndex], addr, 0);
      NSString *mask = [ip java_substring:slashIndex + 1];
      if ([((NSString *) nil_chk(mask)) java_indexOf:'.'] > 0) {
        LibOrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, mask, addr, 4);
      }
      else {
        LibOrgBouncycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(self, mask, addr, 4);
      }
      return addr;
    }
  }
  return nil;
}

void LibOrgBouncycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *mask, IOSByteArray *addr, jint offset) {
  jint maskVal = JavaLangInteger_parseIntWithNSString_(mask);
  for (jint i = 0; i != maskVal; i++) {
    *IOSByteArray_GetRef(nil_chk(addr), (i / 8) + offset) |= JreLShift32(1, (7 - (i % 8)));
  }
}

void LibOrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *ip, IOSByteArray *addr, jint offset) {
  JavaUtilStringTokenizer *sTok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(ip, @"./");
  jint index = 0;
  while ([sTok hasMoreTokens]) {
    *IOSByteArray_GetRef(nil_chk(addr), offset + index++) = (jbyte) JavaLangInteger_parseIntWithNSString_([sTok nextToken]);
  }
}

IOSIntArray *LibOrgBouncycastleAsn1X509GeneralName_parseMaskWithNSString_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *mask) {
  IOSIntArray *res = [IOSIntArray newArrayWithLength:8];
  jint maskVal = JavaLangInteger_parseIntWithNSString_(mask);
  for (jint i = 0; i != maskVal; i++) {
    *IOSIntArray_GetRef(res, i / 16) |= JreLShift32(1, (15 - (i % 16)));
  }
  return res;
}

void LibOrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(LibOrgBouncycastleAsn1X509GeneralName *self, IOSIntArray *parsedIp, IOSByteArray *addr, jint offSet) {
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(parsedIp))->size_; i++) {
    *IOSByteArray_GetRef(nil_chk(addr), (i * 2) + offSet) = (jbyte) (JreRShift32(IOSIntArray_Get(parsedIp, i), 8));
    *IOSByteArray_GetRef(addr, (i * 2 + 1) + offSet) = (jbyte) IOSIntArray_Get(parsedIp, i);
  }
}

IOSIntArray *LibOrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(LibOrgBouncycastleAsn1X509GeneralName *self, NSString *ip) {
  JavaUtilStringTokenizer *sTok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(ip, @":", true);
  jint index = 0;
  IOSIntArray *val = [IOSIntArray newArrayWithLength:8];
  if ([((NSString *) nil_chk(ip)) charAtWithInt:0] == ':' && [ip charAtWithInt:1] == ':') {
    (void) [sTok nextToken];
  }
  jint doubleColon = -1;
  while ([sTok hasMoreTokens]) {
    NSString *e = [sTok nextToken];
    if ([((NSString *) nil_chk(e)) isEqual:@":"]) {
      doubleColon = index;
      *IOSIntArray_GetRef(val, index++) = 0;
    }
    else {
      if ([e java_indexOf:'.'] < 0) {
        *IOSIntArray_GetRef(val, index++) = JavaLangInteger_parseIntWithNSString_withInt_(e, 16);
        if ([sTok hasMoreTokens]) {
          (void) [sTok nextToken];
        }
      }
      else {
        JavaUtilStringTokenizer *eTok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(e, @".");
        *IOSIntArray_GetRef(val, index++) = (JreLShift32(JavaLangInteger_parseIntWithNSString_([eTok nextToken]), 8)) | JavaLangInteger_parseIntWithNSString_([eTok nextToken]);
        *IOSIntArray_GetRef(val, index++) = (JreLShift32(JavaLangInteger_parseIntWithNSString_([eTok nextToken]), 8)) | JavaLangInteger_parseIntWithNSString_([eTok nextToken]);
      }
    }
  }
  if (index != val->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(val, doubleColon, val, val->size_ - (index - doubleColon), index - doubleColon);
    for (jint i = doubleColon; i != val->size_ - (index - doubleColon); i++) {
      *IOSIntArray_GetRef(val, i) = 0;
    }
  }
  return val;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1X509GeneralName)
