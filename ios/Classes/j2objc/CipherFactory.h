//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/CipherFactory.java
//

#ifndef CipherFactory_H
#define CipherFactory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaIoOutputStream;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@class LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoUtilCipherFactory : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (id)createContentCipherWithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)encKey
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)encryptionAlgID;

+ (LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *)createOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)dOut
                                                                                            withId:(id)cipher;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoUtilCipherFactory)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoUtilCipherFactory_init(LibOrgBouncycastleCryptoUtilCipherFactory *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoUtilCipherFactory *new_LibOrgBouncycastleCryptoUtilCipherFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoUtilCipherFactory *create_LibOrgBouncycastleCryptoUtilCipherFactory_init(void);

FOUNDATION_EXPORT id LibOrgBouncycastleCryptoUtilCipherFactory_createContentCipherWithBoolean_withLibOrgBouncycastleCryptoCipherParameters_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(jboolean forEncryption, id<LibOrgBouncycastleCryptoCipherParameters> encKey, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *encryptionAlgID);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *LibOrgBouncycastleCryptoUtilCipherFactory_createOutputStreamWithJavaIoOutputStream_withId_(JavaIoOutputStream *dOut, id cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilCipherFactory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CipherFactory_H
