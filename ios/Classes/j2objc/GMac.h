//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/GMac.java
//

#ifndef GMac_H
#define GMac_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "Mac.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoModesGCMBlockCipher;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoMacsGMac : NSObject < LibOrgBouncycastleCryptoMac >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoModesGCMBlockCipher:(LibOrgBouncycastleCryptoModesGCMBlockCipher *)cipher;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoModesGCMBlockCipher:(LibOrgBouncycastleCryptoModesGCMBlockCipher *)cipher
                                                                      withInt:(jint)macSizeBits;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoMacsGMac)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsGMac_initWithLibOrgBouncycastleCryptoModesGCMBlockCipher_(LibOrgBouncycastleCryptoMacsGMac *self, LibOrgBouncycastleCryptoModesGCMBlockCipher *cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsGMac *new_LibOrgBouncycastleCryptoMacsGMac_initWithLibOrgBouncycastleCryptoModesGCMBlockCipher_(LibOrgBouncycastleCryptoModesGCMBlockCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsGMac *create_LibOrgBouncycastleCryptoMacsGMac_initWithLibOrgBouncycastleCryptoModesGCMBlockCipher_(LibOrgBouncycastleCryptoModesGCMBlockCipher *cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoMacsGMac_initWithLibOrgBouncycastleCryptoModesGCMBlockCipher_withInt_(LibOrgBouncycastleCryptoMacsGMac *self, LibOrgBouncycastleCryptoModesGCMBlockCipher *cipher, jint macSizeBits);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsGMac *new_LibOrgBouncycastleCryptoMacsGMac_initWithLibOrgBouncycastleCryptoModesGCMBlockCipher_withInt_(LibOrgBouncycastleCryptoModesGCMBlockCipher *cipher, jint macSizeBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoMacsGMac *create_LibOrgBouncycastleCryptoMacsGMac_initWithLibOrgBouncycastleCryptoModesGCMBlockCipher_withInt_(LibOrgBouncycastleCryptoModesGCMBlockCipher *cipher, jint macSizeBits);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoMacsGMac)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // GMac_H
