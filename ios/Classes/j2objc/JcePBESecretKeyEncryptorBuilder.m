//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcePBESecretKeyEncryptorBuilder.java
//

#include "DefaultJcaJceHelper.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJcePGPUtil.h"
#include "JcePBESecretKeyEncryptorBuilder.h"
#include "NamedJcaJceHelper.h"
#include "OperatorHelper.h"
#include "PBESecretKeyEncryptor.h"
#include "PGPDigestCalculator.h"
#include "PGPException.h"
#include "PGPUtil.h"
#include "ProviderJcaJceHelper.h"
#include "SHA1PGPDigestCalculator.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Provider.h"
#include "java/security/SecureRandom.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/IllegalBlockSizeException.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/spec/IvParameterSpec.h"

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder () {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *helper_;
  jint encAlgorithm_;
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator_;
  JavaSecuritySecureRandom *random_;
  jint s2kCount_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, helper_, LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, s2kDigestCalculator_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, random_, JavaSecuritySecureRandom *)

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1 : LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *this$0_;
  JavaxCryptoCipher *c_;
  IOSByteArray *iv_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *)outer$
                                                                                       withInt:(jint)encAlgorithm
                                      withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator
                                                                                       withInt:(jint)s2kCount
                                                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                 withCharArray:(IOSCharArray *)passPhrase;

- (IOSByteArray *)encryptKeyDataWithByteArray:(IOSByteArray *)key
                                withByteArray:(IOSByteArray *)keyData
                                      withInt:(jint)keyOff
                                      withInt:(jint)keyLen;

- (IOSByteArray *)encryptKeyDataWithByteArray:(IOSByteArray *)key
                                withByteArray:(IOSByteArray *)iv
                                withByteArray:(IOSByteArray *)keyData
                                      withInt:(jint)keyOff
                                      withInt:(jint)keyLen;

- (IOSByteArray *)getCipherIV;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1, c_, JavaxCryptoCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1, iv_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *outer$, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount, JavaSecuritySecureRandom *random, IOSCharArray *passPhrase);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *outer$, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount, JavaSecuritySecureRandom *random, IOSCharArray *passPhrase) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *outer$, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount, JavaSecuritySecureRandom *random, IOSCharArray *passPhrase);

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder

- (instancetype)initWithInt:(jint)encAlgorithm {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_(self, encAlgorithm);
  return self;
}

- (instancetype)initWithInt:(jint)encAlgorithm
                    withInt:(jint)s2kCount {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withInt_(self, encAlgorithm, s2kCount);
  return self;
}

- (instancetype)initWithInt:(jint)encAlgorithm
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(self, encAlgorithm, s2kDigestCalculator);
  return self;
}

- (instancetype)initWithInt:(jint)encAlgorithm
withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator
                    withInt:(jint)s2kCount {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(self, encAlgorithm, s2kDigestCalculator, s2kCount);
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *)setProviderWithNSString:(NSString *)providerName {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *)buildWithCharArray:(IOSCharArray *)passPhrase {
  if (random_ == nil) {
    random_ = new_JavaSecuritySecureRandom_init();
  }
  return new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(self, encAlgorithm_, s2kDigestCalculator_, s2kCount_, random_, passPhrase);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor;", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(initWithInt:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:);
  methods[3].selector = @selector(initWithInt:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withInt:);
  methods[4].selector = @selector(setProviderWithJavaSecurityProvider:);
  methods[5].selector = @selector(setProviderWithNSString:);
  methods[6].selector = @selector(setSecureRandomWithJavaSecuritySecureRandom:);
  methods[7].selector = @selector(buildWithCharArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encAlgorithm_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "s2kDigestCalculator_", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "s2kCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "II", "ILLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;", "ILLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;I", "setProvider", "LJavaSecurityProvider;", "LNSString;", "setSecureRandom", "LJavaSecuritySecureRandom;", "build", "[C" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder = { "JcePBESecretKeyEncryptorBuilder", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *self, jint encAlgorithm) {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(self, encAlgorithm, new_LibOrgBouncycastleOpenpgpOperatorJcajceSHA1PGPDigestCalculator_init());
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_(jint encAlgorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, initWithInt_, encAlgorithm)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_(jint encAlgorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, initWithInt_, encAlgorithm)
}

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *self, jint encAlgorithm, jint s2kCount) {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(self, encAlgorithm, new_LibOrgBouncycastleOpenpgpOperatorJcajceSHA1PGPDigestCalculator_init(), s2kCount);
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withInt_(jint encAlgorithm, jint s2kCount) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, initWithInt_withInt_, encAlgorithm, s2kCount)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withInt_(jint encAlgorithm, jint s2kCount) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, initWithInt_withInt_, encAlgorithm, s2kCount)
}

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *self, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator) {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(self, encAlgorithm, s2kDigestCalculator, (jint) 0x60);
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_, encAlgorithm, s2kDigestCalculator)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_, encAlgorithm, s2kDigestCalculator)
}

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *self, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount) {
  NSObject_init(self);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
  self->s2kCount_ = (jint) 0x60;
  self->encAlgorithm_ = encAlgorithm;
  self->s2kDigestCalculator_ = s2kDigestCalculator;
  if (s2kCount < 0 || s2kCount > (jint) 0xff) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"s2KCount value outside of range 0 to 255.");
  }
  self->s2kCount_ = s2kCount;
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_, encAlgorithm, s2kDigestCalculator, s2kCount)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_(jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder, initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_, encAlgorithm, s2kDigestCalculator, s2kCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder)

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder:(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *)outer$
                                                                                       withInt:(jint)encAlgorithm
                                      withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>)s2kDigestCalculator
                                                                                       withInt:(jint)s2kCount
                                                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                 withCharArray:(IOSCharArray *)passPhrase {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(self, outer$, encAlgorithm, s2kDigestCalculator, s2kCount, random, passPhrase);
  return self;
}

- (IOSByteArray *)encryptKeyDataWithByteArray:(IOSByteArray *)key
                                withByteArray:(IOSByteArray *)keyData
                                      withInt:(jint)keyOff
                                      withInt:(jint)keyLen {
  @try {
    c_ = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(this$0_->helper_)) createCipherWithNSString:JreStrcat("$$", LibOrgBouncycastleOpenpgpPGPUtil_getSymmetricCipherNameWithInt_(self->encAlgorithm_), @"/CFB/NoPadding")];
    [((JavaxCryptoCipher *) nil_chk(c_)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_makeSymmetricKeyWithInt_withByteArray_(self->encAlgorithm_, key) withJavaSecuritySecureRandom:self->random_];
    iv_ = [((JavaxCryptoCipher *) nil_chk(c_)) getIV];
    return [((JavaxCryptoCipher *) nil_chk(c_)) doFinalWithByteArray:keyData withInt:keyOff withInt:keyLen];
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"illegal block size: ", [e getMessage]), e);
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"bad padding: ", [e getMessage]), e);
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"invalid key: ", [e getMessage]), e);
  }
}

- (IOSByteArray *)encryptKeyDataWithByteArray:(IOSByteArray *)key
                                withByteArray:(IOSByteArray *)iv
                                withByteArray:(IOSByteArray *)keyData
                                      withInt:(jint)keyOff
                                      withInt:(jint)keyLen {
  @try {
    c_ = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(this$0_->helper_)) createCipherWithNSString:JreStrcat("$$", LibOrgBouncycastleOpenpgpPGPUtil_getSymmetricCipherNameWithInt_(self->encAlgorithm_), @"/CFB/NoPadding")];
    [((JavaxCryptoCipher *) nil_chk(c_)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_makeSymmetricKeyWithInt_withByteArray_(self->encAlgorithm_, key) withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_(iv)];
    self->iv_ = iv;
    return [((JavaxCryptoCipher *) nil_chk(c_)) doFinalWithByteArray:keyData withInt:keyOff withInt:keyLen];
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"illegal block size: ", [e getMessage]), e);
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"bad padding: ", [e getMessage]), e);
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"invalid key: ", [e getMessage]), e);
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"invalid iv: ", [e getMessage]), e);
  }
}

- (IOSByteArray *)getCipherIV {
  return iv_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder:withInt:withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator:withInt:withJavaSecuritySecureRandom:withCharArray:);
  methods[1].selector = @selector(encryptKeyDataWithByteArray:withByteArray:withInt:withInt:);
  methods[2].selector = @selector(encryptKeyDataWithByteArray:withByteArray:withByteArray:withInt:withInt:);
  methods[3].selector = @selector(getCipherIV);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "c_", "LJavaxCryptoCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator;ILJavaSecuritySecureRandom;[C", "encryptKeyData", "[B[BII", "LLibOrgBouncycastleOpenpgpPGPException;", "[B[B[BII", "LLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder;", "buildWithCharArray:" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1 = { "", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x8010, 4, 3, 5, -1, 6, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1 *self, LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *outer$, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount, JavaSecuritySecureRandom *random, IOSCharArray *passPhrase) {
  self->this$0_ = outer$;
  LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(self, encAlgorithm, s2kDigestCalculator, s2kCount, random, passPhrase);
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1 *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *outer$, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount, JavaSecuritySecureRandom *random, IOSCharArray *passPhrase) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_, outer$, encAlgorithm, s2kDigestCalculator, s2kCount, random, passPhrase)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1 *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1_initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder *outer$, jint encAlgorithm, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> s2kDigestCalculator, jint s2kCount, JavaSecuritySecureRandom *random, IOSCharArray *passPhrase) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_1, initWithLibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_withInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withInt_withJavaSecuritySecureRandom_withCharArray_, outer$, encAlgorithm, s2kDigestCalculator, s2kCount, random, passPhrase)
}
