//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/pkcs/RSAPrivateKey.java
//

#include "ASN1EncodableVector.h"
#include "ASN1Integer.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "DERSequence.h"
#include "J2ObjC_source.h"
#include "RSAPrivateKey.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Enumeration.h"

@interface LibOrgBouncycastleAsn1PkcsRSAPrivateKey () {
 @public
  JavaMathBigInteger *version__;
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *publicExponent_;
  JavaMathBigInteger *privateExponent_;
  JavaMathBigInteger *prime1_;
  JavaMathBigInteger *prime2_;
  JavaMathBigInteger *exponent1_;
  JavaMathBigInteger *exponent2_;
  JavaMathBigInteger *coefficient_;
  LibOrgBouncycastleAsn1ASN1Sequence *otherPrimeInfos_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, version__, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, publicExponent_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, privateExponent_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, prime1_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, prime2_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, exponent1_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, exponent2_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, coefficient_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, otherPrimeInfos_, LibOrgBouncycastleAsn1ASN1Sequence *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1PkcsRSAPrivateKey *new_LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1PkcsRSAPrivateKey *create_LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1PkcsRSAPrivateKey

+ (LibOrgBouncycastleAsn1PkcsRSAPrivateKey *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                       withBoolean:(jboolean)explicit_ {
  return LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}

+ (LibOrgBouncycastleAsn1PkcsRSAPrivateKey *)getInstanceWithId:(id)obj {
  return LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_(obj);
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                    withJavaMathBigInteger:(JavaMathBigInteger *)publicExponent
                    withJavaMathBigInteger:(JavaMathBigInteger *)privateExponent
                    withJavaMathBigInteger:(JavaMathBigInteger *)prime1
                    withJavaMathBigInteger:(JavaMathBigInteger *)prime2
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent1
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent2
                    withJavaMathBigInteger:(JavaMathBigInteger *)coefficient {
  LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, publicExponent, privateExponent, prime1, prime2, exponent1, exponent2, coefficient);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

- (JavaMathBigInteger *)getVersion {
  return version__;
}

- (JavaMathBigInteger *)getModulus {
  return modulus_;
}

- (JavaMathBigInteger *)getPublicExponent {
  return publicExponent_;
}

- (JavaMathBigInteger *)getPrivateExponent {
  return privateExponent_;
}

- (JavaMathBigInteger *)getPrime1 {
  return prime1_;
}

- (JavaMathBigInteger *)getPrime2 {
  return prime2_;
}

- (JavaMathBigInteger *)getExponent1 {
  return exponent1_;
}

- (JavaMathBigInteger *)getExponent2 {
  return exponent2_;
}

- (JavaMathBigInteger *)getCoefficient {
  return coefficient_;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(version__)];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getModulus])];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getPublicExponent])];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getPrivateExponent])];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getPrime1])];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getPrime2])];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getExponent1])];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getExponent2])];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getCoefficient])];
  if (otherPrimeInfos_ != nil) {
    [v addWithLibOrgBouncycastleAsn1ASN1Encodable:otherPrimeInfos_];
  }
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1PkcsRSAPrivateKey;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1PkcsRSAPrivateKey;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[4].selector = @selector(getVersion);
  methods[5].selector = @selector(getModulus);
  methods[6].selector = @selector(getPublicExponent);
  methods[7].selector = @selector(getPrivateExponent);
  methods[8].selector = @selector(getPrime1);
  methods[9].selector = @selector(getPrime2);
  methods[10].selector = @selector(getExponent1);
  methods[11].selector = @selector(getExponent2);
  methods[12].selector = @selector(getCoefficient);
  methods[13].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "version__", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, 5, -1, -1, -1 },
    { "modulus_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicExponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateExponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prime1_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prime2_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exponent1_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exponent2_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "coefficient_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "otherPrimeInfos_", "LLibOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LLibOrgBouncycastleAsn1ASN1TaggedObject;Z", "LNSObject;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LLibOrgBouncycastleAsn1ASN1Sequence;", "version" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1PkcsRSAPrivateKey = { "RSAPrivateKey", "lib.org.bouncycastle.asn1.pkcs", ptrTable, methods, fields, 7, 0x1, 14, 10, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1PkcsRSAPrivateKey;
}

@end

LibOrgBouncycastleAsn1PkcsRSAPrivateKey *LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initialize();
  return LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_));
}

LibOrgBouncycastleAsn1PkcsRSAPrivateKey *LibOrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_(id obj) {
  LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initialize();
  if ([obj isKindOfClass:[LibOrgBouncycastleAsn1PkcsRSAPrivateKey class]]) {
    return (LibOrgBouncycastleAsn1PkcsRSAPrivateKey *) obj;
  }
  if (obj != nil) {
    return new_LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  return nil;
}

void LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *self, JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->otherPrimeInfos_ = nil;
  self->version__ = JavaMathBigInteger_valueOfWithLong_(0);
  self->modulus_ = modulus;
  self->publicExponent_ = publicExponent;
  self->privateExponent_ = privateExponent;
  self->prime1_ = prime1;
  self->prime2_ = prime2;
  self->exponent1_ = exponent1;
  self->exponent2_ = exponent2;
  self->coefficient_ = coefficient;
}

LibOrgBouncycastleAsn1PkcsRSAPrivateKey *new_LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, modulus, publicExponent, privateExponent, prime1, prime2, exponent1, exponent2, coefficient)
}

LibOrgBouncycastleAsn1PkcsRSAPrivateKey *create_LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, modulus, publicExponent, privateExponent, prime1, prime2, exponent1, exponent2, coefficient)
}

void LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1PkcsRSAPrivateKey *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->otherPrimeInfos_ = nil;
  id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjects];
  JavaMathBigInteger *v = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([((id<JavaUtilEnumeration>) nil_chk(e)) nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  if ([((JavaMathBigInteger *) nil_chk(v)) intValue] != 0 && [v intValue] != 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"wrong version for RSA private key");
  }
  self->version__ = v;
  self->modulus_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->publicExponent_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->privateExponent_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->prime1_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->prime2_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->exponent1_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->exponent2_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->coefficient_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(((LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Integer class])))) getValue];
  if ([e hasMoreElements]) {
    self->otherPrimeInfos_ = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Sequence class]);
  }
}

LibOrgBouncycastleAsn1PkcsRSAPrivateKey *new_LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1PkcsRSAPrivateKey *create_LibOrgBouncycastleAsn1PkcsRSAPrivateKey_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1PkcsRSAPrivateKey, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1PkcsRSAPrivateKey)
