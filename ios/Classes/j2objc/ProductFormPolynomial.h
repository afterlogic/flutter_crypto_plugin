//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/polynomial/ProductFormPolynomial.java
//

#ifndef ProductFormPolynomial_H
#define ProductFormPolynomial_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PqcMathPolynomial.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaSecuritySecureRandom;
@class LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;
@class LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;
@class LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial;

@interface LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial : NSObject < LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)f1
                              withLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)f2
                              withLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)f3;

- (jboolean)isEqual:(id)obj;

+ (LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *)fromBinaryWithByteArray:(IOSByteArray *)data
                                                                                  withInt:(jint)N
                                                                                  withInt:(jint)df1
                                                                                  withInt:(jint)df2
                                                                                  withInt:(jint)df3Ones
                                                                                  withInt:(jint)df3NegOnes;

+ (LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *)fromBinaryWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                          withInt:(jint)N
                                                                                          withInt:(jint)df1
                                                                                          withInt:(jint)df2
                                                                                          withInt:(jint)df3Ones
                                                                                          withInt:(jint)df3NegOnes;

+ (LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *)generateRandomWithInt:(jint)N
                                                                                withInt:(jint)df1
                                                                                withInt:(jint)df2
                                                                                withInt:(jint)df3Ones
                                                                                withInt:(jint)df3NegOnes
                                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (NSUInteger)hash;

- (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)b;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                       withInt:(jint)modulus;

- (IOSByteArray *)toBinary;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *self, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f1, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f2, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f3);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f1, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f2, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f3) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f1, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f2, LibOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *f3);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_generateRandomWithInt_withInt_withInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint df1, jint df2, jint df3Ones, jint df3NegOnes, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_fromBinaryWithByteArray_withInt_withInt_withInt_withInt_withInt_(IOSByteArray *data, jint N, jint df1, jint df2, jint df3Ones, jint df3NegOnes);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_withInt_withInt_(JavaIoInputStream *is, jint N, jint df1, jint df2, jint df3Ones, jint df3NegOnes);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ProductFormPolynomial_H
