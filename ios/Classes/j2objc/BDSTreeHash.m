//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/BDSTreeHash.java
//

#include "BDSTreeHash.h"
#include "HashTreeAddress.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LTreeAddress.h"
#include "OTSHashAddress.h"
#include "WOTSPlus.h"
#include "WOTSPlusPublicKeyParameters.h"
#include "XMSSAddress.h"
#include "XMSSNode.h"
#include "XMSSNodeUtil.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Stack.h"

@interface LibOrgBouncycastlePqcCryptoXmssBDSTreeHash () {
 @public
  LibOrgBouncycastlePqcCryptoXmssXMSSNode *tailNode_;
  jint initialHeight_;
  jint height_;
  jint nextIndex_;
  jboolean initialized_;
  jboolean finished_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssBDSTreeHash, tailNode_, LibOrgBouncycastlePqcCryptoXmssXMSSNode *)

inline jlong LibOrgBouncycastlePqcCryptoXmssBDSTreeHash_get_serialVersionUID(void);
#define LibOrgBouncycastlePqcCryptoXmssBDSTreeHash_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoXmssBDSTreeHash, serialVersionUID, jlong)

@implementation LibOrgBouncycastlePqcCryptoXmssBDSTreeHash

- (instancetype)initWithInt:(jint)initialHeight {
  LibOrgBouncycastlePqcCryptoXmssBDSTreeHash_initWithInt_(self, initialHeight);
  return self;
}

- (void)initialize__WithInt:(jint)nextIndex {
  tailNode_ = nil;
  height_ = initialHeight_;
  self->nextIndex_ = nextIndex;
  initialized_ = true;
  finished_ = false;
}

- (void)updateWithJavaUtilStack:(JavaUtilStack *)stack
withLibOrgBouncycastlePqcCryptoXmssWOTSPlus:(LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                  withByteArray:(IOSByteArray *)publicSeed
                  withByteArray:(IOSByteArray *)secretSeed
withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:(LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  if (finished_ || !initialized_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"finished or not initialized");
  }
  otsHashAddress = (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:nextIndex_])) withChainAddressWithInt:[otsHashAddress getChainAddress]])) withHashAddressWithInt:[otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  LibOrgBouncycastlePqcCryptoXmssLTreeAddress *lTreeAddress = (LibOrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withLTreeAddressWithInt:nextIndex_])) build], [LibOrgBouncycastlePqcCryptoXmssLTreeAddress class]);
  LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withTreeIndexWithInt:nextIndex_])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
  [((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus)) importKeysWithByteArray:[wotsPlus getWOTSPlusSecretKeyWithByteArray:secretSeed withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:publicSeed];
  LibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *wotsPlusPublicKey = [wotsPlus getPublicKeyWithLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
  LibOrgBouncycastlePqcCryptoXmssXMSSNode *node = LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withLibOrgBouncycastlePqcCryptoXmssLTreeAddress_(wotsPlus, wotsPlusPublicKey, lTreeAddress);
  while (![((JavaUtilStack *) nil_chk(stack)) isEmpty] && [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk([stack peek])) getHeight] == [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight] && [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk([stack peek])) getHeight] != initialHeight_) {
    hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:([hashTreeAddress getTreeIndex] - 1) / 2])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    node = LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, [stack pop], node, hashTreeAddress);
    node = new_LibOrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight] + 1, [node getValue]);
    hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight] + 1])) withTreeIndexWithInt:[hashTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
  }
  if (tailNode_ == nil) {
    tailNode_ = node;
  }
  else {
    if ([tailNode_ getHeight] == [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight]) {
      hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:([hashTreeAddress getTreeIndex] - 1) / 2])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
      node = LibOrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithLibOrgBouncycastlePqcCryptoXmssWOTSPlus_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSNode_withLibOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, tailNode_, node, hashTreeAddress);
      node = new_LibOrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(tailNode_)) getHeight] + 1, [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getValue]);
      tailNode_ = node;
      hashTreeAddress = (LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((LibOrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight] + 1])) withTreeIndexWithInt:[hashTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [LibOrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    }
    else {
      (void) [stack pushWithId:node];
    }
  }
  if ([((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(tailNode_)) getHeight] == initialHeight_) {
    finished_ = true;
  }
  else {
    height_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight];
    nextIndex_++;
  }
}

- (jint)getHeight {
  if (!initialized_ || finished_) {
    return JavaLangInteger_MAX_VALUE;
  }
  return height_;
}

- (jint)getIndexLeaf {
  return nextIndex_;
}

- (void)setNodeWithLibOrgBouncycastlePqcCryptoXmssXMSSNode:(LibOrgBouncycastlePqcCryptoXmssXMSSNode *)node {
  tailNode_ = node;
  height_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight];
  if (height_ == initialHeight_) {
    finished_ = true;
  }
}

- (jboolean)isFinished {
  return finished_;
}

- (jboolean)isInitialized {
  return initialized_;
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSNode *)getTailNode {
  return [((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(tailNode_)) java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSNode;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initialize__WithInt:);
  methods[2].selector = @selector(updateWithJavaUtilStack:withLibOrgBouncycastlePqcCryptoXmssWOTSPlus:withByteArray:withByteArray:withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[3].selector = @selector(getHeight);
  methods[4].selector = @selector(getIndexLeaf);
  methods[5].selector = @selector(setNodeWithLibOrgBouncycastlePqcCryptoXmssXMSSNode:);
  methods[6].selector = @selector(isFinished);
  methods[7].selector = @selector(isInitialized);
  methods[8].selector = @selector(getTailNode);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastlePqcCryptoXmssBDSTreeHash_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "tailNode_", "LLibOrgBouncycastlePqcCryptoXmssXMSSNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialHeight_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "initialize", "update", "LJavaUtilStack;LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;[B[BLLibOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "(Ljava/util/Stack<Llib/org/bouncycastle/pqc/crypto/xmss/XMSSNode;>;Llib/org/bouncycastle/pqc/crypto/xmss/WOTSPlus;[B[BLlib/org/bouncycastle/pqc/crypto/xmss/OTSHashAddress;)V", "setNode", "LLibOrgBouncycastlePqcCryptoXmssXMSSNode;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssBDSTreeHash = { "BDSTreeHash", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x0, 9, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssBDSTreeHash;
}

@end

void LibOrgBouncycastlePqcCryptoXmssBDSTreeHash_initWithInt_(LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *self, jint initialHeight) {
  NSObject_init(self);
  self->initialHeight_ = initialHeight;
  self->initialized_ = false;
  self->finished_ = false;
}

LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *new_LibOrgBouncycastlePqcCryptoXmssBDSTreeHash_initWithInt_(jint initialHeight) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssBDSTreeHash, initWithInt_, initialHeight)
}

LibOrgBouncycastlePqcCryptoXmssBDSTreeHash *create_LibOrgBouncycastlePqcCryptoXmssBDSTreeHash_initWithInt_(jint initialHeight) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssBDSTreeHash, initWithInt_, initialHeight)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssBDSTreeHash)
