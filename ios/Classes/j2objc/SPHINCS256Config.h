//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.java
//

#ifndef SPHINCS256Config_H
#define SPHINCS256Config_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config : NSObject
@property (readonly, class) jint SUBTREE_HEIGHT NS_SWIFT_NAME(SUBTREE_HEIGHT);
@property (readonly, class) jint TOTALTREE_HEIGHT NS_SWIFT_NAME(TOTALTREE_HEIGHT);
@property (readonly, class) jint N_LEVELS NS_SWIFT_NAME(N_LEVELS);
@property (readonly, class) jint SEED_BYTES NS_SWIFT_NAME(SEED_BYTES);
@property (readonly, class) jint SK_RAND_SEED_BYTES NS_SWIFT_NAME(SK_RAND_SEED_BYTES);
@property (readonly, class) jint MESSAGE_HASH_SEED_BYTES NS_SWIFT_NAME(MESSAGE_HASH_SEED_BYTES);
@property (readonly, class) jint HASH_BYTES NS_SWIFT_NAME(HASH_BYTES);
@property (readonly, class) jint MSGHASH_BYTES NS_SWIFT_NAME(MSGHASH_BYTES);
@property (readonly, class) jint CRYPTO_PUBLICKEYBYTES NS_SWIFT_NAME(CRYPTO_PUBLICKEYBYTES);
@property (readonly, class) jint CRYPTO_SECRETKEYBYTES NS_SWIFT_NAME(CRYPTO_SECRETKEYBYTES);
@property (readonly, class) jint CRYPTO_BYTES NS_SWIFT_NAME(CRYPTO_BYTES);

+ (jint)SUBTREE_HEIGHT;

+ (jint)TOTALTREE_HEIGHT;

+ (jint)N_LEVELS;

+ (jint)SEED_BYTES;

+ (jint)SK_RAND_SEED_BYTES;

+ (jint)MESSAGE_HASH_SEED_BYTES;

+ (jint)HASH_BYTES;

+ (jint)MSGHASH_BYTES;

+ (jint)CRYPTO_PUBLICKEYBYTES;

+ (jint)CRYPTO_SECRETKEYBYTES;

+ (jint)CRYPTO_BYTES;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_SUBTREE_HEIGHT(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, SUBTREE_HEIGHT, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_TOTALTREE_HEIGHT(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT 60
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, TOTALTREE_HEIGHT, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_N_LEVELS(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, N_LEVELS, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_SEED_BYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, SEED_BYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_SK_RAND_SEED_BYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, SK_RAND_SEED_BYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_MESSAGE_HASH_SEED_BYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, MESSAGE_HASH_SEED_BYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_HASH_BYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, HASH_BYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_MSGHASH_BYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MSGHASH_BYTES 64
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, MSGHASH_BYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_CRYPTO_PUBLICKEYBYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES 1056
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, CRYPTO_PUBLICKEYBYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_CRYPTO_SECRETKEYBYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES 1088
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, CRYPTO_SECRETKEYBYTES, jint)

inline jint LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_get_CRYPTO_BYTES(void);
#define LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES 41000
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config, CRYPTO_BYTES, jint)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_init(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config *new_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config *create_LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SPHINCS256Config_H
