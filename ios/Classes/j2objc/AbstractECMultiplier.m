//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/AbstractECMultiplier.java
//

#include "AbstractECMultiplier.h"
#include "ECAlgorithms.h"
#include "ECCurve.h"
#include "ECPoint.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"

@implementation LibOrgBouncycastleMathEcAbstractECMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcAbstractECMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleMathEcECPoint *)multiplyWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)k {
  jint sign = [((JavaMathBigInteger *) nil_chk(k)) signum];
  if (sign == 0 || [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) isInfinity]) {
    return [((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  }
  LibOrgBouncycastleMathEcECPoint *positive = [self multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:p withJavaMathBigInteger:[k abs]];
  LibOrgBouncycastleMathEcECPoint *result = sign > 0 ? positive : [((LibOrgBouncycastleMathEcECPoint *) nil_chk(positive)) negate];
  return [self checkResultWithLibOrgBouncycastleMathEcECPoint:result];
}

- (LibOrgBouncycastleMathEcECPoint *)multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)k {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (LibOrgBouncycastleMathEcECPoint *)checkResultWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p {
  return LibOrgBouncycastleMathEcECAlgorithms_implCheckResultWithLibOrgBouncycastleMathEcECPoint_(p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x404, 2, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[2].selector = @selector(multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[3].selector = @selector(checkResultWithLibOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiply", "LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "multiplyPositive", "checkResult", "LLibOrgBouncycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcAbstractECMultiplier = { "AbstractECMultiplier", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x401, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcAbstractECMultiplier;
}

@end

void LibOrgBouncycastleMathEcAbstractECMultiplier_init(LibOrgBouncycastleMathEcAbstractECMultiplier *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcAbstractECMultiplier)
