//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dh/DhAlgorithmParameterGeneratorSpi.java
//

#include "BaseAlgorithmParameterGeneratorSpi.h"
#include "CryptoServicesRegistrar.h"
#include "DHParameters.h"
#include "DHParametersGenerator.h"
#include "DhAlgorithmParameterGeneratorSpi.h"
#include "J2ObjC_source.h"
#include "PrimeCertaintyCalculator.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/spec/DHGenParameterSpec.h"
#include "javax/crypto/spec/DHParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi () {
 @public
  jint l_;
}

@end

@implementation LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)engineInitWithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->strength_ = strength;
  self->random_ = random;
}

- (void)engineInitWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)genParamSpec
                                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (!([genParamSpec isKindOfClass:[JavaxCryptoSpecDHGenParameterSpec class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"DH parameter generator requires a DHGenParameterSpec for initialisation");
  }
  JavaxCryptoSpecDHGenParameterSpec *spec = (JavaxCryptoSpecDHGenParameterSpec *) cast_chk(genParamSpec, [JavaxCryptoSpecDHGenParameterSpec class]);
  self->strength_ = [((JavaxCryptoSpecDHGenParameterSpec *) nil_chk(spec)) getPrimeSize];
  self->l_ = [spec getExponentSize];
  self->random_ = random;
}

- (JavaSecurityAlgorithmParameters *)engineGenerateParameters {
  LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator *pGen = new_LibOrgBouncycastleCryptoGeneratorsDHParametersGenerator_init();
  jint certainty = LibOrgBouncycastleJcajceProviderAsymmetricUtilPrimeCertaintyCalculator_getDefaultCertaintyWithInt_(strength_);
  if (random_ != nil) {
    [pGen init__WithInt:strength_ withInt:certainty withJavaSecuritySecureRandom:random_];
  }
  else {
    [pGen init__WithInt:strength_ withInt:certainty withJavaSecuritySecureRandom:LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom()];
  }
  LibOrgBouncycastleCryptoParamsDHParameters *p = [pGen generateParameters];
  JavaSecurityAlgorithmParameters *params;
  @try {
    params = [self createParametersInstanceWithNSString:@"DH"];
    [((JavaSecurityAlgorithmParameters *) nil_chk(params)) init__WithJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(p)) getP], [p getG], l_)];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_([e getMessage]);
  }
  return params;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineInitWithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(engineInitWithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(engineGenerateParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "l_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineInit", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi = { "DhAlgorithmParameterGeneratorSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.dh", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi_init(LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseAlgorithmParameterGeneratorSpi_init(self);
  self->strength_ = 2048;
  self->l_ = 0;
}

LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricDhDhAlgorithmParameterGeneratorSpi)
