//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.java
//

#ifndef IntegerPolynomial_H
#define IntegerPolynomial_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PqcMathPolynomial.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;
@class LibOrgBouncycastlePqcMathNtruPolynomialModularResultant;
@class LibOrgBouncycastlePqcMathNtruPolynomialResultant;

@interface LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial : NSObject < LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial > {
 @public
  IOSIntArray *coeffs_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)p;

- (instancetype __nonnull)initWithInt:(jint)N;

- (instancetype __nonnull)initWithIntArray:(IOSIntArray *)coeffs;

- (void)addWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b;

- (void)addWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                                withInt:(jint)modulus;

- (void)center0WithInt:(jint)q;

- (jlong)centeredNormSqWithInt:(jint)q;

- (void)clear;

- (id)java_clone;

- (jint)countWithInt:(jint)value;

- (void)divWithInt:(jint)k;

- (void)ensurePositiveWithInt:(jint)modulus;

- (jboolean)isEqual:(id)obj;

- (jboolean)equalsOne;

+ (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinaryWithByteArray:(IOSByteArray *)data
                                                                              withInt:(jint)N
                                                                              withInt:(jint)q;

+ (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinaryWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                      withInt:(jint)N
                                                                                      withInt:(jint)q;

+ (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3SvesWithByteArray:(IOSByteArray *)data
                                                                                   withInt:(jint)N;

+ (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3TightWithByteArray:(IOSByteArray *)b
                                                                                    withInt:(jint)N;

+ (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3TightWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                            withInt:(jint)N;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)invertF3;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)invertFqWithInt:(jint)q;

- (void)modWithInt:(jint)modulus;

- (void)mod3;

- (void)modPositiveWithInt:(jint)modulus;

- (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2;

- (void)multWithInt:(jint)factor;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                       withInt:(jint)modulus;

- (void)mult3WithInt:(jint)modulus;

- (LibOrgBouncycastlePqcMathNtruPolynomialResultant *)resultant;

- (LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *)resultantWithInt:(jint)p;

- (LibOrgBouncycastlePqcMathNtruPolynomialResultant *)resultantMultiThread;

- (void)rotate1;

- (void)subWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b;

- (void)subWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                                withInt:(jint)modulus;

- (jint)sumCoeffs;

- (IOSByteArray *)toBinaryWithInt:(jint)q;

- (IOSByteArray *)toBinary3Sves;

- (IOSByteArray *)toBinary3Tight;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial;

#pragma mark Package-Private

- (jint)degree;

- (void)modCenterWithInt:(jint)modulus;

- (void)shiftGapWithInt:(jint)q;

- (void)subWithInt:(jint)b;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial)

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, coeffs_, IOSIntArray *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, jint N);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(jint N) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(jint N);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, IOSIntArray *coeffs);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(IOSIntArray *coeffs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(IOSIntArray *coeffs);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *create_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3SvesWithByteArray_withInt_(IOSByteArray *data, jint N);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithByteArray_withInt_(IOSByteArray *b, jint N);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint N);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithByteArray_withInt_withInt_(IOSByteArray *data, jint N, jint q);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_(JavaIoInputStream *is, jint N, jint q);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // IntegerPolynomial_H
