//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/mceliece/McElieceKeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "CryptoServicesRegistrar.h"
#include "GF2Matrix.h"
#include "GF2mField.h"
#include "GoppaCode.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "Matrix.h"
#include "McElieceKeyGenerationParameters.h"
#include "McElieceKeyPairGenerator.h"
#include "McElieceParameters.h"
#include "McEliecePrivateKeyParameters.h"
#include "McEliecePublicKeyParameters.h"
#include "Permutation.h"
#include "PolynomialGF2mSmallM.h"
#include "PolynomialRingGF2m.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator () {
 @public
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *mcElieceParams_;
  jint m_;
  jint n_;
  jint t_;
  jint fieldPoly_;
  JavaSecuritySecureRandom *random_;
  jboolean initialized_;
}

- (void)initializeDefault OBJC_METHOD_FAMILY_NONE;

- (void)initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)genKeyPair;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, mcElieceParams_, LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, random_, JavaSecuritySecureRandom *)

inline NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_get_OID(void);
static NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_OID = @"1.3.6.1.4.1.8301.3.1.3.4.1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, OID, NSString *)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initializeDefault(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self, LibOrgBouncycastleCryptoKeyGenerationParameters *param);

__attribute__((unused)) static LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_genKeyPair(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self);

@implementation LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initializeDefault {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initializeDefault(self);
}

- (void)initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters_(self, param);
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)genKeyPair {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_genKeyPair(self);
}

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters_(self, param);
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_genKeyPair(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initializeDefault);
  methods[2].selector = @selector(initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[3].selector = @selector(genKeyPair);
  methods[4].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[5].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "mcElieceParams_", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldPoly_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "LLibOrgBouncycastleCryptoKeyGenerationParameters;", "init", &LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_OID };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator = { "McElieceKeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 6, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self) {
  NSObject_init(self);
  self->initialized_ = false;
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, init)
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initializeDefault(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self) {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *mcParams = new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceParameters_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom(), new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceParameters_init());
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters_(self, mcParams);
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithLibOrgBouncycastleCryptoKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self, LibOrgBouncycastleCryptoKeyGenerationParameters *param) {
  self->mcElieceParams_ = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters class]);
  self->random_ = [((LibOrgBouncycastleCryptoKeyGenerationParameters *) nil_chk(param)) getRandom];
  if (self->random_ == nil) {
    self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  }
  self->m_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) nil_chk(self->mcElieceParams_)) getParameters])) getM];
  self->n_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) nil_chk(self->mcElieceParams_)) getParameters])) getN];
  self->t_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) nil_chk(self->mcElieceParams_)) getParameters])) getT];
  self->fieldPoly_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) nil_chk(self->mcElieceParams_)) getParameters])) getFieldPoly];
  self->initialized_ = true;
}

LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_genKeyPair(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self) {
  if (!self->initialized_) {
    LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initializeDefault(self);
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field = new_LibOrgBouncycastlePqcMathLinearalgebraGF2mField_initWithInt_withInt_(self->m_, self->fieldPoly_);
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *gp = new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_(field, self->t_, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_RANDOM_IRREDUCIBLE_POLYNOMIAL, self->random_);
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialRingGF2m *ring = new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialRingGF2m_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(field, gp);
  IOSObjectArray *sqRootMatrix = [ring getSquareRootMatrix];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *h = LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_createCanonicalCheckMatrixWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(field, gp);
  LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_MaMaPe *mmp = LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_computeSystematicFormWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_withJavaSecuritySecureRandom_(h, self->random_);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *shortH = [((LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_MaMaPe *) nil_chk(mmp)) getSecondMatrix];
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *p1 = [mmp getPermutation];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *shortG = (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(shortH)) computeTranspose], [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *gPrime = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(shortG)) extendLeftCompactForm];
  jint k = [shortG getNumRows];
  IOSObjectArray *matrixSandInverse = LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_createRandomRegularMatrixAndItsInverseWithInt_withJavaSecuritySecureRandom_(k, self->random_);
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *p2 = new_LibOrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(self->n_, self->random_);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *g = (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(IOSObjectArray_Get(nil_chk(matrixSandInverse), 0))) rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:gPrime], [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  g = (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(g)) rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:p2], [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pubKey = new_LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_initWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(self->n_, self->t_, g);
  LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey = new_LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_initWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withLibOrgBouncycastlePqcMathLinearalgebraPermutation_withLibOrgBouncycastlePqcMathLinearalgebraPermutation_withLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(self->n_, k, field, gp, p1, p2, IOSObjectArray_Get(matrixSandInverse, 1));
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pubKey, privKey);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator)
