//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/x509/X509V2AttributeCertificate.java
//

#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1GeneralizedTime.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "AttCertIssuer.h"
#include "AttCertValidityPeriod.h"
#include "AttributeCertificate.h"
#include "AttributeCertificateHolder.h"
#include "AttributeCertificateInfo.h"
#include "AttributeCertificateIssuer.h"
#include "DERBitString.h"
#include "Extension.h"
#include "Extensions.h"
#include "Holder.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "X509AttributeCertificate.h"
#include "X509V2AttributeCertificate.h"
#include "X509X509Attribute.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface LibOrgBouncycastleX509X509V2AttributeCertificate () {
 @public
  LibOrgBouncycastleAsn1X509AttributeCertificate *cert_;
  JavaUtilDate *notBefore_;
  JavaUtilDate *notAfter_;
}

+ (LibOrgBouncycastleAsn1X509AttributeCertificate *)getObjectWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (id<JavaUtilSet>)getExtensionOIDsWithBoolean:(jboolean)critical;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V2AttributeCertificate, cert_, LibOrgBouncycastleAsn1X509AttributeCertificate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V2AttributeCertificate, notBefore_, JavaUtilDate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V2AttributeCertificate, notAfter_, JavaUtilDate *)

__attribute__((unused)) static LibOrgBouncycastleAsn1X509AttributeCertificate *LibOrgBouncycastleX509X509V2AttributeCertificate_getObjectWithJavaIoInputStream_(JavaIoInputStream *inArg);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleX509X509V2AttributeCertificate_getExtensionOIDsWithBoolean_(LibOrgBouncycastleX509X509V2AttributeCertificate *self, jboolean critical);

@implementation LibOrgBouncycastleX509X509V2AttributeCertificate

+ (LibOrgBouncycastleAsn1X509AttributeCertificate *)getObjectWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return LibOrgBouncycastleX509X509V2AttributeCertificate_getObjectWithJavaIoInputStream_(inArg);
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)encIn {
  LibOrgBouncycastleX509X509V2AttributeCertificate_initWithJavaIoInputStream_(self, encIn);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)encoded {
  LibOrgBouncycastleX509X509V2AttributeCertificate_initWithByteArray_(self, encoded);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509AttributeCertificate:(LibOrgBouncycastleAsn1X509AttributeCertificate *)cert {
  LibOrgBouncycastleX509X509V2AttributeCertificate_initWithLibOrgBouncycastleAsn1X509AttributeCertificate_(self, cert);
  return self;
}

- (jint)getVersion {
  return [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getVersion])) getValue])) intValue] + 1;
}

- (JavaMathBigInteger *)getSerialNumber {
  return [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getSerialNumber])) getValue];
}

- (LibOrgBouncycastleX509AttributeCertificateHolder *)getHolder {
  return new_LibOrgBouncycastleX509AttributeCertificateHolder_initWithLibOrgBouncycastleAsn1ASN1Sequence_((LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([((LibOrgBouncycastleAsn1X509Holder *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getHolder])) toASN1Primitive], [LibOrgBouncycastleAsn1ASN1Sequence class]));
}

- (LibOrgBouncycastleX509AttributeCertificateIssuer *)getIssuer {
  return new_LibOrgBouncycastleX509AttributeCertificateIssuer_initWithLibOrgBouncycastleAsn1X509AttCertIssuer_([((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getIssuer]);
}

- (JavaUtilDate *)getNotBefore {
  return notBefore_;
}

- (JavaUtilDate *)getNotAfter {
  return notAfter_;
}

- (IOSBooleanArray *)getIssuerUniqueID {
  LibOrgBouncycastleAsn1DERBitString *id_ = [((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getIssuerUniqueID];
  if (id_ != nil) {
    IOSByteArray *bytes = [id_ getBytes];
    IOSBooleanArray *boolId = [IOSBooleanArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 8 - [id_ getPadBits]];
    for (jint i = 0; i != boolId->size_; i++) {
      *IOSBooleanArray_GetRef(boolId, i) = ((IOSByteArray_Get(bytes, i / 8) & (JreURShift32((jint) 0x80, (i % 8)))) != 0);
    }
    return boolId;
  }
  return nil;
}

- (void)checkValidity {
  [self checkValidityWithJavaUtilDate:new_JavaUtilDate_init()];
}

- (void)checkValidityWithJavaUtilDate:(JavaUtilDate *)date {
  if ([((JavaUtilDate *) nil_chk(date)) afterWithJavaUtilDate:[self getNotAfter]]) {
    @throw new_JavaSecurityCertCertificateExpiredException_initWithNSString_(JreStrcat("$@", @"certificate expired on ", [self getNotAfter]));
  }
  if ([date beforeWithJavaUtilDate:[self getNotBefore]]) {
    @throw new_JavaSecurityCertCertificateNotYetValidException_initWithNSString_(JreStrcat("$@", @"certificate not valid till ", [self getNotBefore]));
  }
}

- (IOSByteArray *)getSignature {
  return [((LibOrgBouncycastleAsn1DERBitString *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getSignatureValue])) getOctets];
}

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)provider {
  JavaSecuritySignature *signature = nil;
  if (![((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getSignatureAlgorithm])) isEqual:[((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getSignature]]) {
    @throw new_JavaSecurityCertCertificateException_initWithNSString_(@"Signature algorithm in certificate info not same as outer certificate");
  }
  signature = JavaSecuritySignature_getInstanceWithNSString_withNSString_([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getSignatureAlgorithm])) getAlgorithm])) getId], provider);
  [((JavaSecuritySignature *) nil_chk(signature)) initVerifyWithJavaSecurityPublicKey:key];
  @try {
    [signature updateWithByteArray:[((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getEncoded]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"Exception encoding certificate info object");
  }
  if (![signature verifyWithByteArray:[self getSignature]]) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Public key presented not for certificate signature");
  }
}

- (IOSByteArray *)getEncoded {
  return [((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getEncoded];
}

- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid {
  LibOrgBouncycastleAsn1X509Extensions *extensions = [((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getExtensions];
  if (extensions != nil) {
    LibOrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    if (ext != nil) {
      @try {
        return [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"error encoding ", [e description]));
      }
    }
  }
  return nil;
}

- (id<JavaUtilSet>)getExtensionOIDsWithBoolean:(jboolean)critical {
  return LibOrgBouncycastleX509X509V2AttributeCertificate_getExtensionOIDsWithBoolean_(self, critical);
}

- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  return LibOrgBouncycastleX509X509V2AttributeCertificate_getExtensionOIDsWithBoolean_(self, false);
}

- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  return LibOrgBouncycastleX509X509V2AttributeCertificate_getExtensionOIDsWithBoolean_(self, true);
}

- (jboolean)hasUnsupportedCriticalExtension {
  id<JavaUtilSet> extensions = [self getCriticalExtensionOIDs];
  return extensions != nil && ![extensions isEmpty];
}

- (IOSObjectArray *)getAttributes {
  LibOrgBouncycastleAsn1ASN1Sequence *seq = [((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getAttributes];
  IOSObjectArray *attrs = [IOSObjectArray newArrayWithLength:[((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] type:LibOrgBouncycastleX509X509X509Attribute_class_()];
  for (jint i = 0; i != [seq size]; i++) {
    (void) IOSObjectArray_SetAndConsume(attrs, i, new_LibOrgBouncycastleX509X509X509Attribute_initWithLibOrgBouncycastleAsn1ASN1Encodable_([seq getObjectAtWithInt:i]));
  }
  return attrs;
}

- (IOSObjectArray *)getAttributesWithNSString:(NSString *)oid {
  LibOrgBouncycastleAsn1ASN1Sequence *seq = [((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert_)) getAcinfo])) getAttributes];
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  for (jint i = 0; i != [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size]; i++) {
    LibOrgBouncycastleX509X509X509Attribute *attr = new_LibOrgBouncycastleX509X509X509Attribute_initWithLibOrgBouncycastleAsn1ASN1Encodable_([seq getObjectAtWithInt:i]);
    if ([((NSString *) nil_chk([attr getOID])) isEqual:oid]) {
      [list addWithId:attr];
    }
  }
  if ([list size] == 0) {
    return nil;
  }
  return (IOSObjectArray *) cast_check([list toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[list size] type:LibOrgBouncycastleX509X509X509Attribute_class_()]], IOSClass_arrayType(LibOrgBouncycastleX509X509X509Attribute_class_(), 1));
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([LibOrgBouncycastleX509X509AttributeCertificate_class_() isInstance:o])) {
    return false;
  }
  id<LibOrgBouncycastleX509X509AttributeCertificate> other = (id<LibOrgBouncycastleX509X509AttributeCertificate>) cast_check(o, LibOrgBouncycastleX509X509AttributeCertificate_class_());
  @try {
    IOSByteArray *b1 = [self getEncoded];
    IOSByteArray *b2 = [((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(other)) getEncoded];
    return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(b1, b2);
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
}

- (NSUInteger)hash {
  @try {
    return LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_([self getEncoded]);
  }
  @catch (JavaIoIOException *e) {
    return 0;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleAsn1X509AttributeCertificate;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleX509AttributeCertificateHolder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleX509AttributeCertificateIssuer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 8, 9, 10, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleX509X509X509Attribute;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LLibOrgBouncycastleX509X509X509Attribute;", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getObjectWithJavaIoInputStream:);
  methods[1].selector = @selector(initWithJavaIoInputStream:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1X509AttributeCertificate:);
  methods[4].selector = @selector(getVersion);
  methods[5].selector = @selector(getSerialNumber);
  methods[6].selector = @selector(getHolder);
  methods[7].selector = @selector(getIssuer);
  methods[8].selector = @selector(getNotBefore);
  methods[9].selector = @selector(getNotAfter);
  methods[10].selector = @selector(getIssuerUniqueID);
  methods[11].selector = @selector(checkValidity);
  methods[12].selector = @selector(checkValidityWithJavaUtilDate:);
  methods[13].selector = @selector(getSignature);
  methods[14].selector = @selector(verifyWithJavaSecurityPublicKey:withNSString:);
  methods[15].selector = @selector(getEncoded);
  methods[16].selector = @selector(getExtensionValueWithNSString:);
  methods[17].selector = @selector(getExtensionOIDsWithBoolean:);
  methods[18].selector = @selector(getNonCriticalExtensionOIDs);
  methods[19].selector = @selector(getCriticalExtensionOIDs);
  methods[20].selector = @selector(hasUnsupportedCriticalExtension);
  methods[21].selector = @selector(getAttributes);
  methods[22].selector = @selector(getAttributesWithNSString:);
  methods[23].selector = @selector(isEqual:);
  methods[24].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cert_", "LLibOrgBouncycastleAsn1X509AttributeCertificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "notBefore_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "notAfter_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getObject", "LJavaIoInputStream;", "LJavaIoIOException;", "[B", "LLibOrgBouncycastleAsn1X509AttributeCertificate;", "LJavaSecurityCertCertificateExpiredException;LJavaSecurityCertCertificateNotYetValidException;", "checkValidity", "LJavaUtilDate;", "verify", "LJavaSecurityPublicKey;LNSString;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;LJavaSecuritySignatureException;", "getExtensionValue", "LNSString;", "getExtensionOIDs", "Z", "getAttributes", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _LibOrgBouncycastleX509X509V2AttributeCertificate = { "X509V2AttributeCertificate", "lib.org.bouncycastle.x509", ptrTable, methods, fields, 7, 0x1, 25, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleX509X509V2AttributeCertificate;
}

@end

LibOrgBouncycastleAsn1X509AttributeCertificate *LibOrgBouncycastleX509X509V2AttributeCertificate_getObjectWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  LibOrgBouncycastleX509X509V2AttributeCertificate_initialize();
  @try {
    return LibOrgBouncycastleAsn1X509AttributeCertificate_getInstanceWithId_([new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inArg) readObject]);
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"exception decoding certificate structure: ", [e description]));
  }
}

void LibOrgBouncycastleX509X509V2AttributeCertificate_initWithJavaIoInputStream_(LibOrgBouncycastleX509X509V2AttributeCertificate *self, JavaIoInputStream *encIn) {
  LibOrgBouncycastleX509X509V2AttributeCertificate_initWithLibOrgBouncycastleAsn1X509AttributeCertificate_(self, LibOrgBouncycastleX509X509V2AttributeCertificate_getObjectWithJavaIoInputStream_(encIn));
}

LibOrgBouncycastleX509X509V2AttributeCertificate *new_LibOrgBouncycastleX509X509V2AttributeCertificate_initWithJavaIoInputStream_(JavaIoInputStream *encIn) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509X509V2AttributeCertificate, initWithJavaIoInputStream_, encIn)
}

LibOrgBouncycastleX509X509V2AttributeCertificate *create_LibOrgBouncycastleX509X509V2AttributeCertificate_initWithJavaIoInputStream_(JavaIoInputStream *encIn) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509X509V2AttributeCertificate, initWithJavaIoInputStream_, encIn)
}

void LibOrgBouncycastleX509X509V2AttributeCertificate_initWithByteArray_(LibOrgBouncycastleX509X509V2AttributeCertificate *self, IOSByteArray *encoded) {
  LibOrgBouncycastleX509X509V2AttributeCertificate_initWithJavaIoInputStream_(self, new_JavaIoByteArrayInputStream_initWithByteArray_(encoded));
}

LibOrgBouncycastleX509X509V2AttributeCertificate *new_LibOrgBouncycastleX509X509V2AttributeCertificate_initWithByteArray_(IOSByteArray *encoded) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509X509V2AttributeCertificate, initWithByteArray_, encoded)
}

LibOrgBouncycastleX509X509V2AttributeCertificate *create_LibOrgBouncycastleX509X509V2AttributeCertificate_initWithByteArray_(IOSByteArray *encoded) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509X509V2AttributeCertificate, initWithByteArray_, encoded)
}

void LibOrgBouncycastleX509X509V2AttributeCertificate_initWithLibOrgBouncycastleAsn1X509AttributeCertificate_(LibOrgBouncycastleX509X509V2AttributeCertificate *self, LibOrgBouncycastleAsn1X509AttributeCertificate *cert) {
  NSObject_init(self);
  self->cert_ = cert;
  @try {
    self->notAfter_ = [((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk([((LibOrgBouncycastleAsn1X509AttCertValidityPeriod *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(cert)) getAcinfo])) getAttrCertValidityPeriod])) getNotAfterTime])) getDate];
    self->notBefore_ = [((LibOrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk([((LibOrgBouncycastleAsn1X509AttCertValidityPeriod *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([cert getAcinfo])) getAttrCertValidityPeriod])) getNotBeforeTime])) getDate];
  }
  @catch (JavaTextParseException *e) {
    @throw new_JavaIoIOException_initWithNSString_(@"invalid data structure in certificate!");
  }
}

LibOrgBouncycastleX509X509V2AttributeCertificate *new_LibOrgBouncycastleX509X509V2AttributeCertificate_initWithLibOrgBouncycastleAsn1X509AttributeCertificate_(LibOrgBouncycastleAsn1X509AttributeCertificate *cert) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509X509V2AttributeCertificate, initWithLibOrgBouncycastleAsn1X509AttributeCertificate_, cert)
}

LibOrgBouncycastleX509X509V2AttributeCertificate *create_LibOrgBouncycastleX509X509V2AttributeCertificate_initWithLibOrgBouncycastleAsn1X509AttributeCertificate_(LibOrgBouncycastleAsn1X509AttributeCertificate *cert) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509X509V2AttributeCertificate, initWithLibOrgBouncycastleAsn1X509AttributeCertificate_, cert)
}

id<JavaUtilSet> LibOrgBouncycastleX509X509V2AttributeCertificate_getExtensionOIDsWithBoolean_(LibOrgBouncycastleX509X509V2AttributeCertificate *self, jboolean critical) {
  LibOrgBouncycastleAsn1X509Extensions *extensions = [((LibOrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((LibOrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(self->cert_)) getAcinfo])) getExtensions];
  if (extensions != nil) {
    id<JavaUtilSet> set = new_JavaUtilHashSet_init();
    id<JavaUtilEnumeration> e = [extensions oids];
    while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
      LibOrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
      if ([((LibOrgBouncycastleAsn1X509Extension *) nil_chk(ext)) isCritical] == critical) {
        [set addWithId:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
      }
    }
    return set;
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleX509X509V2AttributeCertificate)
