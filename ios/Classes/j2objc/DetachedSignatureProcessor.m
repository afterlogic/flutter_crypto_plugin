//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/DetachedSignatureProcessor.java
//

#include "ArmoredOutputStream.h"
#include "BCPGOutputStream.h"
#include "BouncyCastleProvider.h"
#include "DetachedSignatureProcessor.h"
#include "HashAlgorithmTags.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaKeyFingerprintCalculator.h"
#include "JcaPGPContentSignerBuilder.h"
#include "JcaPGPContentVerifierBuilderProvider.h"
#include "JcaPGPObjectFactory.h"
#include "JcePBESecretKeyDecryptorBuilder.h"
#include "PBESecretKeyDecryptor.h"
#include "PGPCompressedData.h"
#include "PGPExampleUtil.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRingCollection.h"
#include "PGPSecretKey.h"
#include "PGPSignature.h"
#include "PGPSignatureGenerator.h"
#include "PGPSignatureList.h"
#include "PGPUtil.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/security/Security.h"

@interface LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor ()

+ (void)verifySignatureWithNSString:(NSString *)fileName
                       withNSString:(NSString *)inputFileName
                       withNSString:(NSString *)keyFileName;

+ (void)verifySignatureWithNSString:(NSString *)fileName
              withJavaIoInputStream:(JavaIoInputStream *)inArg
              withJavaIoInputStream:(JavaIoInputStream *)keyIn;

+ (void)createSignatureWithNSString:(NSString *)inputFileName
                       withNSString:(NSString *)keyFileName
                       withNSString:(NSString *)outputFileName
                      withCharArray:(IOSCharArray *)pass
                        withBoolean:(jboolean)armor;

+ (void)createSignatureWithNSString:(NSString *)fileName
              withJavaIoInputStream:(JavaIoInputStream *)keyIn
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                      withCharArray:(IOSCharArray *)pass
                        withBoolean:(jboolean)armor;

@end

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_verifySignatureWithNSString_withNSString_withNSString_(NSString *fileName, NSString *inputFileName, NSString *keyFileName);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_verifySignatureWithNSString_withJavaIoInputStream_withJavaIoInputStream_(NSString *fileName, JavaIoInputStream *inArg, JavaIoInputStream *keyIn);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withNSString_withNSString_withCharArray_withBoolean_(NSString *inputFileName, NSString *keyFileName, NSString *outputFileName, IOSCharArray *pass, jboolean armor);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(NSString *fileName, JavaIoInputStream *keyIn, JavaIoOutputStream *outArg, IOSCharArray *pass, jboolean armor);

@implementation LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)verifySignatureWithNSString:(NSString *)fileName
                       withNSString:(NSString *)inputFileName
                       withNSString:(NSString *)keyFileName {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_verifySignatureWithNSString_withNSString_withNSString_(fileName, inputFileName, keyFileName);
}

+ (void)verifySignatureWithNSString:(NSString *)fileName
              withJavaIoInputStream:(JavaIoInputStream *)inArg
              withJavaIoInputStream:(JavaIoInputStream *)keyIn {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_verifySignatureWithNSString_withJavaIoInputStream_withJavaIoInputStream_(fileName, inArg, keyIn);
}

+ (void)createSignatureWithNSString:(NSString *)inputFileName
                       withNSString:(NSString *)keyFileName
                       withNSString:(NSString *)outputFileName
                      withCharArray:(IOSCharArray *)pass
                        withBoolean:(jboolean)armor {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withNSString_withNSString_withCharArray_withBoolean_(inputFileName, keyFileName, outputFileName, pass, armor);
}

+ (void)createSignatureWithNSString:(NSString *)fileName
              withJavaIoInputStream:(JavaIoInputStream *)keyIn
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                      withCharArray:(IOSCharArray *)pass
                        withBoolean:(jboolean)armor {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(fileName, keyIn, outArg, pass, armor);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 5, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, 9, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verifySignatureWithNSString:withNSString:withNSString:);
  methods[2].selector = @selector(verifySignatureWithNSString:withJavaIoInputStream:withJavaIoInputStream:);
  methods[3].selector = @selector(createSignatureWithNSString:withNSString:withNSString:withCharArray:withBoolean:);
  methods[4].selector = @selector(createSignatureWithNSString:withJavaIoInputStream:withJavaIoOutputStream:withCharArray:withBoolean:);
  methods[5].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verifySignature", "LNSString;LNSString;LNSString;", "LJavaSecurityGeneralSecurityException;LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LNSString;LJavaIoInputStream;LJavaIoInputStream;", "createSignature", "LNSString;LNSString;LNSString;[CZ", "LNSString;LJavaIoInputStream;LJavaIoOutputStream;[CZ", "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor = { "DetachedSignatureProcessor", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor;
}

@end

void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_init(LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor *new_LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor, init)
}

LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor *create_LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor, init)
}

void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_verifySignatureWithNSString_withNSString_withNSString_(NSString *fileName, NSString *inputFileName, NSString *keyFileName) {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_initialize();
  JavaIoInputStream *in = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(inputFileName));
  JavaIoInputStream *keyIn = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(keyFileName));
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_verifySignatureWithNSString_withJavaIoInputStream_withJavaIoInputStream_(fileName, in, keyIn);
  [keyIn close];
  [in close];
}

void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_verifySignatureWithNSString_withJavaIoInputStream_withJavaIoInputStream_(NSString *fileName, JavaIoInputStream *inArg, JavaIoInputStream *keyIn) {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_initialize();
  inArg = LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(inArg);
  LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(inArg);
  LibOrgBouncycastleOpenpgpPGPSignatureList *p3;
  id o = [pgpFact nextObject];
  if ([o isKindOfClass:[LibOrgBouncycastleOpenpgpPGPCompressedData class]]) {
    LibOrgBouncycastleOpenpgpPGPCompressedData *c1 = (LibOrgBouncycastleOpenpgpPGPCompressedData *) o;
    pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_([((LibOrgBouncycastleOpenpgpPGPCompressedData *) nil_chk(c1)) getDataStream]);
    p3 = (LibOrgBouncycastleOpenpgpPGPSignatureList *) cast_chk([pgpFact nextObject], [LibOrgBouncycastleOpenpgpPGPSignatureList class]);
  }
  else {
    p3 = (LibOrgBouncycastleOpenpgpPGPSignatureList *) cast_chk(o, [LibOrgBouncycastleOpenpgpPGPSignatureList class]);
  }
  LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection *pgpPubRingCollection = new_LibOrgBouncycastleOpenpgpPGPPublicKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(keyIn), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
  JavaIoInputStream *dIn = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(fileName));
  LibOrgBouncycastleOpenpgpPGPSignature *sig = [((LibOrgBouncycastleOpenpgpPGPSignatureList *) nil_chk(p3)) getWithInt:0];
  LibOrgBouncycastleOpenpgpPGPPublicKey *key = [pgpPubRingCollection getPublicKeyWithLong:[((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(sig)) getKeyID]];
  [sig init__WithLibOrgBouncycastleOpenpgpOperatorPGPContentVerifierBuilderProvider:[new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentVerifierBuilderProvider_init() setProviderWithNSString:@"BC"] withLibOrgBouncycastleOpenpgpPGPPublicKey:key];
  jint ch;
  while ((ch = [dIn read]) >= 0) {
    [sig updateWithByte:(jbyte) ch];
  }
  [dIn close];
  if ([sig verify]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"signature verified."];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"signature verification failed."];
  }
}

void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withNSString_withNSString_withCharArray_withBoolean_(NSString *inputFileName, NSString *keyFileName, NSString *outputFileName, IOSCharArray *pass, jboolean armor) {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_initialize();
  JavaIoInputStream *keyIn = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(keyFileName));
  JavaIoOutputStream *out = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(outputFileName));
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(inputFileName, keyIn, out, pass, armor);
  [out close];
  [keyIn close];
}

void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withCharArray_withBoolean_(NSString *fileName, JavaIoInputStream *keyIn, JavaIoOutputStream *outArg, IOSCharArray *pass, jboolean armor) {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_initialize();
  if (armor) {
    outArg = new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(outArg);
  }
  LibOrgBouncycastleOpenpgpPGPSecretKey *pgpSec = LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readSecretKeyWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleOpenpgpPGPPrivateKey *pgpPrivKey = [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(pgpSec)) extractPrivateKeyWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyDecryptorBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyDecryptorBuilder_init() setProviderWithNSString:@"BC"])) buildWithCharArray:pass]];
  LibOrgBouncycastleOpenpgpPGPSignatureGenerator *sGen = new_LibOrgBouncycastleOpenpgpPGPSignatureGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentSignerBuilder_initWithInt_withInt_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([pgpSec getPublicKey])) getAlgorithm], LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1) setProviderWithNSString:@"BC"]);
  [sGen init__WithInt:LibOrgBouncycastleOpenpgpPGPSignature_BINARY_DOCUMENT withLibOrgBouncycastleOpenpgpPGPPrivateKey:pgpPrivKey];
  LibOrgBouncycastleBcpgBCPGOutputStream *bOut = new_LibOrgBouncycastleBcpgBCPGOutputStream_initWithJavaIoOutputStream_(outArg);
  JavaIoInputStream *fIn = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(fileName));
  jint ch;
  while ((ch = [fIn read]) >= 0) {
    [sGen updateWithByte:(jbyte) ch];
  }
  [fIn close];
  [((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk([sGen generate])) encodeWithJavaIoOutputStream:bOut];
  if (armor) {
    [((JavaIoOutputStream *) nil_chk(outArg)) close];
  }
}

void LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_initialize();
  JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_LibOrgBouncycastleJceProviderBouncyCastleProvider_init());
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) isEqual:@"-s"]) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-a"]) {
      LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withNSString_withNSString_withCharArray_withBoolean_(IOSObjectArray_Get(args, 2), IOSObjectArray_Get(args, 3), JreStrcat("$$", IOSObjectArray_Get(args, 2), @".asc"), [((NSString *) nil_chk(IOSObjectArray_Get(args, 4))) java_toCharArray], true);
    }
    else {
      LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_createSignatureWithNSString_withNSString_withNSString_withCharArray_withBoolean_(IOSObjectArray_Get(args, 1), IOSObjectArray_Get(args, 2), JreStrcat("$$", IOSObjectArray_Get(args, 1), @".bpg"), [((NSString *) nil_chk(IOSObjectArray_Get(args, 3))) java_toCharArray], false);
    }
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-v"]) {
    LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor_verifySignatureWithNSString_withNSString_withNSString_(IOSObjectArray_Get(args, 1), IOSObjectArray_Get(args, 2), IOSObjectArray_Get(args, 3));
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: DetachedSignatureProcessor [-s [-a] file keyfile passPhrase]|[-v file sigFile keyFile]"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesDetachedSignatureProcessor)
