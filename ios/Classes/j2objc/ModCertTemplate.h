//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmc/ModCertTemplate.java
//

#ifndef ModCertTemplate_H
#define ModCertTemplate_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CmcBodyPartList;
@class LibOrgBouncycastleAsn1CmcBodyPartPath;
@class LibOrgBouncycastleAsn1CrmfCertTemplate;

@interface LibOrgBouncycastleAsn1CmcModCertTemplate : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmcBodyPartPath:(LibOrgBouncycastleAsn1CmcBodyPartPath *)pkiDataReference
                              withLibOrgBouncycastleAsn1CmcBodyPartList:(LibOrgBouncycastleAsn1CmcBodyPartList *)certReferences
                                                            withBoolean:(jboolean)replace
                             withLibOrgBouncycastleAsn1CrmfCertTemplate:(LibOrgBouncycastleAsn1CrmfCertTemplate *)certTemplate;

- (LibOrgBouncycastleAsn1CmcBodyPartList *)getCertReferences;

- (LibOrgBouncycastleAsn1CrmfCertTemplate *)getCertTemplate;

+ (LibOrgBouncycastleAsn1CmcModCertTemplate *)getInstanceWithId:(id)o;

- (LibOrgBouncycastleAsn1CmcBodyPartPath *)getPkiDataReference;

- (jboolean)isReplacingFields;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmcModCertTemplate)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmcModCertTemplate_initWithLibOrgBouncycastleAsn1CmcBodyPartPath_withLibOrgBouncycastleAsn1CmcBodyPartList_withBoolean_withLibOrgBouncycastleAsn1CrmfCertTemplate_(LibOrgBouncycastleAsn1CmcModCertTemplate *self, LibOrgBouncycastleAsn1CmcBodyPartPath *pkiDataReference, LibOrgBouncycastleAsn1CmcBodyPartList *certReferences, jboolean replace, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcModCertTemplate *new_LibOrgBouncycastleAsn1CmcModCertTemplate_initWithLibOrgBouncycastleAsn1CmcBodyPartPath_withLibOrgBouncycastleAsn1CmcBodyPartList_withBoolean_withLibOrgBouncycastleAsn1CrmfCertTemplate_(LibOrgBouncycastleAsn1CmcBodyPartPath *pkiDataReference, LibOrgBouncycastleAsn1CmcBodyPartList *certReferences, jboolean replace, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcModCertTemplate *create_LibOrgBouncycastleAsn1CmcModCertTemplate_initWithLibOrgBouncycastleAsn1CmcBodyPartPath_withLibOrgBouncycastleAsn1CmcBodyPartList_withBoolean_withLibOrgBouncycastleAsn1CrmfCertTemplate_(LibOrgBouncycastleAsn1CmcBodyPartPath *pkiDataReference, LibOrgBouncycastleAsn1CmcBodyPartList *certReferences, jboolean replace, LibOrgBouncycastleAsn1CrmfCertTemplate *certTemplate);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcModCertTemplate *LibOrgBouncycastleAsn1CmcModCertTemplate_getInstanceWithId_(id o);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmcModCertTemplate)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ModCertTemplate_H
