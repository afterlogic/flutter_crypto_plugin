//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/CMac.java
//

#include "BlockCipher.h"
#include "CBCBlockCipher.h"
#include "CMac.h"
#include "CipherParameters.h"
#include "IOSPrimitiveArray.h"
#include "ISO7816d4Padding.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "Pack.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoMacsCMac () {
 @public
  IOSByteArray *poly_;
  IOSByteArray *ZEROES_;
  IOSByteArray *mac_;
  IOSByteArray *buf_;
  jint bufOff_;
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_;
  jint macSize_;
  IOSByteArray *Lu_;
  IOSByteArray *Lu2_;
}

+ (jint)shiftLeftWithByteArray:(IOSByteArray *)block
                 withByteArray:(IOSByteArray *)output;

- (IOSByteArray *)doubleLuWithByteArray:(IOSByteArray *)inArg;

+ (IOSByteArray *)lookupPolyWithInt:(jint)blockSizeLength;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsCMac, poly_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsCMac, ZEROES_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsCMac, mac_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsCMac, buf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsCMac, cipher_, id<LibOrgBouncycastleCryptoBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsCMac, Lu_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsCMac, Lu2_, IOSByteArray *)

__attribute__((unused)) static jint LibOrgBouncycastleCryptoMacsCMac_shiftLeftWithByteArray_withByteArray_(IOSByteArray *block, IOSByteArray *output);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoMacsCMac_doubleLuWithByteArray_(LibOrgBouncycastleCryptoMacsCMac *self, IOSByteArray *inArg);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoMacsCMac_lookupPolyWithInt_(jint blockSizeLength);

@implementation LibOrgBouncycastleCryptoMacsCMac

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                    withInt:(jint)macSizeInBits {
  LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, macSizeInBits);
  return self;
}

- (NSString *)getAlgorithmName {
  return [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getAlgorithmName];
}

+ (jint)shiftLeftWithByteArray:(IOSByteArray *)block
                 withByteArray:(IOSByteArray *)output {
  return LibOrgBouncycastleCryptoMacsCMac_shiftLeftWithByteArray_withByteArray_(block, output);
}

- (IOSByteArray *)doubleLuWithByteArray:(IOSByteArray *)inArg {
  return LibOrgBouncycastleCryptoMacsCMac_doubleLuWithByteArray_(self, inArg);
}

+ (IOSByteArray *)lookupPolyWithInt:(jint)blockSizeLength {
  return LibOrgBouncycastleCryptoMacsCMac_lookupPolyWithInt_(blockSizeLength);
}

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  [self validateWithLibOrgBouncycastleCryptoCipherParameters:params];
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:params];
  IOSByteArray *L = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(ZEROES_))->size_];
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:ZEROES_ withInt:0 withByteArray:L withInt:0];
  Lu_ = LibOrgBouncycastleCryptoMacsCMac_doubleLuWithByteArray_(self, L);
  Lu2_ = LibOrgBouncycastleCryptoMacsCMac_doubleLuWithByteArray_(self, Lu_);
  [self reset];
}

- (void)validateWithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if (params != nil) {
    if (!([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"CMac mode only permits key to be set.");
    }
  }
}

- (jint)getMacSize {
  return macSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
    bufOff_ = 0;
  }
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  jint blockSize = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  jint gapLen = blockSize - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > blockSize) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:mac_ withInt:0];
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  jint blockSize = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  IOSByteArray *lu;
  if (bufOff_ == blockSize) {
    lu = Lu_;
  }
  else {
    [new_LibOrgBouncycastleCryptoPaddingsISO7816d4Padding_init() addPaddingWithByteArray:buf_ withInt:bufOff_];
    lu = Lu2_;
  }
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(mac_))->size_; i++) {
    *IOSByteArray_GetRef(nil_chk(buf_), i) ^= IOSByteArray_Get(nil_chk(lu), i);
  }
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mac_, 0, outArg, outOff, macSize_);
  [self reset];
  return macSize_;
}

- (void)reset {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i++) {
    *IOSByteArray_GetRef(buf_, i) = 0;
  }
  bufOff_ = 0;
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withInt:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(shiftLeftWithByteArray:withByteArray:);
  methods[4].selector = @selector(doubleLuWithByteArray:);
  methods[5].selector = @selector(lookupPolyWithInt:);
  methods[6].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[7].selector = @selector(validateWithLibOrgBouncycastleCryptoCipherParameters:);
  methods[8].selector = @selector(getMacSize);
  methods[9].selector = @selector(updateWithByte:);
  methods[10].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[11].selector = @selector(doFinalWithByteArray:withInt:);
  methods[12].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "poly_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ZEROES_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mac_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Lu_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Lu2_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "LLibOrgBouncycastleCryptoBlockCipher;I", "shiftLeft", "[B[B", "doubleLu", "[B", "lookupPoly", "I", "init", "LLibOrgBouncycastleCryptoCipherParameters;", "validate", "update", "B", "[BII", "doFinal", "[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoMacsCMac = { "CMac", "lib.org.bouncycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 13, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoMacsCMac;
}

@end

void LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoMacsCMac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8);
}

LibOrgBouncycastleCryptoMacsCMac *new_LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsCMac, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoMacsCMac *create_LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsCMac, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

void LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleCryptoMacsCMac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  NSObject_init(self);
  if ((macSizeInBits % 8) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"MAC size must be multiple of 8");
  }
  if (macSizeInBits > ([((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"MAC size must be less or equal to ", ([cipher getBlockSize] * 8)));
  }
  self->cipher_ = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(cipher);
  self->macSize_ = macSizeInBits / 8;
  self->poly_ = LibOrgBouncycastleCryptoMacsCMac_lookupPolyWithInt_([cipher getBlockSize]);
  self->mac_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->buf_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->ZEROES_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->bufOff_ = 0;
}

LibOrgBouncycastleCryptoMacsCMac *new_LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsCMac, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, macSizeInBits)
}

LibOrgBouncycastleCryptoMacsCMac *create_LibOrgBouncycastleCryptoMacsCMac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsCMac, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, macSizeInBits)
}

jint LibOrgBouncycastleCryptoMacsCMac_shiftLeftWithByteArray_withByteArray_(IOSByteArray *block, IOSByteArray *output) {
  LibOrgBouncycastleCryptoMacsCMac_initialize();
  jint i = ((IOSByteArray *) nil_chk(block))->size_;
  jint bit = 0;
  while (--i >= 0) {
    jint b = IOSByteArray_Get(block, i) & (jint) 0xff;
    *IOSByteArray_GetRef(nil_chk(output), i) = (jbyte) ((JreLShift32(b, 1)) | bit);
    bit = (JreURShift32(b, 7)) & 1;
  }
  return bit;
}

IOSByteArray *LibOrgBouncycastleCryptoMacsCMac_doubleLuWithByteArray_(LibOrgBouncycastleCryptoMacsCMac *self, IOSByteArray *inArg) {
  IOSByteArray *ret = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(inArg))->size_];
  jint carry = LibOrgBouncycastleCryptoMacsCMac_shiftLeftWithByteArray_withByteArray_(inArg, ret);
  jint mask = (-carry) & (jint) 0xff;
  *IOSByteArray_GetRef(ret, inArg->size_ - 3) ^= IOSByteArray_Get(nil_chk(self->poly_), 1) & mask;
  *IOSByteArray_GetRef(ret, inArg->size_ - 2) ^= IOSByteArray_Get(self->poly_, 2) & mask;
  *IOSByteArray_GetRef(ret, inArg->size_ - 1) ^= IOSByteArray_Get(self->poly_, 3) & mask;
  return ret;
}

IOSByteArray *LibOrgBouncycastleCryptoMacsCMac_lookupPolyWithInt_(jint blockSizeLength) {
  LibOrgBouncycastleCryptoMacsCMac_initialize();
  jint xor_;
  switch (blockSizeLength * 8) {
    case 64:
    xor_ = (jint) 0x1B;
    break;
    case 128:
    xor_ = (jint) 0x87;
    break;
    case 160:
    xor_ = (jint) 0x2D;
    break;
    case 192:
    xor_ = (jint) 0x87;
    break;
    case 224:
    xor_ = (jint) 0x309;
    break;
    case 256:
    xor_ = (jint) 0x425;
    break;
    case 320:
    xor_ = (jint) 0x1B;
    break;
    case 384:
    xor_ = (jint) 0x100D;
    break;
    case 448:
    xor_ = (jint) 0x851;
    break;
    case 512:
    xor_ = (jint) 0x125;
    break;
    case 768:
    xor_ = (jint) 0xA0011;
    break;
    case 1024:
    xor_ = (jint) 0x80043;
    break;
    case 2048:
    xor_ = (jint) 0x86001;
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown block size for CMAC: ", (blockSizeLength * 8)));
  }
  return LibOrgBouncycastleUtilPack_intToBigEndianWithInt_(xor_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoMacsCMac)
