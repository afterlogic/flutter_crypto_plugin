//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dh/BCDHPublicKey.java
//

#ifndef BCDHPublicKey_H
#define BCDHPublicKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "javax/crypto/interfaces/DHPublicKey.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaxCryptoSpecDHParameterSpec;
@class JavaxCryptoSpecDHPublicKeySpec;
@class LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class LibOrgBouncycastleCryptoParamsDHPublicKeyParameters;

@interface LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey : NSObject < JavaxCryptoInterfacesDHPublicKey >
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info;

- (LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *)engineGetKeyParameters;

- (jboolean)isEqual:(id)o;

- (NSString *)getAlgorithm;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (JavaxCryptoSpecDHParameterSpec *)getParams;

- (JavaMathBigInteger *)getY;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)y
                  withJavaxCryptoSpecDHParameterSpec:(JavaxCryptoSpecDHParameterSpec *)dhSpec;

- (instancetype __nonnull)initWithJavaxCryptoInterfacesDHPublicKey:(id<JavaxCryptoInterfacesDHPublicKey>)key;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters:(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *)params;

- (instancetype __nonnull)initWithJavaxCryptoSpecDHPublicKeySpec:(JavaxCryptoSpecDHPublicKeySpec *)spec;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey)

inline jlong LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_get_serialVersionUID(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_serialVersionUID -216691575254424324LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey, serialVersionUID, jlong)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *self, JavaxCryptoSpecDHPublicKeySpec *spec);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(JavaxCryptoSpecDHPublicKeySpec *spec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(JavaxCryptoSpecDHPublicKeySpec *spec);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *self, id<JavaxCryptoInterfacesDHPublicKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(id<JavaxCryptoInterfacesDHPublicKey> key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(id<JavaxCryptoInterfacesDHPublicKey> key);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_(LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *self, LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *params);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *self, JavaMathBigInteger *y, JavaxCryptoSpecDHParameterSpec *dhSpec);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_(JavaMathBigInteger *y, JavaxCryptoSpecDHParameterSpec *dhSpec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_(JavaMathBigInteger *y, JavaxCryptoSpecDHParameterSpec *dhSpec);

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricDhBCDHPublicKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BCDHPublicKey_H
