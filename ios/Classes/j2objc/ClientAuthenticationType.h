//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ClientAuthenticationType.java
//

#ifndef ClientAuthenticationType_H
#define ClientAuthenticationType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsClientAuthenticationType : NSObject
@property (readonly, class) jshort anonymous NS_SWIFT_NAME(anonymous);
@property (readonly, class) jshort certificate_based NS_SWIFT_NAME(certificate_based);
@property (readonly, class) jshort psk NS_SWIFT_NAME(psk);

+ (jshort)anonymous;

+ (jshort)certificate_based;

+ (jshort)psk;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsClientAuthenticationType)

inline jshort LibOrgBouncycastleCryptoTlsClientAuthenticationType_get_anonymous(void);
#define LibOrgBouncycastleCryptoTlsClientAuthenticationType_anonymous 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientAuthenticationType, anonymous, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientAuthenticationType_get_certificate_based(void);
#define LibOrgBouncycastleCryptoTlsClientAuthenticationType_certificate_based 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientAuthenticationType, certificate_based, jshort)

inline jshort LibOrgBouncycastleCryptoTlsClientAuthenticationType_get_psk(void);
#define LibOrgBouncycastleCryptoTlsClientAuthenticationType_psk 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsClientAuthenticationType, psk, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsClientAuthenticationType_init(LibOrgBouncycastleCryptoTlsClientAuthenticationType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsClientAuthenticationType *new_LibOrgBouncycastleCryptoTlsClientAuthenticationType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsClientAuthenticationType *create_LibOrgBouncycastleCryptoTlsClientAuthenticationType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsClientAuthenticationType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ClientAuthenticationType_H
