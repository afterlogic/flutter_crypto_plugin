//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DeferredHash.java
//

#include "CombinedHash.h"
#include "DeferredHash.h"
#include "Digest.h"
#include "DigestInputBuffer.h"
#include "HashAlgorithm.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PRFAlgorithm.h"
#include "SecurityParameters.h"
#include "Shorts.h"
#include "TlsContext.h"
#include "TlsHandshakeHash.h"
#include "TlsUtils.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Short.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"

@interface LibOrgBouncycastleCryptoTlsDeferredHash () {
 @public
  LibOrgBouncycastleCryptoTlsDigestInputBuffer *buf_;
  JavaUtilHashtable *hashes_;
  JavaLangShort *prfHashAlgorithm_;
}

- (instancetype)initWithJavaLangShort:(JavaLangShort *)prfHashAlgorithm
   withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)prfHash;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDeferredHash, buf_, LibOrgBouncycastleCryptoTlsDigestInputBuffer *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDeferredHash, hashes_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDeferredHash, prfHashAlgorithm_, JavaLangShort *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoTlsDeferredHash_initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoTlsDeferredHash *self, JavaLangShort *prfHashAlgorithm, id<LibOrgBouncycastleCryptoDigest> prfHash);

__attribute__((unused)) static LibOrgBouncycastleCryptoTlsDeferredHash *new_LibOrgBouncycastleCryptoTlsDeferredHash_initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_(JavaLangShort *prfHashAlgorithm, id<LibOrgBouncycastleCryptoDigest> prfHash) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoTlsDeferredHash *create_LibOrgBouncycastleCryptoTlsDeferredHash_initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_(JavaLangShort *prfHashAlgorithm, id<LibOrgBouncycastleCryptoDigest> prfHash);

@implementation LibOrgBouncycastleCryptoTlsDeferredHash

+ (jint)BUFFERING_HASH_LIMIT {
  return LibOrgBouncycastleCryptoTlsDeferredHash_BUFFERING_HASH_LIMIT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsDeferredHash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaLangShort:(JavaLangShort *)prfHashAlgorithm
   withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)prfHash {
  LibOrgBouncycastleCryptoTlsDeferredHash_initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_(self, prfHashAlgorithm, prfHash);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context {
  self->context_ = context;
}

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)notifyPRFDetermined {
  jint prfAlgorithm = [((LibOrgBouncycastleCryptoTlsSecurityParameters *) nil_chk([((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters])) getPrfAlgorithm];
  if (prfAlgorithm == LibOrgBouncycastleCryptoTlsPRFAlgorithm_tls_prf_legacy) {
    LibOrgBouncycastleCryptoTlsCombinedHash *legacyHash = new_LibOrgBouncycastleCryptoTlsCombinedHash_init();
    [legacyHash init__WithLibOrgBouncycastleCryptoTlsTlsContext:context_];
    [((LibOrgBouncycastleCryptoTlsDigestInputBuffer *) nil_chk(buf_)) updateDigestWithLibOrgBouncycastleCryptoDigest:legacyHash];
    return [legacyHash notifyPRFDetermined];
  }
  self->prfHashAlgorithm_ = LibOrgBouncycastleUtilShorts_valueOfWithShort_(LibOrgBouncycastleCryptoTlsTlsUtils_getHashAlgorithmForPRFAlgorithmWithInt_(prfAlgorithm));
  [self checkTrackingHashWithJavaLangShort:prfHashAlgorithm_];
  return self;
}

- (void)trackHashAlgorithmWithShort:(jshort)hashAlgorithm {
  if (buf_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Too late to track more hash algorithms");
  }
  [self checkTrackingHashWithJavaLangShort:LibOrgBouncycastleUtilShorts_valueOfWithShort_(hashAlgorithm)];
}

- (void)sealHashAlgorithms {
  [self checkStopBuffering];
}

- (id<LibOrgBouncycastleCryptoTlsTlsHandshakeHash>)stopTracking {
  id<LibOrgBouncycastleCryptoDigest> prfHash = LibOrgBouncycastleCryptoTlsTlsUtils_cloneHashWithShort_withLibOrgBouncycastleCryptoDigest_([((JavaLangShort *) nil_chk(prfHashAlgorithm_)) shortValue], (id<LibOrgBouncycastleCryptoDigest>) cast_check([((JavaUtilHashtable *) nil_chk(hashes_)) getWithId:prfHashAlgorithm_], LibOrgBouncycastleCryptoDigest_class_()));
  if (buf_ != nil) {
    [buf_ updateDigestWithLibOrgBouncycastleCryptoDigest:prfHash];
  }
  LibOrgBouncycastleCryptoTlsDeferredHash *result = new_LibOrgBouncycastleCryptoTlsDeferredHash_initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_(prfHashAlgorithm_, prfHash);
  [result init__WithLibOrgBouncycastleCryptoTlsTlsContext:context_];
  return result;
}

- (id<LibOrgBouncycastleCryptoDigest>)forkPRFHash {
  [self checkStopBuffering];
  if (buf_ != nil) {
    id<LibOrgBouncycastleCryptoDigest> prfHash = LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_([((JavaLangShort *) nil_chk(prfHashAlgorithm_)) shortValue]);
    [((LibOrgBouncycastleCryptoTlsDigestInputBuffer *) nil_chk(buf_)) updateDigestWithLibOrgBouncycastleCryptoDigest:prfHash];
    return prfHash;
  }
  return LibOrgBouncycastleCryptoTlsTlsUtils_cloneHashWithShort_withLibOrgBouncycastleCryptoDigest_([((JavaLangShort *) nil_chk(prfHashAlgorithm_)) shortValue], (id<LibOrgBouncycastleCryptoDigest>) cast_check([((JavaUtilHashtable *) nil_chk(hashes_)) getWithId:prfHashAlgorithm_], LibOrgBouncycastleCryptoDigest_class_()));
}

- (IOSByteArray *)getFinalHashWithShort:(jshort)hashAlgorithm {
  id<LibOrgBouncycastleCryptoDigest> d = (id<LibOrgBouncycastleCryptoDigest>) cast_check([((JavaUtilHashtable *) nil_chk(hashes_)) getWithId:LibOrgBouncycastleUtilShorts_valueOfWithShort_(hashAlgorithm)], LibOrgBouncycastleCryptoDigest_class_());
  if (d == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"HashAlgorithmUtil.", LibOrgBouncycastleCryptoTlsHashAlgorithm_getTextWithShort_(hashAlgorithm), @" is not being tracked"));
  }
  d = LibOrgBouncycastleCryptoTlsTlsUtils_cloneHashWithShort_withLibOrgBouncycastleCryptoDigest_(hashAlgorithm, d);
  if (buf_ != nil) {
    [buf_ updateDigestWithLibOrgBouncycastleCryptoDigest:d];
  }
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(d)) getDigestSize]];
  [d doFinalWithByteArray:bs withInt:0];
  return bs;
}

- (NSString *)getAlgorithmName {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Use fork() to get a definite Digest");
}

- (jint)getDigestSize {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Use fork() to get a definite Digest");
}

- (void)updateWithByte:(jbyte)input {
  if (buf_ != nil) {
    [buf_ writeWithInt:input];
    return;
  }
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(hashes_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    id<LibOrgBouncycastleCryptoDigest> hash_ = (id<LibOrgBouncycastleCryptoDigest>) cast_check([e nextElement], LibOrgBouncycastleCryptoDigest_class_());
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(hash_)) updateWithByte:input];
  }
}

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)len {
  if (buf_ != nil) {
    [buf_ writeWithByteArray:input withInt:inOff withInt:len];
    return;
  }
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(hashes_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    id<LibOrgBouncycastleCryptoDigest> hash_ = (id<LibOrgBouncycastleCryptoDigest>) cast_check([e nextElement], LibOrgBouncycastleCryptoDigest_class_());
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(hash_)) updateWithByteArray:input withInt:inOff withInt:len];
  }
}

- (jint)doFinalWithByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Use fork() to get a definite Digest");
}

- (void)reset {
  if (buf_ != nil) {
    [buf_ reset];
    return;
  }
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(hashes_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    id<LibOrgBouncycastleCryptoDigest> hash_ = (id<LibOrgBouncycastleCryptoDigest>) cast_check([e nextElement], LibOrgBouncycastleCryptoDigest_class_());
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(hash_)) reset];
  }
}

- (void)checkStopBuffering {
  if (buf_ != nil && [((JavaUtilHashtable *) nil_chk(hashes_)) size] <= LibOrgBouncycastleCryptoTlsDeferredHash_BUFFERING_HASH_LIMIT) {
    id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(hashes_)) elements];
    while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      id<LibOrgBouncycastleCryptoDigest> hash_ = (id<LibOrgBouncycastleCryptoDigest>) cast_check([e nextElement], LibOrgBouncycastleCryptoDigest_class_());
      [((LibOrgBouncycastleCryptoTlsDigestInputBuffer *) nil_chk(buf_)) updateDigestWithLibOrgBouncycastleCryptoDigest:hash_];
    }
    self->buf_ = nil;
  }
}

- (void)checkTrackingHashWithJavaLangShort:(JavaLangShort *)hashAlgorithm {
  if (![((JavaUtilHashtable *) nil_chk(hashes_)) containsKeyWithId:hashAlgorithm]) {
    id<LibOrgBouncycastleCryptoDigest> hash_ = LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_([((JavaLangShort *) nil_chk(hashAlgorithm)) shortValue]);
    (void) [((JavaUtilHashtable *) nil_chk(hashes_)) putWithId:hashAlgorithm withId:hash_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsHandshakeHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsHandshakeHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaLangShort:withLibOrgBouncycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithLibOrgBouncycastleCryptoTlsTlsContext:);
  methods[3].selector = @selector(notifyPRFDetermined);
  methods[4].selector = @selector(trackHashAlgorithmWithShort:);
  methods[5].selector = @selector(sealHashAlgorithms);
  methods[6].selector = @selector(stopTracking);
  methods[7].selector = @selector(forkPRFHash);
  methods[8].selector = @selector(getFinalHashWithShort:);
  methods[9].selector = @selector(getAlgorithmName);
  methods[10].selector = @selector(getDigestSize);
  methods[11].selector = @selector(updateWithByte:);
  methods[12].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(doFinalWithByteArray:withInt:);
  methods[14].selector = @selector(reset);
  methods[15].selector = @selector(checkStopBuffering);
  methods[16].selector = @selector(checkTrackingHashWithJavaLangShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFERING_HASH_LIMIT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsDeferredHash_BUFFERING_HASH_LIMIT, 0x1c, -1, -1, -1, -1 },
    { "context_", "LLibOrgBouncycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "buf_", "LLibOrgBouncycastleCryptoTlsDigestInputBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashes_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prfHashAlgorithm_", "LJavaLangShort;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangShort;LLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoTlsTlsContext;", "trackHashAlgorithm", "S", "getFinalHash", "update", "B", "[BII", "doFinal", "[BI", "checkTrackingHash", "LJavaLangShort;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsDeferredHash = { "DeferredHash", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 17, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsDeferredHash;
}

@end

void LibOrgBouncycastleCryptoTlsDeferredHash_init(LibOrgBouncycastleCryptoTlsDeferredHash *self) {
  NSObject_init(self);
  self->buf_ = new_LibOrgBouncycastleCryptoTlsDigestInputBuffer_init();
  self->hashes_ = new_JavaUtilHashtable_init();
  self->prfHashAlgorithm_ = nil;
}

LibOrgBouncycastleCryptoTlsDeferredHash *new_LibOrgBouncycastleCryptoTlsDeferredHash_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsDeferredHash, init)
}

LibOrgBouncycastleCryptoTlsDeferredHash *create_LibOrgBouncycastleCryptoTlsDeferredHash_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsDeferredHash, init)
}

void LibOrgBouncycastleCryptoTlsDeferredHash_initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoTlsDeferredHash *self, JavaLangShort *prfHashAlgorithm, id<LibOrgBouncycastleCryptoDigest> prfHash) {
  NSObject_init(self);
  self->buf_ = nil;
  self->hashes_ = new_JavaUtilHashtable_init();
  self->prfHashAlgorithm_ = prfHashAlgorithm;
  (void) [self->hashes_ putWithId:prfHashAlgorithm withId:prfHash];
}

LibOrgBouncycastleCryptoTlsDeferredHash *new_LibOrgBouncycastleCryptoTlsDeferredHash_initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_(JavaLangShort *prfHashAlgorithm, id<LibOrgBouncycastleCryptoDigest> prfHash) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsDeferredHash, initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_, prfHashAlgorithm, prfHash)
}

LibOrgBouncycastleCryptoTlsDeferredHash *create_LibOrgBouncycastleCryptoTlsDeferredHash_initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_(JavaLangShort *prfHashAlgorithm, id<LibOrgBouncycastleCryptoDigest> prfHash) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsDeferredHash, initWithJavaLangShort_withLibOrgBouncycastleCryptoDigest_, prfHashAlgorithm, prfHash)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsDeferredHash)
