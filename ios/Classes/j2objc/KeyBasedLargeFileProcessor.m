//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/KeyBasedLargeFileProcessor.java
//

#include "ArmoredOutputStream.h"
#include "BouncyCastleProvider.h"
#include "CompressionAlgorithmTags.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaKeyFingerprintCalculator.h"
#include "JcaPGPObjectFactory.h"
#include "JcePGPDataEncryptorBuilder.h"
#include "JcePublicKeyDataDecryptorFactoryBuilder.h"
#include "JcePublicKeyKeyEncryptionMethodGenerator.h"
#include "KeyBasedLargeFileProcessor.h"
#include "PGPCompressedData.h"
#include "PGPCompressedDataGenerator.h"
#include "PGPEncryptedDataGenerator.h"
#include "PGPEncryptedDataList.h"
#include "PGPExampleUtil.h"
#include "PGPException.h"
#include "PGPLiteralData.h"
#include "PGPOnePassSignatureList.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyEncryptedData.h"
#include "PGPSecretKeyRingCollection.h"
#include "PGPUtil.h"
#include "PublicKeyDataDecryptorFactory.h"
#include "Streams.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "java/security/Security.h"
#include "java/util/Iterator.h"

@interface LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor ()

+ (void)decryptFileWithNSString:(NSString *)inputFileName
                   withNSString:(NSString *)keyFileName
                  withCharArray:(IOSCharArray *)passwd
                   withNSString:(NSString *)defaultFileName;

+ (void)decryptFileWithJavaIoInputStream:(JavaIoInputStream *)inArg
                   withJavaIoInputStream:(JavaIoInputStream *)keyIn
                           withCharArray:(IOSCharArray *)passwd
                            withNSString:(NSString *)defaultFileName;

+ (void)encryptFileWithNSString:(NSString *)outputFileName
                   withNSString:(NSString *)inputFileName
                   withNSString:(NSString *)encKeyFileName
                    withBoolean:(jboolean)armor
                    withBoolean:(jboolean)withIntegrityCheck;

+ (void)encryptFileWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                             withNSString:(NSString *)fileName
withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)encKey
                              withBoolean:(jboolean)armor
                              withBoolean:(jboolean)withIntegrityCheck;

@end

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_decryptFileWithNSString_withNSString_withCharArray_withNSString_(NSString *inputFileName, NSString *keyFileName, IOSCharArray *passwd, NSString *defaultFileName);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_decryptFileWithJavaIoInputStream_withJavaIoInputStream_withCharArray_withNSString_(JavaIoInputStream *inArg, JavaIoInputStream *keyIn, IOSCharArray *passwd, NSString *defaultFileName);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithNSString_withNSString_withNSString_withBoolean_withBoolean_(NSString *outputFileName, NSString *inputFileName, NSString *encKeyFileName, jboolean armor, jboolean withIntegrityCheck);

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithJavaIoOutputStream_withNSString_withLibOrgBouncycastleOpenpgpPGPPublicKey_withBoolean_withBoolean_(JavaIoOutputStream *outArg, NSString *fileName, LibOrgBouncycastleOpenpgpPGPPublicKey *encKey, jboolean armor, jboolean withIntegrityCheck);

@implementation LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)decryptFileWithNSString:(NSString *)inputFileName
                   withNSString:(NSString *)keyFileName
                  withCharArray:(IOSCharArray *)passwd
                   withNSString:(NSString *)defaultFileName {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_decryptFileWithNSString_withNSString_withCharArray_withNSString_(inputFileName, keyFileName, passwd, defaultFileName);
}

+ (void)decryptFileWithJavaIoInputStream:(JavaIoInputStream *)inArg
                   withJavaIoInputStream:(JavaIoInputStream *)keyIn
                           withCharArray:(IOSCharArray *)passwd
                            withNSString:(NSString *)defaultFileName {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_decryptFileWithJavaIoInputStream_withJavaIoInputStream_withCharArray_withNSString_(inArg, keyIn, passwd, defaultFileName);
}

+ (void)encryptFileWithNSString:(NSString *)outputFileName
                   withNSString:(NSString *)inputFileName
                   withNSString:(NSString *)encKeyFileName
                    withBoolean:(jboolean)armor
                    withBoolean:(jboolean)withIntegrityCheck {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithNSString_withNSString_withNSString_withBoolean_withBoolean_(outputFileName, inputFileName, encKeyFileName, armor, withIntegrityCheck);
}

+ (void)encryptFileWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                             withNSString:(NSString *)fileName
withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)encKey
                              withBoolean:(jboolean)armor
                              withBoolean:(jboolean)withIntegrityCheck {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithJavaIoOutputStream_withNSString_withLibOrgBouncycastleOpenpgpPGPPublicKey_withBoolean_withBoolean_(outArg, fileName, encKey, armor, withIntegrityCheck);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(decryptFileWithNSString:withNSString:withCharArray:withNSString:);
  methods[2].selector = @selector(decryptFileWithJavaIoInputStream:withJavaIoInputStream:withCharArray:withNSString:);
  methods[3].selector = @selector(encryptFileWithNSString:withNSString:withNSString:withBoolean:withBoolean:);
  methods[4].selector = @selector(encryptFileWithJavaIoOutputStream:withNSString:withLibOrgBouncycastleOpenpgpPGPPublicKey:withBoolean:withBoolean:);
  methods[5].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "decryptFile", "LNSString;LNSString;[CLNSString;", "LJavaIoIOException;LJavaSecurityNoSuchProviderException;", "LJavaIoInputStream;LJavaIoInputStream;[CLNSString;", "encryptFile", "LNSString;LNSString;LNSString;ZZ", "LJavaIoIOException;LJavaSecurityNoSuchProviderException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoOutputStream;LNSString;LLibOrgBouncycastleOpenpgpPGPPublicKey;ZZ", "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor = { "KeyBasedLargeFileProcessor", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor;
}

@end

void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_init(LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor *new_LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor, init)
}

LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor *create_LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor, init)
}

void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_decryptFileWithNSString_withNSString_withCharArray_withNSString_(NSString *inputFileName, NSString *keyFileName, IOSCharArray *passwd, NSString *defaultFileName) {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_initialize();
  JavaIoInputStream *in = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(inputFileName));
  JavaIoInputStream *keyIn = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(keyFileName));
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_decryptFileWithJavaIoInputStream_withJavaIoInputStream_withCharArray_withNSString_(in, keyIn, passwd, defaultFileName);
  [keyIn close];
  [in close];
}

void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_decryptFileWithJavaIoInputStream_withJavaIoInputStream_withCharArray_withNSString_(JavaIoInputStream *inArg, JavaIoInputStream *keyIn, IOSCharArray *passwd, NSString *defaultFileName) {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_initialize();
  inArg = LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(inArg);
  @try {
    LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *pgpF = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(inArg);
    LibOrgBouncycastleOpenpgpPGPEncryptedDataList *enc;
    id o = [pgpF nextObject];
    if ([o isKindOfClass:[LibOrgBouncycastleOpenpgpPGPEncryptedDataList class]]) {
      enc = (LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) o;
    }
    else {
      enc = (LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) cast_chk([pgpF nextObject], [LibOrgBouncycastleOpenpgpPGPEncryptedDataList class]);
    }
    id<JavaUtilIterator> it = [((LibOrgBouncycastleOpenpgpPGPEncryptedDataList *) nil_chk(enc)) getEncryptedDataObjects];
    LibOrgBouncycastleOpenpgpPGPPrivateKey *sKey = nil;
    LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *pbe = nil;
    LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection *pgpSec = new_LibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(keyIn), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
    while (sKey == nil && [((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      pbe = (LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *) cast_chk([((id<JavaUtilIterator>) nil_chk(it)) next], [LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData class]);
      sKey = LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_findSecretKeyWithLibOrgBouncycastleOpenpgpPGPSecretKeyRingCollection_withLong_withCharArray_(pgpSec, [((LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *) nil_chk(pbe)) getKeyID], passwd);
    }
    if (sKey == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"secret key for message not found.");
    }
    JavaIoInputStream *clear = [((LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *) nil_chk(pbe)) getDataStreamWithLibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyDataDecryptorFactoryBuilder_init() setProviderWithNSString:@"BC"])) buildWithLibOrgBouncycastleOpenpgpPGPPrivateKey:sKey]];
    LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *plainFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(clear);
    LibOrgBouncycastleOpenpgpPGPCompressedData *cData = (LibOrgBouncycastleOpenpgpPGPCompressedData *) cast_chk([plainFact nextObject], [LibOrgBouncycastleOpenpgpPGPCompressedData class]);
    JavaIoInputStream *compressedStream = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_([((LibOrgBouncycastleOpenpgpPGPCompressedData *) nil_chk(cData)) getDataStream]);
    LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory *pgpFact = new_LibOrgBouncycastleOpenpgpJcajceJcaPGPObjectFactory_initWithJavaIoInputStream_(compressedStream);
    id message = [pgpFact nextObject];
    if ([message isKindOfClass:[LibOrgBouncycastleOpenpgpPGPLiteralData class]]) {
      LibOrgBouncycastleOpenpgpPGPLiteralData *ld = (LibOrgBouncycastleOpenpgpPGPLiteralData *) message;
      NSString *outFileName = [((LibOrgBouncycastleOpenpgpPGPLiteralData *) nil_chk(ld)) getFileName];
      if ([((NSString *) nil_chk(outFileName)) java_length] == 0) {
        outFileName = defaultFileName;
      }
      JavaIoInputStream *unc = [ld getInputStream];
      JavaIoOutputStream *fOut = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(outFileName));
      LibOrgBouncycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(unc, fOut);
      [fOut close];
    }
    else if ([message isKindOfClass:[LibOrgBouncycastleOpenpgpPGPOnePassSignatureList class]]) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"encrypted message contains a signed message - not literal data.");
    }
    else {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"message is not a simple encrypted file - type unknown.");
    }
    if ([pbe isIntegrityProtected]) {
      if (![pbe verify]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"message failed integrity check"];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"message integrity check passed"];
      }
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"no message integrity check"];
    }
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
    if ([e getUnderlyingException] != nil) {
      [((JavaLangException *) nil_chk([e getUnderlyingException])) printStackTrace];
    }
  }
}

void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithNSString_withNSString_withNSString_withBoolean_withBoolean_(NSString *outputFileName, NSString *inputFileName, NSString *encKeyFileName, jboolean armor, jboolean withIntegrityCheck) {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_initialize();
  JavaIoOutputStream *out = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(outputFileName));
  LibOrgBouncycastleOpenpgpPGPPublicKey *encKey = LibOrgBouncycastleOpenpgpExamplesPGPExampleUtil_readPublicKeyWithNSString_(encKeyFileName);
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithJavaIoOutputStream_withNSString_withLibOrgBouncycastleOpenpgpPGPPublicKey_withBoolean_withBoolean_(out, inputFileName, encKey, armor, withIntegrityCheck);
  [out close];
}

void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithJavaIoOutputStream_withNSString_withLibOrgBouncycastleOpenpgpPGPPublicKey_withBoolean_withBoolean_(JavaIoOutputStream *outArg, NSString *fileName, LibOrgBouncycastleOpenpgpPGPPublicKey *encKey, jboolean armor, jboolean withIntegrityCheck) {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_initialize();
  if (armor) {
    outArg = new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(outArg);
  }
  @try {
    LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator *cPk = new_LibOrgBouncycastleOpenpgpPGPEncryptedDataGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPDataEncryptorBuilder_([((LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *) nil_chk([((LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePGPDataEncryptorBuilder_initWithInt_(LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAST5) setWithIntegrityPacketWithBoolean:withIntegrityCheck])) setSecureRandomWithJavaSecuritySecureRandom:new_JavaSecuritySecureRandom_init()])) setProviderWithNSString:@"BC"]);
    [cPk addMethodWithLibOrgBouncycastleOpenpgpOperatorPGPKeyEncryptionMethodGenerator:[new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePublicKeyKeyEncryptionMethodGenerator_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_(encKey) setProviderWithNSString:@"BC"]];
    JavaIoOutputStream *cOut = [cPk openWithJavaIoOutputStream:outArg withByteArray:[IOSByteArray newArrayWithLength:JreLShift32(1, 16)]];
    LibOrgBouncycastleOpenpgpPGPCompressedDataGenerator *comData = new_LibOrgBouncycastleOpenpgpPGPCompressedDataGenerator_initWithInt_(LibOrgBouncycastleBcpgCompressionAlgorithmTags_ZIP);
    LibOrgBouncycastleOpenpgpPGPUtil_writeFileToLiteralDataWithJavaIoOutputStream_withChar_withJavaIoFile_withByteArray_([comData openWithJavaIoOutputStream:cOut], LibOrgBouncycastleOpenpgpPGPLiteralData_BINARY, new_JavaIoFile_initWithNSString_(fileName), [IOSByteArray newArrayWithLength:JreLShift32(1, 16)]);
    [comData close];
    [((JavaIoOutputStream *) nil_chk(cOut)) close];
    if (armor) {
      [((JavaIoOutputStream *) nil_chk(outArg)) close];
    }
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
    if ([e getUnderlyingException] != nil) {
      [((JavaLangException *) nil_chk([e getUnderlyingException])) printStackTrace];
    }
  }
}

void LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_initialize();
  JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_LibOrgBouncycastleJceProviderBouncyCastleProvider_init());
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: KeyBasedLargeFileProcessor -e|-d [-a|ai] file [secretKeyFile passPhrase|pubKeyFile]"];
    return;
  }
  if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-e"]) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-a"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-ai"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-ia"]) {
      LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithNSString_withNSString_withNSString_withBoolean_withBoolean_(JreStrcat("$$", IOSObjectArray_Get(args, 2), @".asc"), IOSObjectArray_Get(args, 2), IOSObjectArray_Get(args, 3), true, ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) java_indexOf:'i'] > 0));
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-i"]) {
      LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithNSString_withNSString_withNSString_withBoolean_withBoolean_(JreStrcat("$$", IOSObjectArray_Get(args, 2), @".bpg"), IOSObjectArray_Get(args, 2), IOSObjectArray_Get(args, 3), false, true);
    }
    else {
      LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_encryptFileWithNSString_withNSString_withNSString_withBoolean_withBoolean_(JreStrcat("$$", IOSObjectArray_Get(args, 1), @".bpg"), IOSObjectArray_Get(args, 1), IOSObjectArray_Get(args, 2), false, false);
    }
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-d"]) {
    LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor_decryptFileWithNSString_withNSString_withCharArray_withNSString_(IOSObjectArray_Get(args, 1), IOSObjectArray_Get(args, 2), [((NSString *) nil_chk(IOSObjectArray_Get(args, 3))) java_toCharArray], JreStrcat("$$", [new_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, 1)) getName], @".out"));
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: KeyBasedLargeFileProcessor -d|-e [-a|ai] file [secretKeyFile passPhrase|pubKeyFile]"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesKeyBasedLargeFileProcessor)
