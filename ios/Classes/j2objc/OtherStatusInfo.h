//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmc/OtherStatusInfo.java
//

#ifndef OtherStatusInfo_H
#define OtherStatusInfo_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Choice.h"
#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1CmcCMCFailInfo;
@class LibOrgBouncycastleAsn1CmcExtendedFailInfo;
@class LibOrgBouncycastleAsn1CmcPendInfo;

@interface LibOrgBouncycastleAsn1CmcOtherStatusInfo : LibOrgBouncycastleAsn1ASN1Object < LibOrgBouncycastleAsn1ASN1Choice >

#pragma mark Public

+ (LibOrgBouncycastleAsn1CmcOtherStatusInfo *)getInstanceWithId:(id)obj;

- (jboolean)isExtendedFailInfo;

- (jboolean)isFailInfo;

- (jboolean)isPendingInfo;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmcCMCFailInfo:(LibOrgBouncycastleAsn1CmcCMCFailInfo *)failInfo;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmcExtendedFailInfo:(LibOrgBouncycastleAsn1CmcExtendedFailInfo *)extendedFailInfo;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1CmcPendInfo:(LibOrgBouncycastleAsn1CmcPendInfo *)pendInfo;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CmcOtherStatusInfo)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcOtherStatusInfo *LibOrgBouncycastleAsn1CmcOtherStatusInfo_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcCMCFailInfo_(LibOrgBouncycastleAsn1CmcOtherStatusInfo *self, LibOrgBouncycastleAsn1CmcCMCFailInfo *failInfo);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcOtherStatusInfo *new_LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcCMCFailInfo_(LibOrgBouncycastleAsn1CmcCMCFailInfo *failInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcOtherStatusInfo *create_LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcCMCFailInfo_(LibOrgBouncycastleAsn1CmcCMCFailInfo *failInfo);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcPendInfo_(LibOrgBouncycastleAsn1CmcOtherStatusInfo *self, LibOrgBouncycastleAsn1CmcPendInfo *pendInfo);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcOtherStatusInfo *new_LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcPendInfo_(LibOrgBouncycastleAsn1CmcPendInfo *pendInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcOtherStatusInfo *create_LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcPendInfo_(LibOrgBouncycastleAsn1CmcPendInfo *pendInfo);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcExtendedFailInfo_(LibOrgBouncycastleAsn1CmcOtherStatusInfo *self, LibOrgBouncycastleAsn1CmcExtendedFailInfo *extendedFailInfo);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcOtherStatusInfo *new_LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcExtendedFailInfo_(LibOrgBouncycastleAsn1CmcExtendedFailInfo *extendedFailInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CmcOtherStatusInfo *create_LibOrgBouncycastleAsn1CmcOtherStatusInfo_initWithLibOrgBouncycastleAsn1CmcExtendedFailInfo_(LibOrgBouncycastleAsn1CmcExtendedFailInfo *extendedFailInfo);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CmcOtherStatusInfo)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // OtherStatusInfo_H
