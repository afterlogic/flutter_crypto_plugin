//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/AbstractTlsKeyExchange.java
//

#include "AbstractTlsKeyExchange.h"
#include "AlertDescription.h"
#include "Certificate.h"
#include "DigitallySigned.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyExchangeAlgorithm.h"
#include "ProtocolVersion.h"
#include "SignatureAndHashAlgorithm.h"
#include "TlsContext.h"
#include "TlsCredentials.h"
#include "TlsFatalAlert.h"
#include "TlsUtils.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Vector.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms {
  LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange_initWithInt_withJavaUtilVector_(self, keyExchange, supportedSignatureAlgorithms);
  return self;
}

- (LibOrgBouncycastleCryptoTlsDigitallySigned *)parseSignatureWithJavaIoInputStream:(JavaIoInputStream *)input {
  LibOrgBouncycastleCryptoTlsDigitallySigned *signature = LibOrgBouncycastleCryptoTlsDigitallySigned_parseWithLibOrgBouncycastleCryptoTlsTlsContext_withJavaIoInputStream_(context_, input);
  LibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm *signatureAlgorithm = [((LibOrgBouncycastleCryptoTlsDigitallySigned *) nil_chk(signature)) getAlgorithm];
  if (signatureAlgorithm != nil) {
    LibOrgBouncycastleCryptoTlsTlsUtils_verifySupportedSignatureAlgorithmWithJavaUtilVector_withLibOrgBouncycastleCryptoTlsSignatureAndHashAlgorithm_(supportedSignatureAlgorithms_, signatureAlgorithm);
  }
  return signature;
}

- (void)init__WithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context {
  self->context_ = context;
  LibOrgBouncycastleCryptoTlsProtocolVersion *clientVersion = [((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context)) getClientVersion];
  if (LibOrgBouncycastleCryptoTlsTlsUtils_isSignatureAlgorithmsExtensionAllowedWithLibOrgBouncycastleCryptoTlsProtocolVersion_(clientVersion)) {
    if (self->supportedSignatureAlgorithms_ == nil) {
      switch (keyExchange_) {
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS:
        {
          self->supportedSignatureAlgorithms_ = LibOrgBouncycastleCryptoTlsTlsUtils_getDefaultDSSSignatureAlgorithms();
          break;
        }
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_ECDSA:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_ECDSA:
        {
          self->supportedSignatureAlgorithms_ = LibOrgBouncycastleCryptoTlsTlsUtils_getDefaultECDSASignatureAlgorithms();
          break;
        }
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_RSA:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_RSA:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA:
        {
          self->supportedSignatureAlgorithms_ = LibOrgBouncycastleCryptoTlsTlsUtils_getDefaultRSASignatureAlgorithms();
          break;
        }
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_PSK:
        case LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP:
        break;
        default:
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported key exchange algorithm");
      }
    }
  }
  else if (self->supportedSignatureAlgorithms_ != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"supported_signature_algorithms not allowed for ", clientVersion));
  }
}

- (void)processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)serverCertificate {
  if (supportedSignatureAlgorithms_ == nil) {
  }
  else {
  }
}

- (void)processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)serverCredentials {
  [self processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:[((id<LibOrgBouncycastleCryptoTlsTlsCredentials>) nil_chk(serverCredentials)) getCertificate]];
}

- (jboolean)requiresServerKeyExchange {
  return false;
}

- (IOSByteArray *)generateServerKeyExchange {
  if ([self requiresServerKeyExchange]) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  return nil;
}

- (void)skipServerKeyExchange {
  if ([self requiresServerKeyExchange]) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  if (![self requiresServerKeyExchange]) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)skipClientCredentials {
}

- (void)processClientCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)clientCertificate {
}

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsDigitallySigned;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaUtilVector:);
  methods[1].selector = @selector(parseSignatureWithJavaIoInputStream:);
  methods[2].selector = @selector(init__WithLibOrgBouncycastleCryptoTlsTlsContext:);
  methods[3].selector = @selector(processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:);
  methods[4].selector = @selector(processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:);
  methods[5].selector = @selector(requiresServerKeyExchange);
  methods[6].selector = @selector(generateServerKeyExchange);
  methods[7].selector = @selector(skipServerKeyExchange);
  methods[8].selector = @selector(processServerKeyExchangeWithJavaIoInputStream:);
  methods[9].selector = @selector(skipClientCredentials);
  methods[10].selector = @selector(processClientCertificateWithLibOrgBouncycastleCryptoTlsCertificate:);
  methods[11].selector = @selector(processClientKeyExchangeWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyExchange_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "supportedSignatureAlgorithms_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "context_", "LLibOrgBouncycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilVector;", "parseSignature", "LJavaIoInputStream;", "LJavaIoIOException;", "init", "LLibOrgBouncycastleCryptoTlsTlsContext;", "processServerCertificate", "LLibOrgBouncycastleCryptoTlsCertificate;", "processServerCredentials", "LLibOrgBouncycastleCryptoTlsTlsCredentials;", "processServerKeyExchange", "processClientCertificate", "processClientKeyExchange" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange = { "AbstractTlsKeyExchange", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x401, 12, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange;
}

@end

void LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange_initWithInt_withJavaUtilVector_(LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms) {
  NSObject_init(self);
  self->keyExchange_ = keyExchange;
  self->supportedSignatureAlgorithms_ = supportedSignatureAlgorithms;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange)
