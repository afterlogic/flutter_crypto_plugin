//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/kdf/DHKEKGenerator.java
//

#include "ASN1EncodableVector.h"
#include "ASN1Encoding.h"
#include "ASN1ObjectIdentifier.h"
#include "DEROctetString.h"
#include "DERSequence.h"
#include "DERTaggedObject.h"
#include "DHKDFParameters.h"
#include "DHKEKGenerator.h"
#include "DerivationParameters.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OutputLengthException.h"
#include "Pack.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm_;
  jint keySize_;
  IOSByteArray *z_;
  IOSByteArray *partyAInfo_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator, algorithm_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator, z_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator, partyAInfo_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator_initWithLibOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoDerivationParameters:(id<LibOrgBouncycastleCryptoDerivationParameters>)param {
  LibOrgBouncycastleCryptoAgreementKdfDHKDFParameters *params = (LibOrgBouncycastleCryptoAgreementKdfDHKDFParameters *) cast_chk(param, [LibOrgBouncycastleCryptoAgreementKdfDHKDFParameters class]);
  self->algorithm_ = [((LibOrgBouncycastleCryptoAgreementKdfDHKDFParameters *) nil_chk(params)) getAlgorithm];
  self->keySize_ = [params getKeySize];
  self->z_ = [params getZ];
  self->partyAInfo_ = [params getExtraInfo];
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return digest_;
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  if ((((IOSByteArray *) nil_chk(outArg))->size_ - len) < outOff) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too small");
  }
  jlong oBytes = len;
  jint outLen = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize];
  if (oBytes > ((JreLShift64(2LL, 32)) - 1)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Output length too large");
  }
  jint cThreshold = (jint) ((oBytes + outLen - 1) / outLen);
  IOSByteArray *dig = [IOSByteArray newArrayWithLength:[digest_ getDigestSize]];
  jint counter = 1;
  for (jint i = 0; i < cThreshold; i++) {
    [digest_ updateWithByteArray:z_ withInt:0 withInt:((IOSByteArray *) nil_chk(z_))->size_];
    LibOrgBouncycastleAsn1ASN1EncodableVector *v1 = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
    LibOrgBouncycastleAsn1ASN1EncodableVector *v2 = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
    [v2 addWithLibOrgBouncycastleAsn1ASN1Encodable:algorithm_];
    [v2 addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(LibOrgBouncycastleUtilPack_intToBigEndianWithInt_(counter))];
    [v1 addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v2)];
    if (partyAInfo_ != nil) {
      [v1 addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(true, 0, new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(partyAInfo_))];
    }
    [v1 addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withLibOrgBouncycastleAsn1ASN1Encodable_(true, 2, new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(LibOrgBouncycastleUtilPack_intToBigEndianWithInt_(keySize_)))];
    @try {
      IOSByteArray *other = [new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v1) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
      [digest_ updateWithByteArray:other withInt:0 withInt:((IOSByteArray *) nil_chk(other))->size_];
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to encode parameter info: ", [e getMessage]));
    }
    [digest_ doFinalWithByteArray:dig withInt:0];
    if (len > outLen) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dig, 0, outArg, outOff, outLen);
      outOff += outLen;
      len -= outLen;
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dig, 0, outArg, outOff, len);
    }
    counter++;
  }
  [digest_ reset];
  return (jint) oBytes;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "algorithm_", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "z_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "partyAInfo_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoDerivationParameters;", "generateBytes", "[BII", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator = { "DHKEKGenerator", "lib.org.bouncycastle.crypto.agreement.kdf", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator;
}

@end

void LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator *self, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
}

LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator *new_LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator *create_LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator, initWithLibOrgBouncycastleCryptoDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementKdfDHKEKGenerator)
