//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsPSKKeyExchange.java
//

#ifndef TlsPSKKeyExchange_H
#define TlsPSKKeyExchange_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsKeyExchange.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoParamsDHParameters;
@class LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters;
@class LibOrgBouncycastleCryptoParamsDHPublicKeyParameters;
@class LibOrgBouncycastleCryptoParamsECPrivateKeyParameters;
@class LibOrgBouncycastleCryptoParamsECPublicKeyParameters;
@class LibOrgBouncycastleCryptoParamsRSAKeyParameters;
@class LibOrgBouncycastleCryptoTlsCertificate;
@class LibOrgBouncycastleCryptoTlsCertificateRequest;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsDHVerifier;
@protocol LibOrgBouncycastleCryptoTlsTlsEncryptionCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsPSKIdentity;
@protocol LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager;

@interface LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange : LibOrgBouncycastleCryptoTlsAbstractTlsKeyExchange {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity_;
  id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager_;
  id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier_;
  LibOrgBouncycastleCryptoParamsDHParameters *dhParameters_;
  IOSIntArray *namedCurves_;
  IOSShortArray *clientECPointFormats_;
  IOSShortArray *serverECPointFormats_;
  IOSByteArray *psk_identity_hint_;
  IOSByteArray *psk_;
  LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *dhAgreePrivateKey_;
  LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *dhAgreePublicKey_;
  LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ecAgreePrivateKey_;
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ecAgreePublicKey_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *serverPublicKey_;
  LibOrgBouncycastleCryptoParamsRSAKeyParameters *rsaServerPublicKey_;
  id<LibOrgBouncycastleCryptoTlsTlsEncryptionCredentials> serverCredentials_;
  IOSByteArray *premasterSecret_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withLibOrgBouncycastleCryptoTlsTlsPSKIdentity:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)pskIdentity
withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager>)pskIdentityManager
withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters
                         withIntArray:(IOSIntArray *)namedCurves
                       withShortArray:(IOSShortArray *)clientECPointFormats
                       withShortArray:(IOSShortArray *)serverECPointFormats;

- (instancetype __nonnull)initWithInt:(jint)keyExchange
                   withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withLibOrgBouncycastleCryptoTlsTlsPSKIdentity:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)pskIdentity
withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager:(id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager>)pskIdentityManager
withLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier
withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters
                         withIntArray:(IOSIntArray *)namedCurves
                       withShortArray:(IOSShortArray *)clientECPointFormats
                       withShortArray:(IOSShortArray *)serverECPointFormats;

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)generatePremasterSecret;

- (IOSByteArray *)generateServerKeyExchange;

- (void)processClientCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerCredentialsWithLibOrgBouncycastleCryptoTlsTlsCredentials:(id<LibOrgBouncycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (jboolean)requiresServerKeyExchange;

- (void)skipServerCredentials;

- (void)validateCertificateRequestWithLibOrgBouncycastleCryptoTlsCertificateRequest:(LibOrgBouncycastleCryptoTlsCertificateRequest *)certificateRequest;

#pragma mark Protected

- (IOSByteArray *)generateOtherSecretWithInt:(jint)pskLength;

- (LibOrgBouncycastleCryptoParamsRSAKeyParameters *)validateRSAPublicKeyWithLibOrgBouncycastleCryptoParamsRSAKeyParameters:(LibOrgBouncycastleCryptoParamsRSAKeyParameters *)key;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0
                   withJavaUtilVector:(JavaUtilVector *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, pskIdentity_, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, pskIdentityManager_, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, dhVerifier_, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, dhParameters_, LibOrgBouncycastleCryptoParamsDHParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, namedCurves_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, clientECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, serverECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, psk_identity_hint_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, psk_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, dhAgreePrivateKey_, LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, dhAgreePublicKey_, LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, ecAgreePrivateKey_, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, ecAgreePublicKey_, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, serverPublicKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, rsaServerPublicKey_, LibOrgBouncycastleCryptoParamsRSAKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, serverCredentials_, id<LibOrgBouncycastleCryptoTlsTlsEncryptionCredentials>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange, premasterSecret_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager_withLibOrgBouncycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager_withLibOrgBouncycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager_withLibOrgBouncycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange *new_LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange *create_LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withLibOrgBouncycastleCryptoTlsTlsPSKIdentity_withLibOrgBouncycastleCryptoTlsTlsPSKIdentityManager_withLibOrgBouncycastleCryptoTlsTlsDHVerifier_withLibOrgBouncycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<LibOrgBouncycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, LibOrgBouncycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsPSKKeyExchange)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsPSKKeyExchange_H
