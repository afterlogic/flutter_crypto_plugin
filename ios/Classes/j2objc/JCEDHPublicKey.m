//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/JCEDHPublicKey.java
//

#include "ASN1Encodable.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "DHDomainParameters.h"
#include "DHParameter.h"
#include "DHParameters.h"
#include "DHPublicKeyParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JCEDHPublicKey.h"
#include "JcajceUtilKeyUtil.h"
#include "PKCSObjectIdentifiers.h"
#include "SubjectPublicKeyInfo.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "javax/crypto/interfaces/DHPublicKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "javax/crypto/spec/DHPublicKeySpec.h"

@interface LibOrgBouncycastleJceProviderJCEDHPublicKey () {
 @public
  JavaMathBigInteger *y_;
  JavaxCryptoSpecDHParameterSpec *dhSpec_;
  LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info_;
}

- (jboolean)isPKCSParamWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEDHPublicKey, y_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEDHPublicKey, dhSpec_, JavaxCryptoSpecDHParameterSpec *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderJCEDHPublicKey, info_, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)

__attribute__((unused)) static jboolean LibOrgBouncycastleJceProviderJCEDHPublicKey_isPKCSParamWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJCEDHPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void LibOrgBouncycastleJceProviderJCEDHPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, JavaIoObjectOutputStream *outArg);

@implementation LibOrgBouncycastleJceProviderJCEDHPublicKey

+ (jlong)serialVersionUID {
  return LibOrgBouncycastleJceProviderJCEDHPublicKey_serialVersionUID;
}

- (instancetype)initWithJavaxCryptoSpecDHPublicKeySpec:(JavaxCryptoSpecDHPublicKeySpec *)spec {
  LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithJavaxCryptoInterfacesDHPublicKey:(id<JavaxCryptoInterfacesDHPublicKey>)key {
  LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(self, key);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters:(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *)params {
  LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_(self, params);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)y
        withJavaxCryptoSpecDHParameterSpec:(JavaxCryptoSpecDHParameterSpec *)dhSpec {
  LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_(self, y, dhSpec);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info {
  LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
  return self;
}

- (NSString *)getAlgorithm {
  return @"DH";
}

- (NSString *)getFormat {
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  if (info_ != nil) {
    return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilKeyUtil_getEncodedSubjectPublicKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(info_);
  }
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilKeyUtil_getEncodedSubjectPublicKeyInfoWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement), new_LibOrgBouncycastleAsn1PkcsDHParameter_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([((JavaxCryptoSpecDHParameterSpec *) nil_chk(dhSpec_)) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk(dhSpec_)) getG], [((JavaxCryptoSpecDHParameterSpec *) nil_chk(dhSpec_)) getL])), new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(y_));
}

- (JavaxCryptoSpecDHParameterSpec *)getParams {
  return dhSpec_;
}

- (JavaMathBigInteger *)getY {
  return y_;
}

- (jboolean)isPKCSParamWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  return LibOrgBouncycastleJceProviderJCEDHPublicKey_isPKCSParamWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  LibOrgBouncycastleJceProviderJCEDHPublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  LibOrgBouncycastleJceProviderJCEDHPublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSpecDHParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxCryptoSpecDHPublicKeySpec:);
  methods[1].selector = @selector(initWithJavaxCryptoInterfacesDHPublicKey:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters:);
  methods[3].selector = @selector(initWithJavaMathBigInteger:withJavaxCryptoSpecDHParameterSpec:);
  methods[4].selector = @selector(initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[5].selector = @selector(getAlgorithm);
  methods[6].selector = @selector(getFormat);
  methods[7].selector = @selector(getEncoded);
  methods[8].selector = @selector(getParams);
  methods[9].selector = @selector(getY);
  methods[10].selector = @selector(isPKCSParamWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[11].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[12].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastleJceProviderJCEDHPublicKey_serialVersionUID, 0x18, -1, -1, -1, -1 },
    { "y_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dhSpec_", "LJavaxCryptoSpecDHParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "info_", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxCryptoSpecDHPublicKeySpec;", "LJavaxCryptoInterfacesDHPublicKey;", "LLibOrgBouncycastleCryptoParamsDHPublicKeyParameters;", "LJavaMathBigInteger;LJavaxCryptoSpecDHParameterSpec;", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "isPKCSParam", "LLibOrgBouncycastleAsn1ASN1Sequence;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderJCEDHPublicKey = { "JCEDHPublicKey", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderJCEDHPublicKey;
}

@end

void LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, JavaxCryptoSpecDHPublicKeySpec *spec) {
  NSObject_init(self);
  self->y_ = [((JavaxCryptoSpecDHPublicKeySpec *) nil_chk(spec)) getY];
  self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([spec getP], [spec getG]);
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *new_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(JavaxCryptoSpecDHPublicKeySpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithJavaxCryptoSpecDHPublicKeySpec_, spec)
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *create_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaxCryptoSpecDHPublicKeySpec_(JavaxCryptoSpecDHPublicKeySpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithJavaxCryptoSpecDHPublicKeySpec_, spec)
}

void LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, id<JavaxCryptoInterfacesDHPublicKey> key) {
  NSObject_init(self);
  self->y_ = [((id<JavaxCryptoInterfacesDHPublicKey>) nil_chk(key)) getY];
  self->dhSpec_ = [key getParams];
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *new_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(id<JavaxCryptoInterfacesDHPublicKey> key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithJavaxCryptoInterfacesDHPublicKey_, key)
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *create_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaxCryptoInterfacesDHPublicKey_(id<JavaxCryptoInterfacesDHPublicKey> key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithJavaxCryptoInterfacesDHPublicKey_, key)
}

void LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *params) {
  NSObject_init(self);
  self->y_ = [((LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *) nil_chk(params)) getY];
  self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([params getParameters])) getP], [((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([params getParameters])) getG], [((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([params getParameters])) getL]);
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *new_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_, params)
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *create_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_, params)
}

void LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, JavaMathBigInteger *y, JavaxCryptoSpecDHParameterSpec *dhSpec) {
  NSObject_init(self);
  self->y_ = y;
  self->dhSpec_ = dhSpec;
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *new_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_(JavaMathBigInteger *y, JavaxCryptoSpecDHParameterSpec *dhSpec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_, y, dhSpec)
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *create_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_(JavaMathBigInteger *y, JavaxCryptoSpecDHParameterSpec *dhSpec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithJavaMathBigInteger_withJavaxCryptoSpecDHParameterSpec_, y, dhSpec)
}

void LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  NSObject_init(self);
  self->info_ = info;
  LibOrgBouncycastleAsn1ASN1Integer *derY;
  @try {
    derY = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) parsePublicKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid info structure in DH public key");
  }
  self->y_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue];
  LibOrgBouncycastleAsn1ASN1Sequence *seq = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getAlgorithmId])) getParameters]);
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *id_ = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getAlgorithmId])) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(id_)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement)] || LibOrgBouncycastleJceProviderJCEDHPublicKey_isPKCSParamWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq)) {
    LibOrgBouncycastleAsn1PkcsDHParameter *params = LibOrgBouncycastleAsn1PkcsDHParameter_getInstanceWithId_(seq);
    if ([((LibOrgBouncycastleAsn1PkcsDHParameter *) nil_chk(params)) getL] != nil) {
      self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_([params getP], [params getG], [((JavaMathBigInteger *) nil_chk([params getL])) intValue]);
    }
    else {
      self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([params getP], [params getG]);
    }
  }
  else if ([id_ isEqual:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, dhpublicnumber)]) {
    LibOrgBouncycastleAsn1X9DHDomainParameters *params = LibOrgBouncycastleAsn1X9DHDomainParameters_getInstanceWithId_(seq);
    self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk([((LibOrgBouncycastleAsn1X9DHDomainParameters *) nil_chk(params)) getP])) getValue], [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk([params getG])) getValue]);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unknown algorithm type: ", id_));
  }
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *new_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, info)
}

LibOrgBouncycastleJceProviderJCEDHPublicKey *create_LibOrgBouncycastleJceProviderJCEDHPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderJCEDHPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, info)
}

jboolean LibOrgBouncycastleJceProviderJCEDHPublicKey_isPKCSParamWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] == 2) {
    return true;
  }
  if ([seq size] > 3) {
    return false;
  }
  LibOrgBouncycastleAsn1ASN1Integer *l = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:2]);
  LibOrgBouncycastleAsn1ASN1Integer *p = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:0]);
  if ([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(l)) getValue])) compareToWithId:JavaMathBigInteger_valueOfWithLong_([((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(p)) getValue])) bitLength])] > 0) {
    return false;
  }
  return true;
}

void LibOrgBouncycastleJceProviderJCEDHPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, JavaIoObjectInputStream *inArg) {
  self->y_ = (JavaMathBigInteger *) cast_chk([((JavaIoObjectInputStream *) nil_chk(inArg)) readObject], [JavaMathBigInteger class]);
  self->dhSpec_ = new_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_((JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]), (JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]), [inArg readInt]);
}

void LibOrgBouncycastleJceProviderJCEDHPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJceProviderJCEDHPublicKey *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeObjectWithId:[self getY]];
  [outArg writeObjectWithId:[((JavaxCryptoSpecDHParameterSpec *) nil_chk(self->dhSpec_)) getP]];
  [outArg writeObjectWithId:[((JavaxCryptoSpecDHParameterSpec *) nil_chk(self->dhSpec_)) getG]];
  [outArg writeIntWithInt:[((JavaxCryptoSpecDHParameterSpec *) nil_chk(self->dhSpec_)) getL]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderJCEDHPublicKey)
