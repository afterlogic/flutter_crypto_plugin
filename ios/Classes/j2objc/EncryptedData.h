//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/pkcs/EncryptedData.java
//

#ifndef EncryptedData_H
#define EncryptedData_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1ASN1OctetString;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1Sequence;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1PkcsEncryptedData : LibOrgBouncycastleAsn1ASN1Object {
 @public
  LibOrgBouncycastleAsn1ASN1Sequence *data_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)contentType
                           withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)encryptionAlgorithm
                                     withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)content;

- (LibOrgBouncycastleAsn1ASN1OctetString *)getContent;

- (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getContentType;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getEncryptionAlgorithm;

+ (LibOrgBouncycastleAsn1PkcsEncryptedData *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1PkcsEncryptedData)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1PkcsEncryptedData, data_, LibOrgBouncycastleAsn1ASN1Sequence *)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1PkcsEncryptedData *LibOrgBouncycastleAsn1PkcsEncryptedData_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1PkcsEncryptedData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1PkcsEncryptedData *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *encryptionAlgorithm, id<LibOrgBouncycastleAsn1ASN1Encodable> content);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1PkcsEncryptedData *new_LibOrgBouncycastleAsn1PkcsEncryptedData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *encryptionAlgorithm, id<LibOrgBouncycastleAsn1ASN1Encodable> content) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1PkcsEncryptedData *create_LibOrgBouncycastleAsn1PkcsEncryptedData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *encryptionAlgorithm, id<LibOrgBouncycastleAsn1ASN1Encodable> content);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1PkcsEncryptedData)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // EncryptedData_H
