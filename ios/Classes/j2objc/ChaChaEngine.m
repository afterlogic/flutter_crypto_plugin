//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/ChaChaEngine.java
//

#include "ChaChaEngine.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pack.h"
#include "Salsa20Engine.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@implementation LibOrgBouncycastleCryptoEnginesChaChaEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesChaChaEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)rounds {
  LibOrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(self, rounds);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$I", @"ChaCha", rounds_);
}

- (void)advanceCounterWithLong:(jlong)diff {
  jint hi = (jint) (JreURShift64(diff, 32));
  jint lo = (jint) diff;
  if (hi > 0) {
    *IOSIntArray_GetRef(nil_chk(engineState_), 13) += hi;
  }
  jint oldState = IOSIntArray_Get(nil_chk(engineState_), 12);
  *IOSIntArray_GetRef(engineState_, 12) += lo;
  if (oldState != 0 && IOSIntArray_Get(engineState_, 12) < oldState) {
    (*IOSIntArray_GetRef(engineState_, 13))++;
  }
}

- (void)advanceCounter {
  if (++(*IOSIntArray_GetRef(nil_chk(engineState_), 12)) == 0) {
    ++(*IOSIntArray_GetRef(engineState_, 13));
  }
}

- (void)retreatCounterWithLong:(jlong)diff {
  jint hi = (jint) (JreURShift64(diff, 32));
  jint lo = (jint) diff;
  if (hi != 0) {
    if ((IOSIntArray_Get(nil_chk(engineState_), 13) & (jlong) 0xffffffffLL) >= (hi & (jlong) 0xffffffffLL)) {
      *IOSIntArray_GetRef(engineState_, 13) -= hi;
    }
    else {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to reduce counter past zero.");
    }
  }
  if ((IOSIntArray_Get(nil_chk(engineState_), 12) & (jlong) 0xffffffffLL) >= (lo & (jlong) 0xffffffffLL)) {
    *IOSIntArray_GetRef(engineState_, 12) -= lo;
  }
  else {
    if (IOSIntArray_Get(engineState_, 13) != 0) {
      --(*IOSIntArray_GetRef(engineState_, 13));
      *IOSIntArray_GetRef(engineState_, 12) -= lo;
    }
    else {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to reduce counter past zero.");
    }
  }
}

- (void)retreatCounter {
  if (IOSIntArray_Get(nil_chk(engineState_), 12) == 0 && IOSIntArray_Get(engineState_, 13) == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to reduce counter past zero.");
  }
  if (--(*IOSIntArray_GetRef(engineState_, 12)) == -1) {
    --(*IOSIntArray_GetRef(engineState_, 13));
  }
}

- (jlong)getCounter {
  return (JreLShift64((jlong) IOSIntArray_Get(nil_chk(engineState_), 13), 32)) | (IOSIntArray_Get(engineState_, 12) & (jlong) 0xffffffffLL);
}

- (void)resetCounter {
  *IOSIntArray_GetRef(nil_chk(engineState_), 12) = *IOSIntArray_GetRef(engineState_, 13) = 0;
}

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes {
  if (keyBytes != nil) {
    if ((keyBytes->size_ != 16) && (keyBytes->size_ != 32)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" requires 128 bit or 256 bit key"));
    }
    [self packTauOrSigmaWithInt:keyBytes->size_ withIntArray:engineState_ withInt:0];
    LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(keyBytes, 0, engineState_, 4, 4);
    LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(keyBytes, keyBytes->size_ - 16, engineState_, 8, 4);
  }
  LibOrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(ivBytes, 0, engineState_, 14, 2);
}

- (void)generateKeyStreamWithByteArray:(IOSByteArray *)output {
  LibOrgBouncycastleCryptoEnginesChaChaEngine_chachaCoreWithInt_withIntArray_withIntArray_(rounds_, engineState_, x_);
  LibOrgBouncycastleUtilPack_intToLittleEndianWithIntArray_withByteArray_withInt_(x_, output, 0);
}

+ (void)chachaCoreWithInt:(jint)rounds
             withIntArray:(IOSIntArray *)input
             withIntArray:(IOSIntArray *)x {
  LibOrgBouncycastleCryptoEnginesChaChaEngine_chachaCoreWithInt_withIntArray_withIntArray_(rounds, input, x);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(advanceCounterWithLong:);
  methods[4].selector = @selector(advanceCounter);
  methods[5].selector = @selector(retreatCounterWithLong:);
  methods[6].selector = @selector(retreatCounter);
  methods[7].selector = @selector(getCounter);
  methods[8].selector = @selector(resetCounter);
  methods[9].selector = @selector(setKeyWithByteArray:withByteArray:);
  methods[10].selector = @selector(generateKeyStreamWithByteArray:);
  methods[11].selector = @selector(chachaCoreWithInt:withIntArray:withIntArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "advanceCounter", "J", "retreatCounter", "setKey", "[B[B", "generateKeyStream", "[B", "chachaCore", "I[I[I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesChaChaEngine = { "ChaChaEngine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, NULL, 7, 0x1, 12, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesChaChaEngine;
}

@end

void LibOrgBouncycastleCryptoEnginesChaChaEngine_init(LibOrgBouncycastleCryptoEnginesChaChaEngine *self) {
  LibOrgBouncycastleCryptoEnginesSalsa20Engine_init(self);
}

LibOrgBouncycastleCryptoEnginesChaChaEngine *new_LibOrgBouncycastleCryptoEnginesChaChaEngine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesChaChaEngine, init)
}

LibOrgBouncycastleCryptoEnginesChaChaEngine *create_LibOrgBouncycastleCryptoEnginesChaChaEngine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesChaChaEngine, init)
}

void LibOrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(LibOrgBouncycastleCryptoEnginesChaChaEngine *self, jint rounds) {
  LibOrgBouncycastleCryptoEnginesSalsa20Engine_initWithInt_(self, rounds);
}

LibOrgBouncycastleCryptoEnginesChaChaEngine *new_LibOrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(jint rounds) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesChaChaEngine, initWithInt_, rounds)
}

LibOrgBouncycastleCryptoEnginesChaChaEngine *create_LibOrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(jint rounds) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesChaChaEngine, initWithInt_, rounds)
}

void LibOrgBouncycastleCryptoEnginesChaChaEngine_chachaCoreWithInt_withIntArray_withIntArray_(jint rounds, IOSIntArray *input, IOSIntArray *x) {
  LibOrgBouncycastleCryptoEnginesChaChaEngine_initialize();
  if (((IOSIntArray *) nil_chk(input))->size_ != 16) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (((IOSIntArray *) nil_chk(x))->size_ != 16) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (rounds % 2 != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of rounds must be even");
  }
  jint x00 = IOSIntArray_Get(input, 0);
  jint x01 = IOSIntArray_Get(input, 1);
  jint x02 = IOSIntArray_Get(input, 2);
  jint x03 = IOSIntArray_Get(input, 3);
  jint x04 = IOSIntArray_Get(input, 4);
  jint x05 = IOSIntArray_Get(input, 5);
  jint x06 = IOSIntArray_Get(input, 6);
  jint x07 = IOSIntArray_Get(input, 7);
  jint x08 = IOSIntArray_Get(input, 8);
  jint x09 = IOSIntArray_Get(input, 9);
  jint x10 = IOSIntArray_Get(input, 10);
  jint x11 = IOSIntArray_Get(input, 11);
  jint x12 = IOSIntArray_Get(input, 12);
  jint x13 = IOSIntArray_Get(input, 13);
  jint x14 = IOSIntArray_Get(input, 14);
  jint x15 = IOSIntArray_Get(input, 15);
  for (jint i = rounds; i > 0; i -= 2) {
    x00 += x04;
    x12 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x12 ^ x00, 16);
    x08 += x12;
    x04 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x04 ^ x08, 12);
    x00 += x04;
    x12 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x12 ^ x00, 8);
    x08 += x12;
    x04 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x04 ^ x08, 7);
    x01 += x05;
    x13 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x13 ^ x01, 16);
    x09 += x13;
    x05 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x05 ^ x09, 12);
    x01 += x05;
    x13 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x13 ^ x01, 8);
    x09 += x13;
    x05 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x05 ^ x09, 7);
    x02 += x06;
    x14 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x14 ^ x02, 16);
    x10 += x14;
    x06 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x06 ^ x10, 12);
    x02 += x06;
    x14 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x14 ^ x02, 8);
    x10 += x14;
    x06 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x06 ^ x10, 7);
    x03 += x07;
    x15 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x15 ^ x03, 16);
    x11 += x15;
    x07 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x07 ^ x11, 12);
    x03 += x07;
    x15 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x15 ^ x03, 8);
    x11 += x15;
    x07 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x07 ^ x11, 7);
    x00 += x05;
    x15 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x15 ^ x00, 16);
    x10 += x15;
    x05 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x05 ^ x10, 12);
    x00 += x05;
    x15 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x15 ^ x00, 8);
    x10 += x15;
    x05 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x05 ^ x10, 7);
    x01 += x06;
    x12 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x12 ^ x01, 16);
    x11 += x12;
    x06 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x06 ^ x11, 12);
    x01 += x06;
    x12 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x12 ^ x01, 8);
    x11 += x12;
    x06 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x06 ^ x11, 7);
    x02 += x07;
    x13 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x13 ^ x02, 16);
    x08 += x13;
    x07 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x07 ^ x08, 12);
    x02 += x07;
    x13 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x13 ^ x02, 8);
    x08 += x13;
    x07 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x07 ^ x08, 7);
    x03 += x04;
    x14 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x14 ^ x03, 16);
    x09 += x14;
    x04 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x04 ^ x09, 12);
    x03 += x04;
    x14 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x14 ^ x03, 8);
    x09 += x14;
    x04 = LibOrgBouncycastleCryptoEnginesSalsa20Engine_rotlWithInt_withInt_(x04 ^ x09, 7);
  }
  *IOSIntArray_GetRef(x, 0) = x00 + IOSIntArray_Get(input, 0);
  *IOSIntArray_GetRef(x, 1) = x01 + IOSIntArray_Get(input, 1);
  *IOSIntArray_GetRef(x, 2) = x02 + IOSIntArray_Get(input, 2);
  *IOSIntArray_GetRef(x, 3) = x03 + IOSIntArray_Get(input, 3);
  *IOSIntArray_GetRef(x, 4) = x04 + IOSIntArray_Get(input, 4);
  *IOSIntArray_GetRef(x, 5) = x05 + IOSIntArray_Get(input, 5);
  *IOSIntArray_GetRef(x, 6) = x06 + IOSIntArray_Get(input, 6);
  *IOSIntArray_GetRef(x, 7) = x07 + IOSIntArray_Get(input, 7);
  *IOSIntArray_GetRef(x, 8) = x08 + IOSIntArray_Get(input, 8);
  *IOSIntArray_GetRef(x, 9) = x09 + IOSIntArray_Get(input, 9);
  *IOSIntArray_GetRef(x, 10) = x10 + IOSIntArray_Get(input, 10);
  *IOSIntArray_GetRef(x, 11) = x11 + IOSIntArray_Get(input, 11);
  *IOSIntArray_GetRef(x, 12) = x12 + IOSIntArray_Get(input, 12);
  *IOSIntArray_GetRef(x, 13) = x13 + IOSIntArray_Get(input, 13);
  *IOSIntArray_GetRef(x, 14) = x14 + IOSIntArray_Get(input, 14);
  *IOSIntArray_GetRef(x, 15) = x15 + IOSIntArray_Get(input, 15);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesChaChaEngine)
