//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/io/CipherOutputStream.java
//

#include "CipherOutputStream.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextIOException.h"
#include "J2ObjC_source.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/security/GeneralSecurityException.h"
#include "javax/crypto/Cipher.h"

@interface LibOrgBouncycastleJcajceIoCipherOutputStream () {
 @public
  JavaxCryptoCipher *cipher_;
  IOSByteArray *oneByte_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceIoCipherOutputStream, cipher_, JavaxCryptoCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceIoCipherOutputStream, oneByte_, IOSByteArray *)

@implementation LibOrgBouncycastleJcajceIoCipherOutputStream

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)output
                     withJavaxCryptoCipher:(JavaxCryptoCipher *)cipher {
  LibOrgBouncycastleJcajceIoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(self, output, cipher);
  return self;
}

- (void)writeWithInt:(jint)b {
  *IOSByteArray_GetRef(nil_chk(oneByte_), 0) = (jbyte) b;
  [self writeWithByteArray:oneByte_ withInt:0 withInt:1];
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  IOSByteArray *outData = [((JavaxCryptoCipher *) nil_chk(cipher_)) updateWithByteArray:b withInt:off withInt:len];
  if (outData != nil) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:outData];
  }
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(out_)) flush];
}

- (void)close {
  JavaIoIOException *error = nil;
  @try {
    IOSByteArray *outData = [((JavaxCryptoCipher *) nil_chk(cipher_)) doFinal];
    if (outData != nil) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:outData];
    }
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    error = new_LibOrgBouncycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(@"Error during cipher finalisation", e);
  }
  @catch (JavaLangException *e) {
    error = new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Error closing stream: ", e));
  }
  @try {
    [self flush];
    [((JavaIoOutputStream *) nil_chk(out_)) close];
  }
  @catch (JavaIoIOException *e) {
    if (error == nil) {
      error = e;
    }
  }
  if (error != nil) {
    @throw error;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:withJavaxCryptoCipher:);
  methods[1].selector = @selector(writeWithInt:);
  methods[2].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(flush);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipher_", "LJavaxCryptoCipher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "oneByte_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;LJavaxCryptoCipher;", "write", "I", "LJavaIoIOException;", "[BII" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceIoCipherOutputStream = { "CipherOutputStream", "lib.org.bouncycastle.jcajce.io", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceIoCipherOutputStream;
}

@end

void LibOrgBouncycastleJcajceIoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(LibOrgBouncycastleJcajceIoCipherOutputStream *self, JavaIoOutputStream *output, JavaxCryptoCipher *cipher) {
  JavaIoFilterOutputStream_initWithJavaIoOutputStream_(self, output);
  self->oneByte_ = [IOSByteArray newArrayWithLength:1];
  self->cipher_ = cipher;
}

LibOrgBouncycastleJcajceIoCipherOutputStream *new_LibOrgBouncycastleJcajceIoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(JavaIoOutputStream *output, JavaxCryptoCipher *cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceIoCipherOutputStream, initWithJavaIoOutputStream_withJavaxCryptoCipher_, output, cipher)
}

LibOrgBouncycastleJcajceIoCipherOutputStream *create_LibOrgBouncycastleJcajceIoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(JavaIoOutputStream *output, JavaxCryptoCipher *cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceIoCipherOutputStream, initWithJavaIoOutputStream_withJavaxCryptoCipher_, output, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceIoCipherOutputStream)
