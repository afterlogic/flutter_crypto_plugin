//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/DSADigestSigner.java
//

#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "DSA.h"
#include "DSADigestSigner.h"
#include "DSAEncoding.h"
#include "DSAExt.h"
#include "Digest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "StandardDSAEncoding.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoSignersDSADigestSigner () {
 @public
  id<LibOrgBouncycastleCryptoDSA> dsa_;
  id<LibOrgBouncycastleCryptoDigest> digest_;
  id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding_;
  jboolean forSigning_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersDSADigestSigner, dsa_, id<LibOrgBouncycastleCryptoDSA>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersDSADigestSigner, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersDSADigestSigner, encoding_, id<LibOrgBouncycastleCryptoSignersDSAEncoding>)

@implementation LibOrgBouncycastleCryptoSignersDSADigestSigner

- (instancetype)initWithLibOrgBouncycastleCryptoDSA:(id<LibOrgBouncycastleCryptoDSA>)dsa
                 withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(self, dsa, digest);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoDSAExt:(id<LibOrgBouncycastleCryptoDSAExt>)dsa
                    withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest
        withLibOrgBouncycastleCryptoSignersDSAEncoding:(id<LibOrgBouncycastleCryptoSignersDSAEncoding>)encoding {
  LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_(self, dsa, digest, encoding);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters {
  self->forSigning_ = forSigning;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *k;
  if ([parameters isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    k = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithRandom *) parameters))) getParameters], [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  else {
    k = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk(parameters, [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  if (forSigning && ![((LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(k)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Signing Requires Private Key.");
  }
  if (!forSigning && [((LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(k)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Verification Requires Public Key.");
  }
  [self reset];
  [((id<LibOrgBouncycastleCryptoDSA>) nil_chk(dsa_)) init__WithBoolean:forSigning withLibOrgBouncycastleCryptoCipherParameters:parameters];
}

- (void)updateWithByte:(jbyte)input {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:input];
}

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)length {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:input withInt:inOff withInt:length];
}

- (IOSByteArray *)generateSignature {
  if (!forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DSADigestSigner not initialised for signature generation.");
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [digest_ doFinalWithByteArray:hash_ withInt:0];
  IOSObjectArray *sig = [((id<LibOrgBouncycastleCryptoDSA>) nil_chk(dsa_)) generateSignatureWithByteArray:hash_];
  @try {
    return [((id<LibOrgBouncycastleCryptoSignersDSAEncoding>) nil_chk(encoding_)) encodeWithJavaMathBigInteger:[self getOrder] withJavaMathBigInteger:IOSObjectArray_Get(nil_chk(sig), 0) withJavaMathBigInteger:IOSObjectArray_Get(sig, 1)];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unable to encode signature");
  }
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  if (forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DSADigestSigner not initialised for verification");
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [digest_ doFinalWithByteArray:hash_ withInt:0];
  @try {
    IOSObjectArray *sig = [((id<LibOrgBouncycastleCryptoSignersDSAEncoding>) nil_chk(encoding_)) decodeWithJavaMathBigInteger:[self getOrder] withByteArray:signature];
    return [((id<LibOrgBouncycastleCryptoDSA>) nil_chk(dsa_)) verifySignatureWithByteArray:hash_ withJavaMathBigInteger:IOSObjectArray_Get(nil_chk(sig), 0) withJavaMathBigInteger:IOSObjectArray_Get(sig, 1)];
  }
  @catch (JavaLangException *e) {
    return false;
  }
}

- (void)reset {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
}

- (JavaMathBigInteger *)getOrder {
  return [LibOrgBouncycastleCryptoDSAExt_class_() isInstance:dsa_] ? [((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(((id<LibOrgBouncycastleCryptoDSAExt>) cast_check(dsa_, LibOrgBouncycastleCryptoDSAExt_class_())))) getOrder] : nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDSA:withLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoDSAExt:withLibOrgBouncycastleCryptoDigest:withLibOrgBouncycastleCryptoSignersDSAEncoding:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(updateWithByte:);
  methods[4].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(generateSignature);
  methods[6].selector = @selector(verifySignatureWithByteArray:);
  methods[7].selector = @selector(reset);
  methods[8].selector = @selector(getOrder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dsa_", "LLibOrgBouncycastleCryptoDSA;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encoding_", "LLibOrgBouncycastleCryptoSignersDSAEncoding;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forSigning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDSA;LLibOrgBouncycastleCryptoDigest;", "LLibOrgBouncycastleCryptoDSAExt;LLibOrgBouncycastleCryptoDigest;LLibOrgBouncycastleCryptoSignersDSAEncoding;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "update", "B", "[BII", "verifySignature", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoSignersDSADigestSigner = { "DSADigestSigner", "lib.org.bouncycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoSignersDSADigestSigner;
}

@end

void LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoSignersDSADigestSigner *self, id<LibOrgBouncycastleCryptoDSA> dsa, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->dsa_ = dsa;
  self->digest_ = digest;
  self->encoding_ = JreLoadStatic(LibOrgBouncycastleCryptoSignersStandardDSAEncoding, INSTANCE);
}

LibOrgBouncycastleCryptoSignersDSADigestSigner *new_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDSA> dsa, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersDSADigestSigner, initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_, dsa, digest)
}

LibOrgBouncycastleCryptoSignersDSADigestSigner *create_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDSA> dsa, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersDSADigestSigner, initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_, dsa, digest)
}

void LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_(LibOrgBouncycastleCryptoSignersDSADigestSigner *self, id<LibOrgBouncycastleCryptoDSAExt> dsa, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) {
  NSObject_init(self);
  self->dsa_ = dsa;
  self->digest_ = digest;
  self->encoding_ = encoding;
}

LibOrgBouncycastleCryptoSignersDSADigestSigner *new_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_(id<LibOrgBouncycastleCryptoDSAExt> dsa, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersDSADigestSigner, initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_, dsa, digest, encoding)
}

LibOrgBouncycastleCryptoSignersDSADigestSigner *create_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_(id<LibOrgBouncycastleCryptoDSAExt> dsa, id<LibOrgBouncycastleCryptoDigest> digest, id<LibOrgBouncycastleCryptoSignersDSAEncoding> encoding) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersDSADigestSigner, initWithLibOrgBouncycastleCryptoDSAExt_withLibOrgBouncycastleCryptoDigest_withLibOrgBouncycastleCryptoSignersDSAEncoding_, dsa, digest, encoding)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoSignersDSADigestSigner)
