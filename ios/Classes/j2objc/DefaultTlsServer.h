//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsServer.java
//

#ifndef DefaultTlsServer_H
#define DefaultTlsServer_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsServer.h"
#include "J2ObjC_header.h"

@class IOSIntArray;
@class LibOrgBouncycastleCryptoParamsDHParameters;
@protocol LibOrgBouncycastleCryptoTlsTlsCipherFactory;
@protocol LibOrgBouncycastleCryptoTlsTlsCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsEncryptionCredentials;
@protocol LibOrgBouncycastleCryptoTlsTlsKeyExchange;
@protocol LibOrgBouncycastleCryptoTlsTlsSignerCredentials;

@interface LibOrgBouncycastleCryptoTlsDefaultTlsServer : LibOrgBouncycastleCryptoTlsAbstractTlsServer

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory:(id<LibOrgBouncycastleCryptoTlsTlsCipherFactory>)cipherFactory;

- (id<LibOrgBouncycastleCryptoTlsTlsCredentials>)getCredentials;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)getKeyExchange;

#pragma mark Protected

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createDHEKeyExchangeWithInt:(jint)keyExchange;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createDHKeyExchangeWithInt:(jint)keyExchange;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createECDHEKeyExchangeWithInt:(jint)keyExchange;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createECDHKeyExchangeWithInt:(jint)keyExchange;

- (id<LibOrgBouncycastleCryptoTlsTlsKeyExchange>)createRSAKeyExchange;

- (IOSIntArray *)getCipherSuites;

- (LibOrgBouncycastleCryptoParamsDHParameters *)getDHParameters;

- (id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>)getDSASignerCredentials;

- (id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>)getECDSASignerCredentials;

- (id<LibOrgBouncycastleCryptoTlsTlsEncryptionCredentials>)getRSAEncryptionCredentials;

- (id<LibOrgBouncycastleCryptoTlsTlsSignerCredentials>)getRSASignerCredentials;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDefaultTlsServer)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsServer_init(LibOrgBouncycastleCryptoTlsDefaultTlsServer *self);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsServer_initWithLibOrgBouncycastleCryptoTlsTlsCipherFactory_(LibOrgBouncycastleCryptoTlsDefaultTlsServer *self, id<LibOrgBouncycastleCryptoTlsTlsCipherFactory> cipherFactory);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDefaultTlsServer)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DefaultTlsServer_H
