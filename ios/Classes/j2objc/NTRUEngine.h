//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/ntru/NTRUEngine.java
//

#ifndef NTRUEngine_H
#define NTRUEngine_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricBlockCipher.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;
@protocol LibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial;

@interface LibOrgBouncycastlePqcCryptoNtruNTRUEngine : NSObject < LibOrgBouncycastleCryptoAsymmetricBlockCipher >

#pragma mark Public

- (instancetype __nonnull)init;

- (jint)getInputBlockSize;

- (jint)getOutputBlockSize;

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)len;

#pragma mark Protected

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)decryptWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)e
                                                                     withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)priv_t
                                                                     withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)priv_fp;

- (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)encryptWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)m
                                                                     withLibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial>)r
                                                                     withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)pubKey;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoNtruNTRUEngine)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoNtruNTRUEngine_init(LibOrgBouncycastlePqcCryptoNtruNTRUEngine *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNtruNTRUEngine *new_LibOrgBouncycastlePqcCryptoNtruNTRUEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoNtruNTRUEngine *create_LibOrgBouncycastlePqcCryptoNtruNTRUEngine_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoNtruNTRUEngine)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // NTRUEngine_H
