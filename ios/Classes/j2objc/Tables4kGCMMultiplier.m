//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/gcm/Tables4kGCMMultiplier.java
//

#include "Arrays.h"
#include "GCMUtil.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pack.h"
#include "Tables4kGCMMultiplier.h"

@interface LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier () {
 @public
  IOSByteArray *H_;
  IOSObjectArray *T_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier, H_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier, T_, IOSObjectArray *)

@implementation LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithByteArray:(IOSByteArray *)H {
  if (T_ == nil) {
    T_ = [IOSLongArray newArrayWithDimensions:2 lengths:(jint[]){ 256, 2 }];
  }
  else if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(self->H_, H)) {
    return;
  }
  self->H_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(H);
  LibOrgBouncycastleCryptoModesGcmGCMUtil_asLongsWithByteArray_withLongArray_(self->H_, IOSObjectArray_Get(nil_chk(T_), 1));
  LibOrgBouncycastleCryptoModesGcmGCMUtil_multiplyP7WithLongArray_withLongArray_(IOSObjectArray_Get(nil_chk(T_), 1), IOSObjectArray_Get(T_, 1));
  for (jint n = 2; n < 256; n += 2) {
    LibOrgBouncycastleCryptoModesGcmGCMUtil_dividePWithLongArray_withLongArray_(IOSObjectArray_Get(nil_chk(T_), JreRShift32(n, 1)), IOSObjectArray_Get(T_, n));
    LibOrgBouncycastleCryptoModesGcmGCMUtil_xor__WithLongArray_withLongArray_withLongArray_(IOSObjectArray_Get(nil_chk(T_), n), IOSObjectArray_Get(T_, 1), IOSObjectArray_Get(T_, n + 1));
  }
}

- (void)multiplyHWithByteArray:(IOSByteArray *)x {
  IOSLongArray *t = IOSObjectArray_Get(nil_chk(T_), IOSByteArray_Get(nil_chk(x), 15) & (jint) 0xFF);
  jlong z0 = IOSLongArray_Get(nil_chk(t), 0);
  jlong z1 = IOSLongArray_Get(t, 1);
  for (jint i = 14; i >= 0; --i) {
    t = IOSObjectArray_Get(T_, IOSByteArray_Get(x, i) & (jint) 0xFF);
    jlong c = JreLShift64(z1, 56);
    z1 = IOSLongArray_Get(nil_chk(t), 1) ^ ((JreURShift64(z1, 8)) | (JreLShift64(z0, 56)));
    z0 = IOSLongArray_Get(t, 0) ^ (JreURShift64(z0, 8)) ^ c ^ (JreURShift64(c, 1)) ^ (JreURShift64(c, 2)) ^ (JreURShift64(c, 7));
  }
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(z0, x, 0);
  LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(z1, x, 8);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithByteArray:);
  methods[2].selector = @selector(multiplyHWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "H_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "T_", "[[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "[B", "multiplyH" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier = { "Tables4kGCMMultiplier", "lib.org.bouncycastle.crypto.modes.gcm", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier;
}

@end

void LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier_init(LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier *new_LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier, init)
}

LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier *create_LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesGcmTables4kGCMMultiplier)
