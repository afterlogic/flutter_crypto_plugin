//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/HandshakeType.java
//

#include "HandshakeType.h"
#include "J2ObjC_source.h"

@implementation LibOrgBouncycastleCryptoTlsHandshakeType

+ (jshort)hello_request {
  return LibOrgBouncycastleCryptoTlsHandshakeType_hello_request;
}

+ (jshort)client_hello {
  return LibOrgBouncycastleCryptoTlsHandshakeType_client_hello;
}

+ (jshort)server_hello {
  return LibOrgBouncycastleCryptoTlsHandshakeType_server_hello;
}

+ (jshort)certificate {
  return LibOrgBouncycastleCryptoTlsHandshakeType_certificate;
}

+ (jshort)server_key_exchange {
  return LibOrgBouncycastleCryptoTlsHandshakeType_server_key_exchange;
}

+ (jshort)certificate_request {
  return LibOrgBouncycastleCryptoTlsHandshakeType_certificate_request;
}

+ (jshort)server_hello_done {
  return LibOrgBouncycastleCryptoTlsHandshakeType_server_hello_done;
}

+ (jshort)certificate_verify {
  return LibOrgBouncycastleCryptoTlsHandshakeType_certificate_verify;
}

+ (jshort)client_key_exchange {
  return LibOrgBouncycastleCryptoTlsHandshakeType_client_key_exchange;
}

+ (jshort)finished {
  return LibOrgBouncycastleCryptoTlsHandshakeType_finished;
}

+ (jshort)certificate_url {
  return LibOrgBouncycastleCryptoTlsHandshakeType_certificate_url;
}

+ (jshort)certificate_status {
  return LibOrgBouncycastleCryptoTlsHandshakeType_certificate_status;
}

+ (jshort)hello_verify_request {
  return LibOrgBouncycastleCryptoTlsHandshakeType_hello_verify_request;
}

+ (jshort)supplemental_data {
  return LibOrgBouncycastleCryptoTlsHandshakeType_supplemental_data;
}

+ (jshort)session_ticket {
  return LibOrgBouncycastleCryptoTlsHandshakeType_session_ticket;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsHandshakeType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hello_request", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_hello_request, 0x19, -1, -1, -1, -1 },
    { "client_hello", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_client_hello, 0x19, -1, -1, -1, -1 },
    { "server_hello", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_server_hello, 0x19, -1, -1, -1, -1 },
    { "certificate", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_certificate, 0x19, -1, -1, -1, -1 },
    { "server_key_exchange", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_server_key_exchange, 0x19, -1, -1, -1, -1 },
    { "certificate_request", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_certificate_request, 0x19, -1, -1, -1, -1 },
    { "server_hello_done", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_server_hello_done, 0x19, -1, -1, -1, -1 },
    { "certificate_verify", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_certificate_verify, 0x19, -1, -1, -1, -1 },
    { "client_key_exchange", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_client_key_exchange, 0x19, -1, -1, -1, -1 },
    { "finished", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_finished, 0x19, -1, -1, -1, -1 },
    { "certificate_url", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_certificate_url, 0x19, -1, -1, -1, -1 },
    { "certificate_status", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_certificate_status, 0x19, -1, -1, -1, -1 },
    { "hello_verify_request", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_hello_verify_request, 0x19, -1, -1, -1, -1 },
    { "supplemental_data", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_supplemental_data, 0x19, -1, -1, -1, -1 },
    { "session_ticket", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsHandshakeType_session_ticket, 0x19, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsHandshakeType = { "HandshakeType", "lib.org.bouncycastle.crypto.tls", NULL, methods, fields, 7, 0x1, 1, 15, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsHandshakeType;
}

@end

void LibOrgBouncycastleCryptoTlsHandshakeType_init(LibOrgBouncycastleCryptoTlsHandshakeType *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsHandshakeType *new_LibOrgBouncycastleCryptoTlsHandshakeType_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsHandshakeType, init)
}

LibOrgBouncycastleCryptoTlsHandshakeType *create_LibOrgBouncycastleCryptoTlsHandshakeType_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsHandshakeType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsHandshakeType)
