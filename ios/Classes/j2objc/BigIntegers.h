//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/BigIntegers.java
//

#ifndef BigIntegers_H
#define BigIntegers_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;

@interface LibOrgBouncycastleUtilBigIntegers : NSObject
@property (readonly, class) JavaMathBigInteger *ZERO NS_SWIFT_NAME(ZERO);
@property (readonly, class) JavaMathBigInteger *ONE NS_SWIFT_NAME(ONE);

+ (JavaMathBigInteger *)ZERO;

+ (JavaMathBigInteger *)ONE;

#pragma mark Public

- (instancetype __nonnull)init;

+ (IOSByteArray *)asUnsignedByteArrayWithJavaMathBigInteger:(JavaMathBigInteger *)value;

+ (IOSByteArray *)asUnsignedByteArrayWithInt:(jint)length
                      withJavaMathBigInteger:(JavaMathBigInteger *)value;

+ (JavaMathBigInteger *)createRandomBigIntegerWithInt:(jint)bitLength
                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (JavaMathBigInteger *)createRandomInRangeWithJavaMathBigInteger:(JavaMathBigInteger *)min
                                           withJavaMathBigInteger:(JavaMathBigInteger *)max
                                     withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (JavaMathBigInteger *)createRandomPrimeWithInt:(jint)bitLength
                                         withInt:(jint)certainty
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (JavaMathBigInteger *)fromUnsignedByteArrayWithByteArray:(IOSByteArray *)buf;

+ (JavaMathBigInteger *)fromUnsignedByteArrayWithByteArray:(IOSByteArray *)buf
                                                   withInt:(jint)off
                                                   withInt:(jint)length;

+ (jint)getUnsignedByteLengthWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleUtilBigIntegers)

inline JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleUtilBigIntegers, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_get_ONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleUtilBigIntegers, ONE, JavaMathBigInteger *)

FOUNDATION_EXPORT void LibOrgBouncycastleUtilBigIntegers_init(LibOrgBouncycastleUtilBigIntegers *self);

FOUNDATION_EXPORT LibOrgBouncycastleUtilBigIntegers *new_LibOrgBouncycastleUtilBigIntegers_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleUtilBigIntegers *create_LibOrgBouncycastleUtilBigIntegers_init(void);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(JavaMathBigInteger *value);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(jint length, JavaMathBigInteger *value);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *min, JavaMathBigInteger *max, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_(IOSByteArray *buf);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint length);

FOUNDATION_EXPORT jint LibOrgBouncycastleUtilBigIntegers_getUnsignedByteLengthWithJavaMathBigInteger_(JavaMathBigInteger *n);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(jint bitLength, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleUtilBigIntegers_createRandomPrimeWithInt_withInt_withJavaSecuritySecureRandom_(jint bitLength, jint certainty, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleUtilBigIntegers)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BigIntegers_H
