//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/spec/OpenSSHPrivateKeySpec.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OpenSSHPrivateKeySpec.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/spec/EncodedKeySpec.h"

@interface LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec () {
 @public
  NSString *format_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec, format_, NSString *)

@implementation LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec

- (instancetype)initWithByteArray:(IOSByteArray *)encodedKey {
  LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_initWithByteArray_(self, encodedKey);
  return self;
}

- (NSString *)getFormat {
  return format_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(getFormat);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "format_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec = { "OpenSSHPrivateKeySpec", "lib.org.bouncycastle.jce.spec", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec;
}

@end

void LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_initWithByteArray_(LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *self, IOSByteArray *encodedKey) {
  JavaSecuritySpecEncodedKeySpec_initWithByteArray_(self, encodedKey);
  if (IOSByteArray_Get(nil_chk(encodedKey), 0) == (jint) 0x30) {
    self->format_ = @"ASN.1";
  }
  else if (IOSByteArray_Get(encodedKey, 0) == 'o') {
    self->format_ = @"OpenSSH";
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown byte encoding");
  }
}

LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *new_LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_initWithByteArray_(IOSByteArray *encodedKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec, initWithByteArray_, encodedKey)
}

LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec *create_LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec_initWithByteArray_(IOSByteArray *encodedKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec, initWithByteArray_, encodedKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceSpecOpenSSHPrivateKeySpec)
