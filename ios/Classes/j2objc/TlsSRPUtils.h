//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsSRPUtils.java
//

#ifndef TlsSRPUtils_H
#define TlsSRPUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaMathBigInteger;
@class JavaUtilHashtable;

@interface LibOrgBouncycastleCryptoTlsTlsSRPUtils : NSObject
@property (readonly, class) JavaLangInteger *EXT_SRP NS_SWIFT_NAME(EXT_SRP);

+ (JavaLangInteger *)EXT_SRP;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)addSRPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                               withByteArray:(IOSByteArray *)identity;

+ (IOSByteArray *)createSRPExtensionWithByteArray:(IOSByteArray *)identity;

+ (IOSByteArray *)getSRPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)isSRPCipherSuiteWithInt:(jint)cipherSuite;

+ (IOSByteArray *)readSRPExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (JavaMathBigInteger *)readSRPParameterWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (void)writeSRPParameterWithJavaMathBigInteger:(JavaMathBigInteger *)x
                         withJavaIoOutputStream:(JavaIoOutputStream *)output;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsSRPUtils)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsSRPUtils_get_EXT_SRP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsSRPUtils_EXT_SRP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsSRPUtils, EXT_SRP, JavaLangInteger *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsSRPUtils_init(LibOrgBouncycastleCryptoTlsTlsSRPUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsSRPUtils *new_LibOrgBouncycastleCryptoTlsTlsSRPUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsSRPUtils *create_LibOrgBouncycastleCryptoTlsTlsSRPUtils_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsSRPUtils_addSRPExtensionWithJavaUtilHashtable_withByteArray_(JavaUtilHashtable *extensions, IOSByteArray *identity);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsSRPUtils_getSRPExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsSRPUtils_createSRPExtensionWithByteArray_(IOSByteArray *identity);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsSRPUtils_readSRPParameterWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsSRPUtils_writeSRPParameterWithJavaMathBigInteger_withJavaIoOutputStream_(JavaMathBigInteger *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsSRPUtils_isSRPCipherSuiteWithInt_(jint cipherSuite);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsSRPUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsSRPUtils_H
