//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/EphemeralKeyPair.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "EphemeralKeyPair.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyEncoder.h"

@interface LibOrgBouncycastleCryptoEphemeralKeyPair () {
 @public
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair_;
  id<LibOrgBouncycastleCryptoKeyEncoder> publicKeyEncoder_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEphemeralKeyPair, keyPair_, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEphemeralKeyPair, publicKeyEncoder_, id<LibOrgBouncycastleCryptoKeyEncoder>)

@implementation LibOrgBouncycastleCryptoEphemeralKeyPair

- (instancetype)initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)keyPair
                                 withLibOrgBouncycastleCryptoKeyEncoder:(id<LibOrgBouncycastleCryptoKeyEncoder>)publicKeyEncoder {
  LibOrgBouncycastleCryptoEphemeralKeyPair_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_(self, keyPair, publicKeyEncoder);
  return self;
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)getKeyPair {
  return keyPair_;
}

- (IOSByteArray *)getEncodedPublicKey {
  return [((id<LibOrgBouncycastleCryptoKeyEncoder>) nil_chk(publicKeyEncoder_)) getEncodedWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:[((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(keyPair_)) getPublic]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:withLibOrgBouncycastleCryptoKeyEncoder:);
  methods[1].selector = @selector(getKeyPair);
  methods[2].selector = @selector(getEncodedPublicKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyPair_", "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKeyEncoder_", "LLibOrgBouncycastleCryptoKeyEncoder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;LLibOrgBouncycastleCryptoKeyEncoder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEphemeralKeyPair = { "EphemeralKeyPair", "lib.org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEphemeralKeyPair;
}

@end

void LibOrgBouncycastleCryptoEphemeralKeyPair_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_(LibOrgBouncycastleCryptoEphemeralKeyPair *self, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, id<LibOrgBouncycastleCryptoKeyEncoder> publicKeyEncoder) {
  NSObject_init(self);
  self->keyPair_ = keyPair;
  self->publicKeyEncoder_ = publicKeyEncoder;
}

LibOrgBouncycastleCryptoEphemeralKeyPair *new_LibOrgBouncycastleCryptoEphemeralKeyPair_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, id<LibOrgBouncycastleCryptoKeyEncoder> publicKeyEncoder) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEphemeralKeyPair, initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_, keyPair, publicKeyEncoder)
}

LibOrgBouncycastleCryptoEphemeralKeyPair *create_LibOrgBouncycastleCryptoEphemeralKeyPair_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, id<LibOrgBouncycastleCryptoKeyEncoder> publicKeyEncoder) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEphemeralKeyPair, initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_, keyPair, publicKeyEncoder)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEphemeralKeyPair)
