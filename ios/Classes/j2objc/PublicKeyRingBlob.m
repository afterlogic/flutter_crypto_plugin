//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/PublicKeyRingBlob.java
//

#include "Blob.h"
#include "BlobType.h"
#include "BlobVerifier.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyBlob.h"
#include "KeyBoxByteBuffer.h"
#include "KeyFingerPrintCalculator.h"
#include "KeyInformation.h"
#include "PGPPublicKeyRing.h"
#include "PublicKeyRingBlob.h"
#include "UserID.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob () {
 @public
  id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator_;
}

- (instancetype)initWithInt:(jint)base
                   withLong:(jlong)length
withLibOrgBouncycastleGpgKeyboxBlobType:(LibOrgBouncycastleGpgKeyboxBlobType *)type
                    withInt:(jint)version_
                    withInt:(jint)blobFlags
                    withInt:(jint)keyNumber
           withJavaUtilList:(id<JavaUtilList>)keyInformation
              withByteArray:(IOSByteArray *)serialNumber
                    withInt:(jint)numberOfUserIDs
           withJavaUtilList:(id<JavaUtilList>)userIds
                    withInt:(jint)numberOfSignatures
           withJavaUtilList:(id<JavaUtilList>)expirationTime
                    withInt:(jint)assignedOwnerTrust
                    withInt:(jint)allValidity
                   withLong:(jlong)recheckAfter
                   withLong:(jlong)newestTimestamp
                   withLong:(jlong)blobCreatedAt
              withByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)reserveBytes
              withByteArray:(IOSByteArray *)sha1Checksum
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob, fingerPrintCalculator_, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)

__attribute__((unused)) static void LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob *self, jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *sha1Checksum, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

__attribute__((unused)) static LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob *new_LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *sha1Checksum, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob *create_LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *sha1Checksum, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator);

@implementation LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob

- (instancetype)initWithInt:(jint)base
                   withLong:(jlong)length
withLibOrgBouncycastleGpgKeyboxBlobType:(LibOrgBouncycastleGpgKeyboxBlobType *)type
                    withInt:(jint)version_
                    withInt:(jint)blobFlags
                    withInt:(jint)keyNumber
           withJavaUtilList:(id<JavaUtilList>)keyInformation
              withByteArray:(IOSByteArray *)serialNumber
                    withInt:(jint)numberOfUserIDs
           withJavaUtilList:(id<JavaUtilList>)userIds
                    withInt:(jint)numberOfSignatures
           withJavaUtilList:(id<JavaUtilList>)expirationTime
                    withInt:(jint)assignedOwnerTrust
                    withInt:(jint)allValidity
                   withLong:(jlong)recheckAfter
                   withLong:(jlong)newestTimestamp
                   withLong:(jlong)blobCreatedAt
              withByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)reserveBytes
              withByteArray:(IOSByteArray *)sha1Checksum
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, base, length, type, version_, blobFlags, keyNumber, keyInformation, serialNumber, numberOfUserIDs, userIds, numberOfSignatures, expirationTime, assignedOwnerTrust, allValidity, recheckAfter, newestTimestamp, blobCreatedAt, keyBytes, reserveBytes, sha1Checksum, fingerPrintCalculator);
  return self;
}

+ (LibOrgBouncycastleGpgKeyboxBlob *)parseContentWithInt:(jint)base
                                                withLong:(jlong)length
                 withLibOrgBouncycastleGpgKeyboxBlobType:(LibOrgBouncycastleGpgKeyboxBlobType *)type
                                                 withInt:(jint)version_
         withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer:(LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *)buffer
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator
             withLibOrgBouncycastleGpgKeyboxBlobVerifier:(id<LibOrgBouncycastleGpgKeyboxBlobVerifier>)blobVerifier {
  return LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_parseContentWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(base, length, type, version_, buffer, fingerPrintCalculator, blobVerifier);
}

- (LibOrgBouncycastleOpenpgpPGPPublicKeyRing *)getPGPPublicKeyRing {
  if (self->type_ == JreLoadEnum(LibOrgBouncycastleGpgKeyboxBlobType, OPEN_PGP_BLOB)) {
    return new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_([self getKeyBytes], fingerPrintCalculator_);
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Blob is not PGP blob, it is ", [((LibOrgBouncycastleGpgKeyboxBlobType *) nil_chk(type_)) name]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LLibOrgBouncycastleGpgKeyboxBlob;", 0x8, 2, 3, 4, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKeyRing;", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLong:withLibOrgBouncycastleGpgKeyboxBlobType:withInt:withInt:withInt:withJavaUtilList:withByteArray:withInt:withJavaUtilList:withInt:withJavaUtilList:withInt:withInt:withLong:withLong:withLong:withByteArray:withByteArray:withByteArray:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[1].selector = @selector(parseContentWithInt:withLong:withLibOrgBouncycastleGpgKeyboxBlobType:withInt:withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:withLibOrgBouncycastleGpgKeyboxBlobVerifier:);
  methods[2].selector = @selector(getPGPPublicKeyRing);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fingerPrintCalculator_", "LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLLibOrgBouncycastleGpgKeyboxBlobType;IIILJavaUtilList;[BILJavaUtilList;ILJavaUtilList;IIJJJ[B[B[BLLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "(IJLlib/org/bouncycastle/gpg/keybox/BlobType;IIILjava/util/List<Llib/org/bouncycastle/gpg/keybox/KeyInformation;>;[BILjava/util/List<Llib/org/bouncycastle/gpg/keybox/UserID;>;ILjava/util/List<Ljava/lang/Long;>;IIJJJ[B[B[BLlib/org/bouncycastle/openpgp/operator/KeyFingerPrintCalculator;)V", "parseContent", "IJLLibOrgBouncycastleGpgKeyboxBlobType;ILLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;LLibOrgBouncycastleGpgKeyboxBlobVerifier;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob = { "PublicKeyRingBlob", "lib.org.bouncycastle.gpg.keybox", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob;
}

@end

void LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob *self, jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *sha1Checksum, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  LibOrgBouncycastleGpgKeyboxKeyBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_(self, base, length, type, version_, blobFlags, keyNumber, keyInformation, serialNumber, numberOfUserIDs, userIds, numberOfSignatures, expirationTime, assignedOwnerTrust, allValidity, recheckAfter, newestTimestamp, blobCreatedAt, keyBytes, reserveBytes, sha1Checksum);
  self->fingerPrintCalculator_ = fingerPrintCalculator;
}

LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob *new_LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *sha1Checksum, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob, initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, base, length, type, version_, blobFlags, keyNumber, keyInformation, serialNumber, numberOfUserIDs, userIds, numberOfSignatures, expirationTime, assignedOwnerTrust, allValidity, recheckAfter, newestTimestamp, blobCreatedAt, keyBytes, reserveBytes, sha1Checksum, fingerPrintCalculator)
}

LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob *create_LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, jint blobFlags, jint keyNumber, id<JavaUtilList> keyInformation, IOSByteArray *serialNumber, jint numberOfUserIDs, id<JavaUtilList> userIds, jint numberOfSignatures, id<JavaUtilList> expirationTime, jint assignedOwnerTrust, jint allValidity, jlong recheckAfter, jlong newestTimestamp, jlong blobCreatedAt, IOSByteArray *keyBytes, IOSByteArray *reserveBytes, IOSByteArray *sha1Checksum, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob, initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, base, length, type, version_, blobFlags, keyNumber, keyInformation, serialNumber, numberOfUserIDs, userIds, numberOfSignatures, expirationTime, assignedOwnerTrust, allValidity, recheckAfter, newestTimestamp, blobCreatedAt, keyBytes, reserveBytes, sha1Checksum, fingerPrintCalculator)
}

LibOrgBouncycastleGpgKeyboxBlob *LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_parseContentWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_, LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *buffer, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator, id<LibOrgBouncycastleGpgKeyboxBlobVerifier> blobVerifier) {
  LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initialize();
  LibOrgBouncycastleGpgKeyboxKeyBlob_verifyDigestWithInt_withLong_withLibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(base, length, buffer, blobVerifier);
  jint blobFlags = [((LibOrgBouncycastleGpgKeyboxKeyBoxByteBuffer *) nil_chk(buffer)) u16];
  jlong keyBlockOffset = [buffer u32];
  jlong keyBlockLength = [buffer u32];
  jint keyNumber = [buffer u16];
  jint keyInformationStructureSize = [buffer u16];
  JavaUtilArrayList *keyInformation = new_JavaUtilArrayList_init();
  for (jint t = keyNumber - 1; t >= 0; t--) {
    [keyInformation addWithId:LibOrgBouncycastleGpgKeyboxKeyInformation_getInstanceWithId_withInt_withInt_(buffer, keyInformationStructureSize, base)];
  }
  jint sizeOfSerialNumber = [buffer u16];
  IOSByteArray *serialNumber = [IOSByteArray newArrayWithLength:sizeOfSerialNumber];
  [buffer bNWithByteArray:serialNumber];
  jint numberOfUserIDs = [buffer u16];
  [buffer u16];
  JavaUtilArrayList *userIds = new_JavaUtilArrayList_init();
  for (jint t = numberOfUserIDs - 1; t >= 0; t--) {
    [userIds addWithId:LibOrgBouncycastleGpgKeyboxUserID_getInstanceWithId_withInt_(buffer, base)];
  }
  jint numberOfSignatures = [buffer u16];
  [buffer u16];
  id<JavaUtilList> signatureExpirationTime = new_JavaUtilArrayList_init();
  for (jint t = numberOfSignatures - 1; t >= 0; t--) {
    [signatureExpirationTime addWithId:JavaLangLong_valueOfWithLong_([buffer u32])];
  }
  jint assignedOwnerTrust = [buffer u8];
  jint allValidity = [buffer u8];
  [buffer u16];
  jlong recheckAfter = [buffer u32];
  jlong newestTimestamp = [buffer u32];
  jlong blobCreatedAt = [buffer u32];
  jlong sizeOfReservedSpace = [buffer u32];
  IOSByteArray *reserveData = [IOSByteArray newArrayWithLength:(jint) sizeOfReservedSpace];
  [buffer bNWithByteArray:reserveData];
  IOSByteArray *keyData = [buffer rangeOfWithInt:(jint) (base + keyBlockOffset) withInt:(jint) (base + keyBlockOffset + keyBlockLength)];
  jint dataSize = (jint) (length - ([buffer position] - base) - 20);
  IOSByteArray *data = [IOSByteArray newArrayWithLength:dataSize];
  [buffer bNWithByteArray:data];
  IOSByteArray *checksum = [buffer rangeOfWithInt:(jint) (base + length - 20) withInt:(jint) (base + length)];
  [buffer bNWithByteArray:checksum];
  return new_LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_withInt_withInt_withJavaUtilList_withByteArray_withInt_withJavaUtilList_withInt_withJavaUtilList_withInt_withInt_withLong_withLong_withLong_withByteArray_withByteArray_withByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(base, length, type, version_, blobFlags, keyNumber, keyInformation, serialNumber, numberOfUserIDs, userIds, numberOfSignatures, signatureExpirationTime, assignedOwnerTrust, allValidity, recheckAfter, newestTimestamp, blobCreatedAt, keyData, reserveData, checksum, fingerPrintCalculator);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleGpgKeyboxPublicKeyRingBlob)
