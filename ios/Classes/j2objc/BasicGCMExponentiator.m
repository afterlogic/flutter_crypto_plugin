//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/gcm/BasicGCMExponentiator.java
//

#include "Arrays.h"
#include "BasicGCMExponentiator.h"
#include "GCMUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator () {
 @public
  IOSLongArray *x_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator, x_, IOSLongArray *)

@implementation LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithByteArray:(IOSByteArray *)x {
  self->x_ = LibOrgBouncycastleCryptoModesGcmGCMUtil_asLongsWithByteArray_(x);
}

- (void)exponentiateXWithLong:(jlong)pow
                withByteArray:(IOSByteArray *)output {
  IOSLongArray *y = LibOrgBouncycastleCryptoModesGcmGCMUtil_oneAsLongs();
  if (pow > 0) {
    IOSLongArray *powX = LibOrgBouncycastleUtilArrays_cloneWithLongArray_(x_);
    do {
      if ((pow & 1LL) != 0) {
        LibOrgBouncycastleCryptoModesGcmGCMUtil_multiplyWithLongArray_withLongArray_(y, powX);
      }
      LibOrgBouncycastleCryptoModesGcmGCMUtil_squareWithLongArray_withLongArray_(powX, powX);
      JreURShiftAssignLong(&pow, 1);
    }
    while (pow > 0);
  }
  LibOrgBouncycastleCryptoModesGcmGCMUtil_asBytesWithLongArray_withByteArray_(y, output);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithByteArray:);
  methods[2].selector = @selector(exponentiateXWithLong:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "[B", "exponentiateX", "J[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator = { "BasicGCMExponentiator", "lib.org.bouncycastle.crypto.modes.gcm", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator;
}

@end

void LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator_init(LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator *new_LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator, init)
}

LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator *create_LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesGcmBasicGCMExponentiator)
