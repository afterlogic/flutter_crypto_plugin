//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/ua/DSTU4145PointEncoder.java
//

#include "DSTU4145PointEncoder.h"
#include "ECConstants.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Random.h"

@interface LibOrgBouncycastleAsn1UaDSTU4145PointEncoder ()

+ (LibOrgBouncycastleMathEcECFieldElement *)traceWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)fe;

+ (LibOrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                                                           withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)beta;

@end

__attribute__((unused)) static LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECFieldElement *fe);

__attribute__((unused)) static LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_solveQuadraticEquationWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *beta);

@implementation LibOrgBouncycastleAsn1UaDSTU4145PointEncoder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleMathEcECFieldElement *)traceWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)fe {
  return LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithLibOrgBouncycastleMathEcECFieldElement_(fe);
}

+ (LibOrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                                                           withLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)beta {
  return LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_solveQuadraticEquationWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_(curve, beta);
}

+ (IOSByteArray *)encodePointWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)Q {
  return LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_encodePointWithLibOrgBouncycastleMathEcECPoint_(Q);
}

+ (LibOrgBouncycastleMathEcECPoint *)decodePointWithLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                                                                      withByteArray:(IOSByteArray *)bytes {
  return LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_decodePointWithLibOrgBouncycastleMathEcECCurve_withByteArray_(curve, bytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECFieldElement;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(traceWithLibOrgBouncycastleMathEcECFieldElement:);
  methods[2].selector = @selector(solveQuadraticEquationWithLibOrgBouncycastleMathEcECCurve:withLibOrgBouncycastleMathEcECFieldElement:);
  methods[3].selector = @selector(encodePointWithLibOrgBouncycastleMathEcECPoint:);
  methods[4].selector = @selector(decodePointWithLibOrgBouncycastleMathEcECCurve:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "trace", "LLibOrgBouncycastleMathEcECFieldElement;", "solveQuadraticEquation", "LLibOrgBouncycastleMathEcECCurve;LLibOrgBouncycastleMathEcECFieldElement;", "encodePoint", "LLibOrgBouncycastleMathEcECPoint;", "decodePoint", "LLibOrgBouncycastleMathEcECCurve;[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1UaDSTU4145PointEncoder = { "DSTU4145PointEncoder", "lib.org.bouncycastle.asn1.ua", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1UaDSTU4145PointEncoder;
}

@end

void LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_init(LibOrgBouncycastleAsn1UaDSTU4145PointEncoder *self) {
  NSObject_init(self);
}

LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECFieldElement *fe) {
  LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_initialize();
  LibOrgBouncycastleMathEcECFieldElement *t = fe;
  for (jint i = 1; i < [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(fe)) getFieldSize]; ++i) {
    t = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(t)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:fe];
  }
  return t;
}

LibOrgBouncycastleMathEcECFieldElement *LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_solveQuadraticEquationWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_(LibOrgBouncycastleMathEcECCurve *curve, LibOrgBouncycastleMathEcECFieldElement *beta) {
  LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_initialize();
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) isZero]) {
    return beta;
  }
  LibOrgBouncycastleMathEcECFieldElement *zeroElement = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)];
  LibOrgBouncycastleMathEcECFieldElement *z = nil;
  LibOrgBouncycastleMathEcECFieldElement *gamma = nil;
  JavaUtilRandom *rand = new_JavaUtilRandom_init();
  jint m = [beta getFieldSize];
  do {
    LibOrgBouncycastleMathEcECFieldElement *t = [curve fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(m, rand)];
    z = zeroElement;
    LibOrgBouncycastleMathEcECFieldElement *w = beta;
    for (jint i = 1; i <= m - 1; i++) {
      LibOrgBouncycastleMathEcECFieldElement *w2 = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w)) square];
      z = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:[((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w2)) multiplyWithLibOrgBouncycastleMathEcECFieldElement:t]];
      w = [w2 addWithLibOrgBouncycastleMathEcECFieldElement:beta];
    }
    if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(w)) isZero]) {
      return nil;
    }
    gamma = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithLibOrgBouncycastleMathEcECFieldElement:z];
  }
  while ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) isZero]);
  return z;
}

IOSByteArray *LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_encodePointWithLibOrgBouncycastleMathEcECPoint_(LibOrgBouncycastleMathEcECPoint *Q) {
  LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_initialize();
  Q = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(Q)) normalize];
  LibOrgBouncycastleMathEcECFieldElement *x = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(Q)) getAffineXCoord];
  IOSByteArray *bytes = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(x)) getEncoded];
  if (![x isZero]) {
    LibOrgBouncycastleMathEcECFieldElement *z = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([Q getAffineYCoord])) divideWithLibOrgBouncycastleMathEcECFieldElement:x];
    if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithLibOrgBouncycastleMathEcECFieldElement_(z))) isOne]) {
      *IOSByteArray_GetRef(bytes, ((IOSByteArray *) nil_chk(bytes))->size_ - 1) |= (jint) 0x01;
    }
    else {
      *IOSByteArray_GetRef(bytes, ((IOSByteArray *) nil_chk(bytes))->size_ - 1) &= (jint) 0xFE;
    }
  }
  return bytes;
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_decodePointWithLibOrgBouncycastleMathEcECCurve_withByteArray_(LibOrgBouncycastleMathEcECCurve *curve, IOSByteArray *bytes) {
  LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_initialize();
  LibOrgBouncycastleMathEcECFieldElement *k = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSByteArray_Get(bytes, ((IOSByteArray *) nil_chk(bytes))->size_ - 1) & (jint) 0x1)];
  LibOrgBouncycastleMathEcECFieldElement *xp = [curve fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withByteArray_(1, bytes)];
  if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithLibOrgBouncycastleMathEcECFieldElement_(xp))) isEqual:[curve getA]]) {
    xp = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(xp)) addOne];
  }
  LibOrgBouncycastleMathEcECFieldElement *yp = nil;
  if ([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(xp)) isZero]) {
    yp = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt];
  }
  else {
    LibOrgBouncycastleMathEcECFieldElement *beta = [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([xp square])) invert])) multiplyWithLibOrgBouncycastleMathEcECFieldElement:[curve getB]])) addWithLibOrgBouncycastleMathEcECFieldElement:[curve getA]])) addWithLibOrgBouncycastleMathEcECFieldElement:xp];
    LibOrgBouncycastleMathEcECFieldElement *z = LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_solveQuadraticEquationWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECFieldElement_(curve, beta);
    if (z != nil) {
      if (![((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithLibOrgBouncycastleMathEcECFieldElement_(z))) isEqual:k]) {
        z = [z addOne];
      }
      yp = [xp multiplyWithLibOrgBouncycastleMathEcECFieldElement:z];
    }
  }
  if (yp == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point compression");
  }
  return [curve validatePointWithJavaMathBigInteger:[xp toBigInteger] withJavaMathBigInteger:[yp toBigInteger]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1UaDSTU4145PointEncoder)
