//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/ECPrivateKeyParameters.java
//

#ifndef ECPrivateKeyParameters_H
#define ECPrivateKeyParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ECKeyParameters.h"
#include "J2ObjC_header.h"

@class JavaMathBigInteger;
@class LibOrgBouncycastleCryptoParamsECDomainParameters;

@interface LibOrgBouncycastleCryptoParamsECPrivateKeyParameters : LibOrgBouncycastleCryptoParamsECKeyParameters {
 @public
  JavaMathBigInteger *d_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)d
withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)params;

- (JavaMathBigInteger *)getD;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0
withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters, d_, JavaMathBigInteger *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *self, JavaMathBigInteger *d, LibOrgBouncycastleCryptoParamsECDomainParameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *new_LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_(JavaMathBigInteger *d, LibOrgBouncycastleCryptoParamsECDomainParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *create_LibOrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsECDomainParameters_(JavaMathBigInteger *d, LibOrgBouncycastleCryptoParamsECDomainParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ECPrivateKeyParameters_H
