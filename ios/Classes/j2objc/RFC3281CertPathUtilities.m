//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/RFC3281CertPathUtilities.java
//

#include "ASN1InputStream.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "AnnotatedException.h"
#include "AttributeCertificateHolder.h"
#include "AttributeCertificateIssuer.h"
#include "BouncyCastleProvider.h"
#include "CRLDistPoint.h"
#include "CRLReason.h"
#include "DistributionPoint.h"
#include "DistributionPointName.h"
#include "ExtCertPathValidatorException.h"
#include "Extension.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "JceProviderCertPathValidatorUtilities.h"
#include "JceProviderCertStatus.h"
#include "PKIXAttrCertChecker.h"
#include "PKIXCRLStore.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "RFC3280CertPathUtilities.h"
#include "RFC3281CertPathUtilities.h"
#include "ReasonsMask.h"
#include "TargetInformation.h"
#include "X509AttributeCertificate.h"
#include "X509CertStoreSelector.h"
#include "X509Extensions.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/Principal.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathBuilder.h"
#include "java/security/cert/CertPathBuilderException.h"
#include "java/security/cert/CertPathBuilderResult.h"
#include "java/security/cert/CertPathValidator.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertPathValidatorResult.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleJceProviderRFC3281CertPathUtilities ()

+ (void)checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
             withLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
             withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                               withJavaUtilDate:(JavaUtilDate *)validDate
                            withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)issuerCert
         withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus
                   withLibOrgBouncycastleJceProviderReasonsMask:(LibOrgBouncycastleJceProviderReasonsMask *)reasonMask
                                               withJavaUtilList:(id<JavaUtilList>)certPathCerts
                   withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper;

@end

inline NSString *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_get_TARGET_INFORMATION(void);
static NSString *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_TARGET_INFORMATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities, TARGET_INFORMATION, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_get_NO_REV_AVAIL(void);
static NSString *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_NO_REV_AVAIL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities, NO_REV_AVAIL, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_get_CRL_DISTRIBUTION_POINTS(void);
static NSString *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_CRL_DISTRIBUTION_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities, CRL_DISTRIBUTION_POINTS, NSString *)

inline NSString *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_get_AUTHORITY_INFO_ACCESS(void);
static NSString *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_AUTHORITY_INFO_ACCESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities, AUTHORITY_INFO_ACCESS, NSString *)

__attribute__((unused)) static void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilDate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *issuerCert, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus, LibOrgBouncycastleJceProviderReasonsMask *reasonMask, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities)

@implementation LibOrgBouncycastleJceProviderRFC3281CertPathUtilities

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)processAttrCert7WithLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
                                              withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)holderCertPath
                        withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams
                                                           withJavaUtilSet:(id<JavaUtilSet>)attrCertCheckers {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert7WithLibOrgBouncycastleX509X509AttributeCertificate_withJavaSecurityCertCertPath_withJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilSet_(attrCert, certPath, holderCertPath, pkixParams, attrCertCheckers);
}

+ (void)checkCRLsWithLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
                 withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)issuerCert
                                                   withJavaUtilDate:(JavaUtilDate *)validDate
                                                   withJavaUtilList:(id<JavaUtilList>)certPathCerts
                       withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_checkCRLsWithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(attrCert, paramsPKIX, issuerCert, validDate, certPathCerts, helper);
}

+ (void)additionalChecksWithLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
                                                           withJavaUtilSet:(id<JavaUtilSet>)prohibitedACAttributes
                                                           withJavaUtilSet:(id<JavaUtilSet>)necessaryACAttributes {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_additionalChecksWithLibOrgBouncycastleX509X509AttributeCertificate_withJavaUtilSet_withJavaUtilSet_(attrCert, prohibitedACAttributes, necessaryACAttributes);
}

+ (void)processAttrCert5WithLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
                        withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert5WithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(attrCert, pkixParams);
}

+ (void)processAttrCert4WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)acIssuerCert
                                            withJavaUtilSet:(id<JavaUtilSet>)trustedACIssuers {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert4WithJavaSecurityCertX509Certificate_withJavaUtilSet_(acIssuerCert, trustedACIssuers);
}

+ (void)processAttrCert3WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)acIssuerCert
         withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert3WithJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(acIssuerCert, pkixParams);
}

+ (id<JavaSecurityCertCertPathValidatorResult>)processAttrCert2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                         withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams {
  return LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert2WithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(certPath, pkixParams);
}

+ (JavaSecurityCertCertPath *)processAttrCert1WithLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
                                              withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)pkixParams {
  return LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert1WithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(attrCert, pkixParams);
}

+ (void)checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint:(LibOrgBouncycastleAsn1X509DistributionPoint *)dp
             withLibOrgBouncycastleX509X509AttributeCertificate:(id<LibOrgBouncycastleX509X509AttributeCertificate>)attrCert
             withLibOrgBouncycastleJcajcePKIXExtendedParameters:(LibOrgBouncycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                               withJavaUtilDate:(JavaUtilDate *)validDate
                            withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)issuerCert
         withLibOrgBouncycastleJceProviderJceProviderCertStatus:(LibOrgBouncycastleJceProviderJceProviderCertStatus *)certStatus
                   withLibOrgBouncycastleJceProviderReasonsMask:(LibOrgBouncycastleJceProviderReasonsMask *)reasonMask
                                               withJavaUtilList:(id<JavaUtilList>)certPathCerts
                   withLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilDate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(dp, attrCert, paramsPKIX, validDate, issuerCert, certStatus, reasonMask, certPathCerts, helper);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 5, 6, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 7, 8, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 9, 10, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 11, 12, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathValidatorResult;", 0xc, 13, 14, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPath;", 0xc, 15, 8, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 17, 18, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processAttrCert7WithLibOrgBouncycastleX509X509AttributeCertificate:withJavaSecurityCertCertPath:withJavaSecurityCertCertPath:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaUtilSet:);
  methods[2].selector = @selector(checkCRLsWithLibOrgBouncycastleX509X509AttributeCertificate:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaUtilDate:withJavaUtilList:withLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  methods[3].selector = @selector(additionalChecksWithLibOrgBouncycastleX509X509AttributeCertificate:withJavaUtilSet:withJavaUtilSet:);
  methods[4].selector = @selector(processAttrCert5WithLibOrgBouncycastleX509X509AttributeCertificate:withLibOrgBouncycastleJcajcePKIXExtendedParameters:);
  methods[5].selector = @selector(processAttrCert4WithJavaSecurityCertX509Certificate:withJavaUtilSet:);
  methods[6].selector = @selector(processAttrCert3WithJavaSecurityCertX509Certificate:withLibOrgBouncycastleJcajcePKIXExtendedParameters:);
  methods[7].selector = @selector(processAttrCert2WithJavaSecurityCertCertPath:withLibOrgBouncycastleJcajcePKIXExtendedParameters:);
  methods[8].selector = @selector(processAttrCert1WithLibOrgBouncycastleX509X509AttributeCertificate:withLibOrgBouncycastleJcajcePKIXExtendedParameters:);
  methods[9].selector = @selector(checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint:withLibOrgBouncycastleX509X509AttributeCertificate:withLibOrgBouncycastleJcajcePKIXExtendedParameters:withJavaUtilDate:withJavaSecurityCertX509Certificate:withLibOrgBouncycastleJceProviderJceProviderCertStatus:withLibOrgBouncycastleJceProviderReasonsMask:withJavaUtilList:withLibOrgBouncycastleJcajceUtilJcaJceHelper:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TARGET_INFORMATION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "NO_REV_AVAIL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "CRL_DISTRIBUTION_POINTS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "AUTHORITY_INFO_ACCESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
  };
  static const void *ptrTable[] = { "processAttrCert7", "LLibOrgBouncycastleX509X509AttributeCertificate;LJavaSecurityCertCertPath;LJavaSecurityCertCertPath;LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaUtilSet;", "LJavaSecurityCertCertPathValidatorException;", "checkCRLs", "LLibOrgBouncycastleX509X509AttributeCertificate;LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaSecurityCertX509Certificate;LJavaUtilDate;LJavaUtilList;LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "additionalChecks", "LLibOrgBouncycastleX509X509AttributeCertificate;LJavaUtilSet;LJavaUtilSet;", "processAttrCert5", "LLibOrgBouncycastleX509X509AttributeCertificate;LLibOrgBouncycastleJcajcePKIXExtendedParameters;", "processAttrCert4", "LJavaSecurityCertX509Certificate;LJavaUtilSet;", "processAttrCert3", "LJavaSecurityCertX509Certificate;LLibOrgBouncycastleJcajcePKIXExtendedParameters;", "processAttrCert2", "LJavaSecurityCertCertPath;LLibOrgBouncycastleJcajcePKIXExtendedParameters;", "processAttrCert1", "checkCRL", "LLibOrgBouncycastleAsn1X509DistributionPoint;LLibOrgBouncycastleX509X509AttributeCertificate;LLibOrgBouncycastleJcajcePKIXExtendedParameters;LJavaUtilDate;LJavaSecurityCertX509Certificate;LLibOrgBouncycastleJceProviderJceProviderCertStatus;LLibOrgBouncycastleJceProviderReasonsMask;LJavaUtilList;LLibOrgBouncycastleJcajceUtilJcaJceHelper;", "LLibOrgBouncycastleJceProviderAnnotatedException;", &LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_TARGET_INFORMATION, &LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_NO_REV_AVAIL, &LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_CRL_DISTRIBUTION_POINTS, &LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_AUTHORITY_INFO_ACCESS };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderRFC3281CertPathUtilities = { "RFC3281CertPathUtilities", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 10, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderRFC3281CertPathUtilities;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJceProviderRFC3281CertPathUtilities class]) {
    LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_TARGET_INFORMATION = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, targetInformation))) getId];
    LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_NO_REV_AVAIL = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, noRevAvail))) getId];
    LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_CRL_DISTRIBUTION_POINTS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, cRLDistributionPoints))) getId];
    LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_AUTHORITY_INFO_ACCESS = [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, authorityInfoAccess))) getId];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities)
  }
}

@end

void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_init(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJceProviderRFC3281CertPathUtilities *new_LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities, init)
}

LibOrgBouncycastleJceProviderRFC3281CertPathUtilities *create_LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities, init)
}

void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert7WithLibOrgBouncycastleX509X509AttributeCertificate_withJavaSecurityCertCertPath_withJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilSet_(id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, JavaSecurityCertCertPath *certPath, JavaSecurityCertCertPath *holderCertPath, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams, id<JavaUtilSet> attrCertCheckers) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  id<JavaUtilSet> set = [((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(attrCert)) getCriticalExtensionOIDs];
  if ([((id<JavaUtilSet>) nil_chk(set)) containsWithId:LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_TARGET_INFORMATION]) {
    @try {
      (void) LibOrgBouncycastleAsn1X509TargetInformation_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(attrCert, LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_TARGET_INFORMATION));
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Target information extension could not be read.", e);
    }
    @catch (JavaLangIllegalArgumentException *e) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Target information extension could not be read.", e);
    }
  }
  [set removeWithId:LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_TARGET_INFORMATION];
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(attrCertCheckers)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    [((LibOrgBouncycastleX509PKIXAttrCertChecker *) nil_chk(((LibOrgBouncycastleX509PKIXAttrCertChecker *) cast_chk([it next], [LibOrgBouncycastleX509PKIXAttrCertChecker class])))) checkWithLibOrgBouncycastleX509X509AttributeCertificate:attrCert withJavaSecurityCertCertPath:certPath withJavaSecurityCertCertPath:holderCertPath withJavaUtilCollection:set];
  }
  if (![set isEmpty]) {
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(JreStrcat("$@", @"Attribute certificate contains unsupported critical extensions: ", set));
  }
}

void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_checkCRLsWithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *issuerCert, JavaUtilDate *validDate, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isRevocationEnabled]) {
    if ([((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(attrCert)) getExtensionValueWithNSString:LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_NO_REV_AVAIL] == nil) {
      LibOrgBouncycastleAsn1X509CRLDistPoint *crldp = nil;
      @try {
        crldp = LibOrgBouncycastleAsn1X509CRLDistPoint_getInstanceWithId_(LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(attrCert, LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_CRL_DISTRIBUTION_POINTS));
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"CRL distribution point extension could not be read.", e);
      }
      id<JavaUtilList> crlStores = new_JavaUtilArrayList_init();
      @try {
        [crlStores addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithLibOrgBouncycastleAsn1X509CRLDistPoint_withJavaUtilMap_(crldp, [paramsPKIX getNamedCRLStoreMap])];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"No additional CRL locations could be decoded from CRL distribution point extension.", e);
      }
      LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *bldr = new_LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder_initWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(paramsPKIX);
      for (id<JavaUtilIterator> it = [crlStores iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        (void) [bldr addCRLStoreWithLibOrgBouncycastleJcajcePKIXCRLStore:(id<LibOrgBouncycastleJcajcePKIXCRLStore>) cast_check(crlStores, LibOrgBouncycastleJcajcePKIXCRLStore_class_())];
      }
      paramsPKIX = [bldr build];
      LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus = new_LibOrgBouncycastleJceProviderJceProviderCertStatus_init();
      LibOrgBouncycastleJceProviderReasonsMask *reasonsMask = new_LibOrgBouncycastleJceProviderReasonsMask_init();
      LibOrgBouncycastleJceProviderAnnotatedException *lastException = nil;
      jboolean validCrlFound = false;
      if (crldp != nil) {
        IOSObjectArray *dps = nil;
        @try {
          dps = [crldp getDistributionPoints];
        }
        @catch (JavaLangException *e) {
          @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Distribution points could not be read.", e);
        }
        @try {
          for (jint i = 0; i < ((IOSObjectArray *) nil_chk(dps))->size_ && [certStatus getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED && ![reasonsMask isAllReasons]; i++) {
            LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIXClone = (LibOrgBouncycastleJcajcePKIXExtendedParameters *) cast_chk([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) java_clone], [LibOrgBouncycastleJcajcePKIXExtendedParameters class]);
            LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilDate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(IOSObjectArray_Get(dps, i), attrCert, paramsPKIXClone, validDate, issuerCert, certStatus, reasonsMask, certPathCerts, helper);
            validCrlFound = true;
          }
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
          lastException = new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No valid CRL for distribution point found.", e);
        }
      }
      if ([certStatus getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED && ![reasonsMask isAllReasons]) {
        @try {
          LibOrgBouncycastleAsn1ASN1Primitive *issuer = nil;
          @try {
            issuer = [new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((JavaxSecurityAuthX500X500Principal *) nil_chk(((JavaxSecurityAuthX500X500Principal *) cast_chk(IOSObjectArray_Get(nil_chk([((LibOrgBouncycastleX509AttributeCertificateIssuer *) nil_chk([attrCert getIssuer])) getPrincipals]), 0), [JavaxSecurityAuthX500X500Principal class])))) getEncoded]) readObject];
          }
          @catch (JavaLangException *e) {
            @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuer from certificate for CRL could not be reencoded.", e);
          }
          LibOrgBouncycastleAsn1X509DistributionPoint *dp = new_LibOrgBouncycastleAsn1X509DistributionPoint_initWithLibOrgBouncycastleAsn1X509DistributionPointName_withLibOrgBouncycastleAsn1X509ReasonFlags_withLibOrgBouncycastleAsn1X509GeneralNames_(new_LibOrgBouncycastleAsn1X509DistributionPointName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(0, new_LibOrgBouncycastleAsn1X509GeneralNames_initWithLibOrgBouncycastleAsn1X509GeneralName_(new_LibOrgBouncycastleAsn1X509GeneralName_initWithInt_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1X509GeneralName_directoryName, issuer))), nil, nil);
          LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIXClone = (LibOrgBouncycastleJcajcePKIXExtendedParameters *) cast_chk([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) java_clone], [LibOrgBouncycastleJcajcePKIXExtendedParameters class]);
          LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilDate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(dp, attrCert, paramsPKIXClone, validDate, issuerCert, certStatus, reasonsMask, certPathCerts, helper);
          validCrlFound = true;
        }
        @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
          lastException = new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No valid CRL for distribution point found.", e);
        }
      }
      if (!validCrlFound) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"No valid CRL found.", lastException);
      }
      if ([certStatus getCertStatus] != LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED) {
        NSString *message = JreStrcat("$@", @"Attribute certificate revocation after ", [certStatus getRevocationDate]);
        (void) JreStrAppendStrong(&message, "$$", @", reason: ", IOSObjectArray_Get(nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderRFC3280CertPathUtilities, crlReasons)), [certStatus getCertStatus]));
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(message);
      }
      if (![reasonsMask isAllReasons] && [certStatus getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED) {
        [certStatus setCertStatusWithInt:LibOrgBouncycastleJceProviderJceProviderCertStatus_UNDETERMINED];
      }
      if ([certStatus getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNDETERMINED) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Attribute certificate status could not be determined.");
      }
    }
    else {
      if ([attrCert getExtensionValueWithNSString:LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_CRL_DISTRIBUTION_POINTS] != nil || [attrCert getExtensionValueWithNSString:LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_AUTHORITY_INFO_ACCESS] != nil) {
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"No rev avail extension is set, but also an AC revocation pointer.");
      }
    }
  }
}

void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_additionalChecksWithLibOrgBouncycastleX509X509AttributeCertificate_withJavaUtilSet_withJavaUtilSet_(id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, id<JavaUtilSet> prohibitedACAttributes, id<JavaUtilSet> necessaryACAttributes) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(prohibitedACAttributes)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    NSString *oid = (NSString *) cast_chk([it next], [NSString class]);
    if ([((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(attrCert)) getAttributesWithNSString:oid] != nil) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(JreStrcat("$$C", @"Attribute certificate contains prohibited attribute: ", oid, '.'));
    }
  }
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(necessaryACAttributes)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    NSString *oid = (NSString *) cast_chk([it next], [NSString class]);
    if ([((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(attrCert)) getAttributesWithNSString:oid] == nil) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(JreStrcat("$$C", @"Attribute certificate does not contain necessary attribute: ", oid, '.'));
    }
  }
}

void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert5WithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  @try {
    [((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(attrCert)) checkValidityWithJavaUtilDate:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getValidDateWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(pkixParams)];
  }
  @catch (JavaSecurityCertCertificateExpiredException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Attribute certificate is not valid.", e);
  }
  @catch (JavaSecurityCertCertificateNotYetValidException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Attribute certificate is not valid.", e);
  }
}

void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert4WithJavaSecurityCertX509Certificate_withJavaUtilSet_(JavaSecurityCertX509Certificate *acIssuerCert, id<JavaUtilSet> trustedACIssuers) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  id<JavaUtilSet> set = trustedACIssuers;
  jboolean trusted = false;
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(set)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    JavaSecurityCertTrustAnchor *anchor = (JavaSecurityCertTrustAnchor *) cast_chk([it next], [JavaSecurityCertTrustAnchor class]);
    if ([((NSString *) nil_chk([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(acIssuerCert)) getSubjectX500Principal])) getNameWithNSString:@"RFC2253"])) isEqual:[((JavaSecurityCertTrustAnchor *) nil_chk(anchor)) getCAName]] || [acIssuerCert isEqual:[anchor getTrustedCert]]) {
      trusted = true;
    }
  }
  if (!trusted) {
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Attribute certificate issuer is not directly trusted.");
  }
}

void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert3WithJavaSecurityCertX509Certificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(JavaSecurityCertX509Certificate *acIssuerCert, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  if ([((JavaSecurityCertX509Certificate *) nil_chk(acIssuerCert)) getKeyUsage] != nil && (!IOSBooleanArray_Get(nil_chk([acIssuerCert getKeyUsage]), 0) && !IOSBooleanArray_Get(nil_chk([acIssuerCert getKeyUsage]), 1))) {
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Attribute certificate issuer public key cannot be used to validate digital signatures.");
  }
  if ([acIssuerCert getBasicConstraints] != -1) {
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Attribute certificate issuer is also a public key certificate issuer.");
  }
}

id<JavaSecurityCertCertPathValidatorResult> LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert2WithJavaSecurityCertCertPath_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(JavaSecurityCertCertPath *certPath, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  JavaSecurityCertCertPathValidator *validator = nil;
  @try {
    validator = JavaSecurityCertCertPathValidator_getInstanceWithNSString_withNSString_(@"PKIX", LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Support class could not be created.", e);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Support class could not be created.", e);
  }
  @try {
    return [((JavaSecurityCertCertPathValidator *) nil_chk(validator)) validateWithJavaSecurityCertCertPath:certPath withJavaSecurityCertCertPathParameters:pkixParams];
  }
  @catch (JavaSecurityCertCertPathValidatorException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Certification path for issuer certificate of attribute certificate could not be validated.", e);
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_([e getMessage]);
  }
}

JavaSecurityCertCertPath *LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_processAttrCert1WithLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, LibOrgBouncycastleJcajcePKIXExtendedParameters *pkixParams) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  id<JavaSecurityCertCertPathBuilderResult> result = nil;
  id<JavaUtilSet> holderPKCs = new_JavaUtilHashSet_init();
  if ([((LibOrgBouncycastleX509AttributeCertificateHolder *) nil_chk([((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(attrCert)) getHolder])) getIssuer] != nil) {
    JavaSecurityCertX509CertSelector *selector = new_JavaSecurityCertX509CertSelector_init();
    [selector setSerialNumberWithJavaMathBigInteger:[((LibOrgBouncycastleX509AttributeCertificateHolder *) nil_chk([attrCert getHolder])) getSerialNumber]];
    IOSObjectArray *principals = [((LibOrgBouncycastleX509AttributeCertificateHolder *) nil_chk([attrCert getHolder])) getIssuer];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(principals))->size_; i++) {
      @try {
        if ([IOSObjectArray_Get(principals, i) isKindOfClass:[JavaxSecurityAuthX500X500Principal class]]) {
          [selector setIssuerWithByteArray:[((JavaxSecurityAuthX500X500Principal *) nil_chk(((JavaxSecurityAuthX500X500Principal *) cast_chk(IOSObjectArray_Get(principals, i), [JavaxSecurityAuthX500X500Principal class])))) getEncoded]];
        }
        [holderPKCs addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_([new_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(selector) build], [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(pkixParams)) getCertStores])];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Public key certificate for attribute certificate cannot be searched.", e);
      }
      @catch (JavaIoIOException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Unable to encode X500 principal.", e);
      }
    }
    if ([holderPKCs isEmpty]) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Public key certificate specified in base certificate ID for attribute certificate cannot be found.");
    }
  }
  if ([((LibOrgBouncycastleX509AttributeCertificateHolder *) nil_chk([attrCert getHolder])) getEntityNames] != nil) {
    LibOrgBouncycastleX509X509CertStoreSelector *selector = new_LibOrgBouncycastleX509X509CertStoreSelector_init();
    IOSObjectArray *principals = [((LibOrgBouncycastleX509AttributeCertificateHolder *) nil_chk([attrCert getHolder])) getEntityNames];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(principals))->size_; i++) {
      @try {
        if ([IOSObjectArray_Get(principals, i) isKindOfClass:[JavaxSecurityAuthX500X500Principal class]]) {
          [selector setIssuerWithByteArray:[((JavaxSecurityAuthX500X500Principal *) nil_chk(((JavaxSecurityAuthX500X500Principal *) cast_chk(IOSObjectArray_Get(principals, i), [JavaxSecurityAuthX500X500Principal class])))) getEncoded]];
        }
        [holderPKCs addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_([new_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(selector) build], [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(pkixParams)) getCertStores])];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Public key certificate for attribute certificate cannot be searched.", e);
      }
      @catch (JavaIoIOException *e) {
        @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Unable to encode X500 principal.", e);
      }
    }
    if ([holderPKCs isEmpty]) {
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Public key certificate specified in entity name for attribute certificate cannot be found.");
    }
  }
  LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *paramsBldr = new_LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder_initWithLibOrgBouncycastleJcajcePKIXExtendedParameters_(pkixParams);
  JavaSecurityCertCertPathValidatorException *lastException = nil;
  for (id<JavaUtilIterator> it = [holderPKCs iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    LibOrgBouncycastleX509X509CertStoreSelector *selector = new_LibOrgBouncycastleX509X509CertStoreSelector_init();
    [selector setCertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *) cast_chk([it next], [JavaSecurityCertX509Certificate class])];
    (void) [paramsBldr setTargetConstraintsWithLibOrgBouncycastleJcajcePKIXCertStoreSelector:[new_LibOrgBouncycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(selector) build]];
    JavaSecurityCertCertPathBuilder *builder = nil;
    @try {
      builder = JavaSecurityCertCertPathBuilder_getInstanceWithNSString_withNSString_(@"PKIX", LibOrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
    }
    @catch (JavaSecurityNoSuchProviderException *e) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Support class could not be created.", e);
    }
    @catch (JavaSecurityNoSuchAlgorithmException *e) {
      @throw new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Support class could not be created.", e);
    }
    @try {
      result = [((JavaSecurityCertCertPathBuilder *) nil_chk(builder)) buildWithJavaSecurityCertCertPathParameters:[new_LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithLibOrgBouncycastleJcajcePKIXExtendedParameters_([paramsBldr build]) build]];
    }
    @catch (JavaSecurityCertCertPathBuilderException *e) {
      lastException = new_LibOrgBouncycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Certification path for public key certificate of attribute certificate could not be build.", e);
    }
    @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_([e getMessage]);
    }
  }
  if (lastException != nil) {
    @throw lastException;
  }
  return [((id<JavaSecurityCertCertPathBuilderResult>) nil_chk(result)) getCertPath];
}

void LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_checkCRLWithLibOrgBouncycastleAsn1X509DistributionPoint_withLibOrgBouncycastleX509X509AttributeCertificate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilDate_withJavaSecurityCertX509Certificate_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJceProviderReasonsMask_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(LibOrgBouncycastleAsn1X509DistributionPoint *dp, id<LibOrgBouncycastleX509X509AttributeCertificate> attrCert, LibOrgBouncycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *issuerCert, LibOrgBouncycastleJceProviderJceProviderCertStatus *certStatus, LibOrgBouncycastleJceProviderReasonsMask *reasonMask, id<JavaUtilList> certPathCerts, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper) {
  LibOrgBouncycastleJceProviderRFC3281CertPathUtilities_initialize();
  if ([((id<LibOrgBouncycastleX509X509AttributeCertificate>) nil_chk(attrCert)) getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509X509Extensions, NoRevAvail))) getId]] != nil) {
    return;
  }
  JavaUtilDate *currentDate = new_JavaUtilDate_initWithLong_(JavaLangSystem_currentTimeMillis());
  if ([((JavaUtilDate *) nil_chk(validDate)) getTime] > [currentDate getTime]) {
    @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"Validation time is in future.");
  }
  id<JavaUtilSet> crls = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getCompleteCRLsWithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(dp, attrCert, currentDate, paramsPKIX);
  jboolean validCrlFound = false;
  LibOrgBouncycastleJceProviderAnnotatedException *lastException = nil;
  id<JavaUtilIterator> crl_iter = [((id<JavaUtilSet>) nil_chk(crls)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(crl_iter)) hasNext] && [((LibOrgBouncycastleJceProviderJceProviderCertStatus *) nil_chk(certStatus)) getCertStatus] == LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED && ![((LibOrgBouncycastleJceProviderReasonsMask *) nil_chk(reasonMask)) isAllReasons]) {
    @try {
      JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk([crl_iter next], [JavaSecurityCertX509CRL class]);
      LibOrgBouncycastleJceProviderReasonsMask *interimReasonsMask = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withLibOrgBouncycastleAsn1X509DistributionPoint_(crl, dp);
      if (![((LibOrgBouncycastleJceProviderReasonsMask *) nil_chk(interimReasonsMask)) hasNewReasonsWithLibOrgBouncycastleJceProviderReasonsMask:reasonMask]) {
        continue;
      }
      id<JavaUtilSet> keys = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withLibOrgBouncycastleJcajcePKIXExtendedParameters_withJavaUtilList_withLibOrgBouncycastleJcajceUtilJcaJceHelper_(crl, attrCert, nil, nil, paramsPKIX, certPathCerts, helper);
      id<JavaSecurityPublicKey> key = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(crl, keys);
      JavaSecurityCertX509CRL *deltaCRL = nil;
      if ([((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isUseDeltasEnabled]) {
        id<JavaUtilSet> deltaCRLs = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(currentDate, crl, [paramsPKIX getCertStores], [paramsPKIX getCRLStores]);
        deltaCRL = LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(deltaCRLs, key);
      }
      if ([paramsPKIX getValidityModel] != LibOrgBouncycastleJcajcePKIXExtendedParameters_CHAIN_VALIDITY_MODEL) {
        if ([((JavaUtilDate *) nil_chk([attrCert getNotAfter])) getTime] < [((JavaUtilDate *) nil_chk([((JavaSecurityCertX509CRL *) nil_chk(crl)) getThisUpdate])) getTime]) {
          @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"No valid CRL for current time found.");
        }
      }
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, attrCert, crl);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithLibOrgBouncycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, attrCert, crl);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(deltaCRL, crl, paramsPKIX);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_withLibOrgBouncycastleJcajcePKIXExtendedParameters_(validDate, deltaCRL, attrCert, certStatus, paramsPKIX);
      LibOrgBouncycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withLibOrgBouncycastleJceProviderJceProviderCertStatus_(validDate, crl, attrCert, certStatus);
      if ([((LibOrgBouncycastleJceProviderJceProviderCertStatus *) nil_chk(certStatus)) getCertStatus] == LibOrgBouncycastleAsn1X509CRLReason_removeFromCRL) {
        [certStatus setCertStatusWithInt:LibOrgBouncycastleJceProviderJceProviderCertStatus_UNREVOKED];
      }
      [((LibOrgBouncycastleJceProviderReasonsMask *) nil_chk(reasonMask)) addReasonsWithLibOrgBouncycastleJceProviderReasonsMask:interimReasonsMask];
      validCrlFound = true;
    }
    @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
      lastException = e;
    }
  }
  if (!validCrlFound) {
    @throw nil_chk(lastException);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderRFC3281CertPathUtilities)
