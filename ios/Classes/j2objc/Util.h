//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/ntru/util/Util.java
//

#ifndef Util_H
#define Util_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class JavaSecuritySecureRandom;
@protocol LibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial;

@interface LibOrgBouncycastlePqcMathNtruUtilUtil : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (id<LibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial>)generateRandomTernaryWithInt:(jint)N
                                                                                     withInt:(jint)numOnes
                                                                                     withInt:(jint)numNegOnes
                                                                                 withBoolean:(jboolean)sparse
                                                                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (IOSIntArray *)generateRandomTernaryWithInt:(jint)N
                                      withInt:(jint)numOnes
                                      withInt:(jint)numNegOnes
                 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (jint)invertWithInt:(jint)n
              withInt:(jint)modulus;

+ (jboolean)is64BitJVM;

+ (jint)powWithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)modulus;

+ (jlong)powWithLong:(jlong)a
             withInt:(jint)b
            withLong:(jlong)modulus;

+ (IOSByteArray *)readFullLengthWithJavaIoInputStream:(JavaIoInputStream *)is
                                              withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcMathNtruUtilUtil)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcMathNtruUtilUtil_init(LibOrgBouncycastlePqcMathNtruUtilUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruUtilUtil *new_LibOrgBouncycastlePqcMathNtruUtilUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcMathNtruUtilUtil *create_LibOrgBouncycastlePqcMathNtruUtilUtil_init(void);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(jint n, jint modulus);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(jint a, jint b, jint modulus);

FOUNDATION_EXPORT jlong LibOrgBouncycastlePqcMathNtruUtilUtil_powWithLong_withInt_withLong_(jlong a, jint b, jlong modulus);

FOUNDATION_EXPORT id<LibOrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial> LibOrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, jboolean sparse, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT jboolean LibOrgBouncycastlePqcMathNtruUtilUtil_is64BitJVM(void);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint length);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcMathNtruUtilUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Util_H
