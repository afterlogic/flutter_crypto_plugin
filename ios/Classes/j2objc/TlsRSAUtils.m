//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsRSAUtils.java
//

#include "AlertDescription.h"
#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "PKCS1Encoding.h"
#include "ParametersWithRandom.h"
#include "ProtocolVersion.h"
#include "RSABlindedEngine.h"
#include "RSAKeyParameters.h"
#include "TlsContext.h"
#include "TlsFatalAlert.h"
#include "TlsRSAUtils.h"
#include "TlsUtils.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/security/SecureRandom.h"

@implementation LibOrgBouncycastleCryptoTlsTlsRSAUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsTlsRSAUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)generateEncryptedPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                         withLibOrgBouncycastleCryptoParamsRSAKeyParameters:(LibOrgBouncycastleCryptoParamsRSAKeyParameters *)rsaServerPublicKey
                                                                     withJavaIoOutputStream:(JavaIoOutputStream *)output {
  return LibOrgBouncycastleCryptoTlsTlsRSAUtils_generateEncryptedPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoParamsRSAKeyParameters_withJavaIoOutputStream_(context, rsaServerPublicKey, output);
}

+ (IOSByteArray *)safeDecryptPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context
                                   withLibOrgBouncycastleCryptoParamsRSAKeyParameters:(LibOrgBouncycastleCryptoParamsRSAKeyParameters *)rsaServerPrivateKey
                                                                        withByteArray:(IOSByteArray *)encryptedPreMasterSecret {
  return LibOrgBouncycastleCryptoTlsTlsRSAUtils_safeDecryptPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoParamsRSAKeyParameters_withByteArray_(context, rsaServerPrivateKey, encryptedPreMasterSecret);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateEncryptedPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext:withLibOrgBouncycastleCryptoParamsRSAKeyParameters:withJavaIoOutputStream:);
  methods[2].selector = @selector(safeDecryptPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext:withLibOrgBouncycastleCryptoParamsRSAKeyParameters:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generateEncryptedPreMasterSecret", "LLibOrgBouncycastleCryptoTlsTlsContext;LLibOrgBouncycastleCryptoParamsRSAKeyParameters;LJavaIoOutputStream;", "LJavaIoIOException;", "safeDecryptPreMasterSecret", "LLibOrgBouncycastleCryptoTlsTlsContext;LLibOrgBouncycastleCryptoParamsRSAKeyParameters;[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsRSAUtils = { "TlsRSAUtils", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsRSAUtils;
}

@end

void LibOrgBouncycastleCryptoTlsTlsRSAUtils_init(LibOrgBouncycastleCryptoTlsTlsRSAUtils *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsTlsRSAUtils *new_LibOrgBouncycastleCryptoTlsTlsRSAUtils_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsRSAUtils, init)
}

LibOrgBouncycastleCryptoTlsTlsRSAUtils *create_LibOrgBouncycastleCryptoTlsTlsRSAUtils_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsRSAUtils, init)
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsRSAUtils_generateEncryptedPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoParamsRSAKeyParameters_withJavaIoOutputStream_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoParamsRSAKeyParameters *rsaServerPublicKey, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsRSAUtils_initialize();
  IOSByteArray *premasterSecret = [IOSByteArray newArrayWithLength:48];
  [((JavaSecuritySecureRandom *) nil_chk([((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context)) getSecureRandom])) nextBytesWithByteArray:premasterSecret];
  LibOrgBouncycastleCryptoTlsTlsUtils_writeVersionWithLibOrgBouncycastleCryptoTlsProtocolVersion_withByteArray_withInt_([context getClientVersion], premasterSecret, 0);
  LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *encoding = new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init());
  [encoding init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(rsaServerPublicKey, [context getSecureRandom])];
  @try {
    IOSByteArray *encryptedPreMasterSecret = [encoding processBlockWithByteArray:premasterSecret withInt:0 withInt:premasterSecret->size_];
    if (LibOrgBouncycastleCryptoTlsTlsUtils_isSSLWithLibOrgBouncycastleCryptoTlsTlsContext_(context)) {
      [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:encryptedPreMasterSecret];
    }
    else {
      LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(encryptedPreMasterSecret, output);
    }
  }
  @catch (LibOrgBouncycastleCryptoInvalidCipherTextException *e) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error, e);
  }
  return premasterSecret;
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsRSAUtils_safeDecryptPreMasterSecretWithLibOrgBouncycastleCryptoTlsTlsContext_withLibOrgBouncycastleCryptoParamsRSAKeyParameters_withByteArray_(id<LibOrgBouncycastleCryptoTlsTlsContext> context, LibOrgBouncycastleCryptoParamsRSAKeyParameters *rsaServerPrivateKey, IOSByteArray *encryptedPreMasterSecret) {
  LibOrgBouncycastleCryptoTlsTlsRSAUtils_initialize();
  LibOrgBouncycastleCryptoTlsProtocolVersion *clientVersion = [((id<LibOrgBouncycastleCryptoTlsTlsContext>) nil_chk(context)) getClientVersion];
  jboolean versionNumberCheckDisabled = false;
  IOSByteArray *fallback = [IOSByteArray newArrayWithLength:48];
  [((JavaSecuritySecureRandom *) nil_chk([context getSecureRandom])) nextBytesWithByteArray:fallback];
  IOSByteArray *M = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(fallback);
  @try {
    LibOrgBouncycastleCryptoEncodingsPKCS1Encoding *encoding = new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_withByteArray_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init(), fallback);
    [encoding init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(rsaServerPrivateKey, [context getSecureRandom])];
    M = [encoding processBlockWithByteArray:encryptedPreMasterSecret withInt:0 withInt:((IOSByteArray *) nil_chk(encryptedPreMasterSecret))->size_];
  }
  @catch (JavaLangException *e) {
  }
  if (versionNumberCheckDisabled && [((LibOrgBouncycastleCryptoTlsProtocolVersion *) nil_chk(clientVersion)) isEqualOrEarlierVersionOfWithLibOrgBouncycastleCryptoTlsProtocolVersion:JreLoadStatic(LibOrgBouncycastleCryptoTlsProtocolVersion, TLSv10)]) {
  }
  else {
    jint correct = ([((LibOrgBouncycastleCryptoTlsProtocolVersion *) nil_chk(clientVersion)) getMajorVersion] ^ (IOSByteArray_Get(nil_chk(M), 0) & (jint) 0xff)) | ([clientVersion getMinorVersion] ^ (IOSByteArray_Get(M, 1) & (jint) 0xff));
    correct |= JreRShift32(correct, 1);
    correct |= JreRShift32(correct, 2);
    correct |= JreRShift32(correct, 4);
    jint mask = ~((correct & 1) - 1);
    for (jint i = 0; i < 48; i++) {
      *IOSByteArray_GetRef(M, i) = (jbyte) ((IOSByteArray_Get(M, i) & (~mask)) | (IOSByteArray_Get(fallback, i) & mask));
    }
  }
  return M;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsRSAUtils)
