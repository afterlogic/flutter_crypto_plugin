//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/io/CryptoIoCipherOutputStream.java
//

#ifndef CryptoIoCipherOutputStream_H
#define CryptoIoCipherOutputStream_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/io/FilterOutputStream.h"

@class IOSByteArray;
@class JavaIoOutputStream;
@class LibOrgBouncycastleCryptoBufferedBlockCipher;
@protocol LibOrgBouncycastleCryptoModesAEADBlockCipher;
@protocol LibOrgBouncycastleCryptoStreamCipher;

@interface LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream : JavaIoFilterOutputStream

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
    withLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)cipher;

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
     withLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)cipher;

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
            withLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)cipher;

- (void)close;

- (void)flush;

- (void)writeWithByteArray:(IOSByteArray *)b;

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeWithInt:(jint)b;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *self, JavaIoOutputStream *os, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(JavaIoOutputStream *os, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(JavaIoOutputStream *os, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *self, JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoStreamCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_(JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoStreamCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_(JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoStreamCipher> cipher);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *self, JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CryptoIoCipherOutputStream_H
