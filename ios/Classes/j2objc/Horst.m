//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/sphincs/Horst.java
//

#include "HashFunctions.h"
#include "Horst.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SPHINCS256Config.h"
#include "Seed.h"

@implementation LibOrgBouncycastlePqcCryptoSphincsHorst

+ (jint)HORST_LOGT {
  return LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT;
}

+ (jint)HORST_T {
  return LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T;
}

+ (jint)HORST_K {
  return LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_K;
}

+ (jint)HORST_SKBYTES {
  return LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES;
}

+ (jint)HORST_SIGBYTES {
  return LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SIGBYTES;
}

+ (jint)N_MASKS {
  return LibOrgBouncycastlePqcCryptoSphincsHorst_N_MASKS;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoSphincsHorst_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)expand_seedWithByteArray:(IOSByteArray *)outseeds
                   withByteArray:(IOSByteArray *)inseed {
  LibOrgBouncycastlePqcCryptoSphincsHorst_expand_seedWithByteArray_withByteArray_(outseeds, inseed);
}

+ (jint)horst_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                        withByteArray:(IOSByteArray *)sig
                                                              withInt:(jint)sigOff
                                                        withByteArray:(IOSByteArray *)pk
                                                        withByteArray:(IOSByteArray *)seed
                                                        withByteArray:(IOSByteArray *)masks
                                                        withByteArray:(IOSByteArray *)m_hash {
  return LibOrgBouncycastlePqcCryptoSphincsHorst_horst_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withByteArray_withByteArray_withByteArray_(hs, sig, sigOff, pk, seed, masks, m_hash);
}

+ (jint)horst_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                          withByteArray:(IOSByteArray *)pk
                                                          withByteArray:(IOSByteArray *)sig
                                                                withInt:(jint)sigOff
                                                          withByteArray:(IOSByteArray *)masks
                                                          withByteArray:(IOSByteArray *)m_hash {
  return LibOrgBouncycastlePqcCryptoSphincsHorst_horst_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withByteArray_(hs, pk, sig, sigOff, masks, m_hash);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(expand_seedWithByteArray:withByteArray:);
  methods[2].selector = @selector(horst_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withByteArray:withByteArray:withByteArray:);
  methods[3].selector = @selector(horst_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withInt:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HORST_LOGT", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT, 0x18, -1, -1, -1, -1 },
    { "HORST_T", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T, 0x18, -1, -1, -1, -1 },
    { "HORST_K", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_K, 0x18, -1, -1, -1, -1 },
    { "HORST_SKBYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES, 0x18, -1, -1, -1, -1 },
    { "HORST_SIGBYTES", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SIGBYTES, 0x18, -1, -1, -1, -1 },
    { "N_MASKS", "I", .constantValue.asInt = LibOrgBouncycastlePqcCryptoSphincsHorst_N_MASKS, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "expand_seed", "[B[B", "horst_sign", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[B[B[B[B", "horst_verify", "LLibOrgBouncycastlePqcCryptoSphincsHashFunctions;[B[BI[B[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoSphincsHorst = { "Horst", "lib.org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x0, 4, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoSphincsHorst;
}

@end

void LibOrgBouncycastlePqcCryptoSphincsHorst_init(LibOrgBouncycastlePqcCryptoSphincsHorst *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoSphincsHorst *new_LibOrgBouncycastlePqcCryptoSphincsHorst_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoSphincsHorst, init)
}

LibOrgBouncycastlePqcCryptoSphincsHorst *create_LibOrgBouncycastlePqcCryptoSphincsHorst_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoSphincsHorst, init)
}

void LibOrgBouncycastlePqcCryptoSphincsHorst_expand_seedWithByteArray_withByteArray_(IOSByteArray *outseeds, IOSByteArray *inseed) {
  LibOrgBouncycastlePqcCryptoSphincsHorst_initialize();
  LibOrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(outseeds, 0, LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T * LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES, inseed, 0);
}

jint LibOrgBouncycastlePqcCryptoSphincsHorst_horst_signWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withByteArray_withByteArray_withByteArray_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *sig, jint sigOff, IOSByteArray *pk, IOSByteArray *seed, IOSByteArray *masks, IOSByteArray *m_hash) {
  LibOrgBouncycastlePqcCryptoSphincsHorst_initialize();
  IOSByteArray *sk = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T * LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES];
  jint idx;
  jint i;
  jint j;
  jint k;
  jint sigpos = sigOff;
  IOSByteArray *tree = [IOSByteArray newArrayWithLength:(2 * LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T - 1) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  LibOrgBouncycastlePqcCryptoSphincsHorst_expand_seedWithByteArray_withByteArray_(sk, seed);
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T; i++) {
    [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_n_nWithByteArray:tree withInt:(LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T - 1 + i) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:sk withInt:i * LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES];
  }
  jlong offset_in;
  jlong offset_out;
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT; i++) {
    offset_in = (JreLShift32(1, (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - i))) - 1;
    offset_out = (JreLShift32(1, (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - i - 1))) - 1;
    for (j = 0; j < (JreLShift32(1, (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - i - 1))); j++) {
      [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:tree withInt:(jint) ((offset_out + j) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES) withByteArray:tree withInt:(jint) ((offset_in + 2 * j) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES) withByteArray:masks withInt:2 * i * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
    }
  }
  for (j = 63 * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j < 127 * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
    *IOSByteArray_GetRef(nil_chk(sig), sigpos++) = IOSByteArray_Get(tree, j);
  }
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_K; i++) {
    idx = (IOSByteArray_Get(nil_chk(m_hash), 2 * i) & (jint) 0xff) + (JreLShift32((IOSByteArray_Get(m_hash, 2 * i + 1) & (jint) 0xff), 8));
    for (k = 0; k < LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES; k++) *IOSByteArray_GetRef(nil_chk(sig), sigpos++) = IOSByteArray_Get(sk, idx * LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES + k);
    idx += (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_T - 1);
    for (j = 0; j < LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 6; j++) {
      idx = ((idx & 1) != 0) ? idx + 1 : idx - 1;
      for (k = 0; k < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++) *IOSByteArray_GetRef(nil_chk(sig), sigpos++) = IOSByteArray_Get(tree, idx * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + k);
      idx = (idx - 1) / 2;
    }
  }
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    *IOSByteArray_GetRef(nil_chk(pk), i) = IOSByteArray_Get(tree, i);
  }
  return LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SIGBYTES;
}

jint LibOrgBouncycastlePqcCryptoSphincsHorst_horst_verifyWithLibOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withByteArray_(LibOrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *pk, IOSByteArray *sig, jint sigOff, IOSByteArray *masks, IOSByteArray *m_hash) {
  LibOrgBouncycastlePqcCryptoSphincsHorst_initialize();
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:32 * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  jint idx;
  jint i;
  jint j;
  jint k;
  jint sigOffset = sigOff + 64 * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
  for (i = 0; i < LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_K; i++) {
    idx = (IOSByteArray_Get(nil_chk(m_hash), 2 * i) & (jint) 0xff) + (JreLShift32((IOSByteArray_Get(m_hash, 2 * i + 1) & (jint) 0xff), 8));
    if ((idx & 1) == 0) {
      [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_n_nWithByteArray:buffer withInt:0 withByteArray:sig withInt:sigOffset];
      for (k = 0; k < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++) *IOSByteArray_GetRef(buffer, LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + k) = IOSByteArray_Get(nil_chk(sig), sigOffset + LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES + k);
    }
    else {
      [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_n_nWithByteArray:buffer withInt:LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:sig withInt:sigOffset];
      for (k = 0; k < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++) *IOSByteArray_GetRef(buffer, k) = IOSByteArray_Get(nil_chk(sig), sigOffset + LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES + k);
    }
    sigOffset += LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES + LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
    for (j = 1; j < LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 6; j++) {
      idx = JreURShift32(idx, 1);
      if ((idx & 1) == 0) {
        [hs hash_2n_n_maskWithByteArray:buffer withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (j - 1) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
        for (k = 0; k < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++) *IOSByteArray_GetRef(buffer, LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + k) = IOSByteArray_Get(nil_chk(sig), sigOffset + k);
      }
      else {
        [hs hash_2n_n_maskWithByteArray:buffer withInt:LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (j - 1) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
        for (k = 0; k < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++) *IOSByteArray_GetRef(buffer, k) = IOSByteArray_Get(nil_chk(sig), sigOffset + k);
      }
      sigOffset += LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
    }
    idx = JreURShift32(idx, 1);
    [hs hash_2n_n_maskWithByteArray:buffer withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 7) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
    for (k = 0; k < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++) if (IOSByteArray_Get(nil_chk(sig), sigOff + idx * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + k) != IOSByteArray_Get(buffer, k)) {
      for (k = 0; k < LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++) *IOSByteArray_GetRef(nil_chk(pk), k) = 0;
      return -1;
    }
  }
  for (j = 0; j < 32; j++) {
    [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:sig withInt:sigOff + 2 * j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 6) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  for (j = 0; j < 16; j++) {
    [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:2 * j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 5) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  for (j = 0; j < 8; j++) {
    [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:2 * j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 4) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  for (j = 0; j < 4; j++) {
    [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:2 * j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 3) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  for (j = 0; j < 2; j++) {
    [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:2 * j * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 2) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  [((LibOrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:pk withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (LibOrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 1) * LibOrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoSphincsHorst)
