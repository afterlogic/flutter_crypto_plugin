//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSKeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "BDS.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "OTSHashAddress.h"
#include "XMSSAddress.h"
#include "XMSSKeyGenerationParameters.h"
#include "XMSSKeyPairGenerator.h"
#include "XMSSNode.h"
#include "XMSSParameters.h"
#include "XMSSPrivateKeyParameters.h"
#include "XMSSPublicKeyParameters.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator () {
 @public
  LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params_;
  JavaSecuritySecureRandom *prng_;
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                                                                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator, params_, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator, prng_, JavaSecuritySecureRandom *)

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng);

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  LibOrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters *parameters = (LibOrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters class]);
  self->prng_ = [((LibOrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters *) nil_chk(parameters)) getRandom];
  self->params_ = [parameters getParameters];
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey = LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(self, params_, prng_);
  LibOrgBouncycastlePqcCryptoXmssXMSSNode *root = [((LibOrgBouncycastlePqcCryptoXmssBDS *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey)) getBDSState])) getRoot];
  privateKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:[privateKey getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[privateKey getSecretKeyPRF]])) withPublicSeedWithByteArray:[privateKey getPublicSeed]])) withRootWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(root)) getValue]])) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDS:[privateKey getBDSState]])) build];
  LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *publicKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withRootWithByteArray:[root getValue]])) withPublicSeedWithByteArray:[((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey)) getPublicSeed]])) build];
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(publicKey, privateKey);
}

- (LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                                                                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng {
  return LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(self, params, prng);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prng_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;", "generatePrivateKey", "LLibOrgBouncycastlePqcCryptoXmssXMSSParameters;LJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator = { "XMSSKeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init(LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_generatePrivateKeyWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *self, LibOrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  jint n = [((LibOrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params)) getDigestSize];
  IOSByteArray *secretKeySeed = [IOSByteArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(prng)) nextBytesWithByteArray:secretKeySeed];
  IOSByteArray *secretKeyPRF = [IOSByteArray newArrayWithLength:n];
  [prng nextBytesWithByteArray:secretKeyPRF];
  IOSByteArray *publicSeed = [IOSByteArray newArrayWithLength:n];
  [prng nextBytesWithByteArray:publicSeed];
  LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey = [((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_LibOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_(params) withSecretKeySeedWithByteArray:secretKeySeed])) withSecretKeyPRFWithByteArray:secretKeyPRF])) withPublicSeedWithByteArray:publicSeed])) withBDSStateWithLibOrgBouncycastlePqcCryptoXmssBDS:new_LibOrgBouncycastlePqcCryptoXmssBDS_initWithLibOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withLibOrgBouncycastlePqcCryptoXmssOTSHashAddress_(params, publicSeed, secretKeySeed, (LibOrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([new_LibOrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() build], [LibOrgBouncycastlePqcCryptoXmssOTSHashAddress class]))])) build];
  return privateKey;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator)
