//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/HKDFBytesGenerator.java
//

#include "DataLengthException.h"
#include "DerivationParameters.h"
#include "Digest.h"
#include "HKDFBytesGenerator.h"
#include "HKDFParameters.h"
#include "HMac.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator () {
 @public
  LibOrgBouncycastleCryptoMacsHMac *hMacHash_;
  jint hashLen_;
  IOSByteArray *info_;
  IOSByteArray *currentT_;
  jint generatedBytes_;
}

- (LibOrgBouncycastleCryptoParamsKeyParameter *)extractWithByteArray:(IOSByteArray *)salt
                                                       withByteArray:(IOSByteArray *)ikm;

- (void)expandNext;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator, hMacHash_, LibOrgBouncycastleCryptoMacsHMac *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator, info_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator, currentT_, IOSByteArray *)

__attribute__((unused)) static LibOrgBouncycastleCryptoParamsKeyParameter *LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_extractWithByteArray_withByteArray_(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator *self, IOSByteArray *salt, IOSByteArray *ikm);

__attribute__((unused)) static void LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator *self);

@implementation LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)hash_ {
  LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(self, hash_);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoDerivationParameters:(id<LibOrgBouncycastleCryptoDerivationParameters>)param {
  if (!([param isKindOfClass:[LibOrgBouncycastleCryptoParamsHKDFParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"HKDF parameters required for HKDFBytesGenerator");
  }
  LibOrgBouncycastleCryptoParamsHKDFParameters *params = (LibOrgBouncycastleCryptoParamsHKDFParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsHKDFParameters class]);
  if ([((LibOrgBouncycastleCryptoParamsHKDFParameters *) nil_chk(params)) skipExtract]) {
    [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(hMacHash_)) init__WithLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_([params getIKM])];
  }
  else {
    [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(hMacHash_)) init__WithLibOrgBouncycastleCryptoCipherParameters:LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_extractWithByteArray_withByteArray_(self, [params getSalt], [params getIKM])];
  }
  info_ = [params getInfo];
  generatedBytes_ = 0;
  currentT_ = [IOSByteArray newArrayWithLength:hashLen_];
}

- (LibOrgBouncycastleCryptoParamsKeyParameter *)extractWithByteArray:(IOSByteArray *)salt
                                                       withByteArray:(IOSByteArray *)ikm {
  return LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_extractWithByteArray_withByteArray_(self, salt, ikm);
}

- (void)expandNext {
  LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(self);
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(hMacHash_)) getUnderlyingDigest];
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  if (generatedBytes_ + len > 255 * hashLen_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"HKDF may only be used for 255 * HashLen bytes of output");
  }
  if (generatedBytes_ % hashLen_ == 0) {
    LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(self);
  }
  jint toGenerate = len;
  jint posInT = generatedBytes_ % hashLen_;
  jint leftInT = hashLen_ - generatedBytes_ % hashLen_;
  jint toCopy = JavaLangMath_minWithInt_withInt_(leftInT, toGenerate);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(currentT_, posInT, outArg, outOff, toCopy);
  generatedBytes_ += toCopy;
  toGenerate -= toCopy;
  outOff += toCopy;
  while (toGenerate > 0) {
    LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(self);
    toCopy = JavaLangMath_minWithInt_withInt_(hashLen_, toGenerate);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(currentT_, 0, outArg, outOff, toCopy);
    generatedBytes_ += toCopy;
    toGenerate -= toCopy;
    outOff += toCopy;
  }
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsKeyParameter;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(extractWithByteArray:withByteArray:);
  methods[3].selector = @selector(expandNext);
  methods[4].selector = @selector(getDigest);
  methods[5].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hMacHash_", "LLibOrgBouncycastleCryptoMacsHMac;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "info_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentT_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "generatedBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoDerivationParameters;", "extract", "[B[B", "LLibOrgBouncycastleCryptoDataLengthException;", "generateBytes", "[BII", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator = { "HKDFBytesGenerator", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator;
}

@end

void LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator *self, id<LibOrgBouncycastleCryptoDigest> hash_) {
  NSObject_init(self);
  self->hMacHash_ = new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(hash_);
  self->hashLen_ = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(hash_)) getDigestSize];
}

LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator *new_LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> hash_) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator, initWithLibOrgBouncycastleCryptoDigest_, hash_)
}

LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator *create_LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> hash_) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator, initWithLibOrgBouncycastleCryptoDigest_, hash_)
}

LibOrgBouncycastleCryptoParamsKeyParameter *LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_extractWithByteArray_withByteArray_(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator *self, IOSByteArray *salt, IOSByteArray *ikm) {
  if (salt == nil) {
    [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) init__WithLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_([IOSByteArray newArrayWithLength:self->hashLen_])];
  }
  else {
    [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) init__WithLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(salt)];
  }
  [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) updateWithByteArray:ikm withInt:0 withInt:((IOSByteArray *) nil_chk(ikm))->size_];
  IOSByteArray *prk = [IOSByteArray newArrayWithLength:self->hashLen_];
  [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) doFinalWithByteArray:prk withInt:0];
  return new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(prk);
}

void LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator *self) {
  jint n = self->generatedBytes_ / self->hashLen_ + 1;
  if (n >= 256) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"HKDF cannot generate more than 255 blocks of HashLen size");
  }
  if (self->generatedBytes_ != 0) {
    [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) updateWithByteArray:self->currentT_ withInt:0 withInt:self->hashLen_];
  }
  [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) updateWithByteArray:self->info_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->info_))->size_];
  [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) updateWithByte:(jbyte) n];
  [((LibOrgBouncycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) doFinalWithByteArray:self->currentT_ withInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsHKDFBytesGenerator)
