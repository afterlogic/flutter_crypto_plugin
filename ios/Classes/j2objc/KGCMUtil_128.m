//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/kgcm/KGCMUtil_128.java
//

#include "IOSPrimitiveArray.h"
#include "Interleave.h"
#include "J2ObjC_source.h"
#include "KGCMUtil_128.h"

@implementation LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128

+ (jint)SIZE {
  return LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)addWithLongArray:(IOSLongArray *)x
           withLongArray:(IOSLongArray *)y
           withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_addWithLongArray_withLongArray_withLongArray_(x, y, z);
}

+ (void)copy__WithLongArray:(IOSLongArray *)x
              withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_copy__WithLongArray_withLongArray_(x, z);
}

+ (jboolean)equalWithLongArray:(IOSLongArray *)x
                 withLongArray:(IOSLongArray *)y {
  return LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_equalWithLongArray_withLongArray_(x, y);
}

+ (void)multiplyWithLongArray:(IOSLongArray *)x
                withLongArray:(IOSLongArray *)y
                withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_multiplyWithLongArray_withLongArray_withLongArray_(x, y, z);
}

+ (void)multiplyXWithLongArray:(IOSLongArray *)x
                 withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_multiplyXWithLongArray_withLongArray_(x, z);
}

+ (void)multiplyX8WithLongArray:(IOSLongArray *)x
                  withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_multiplyX8WithLongArray_withLongArray_(x, z);
}

+ (void)oneWithLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_oneWithLongArray_(z);
}

+ (void)squareWithLongArray:(IOSLongArray *)x
              withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_squareWithLongArray_withLongArray_(x, z);
}

+ (void)xWithLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_xWithLongArray_(z);
}

+ (void)zeroWithLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_zeroWithLongArray_(z);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithLongArray:withLongArray:withLongArray:);
  methods[2].selector = @selector(copy__WithLongArray:withLongArray:);
  methods[3].selector = @selector(equalWithLongArray:withLongArray:);
  methods[4].selector = @selector(multiplyWithLongArray:withLongArray:withLongArray:);
  methods[5].selector = @selector(multiplyXWithLongArray:withLongArray:);
  methods[6].selector = @selector(multiplyX8WithLongArray:withLongArray:);
  methods[7].selector = @selector(oneWithLongArray:);
  methods[8].selector = @selector(squareWithLongArray:withLongArray:);
  methods[9].selector = @selector(xWithLongArray:);
  methods[10].selector = @selector(zeroWithLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "[J[J[J", "copy", "[J[J", "equal", "multiply", "multiplyX", "multiplyX8", "one", "[J", "square", "x", "zero" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128 = { "KGCMUtil_128", "lib.org.bouncycastle.crypto.modes.kgcm", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128;
}

@end

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_init(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128 *new_LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128, init)
}

LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128 *create_LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128, init)
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_addWithLongArray_withLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *y, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = IOSLongArray_Get(nil_chk(x), 0) ^ IOSLongArray_Get(nil_chk(y), 0);
  *IOSLongArray_GetRef(z, 1) = IOSLongArray_Get(x, 1) ^ IOSLongArray_Get(y, 1);
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_copy__WithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = IOSLongArray_Get(nil_chk(x), 0);
  *IOSLongArray_GetRef(z, 1) = IOSLongArray_Get(x, 1);
}

jboolean LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_equalWithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *y) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  jlong d = 0LL;
  d |= IOSLongArray_Get(nil_chk(x), 0) ^ IOSLongArray_Get(nil_chk(y), 0);
  d |= IOSLongArray_Get(x, 1) ^ IOSLongArray_Get(y, 1);
  return d == 0LL;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_multiplyWithLongArray_withLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *y, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  jlong x0 = IOSLongArray_Get(nil_chk(x), 0);
  jlong x1 = IOSLongArray_Get(x, 1);
  jlong y0 = IOSLongArray_Get(nil_chk(y), 0);
  jlong y1 = IOSLongArray_Get(y, 1);
  jlong z0 = 0;
  jlong z1 = 0;
  jlong z2 = 0;
  for (jint j = 0; j < 64; ++j) {
    jlong m0 = -(x0 & 1LL);
    JreURShiftAssignLong(&x0, 1);
    z0 ^= (y0 & m0);
    z1 ^= (y1 & m0);
    jlong m1 = -(x1 & 1LL);
    JreURShiftAssignLong(&x1, 1);
    z1 ^= (y0 & m1);
    z2 ^= (y1 & m1);
    jlong c = JreRShift64(y1, 63);
    y1 = (JreLShift64(y1, 1)) | (JreURShift64(y0, 63));
    y0 = (JreLShift64(y0, 1)) ^ (c & (jlong) 0x87LL);
  }
  z0 ^= z2 ^ (JreLShift64(z2, 1)) ^ (JreLShift64(z2, 2)) ^ (JreLShift64(z2, 7));
  z1 ^= (JreURShift64(z2, 63)) ^ (JreURShift64(z2, 62)) ^ (JreURShift64(z2, 57));
  *IOSLongArray_GetRef(nil_chk(z), 0) = z0;
  *IOSLongArray_GetRef(z, 1) = z1;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_multiplyXWithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  jlong x0 = IOSLongArray_Get(nil_chk(x), 0);
  jlong x1 = IOSLongArray_Get(x, 1);
  jlong m = JreRShift64(x1, 63);
  *IOSLongArray_GetRef(nil_chk(z), 0) = (JreLShift64(x0, 1)) ^ (m & (jlong) 0x87LL);
  *IOSLongArray_GetRef(z, 1) = (JreLShift64(x1, 1)) | (JreURShift64(x0, 63));
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_multiplyX8WithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  jlong x0 = IOSLongArray_Get(nil_chk(x), 0);
  jlong x1 = IOSLongArray_Get(x, 1);
  jlong c = JreURShift64(x1, 56);
  *IOSLongArray_GetRef(nil_chk(z), 0) = (JreLShift64(x0, 8)) ^ c ^ (JreLShift64(c, 1)) ^ (JreLShift64(c, 2)) ^ (JreLShift64(c, 7));
  *IOSLongArray_GetRef(z, 1) = (JreLShift64(x1, 8)) | (JreURShift64(x0, 56));
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_oneWithLongArray_(IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = 1;
  *IOSLongArray_GetRef(z, 1) = 0;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_squareWithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  IOSLongArray *t = [IOSLongArray newArrayWithLength:4];
  LibOrgBouncycastleMathRawInterleave_expand64To128WithLong_withLongArray_withInt_(IOSLongArray_Get(nil_chk(x), 0), t, 0);
  LibOrgBouncycastleMathRawInterleave_expand64To128WithLong_withLongArray_withInt_(IOSLongArray_Get(x, 1), t, 2);
  jlong z0 = IOSLongArray_Get(t, 0);
  jlong z1 = IOSLongArray_Get(t, 1);
  jlong z2 = IOSLongArray_Get(t, 2);
  jlong z3 = IOSLongArray_Get(t, 3);
  z1 ^= z3 ^ (JreLShift64(z3, 1)) ^ (JreLShift64(z3, 2)) ^ (JreLShift64(z3, 7));
  z2 ^= (JreURShift64(z3, 63)) ^ (JreURShift64(z3, 62)) ^ (JreURShift64(z3, 57));
  z0 ^= z2 ^ (JreLShift64(z2, 1)) ^ (JreLShift64(z2, 2)) ^ (JreLShift64(z2, 7));
  z1 ^= (JreURShift64(z2, 63)) ^ (JreURShift64(z2, 62)) ^ (JreURShift64(z2, 57));
  *IOSLongArray_GetRef(nil_chk(z), 0) = z0;
  *IOSLongArray_GetRef(z, 1) = z1;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_xWithLongArray_(IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = 2;
  *IOSLongArray_GetRef(z, 1) = 0;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_zeroWithLongArray_(IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = 0;
  *IOSLongArray_GetRef(z, 1) = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_128)
