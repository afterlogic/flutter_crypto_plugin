//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/MQVPrivateParameters.java
//

#ifndef MQVPrivateParameters_H
#define MQVPrivateParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CipherParameters.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoParamsECPrivateKeyParameters;
@class LibOrgBouncycastleCryptoParamsECPublicKeyParameters;

@interface LibOrgBouncycastleCryptoParamsMQVPrivateParameters : NSObject < LibOrgBouncycastleCryptoCipherParameters >

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)staticPrivateKey
                              withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)ephemeralPrivateKey;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)staticPrivateKey
                              withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)ephemeralPrivateKey
                               withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)ephemeralPublicKey;

- (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)getEphemeralPrivateKey;

- (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)getEphemeralPublicKey;

- (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)getStaticPrivateKey;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoParamsMQVPrivateParameters)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsMQVPrivateParameters *self, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsMQVPrivateParameters *new_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsMQVPrivateParameters *create_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoParamsMQVPrivateParameters *self, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemeralPublicKey);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsMQVPrivateParameters *new_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemeralPublicKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsMQVPrivateParameters *create_LibOrgBouncycastleCryptoParamsMQVPrivateParameters_initWithLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *staticPrivateKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *ephemeralPrivateKey, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ephemeralPublicKey);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoParamsMQVPrivateParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // MQVPrivateParameters_H
