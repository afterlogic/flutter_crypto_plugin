//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/BaseKDFBytesGenerator.java
//

#include "BaseKDFBytesGenerator.h"
#include "DerivationParameters.h"
#include "Digest.h"
#include "IOSPrimitiveArray.h"
#include "ISO18033KDFParameters.h"
#include "J2ObjC_source.h"
#include "KDFParameters.h"
#include "OutputLengthException.h"
#include "Pack.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator () {
 @public
  jint counterStart_;
  id<LibOrgBouncycastleCryptoDigest> digest_;
  IOSByteArray *shared_;
  IOSByteArray *iv_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator, shared_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator, iv_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator

- (instancetype)initWithInt:(jint)counterStart
withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator_initWithInt_withLibOrgBouncycastleCryptoDigest_(self, counterStart, digest);
  return self;
}

- (void)init__WithLibOrgBouncycastleCryptoDerivationParameters:(id<LibOrgBouncycastleCryptoDerivationParameters>)param {
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsKDFParameters class]]) {
    LibOrgBouncycastleCryptoParamsKDFParameters *p = (LibOrgBouncycastleCryptoParamsKDFParameters *) param;
    shared_ = [((LibOrgBouncycastleCryptoParamsKDFParameters *) nil_chk(p)) getSharedSecret];
    iv_ = [p getIV];
  }
  else if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsISO18033KDFParameters class]]) {
    LibOrgBouncycastleCryptoParamsISO18033KDFParameters *p = (LibOrgBouncycastleCryptoParamsISO18033KDFParameters *) param;
    shared_ = [((LibOrgBouncycastleCryptoParamsISO18033KDFParameters *) nil_chk(p)) getSeed];
    iv_ = nil;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"KDF parameters required for generator");
  }
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return digest_;
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  if ((((IOSByteArray *) nil_chk(outArg))->size_ - len) < outOff) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too small");
  }
  jlong oBytes = len;
  jint outLen = [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize];
  if (oBytes > ((JreLShift64(2LL, 32)) - 1)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Output length too large");
  }
  jint cThreshold = (jint) ((oBytes + outLen - 1) / outLen);
  IOSByteArray *dig = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  IOSByteArray *C = [IOSByteArray newArrayWithLength:4];
  LibOrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(counterStart_, C, 0);
  jint counterBase = counterStart_ & ~(jint) 0xFF;
  for (jint i = 0; i < cThreshold; i++) {
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:shared_ withInt:0 withInt:((IOSByteArray *) nil_chk(shared_))->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
    if (iv_ != nil) {
      [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:iv_ withInt:0 withInt:iv_->size_];
    }
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:dig withInt:0];
    if (len > outLen) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dig, 0, outArg, outOff, outLen);
      outOff += outLen;
      len -= outLen;
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dig, 0, outArg, outOff, len);
    }
    if (++(*IOSByteArray_GetRef(C, 3)) == 0) {
      counterBase += (jint) 0x100;
      LibOrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(counterBase, C, 0);
    }
  }
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  return (jint) oBytes;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "counterStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shared_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILLibOrgBouncycastleCryptoDigest;", "init", "LLibOrgBouncycastleCryptoDerivationParameters;", "generateBytes", "[BII", "LLibOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator = { "BaseKDFBytesGenerator", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator;
}

@end

void LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator_initWithInt_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator *self, jint counterStart, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->counterStart_ = counterStart;
  self->digest_ = digest;
}

LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator *new_LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator_initWithInt_withLibOrgBouncycastleCryptoDigest_(jint counterStart, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator, initWithInt_withLibOrgBouncycastleCryptoDigest_, counterStart, digest)
}

LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator *create_LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator_initWithInt_withLibOrgBouncycastleCryptoDigest_(jint counterStart, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator, initWithInt_withLibOrgBouncycastleCryptoDigest_, counterStart, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsBaseKDFBytesGenerator)
