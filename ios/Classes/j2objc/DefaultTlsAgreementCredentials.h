//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsAgreementCredentials.java
//

#ifndef DefaultTlsAgreementCredentials_H
#define DefaultTlsAgreementCredentials_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AbstractTlsAgreementCredentials.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoTlsCertificate;
@protocol LibOrgBouncycastleCryptoBasicAgreement;

@interface LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials : LibOrgBouncycastleCryptoTlsAbstractTlsAgreementCredentials {
 @public
  LibOrgBouncycastleCryptoTlsCertificate *certificate_;
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey_;
  id<LibOrgBouncycastleCryptoBasicAgreement> basicAgreement_;
  jboolean truncateAgreement_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)certificate
                withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey;

- (IOSByteArray *)generateAgreementWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)peerPublicKey;

- (LibOrgBouncycastleCryptoTlsCertificate *)getCertificate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials, certificate_, LibOrgBouncycastleCryptoTlsCertificate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials, privateKey_, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials, basicAgreement_, id<LibOrgBouncycastleCryptoBasicAgreement>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials_initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials *self, LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials *new_LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials_initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials *create_LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials_initWithLibOrgBouncycastleCryptoTlsCertificate_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoTlsCertificate *certificate, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDefaultTlsAgreementCredentials)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DefaultTlsAgreementCredentials_H
