//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/qtesla/PqcJcajceQteslaKeyPairGeneratorSpi.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BCqTESLAPrivateKey.h"
#include "BCqTESLAPublicKey.h"
#include "CryptoServicesRegistrar.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "PqcJcajceQteslaKeyPairGeneratorSpi.h"
#include "QTESLAKeyGenerationParameters.h"
#include "QTESLAKeyPairGenerator.h"
#include "QTESLAParameterSpec.h"
#include "QTESLAPrivateKeyParameters.h"
#include "QTESLAPublicKeyParameters.h"
#include "QTESLASecurityCategory.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi () {
 @public
  LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters *param_;
  LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *engine_;
  JavaSecuritySecureRandom *random_;
  jboolean initialised_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi, param_, LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi, engine_, LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi, random_, JavaSecuritySecureRandom *)

inline id<JavaUtilMap> LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_get_catLookup(void);
static id<JavaUtilMap> LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi, catLookup, id<JavaUtilMap>)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi)

@implementation LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"use AlgorithmParameterSpec");
}

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (!([params isKindOfClass:[LibOrgBouncycastlePqcJcajceSpecQTESLAParameterSpec class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not a QTESLAParameterSpec");
  }
  LibOrgBouncycastlePqcJcajceSpecQTESLAParameterSpec *qteslaParams = (LibOrgBouncycastlePqcJcajceSpecQTESLAParameterSpec *) cast_chk(params, [LibOrgBouncycastlePqcJcajceSpecQTESLAParameterSpec class]);
  param_ = new_LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters_initWithInt_withJavaSecuritySecureRandom_([((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup)) getWithId:[((LibOrgBouncycastlePqcJcajceSpecQTESLAParameterSpec *) nil_chk(qteslaParams)) getSecurityCategory]], [JavaLangInteger class])))) intValue], random);
  [((LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param_];
  initialised_ = true;
}

- (JavaSecurityKeyPair *)generateKeyPair {
  if (!initialised_) {
    param_ = new_LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters_initWithInt_withJavaSecuritySecureRandom_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_I, random_);
    [((LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *pub = (LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [LibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters class]);
  LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *priv = (LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters *) cast_chk([pair getPrivate], [LibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters class]);
  return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastlePqcJcajceProviderQteslaBCqTESLAPublicKey_initWithLibOrgBouncycastlePqcCryptoQteslaQTESLAPublicKeyParameters_(pub), new_LibOrgBouncycastlePqcJcajceProviderQteslaBCqTESLAPrivateKey_initWithLibOrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters_(priv));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "catLookup", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "param_", "LLibOrgBouncycastlePqcCryptoQteslaQTESLAKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "engine_", "LLibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", &LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi = { "PqcJcajceQteslaKeyPairGeneratorSpi", "lib.org.bouncycastle.pqc.jcajce.provider.qtesla", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi class]) {
    LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup = new_JavaUtilHashMap_init();
    {
      (void) [LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup putWithId:LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getNameWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_I) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_I)];
      (void) [LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup putWithId:LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getNameWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SIZE) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SIZE)];
      (void) [LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup putWithId:LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getNameWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SPEED) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SPEED)];
      (void) [LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup putWithId:LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getNameWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_I) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_I)];
      (void) [LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_catLookup putWithId:LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getNameWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_III) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_III)];
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi)
  }
}

@end

void LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_init(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self, @"qTESLA");
  self->engine_ = new_LibOrgBouncycastlePqcCryptoQteslaQTESLAKeyPairGenerator_init();
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
}

LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi *new_LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi, init)
}

LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi *create_LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderQteslaPqcJcajceQteslaKeyPairGeneratorSpi)
