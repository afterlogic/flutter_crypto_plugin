//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/mceliece/McElieceCipher.java
//

#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "GF2Matrix.h"
#include "GF2Vector.h"
#include "GF2mField.h"
#include "GoppaCode.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "McElieceCipher.h"
#include "McElieceKeyParameters.h"
#include "McEliecePrivateKeyParameters.h"
#include "McEliecePublicKeyParameters.h"
#include "ParametersWithRandom.h"
#include "Permutation.h"
#include "PolynomialGF2mSmallM.h"
#include "Vector.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher () {
 @public
  JavaSecuritySecureRandom *sr_;
  jint n_;
  jint k_;
  jint t_;
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *key_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)computeMessageRepresentativeWithByteArray:(IOSByteArray *)input;

- (IOSByteArray *)computeMessageWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector:(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)mr;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher, sr_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher, key_, LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pubKey);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey);

__attribute__((unused)) static LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, IOSByteArray *input);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *mr);

NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.1";

@implementation LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher

+ (NSString *)OID {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_OID;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->sr_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk([rParam getParameters], [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]);
      LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]));
    }
    else {
      self->sr_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]);
      LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]));
    }
  }
  else {
    self->key_ = (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]);
    LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(self, (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]));
  }
}

- (jint)getKeySizeWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *)key {
  if ([key isKindOfClass:[LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]]) {
    return [((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) key))) getN];
  }
  if ([key isKindOfClass:[LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]]) {
    return [((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}

- (void)initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *)pubKey {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, pubKey);
}

- (void)initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:(LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *)privKey {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(self, privKey);
}

- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  if (!forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *m = LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(self, input);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *z = new_LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(n_, t_, sr_);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *g = [((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class])))) getG];
  LibOrgBouncycastlePqcMathLinearalgebraVector *mG = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(g)) leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:m];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *mGZ = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraVector *) nil_chk(mG)) addWithLibOrgBouncycastlePqcMathLinearalgebraVector:z], [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  return [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mGZ)) getEncoded];
}

- (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)computeMessageRepresentativeWithByteArray:(IOSByteArray *)input {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(self, input);
}

- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  if (forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *vec = LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, input);
  LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey = (LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]);
  LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field = [((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(privKey)) getField];
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *gp = [privKey getGoppaPoly];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *sInv = [privKey getSInv];
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *p1 = [privKey getP1];
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *p2 = [privKey getP2];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *h = [privKey getH];
  IOSObjectArray *qInv = [privKey getQInv];
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *p = [((LibOrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p1)) rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:p2];
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *pInv = [((LibOrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p)) computeInverse];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *cPInv = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(vec)) multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:pInv], [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *syndrome = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(h)) rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:cPInv], [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *z = LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_syndromeDecodeWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_withLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallMArray_(syndrome, field, gp, qInv);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *mSG = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(cPInv)) addWithLibOrgBouncycastlePqcMathLinearalgebraVector:z], [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  mSG = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mSG)) multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:p1], [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  z = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(z)) multiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:p], [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *mS = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mSG)) extractRightVectorWithInt:k_];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *mVec = (LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(sInv)) leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:mS], [LibOrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(self, mVec);
}

- (IOSByteArray *)computeMessageWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector:(LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *)mr {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(self, mr);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraGF2Vector;", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 9, 12, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithLibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters:);
  methods[3].selector = @selector(initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:);
  methods[4].selector = @selector(initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:);
  methods[5].selector = @selector(messageEncryptWithByteArray:);
  methods[6].selector = @selector(computeMessageRepresentativeWithByteArray:);
  methods[7].selector = @selector(messageDecryptWithByteArray:);
  methods[8].selector = @selector(computeMessageWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxPlainTextSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "cipherTextSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "getKeySize", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters;", "initCipherEncrypt", "LLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters;", "initCipherDecrypt", "LLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters;", "messageEncrypt", "[B", "computeMessageRepresentative", "messageDecrypt", "LLibOrgBouncycastleCryptoInvalidCipherTextException;", "computeMessage", "LLibOrgBouncycastlePqcMathLinearalgebraGF2Vector;", &LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_OID };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher = { "McElieceCipher", "lib.org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 9, 9, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher;
}

@end

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher, init)
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *create_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher, init)
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pubKey) {
  self->sr_ = self->sr_ != nil ? self->sr_ : LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->n_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(pubKey)) getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
  self->cipherTextSize_ = JreRShift32(self->n_, 3);
  self->maxPlainTextSize_ = (JreRShift32(self->k_, 3));
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithLibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey) {
  self->n_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(privKey)) getN];
  self->k_ = [privKey getK];
  self->maxPlainTextSize_ = (JreRShift32(self->k_, 3));
  self->cipherTextSize_ = JreRShift32(self->n_, 3);
}

LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, IOSByteArray *input) {
  IOSByteArray *data = [IOSByteArray newArrayWithLength:self->maxPlainTextSize_ + ((self->k_ & (jint) 0x07) != 0 ? 1 : 0)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, 0, data, 0, ((IOSByteArray *) nil_chk(input))->size_);
  *IOSByteArray_GetRef(data, input->size_) = (jint) 0x01;
  return LibOrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(self->k_, data);
}

IOSByteArray *LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithLibOrgBouncycastlePqcMathLinearalgebraGF2Vector_(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *mr) {
  IOSByteArray *mrBytes = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mr)) getEncoded];
  jint index;
  for (index = ((IOSByteArray *) nil_chk(mrBytes))->size_ - 1; index >= 0 && IOSByteArray_Get(mrBytes, index) == 0; index--) {
    
    ;
  }
  if (index < 0 || IOSByteArray_Get(mrBytes, index) != (jint) 0x01) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  IOSByteArray *mBytes = [IOSByteArray newArrayWithLength:index];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mrBytes, 0, mBytes, 0, index);
  return mBytes;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCipher)
