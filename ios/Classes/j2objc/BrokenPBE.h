//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/BrokenPBE.java
//

#ifndef BrokenPBE_H
#define BrokenPBE_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PBEParametersGenerator.h"

@class LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoCipherParameters;
@protocol LibOrgBouncycastleCryptoDigest;

@interface LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator : LibOrgBouncycastleCryptoPBEParametersGenerator
@property (readonly, class) jint KEY_MATERIAL NS_SWIFT_NAME(KEY_MATERIAL);
@property (readonly, class) jint IV_MATERIAL NS_SWIFT_NAME(IV_MATERIAL);
@property (readonly, class) jint MAC_MATERIAL NS_SWIFT_NAME(MAC_MATERIAL);

+ (jint)KEY_MATERIAL;

+ (jint)IV_MATERIAL;

+ (jint)MAC_MATERIAL;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest;

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedMacParametersWithInt:(jint)keySize;

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedParametersWithInt:(jint)keySize;

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedParametersWithInt:(jint)keySize
                                                                         withInt:(jint)ivSize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator)

inline jint LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_get_KEY_MATERIAL(void);
#define LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_KEY_MATERIAL 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator, KEY_MATERIAL, jint)

inline jint LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_get_IV_MATERIAL(void);
#define LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_IV_MATERIAL 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator, IV_MATERIAL, jint)

inline jint LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_get_MAC_MATERIAL(void);
#define LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_MAC_MATERIAL 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator, MAC_MATERIAL, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *self, id<LibOrgBouncycastleCryptoDigest> digest);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *new_LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator *create_LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> digest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderOldPKCS12ParametersGenerator)

@protocol LibOrgBouncycastleJceProviderBrokenPBE < JavaObject >

@end

@interface LibOrgBouncycastleJceProviderBrokenPBE : NSObject
@property (readonly, class) jint MD5 NS_SWIFT_NAME(MD5);
@property (readonly, class) jint SHA1 NS_SWIFT_NAME(SHA1);
@property (readonly, class) jint RIPEMD160 NS_SWIFT_NAME(RIPEMD160);
@property (readonly, class) jint PKCS5S1 NS_SWIFT_NAME(PKCS5S1);
@property (readonly, class) jint PKCS5S2 NS_SWIFT_NAME(PKCS5S2);
@property (readonly, class) jint PKCS12 NS_SWIFT_NAME(PKCS12);
@property (readonly, class) jint OLD_PKCS12 NS_SWIFT_NAME(OLD_PKCS12);

+ (jint)MD5;

+ (jint)SHA1;

+ (jint)RIPEMD160;

+ (jint)PKCS5S1;

+ (jint)PKCS5S2;

+ (jint)PKCS12;

+ (jint)OLD_PKCS12;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenPBE)

inline jint LibOrgBouncycastleJceProviderBrokenPBE_get_MD5(void);
#define LibOrgBouncycastleJceProviderBrokenPBE_MD5 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderBrokenPBE, MD5, jint)

inline jint LibOrgBouncycastleJceProviderBrokenPBE_get_SHA1(void);
#define LibOrgBouncycastleJceProviderBrokenPBE_SHA1 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderBrokenPBE, SHA1, jint)

inline jint LibOrgBouncycastleJceProviderBrokenPBE_get_RIPEMD160(void);
#define LibOrgBouncycastleJceProviderBrokenPBE_RIPEMD160 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderBrokenPBE, RIPEMD160, jint)

inline jint LibOrgBouncycastleJceProviderBrokenPBE_get_PKCS5S1(void);
#define LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S1 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderBrokenPBE, PKCS5S1, jint)

inline jint LibOrgBouncycastleJceProviderBrokenPBE_get_PKCS5S2(void);
#define LibOrgBouncycastleJceProviderBrokenPBE_PKCS5S2 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderBrokenPBE, PKCS5S2, jint)

inline jint LibOrgBouncycastleJceProviderBrokenPBE_get_PKCS12(void);
#define LibOrgBouncycastleJceProviderBrokenPBE_PKCS12 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderBrokenPBE, PKCS12, jint)

inline jint LibOrgBouncycastleJceProviderBrokenPBE_get_OLD_PKCS12(void);
#define LibOrgBouncycastleJceProviderBrokenPBE_OLD_PKCS12 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJceProviderBrokenPBE, OLD_PKCS12, jint)

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenPBE)

@interface LibOrgBouncycastleJceProviderBrokenPBE_Util : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Package-Private

+ (id<LibOrgBouncycastleCryptoCipherParameters>)makePBEMacParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey:(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *)pbeKey
                                                                                   withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec
                                                                                                                      withInt:(jint)type
                                                                                                                      withInt:(jint)hash_
                                                                                                                      withInt:(jint)keySize;

+ (id<LibOrgBouncycastleCryptoCipherParameters>)makePBEParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey:(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *)pbeKey
                                                                                withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec
                                                                                                                   withInt:(jint)type
                                                                                                                   withInt:(jint)hash_
                                                                                                              withNSString:(NSString *)targetAlgorithm
                                                                                                                   withInt:(jint)keySize
                                                                                                                   withInt:(jint)ivSize;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenPBE_Util)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenPBE_Util_init(LibOrgBouncycastleJceProviderBrokenPBE_Util *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenPBE_Util *new_LibOrgBouncycastleJceProviderBrokenPBE_Util_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenPBE_Util *create_LibOrgBouncycastleJceProviderBrokenPBE_Util_init(void);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoCipherParameters> LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withInt_withInt_withNSString_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *pbeKey, id<JavaSecuritySpecAlgorithmParameterSpec> spec, jint type, jint hash_, NSString *targetAlgorithm, jint keySize, jint ivSize);

FOUNDATION_EXPORT id<LibOrgBouncycastleCryptoCipherParameters> LibOrgBouncycastleJceProviderBrokenPBE_Util_makePBEMacParametersWithLibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withInt_withInt_withInt_(LibOrgBouncycastleJcajceProviderSymmetricUtilBCPBEKey *pbeKey, id<JavaSecuritySpecAlgorithmParameterSpec> spec, jint type, jint hash_, jint keySize);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenPBE_Util)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BrokenPBE_H
