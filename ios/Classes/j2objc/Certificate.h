//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/Certificate.java
//

#ifndef Certificate_H
#define Certificate_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class LibOrgBouncycastleAsn1X509X509Certificate;

@interface LibOrgBouncycastleCryptoTlsCertificate : NSObject {
 @public
  IOSObjectArray *certificateList_;
}
@property (readonly, class) LibOrgBouncycastleCryptoTlsCertificate *EMPTY_CHAIN NS_SWIFT_NAME(EMPTY_CHAIN);

+ (LibOrgBouncycastleCryptoTlsCertificate *)EMPTY_CHAIN;

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509X509CertificateArray:(IOSObjectArray *)certificateList;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (LibOrgBouncycastleAsn1X509X509Certificate *)getCertificateAtWithInt:(jint)index;

- (IOSObjectArray *)getCertificateList;

- (jint)getLength;

- (jboolean)isEmpty;

+ (LibOrgBouncycastleCryptoTlsCertificate *)parseWithJavaIoInputStream:(JavaIoInputStream *)input;

#pragma mark Protected

- (IOSObjectArray *)cloneCertificateList;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsCertificate)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsCertificate, certificateList_, IOSObjectArray *)

inline LibOrgBouncycastleCryptoTlsCertificate *LibOrgBouncycastleCryptoTlsCertificate_get_EMPTY_CHAIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificate *LibOrgBouncycastleCryptoTlsCertificate_EMPTY_CHAIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsCertificate, EMPTY_CHAIN, LibOrgBouncycastleCryptoTlsCertificate *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsCertificate_initWithLibOrgBouncycastleAsn1X509X509CertificateArray_(LibOrgBouncycastleCryptoTlsCertificate *self, IOSObjectArray *certificateList);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificate *new_LibOrgBouncycastleCryptoTlsCertificate_initWithLibOrgBouncycastleAsn1X509X509CertificateArray_(IOSObjectArray *certificateList) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificate *create_LibOrgBouncycastleCryptoTlsCertificate_initWithLibOrgBouncycastleAsn1X509X509CertificateArray_(IOSObjectArray *certificateList);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsCertificate *LibOrgBouncycastleCryptoTlsCertificate_parseWithJavaIoInputStream_(JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsCertificate)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Certificate_H
