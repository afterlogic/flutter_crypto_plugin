//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/KeyExchangeAlgorithm.java
//

#include "J2ObjC_source.h"
#include "KeyExchangeAlgorithm.h"

@implementation LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm

+ (jint)NULL_ {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_NULL;
}

+ (jint)RSA {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA;
}

+ (jint)RSA_EXPORT {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA_EXPORT;
}

+ (jint)DHE_DSS {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS;
}

+ (jint)DHE_DSS_EXPORT {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS_EXPORT;
}

+ (jint)DHE_RSA {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA;
}

+ (jint)DHE_RSA_EXPORT {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA_EXPORT;
}

+ (jint)DH_DSS {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS;
}

+ (jint)DH_DSS_EXPORT {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS_EXPORT;
}

+ (jint)DH_RSA {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA;
}

+ (jint)DH_RSA_EXPORT {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA_EXPORT;
}

+ (jint)DH_anon {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_anon;
}

+ (jint)DH_anon_EXPORT {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_anon_EXPORT;
}

+ (jint)PSK {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_PSK;
}

+ (jint)DHE_PSK {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK;
}

+ (jint)RSA_PSK {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK;
}

+ (jint)ECDH_ECDSA {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_ECDSA;
}

+ (jint)ECDHE_ECDSA {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_ECDSA;
}

+ (jint)ECDH_RSA {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_RSA;
}

+ (jint)ECDHE_RSA {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_RSA;
}

+ (jint)ECDH_anon {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_anon;
}

+ (jint)SRP {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP;
}

+ (jint)SRP_DSS {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS;
}

+ (jint)SRP_RSA {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA;
}

+ (jint)ECDHE_PSK {
  return LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_NULL, 0x19, -1, -1, -1, -1 },
    { "RSA", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA, 0x19, -1, -1, -1, -1 },
    { "RSA_EXPORT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA_EXPORT, 0x19, -1, -1, -1, -1 },
    { "DHE_DSS", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS, 0x19, -1, -1, -1, -1 },
    { "DHE_DSS_EXPORT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS_EXPORT, 0x19, -1, -1, -1, -1 },
    { "DHE_RSA", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA, 0x19, -1, -1, -1, -1 },
    { "DHE_RSA_EXPORT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA_EXPORT, 0x19, -1, -1, -1, -1 },
    { "DH_DSS", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS, 0x19, -1, -1, -1, -1 },
    { "DH_DSS_EXPORT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS_EXPORT, 0x19, -1, -1, -1, -1 },
    { "DH_RSA", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA, 0x19, -1, -1, -1, -1 },
    { "DH_RSA_EXPORT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA_EXPORT, 0x19, -1, -1, -1, -1 },
    { "DH_anon", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_anon, 0x19, -1, -1, -1, -1 },
    { "DH_anon_EXPORT", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DH_anon_EXPORT, 0x19, -1, -1, -1, -1 },
    { "PSK", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_PSK, 0x19, -1, -1, -1, -1 },
    { "DHE_PSK", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK, 0x19, -1, -1, -1, -1 },
    { "RSA_PSK", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK, 0x19, -1, -1, -1, -1 },
    { "ECDH_ECDSA", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_ECDSA, 0x19, -1, -1, -1, -1 },
    { "ECDHE_ECDSA", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_ECDSA, 0x19, -1, -1, -1, -1 },
    { "ECDH_RSA", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_RSA, 0x19, -1, -1, -1, -1 },
    { "ECDHE_RSA", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_RSA, 0x19, -1, -1, -1, -1 },
    { "ECDH_anon", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDH_anon, 0x19, -1, -1, -1, -1 },
    { "SRP", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP, 0x19, -1, -1, -1, -1 },
    { "SRP_DSS", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS, 0x19, -1, -1, -1, -1 },
    { "SRP_RSA", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA, 0x19, -1, -1, -1, -1 },
    { "ECDHE_PSK", "I", .constantValue.asInt = LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK, 0x19, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm = { "KeyExchangeAlgorithm", "lib.org.bouncycastle.crypto.tls", NULL, methods, fields, 7, 0x1, 1, 25, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm;
}

@end

void LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_init(LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm *new_LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm, init)
}

LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm *create_LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsKeyExchangeAlgorithm)
