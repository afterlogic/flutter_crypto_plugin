//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/cmc/PublishTrustAnchors.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Integer.h"
#include "ASN1Object.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "DEROctetString.h"
#include "DERSequence.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PublishTrustAnchors.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleAsn1CmcPublishTrustAnchors () {
 @public
  LibOrgBouncycastleAsn1ASN1Integer *seqNumber_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm_;
  LibOrgBouncycastleAsn1ASN1Sequence *anchorHashes_;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmcPublishTrustAnchors, seqNumber_, LibOrgBouncycastleAsn1ASN1Integer *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmcPublishTrustAnchors, hashAlgorithm_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1CmcPublishTrustAnchors, anchorHashes_, LibOrgBouncycastleAsn1ASN1Sequence *)

__attribute__((unused)) static void LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CmcPublishTrustAnchors *self, LibOrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static LibOrgBouncycastleAsn1CmcPublishTrustAnchors *new_LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleAsn1CmcPublishTrustAnchors *create_LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq);

@implementation LibOrgBouncycastleAsn1CmcPublishTrustAnchors

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)seqNumber
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)hashAlgorithm
                            withByteArray2:(IOSObjectArray *)anchorHashes {
  LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithJavaMathBigInteger_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray2_(self, seqNumber, hashAlgorithm, anchorHashes);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)seq {
  LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithLibOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}

+ (LibOrgBouncycastleAsn1CmcPublishTrustAnchors *)getInstanceWithId:(id)o {
  return LibOrgBouncycastleAsn1CmcPublishTrustAnchors_getInstanceWithId_(o);
}

- (JavaMathBigInteger *)getSeqNumber {
  return [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(seqNumber_)) getValue];
}

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getHashAlgorithm {
  return hashAlgorithm_;
}

- (IOSObjectArray *)getAnchorHashes {
  IOSObjectArray *hashes = [IOSObjectArray newArrayWithLength:[((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(anchorHashes_)) size] type:IOSClass_byteArray(1)];
  for (jint i = 0; i != hashes->size_; i++) {
    (void) IOSObjectArray_Set(hashes, i, LibOrgBouncycastleUtilArrays_cloneWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([anchorHashes_ getObjectAtWithInt:i]))) getOctets]));
  }
  return hashes;
}

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:seqNumber_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:hashAlgorithm_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:anchorHashes_];
  return new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1CmcPublishTrustAnchors;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withByteArray2:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[2].selector = @selector(getInstanceWithId:);
  methods[3].selector = @selector(getSeqNumber);
  methods[4].selector = @selector(getHashAlgorithm);
  methods[5].selector = @selector(getAnchorHashes);
  methods[6].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seqNumber_", "LLibOrgBouncycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hashAlgorithm_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "anchorHashes_", "LLibOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[[B", "LLibOrgBouncycastleAsn1ASN1Sequence;", "getInstance", "LNSObject;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1CmcPublishTrustAnchors = { "PublishTrustAnchors", "lib.org.bouncycastle.asn1.cmc", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1CmcPublishTrustAnchors;
}

@end

void LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithJavaMathBigInteger_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray2_(LibOrgBouncycastleAsn1CmcPublishTrustAnchors *self, JavaMathBigInteger *seqNumber, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, IOSObjectArray *anchorHashes) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  self->seqNumber_ = new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(seqNumber);
  self->hashAlgorithm_ = hashAlgorithm;
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(anchorHashes))->size_; i++) {
    [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(LibOrgBouncycastleUtilArrays_cloneWithByteArray_(IOSObjectArray_Get(anchorHashes, i)))];
  }
  self->anchorHashes_ = new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

LibOrgBouncycastleAsn1CmcPublishTrustAnchors *new_LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithJavaMathBigInteger_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray2_(JavaMathBigInteger *seqNumber, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, IOSObjectArray *anchorHashes) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmcPublishTrustAnchors, initWithJavaMathBigInteger_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray2_, seqNumber, hashAlgorithm, anchorHashes)
}

LibOrgBouncycastleAsn1CmcPublishTrustAnchors *create_LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithJavaMathBigInteger_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray2_(JavaMathBigInteger *seqNumber, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, IOSObjectArray *anchorHashes) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmcPublishTrustAnchors, initWithJavaMathBigInteger_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray2_, seqNumber, hashAlgorithm, anchorHashes)
}

void LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1CmcPublishTrustAnchors *self, LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  LibOrgBouncycastleAsn1ASN1Object_init(self);
  if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] != 3) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"incorrect sequence size");
  }
  self->seqNumber_ = LibOrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:0]);
  self->hashAlgorithm_ = LibOrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([seq getObjectAtWithInt:1]);
  self->anchorHashes_ = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([seq getObjectAtWithInt:2]);
}

LibOrgBouncycastleAsn1CmcPublishTrustAnchors *new_LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1CmcPublishTrustAnchors, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1CmcPublishTrustAnchors *create_LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1CmcPublishTrustAnchors, initWithLibOrgBouncycastleAsn1ASN1Sequence_, seq)
}

LibOrgBouncycastleAsn1CmcPublishTrustAnchors *LibOrgBouncycastleAsn1CmcPublishTrustAnchors_getInstanceWithId_(id o) {
  LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initialize();
  if ([o isKindOfClass:[LibOrgBouncycastleAsn1CmcPublishTrustAnchors class]]) {
    return (LibOrgBouncycastleAsn1CmcPublishTrustAnchors *) o;
  }
  if (o != nil) {
    return new_LibOrgBouncycastleAsn1CmcPublishTrustAnchors_initWithLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(o));
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1CmcPublishTrustAnchors)
