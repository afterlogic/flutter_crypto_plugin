//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SRTPProtectionProfile.java
//

#ifndef SRTPProtectionProfile_H
#define SRTPProtectionProfile_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsSRTPProtectionProfile : NSObject
@property (readonly, class) jint SRTP_AES128_CM_HMAC_SHA1_80 NS_SWIFT_NAME(SRTP_AES128_CM_HMAC_SHA1_80);
@property (readonly, class) jint SRTP_AES128_CM_HMAC_SHA1_32 NS_SWIFT_NAME(SRTP_AES128_CM_HMAC_SHA1_32);
@property (readonly, class) jint SRTP_NULL_HMAC_SHA1_80 NS_SWIFT_NAME(SRTP_NULL_HMAC_SHA1_80);
@property (readonly, class) jint SRTP_NULL_HMAC_SHA1_32 NS_SWIFT_NAME(SRTP_NULL_HMAC_SHA1_32);
@property (readonly, class) jint SRTP_AEAD_AES_128_GCM NS_SWIFT_NAME(SRTP_AEAD_AES_128_GCM);
@property (readonly, class) jint SRTP_AEAD_AES_256_GCM NS_SWIFT_NAME(SRTP_AEAD_AES_256_GCM);

+ (jint)SRTP_AES128_CM_HMAC_SHA1_80;

+ (jint)SRTP_AES128_CM_HMAC_SHA1_32;

+ (jint)SRTP_NULL_HMAC_SHA1_80;

+ (jint)SRTP_NULL_HMAC_SHA1_32;

+ (jint)SRTP_AEAD_AES_128_GCM;

+ (jint)SRTP_AEAD_AES_256_GCM;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile)

inline jint LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_get_SRTP_AES128_CM_HMAC_SHA1_80(void);
#define LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_SRTP_AES128_CM_HMAC_SHA1_80 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile, SRTP_AES128_CM_HMAC_SHA1_80, jint)

inline jint LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_get_SRTP_AES128_CM_HMAC_SHA1_32(void);
#define LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_SRTP_AES128_CM_HMAC_SHA1_32 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile, SRTP_AES128_CM_HMAC_SHA1_32, jint)

inline jint LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_get_SRTP_NULL_HMAC_SHA1_80(void);
#define LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_SRTP_NULL_HMAC_SHA1_80 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile, SRTP_NULL_HMAC_SHA1_80, jint)

inline jint LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_get_SRTP_NULL_HMAC_SHA1_32(void);
#define LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_SRTP_NULL_HMAC_SHA1_32 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile, SRTP_NULL_HMAC_SHA1_32, jint)

inline jint LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_get_SRTP_AEAD_AES_128_GCM(void);
#define LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_SRTP_AEAD_AES_128_GCM 7
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile, SRTP_AEAD_AES_128_GCM, jint)

inline jint LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_get_SRTP_AEAD_AES_256_GCM(void);
#define LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_SRTP_AEAD_AES_256_GCM 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile, SRTP_AEAD_AES_256_GCM, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_init(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRTPProtectionProfile *new_LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsSRTPProtectionProfile *create_LibOrgBouncycastleCryptoTlsSRTPProtectionProfile_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsSRTPProtectionProfile)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SRTPProtectionProfile_H
