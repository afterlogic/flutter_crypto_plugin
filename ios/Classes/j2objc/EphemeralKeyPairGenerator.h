//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/EphemeralKeyPairGenerator.java
//

#ifndef EphemeralKeyPairGenerator_H
#define EphemeralKeyPairGenerator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoEphemeralKeyPair;
@protocol LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator;
@protocol LibOrgBouncycastleCryptoKeyEncoder;

@interface LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator:(id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>)gen
                                                    withLibOrgBouncycastleCryptoKeyEncoder:(id<LibOrgBouncycastleCryptoKeyEncoder>)keyEncoder;

- (LibOrgBouncycastleCryptoEphemeralKeyPair *)generate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_withLibOrgBouncycastleCryptoKeyEncoder_(LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator *self, id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator> gen, id<LibOrgBouncycastleCryptoKeyEncoder> keyEncoder);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator *new_LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_withLibOrgBouncycastleCryptoKeyEncoder_(id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator> gen, id<LibOrgBouncycastleCryptoKeyEncoder> keyEncoder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator *create_LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator_withLibOrgBouncycastleCryptoKeyEncoder_(id<LibOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator> gen, id<LibOrgBouncycastleCryptoKeyEncoder> keyEncoder);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoGeneratorsEphemeralKeyPairGenerator)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // EphemeralKeyPairGenerator_H
