//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/SSHBuffer.java
//

#include "Arrays.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SSHBuffer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoUtilSSHBuffer () {
 @public
  IOSByteArray *buffer_;
  jint pos_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoUtilSSHBuffer, buffer_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoUtilSSHBuffer

- (instancetype)initWithByteArray:(IOSByteArray *)magic
                    withByteArray:(IOSByteArray *)buffer {
  LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_withByteArray_(self, magic, buffer);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)buffer {
  LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_(self, buffer);
  return self;
}

- (jint)readU32 {
  if (pos_ + 4 > ((IOSByteArray *) nil_chk(buffer_))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"4 bytes for U32 exceeds buffer.");
  }
  jint i = JreLShift32((IOSByteArray_Get(buffer_, pos_++) & (jint) 0xFF), 24);
  i |= JreLShift32((IOSByteArray_Get(buffer_, pos_++) & (jint) 0xFF), 16);
  i |= JreLShift32((IOSByteArray_Get(buffer_, pos_++) & (jint) 0xFF), 8);
  i |= (IOSByteArray_Get(buffer_, pos_++) & (jint) 0xFF);
  return i;
}

- (IOSByteArray *)readString {
  jint len = [self readU32];
  if (len == 0) {
    return [IOSByteArray newArrayWithLength:0];
  }
  if (pos_ + len > ((IOSByteArray *) nil_chk(buffer_))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not enough data for string");
  }
  return LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(buffer_, pos_, pos_ += len);
}

- (IOSByteArray *)readPaddedString {
  jint len = [self readU32];
  if (len == 0) {
    return [IOSByteArray newArrayWithLength:0];
  }
  if (pos_ + len > ((IOSByteArray *) nil_chk(buffer_))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not enough data for string");
  }
  return LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(buffer_, pos_, pos_ += (len - (IOSByteArray_Get(buffer_, pos_ + len - 1) & (jint) 0xff)));
}

- (JavaMathBigInteger *)positiveBigNum {
  jint len = [self readU32];
  if (pos_ + len > ((IOSByteArray *) nil_chk(buffer_))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not enough data for big num");
  }
  IOSByteArray *d = [IOSByteArray newArrayWithLength:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, pos_, d, 0, d->size_);
  pos_ += len;
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, d);
}

- (IOSByteArray *)getBuffer {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(buffer_);
}

- (jboolean)hasRemaining {
  return pos_ < ((IOSByteArray *) nil_chk(buffer_))->size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withByteArray:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(readU32);
  methods[3].selector = @selector(readString);
  methods[4].selector = @selector(readPaddedString);
  methods[5].selector = @selector(positiveBigNum);
  methods[6].selector = @selector(getBuffer);
  methods[7].selector = @selector(hasRemaining);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B[B", "[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilSSHBuffer = { "SSHBuffer", "lib.org.bouncycastle.crypto.util", ptrTable, methods, fields, 7, 0x0, 8, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilSSHBuffer;
}

@end

void LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_withByteArray_(LibOrgBouncycastleCryptoUtilSSHBuffer *self, IOSByteArray *magic, IOSByteArray *buffer) {
  NSObject_init(self);
  self->pos_ = 0;
  self->buffer_ = buffer;
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(magic))->size_; i++) {
    if (IOSByteArray_Get(magic, i) != IOSByteArray_Get(nil_chk(buffer), i)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"magic-number incorrect");
    }
  }
  self->pos_ += magic->size_;
}

LibOrgBouncycastleCryptoUtilSSHBuffer *new_LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_withByteArray_(IOSByteArray *magic, IOSByteArray *buffer) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilSSHBuffer, initWithByteArray_withByteArray_, magic, buffer)
}

LibOrgBouncycastleCryptoUtilSSHBuffer *create_LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_withByteArray_(IOSByteArray *magic, IOSByteArray *buffer) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilSSHBuffer, initWithByteArray_withByteArray_, magic, buffer)
}

void LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_(LibOrgBouncycastleCryptoUtilSSHBuffer *self, IOSByteArray *buffer) {
  NSObject_init(self);
  self->pos_ = 0;
  self->buffer_ = buffer;
}

LibOrgBouncycastleCryptoUtilSSHBuffer *new_LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_(IOSByteArray *buffer) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilSSHBuffer, initWithByteArray_, buffer)
}

LibOrgBouncycastleCryptoUtilSSHBuffer *create_LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_(IOSByteArray *buffer) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilSSHBuffer, initWithByteArray_, buffer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilSSHBuffer)
