//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/symmetric/Skipjack.java
//

#include "AlgorithmProvider.h"
#include "BaseBlockCipher.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CBCBlockCipherMac.h"
#include "CFBBlockCipherMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "IOSClass.h"
#include "IvAlgorithmParameters.h"
#include "J2ObjC_source.h"
#include "Skipjack.h"
#include "SkipjackEngine.h"

@interface LibOrgBouncycastleJcajceProviderSymmetricSkipjack ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderSymmetricSkipjack_init(LibOrgBouncycastleJcajceProviderSymmetricSkipjack *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricSkipjack *new_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderSymmetricSkipjack *create_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderSymmetricSkipjack

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricSkipjack_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB;LLibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen;LLibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams;LLibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac;LLibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8;LLibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricSkipjack = { "Skipjack", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x11, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricSkipjack;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricSkipjack_init(LibOrgBouncycastleJcajceProviderSymmetricSkipjack *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack *new_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack, init)
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack *create_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricSkipjack)

@implementation LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricSkipjack;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB = { "ECB", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB_init(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(self, new_LibOrgBouncycastleCryptoEnginesSkipjackEngine_init());
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB *new_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB, init)
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB *create_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_ECB)

@implementation LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricSkipjack;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen = { "KeyGen", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen_init(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"Skipjack", 80, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen *new_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen, init)
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen *create_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_KeyGen)

@implementation LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)engineToString {
  return @"Skipjack IV";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricSkipjack;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams = { "AlgParams", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams_init(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilIvAlgorithmParameters_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams *new_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams, init)
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams *create_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_AlgParams)

@implementation LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricSkipjack;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac = { "Mac", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac_init(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsCBCBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesSkipjackEngine_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac *new_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac, init)
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac *create_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mac)

@implementation LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderSymmetricSkipjack;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8 = { "MacCFB8", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8;
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8_init(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsCFBBlockCipherMac_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesSkipjackEngine_init()));
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8 *new_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8, init)
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8 *create_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_MacCFB8)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings)

@implementation LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"Cipher.SKIPJACK" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_PREFIX, @"$ECB")];
  [provider addAlgorithmWithNSString:@"KeyGenerator.SKIPJACK" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_PREFIX, @"$KeyGen")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.SKIPJACK" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_PREFIX, @"$AlgParams")];
  [provider addAlgorithmWithNSString:@"Mac.SKIPJACKMAC" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_PREFIX, @"$Mac")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Mac.SKIPJACK" withNSString:@"SKIPJACKMAC"];
  [provider addAlgorithmWithNSString:@"Mac.SKIPJACKMAC/CFB8" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_PREFIX, @"$MacCFB8")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Mac.SKIPJACK/CFB8" withNSString:@"SKIPJACKMAC/CFB8"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderSymmetricSkipjack;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.symmetric", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings class]) {
    LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderSymmetricSkipjack_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_init(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings *new_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings, init)
}

LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings *create_LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderSymmetricSkipjack_Mappings)
