//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/tsp/EncryptionInfo.java
//

#ifndef EncryptionInfo_H
#define EncryptionInfo_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1ASN1TaggedObject;
@protocol LibOrgBouncycastleAsn1ASN1Encodable;

@interface LibOrgBouncycastleAsn1TspEncryptionInfo : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)encryptionInfoType
                                     withLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)encryptionInfoValue;

+ (LibOrgBouncycastleAsn1TspEncryptionInfo *)getInstanceWithLibOrgBouncycastleAsn1ASN1Object:(LibOrgBouncycastleAsn1ASN1Object *)obj;

+ (LibOrgBouncycastleAsn1TspEncryptionInfo *)getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject:(LibOrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                       withBoolean:(jboolean)explicit_;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1TspEncryptionInfo)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1TspEncryptionInfo *LibOrgBouncycastleAsn1TspEncryptionInfo_getInstanceWithLibOrgBouncycastleAsn1ASN1Object_(LibOrgBouncycastleAsn1ASN1Object *obj);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1TspEncryptionInfo *LibOrgBouncycastleAsn1TspEncryptionInfo_getInstanceWithLibOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(LibOrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1TspEncryptionInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1TspEncryptionInfo *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *encryptionInfoType, id<LibOrgBouncycastleAsn1ASN1Encodable> encryptionInfoValue);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1TspEncryptionInfo *new_LibOrgBouncycastleAsn1TspEncryptionInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *encryptionInfoType, id<LibOrgBouncycastleAsn1ASN1Encodable> encryptionInfoValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1TspEncryptionInfo *create_LibOrgBouncycastleAsn1TspEncryptionInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *encryptionInfoType, id<LibOrgBouncycastleAsn1ASN1Encodable> encryptionInfoValue);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1TspEncryptionInfo)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // EncryptionInfo_H
