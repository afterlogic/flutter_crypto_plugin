//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/x509/X509V1CertificateGenerator.java
//

#include "ASN1EncodableVector.h"
#include "ASN1Encoding.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "Asn1X509Time.h"
#include "BCJcaJceHelper.h"
#include "CertificateFactory.h"
#include "DERBitString.h"
#include "DERSequence.h"
#include "ExtCertificateEncodingException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "SubjectPublicKeyInfo.h"
#include "TBSCertificate.h"
#include "V1TBSCertificateGenerator.h"
#include "X509Name.h"
#include "X509Principal.h"
#include "X509Util.h"
#include "X509V1CertificateGenerator.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/SecurityException.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface LibOrgBouncycastleX509X509V1CertificateGenerator () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> bcHelper_;
  LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *certificateFactory_;
  LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *tbsGen_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *sigOID_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *sigAlgId_;
  NSString *signatureAlgorithm_;
}

- (JavaSecurityCertX509Certificate *)generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate:(LibOrgBouncycastleAsn1X509TBSCertificate *)tbsCert
                                                                                     withByteArray:(IOSByteArray *)signature;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V1CertificateGenerator, bcHelper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V1CertificateGenerator, certificateFactory_, LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V1CertificateGenerator, tbsGen_, LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V1CertificateGenerator, sigOID_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V1CertificateGenerator, sigAlgId_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleX509X509V1CertificateGenerator, signatureAlgorithm_, NSString *)

__attribute__((unused)) static JavaSecurityCertX509Certificate *LibOrgBouncycastleX509X509V1CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(LibOrgBouncycastleX509X509V1CertificateGenerator *self, LibOrgBouncycastleAsn1X509TBSCertificate *tbsCert, IOSByteArray *signature);

@implementation LibOrgBouncycastleX509X509V1CertificateGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleX509X509V1CertificateGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  tbsGen_ = new_LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator_init();
}

- (void)setSerialNumberWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  if ([((JavaMathBigInteger *) nil_chk(serialNumber)) compareToWithId:JreLoadStatic(JavaMathBigInteger, ZERO)] <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"serial number must be a positive integer");
  }
  [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setSerialNumberWithLibOrgBouncycastleAsn1ASN1Integer:new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(serialNumber)];
}

- (void)setIssuerDNWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)issuer {
  @try {
    [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setIssuerWithLibOrgBouncycastleAsn1X509X509Name:new_LibOrgBouncycastleJceX509Principal_initWithByteArray_([((JavaxSecurityAuthX500X500Principal *) nil_chk(issuer)) getEncoded])];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"can't process principal: ", e));
  }
}

- (void)setIssuerDNWithLibOrgBouncycastleAsn1X509X509Name:(LibOrgBouncycastleAsn1X509X509Name *)issuer {
  [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setIssuerWithLibOrgBouncycastleAsn1X509X509Name:issuer];
}

- (void)setNotBeforeWithJavaUtilDate:(JavaUtilDate *)date {
  [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setStartDateWithLibOrgBouncycastleAsn1X509Asn1X509Time:new_LibOrgBouncycastleAsn1X509Asn1X509Time_initWithJavaUtilDate_(date)];
}

- (void)setNotAfterWithJavaUtilDate:(JavaUtilDate *)date {
  [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setEndDateWithLibOrgBouncycastleAsn1X509Asn1X509Time:new_LibOrgBouncycastleAsn1X509Asn1X509Time_initWithJavaUtilDate_(date)];
}

- (void)setSubjectDNWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)subject {
  @try {
    [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setSubjectWithLibOrgBouncycastleAsn1X509X509Name:new_LibOrgBouncycastleJceX509Principal_initWithByteArray_([((JavaxSecurityAuthX500X500Principal *) nil_chk(subject)) getEncoded])];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"can't process principal: ", e));
  }
}

- (void)setSubjectDNWithLibOrgBouncycastleAsn1X509X509Name:(LibOrgBouncycastleAsn1X509X509Name *)subject {
  [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setSubjectWithLibOrgBouncycastleAsn1X509X509Name:subject];
}

- (void)setPublicKeyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  @try {
    [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setSubjectPublicKeyInfoWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded])];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to process key - ", [e description]));
  }
}

- (void)setSignatureAlgorithmWithNSString:(NSString *)signatureAlgorithm {
  self->signatureAlgorithm_ = signatureAlgorithm;
  @try {
    sigOID_ = LibOrgBouncycastleX509X509Util_getAlgorithmOIDWithNSString_(signatureAlgorithm);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Unknown signature type requested");
  }
  sigAlgId_ = LibOrgBouncycastleX509X509Util_getSigAlgIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_(sigOID_, signatureAlgorithm);
  [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) setSignatureWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:sigAlgId_];
}

- (JavaSecurityCertX509Certificate *)generateX509CertificateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  @try {
    return [self generateX509CertificateWithJavaSecurityPrivateKey:key withNSString:@"BC" withJavaSecuritySecureRandom:nil];
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw new_JavaLangSecurityException_initWithNSString_(@"BC provider not installed!");
  }
}

- (JavaSecurityCertX509Certificate *)generateX509CertificateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    return [self generateX509CertificateWithJavaSecurityPrivateKey:key withNSString:@"BC" withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw new_JavaLangSecurityException_initWithNSString_(@"BC provider not installed!");
  }
}

- (JavaSecurityCertX509Certificate *)generateX509CertificateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                                          withNSString:(NSString *)provider {
  return [self generateX509CertificateWithJavaSecurityPrivateKey:key withNSString:provider withJavaSecuritySecureRandom:nil];
}

- (JavaSecurityCertX509Certificate *)generateX509CertificateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                                          withNSString:(NSString *)provider
                                                          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    return [self generateWithJavaSecurityPrivateKey:key withNSString:provider withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityNoSuchProviderException *e) {
    @throw e;
  }
  @catch (JavaSecuritySignatureException *e) {
    @throw e;
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw e;
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    @throw new_JavaLangSecurityException_initWithNSString_(JreStrcat("$@", @"exception: ", e));
  }
}

- (JavaSecurityCertX509Certificate *)generateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return [self generateWithJavaSecurityPrivateKey:key withJavaSecuritySecureRandom:nil];
}

- (JavaSecurityCertX509Certificate *)generateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastleAsn1X509TBSCertificate *tbsCert = [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) generateTBSCertificate];
  IOSByteArray *signature;
  @try {
    signature = LibOrgBouncycastleX509X509Util_calculateSignatureWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_withJavaSecurityPrivateKey_withJavaSecuritySecureRandom_withLibOrgBouncycastleAsn1ASN1Encodable_(sigOID_, signatureAlgorithm_, key, random, tbsCert);
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleX509ExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(@"exception encoding TBS cert", e);
  }
  return LibOrgBouncycastleX509X509V1CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(self, tbsCert, signature);
}

- (JavaSecurityCertX509Certificate *)generateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                           withNSString:(NSString *)provider {
  return [self generateWithJavaSecurityPrivateKey:key withNSString:provider withJavaSecuritySecureRandom:nil];
}

- (JavaSecurityCertX509Certificate *)generateWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                           withNSString:(NSString *)provider
                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  LibOrgBouncycastleAsn1X509TBSCertificate *tbsCert = [((LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator *) nil_chk(tbsGen_)) generateTBSCertificate];
  IOSByteArray *signature;
  @try {
    signature = LibOrgBouncycastleX509X509Util_calculateSignatureWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_withNSString_withJavaSecurityPrivateKey_withJavaSecuritySecureRandom_withLibOrgBouncycastleAsn1ASN1Encodable_(sigOID_, signatureAlgorithm_, provider, key, random, tbsCert);
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleX509ExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(@"exception encoding TBS cert", e);
  }
  return LibOrgBouncycastleX509X509V1CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(self, tbsCert, signature);
}

- (JavaSecurityCertX509Certificate *)generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate:(LibOrgBouncycastleAsn1X509TBSCertificate *)tbsCert
                                                                                     withByteArray:(IOSByteArray *)signature {
  return LibOrgBouncycastleX509X509V1CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(self, tbsCert, signature);
}

- (id<JavaUtilIterator>)getSignatureAlgNames {
  return LibOrgBouncycastleX509X509Util_getAlgNames();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 13, 14, 15, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 13, 16, 15, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 13, 17, 18, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 13, 19, 18, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 20, 14, 21, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 20, 16, 21, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 20, 17, 22, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 20, 19, 22, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x2, 23, 24, 25, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(setSerialNumberWithJavaMathBigInteger:);
  methods[3].selector = @selector(setIssuerDNWithJavaxSecurityAuthX500X500Principal:);
  methods[4].selector = @selector(setIssuerDNWithLibOrgBouncycastleAsn1X509X509Name:);
  methods[5].selector = @selector(setNotBeforeWithJavaUtilDate:);
  methods[6].selector = @selector(setNotAfterWithJavaUtilDate:);
  methods[7].selector = @selector(setSubjectDNWithJavaxSecurityAuthX500X500Principal:);
  methods[8].selector = @selector(setSubjectDNWithLibOrgBouncycastleAsn1X509X509Name:);
  methods[9].selector = @selector(setPublicKeyWithJavaSecurityPublicKey:);
  methods[10].selector = @selector(setSignatureAlgorithmWithNSString:);
  methods[11].selector = @selector(generateX509CertificateWithJavaSecurityPrivateKey:);
  methods[12].selector = @selector(generateX509CertificateWithJavaSecurityPrivateKey:withJavaSecuritySecureRandom:);
  methods[13].selector = @selector(generateX509CertificateWithJavaSecurityPrivateKey:withNSString:);
  methods[14].selector = @selector(generateX509CertificateWithJavaSecurityPrivateKey:withNSString:withJavaSecuritySecureRandom:);
  methods[15].selector = @selector(generateWithJavaSecurityPrivateKey:);
  methods[16].selector = @selector(generateWithJavaSecurityPrivateKey:withJavaSecuritySecureRandom:);
  methods[17].selector = @selector(generateWithJavaSecurityPrivateKey:withNSString:);
  methods[18].selector = @selector(generateWithJavaSecurityPrivateKey:withNSString:withJavaSecuritySecureRandom:);
  methods[19].selector = @selector(generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate:withByteArray:);
  methods[20].selector = @selector(getSignatureAlgNames);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bcHelper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "certificateFactory_", "LLibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tbsGen_", "LLibOrgBouncycastleAsn1X509V1TBSCertificateGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigOID_", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigAlgId_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signatureAlgorithm_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSerialNumber", "LJavaMathBigInteger;", "setIssuerDN", "LJavaxSecurityAuthX500X500Principal;", "LLibOrgBouncycastleAsn1X509X509Name;", "setNotBefore", "LJavaUtilDate;", "setNotAfter", "setSubjectDN", "setPublicKey", "LJavaSecurityPublicKey;", "setSignatureAlgorithm", "LNSString;", "generateX509Certificate", "LJavaSecurityPrivateKey;", "LJavaLangSecurityException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "LJavaSecurityPrivateKey;LJavaSecuritySecureRandom;", "LJavaSecurityPrivateKey;LNSString;", "LJavaSecurityNoSuchProviderException;LJavaLangSecurityException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "LJavaSecurityPrivateKey;LNSString;LJavaSecuritySecureRandom;", "generate", "LJavaSecurityCertCertificateEncodingException;LJavaLangIllegalStateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "LJavaSecurityCertCertificateEncodingException;LJavaLangIllegalStateException;LJavaSecurityNoSuchProviderException;LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "generateJcaObject", "LLibOrgBouncycastleAsn1X509TBSCertificate;[B", "LJavaSecurityCertCertificateEncodingException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleX509X509V1CertificateGenerator = { "X509V1CertificateGenerator", "lib.org.bouncycastle.x509", ptrTable, methods, fields, 7, 0x1, 21, 6, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleX509X509V1CertificateGenerator;
}

@end

void LibOrgBouncycastleX509X509V1CertificateGenerator_init(LibOrgBouncycastleX509X509V1CertificateGenerator *self) {
  NSObject_init(self);
  self->bcHelper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->certificateFactory_ = new_LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_init();
  self->tbsGen_ = new_LibOrgBouncycastleAsn1X509V1TBSCertificateGenerator_init();
}

LibOrgBouncycastleX509X509V1CertificateGenerator *new_LibOrgBouncycastleX509X509V1CertificateGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleX509X509V1CertificateGenerator, init)
}

LibOrgBouncycastleX509X509V1CertificateGenerator *create_LibOrgBouncycastleX509X509V1CertificateGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleX509X509V1CertificateGenerator, init)
}

JavaSecurityCertX509Certificate *LibOrgBouncycastleX509X509V1CertificateGenerator_generateJcaObjectWithLibOrgBouncycastleAsn1X509TBSCertificate_withByteArray_(LibOrgBouncycastleX509X509V1CertificateGenerator *self, LibOrgBouncycastleAsn1X509TBSCertificate *tbsCert, IOSByteArray *signature) {
  LibOrgBouncycastleAsn1ASN1EncodableVector *v = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:tbsCert];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:self->sigAlgId_];
  [v addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERBitString_initWithByteArray_(signature)];
  @try {
    return (JavaSecurityCertX509Certificate *) cast_chk([((LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *) nil_chk(self->certificateFactory_)) engineGenerateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_([new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(v) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER])], [JavaSecurityCertX509Certificate class]);
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleX509ExtCertificateEncodingException_initWithNSString_withJavaLangThrowable_(@"exception producing certificate object", e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleX509X509V1CertificateGenerator)
