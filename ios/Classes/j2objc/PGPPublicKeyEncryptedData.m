//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPPublicKeyEncryptedData.java
//

#include "BCPGInputStream.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InputStreamPacket.h"
#include "J2ObjC_source.h"
#include "PGPDataDecryptor.h"
#include "PGPDigestCalculator.h"
#include "PGPEncryptedData.h"
#include "PGPException.h"
#include "PGPKeyValidationException.h"
#include "PGPPublicKeyEncryptedData.h"
#include "PublicKeyDataDecryptorFactory.h"
#include "PublicKeyEncSessionPacket.h"
#include "SymmetricEncIntegrityPacket.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "TeeInputStream.h"
#include "java/io/EOFException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData ()

- (jboolean)confirmCheckSumWithByteArray:(IOSByteArray *)sessionInfo;

@end

__attribute__((unused)) static jboolean LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_confirmCheckSumWithByteArray_(LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *self, IOSByteArray *sessionInfo);

@implementation LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData

- (instancetype)initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket:(LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *)keyData
                            withLibOrgBouncycastleBcpgInputStreamPacket:(LibOrgBouncycastleBcpgInputStreamPacket *)encData {
  LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_(self, keyData, encData);
  return self;
}

- (jboolean)confirmCheckSumWithByteArray:(IOSByteArray *)sessionInfo {
  return LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_confirmCheckSumWithByteArray_(self, sessionInfo);
}

- (jlong)getKeyID {
  return [((LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *) nil_chk(keyData_)) getKeyID];
}

- (jint)getSymmetricAlgorithmWithLibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory:(id<LibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory>)dataDecryptorFactory {
  IOSByteArray *plain = [((id<LibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory>) nil_chk(dataDecryptorFactory)) recoverSessionDataWithInt:[((LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *) nil_chk(keyData_)) getAlgorithm] withByteArray2:[((LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *) nil_chk(keyData_)) getEncSessionKey]];
  return IOSByteArray_Get(nil_chk(plain), 0);
}

- (JavaIoInputStream *)getDataStreamWithLibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory:(id<LibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory>)dataDecryptorFactory {
  IOSByteArray *sessionData = [((id<LibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory>) nil_chk(dataDecryptorFactory)) recoverSessionDataWithInt:[((LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *) nil_chk(keyData_)) getAlgorithm] withByteArray2:[((LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *) nil_chk(keyData_)) getEncSessionKey]];
  if (!LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_confirmCheckSumWithByteArray_(self, sessionData)) {
    @throw new_LibOrgBouncycastleOpenpgpPGPKeyValidationException_initWithNSString_(@"key checksum failed");
  }
  if (IOSByteArray_Get(nil_chk(sessionData), 0) != LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL) {
    @try {
      jboolean withIntegrityPacket = [encData_ isKindOfClass:[LibOrgBouncycastleBcpgSymmetricEncIntegrityPacket class]];
      IOSByteArray *sessionKey = [IOSByteArray newArrayWithLength:sessionData->size_ - 3];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sessionData, 1, sessionKey, 0, sessionKey->size_);
      id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor> dataDecryptor = [dataDecryptorFactory createDataDecryptorWithBoolean:withIntegrityPacket withInt:IOSByteArray_Get(sessionData, 0) & (jint) 0xff withByteArray:sessionKey];
      encStream_ = new_LibOrgBouncycastleBcpgBCPGInputStream_initWithJavaIoInputStream_([((id<LibOrgBouncycastleOpenpgpOperatorPGPDataDecryptor>) nil_chk(dataDecryptor)) getInputStreamWithJavaIoInputStream:[((LibOrgBouncycastleBcpgInputStreamPacket *) nil_chk(encData_)) getInputStream]]);
      if (withIntegrityPacket) {
        truncStream_ = new_LibOrgBouncycastleOpenpgpPGPEncryptedData_TruncatedStream_initWithLibOrgBouncycastleOpenpgpPGPEncryptedData_withJavaIoInputStream_(self, encStream_);
        integrityCalculator_ = [dataDecryptor getIntegrityCalculator];
        encStream_ = new_LibOrgBouncycastleUtilIoTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(truncStream_, [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(integrityCalculator_)) getOutputStream]);
      }
      IOSByteArray *iv = [IOSByteArray newArrayWithLength:[dataDecryptor getBlockSize]];
      for (jint i = 0; i != iv->size_; i++) {
        jint ch = [((JavaIoInputStream *) nil_chk(encStream_)) read];
        if (ch < 0) {
          @throw new_JavaIoEOFException_initWithNSString_(@"unexpected end of stream.");
        }
        *IOSByteArray_GetRef(iv, i) = (jbyte) ch;
      }
      jint v1 = [((JavaIoInputStream *) nil_chk(encStream_)) read];
      jint v2 = [((JavaIoInputStream *) nil_chk(encStream_)) read];
      if (v1 < 0 || v2 < 0) {
        @throw new_JavaIoEOFException_initWithNSString_(@"unexpected end of stream.");
      }
      return encStream_;
    }
    @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
      @throw e;
    }
    @catch (JavaLangException *e) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"Exception starting decryption", e);
    }
  }
  else {
    return [((LibOrgBouncycastleBcpgInputStreamPacket *) nil_chk(encData_)) getInputStream];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, 6, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket:withLibOrgBouncycastleBcpgInputStreamPacket:);
  methods[1].selector = @selector(confirmCheckSumWithByteArray:);
  methods[2].selector = @selector(getKeyID);
  methods[3].selector = @selector(getSymmetricAlgorithmWithLibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory:);
  methods[4].selector = @selector(getDataStreamWithLibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyData_", "LLibOrgBouncycastleBcpgPublicKeyEncSessionPacket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleBcpgPublicKeyEncSessionPacket;LLibOrgBouncycastleBcpgInputStreamPacket;", "confirmCheckSum", "[B", "getSymmetricAlgorithm", "LLibOrgBouncycastleOpenpgpOperatorPublicKeyDataDecryptorFactory;", "LLibOrgBouncycastleOpenpgpPGPException;", "getDataStream" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData = { "PGPPublicKeyEncryptedData", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData;
}

@end

void LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_(LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *self, LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *keyData, LibOrgBouncycastleBcpgInputStreamPacket *encData) {
  LibOrgBouncycastleOpenpgpPGPEncryptedData_initWithLibOrgBouncycastleBcpgInputStreamPacket_(self, encData);
  self->keyData_ = keyData;
}

LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *new_LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_(LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *keyData, LibOrgBouncycastleBcpgInputStreamPacket *encData) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData, initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_, keyData, encData)
}

LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *create_LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_(LibOrgBouncycastleBcpgPublicKeyEncSessionPacket *keyData, LibOrgBouncycastleBcpgInputStreamPacket *encData) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData, initWithLibOrgBouncycastleBcpgPublicKeyEncSessionPacket_withLibOrgBouncycastleBcpgInputStreamPacket_, keyData, encData)
}

jboolean LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData_confirmCheckSumWithByteArray_(LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData *self, IOSByteArray *sessionInfo) {
  jint check = 0;
  for (jint i = 1; i != ((IOSByteArray *) nil_chk(sessionInfo))->size_ - 2; i++) {
    check += IOSByteArray_Get(sessionInfo, i) & (jint) 0xff;
  }
  return (IOSByteArray_Get(sessionInfo, sessionInfo->size_ - 2) == (jbyte) (JreRShift32(check, 8))) && (IOSByteArray_Get(sessionInfo, sessionInfo->size_ - 1) == (jbyte) (check));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPPublicKeyEncryptedData)
