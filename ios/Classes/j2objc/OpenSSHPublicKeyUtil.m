//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/OpenSSHPublicKeyUtil.java
//

#include "AsymmetricKeyParameter.h"
#include "DSAParameters.h"
#include "DSAPublicKeyParameters.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECNamedCurveTable.h"
#include "ECPoint.h"
#include "ECPublicKeyParameters.h"
#include "Ed25519PublicKeyParameters.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OpenSSHPublicKeyUtil.h"
#include "RSAKeyParameters.h"
#include "SSHBuffer.h"
#include "SSHBuilder.h"
#include "SecP256R1Curve.h"
#include "Strings.h"
#include "X9ECParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"

@interface LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil ()

- (instancetype)init;

@end

inline NSString *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_get_RSA(void);
static NSString *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_RSA = @"ssh-rsa";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil, RSA, NSString *)

inline NSString *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_get_ECDSA(void);
static NSString *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_ECDSA = @"ecdsa";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil, ECDSA, NSString *)

inline NSString *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_get_ED_25519(void);
static NSString *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_ED_25519 = @"ssh-ed25519";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil, ED_25519, NSString *)

inline NSString *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_get_DSS(void);
static NSString *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_DSS = @"ssh-dss";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil, DSS, NSString *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_init(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil *new_LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil *create_LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_init(void);

@implementation LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)parsePublicKeyWithByteArray:(IOSByteArray *)encoded {
  return LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithByteArray_(encoded);
}

+ (IOSByteArray *)encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)cipherParameters {
  return LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(cipherParameters);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)parsePublicKeyWithLibOrgBouncycastleCryptoUtilSSHBuffer:(LibOrgBouncycastleCryptoUtilSSHBuffer *)buffer {
  return LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithLibOrgBouncycastleCryptoUtilSSHBuffer_(buffer);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 3, 4, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parsePublicKeyWithByteArray:);
  methods[2].selector = @selector(encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[3].selector = @selector(parsePublicKeyWithLibOrgBouncycastleCryptoUtilSSHBuffer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RSA", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "ECDSA", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "ED_25519", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "DSS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "parsePublicKey", "[B", "encodePublicKey", "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoUtilSSHBuffer;", &LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_RSA, &LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_ECDSA, &LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_ED_25519, &LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_DSS };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil = { "OpenSSHPublicKeyUtil", "lib.org.bouncycastle.crypto.util", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil;
}

@end

void LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_init(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil *new_LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil, init)
}

LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil *create_LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil, init)
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithByteArray_(IOSByteArray *encoded) {
  LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_initialize();
  LibOrgBouncycastleCryptoUtilSSHBuffer *buffer = new_LibOrgBouncycastleCryptoUtilSSHBuffer_initWithByteArray_(encoded);
  return LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithLibOrgBouncycastleCryptoUtilSSHBuffer_(buffer);
}

IOSByteArray *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_encodePublicKeyWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *cipherParameters) {
  LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_initialize();
  JavaMathBigInteger *e;
  JavaMathBigInteger *n;
  if (cipherParameters == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cipherParameters was null.");
  }
  if ([cipherParameters isKindOfClass:[LibOrgBouncycastleCryptoParamsRSAKeyParameters class]]) {
    if ([cipherParameters isPrivate]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"RSAKeyParamaters was for encryption");
    }
    e = [((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) cipherParameters) getExponent];
    n = [((LibOrgBouncycastleCryptoParamsRSAKeyParameters *) cipherParameters) getModulus];
    LibOrgBouncycastleCryptoUtilSSHBuilder *builder = new_LibOrgBouncycastleCryptoUtilSSHBuilder_init();
    [builder writeStringWithNSString:LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_RSA];
    [builder rawArrayWithByteArray:[((JavaMathBigInteger *) nil_chk(e)) toByteArray]];
    [builder rawArrayWithByteArray:[((JavaMathBigInteger *) nil_chk(n)) toByteArray]];
    return [builder getBytes];
  }
  else if ([cipherParameters isKindOfClass:[LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]]) {
    LibOrgBouncycastleCryptoUtilSSHBuilder *builder = new_LibOrgBouncycastleCryptoUtilSSHBuilder_init();
    NSString *name = nil;
    if ([[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cipherParameters) getParameters])) getCurve] isKindOfClass:[LibOrgBouncycastleMathEcCustomSecSecP256R1Curve class]]) {
      name = @"nistp256";
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to derive ssh curve name for ", [[((LibOrgBouncycastleMathEcECCurve *) nil_chk([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cipherParameters) getParameters])) getCurve])) java_getClass] getName]));
    }
    [builder writeStringWithNSString:JreStrcat("$$$", LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_ECDSA, @"-sha2-", name)];
    [builder writeStringWithNSString:name];
    [builder rawArrayWithByteArray:[((LibOrgBouncycastleMathEcECPoint *) nil_chk([((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cipherParameters) getQ])) getEncodedWithBoolean:false]];
    return [builder getBytes];
  }
  else if ([cipherParameters isKindOfClass:[LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters class]]) {
    LibOrgBouncycastleCryptoUtilSSHBuilder *builder = new_LibOrgBouncycastleCryptoUtilSSHBuilder_init();
    [builder writeStringWithNSString:LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_DSS];
    [builder rawArrayWithByteArray:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) cipherParameters) getParameters])) getP])) toByteArray]];
    [builder rawArrayWithByteArray:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) cipherParameters) getParameters])) getQ])) toByteArray]];
    [builder rawArrayWithByteArray:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) cipherParameters) getParameters])) getG])) toByteArray]];
    [builder rawArrayWithByteArray:[((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) cipherParameters) getY])) toByteArray]];
    return [builder getBytes];
  }
  else if ([cipherParameters isKindOfClass:[LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters class]]) {
    LibOrgBouncycastleCryptoUtilSSHBuilder *builder = new_LibOrgBouncycastleCryptoUtilSSHBuilder_init();
    [builder writeStringWithNSString:LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_ED_25519];
    [builder rawArrayWithByteArray:[((LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *) cipherParameters) getEncoded]];
    return [builder getBytes];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"unable to convert ", [[cipherParameters java_getClass] getName], @" to private key"));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_parsePublicKeyWithLibOrgBouncycastleCryptoUtilSSHBuffer_(LibOrgBouncycastleCryptoUtilSSHBuffer *buffer) {
  LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_initialize();
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *result = nil;
  NSString *magic = LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_([((LibOrgBouncycastleCryptoUtilSSHBuffer *) nil_chk(buffer)) readString]);
  if ([((NSString *) nil_chk(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_RSA)) isEqual:magic]) {
    JavaMathBigInteger *e = [buffer positiveBigNum];
    JavaMathBigInteger *n = [buffer positiveBigNum];
    result = new_LibOrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(false, n, e);
  }
  else if ([((NSString *) nil_chk(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_DSS)) isEqual:magic]) {
    JavaMathBigInteger *p = [buffer positiveBigNum];
    JavaMathBigInteger *q = [buffer positiveBigNum];
    JavaMathBigInteger *g = [buffer positiveBigNum];
    JavaMathBigInteger *pubKey = [buffer positiveBigNum];
    result = new_LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_(pubKey, new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, q, g));
  }
  else if ([((NSString *) nil_chk(magic)) java_hasPrefix:LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_ECDSA]) {
    NSString *curveName = LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_([buffer readString]);
    NSString *nameToFind = curveName;
    if ([((NSString *) nil_chk(curveName)) java_hasPrefix:@"nist"]) {
      nameToFind = [curveName java_substring:4];
      nameToFind = JreStrcat("$C$", [((NSString *) nil_chk(nameToFind)) java_substring:0 endIndex:1], '-', [nameToFind java_substring:1]);
    }
    LibOrgBouncycastleAsn1X9X9ECParameters *x9ECParameters = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(nameToFind);
    if (x9ECParameters == nil) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$", @"unable to find curve for ", magic, @" using curve name ", nameToFind));
    }
    LibOrgBouncycastleMathEcECCurve *curve = [x9ECParameters getCurve];
    IOSByteArray *pointRaw = [buffer readString];
    result = new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) decodePointWithByteArray:pointRaw], new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curve, [x9ECParameters getG], [x9ECParameters getN], [x9ECParameters getH], [x9ECParameters getSeed]));
  }
  else if ([magic java_hasPrefix:LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil_ED_25519]) {
    result = new_LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters_initWithByteArray_withInt_([buffer readString], 0);
  }
  if (result == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unable to parse key");
  }
  if ([buffer hasRemaining]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"uncoded key has trailing data");
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilOpenSSHPublicKeyUtil)
