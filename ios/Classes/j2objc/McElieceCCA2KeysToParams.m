//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceCCA2KeysToParams.java
//

#include "AsymmetricKeyParameter.h"
#include "BCMcElieceCCA2PrivateKey.h"
#include "BCMcElieceCCA2PublicKey.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "McElieceCCA2KeysToParams.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"

@implementation LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(key);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(generatePrivateKeyParameterWithJavaSecurityPrivateKey:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "generatePrivateKeyParameter", "LJavaSecurityPrivateKey;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams = { "McElieceCCA2KeysToParams", "lib.org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams;
}

@end

void LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_init(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams *new_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams, init)
}

LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams *create_LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams, init)
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_initialize();
  if ([key isKindOfClass:[LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PublicKey class]]) {
    LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PublicKey *k = (LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PublicKey *) key;
    return [((LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PublicKey *) nil_chk(k)) getKeyParams];
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"can't identify McElieceCCA2 public key: ", [[((id<JavaSecurityPublicKey>) nil_chk(key)) java_getClass] getName]));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key) {
  LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams_initialize();
  if ([key isKindOfClass:[LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PrivateKey class]]) {
    LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PrivateKey *k = (LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PrivateKey *) key;
    return [((LibOrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PrivateKey *) nil_chk(k)) getKeyParams];
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't identify McElieceCCA2 private key.");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeysToParams)
