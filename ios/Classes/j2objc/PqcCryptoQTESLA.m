//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/PqcCryptoQTESLA.java
//

#include "CommonFunction.h"
#include "HashUtils.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Parameter.h"
#include "PolynomialHeuristic.h"
#include "PolynomialProvablySecure.h"
#include "PqcCryptoQTESLA.h"
#include "PqcCryptoQteslaPack.h"
#include "PqcCryptoQteslaPolynomial.h"
#include "Sample.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA ()

+ (void)hashFunctionWithByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset
                     withIntArray:(IOSIntArray *)V
                    withByteArray:(IOSByteArray *)message
                          withInt:(jint)messageOffset
                          withInt:(jint)n
                          withInt:(jint)d
                          withInt:(jint)q;

+ (void)hashFunctionWithByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset
                    withLongArray:(IOSLongArray *)V
                    withByteArray:(IOSByteArray *)message
                          withInt:(jint)messageOffset
                          withInt:(jint)n
                          withInt:(jint)k
                          withInt:(jint)d
                          withInt:(jint)q;

+ (jint)absoluteWithInt:(jint)value;

+ (jlong)absoluteWithLong:(jlong)value;

+ (jboolean)testRejectionWithIntArray:(IOSIntArray *)Z
                              withInt:(jint)n
                              withInt:(jint)b
                              withInt:(jint)u;

+ (jboolean)testRejectionWithLongArray:(IOSLongArray *)Z
                               withInt:(jint)n
                               withInt:(jint)b
                               withInt:(jint)u;

+ (jboolean)testZWithIntArray:(IOSIntArray *)Z
                      withInt:(jint)n
                      withInt:(jint)b
                      withInt:(jint)u;

+ (jboolean)testZWithLongArray:(IOSLongArray *)Z
                       withInt:(jint)n
                       withInt:(jint)b
                       withInt:(jint)u;

+ (jboolean)testVWithIntArray:(IOSIntArray *)V
                      withInt:(jint)n
                      withInt:(jint)d
                      withInt:(jint)q
                      withInt:(jint)rejection;

+ (jboolean)testVWithLongArray:(IOSLongArray *)V
                       withInt:(jint)vOffset
                       withInt:(jint)n
                       withInt:(jint)d
                       withInt:(jint)q
                       withInt:(jint)rejection;

+ (jboolean)checkPolynomialWithIntArray:(IOSIntArray *)polynomial
                                withInt:(jint)bound
                                withInt:(jint)n
                                withInt:(jint)h;

+ (jboolean)checkPolynomialWithLongArray:(IOSLongArray *)polynomial
                                 withInt:(jint)offset
                                 withInt:(jint)bound
                                 withInt:(jint)n
                                 withInt:(jint)h;

+ (jint)generateKeyPairWithByteArray:(IOSByteArray *)publicKey
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom
                             withInt:(jint)n
                             withInt:(jint)h
                             withInt:(jint)q
                            withLong:(jlong)qInverse
                             withInt:(jint)qLogarithm
                             withInt:(jint)generatorA
                             withInt:(jint)inverseNumberTheoreticTransform
                          withDouble:(jdouble)xi
                        withIntArray:(IOSIntArray *)zeta
                             withInt:(jint)errorBound
                             withInt:(jint)secretBound;

+ (jint)generateKeyPairWithByteArray:(IOSByteArray *)publicKey
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom
                             withInt:(jint)n
                             withInt:(jint)k
                             withInt:(jint)h
                             withInt:(jint)q
                            withLong:(jlong)qInverse
                             withInt:(jint)qLogarithm
                             withInt:(jint)generatorA
                             withInt:(jint)inverseNumberTheoreticTransform
                          withDouble:(jdouble)xi
                       withLongArray:(IOSLongArray *)zeta
                             withInt:(jint)errorBound
                             withInt:(jint)secretBound;

+ (jint)signingWithByteArray:(IOSByteArray *)signature
               withByteArray:(IOSByteArray *)message
                     withInt:(jint)messageOffset
                     withInt:(jint)messageLength
               withByteArray:(IOSByteArray *)privateKey
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom
                     withInt:(jint)n
                     withInt:(jint)h
                     withInt:(jint)q
                    withLong:(jlong)qInverse
                     withInt:(jint)qLogarithm
                     withInt:(jint)b
                     withInt:(jint)bBit
                     withInt:(jint)d
                     withInt:(jint)u
                     withInt:(jint)rejection
                     withInt:(jint)generatorA
                     withInt:(jint)inverseNumberTheoreticTransform
                     withInt:(jint)barrettMultiplication
                     withInt:(jint)barrettDivision
                withIntArray:(IOSIntArray *)zeta;

+ (jint)signingWithByteArray:(IOSByteArray *)signature
               withByteArray:(IOSByteArray *)message
                     withInt:(jint)messageOffset
                     withInt:(jint)messageLength
               withByteArray:(IOSByteArray *)privateKey
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom
                     withInt:(jint)n
                     withInt:(jint)k
                     withInt:(jint)h
                     withInt:(jint)q
                    withLong:(jlong)qInverse
                     withInt:(jint)qLogarithm
                     withInt:(jint)b
                     withInt:(jint)bBit
                     withInt:(jint)d
                     withInt:(jint)u
                     withInt:(jint)rejection
                     withInt:(jint)generatorA
                     withInt:(jint)inverseNumberTheoreticTransform
                     withInt:(jint)privateKeySize
                     withInt:(jint)barrettMultiplication
                     withInt:(jint)barrettDivision;

+ (jint)verifyingWithByteArray:(IOSByteArray *)message
                 withByteArray:(IOSByteArray *)signature
                       withInt:(jint)signatureOffset
                       withInt:(jint)signatureLength
                 withByteArray:(IOSByteArray *)publicKey
                       withInt:(jint)n
                       withInt:(jint)h
                       withInt:(jint)q
                      withLong:(jlong)qInverse
                       withInt:(jint)qLogarithm
                       withInt:(jint)b
                       withInt:(jint)d
                       withInt:(jint)u
                       withInt:(jint)r
                       withInt:(jint)signatureSize
                       withInt:(jint)generatorA
                       withInt:(jint)inverseNumberTheoreticTransform
                       withInt:(jint)barrettMultiplication
                       withInt:(jint)barrettDivision
                  withIntArray:(IOSIntArray *)zeta;

+ (jint)verifyingWithByteArray:(IOSByteArray *)message
                 withByteArray:(IOSByteArray *)signature
                       withInt:(jint)signatureOffset
                       withInt:(jint)signatureLength
                 withByteArray:(IOSByteArray *)publicKey
                       withInt:(jint)n
                       withInt:(jint)k
                       withInt:(jint)h
                       withInt:(jint)q
                      withLong:(jlong)qInverse
                       withInt:(jint)qLogarithm
                       withInt:(jint)b
                       withInt:(jint)d
                       withInt:(jint)u
                       withInt:(jint)signatureSize
                       withInt:(jint)generatorA
                       withInt:(jint)inverseNumberTheoreticTransform
                       withInt:(jint)barrettMultiplication
                       withInt:(jint)barrettDivision
                 withLongArray:(IOSLongArray *)zeta;

@end

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *output, jint outputOffset, IOSIntArray *V, IOSByteArray *message, jint messageOffset, jint n, jint d, jint q);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_withInt_withInt_withInt_withInt_(IOSByteArray *output, jint outputOffset, IOSLongArray *V, IOSByteArray *message, jint messageOffset, jint n, jint k, jint d, jint q);

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithInt_(jint value);

__attribute__((unused)) static jlong LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithLong_(jlong value);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testRejectionWithIntArray_withInt_withInt_withInt_(IOSIntArray *Z, jint n, jint b, jint u);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testRejectionWithLongArray_withInt_withInt_withInt_(IOSLongArray *Z, jint n, jint b, jint u);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testZWithIntArray_withInt_withInt_withInt_(IOSIntArray *Z, jint n, jint b, jint u);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testZWithLongArray_withInt_withInt_withInt_(IOSLongArray *Z, jint n, jint b, jint u);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testVWithIntArray_withInt_withInt_withInt_withInt_(IOSIntArray *V, jint n, jint d, jint q, jint rejection);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testVWithLongArray_withInt_withInt_withInt_withInt_withInt_(IOSLongArray *V, jint vOffset, jint n, jint d, jint q, jint rejection);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithIntArray_withInt_withInt_withInt_(IOSIntArray *polynomial, jint bound, jint n, jint h);

__attribute__((unused)) static jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithLongArray_withInt_withInt_withInt_withInt_(IOSLongArray *polynomial, jint offset, jint bound, jint n, jint h);

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withIntArray_withInt_withInt_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom, jint n, jint h, jint q, jlong qInverse, jint qLogarithm, jint generatorA, jint inverseNumberTheoreticTransform, jdouble xi, IOSIntArray *zeta, jint errorBound, jint secretBound);

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withLongArray_withInt_withInt_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom, jint n, jint k, jint h, jint q, jlong qInverse, jint qLogarithm, jint generatorA, jint inverseNumberTheoreticTransform, jdouble xi, IOSLongArray *zeta, jint errorBound, jint secretBound);

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom, jint n, jint h, jint q, jlong qInverse, jint qLogarithm, jint b, jint bBit, jint d, jint u, jint rejection, jint generatorA, jint inverseNumberTheoreticTransform, jint barrettMultiplication, jint barrettDivision, IOSIntArray *zeta);

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom, jint n, jint k, jint h, jint q, jlong qInverse, jint qLogarithm, jint b, jint bBit, jint d, jint u, jint rejection, jint generatorA, jint inverseNumberTheoreticTransform, jint privateKeySize, jint barrettMultiplication, jint barrettDivision);

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey, jint n, jint h, jint q, jlong qInverse, jint qLogarithm, jint b, jint d, jint u, jint r, jint signatureSize, jint generatorA, jint inverseNumberTheoreticTransform, jint barrettMultiplication, jint barrettDivision, IOSIntArray *zeta);

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withLongArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey, jint n, jint k, jint h, jint q, jlong qInverse, jint qLogarithm, jint b, jint d, jint u, jint signatureSize, jint generatorA, jint inverseNumberTheoreticTransform, jint barrettMultiplication, jint barrettDivision, IOSLongArray *zeta);

@implementation LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)hashFunctionWithByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset
                     withIntArray:(IOSIntArray *)V
                    withByteArray:(IOSByteArray *)message
                          withInt:(jint)messageOffset
                          withInt:(jint)n
                          withInt:(jint)d
                          withInt:(jint)q {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_withInt_withInt_withInt_(output, outputOffset, V, message, messageOffset, n, d, q);
}

+ (void)hashFunctionWithByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset
                    withLongArray:(IOSLongArray *)V
                    withByteArray:(IOSByteArray *)message
                          withInt:(jint)messageOffset
                          withInt:(jint)n
                          withInt:(jint)k
                          withInt:(jint)d
                          withInt:(jint)q {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_withInt_withInt_withInt_withInt_(output, outputOffset, V, message, messageOffset, n, k, d, q);
}

+ (jint)absoluteWithInt:(jint)value {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithInt_(value);
}

+ (jlong)absoluteWithLong:(jlong)value {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithLong_(value);
}

+ (jboolean)testRejectionWithIntArray:(IOSIntArray *)Z
                              withInt:(jint)n
                              withInt:(jint)b
                              withInt:(jint)u {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testRejectionWithIntArray_withInt_withInt_withInt_(Z, n, b, u);
}

+ (jboolean)testRejectionWithLongArray:(IOSLongArray *)Z
                               withInt:(jint)n
                               withInt:(jint)b
                               withInt:(jint)u {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testRejectionWithLongArray_withInt_withInt_withInt_(Z, n, b, u);
}

+ (jboolean)testZWithIntArray:(IOSIntArray *)Z
                      withInt:(jint)n
                      withInt:(jint)b
                      withInt:(jint)u {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testZWithIntArray_withInt_withInt_withInt_(Z, n, b, u);
}

+ (jboolean)testZWithLongArray:(IOSLongArray *)Z
                       withInt:(jint)n
                       withInt:(jint)b
                       withInt:(jint)u {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testZWithLongArray_withInt_withInt_withInt_(Z, n, b, u);
}

+ (jboolean)testVWithIntArray:(IOSIntArray *)V
                      withInt:(jint)n
                      withInt:(jint)d
                      withInt:(jint)q
                      withInt:(jint)rejection {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testVWithIntArray_withInt_withInt_withInt_withInt_(V, n, d, q, rejection);
}

+ (jboolean)testVWithLongArray:(IOSLongArray *)V
                       withInt:(jint)vOffset
                       withInt:(jint)n
                       withInt:(jint)d
                       withInt:(jint)q
                       withInt:(jint)rejection {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testVWithLongArray_withInt_withInt_withInt_withInt_withInt_(V, vOffset, n, d, q, rejection);
}

+ (jboolean)checkPolynomialWithIntArray:(IOSIntArray *)polynomial
                                withInt:(jint)bound
                                withInt:(jint)n
                                withInt:(jint)h {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithIntArray_withInt_withInt_withInt_(polynomial, bound, n, h);
}

+ (jboolean)checkPolynomialWithLongArray:(IOSLongArray *)polynomial
                                 withInt:(jint)offset
                                 withInt:(jint)bound
                                 withInt:(jint)n
                                 withInt:(jint)h {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithLongArray_withInt_withInt_withInt_withInt_(polynomial, offset, bound, n, h);
}

+ (jint)generateKeyPairWithByteArray:(IOSByteArray *)publicKey
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom
                             withInt:(jint)n
                             withInt:(jint)h
                             withInt:(jint)q
                            withLong:(jlong)qInverse
                             withInt:(jint)qLogarithm
                             withInt:(jint)generatorA
                             withInt:(jint)inverseNumberTheoreticTransform
                          withDouble:(jdouble)xi
                        withIntArray:(IOSIntArray *)zeta
                             withInt:(jint)errorBound
                             withInt:(jint)secretBound {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withIntArray_withInt_withInt_(publicKey, privateKey, secureRandom, n, h, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform, xi, zeta, errorBound, secretBound);
}

+ (jint)generateKeyPairIWithByteArray:(IOSByteArray *)publicKey
                        withByteArray:(IOSByteArray *)privateKey
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom);
}

+ (jint)generateKeyPairIIISizeWithByteArray:(IOSByteArray *)publicKey
                              withByteArray:(IOSByteArray *)privateKey
               withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIISizeWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom);
}

+ (jint)generateKeyPairIIISpeedWithByteArray:(IOSByteArray *)publicKey
                               withByteArray:(IOSByteArray *)privateKey
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIISpeedWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom);
}

+ (jint)generateKeyPairWithByteArray:(IOSByteArray *)publicKey
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom
                             withInt:(jint)n
                             withInt:(jint)k
                             withInt:(jint)h
                             withInt:(jint)q
                            withLong:(jlong)qInverse
                             withInt:(jint)qLogarithm
                             withInt:(jint)generatorA
                             withInt:(jint)inverseNumberTheoreticTransform
                          withDouble:(jdouble)xi
                       withLongArray:(IOSLongArray *)zeta
                             withInt:(jint)errorBound
                             withInt:(jint)secretBound {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withLongArray_withInt_withInt_(publicKey, privateKey, secureRandom, n, k, h, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform, xi, zeta, errorBound, secretBound);
}

+ (jint)generateKeyPairIPWithByteArray:(IOSByteArray *)publicKey
                         withByteArray:(IOSByteArray *)privateKey
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIPWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom);
}

+ (jint)generateKeyPairIIIPWithByteArray:(IOSByteArray *)publicKey
                           withByteArray:(IOSByteArray *)privateKey
            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIIPWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom);
}

+ (jint)signingWithByteArray:(IOSByteArray *)signature
               withByteArray:(IOSByteArray *)message
                     withInt:(jint)messageOffset
                     withInt:(jint)messageLength
               withByteArray:(IOSByteArray *)privateKey
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom
                     withInt:(jint)n
                     withInt:(jint)h
                     withInt:(jint)q
                    withLong:(jlong)qInverse
                     withInt:(jint)qLogarithm
                     withInt:(jint)b
                     withInt:(jint)bBit
                     withInt:(jint)d
                     withInt:(jint)u
                     withInt:(jint)rejection
                     withInt:(jint)generatorA
                     withInt:(jint)inverseNumberTheoreticTransform
                     withInt:(jint)barrettMultiplication
                     withInt:(jint)barrettDivision
                withIntArray:(IOSIntArray *)zeta {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(signature, message, messageOffset, messageLength, privateKey, secureRandom, n, h, q, qInverse, qLogarithm, b, bBit, d, u, rejection, generatorA, inverseNumberTheoreticTransform, barrettMultiplication, barrettDivision, zeta);
}

+ (jint)signingIWithByteArray:(IOSByteArray *)signature
                withByteArray:(IOSByteArray *)message
                      withInt:(jint)messageOffset
                      withInt:(jint)messageLength
                withByteArray:(IOSByteArray *)privateKey
 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(signature, message, messageOffset, messageLength, privateKey, secureRandom);
}

+ (jint)signingIIISizeWithByteArray:(IOSByteArray *)signature
                      withByteArray:(IOSByteArray *)message
                            withInt:(jint)messageOffset
                            withInt:(jint)messageLength
                      withByteArray:(IOSByteArray *)privateKey
       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIISizeWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(signature, message, messageOffset, messageLength, privateKey, secureRandom);
}

+ (jint)signingIIISpeedWithByteArray:(IOSByteArray *)signature
                       withByteArray:(IOSByteArray *)message
                             withInt:(jint)messageOffset
                             withInt:(jint)messageLength
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIISpeedWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(signature, message, messageOffset, messageLength, privateKey, secureRandom);
}

+ (jint)signingWithByteArray:(IOSByteArray *)signature
               withByteArray:(IOSByteArray *)message
                     withInt:(jint)messageOffset
                     withInt:(jint)messageLength
               withByteArray:(IOSByteArray *)privateKey
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom
                     withInt:(jint)n
                     withInt:(jint)k
                     withInt:(jint)h
                     withInt:(jint)q
                    withLong:(jlong)qInverse
                     withInt:(jint)qLogarithm
                     withInt:(jint)b
                     withInt:(jint)bBit
                     withInt:(jint)d
                     withInt:(jint)u
                     withInt:(jint)rejection
                     withInt:(jint)generatorA
                     withInt:(jint)inverseNumberTheoreticTransform
                     withInt:(jint)privateKeySize
                     withInt:(jint)barrettMultiplication
                     withInt:(jint)barrettDivision {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(signature, message, messageOffset, messageLength, privateKey, secureRandom, n, k, h, q, qInverse, qLogarithm, b, bBit, d, u, rejection, generatorA, inverseNumberTheoreticTransform, privateKeySize, barrettMultiplication, barrettDivision);
}

+ (jint)signingIPWithByteArray:(IOSByteArray *)signature
                 withByteArray:(IOSByteArray *)message
                       withInt:(jint)messageOffset
                       withInt:(jint)messageLength
                 withByteArray:(IOSByteArray *)privateKey
  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIPWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(signature, message, messageOffset, messageLength, privateKey, secureRandom);
}

+ (jint)signingIIIPWithByteArray:(IOSByteArray *)signature
                   withByteArray:(IOSByteArray *)message
                         withInt:(jint)messageOffset
                         withInt:(jint)messageLength
                   withByteArray:(IOSByteArray *)privateKey
    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIIPWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(signature, message, messageOffset, messageLength, privateKey, secureRandom);
}

+ (jint)verifyingWithByteArray:(IOSByteArray *)message
                 withByteArray:(IOSByteArray *)signature
                       withInt:(jint)signatureOffset
                       withInt:(jint)signatureLength
                 withByteArray:(IOSByteArray *)publicKey
                       withInt:(jint)n
                       withInt:(jint)h
                       withInt:(jint)q
                      withLong:(jlong)qInverse
                       withInt:(jint)qLogarithm
                       withInt:(jint)b
                       withInt:(jint)d
                       withInt:(jint)u
                       withInt:(jint)r
                       withInt:(jint)signatureSize
                       withInt:(jint)generatorA
                       withInt:(jint)inverseNumberTheoreticTransform
                       withInt:(jint)barrettMultiplication
                       withInt:(jint)barrettDivision
                  withIntArray:(IOSIntArray *)zeta {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(message, signature, signatureOffset, signatureLength, publicKey, n, h, q, qInverse, qLogarithm, b, d, u, r, signatureSize, generatorA, inverseNumberTheoreticTransform, barrettMultiplication, barrettDivision, zeta);
}

+ (jint)verifyingIWithByteArray:(IOSByteArray *)message
                  withByteArray:(IOSByteArray *)signature
                        withInt:(jint)signatureOffset
                        withInt:(jint)signatureLength
                  withByteArray:(IOSByteArray *)publicKey {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, signatureOffset, signatureLength, publicKey);
}

+ (jint)verifyingIIISizeWithByteArray:(IOSByteArray *)message
                        withByteArray:(IOSByteArray *)signature
                              withInt:(jint)signatureOffset
                              withInt:(jint)signatureLength
                        withByteArray:(IOSByteArray *)publicKey {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIIISizeWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, signatureOffset, signatureLength, publicKey);
}

+ (jint)verifyingIIISpeedWithByteArray:(IOSByteArray *)message
                         withByteArray:(IOSByteArray *)signature
                               withInt:(jint)signatureOffset
                               withInt:(jint)signatureLength
                         withByteArray:(IOSByteArray *)publicKey {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIIISpeedWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, signatureOffset, signatureLength, publicKey);
}

+ (jint)verifyingWithByteArray:(IOSByteArray *)message
                 withByteArray:(IOSByteArray *)signature
                       withInt:(jint)signatureOffset
                       withInt:(jint)signatureLength
                 withByteArray:(IOSByteArray *)publicKey
                       withInt:(jint)n
                       withInt:(jint)k
                       withInt:(jint)h
                       withInt:(jint)q
                      withLong:(jlong)qInverse
                       withInt:(jint)qLogarithm
                       withInt:(jint)b
                       withInt:(jint)d
                       withInt:(jint)u
                       withInt:(jint)signatureSize
                       withInt:(jint)generatorA
                       withInt:(jint)inverseNumberTheoreticTransform
                       withInt:(jint)barrettMultiplication
                       withInt:(jint)barrettDivision
                 withLongArray:(IOSLongArray *)zeta {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withLongArray_(message, signature, signatureOffset, signatureLength, publicKey, n, k, h, q, qInverse, qLogarithm, b, d, u, signatureSize, generatorA, inverseNumberTheoreticTransform, barrettMultiplication, barrettDivision, zeta);
}

+ (jint)verifyingPIWithByteArray:(IOSByteArray *)message
                   withByteArray:(IOSByteArray *)signature
                         withInt:(jint)signatureOffset
                         withInt:(jint)signatureLength
                   withByteArray:(IOSByteArray *)publicKey {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingPIWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, signatureOffset, signatureLength, publicKey);
}

+ (jint)verifyingPIIIWithByteArray:(IOSByteArray *)message
                     withByteArray:(IOSByteArray *)signature
                           withInt:(jint)signatureOffset
                           withInt:(jint)signatureLength
                     withByteArray:(IOSByteArray *)publicKey {
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingPIIIWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, signatureOffset, signatureLength, publicKey);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 3, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 9, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 13, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 19, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 20, 18, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 22, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 23, 18, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 26, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 28, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 29, 27, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 24, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 31, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 32, 27, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 35, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 37, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 38, 36, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 33, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 40, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 41, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(hashFunctionWithByteArray:withInt:withIntArray:withByteArray:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(hashFunctionWithByteArray:withInt:withLongArray:withByteArray:withInt:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(absoluteWithInt:);
  methods[4].selector = @selector(absoluteWithLong:);
  methods[5].selector = @selector(testRejectionWithIntArray:withInt:withInt:withInt:);
  methods[6].selector = @selector(testRejectionWithLongArray:withInt:withInt:withInt:);
  methods[7].selector = @selector(testZWithIntArray:withInt:withInt:withInt:);
  methods[8].selector = @selector(testZWithLongArray:withInt:withInt:withInt:);
  methods[9].selector = @selector(testVWithIntArray:withInt:withInt:withInt:withInt:);
  methods[10].selector = @selector(testVWithLongArray:withInt:withInt:withInt:withInt:withInt:);
  methods[11].selector = @selector(checkPolynomialWithIntArray:withInt:withInt:withInt:);
  methods[12].selector = @selector(checkPolynomialWithLongArray:withInt:withInt:withInt:withInt:);
  methods[13].selector = @selector(generateKeyPairWithByteArray:withByteArray:withJavaSecuritySecureRandom:withInt:withInt:withInt:withLong:withInt:withInt:withInt:withDouble:withIntArray:withInt:withInt:);
  methods[14].selector = @selector(generateKeyPairIWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[15].selector = @selector(generateKeyPairIIISizeWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[16].selector = @selector(generateKeyPairIIISpeedWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[17].selector = @selector(generateKeyPairWithByteArray:withByteArray:withJavaSecuritySecureRandom:withInt:withInt:withInt:withInt:withLong:withInt:withInt:withInt:withDouble:withLongArray:withInt:withInt:);
  methods[18].selector = @selector(generateKeyPairIPWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[19].selector = @selector(generateKeyPairIIIPWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[20].selector = @selector(signingWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:withInt:withInt:withInt:withLong:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withIntArray:);
  methods[21].selector = @selector(signingIWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:);
  methods[22].selector = @selector(signingIIISizeWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:);
  methods[23].selector = @selector(signingIIISpeedWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:);
  methods[24].selector = @selector(signingWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:withInt:withInt:withInt:withInt:withLong:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[25].selector = @selector(signingIPWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:);
  methods[26].selector = @selector(signingIIIPWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:);
  methods[27].selector = @selector(verifyingWithByteArray:withByteArray:withInt:withInt:withByteArray:withInt:withInt:withInt:withLong:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withIntArray:);
  methods[28].selector = @selector(verifyingIWithByteArray:withByteArray:withInt:withInt:withByteArray:);
  methods[29].selector = @selector(verifyingIIISizeWithByteArray:withByteArray:withInt:withInt:withByteArray:);
  methods[30].selector = @selector(verifyingIIISpeedWithByteArray:withByteArray:withInt:withInt:withByteArray:);
  methods[31].selector = @selector(verifyingWithByteArray:withByteArray:withInt:withInt:withByteArray:withInt:withInt:withInt:withInt:withLong:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withLongArray:);
  methods[32].selector = @selector(verifyingPIWithByteArray:withByteArray:withInt:withInt:withByteArray:);
  methods[33].selector = @selector(verifyingPIIIWithByteArray:withByteArray:withInt:withInt:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "hashFunction", "[BI[I[BIIII", "[BI[J[BIIIII", "absolute", "I", "J", "testRejection", "[IIII", "[JIII", "testZ", "testV", "[IIIII", "[JIIIII", "checkPolynomial", "[JIIII", "generateKeyPair", "[B[BLJavaSecuritySecureRandom;IIIJIIID[III", "generateKeyPairI", "[B[BLJavaSecuritySecureRandom;", "generateKeyPairIIISize", "generateKeyPairIIISpeed", "[B[BLJavaSecuritySecureRandom;IIIIJIIID[JII", "generateKeyPairIP", "generateKeyPairIIIP", "signing", "[B[BII[BLJavaSecuritySecureRandom;IIIJIIIIIIIIII[I", "signingI", "[B[BII[BLJavaSecuritySecureRandom;", "signingIIISize", "signingIIISpeed", "[B[BII[BLJavaSecuritySecureRandom;IIIIJIIIIIIIIIII", "signingIP", "signingIIIP", "verifying", "[B[BII[BIIIJIIIIIIIIII[I", "verifyingI", "[B[BII[B", "verifyingIIISize", "verifyingIIISpeed", "[B[BII[BIIIIJIIIIIIIII[J", "verifyingPI", "verifyingPIII" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA = { "PqcCryptoQTESLA", "lib.org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, NULL, 7, 0x1, 34, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA;
}

@end

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_init(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA *new_LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA, init)
}

LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA *create_LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA, init)
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *output, jint outputOffset, IOSIntArray *V, IOSByteArray *message, jint messageOffset, jint n, jint d, jint q) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  jint mask;
  jint cL;
  IOSByteArray *T = [IOSByteArray newArrayWithLength:n + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE];
  for (jint i = 0; i < n; i++) {
    mask = JreRShift32((q / 2 - IOSIntArray_Get(nil_chk(V), i)), 31);
    *IOSIntArray_GetRef(V, i) = ((IOSIntArray_Get(V, i) - q) & mask) | (IOSIntArray_Get(V, i) & (~mask));
    cL = IOSIntArray_Get(V, i) & ((JreLShift32(1, d)) - 1);
    mask = JreRShift32(((JreLShift32(1, (d - 1))) - cL), 31);
    cL = ((cL - (JreLShift32(1, d))) & mask) | (cL & (~mask));
    *IOSByteArray_GetRef(T, i) = (jbyte) (JreRShift32((IOSIntArray_Get(V, i) - cL), d));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(message, messageOffset, T, n, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(output, outputOffset, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH, T, 0, n + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE || q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(output, outputOffset, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH, T, 0, n + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  }
}

void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_withInt_withInt_withInt_withInt_(IOSByteArray *output, jint outputOffset, IOSLongArray *V, IOSByteArray *message, jint messageOffset, jint n, jint k, jint d, jint q) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  jint index;
  jlong mask;
  jlong cL;
  jlong temporary;
  IOSByteArray *T = [IOSByteArray newArrayWithLength:n * k + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE];
  for (jint j = 0; j < k; j++) {
    index = n * j;
    for (jint i = 0; i < n; i++) {
      temporary = IOSLongArray_Get(nil_chk(V), index);
      mask = JreRShift64((q / 2 - temporary), 63);
      temporary = ((temporary - q) & mask) | (temporary & (~mask));
      cL = temporary & ((JreLShift32(1, d)) - 1);
      mask = JreRShift64(((JreLShift32(1, (d - 1))) - cL), 63);
      cL = ((cL - (JreLShift32(1, d))) & mask) | (cL & (~mask));
      *IOSByteArray_GetRef(T, index++) = (jbyte) (JreRShift64((temporary - cL), d));
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(message, messageOffset, T, n * k, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(output, outputOffset, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH, T, 0, n * k + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(output, outputOffset, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH, T, 0, n * k + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  }
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithInt_(jint value) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return ((JreRShift32(value, 31)) ^ value) - (JreRShift32(value, 31));
}

jlong LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithLong_(jlong value) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return ((JreRShift64(value, 63)) ^ value) - (JreRShift64(value, 63));
}

jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testRejectionWithIntArray_withInt_withInt_withInt_(IOSIntArray *Z, jint n, jint b, jint u) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  for (jint i = 0; i < n; i++) {
    if (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithInt_(IOSIntArray_Get(nil_chk(Z), i)) > (b - u)) {
      return true;
    }
  }
  return false;
}

jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testRejectionWithLongArray_withInt_withInt_withInt_(IOSLongArray *Z, jint n, jint b, jint u) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  for (jint i = 0; i < n; i++) {
    if (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithLong_(IOSLongArray_Get(nil_chk(Z), i)) > (b - u)) {
      return true;
    }
  }
  return false;
}

jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testZWithIntArray_withInt_withInt_withInt_(IOSIntArray *Z, jint n, jint b, jint u) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  for (jint i = 0; i < n; i++) {
    if ((IOSIntArray_Get(nil_chk(Z), i) < -(b - u)) || (IOSIntArray_Get(Z, i) > b - u)) {
      return true;
    }
  }
  return false;
}

jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testZWithLongArray_withInt_withInt_withInt_(IOSLongArray *Z, jint n, jint b, jint u) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  for (jint i = 0; i < n; i++) {
    if ((IOSLongArray_Get(nil_chk(Z), i) < -(b - u)) || (IOSLongArray_Get(Z, i) > b - u)) {
      return true;
    }
  }
  return false;
}

jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testVWithIntArray_withInt_withInt_withInt_withInt_(IOSIntArray *V, jint n, jint d, jint q, jint rejection) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  jint mask;
  jint left;
  jint right;
  jint test1;
  jint test2;
  for (jint i = 0; i < n; i++) {
    mask = JreRShift32((q / 2 - IOSIntArray_Get(nil_chk(V), i)), 31);
    right = ((IOSIntArray_Get(V, i) - q) & mask) | (IOSIntArray_Get(V, i) & (~mask));
    test1 = JreURShift32((~(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithInt_(right) - (q / 2 - rejection))), 31);
    left = right;
    right = JreRShift32((right + (JreLShift32(1, (d - 1))) - 1), d);
    right = left - (JreLShift32(right, d));
    test2 = JreURShift32((~(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithInt_(right) - ((JreLShift32(1, (d - 1))) - rejection))), 31);
    if ((test1 | test2) == 1) {
      return true;
    }
  }
  return false;
}

jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testVWithLongArray_withInt_withInt_withInt_withInt_withInt_(IOSLongArray *V, jint vOffset, jint n, jint d, jint q, jint rejection) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  jlong mask;
  jlong left;
  jlong right;
  jlong test1;
  jlong test2;
  for (jint i = 0; i < n; i++) {
    mask = JreRShift64((q / 2 - IOSLongArray_Get(nil_chk(V), vOffset + i)), 63);
    right = ((IOSLongArray_Get(V, vOffset + i) - q) & mask) | (IOSLongArray_Get(V, vOffset + i) & (~mask));
    test1 = JreURShift64((~(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithLong_(right) - (q / 2 - rejection))), 63);
    left = right;
    right = (jint) (JreRShift64((right + (JreLShift32(1, (d - 1))) - 1), d));
    right = left - (JreLShift64(right, d));
    test2 = JreURShift64((~(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithLong_(right) - ((JreLShift32(1, (d - 1))) - rejection))), 63);
    if ((test1 | test2) == 1LL) {
      return true;
    }
  }
  return false;
}

jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithIntArray_withInt_withInt_withInt_(IOSIntArray *polynomial, jint bound, jint n, jint h) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  jint summation = 0;
  jint limit = n;
  jint temporary;
  jint mask;
  IOSIntArray *list = [IOSIntArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(list, i) = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithInt_(IOSIntArray_Get(nil_chk(polynomial), i));
  }
  for (jint i = 0; i < h; i++) {
    for (jint j = 0; j < limit - 1; j++) {
      mask = JreRShift32((IOSIntArray_Get(list, j + 1) - IOSIntArray_Get(list, j)), 31);
      temporary = (IOSIntArray_Get(list, j + 1) & mask) | (IOSIntArray_Get(list, j) & (~mask));
      *IOSIntArray_GetRef(list, j + 1) = (IOSIntArray_Get(list, j) & mask) | (IOSIntArray_Get(list, j + 1) & (~mask));
      *IOSIntArray_GetRef(list, j) = temporary;
    }
    summation += IOSIntArray_Get(list, limit - 1);
    limit--;
  }
  if (summation > bound) {
    return true;
  }
  return false;
}

jboolean LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithLongArray_withInt_withInt_withInt_withInt_(IOSLongArray *polynomial, jint offset, jint bound, jint n, jint h) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  jint summation = 0;
  jint limit = n;
  jshort temporary;
  jshort mask;
  IOSShortArray *list = [IOSShortArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSShortArray_GetRef(list, i) = (jshort) (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_absoluteWithLong_(IOSLongArray_Get(nil_chk(polynomial), offset + i)));
  }
  for (jint i = 0; i < h; i++) {
    for (jint j = 0; j < limit - 1; j++) {
      mask = (jshort) (JreRShift32((IOSShortArray_Get(list, j + 1) - IOSShortArray_Get(list, j)), 15));
      temporary = (jshort) ((IOSShortArray_Get(list, j + 1) & mask) | (IOSShortArray_Get(list, j) & (~mask)));
      *IOSShortArray_GetRef(list, j + 1) = (jshort) ((IOSShortArray_Get(list, j) & mask) | (IOSShortArray_Get(list, j + 1) & (~mask)));
      *IOSShortArray_GetRef(list, j) = temporary;
    }
    summation += (jint) IOSShortArray_Get(list, limit - 1);
    limit--;
  }
  if (summation > bound) {
    return true;
  }
  return false;
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withIntArray_withInt_withInt_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom, jint n, jint h, jint q, jlong qInverse, jint qLogarithm, jint generatorA, jint inverseNumberTheoreticTransform, jdouble xi, IOSIntArray *zeta, jint errorBound, jint secretBound) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  jint nonce = 0;
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM];
  IOSByteArray *randomnessExtended = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 4];
  IOSIntArray *secretPolynomial = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *errorPolynomial = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *A = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *T = [IOSIntArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(secureRandom)) nextBytesWithByteArray:randomness];
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomnessExtended, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 4, randomness, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE || q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomnessExtended, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 4, randomness, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
  }
  do {
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
      LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIWithIntArray_withInt_withByteArray_withInt_withInt_(errorPolynomial, 0, randomnessExtended, 0, ++nonce);
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE) {
      LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIIIWithIntArray_withInt_withByteArray_withInt_withInt_withInt_withDouble_withDoubleArray2_(errorPolynomial, 0, randomnessExtended, 0, ++nonce, n, xi, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaSample, EXPONENTIAL_DISTRIBUTION_III_SIZE));
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
      LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIIIWithIntArray_withInt_withByteArray_withInt_withInt_withInt_withDouble_withDoubleArray2_(errorPolynomial, 0, randomnessExtended, 0, ++nonce, n, xi, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaSample, EXPONENTIAL_DISTRIBUTION_III_SPEED));
    }
  }
  while (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithIntArray_withInt_withInt_withInt_(errorPolynomial, errorBound, n, h) == true);
  do {
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
      LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIWithIntArray_withInt_withByteArray_withInt_withInt_(secretPolynomial, 0, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, ++nonce);
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE) {
      LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIIIWithIntArray_withInt_withByteArray_withInt_withInt_withInt_withDouble_withDoubleArray2_(secretPolynomial, 0, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, ++nonce, n, xi, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaSample, EXPONENTIAL_DISTRIBUTION_III_SIZE));
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
      LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIIIWithIntArray_withInt_withByteArray_withInt_withInt_withInt_withDouble_withDoubleArray2_(secretPolynomial, 0, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, ++nonce, n, xi, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaSample, EXPONENTIAL_DISTRIBUTION_III_SPEED));
    }
  }
  while (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithIntArray_withInt_withInt_withInt_(secretPolynomial, secretBound, n, h) == true);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithIntArray_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(A, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 2, n, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_withIntArray_(T, A, secretPolynomial, n, q, qInverse, zeta);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionCorrectionWithIntArray_withIntArray_withIntArray_withInt_withInt_(T, T, errorPolynomial, n, q);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePrivateKeyIWithByteArray_withIntArray_withIntArray_withByteArray_withInt_(privateKey, secretPolynomial, errorPolynomial, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 2);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyWithByteArray_withIntArray_withByteArray_withInt_withInt_withInt_(publicKey, T, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 2, LibOrgBouncycastlePqcCryptoQteslaParameter_N_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_I);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePrivateKeyIIISizeWithByteArray_withIntArray_withIntArray_withByteArray_withInt_(privateKey, secretPolynomial, errorPolynomial, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 2);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyWithByteArray_withIntArray_withByteArray_withInt_withInt_withInt_(publicKey, T, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 2, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_SIZE);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePrivateKeyIIISpeedWithByteArray_withIntArray_withIntArray_withByteArray_withInt_(privateKey, secretPolynomial, errorPolynomial, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 2);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyIIISpeedWithByteArray_withIntArray_withByteArray_withInt_(publicKey, T, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 2);
  }
  return 0;
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withIntArray_withInt_withInt_(publicKey, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_I, LibOrgBouncycastlePqcCryptoQteslaParameter_H_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_I, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_I, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_I, LibOrgBouncycastlePqcCryptoQteslaParameter_XI_I, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_I), LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_E_I, LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_S_I);
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIISizeWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withIntArray_withInt_withInt_(publicKey, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_XI_III_SIZE, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_III_SIZE), LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_E_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_S_III_SIZE);
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIISpeedWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withIntArray_withInt_withInt_(publicKey, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_XI_III_SPEED, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_III_SPEED), LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_E_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_S_III_SPEED);
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withLongArray_withInt_withInt_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom, jint n, jint k, jint h, jint q, jlong qInverse, jint qLogarithm, jint generatorA, jint inverseNumberTheoreticTransform, jdouble xi, IOSLongArray *zeta, jint errorBound, jint secretBound) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  jint nonce = 0;
  jlong mask;
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM];
  IOSByteArray *randomnessExtended = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * (k + 3)];
  IOSLongArray *secretPolynomial = [IOSLongArray newArrayWithLength:n];
  IOSLongArray *secretPolynomialNumberTheoreticTransform = [IOSLongArray newArrayWithLength:n];
  IOSLongArray *errorPolynomial = [IOSLongArray newArrayWithLength:n * k];
  IOSLongArray *A = [IOSLongArray newArrayWithLength:n * k];
  IOSLongArray *T = [IOSLongArray newArrayWithLength:n * k];
  [((JavaSecuritySecureRandom *) nil_chk(secureRandom)) nextBytesWithByteArray:randomness];
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomnessExtended, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * (k + 3), randomness, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomnessExtended, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * (k + 3), randomness, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
  }
  for (jint i = 0; i < k; i++) {
    do {
      if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
        LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIPWithLongArray_withInt_withByteArray_withInt_withInt_(errorPolynomial, n * i, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * i, ++nonce);
      }
      if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
        LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIIIPWithLongArray_withInt_withByteArray_withInt_withInt_(errorPolynomial, n * i, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * i, ++nonce);
      }
    }
    while (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithLongArray_withInt_withInt_withInt_withInt_(errorPolynomial, n * i, errorBound, n, h) == true);
  }
  do {
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
      LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIPWithLongArray_withInt_withByteArray_withInt_withInt_(secretPolynomial, 0, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * k, ++nonce);
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
      LibOrgBouncycastlePqcCryptoQteslaSample_polynomialGaussSamplerIIIPWithLongArray_withInt_withByteArray_withInt_withInt_(secretPolynomial, 0, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * k, ++nonce);
    }
  }
  while (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_checkPolynomialWithLongArray_withInt_withInt_withInt_withInt_(secretPolynomial, 0, secretBound, n, h) == true);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithLongArray_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(A, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * (k + 1), n, k, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialNumberTheoreticTransformWithLongArray_withLongArray_withInt_(secretPolynomialNumberTheoreticTransform, secretPolynomial, n);
  for (jint i = 0; i < k; i++) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(T, n * i, A, n * i, secretPolynomialNumberTheoreticTransform, 0, n, q, qInverse);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(T, n * i, T, n * i, errorPolynomial, n * i, n);
    for (jint j = 0; j < n; j++) {
      mask = JreRShift64((q - IOSLongArray_Get(T, n * i + j)), 63);
      *IOSLongArray_GetRef(T, n * i + j) -= (q & mask);
    }
  }
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_packPrivateKeyWithByteArray_withLongArray_withLongArray_withByteArray_withInt_withInt_withInt_(privateKey, secretPolynomial, errorPolynomial, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * (k + 1), n, k);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyIPWithByteArray_withLongArray_withByteArray_withInt_(publicKey, T, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * (k + 1));
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyIIIPWithByteArray_withLongArray_withByteArray_withInt_(publicKey, T, randomnessExtended, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * (k + 1));
  }
  return 0;
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIPWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withLongArray_withInt_withInt_(publicKey, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_K_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_H_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_XI_I_P, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_I_P), LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_E_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_S_I_P);
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairIIIPWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withDouble_withLongArray_withInt_withInt_(publicKey, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_K_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_XI_III_P, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_III_P), LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_E_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_KEY_GENERATOR_BOUND_S_III_P);
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom, jint n, jint h, jint q, jlong qInverse, jint qLogarithm, jint b, jint bBit, jint d, jint u, jint rejection, jint generatorA, jint inverseNumberTheoreticTransform, jint barrettMultiplication, jint barrettDivision, IOSIntArray *zeta) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  IOSByteArray *C = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH];
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED];
  IOSByteArray *randomnessInput = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED * 2];
  IOSByteArray *temporaryRandomnessInput = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM];
  IOSIntArray *positionList = [IOSIntArray newArrayWithLength:h];
  IOSShortArray *signList = [IOSShortArray newArrayWithLength:h];
  IOSShortArray *secretPolynomial = [IOSShortArray newArrayWithLength:n];
  IOSShortArray *errorPolynomial = [IOSShortArray newArrayWithLength:n];
  IOSIntArray *A = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *V = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *Y = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *Z = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *SC = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *EC = [IOSIntArray newArrayWithLength:n];
  jint nonce = 0;
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePrivateKeyIWithByteArray_withShortArray_withShortArray_withByteArray_(seed, secretPolynomial, errorPolynomial, privateKey);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePrivateKeyIIISizeWithByteArray_withShortArray_withShortArray_withByteArray_(seed, secretPolynomial, errorPolynomial, privateKey);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePrivateKeyIIISpeedWithByteArray_withShortArray_withShortArray_withByteArray_(seed, secretPolynomial, errorPolynomial, privateKey);
  }
  [((JavaSecuritySecureRandom *) nil_chk(secureRandom)) nextBytesWithByteArray:temporaryRandomnessInput];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temporaryRandomnessInput, 0, randomnessInput, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, randomnessInput, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomnessInput, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, message, 0, messageLength);
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomness, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, randomnessInput, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE || q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomnessInput, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, message, 0, messageLength);
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomness, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, randomnessInput, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  }
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithIntArray_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(A, seed, 0, n, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform);
  while (true) {
    LibOrgBouncycastlePqcCryptoQteslaSample_sampleYWithIntArray_withByteArray_withInt_withInt_withInt_withInt_withInt_withInt_(Y, randomness, 0, ++nonce, n, q, b, bBit);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_withIntArray_(V, A, Y, n, q, qInverse, zeta);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_withInt_withInt_withInt_(C, 0, V, randomnessInput, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, n, d, q);
    LibOrgBouncycastlePqcCryptoQteslaSample_encodeCWithIntArray_withShortArray_withByteArray_withInt_withInt_withInt_(positionList, signList, C, 0, n, h);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication16WithIntArray_withShortArray_withIntArray_withShortArray_withInt_withInt_(SC, secretPolynomial, positionList, signList, n, h);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionWithIntArray_withIntArray_withIntArray_withInt_(Z, Y, SC, n);
    if (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testRejectionWithIntArray_withInt_withInt_withInt_(Z, n, b, u) == true) {
      continue;
    }
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication16WithIntArray_withShortArray_withIntArray_withShortArray_withInt_withInt_(EC, errorPolynomial, positionList, signList, n, h);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionCorrectionWithIntArray_withIntArray_withIntArray_withInt_withInt_(V, V, EC, n, q);
    if (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testVWithIntArray_withInt_withInt_withInt_withInt_(V, n, d, q, rejection) == true) {
      continue;
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
      LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withIntArray_withInt_withInt_(signature, 0, C, 0, Z, n, d);
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE) {
      LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withIntArray_withInt_withInt_(signature, 0, C, 0, Z, n, d);
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
      LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureIIISpeedWithByteArray_withInt_withByteArray_withInt_withIntArray_(signature, 0, C, 0, Z);
    }
    return 0;
  }
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(signature, message, messageOffset, messageLength, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_I, LibOrgBouncycastlePqcCryptoQteslaParameter_H_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_I, LibOrgBouncycastlePqcCryptoQteslaParameter_B_I, LibOrgBouncycastlePqcCryptoQteslaParameter_B_BIT_I, LibOrgBouncycastlePqcCryptoQteslaParameter_D_I, LibOrgBouncycastlePqcCryptoQteslaParameter_U_I, LibOrgBouncycastlePqcCryptoQteslaParameter_REJECTION_I, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_I, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_I, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_I, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_I, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_I));
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIISizeWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(signature, message, messageOffset, messageLength, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_B_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_B_BIT_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_D_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_U_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_REJECTION_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_SIZE, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_III_SIZE));
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIISpeedWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(signature, message, messageOffset, messageLength, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_B_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_B_BIT_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_D_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_U_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_REJECTION_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_SPEED, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_III_SPEED));
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom, jint n, jint k, jint h, jint q, jlong qInverse, jint qLogarithm, jint b, jint bBit, jint d, jint u, jint rejection, jint generatorA, jint inverseNumberTheoreticTransform, jint privateKeySize, jint barrettMultiplication, jint barrettDivision) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  IOSByteArray *C = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH];
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED];
  IOSByteArray *randomnessInput = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE];
  IOSByteArray *temporaryRandomnessInput = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM];
  IOSIntArray *positionList = [IOSIntArray newArrayWithLength:h];
  IOSShortArray *signList = [IOSShortArray newArrayWithLength:h];
  IOSLongArray *A = [IOSLongArray newArrayWithLength:n * k];
  IOSLongArray *V = [IOSLongArray newArrayWithLength:n * k];
  IOSLongArray *Y = [IOSLongArray newArrayWithLength:n];
  IOSLongArray *numberTheoreticTransformY = [IOSLongArray newArrayWithLength:n];
  IOSLongArray *Z = [IOSLongArray newArrayWithLength:n];
  IOSLongArray *SC = [IOSLongArray newArrayWithLength:n];
  IOSLongArray *EC = [IOSLongArray newArrayWithLength:n * k];
  jboolean response = false;
  jint nonce = 0;
  [((JavaSecuritySecureRandom *) nil_chk(secureRandom)) nextBytesWithByteArray:temporaryRandomnessInput];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temporaryRandomnessInput, 0, randomnessInput, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(privateKey, privateKeySize - LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, randomnessInput, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomnessInput, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, message, 0, messageLength);
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomness, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, randomnessInput, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomnessInput, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, message, 0, messageLength);
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(randomness, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, randomnessInput, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE);
  }
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithLongArray_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(A, privateKey, privateKeySize - 2 * LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, n, k, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform);
  while (true) {
    LibOrgBouncycastlePqcCryptoQteslaSample_sampleYWithLongArray_withByteArray_withInt_withInt_withInt_withInt_withInt_withInt_(Y, randomness, 0, ++nonce, n, q, b, bBit);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialNumberTheoreticTransformWithLongArray_withLongArray_withInt_(numberTheoreticTransformY, Y, n);
    for (jint i = 0; i < k; i++) {
      LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(V, n * i, A, n * i, numberTheoreticTransformY, 0, n, q, qInverse);
    }
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_withInt_withInt_withInt_withInt_(C, 0, V, randomnessInput, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_RANDOM + LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED, n, k, d, q);
    LibOrgBouncycastlePqcCryptoQteslaSample_encodeCWithIntArray_withShortArray_withByteArray_withInt_withInt_withInt_(positionList, signList, C, 0, n, h);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication8WithLongArray_withInt_withByteArray_withInt_withIntArray_withShortArray_withInt_withInt_(SC, 0, privateKey, 0, positionList, signList, n, h);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialAdditionWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(Z, 0, Y, 0, SC, 0, n);
    if (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testRejectionWithLongArray_withInt_withInt_withInt_(Z, n, b, u) == true) {
      continue;
    }
    for (jint i = 0; i < k; i++) {
      LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication8WithLongArray_withInt_withByteArray_withInt_withIntArray_withShortArray_withInt_withInt_(EC, n * i, privateKey, n * (i + 1), positionList, signList, n, h);
      LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withInt_withInt_(V, n * i, V, n * i, EC, n * i, n, q, barrettMultiplication, barrettDivision);
      response = LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testVWithLongArray_withInt_withInt_withInt_withInt_withInt_(V, n * i, n, d, q, rejection);
      if (response == true) {
        break;
      }
    }
    if (response == true) {
      continue;
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
      LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureIPWithByteArray_withInt_withByteArray_withInt_withLongArray_(signature, 0, C, 0, Z);
    }
    if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
      LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureIIIPWithByteArray_withInt_withByteArray_withInt_withLongArray_(signature, 0, C, 0, Z);
    }
    return 0;
  }
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIPWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(signature, message, messageOffset, messageLength, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_K_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_H_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_B_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_B_BIT_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_D_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_U_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_REJECTION_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_I_P, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_I_P);
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingIIIPWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_signingWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(signature, message, messageOffset, messageLength, privateKey, secureRandom, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_K_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_B_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_B_BIT_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_D_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_U_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_REJECTION_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_P, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_PRIVATE_KEY_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_P);
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey, jint n, jint h, jint q, jlong qInverse, jint qLogarithm, jint b, jint d, jint u, jint r, jint signatureSize, jint generatorA, jint inverseNumberTheoreticTransform, jint barrettMultiplication, jint barrettDivision, IOSIntArray *zeta) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  IOSByteArray *C = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH];
  IOSByteArray *cSignature = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED];
  IOSByteArray *hashMessage = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE];
  IOSIntArray *newPublicKey = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *positionList = [IOSIntArray newArrayWithLength:h];
  IOSShortArray *signList = [IOSShortArray newArrayWithLength:h];
  IOSIntArray *W = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *Z = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *TC = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *A = [IOSIntArray newArrayWithLength:n];
  if (signatureLength < signatureSize) {
    return -1;
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I || q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodeSignatureWithByteArray_withIntArray_withByteArray_withInt_withInt_withInt_(C, Z, signature, signatureOffset, n, d);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodeSignatureIIISpeedWithByteArray_withIntArray_withByteArray_withInt_(C, Z, signature, signatureOffset);
  }
  if (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testZWithIntArray_withInt_withInt_withInt_(Z, n, b, u) == true) {
    return -2;
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I || q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_withInt_withInt_(newPublicKey, seed, 0, publicKey, n, qLogarithm);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePublicKeyIIISpeedWithIntArray_withByteArray_withInt_withByteArray_(newPublicKey, seed, 0, publicKey);
  }
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithIntArray_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(A, seed, 0, n, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform);
  LibOrgBouncycastlePqcCryptoQteslaSample_encodeCWithIntArray_withShortArray_withByteArray_withInt_withInt_withInt_(positionList, signList, C, 0, n, h);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication32WithIntArray_withIntArray_withIntArray_withShortArray_withInt_withInt_(TC, newPublicKey, positionList, signList, n, h);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_withIntArray_(W, A, Z, n, q, qInverse, zeta);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionMontgomeryWithIntArray_withIntArray_withIntArray_withInt_withInt_withLong_withInt_(W, W, TC, n, q, qInverse, r);
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(hashMessage, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, message, 0, ((IOSByteArray *) nil_chk(message))->size_);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE || q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(hashMessage, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, message, 0, ((IOSByteArray *) nil_chk(message))->size_);
  }
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_withInt_withInt_withInt_(cSignature, 0, W, hashMessage, 0, n, d, q);
  if (LibOrgBouncycastlePqcCryptoQteslaCommonFunction_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(C, 0, cSignature, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH) == false) {
    return -3;
  }
  return 0;
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(message, signature, signatureOffset, signatureLength, publicKey, LibOrgBouncycastlePqcCryptoQteslaParameter_N_I, LibOrgBouncycastlePqcCryptoQteslaParameter_H_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_I, LibOrgBouncycastlePqcCryptoQteslaParameter_B_I, LibOrgBouncycastlePqcCryptoQteslaParameter_D_I, LibOrgBouncycastlePqcCryptoQteslaParameter_U_I, LibOrgBouncycastlePqcCryptoQteslaParameter_R_I, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_I, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_I, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_I, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_I, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_I, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_I));
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIIISizeWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(message, signature, signatureOffset, signatureLength, publicKey, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_B_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_D_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_U_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_R_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_SIZE, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_SIZE, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_III_SIZE));
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingIIISpeedWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withIntArray_(message, signature, signatureOffset, signatureLength, publicKey, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_B_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_D_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_U_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_R_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_SPEED, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_SPEED, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialHeuristic, ZETA_III_SPEED));
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withLongArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey, jint n, jint k, jint h, jint q, jlong qInverse, jint qLogarithm, jint b, jint d, jint u, jint signatureSize, jint generatorA, jint inverseNumberTheoreticTransform, jint barrettMultiplication, jint barrettDivision, IOSLongArray *zeta) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  IOSByteArray *C = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH];
  IOSByteArray *cSignature = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SEED];
  IOSByteArray *hashMessage = [IOSByteArray newArrayWithLength:LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE];
  IOSIntArray *newPublicKey = [IOSIntArray newArrayWithLength:n * k];
  IOSIntArray *positionList = [IOSIntArray newArrayWithLength:h];
  IOSShortArray *signList = [IOSShortArray newArrayWithLength:h];
  IOSLongArray *W = [IOSLongArray newArrayWithLength:n * k];
  IOSLongArray *Z = [IOSLongArray newArrayWithLength:n];
  IOSLongArray *numberTheoreticTransformZ = [IOSLongArray newArrayWithLength:n];
  IOSLongArray *TC = [IOSLongArray newArrayWithLength:n * k];
  IOSLongArray *A = [IOSLongArray newArrayWithLength:n * k];
  if (signatureLength < signatureSize) {
    return -1;
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodeSignatureIPWithByteArray_withLongArray_withByteArray_withInt_(C, Z, signature, signatureOffset);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodeSignatureIIIPWithByteArray_withLongArray_withByteArray_withInt_(C, Z, signature, signatureOffset);
  }
  if (LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_testZWithLongArray_withInt_withInt_withInt_(Z, n, b, u) == true) {
    return -2;
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePublicKeyIPWithIntArray_withByteArray_withInt_withByteArray_(newPublicKey, seed, 0, publicKey);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePublicKeyIIIPWithIntArray_withByteArray_withInt_withByteArray_(newPublicKey, seed, 0, publicKey);
  }
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialUniformWithLongArray_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_(A, seed, 0, n, k, q, qInverse, qLogarithm, generatorA, inverseNumberTheoreticTransform);
  LibOrgBouncycastlePqcCryptoQteslaSample_encodeCWithIntArray_withShortArray_withByteArray_withInt_withInt_withInt_(positionList, signList, C, 0, n, h);
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialNumberTheoreticTransformWithLongArray_withLongArray_withInt_(numberTheoreticTransformZ, Z, n);
  for (jint i = 0; i < k; i++) {
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialMultiplicationWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withLong_(W, n * i, A, n * i, numberTheoreticTransformZ, 0, n, q, qInverse);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_sparsePolynomialMultiplication32WithLongArray_withInt_withIntArray_withInt_withIntArray_withShortArray_withInt_withInt_withInt_withInt_withInt_(TC, n * i, newPublicKey, n * i, positionList, signList, n, h, q, barrettMultiplication, barrettDivision);
    LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_polynomialSubtractionWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_withInt_withInt_withInt_(W, n * i, W, n * i, TC, n * i, n, q, barrettMultiplication, barrettDivision);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(hashMessage, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, message, 0, ((IOSByteArray *) nil_chk(message))->size_);
  }
  if (q == LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P) {
    LibOrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(hashMessage, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_MESSAGE, message, 0, ((IOSByteArray *) nil_chk(message))->size_);
  }
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_withInt_withInt_withInt_withInt_(cSignature, 0, W, hashMessage, 0, n, k, d, q);
  if (LibOrgBouncycastlePqcCryptoQteslaCommonFunction_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(C, 0, cSignature, 0, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_HASH) == false) {
    return -3;
  }
  return 0;
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingPIWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withLongArray_(message, signature, signatureOffset, signatureLength, publicKey, LibOrgBouncycastlePqcCryptoQteslaParameter_N_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_K_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_H_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_B_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_D_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_U_I_P, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_I_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_I_P, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_I_P));
}

jint LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingPIIIWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey) {
  LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_initialize();
  return LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withInt_withInt_withLong_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withLongArray_(message, signature, signatureOffset, signatureLength, publicKey, LibOrgBouncycastlePqcCryptoQteslaParameter_N_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_K_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_H_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_INVERSE_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_Q_LOGARITHM_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_B_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_D_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_U_III_P, LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPolynomial_SIGNATURE_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_GENERATOR_A_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_INVERSE_NUMBER_THEORETIC_TRANSFORM_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_MULTIPLICATION_III_P, LibOrgBouncycastlePqcCryptoQteslaParameter_BARRETT_DIVISION_III_P, JreLoadStatic(LibOrgBouncycastlePqcCryptoQteslaPolynomialProvablySecure, ZETA_III_P));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQTESLA)
