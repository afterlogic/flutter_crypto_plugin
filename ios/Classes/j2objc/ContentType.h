//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/ContentType.java
//

#ifndef ContentType_H
#define ContentType_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsContentType : NSObject
@property (readonly, class) jshort change_cipher_spec NS_SWIFT_NAME(change_cipher_spec);
@property (readonly, class) jshort alert NS_SWIFT_NAME(alert);
@property (readonly, class) jshort handshake NS_SWIFT_NAME(handshake);
@property (readonly, class) jshort application_data NS_SWIFT_NAME(application_data);
@property (readonly, class) jshort heartbeat NS_SWIFT_NAME(heartbeat);

+ (jshort)change_cipher_spec;

+ (jshort)alert;

+ (jshort)handshake;

+ (jshort)application_data;

+ (jshort)heartbeat;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsContentType)

inline jshort LibOrgBouncycastleCryptoTlsContentType_get_change_cipher_spec(void);
#define LibOrgBouncycastleCryptoTlsContentType_change_cipher_spec 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsContentType, change_cipher_spec, jshort)

inline jshort LibOrgBouncycastleCryptoTlsContentType_get_alert(void);
#define LibOrgBouncycastleCryptoTlsContentType_alert 21
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsContentType, alert, jshort)

inline jshort LibOrgBouncycastleCryptoTlsContentType_get_handshake(void);
#define LibOrgBouncycastleCryptoTlsContentType_handshake 22
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsContentType, handshake, jshort)

inline jshort LibOrgBouncycastleCryptoTlsContentType_get_application_data(void);
#define LibOrgBouncycastleCryptoTlsContentType_application_data 23
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsContentType, application_data, jshort)

inline jshort LibOrgBouncycastleCryptoTlsContentType_get_heartbeat(void);
#define LibOrgBouncycastleCryptoTlsContentType_heartbeat 24
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsContentType, heartbeat, jshort)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsContentType_init(LibOrgBouncycastleCryptoTlsContentType *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsContentType *new_LibOrgBouncycastleCryptoTlsContentType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsContentType *create_LibOrgBouncycastleCryptoTlsContentType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsContentType)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ContentType_H
