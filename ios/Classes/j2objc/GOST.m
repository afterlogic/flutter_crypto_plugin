//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/GOST.java
//

#include "ASN1ObjectIdentifier.h"
#include "AsymmetricAlgorithmProvider.h"
#include "ConfigurableProvider.h"
#include "CryptoProObjectIdentifiers.h"
#include "GOST.h"
#include "J2ObjC_source.h"
#include "KeyFactorySpi.h"

inline NSString *LibOrgBouncycastleJcajceProviderAsymmetricGOST_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderAsymmetricGOST_PREFIX = @"lib.org.bouncycastle.jcajce.provider.asymmetric.gost.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricGOST, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricGOST

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricGOST_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &LibOrgBouncycastleJcajceProviderAsymmetricGOST_PREFIX, "LLibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricGOST = { "GOST", "lib.org.bouncycastle.jcajce.provider.asymmetric", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, 1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricGOST;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricGOST_init(LibOrgBouncycastleJcajceProviderAsymmetricGOST *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricGOST *new_LibOrgBouncycastleJcajceProviderAsymmetricGOST_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricGOST, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricGOST *create_LibOrgBouncycastleJcajceProviderAsymmetricGOST_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricGOST, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricGOST)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"KeyPairGenerator.GOST3410" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricGOST_PREFIX, @"JcajceGostKeyPairGeneratorSpi")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.KeyPairGenerator.GOST-3410" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.KeyPairGenerator.GOST-3410-94" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"KeyFactory.GOST3410" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricGOST_PREFIX, @"KeyFactorySpi")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.KeyFactory.GOST-3410" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.KeyFactory.GOST-3410-94" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"AlgorithmParameters.GOST3410" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricGOST_PREFIX, @"GostAlgorithmParametersSpi")];
  [provider addAlgorithmWithNSString:@"AlgorithmParameterGenerator.GOST3410" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricGOST_PREFIX, @"GostAlgorithmParameterGeneratorSpi")];
  [self registerOidWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_94) withNSString:@"GOST3410" withLibOrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter:new_LibOrgBouncycastleJcajceProviderAsymmetricGostKeyFactorySpi_init()];
  [self registerOidAlgorithmParameterGeneratorWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_94) withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Signature.GOST3410" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderAsymmetricGOST_PREFIX, @"JcajceGostSignatureSpi")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Signature.GOST-3410" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Signature.GOST-3410-94" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Signature.GOST3411withGOST3410" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Signature.GOST3411WITHGOST3410" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.Signature.GOST3411WithGOST3410" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.Signature.", JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3411_94_with_gostR3410_94)) withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.AlgorithmParameterGenerator.GOST-3410" withNSString:@"GOST3410"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.AlgorithmParameters.GOST-3410" withNSString:@"GOST3410"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", "LLibOrgBouncycastleJcajceProviderAsymmetricGOST;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.asymmetric", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings_init(LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings *self) {
  LibOrgBouncycastleJcajceProviderUtilAsymmetricAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings *new_LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings *create_LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricGOST_Mappings)
