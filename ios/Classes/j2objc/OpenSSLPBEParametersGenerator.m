//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/OpenSSLPBEParametersGenerator.java
//

#include "CipherParameters.h"
#include "Digest.h"
#include "DigestFactory.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OpenSSLPBEParametersGenerator.h"
#include "PBEParametersGenerator.h"
#include "ParametersWithIV.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
}

- (IOSByteArray *)generateDerivedKeyWithInt:(jint)bytesNeeded;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator, digest_, id<LibOrgBouncycastleCryptoDigest>)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_generateDerivedKeyWithInt_(LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator *self, jint bytesNeeded);

@implementation LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithByteArray:(IOSByteArray *)password
              withByteArray:(IOSByteArray *)salt {
  [super init__WithByteArray:password withByteArray:salt withInt:1];
}

- (IOSByteArray *)generateDerivedKeyWithInt:(jint)bytesNeeded {
  return LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_generateDerivedKeyWithInt_(self, bytesNeeded);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedParametersWithInt:(jint)keySize {
  keySize = keySize / 8;
  IOSByteArray *dKey = LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_generateDerivedKeyWithInt_(self, keySize);
  return new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(dKey, 0, keySize);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedParametersWithInt:(jint)keySize
                                                                         withInt:(jint)ivSize {
  keySize = keySize / 8;
  ivSize = ivSize / 8;
  IOSByteArray *dKey = LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_generateDerivedKeyWithInt_(self, keySize + ivSize);
  return new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_withInt_withInt_(new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(dKey, 0, keySize), dKey, keySize, ivSize);
}

- (id<LibOrgBouncycastleCryptoCipherParameters>)generateDerivedMacParametersWithInt:(jint)keySize {
  return [self generateDerivedParametersWithInt:keySize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoCipherParameters;", 0x1, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithByteArray:withByteArray:);
  methods[2].selector = @selector(generateDerivedKeyWithInt:);
  methods[3].selector = @selector(generateDerivedParametersWithInt:);
  methods[4].selector = @selector(generateDerivedParametersWithInt:withInt:);
  methods[5].selector = @selector(generateDerivedMacParametersWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "[B[B", "generateDerivedKey", "I", "generateDerivedParameters", "II", "generateDerivedMacParameters" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator = { "OpenSSLPBEParametersGenerator", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator;
}

@end

void LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_init(LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator *self) {
  LibOrgBouncycastleCryptoPBEParametersGenerator_init(self);
  self->digest_ = LibOrgBouncycastleCryptoUtilDigestFactory_createMD5();
}

LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator *new_LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator, init)
}

LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator *create_LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator, init)
}

IOSByteArray *LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_generateDerivedKeyWithInt_(LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator *self, jint bytesNeeded) {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize]];
  IOSByteArray *key = [IOSByteArray newArrayWithLength:bytesNeeded];
  jint offset = 0;
  for (; ; ) {
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:self->password_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->password_))->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:self->salt_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->salt_))->size_];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:buf withInt:0];
    jint len = (bytesNeeded > buf->size_) ? buf->size_ : bytesNeeded;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, key, offset, len);
    offset += len;
    bytesNeeded -= len;
    if (bytesNeeded == 0) {
      break;
    }
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) reset];
    [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:buf withInt:0 withInt:buf->size_];
  }
  return key;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsOpenSSLPBEParametersGenerator)
