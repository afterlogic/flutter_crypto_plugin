//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/crmf/CertTemplateBuilder.java
//

#ifndef CertTemplateBuilder_H
#define CertTemplateBuilder_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Integer;
@class LibOrgBouncycastleAsn1CrmfCertTemplate;
@class LibOrgBouncycastleAsn1CrmfOptionalValidity;
@class LibOrgBouncycastleAsn1DERBitString;
@class LibOrgBouncycastleAsn1X500X500Name;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@class LibOrgBouncycastleAsn1X509Extensions;
@class LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class LibOrgBouncycastleAsn1X509X509Extensions;

@interface LibOrgBouncycastleAsn1CrmfCertTemplateBuilder : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (LibOrgBouncycastleAsn1CrmfCertTemplate *)build;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setExtensionsWithLibOrgBouncycastleAsn1X509Extensions:(LibOrgBouncycastleAsn1X509Extensions *)extens;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setExtensionsWithLibOrgBouncycastleAsn1X509X509Extensions:(LibOrgBouncycastleAsn1X509X509Extensions *)extens;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setIssuerWithLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)name;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setIssuerUIDWithLibOrgBouncycastleAsn1DERBitString:(LibOrgBouncycastleAsn1DERBitString *)uid;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setPublicKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)spki;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setSerialNumberWithLibOrgBouncycastleAsn1ASN1Integer:(LibOrgBouncycastleAsn1ASN1Integer *)ser;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setSigningAlgWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)aid;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setSubjectWithLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)name;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setSubjectUIDWithLibOrgBouncycastleAsn1DERBitString:(LibOrgBouncycastleAsn1DERBitString *)uid;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setValidityWithLibOrgBouncycastleAsn1CrmfOptionalValidity:(LibOrgBouncycastleAsn1CrmfOptionalValidity *)v;

- (LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *)setVersionWithInt:(jint)ver;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1CrmfCertTemplateBuilder)

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1CrmfCertTemplateBuilder_init(LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *self);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *new_LibOrgBouncycastleAsn1CrmfCertTemplateBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1CrmfCertTemplateBuilder *create_LibOrgBouncycastleAsn1CrmfCertTemplateBuilder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1CrmfCertTemplateBuilder)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CertTemplateBuilder_H
