//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/UDPTransport.java
//

#ifndef UDPTransport_H
#define UDPTransport_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DatagramTransport.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaNetDatagramSocket;

@interface LibOrgBouncycastleCryptoTlsUDPTransport : NSObject < LibOrgBouncycastleCryptoTlsDatagramTransport > {
 @public
  JavaNetDatagramSocket *socket_;
  jint receiveLimit_;
  jint sendLimit_;
}
@property (readonly, class) jint MIN_IP_OVERHEAD NS_SWIFT_NAME(MIN_IP_OVERHEAD);
@property (readonly, class) jint MAX_IP_OVERHEAD NS_SWIFT_NAME(MAX_IP_OVERHEAD);
@property (readonly, class) jint UDP_OVERHEAD NS_SWIFT_NAME(UDP_OVERHEAD);

+ (jint)MIN_IP_OVERHEAD;

+ (jint)MAX_IP_OVERHEAD;

+ (jint)UDP_OVERHEAD;

#pragma mark Public

- (instancetype __nonnull)initWithJavaNetDatagramSocket:(JavaNetDatagramSocket *)socket
                                                withInt:(jint)mtu;

- (void)close;

- (jint)getReceiveLimit;

- (jint)getSendLimit;

- (jint)receiveWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)off
                     withInt:(jint)len
                     withInt:(jint)waitMillis;

- (void)sendWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsUDPTransport)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsUDPTransport, socket_, JavaNetDatagramSocket *)

inline jint LibOrgBouncycastleCryptoTlsUDPTransport_get_MIN_IP_OVERHEAD(void);
#define LibOrgBouncycastleCryptoTlsUDPTransport_MIN_IP_OVERHEAD 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsUDPTransport, MIN_IP_OVERHEAD, jint)

inline jint LibOrgBouncycastleCryptoTlsUDPTransport_get_MAX_IP_OVERHEAD(void);
#define LibOrgBouncycastleCryptoTlsUDPTransport_MAX_IP_OVERHEAD 84
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsUDPTransport, MAX_IP_OVERHEAD, jint)

inline jint LibOrgBouncycastleCryptoTlsUDPTransport_get_UDP_OVERHEAD(void);
#define LibOrgBouncycastleCryptoTlsUDPTransport_UDP_OVERHEAD 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsUDPTransport, UDP_OVERHEAD, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsUDPTransport_initWithJavaNetDatagramSocket_withInt_(LibOrgBouncycastleCryptoTlsUDPTransport *self, JavaNetDatagramSocket *socket, jint mtu);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsUDPTransport *new_LibOrgBouncycastleCryptoTlsUDPTransport_initWithJavaNetDatagramSocket_withInt_(JavaNetDatagramSocket *socket, jint mtu) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsUDPTransport *create_LibOrgBouncycastleCryptoTlsUDPTransport_initWithJavaNetDatagramSocket_withInt_(JavaNetDatagramSocket *socket, jint mtu);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsUDPTransport)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // UDPTransport_H
