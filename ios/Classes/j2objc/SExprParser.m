//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/SExprParser.java
//

#include "ASN1ObjectIdentifier.h"
#include "Arrays.h"
#include "BCPGKey.h"
#include "DSAPublicBCPGKey.h"
#include "DSASecretBCPGKey.h"
#include "ECDSAPublicBCPGKey.h"
#include "ECNamedCurveTable.h"
#include "ECPublicBCPGKey.h"
#include "ECSecretBCPGKey.h"
#include "ElGamalPublicBCPGKey.h"
#include "ElGamalSecretBCPGKey.h"
#include "HashAlgorithmTags.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFingerPrintCalculator.h"
#include "PBEProtectionRemoverFactory.h"
#include "PBESecretKeyDecryptor.h"
#include "PGPDigestCalculator.h"
#include "PGPDigestCalculatorProvider.h"
#include "PGPException.h"
#include "PGPPublicKey.h"
#include "PGPSecretKey.h"
#include "PublicKeyAlgorithmTags.h"
#include "PublicKeyPacket.h"
#include "RSAPublicBCPGKey.h"
#include "RSASecretBCPGKey.h"
#include "S2K.h"
#include "SExprParser.h"
#include "SXprUtils.h"
#include "SecretKeyPacket.h"
#include "Strings.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"

@interface LibOrgBouncycastleGpgSExprParser () {
 @public
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider> digestProvider_;
}

- (JavaMathBigInteger *)readBigIntegerWithNSString:(NSString *)expectedType
                             withJavaIoInputStream:(JavaIoInputStream *)inputStream;

+ (IOSObjectArray *)extractDataWithJavaIoInputStream:(JavaIoInputStream *)inputStream
withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory;

- (JavaMathBigInteger *)processDSASecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                          withJavaMathBigInteger:(JavaMathBigInteger *)p
                                          withJavaMathBigInteger:(JavaMathBigInteger *)q
                                          withJavaMathBigInteger:(JavaMathBigInteger *)g
                                          withJavaMathBigInteger:(JavaMathBigInteger *)y
withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory;

- (JavaMathBigInteger *)processElGamalSecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                              withJavaMathBigInteger:(JavaMathBigInteger *)p
                                              withJavaMathBigInteger:(JavaMathBigInteger *)g
                                              withJavaMathBigInteger:(JavaMathBigInteger *)y
    withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory;

- (JavaMathBigInteger *)processECSecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                                   withNSString:(NSString *)curveID
                                                   withNSString:(NSString *)curveName
                                                  withByteArray:(IOSByteArray *)qVal
withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory;

- (IOSObjectArray *)processRSASecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                      withJavaMathBigInteger:(JavaMathBigInteger *)n
                                      withJavaMathBigInteger:(JavaMathBigInteger *)e
withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory;

- (void)writeCanonicalWithJavaIoOutputStream:(JavaIoOutputStream *)dOut
                                withNSString:(NSString *)label
                      withJavaMathBigInteger:(JavaMathBigInteger *)i;

- (void)writeCanonicalWithJavaIoOutputStream:(JavaIoOutputStream *)dOut
                                withNSString:(NSString *)label
                               withByteArray:(IOSByteArray *)data;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgSExprParser, digestProvider_, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>)

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(LibOrgBouncycastleGpgSExprParser *self, NSString *expectedType, JavaIoInputStream *inputStream);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleGpgSExprParser_extractDataWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(JavaIoInputStream *inputStream, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleGpgSExprParser_processDSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(LibOrgBouncycastleGpgSExprParser *self, JavaIoInputStream *inputStream, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *y, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleGpgSExprParser_processElGamalSecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(LibOrgBouncycastleGpgSExprParser *self, JavaIoInputStream *inputStream, JavaMathBigInteger *p, JavaMathBigInteger *g, JavaMathBigInteger *y, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleGpgSExprParser_processECSecretKeyWithJavaIoInputStream_withNSString_withNSString_withByteArray_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(LibOrgBouncycastleGpgSExprParser *self, JavaIoInputStream *inputStream, NSString *curveID, NSString *curveName, IOSByteArray *qVal, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleGpgSExprParser_processRSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(LibOrgBouncycastleGpgSExprParser *self, JavaIoInputStream *inputStream, JavaMathBigInteger *n, JavaMathBigInteger *e, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory);

__attribute__((unused)) static void LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(LibOrgBouncycastleGpgSExprParser *self, JavaIoOutputStream *dOut, NSString *label, JavaMathBigInteger *i);

__attribute__((unused)) static void LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withByteArray_(LibOrgBouncycastleGpgSExprParser *self, JavaIoOutputStream *dOut, NSString *label, IOSByteArray *data);

@implementation LibOrgBouncycastleGpgSExprParser

- (instancetype)initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider:(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>)digestProvider {
  LibOrgBouncycastleGpgSExprParser_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_(self, digestProvider);
  return self;
}

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)parseSecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
              withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory
                                     withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey {
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
  NSString *type;
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [((JavaIoInputStream *) nil_chk(inputStream)) read]);
  if ([((NSString *) nil_chk(type)) isEqual:@"protected-private-key"]) {
    LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
    NSString *keyType = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
    if ([((NSString *) nil_chk(keyType)) isEqual:@"ecc"]) {
      LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
      NSString *curveID = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
      NSString *curveName = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
      LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
      IOSByteArray *qVal;
      LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
      type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
      if ([((NSString *) nil_chk(type)) isEqual:@"q"]) {
        qVal = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
      }
      else {
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"no q value found");
      }
      LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
      JavaMathBigInteger *d = LibOrgBouncycastleGpgSExprParser_processECSecretKeyWithJavaIoInputStream_withNSString_withNSString_withByteArray_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, curveID, curveName, qVal, keyProtectionRemoverFactory);
      if ([((NSString *) nil_chk(curveName)) java_hasPrefix:@"NIST "]) {
        curveName = [curveName java_substring:[@"NIST " java_length]];
      }
      LibOrgBouncycastleBcpgECPublicBCPGKey *basePubKey = new_LibOrgBouncycastleBcpgECDSAPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(curveName), new_JavaMathBigInteger_initWithInt_withByteArray_(1, qVal));
      LibOrgBouncycastleBcpgECPublicBCPGKey *assocPubKey = (LibOrgBouncycastleBcpgECPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey)) getPublicKeyPacket])) getKey], [LibOrgBouncycastleBcpgECPublicBCPGKey class]);
      if (![((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([basePubKey getCurveOID])) isEqual:[((LibOrgBouncycastleBcpgECPublicBCPGKey *) nil_chk(assocPubKey)) getCurveOID]] || ![((JavaMathBigInteger *) nil_chk([basePubKey getEncodedPoint])) isEqual:[assocPubKey getEncodedPoint]]) {
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"passed in public key does not match secret key");
      }
      return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_([pubKey getPublicKeyPacket], LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [new_LibOrgBouncycastleBcpgECSecretBCPGKey_initWithJavaMathBigInteger_(d) getEncoded]), pubKey);
    }
    else if ([keyType isEqual:@"dsa"]) {
      JavaMathBigInteger *p = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"p", inputStream);
      JavaMathBigInteger *q = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"q", inputStream);
      JavaMathBigInteger *g = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"g", inputStream);
      JavaMathBigInteger *y = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"y", inputStream);
      JavaMathBigInteger *x = LibOrgBouncycastleGpgSExprParser_processDSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, p, q, g, y, keyProtectionRemoverFactory);
      LibOrgBouncycastleBcpgDSAPublicBCPGKey *basePubKey = new_LibOrgBouncycastleBcpgDSAPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, q, g, y);
      LibOrgBouncycastleBcpgDSAPublicBCPGKey *assocPubKey = (LibOrgBouncycastleBcpgDSAPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey)) getPublicKeyPacket])) getKey], [LibOrgBouncycastleBcpgDSAPublicBCPGKey class]);
      if (![((JavaMathBigInteger *) nil_chk([basePubKey getP])) isEqual:[((LibOrgBouncycastleBcpgDSAPublicBCPGKey *) nil_chk(assocPubKey)) getP]] || ![((JavaMathBigInteger *) nil_chk([basePubKey getQ])) isEqual:[assocPubKey getQ]] || ![((JavaMathBigInteger *) nil_chk([basePubKey getG])) isEqual:[assocPubKey getG]] || ![((JavaMathBigInteger *) nil_chk([basePubKey getY])) isEqual:[assocPubKey getY]]) {
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"passed in public key does not match secret key");
      }
      return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_([pubKey getPublicKeyPacket], LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [new_LibOrgBouncycastleBcpgDSASecretBCPGKey_initWithJavaMathBigInteger_(x) getEncoded]), pubKey);
    }
    else if ([keyType isEqual:@"elg"]) {
      JavaMathBigInteger *p = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"p", inputStream);
      JavaMathBigInteger *g = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"g", inputStream);
      JavaMathBigInteger *y = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"y", inputStream);
      JavaMathBigInteger *x = LibOrgBouncycastleGpgSExprParser_processElGamalSecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, p, g, y, keyProtectionRemoverFactory);
      LibOrgBouncycastleBcpgElGamalPublicBCPGKey *basePubKey = new_LibOrgBouncycastleBcpgElGamalPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, g, y);
      LibOrgBouncycastleBcpgElGamalPublicBCPGKey *assocPubKey = (LibOrgBouncycastleBcpgElGamalPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey)) getPublicKeyPacket])) getKey], [LibOrgBouncycastleBcpgElGamalPublicBCPGKey class]);
      if (![((JavaMathBigInteger *) nil_chk([basePubKey getP])) isEqual:[((LibOrgBouncycastleBcpgElGamalPublicBCPGKey *) nil_chk(assocPubKey)) getP]] || ![((JavaMathBigInteger *) nil_chk([basePubKey getG])) isEqual:[assocPubKey getG]] || ![((JavaMathBigInteger *) nil_chk([basePubKey getY])) isEqual:[assocPubKey getY]]) {
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"passed in public key does not match secret key");
      }
      return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_([pubKey getPublicKeyPacket], LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [new_LibOrgBouncycastleBcpgElGamalSecretBCPGKey_initWithJavaMathBigInteger_(x) getEncoded]), pubKey);
    }
    else if ([keyType isEqual:@"rsa"]) {
      JavaMathBigInteger *n = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"n", inputStream);
      JavaMathBigInteger *e = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"e", inputStream);
      IOSObjectArray *values = LibOrgBouncycastleGpgSExprParser_processRSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, n, e, keyProtectionRemoverFactory);
      LibOrgBouncycastleBcpgRSAPublicBCPGKey *basePubKey = new_LibOrgBouncycastleBcpgRSAPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(n, e);
      LibOrgBouncycastleBcpgRSAPublicBCPGKey *assocPubKey = (LibOrgBouncycastleBcpgRSAPublicBCPGKey *) cast_chk([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pubKey)) getPublicKeyPacket])) getKey], [LibOrgBouncycastleBcpgRSAPublicBCPGKey class]);
      if (![((JavaMathBigInteger *) nil_chk([basePubKey getModulus])) isEqual:[((LibOrgBouncycastleBcpgRSAPublicBCPGKey *) nil_chk(assocPubKey)) getModulus]] || ![((JavaMathBigInteger *) nil_chk([basePubKey getPublicExponent])) isEqual:[assocPubKey getPublicExponent]]) {
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"passed in public key does not match secret key");
      }
      return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_([pubKey getPublicKeyPacket], LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [new_LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(nil_chk(values), 0), IOSObjectArray_Get(values, 1), IOSObjectArray_Get(values, 2)) getEncoded]), pubKey);
    }
    else {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$$", @"unknown key type: ", keyType));
    }
  }
  @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"unknown key type found");
}

- (LibOrgBouncycastleOpenpgpPGPSecretKey *)parseSecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
              withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory
                 withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
  NSString *type;
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [((JavaIoInputStream *) nil_chk(inputStream)) read]);
  if ([((NSString *) nil_chk(type)) isEqual:@"protected-private-key"]) {
    LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
    NSString *keyType = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
    if ([((NSString *) nil_chk(keyType)) isEqual:@"ecc"]) {
      LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
      NSString *curveID = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
      NSString *curveName = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
      if ([((NSString *) nil_chk(curveName)) java_hasPrefix:@"NIST "]) {
        curveName = [curveName java_substring:[@"NIST " java_length]];
      }
      LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
      IOSByteArray *qVal;
      LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
      type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
      if ([((NSString *) nil_chk(type)) isEqual:@"q"]) {
        qVal = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
      }
      else {
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"no q value found");
      }
      LibOrgBouncycastleBcpgPublicKeyPacket *pubPacket = new_LibOrgBouncycastleBcpgPublicKeyPacket_initWithInt_withJavaUtilDate_withLibOrgBouncycastleBcpgBCPGKey_(LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA, new_JavaUtilDate_init(), new_LibOrgBouncycastleBcpgECDSAPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaMathBigInteger_(LibOrgBouncycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(curveName), new_JavaMathBigInteger_initWithInt_withByteArray_(1, qVal)));
      LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
      JavaMathBigInteger *d = LibOrgBouncycastleGpgSExprParser_processECSecretKeyWithJavaIoInputStream_withNSString_withNSString_withByteArray_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, curveID, curveName, qVal, keyProtectionRemoverFactory);
      return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(pubPacket, LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [new_LibOrgBouncycastleBcpgECSecretBCPGKey_initWithJavaMathBigInteger_(d) getEncoded]), new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(pubPacket, fingerPrintCalculator));
    }
    else if ([keyType isEqual:@"dsa"]) {
      JavaMathBigInteger *p = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"p", inputStream);
      JavaMathBigInteger *q = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"q", inputStream);
      JavaMathBigInteger *g = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"g", inputStream);
      JavaMathBigInteger *y = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"y", inputStream);
      JavaMathBigInteger *x = LibOrgBouncycastleGpgSExprParser_processDSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, p, q, g, y, keyProtectionRemoverFactory);
      LibOrgBouncycastleBcpgPublicKeyPacket *pubPacket = new_LibOrgBouncycastleBcpgPublicKeyPacket_initWithInt_withJavaUtilDate_withLibOrgBouncycastleBcpgBCPGKey_(LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA, new_JavaUtilDate_init(), new_LibOrgBouncycastleBcpgDSAPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, q, g, y));
      return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(pubPacket, LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [new_LibOrgBouncycastleBcpgDSASecretBCPGKey_initWithJavaMathBigInteger_(x) getEncoded]), new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(pubPacket, fingerPrintCalculator));
    }
    else if ([keyType isEqual:@"elg"]) {
      JavaMathBigInteger *p = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"p", inputStream);
      JavaMathBigInteger *g = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"g", inputStream);
      JavaMathBigInteger *y = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"y", inputStream);
      JavaMathBigInteger *x = LibOrgBouncycastleGpgSExprParser_processElGamalSecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, p, g, y, keyProtectionRemoverFactory);
      LibOrgBouncycastleBcpgPublicKeyPacket *pubPacket = new_LibOrgBouncycastleBcpgPublicKeyPacket_initWithInt_withJavaUtilDate_withLibOrgBouncycastleBcpgBCPGKey_(LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT, new_JavaUtilDate_init(), new_LibOrgBouncycastleBcpgElGamalPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, g, y));
      return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(pubPacket, LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [new_LibOrgBouncycastleBcpgElGamalSecretBCPGKey_initWithJavaMathBigInteger_(x) getEncoded]), new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(pubPacket, fingerPrintCalculator));
    }
    else if ([keyType isEqual:@"rsa"]) {
      JavaMathBigInteger *n = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"n", inputStream);
      JavaMathBigInteger *e = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"e", inputStream);
      IOSObjectArray *values = LibOrgBouncycastleGpgSExprParser_processRSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, n, e, keyProtectionRemoverFactory);
      LibOrgBouncycastleBcpgPublicKeyPacket *pubPacket = new_LibOrgBouncycastleBcpgPublicKeyPacket_initWithInt_withJavaUtilDate_withLibOrgBouncycastleBcpgBCPGKey_(LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL, new_JavaUtilDate_init(), new_LibOrgBouncycastleBcpgRSAPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(n, e));
      return new_LibOrgBouncycastleOpenpgpPGPSecretKey_initWithLibOrgBouncycastleBcpgSecretKeyPacket_withLibOrgBouncycastleOpenpgpPGPPublicKey_(new_LibOrgBouncycastleBcpgSecretKeyPacket_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withInt_withLibOrgBouncycastleBcpgS2K_withByteArray_withByteArray_(pubPacket, LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_NULL, nil, nil, [new_LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(nil_chk(values), 0), IOSObjectArray_Get(values, 1), IOSObjectArray_Get(values, 2)) getEncoded]), new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(pubPacket, fingerPrintCalculator));
    }
    else {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$$", @"unknown key type: ", keyType));
    }
  }
  @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"unknown key type found");
}

- (JavaMathBigInteger *)readBigIntegerWithNSString:(NSString *)expectedType
                             withJavaIoInputStream:(JavaIoInputStream *)inputStream {
  return LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, expectedType, inputStream);
}

+ (IOSObjectArray *)extractDataWithJavaIoInputStream:(JavaIoInputStream *)inputStream
withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory {
  return LibOrgBouncycastleGpgSExprParser_extractDataWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(inputStream, keyProtectionRemoverFactory);
}

- (JavaMathBigInteger *)processDSASecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                          withJavaMathBigInteger:(JavaMathBigInteger *)p
                                          withJavaMathBigInteger:(JavaMathBigInteger *)q
                                          withJavaMathBigInteger:(JavaMathBigInteger *)g
                                          withJavaMathBigInteger:(JavaMathBigInteger *)y
withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory {
  return LibOrgBouncycastleGpgSExprParser_processDSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, p, q, g, y, keyProtectionRemoverFactory);
}

- (JavaMathBigInteger *)processElGamalSecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                              withJavaMathBigInteger:(JavaMathBigInteger *)p
                                              withJavaMathBigInteger:(JavaMathBigInteger *)g
                                              withJavaMathBigInteger:(JavaMathBigInteger *)y
    withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory {
  return LibOrgBouncycastleGpgSExprParser_processElGamalSecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, p, g, y, keyProtectionRemoverFactory);
}

- (JavaMathBigInteger *)processECSecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                                   withNSString:(NSString *)curveID
                                                   withNSString:(NSString *)curveName
                                                  withByteArray:(IOSByteArray *)qVal
withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory {
  return LibOrgBouncycastleGpgSExprParser_processECSecretKeyWithJavaIoInputStream_withNSString_withNSString_withByteArray_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, curveID, curveName, qVal, keyProtectionRemoverFactory);
}

- (IOSObjectArray *)processRSASecretKeyWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                      withJavaMathBigInteger:(JavaMathBigInteger *)n
                                      withJavaMathBigInteger:(JavaMathBigInteger *)e
withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:(id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>)keyProtectionRemoverFactory {
  return LibOrgBouncycastleGpgSExprParser_processRSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(self, inputStream, n, e, keyProtectionRemoverFactory);
}

- (void)writeCanonicalWithJavaIoOutputStream:(JavaIoOutputStream *)dOut
                                withNSString:(NSString *)label
                      withJavaMathBigInteger:(JavaMathBigInteger *)i {
  LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, label, i);
}

- (void)writeCanonicalWithJavaIoOutputStream:(JavaIoOutputStream *)dOut
                                withNSString:(NSString *)label
                               withByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withByteArray_(self, dOut, label, data);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPSecretKey;", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 5, 6, 3, -1, -1, -1 },
    { NULL, "[[B", 0xa, 7, 8, 9, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 10, 11, 3, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 12, 13, 3, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 14, 15, 3, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x2, 16, 17, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 21, 20, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider:);
  methods[1].selector = @selector(parseSecretKeyWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:withLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[2].selector = @selector(parseSecretKeyWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[3].selector = @selector(readBigIntegerWithNSString:withJavaIoInputStream:);
  methods[4].selector = @selector(extractDataWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:);
  methods[5].selector = @selector(processDSASecretKeyWithJavaIoInputStream:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:);
  methods[6].selector = @selector(processElGamalSecretKeyWithJavaIoInputStream:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:);
  methods[7].selector = @selector(processECSecretKeyWithJavaIoInputStream:withNSString:withNSString:withByteArray:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:);
  methods[8].selector = @selector(processRSASecretKeyWithJavaIoInputStream:withJavaMathBigInteger:withJavaMathBigInteger:withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory:);
  methods[9].selector = @selector(writeCanonicalWithJavaIoOutputStream:withNSString:withJavaMathBigInteger:);
  methods[10].selector = @selector(writeCanonicalWithJavaIoOutputStream:withNSString:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digestProvider_", "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider;", "parseSecretKey", "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;LLibOrgBouncycastleOpenpgpPGPPublicKey;", "LJavaIoIOException;LLibOrgBouncycastleOpenpgpPGPException;", "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "readBigInteger", "LNSString;LJavaIoInputStream;", "extractData", "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;", "LLibOrgBouncycastleOpenpgpPGPException;LJavaIoIOException;", "processDSASecretKey", "LJavaIoInputStream;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;", "processElGamalSecretKey", "LJavaIoInputStream;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;", "processECSecretKey", "LJavaIoInputStream;LNSString;LNSString;[BLLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;", "processRSASecretKey", "LJavaIoInputStream;LJavaMathBigInteger;LJavaMathBigInteger;LLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory;", "writeCanonical", "LJavaIoOutputStream;LNSString;LJavaMathBigInteger;", "LJavaIoIOException;", "LJavaIoOutputStream;LNSString;[B" };
  static const J2ObjcClassInfo _LibOrgBouncycastleGpgSExprParser = { "SExprParser", "lib.org.bouncycastle.gpg", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleGpgSExprParser;
}

@end

void LibOrgBouncycastleGpgSExprParser_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_(LibOrgBouncycastleGpgSExprParser *self, id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider> digestProvider) {
  NSObject_init(self);
  self->digestProvider_ = digestProvider;
}

LibOrgBouncycastleGpgSExprParser *new_LibOrgBouncycastleGpgSExprParser_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider> digestProvider) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleGpgSExprParser, initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_, digestProvider)
}

LibOrgBouncycastleGpgSExprParser *create_LibOrgBouncycastleGpgSExprParser_initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_(id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider> digestProvider) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleGpgSExprParser, initWithLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider_, digestProvider)
}

JavaMathBigInteger *LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(LibOrgBouncycastleGpgSExprParser *self, NSString *expectedType, JavaIoInputStream *inputStream) {
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
  NSString *type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [((JavaIoInputStream *) nil_chk(inputStream)) read]);
  if (![((NSString *) nil_chk(type)) isEqual:expectedType]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$$", expectedType, @" value expected"));
  }
  IOSByteArray *nBytes = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
  JavaMathBigInteger *v = new_JavaMathBigInteger_initWithInt_withByteArray_(1, nBytes);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
  return v;
}

IOSObjectArray *LibOrgBouncycastleGpgSExprParser_extractDataWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(JavaIoInputStream *inputStream, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory) {
  LibOrgBouncycastleGpgSExprParser_initialize();
  IOSByteArray *data;
  IOSByteArray *protectedAt = nil;
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
  NSString *type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [((JavaIoInputStream *) nil_chk(inputStream)) read]);
  if ([((NSString *) nil_chk(type)) isEqual:@"protected"]) {
    NSString *protection = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
    LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(inputStream);
    LibOrgBouncycastleBcpgS2K *s2k = LibOrgBouncycastleGpgSXprUtils_parseS2KWithJavaIoInputStream_(inputStream);
    IOSByteArray *iv = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
    LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
    IOSByteArray *secKeyData = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(inputStream, [inputStream read]);
    LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
    LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *keyDecryptor = [((id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory>) nil_chk(keyProtectionRemoverFactory)) createDecryptorWithNSString:protection];
    IOSByteArray *key = [((LibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor *) nil_chk(keyDecryptor)) makeKeyFromPassPhraseWithInt:LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128 withLibOrgBouncycastleBcpgS2K:s2k];
    data = [keyDecryptor recoverKeyDataWithInt:LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128 withByteArray:key withByteArray:iv withByteArray:secKeyData withInt:0 withInt:((IOSByteArray *) nil_chk(secKeyData))->size_];
    if ([inputStream read] == '(') {
      JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
      [bOut writeWithInt:'('];
      jint ch;
      while ((ch = [inputStream read]) >= 0 && ch != ')') {
        [bOut writeWithInt:ch];
      }
      if (ch != ')') {
        @throw new_JavaIoIOException_initWithNSString_(@"unexpected end to SExpr");
      }
      [bOut writeWithInt:')'];
      protectedAt = [bOut toByteArray];
    }
    LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
    LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(inputStream);
  }
  else {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"protected block not found");
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ data, protectedAt } count:2 type:IOSClass_byteArray(1)];
}

JavaMathBigInteger *LibOrgBouncycastleGpgSExprParser_processDSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(LibOrgBouncycastleGpgSExprParser *self, JavaIoInputStream *inputStream, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *y, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory) {
  NSString *type;
  IOSObjectArray *basicData = LibOrgBouncycastleGpgSExprParser_extractDataWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(inputStream, keyProtectionRemoverFactory);
  IOSByteArray *keyData = IOSObjectArray_Get(nil_chk(basicData), 0);
  IOSByteArray *protectedAt = IOSObjectArray_Get(basicData, 1);
  JavaIoInputStream *keyIn = new_JavaIoByteArrayInputStream_initWithByteArray_(keyData);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  JavaMathBigInteger *x = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"x", keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  if (![((NSString *) nil_chk(type)) isEqual:@"hash"]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"hash keyword expected");
  }
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  if (![((NSString *) nil_chk(type)) isEqual:@"sha1"]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"hash keyword expected");
  }
  IOSByteArray *hashBytes = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(keyIn);
  if (self->digestProvider_ != nil) {
    id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalculator = [self->digestProvider_ getWithInt:LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1];
    JavaIoOutputStream *dOut = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(digestCalculator)) getOutputStream];
    [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@"(3:dsa")];
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"p", p);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"q", q);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"g", g);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"y", y);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"x", x);
    if (protectedAt != nil) {
      [dOut writeWithByteArray:protectedAt];
    }
    [dOut writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@")")];
    IOSByteArray *check = [digestCalculator getDigest];
    if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(check, hashBytes)) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"checksum on protected data failed in SExpr");
    }
  }
  return x;
}

JavaMathBigInteger *LibOrgBouncycastleGpgSExprParser_processElGamalSecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(LibOrgBouncycastleGpgSExprParser *self, JavaIoInputStream *inputStream, JavaMathBigInteger *p, JavaMathBigInteger *g, JavaMathBigInteger *y, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory) {
  NSString *type;
  IOSObjectArray *basicData = LibOrgBouncycastleGpgSExprParser_extractDataWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(inputStream, keyProtectionRemoverFactory);
  IOSByteArray *keyData = IOSObjectArray_Get(nil_chk(basicData), 0);
  IOSByteArray *protectedAt = IOSObjectArray_Get(basicData, 1);
  JavaIoInputStream *keyIn = new_JavaIoByteArrayInputStream_initWithByteArray_(keyData);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  JavaMathBigInteger *x = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"x", keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  if (![((NSString *) nil_chk(type)) isEqual:@"hash"]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"hash keyword expected");
  }
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  if (![((NSString *) nil_chk(type)) isEqual:@"sha1"]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"hash keyword expected");
  }
  IOSByteArray *hashBytes = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(keyIn);
  if (self->digestProvider_ != nil) {
    id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalculator = [self->digestProvider_ getWithInt:LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1];
    JavaIoOutputStream *dOut = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(digestCalculator)) getOutputStream];
    [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@"(3:elg")];
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"p", p);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"g", g);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"y", y);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"x", x);
    if (protectedAt != nil) {
      [dOut writeWithByteArray:protectedAt];
    }
    [dOut writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@")")];
    IOSByteArray *check = [digestCalculator getDigest];
    if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(check, hashBytes)) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"checksum on protected data failed in SExpr");
    }
  }
  return x;
}

JavaMathBigInteger *LibOrgBouncycastleGpgSExprParser_processECSecretKeyWithJavaIoInputStream_withNSString_withNSString_withByteArray_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(LibOrgBouncycastleGpgSExprParser *self, JavaIoInputStream *inputStream, NSString *curveID, NSString *curveName, IOSByteArray *qVal, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory) {
  NSString *type;
  IOSObjectArray *basicData = LibOrgBouncycastleGpgSExprParser_extractDataWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(inputStream, keyProtectionRemoverFactory);
  IOSByteArray *keyData = IOSObjectArray_Get(nil_chk(basicData), 0);
  IOSByteArray *protectedAt = IOSObjectArray_Get(basicData, 1);
  JavaIoInputStream *keyIn = new_JavaIoByteArrayInputStream_initWithByteArray_(keyData);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  JavaMathBigInteger *d = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"d", keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  if (![((NSString *) nil_chk(type)) isEqual:@"hash"]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"hash keyword expected");
  }
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  if (![((NSString *) nil_chk(type)) isEqual:@"sha1"]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"hash keyword expected");
  }
  IOSByteArray *hashBytes = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(keyIn);
  if (self->digestProvider_ != nil) {
    id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalculator = [self->digestProvider_ getWithInt:LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1];
    JavaIoOutputStream *dOut = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(digestCalculator)) getOutputStream];
    [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@"(3:ecc")];
    [dOut writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(JreStrcat("CIC$IC$C", '(', [((NSString *) nil_chk(curveID)) java_length], ':', curveID, [((NSString *) nil_chk(curveName)) java_length], ':', curveName, ')'))];
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withByteArray_(self, dOut, @"q", qVal);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"d", d);
    if (protectedAt != nil) {
      [dOut writeWithByteArray:protectedAt];
    }
    [dOut writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@")")];
    IOSByteArray *check = [digestCalculator getDigest];
    if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(check, hashBytes)) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"checksum on protected data failed in SExpr");
    }
  }
  return d;
}

IOSObjectArray *LibOrgBouncycastleGpgSExprParser_processRSASecretKeyWithJavaIoInputStream_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(LibOrgBouncycastleGpgSExprParser *self, JavaIoInputStream *inputStream, JavaMathBigInteger *n, JavaMathBigInteger *e, id<LibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory> keyProtectionRemoverFactory) {
  NSString *type;
  IOSObjectArray *basicData = LibOrgBouncycastleGpgSExprParser_extractDataWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorPBEProtectionRemoverFactory_(inputStream, keyProtectionRemoverFactory);
  IOSByteArray *keyData = IOSObjectArray_Get(nil_chk(basicData), 0);
  IOSByteArray *protectedAt = IOSObjectArray_Get(basicData, 1);
  JavaIoInputStream *keyIn = new_JavaIoByteArrayInputStream_initWithByteArray_(keyData);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  JavaMathBigInteger *d = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"d", keyIn);
  JavaMathBigInteger *p = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"p", keyIn);
  JavaMathBigInteger *q = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"q", keyIn);
  JavaMathBigInteger *u = LibOrgBouncycastleGpgSExprParser_readBigIntegerWithNSString_withJavaIoInputStream_(self, @"u", keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(keyIn);
  LibOrgBouncycastleGpgSXprUtils_skipOpenParenthesisWithJavaIoInputStream_(keyIn);
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  if (![((NSString *) nil_chk(type)) isEqual:@"hash"]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"hash keyword expected");
  }
  type = LibOrgBouncycastleGpgSXprUtils_readStringWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  if (![((NSString *) nil_chk(type)) isEqual:@"sha1"]) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"hash keyword expected");
  }
  IOSByteArray *hashBytes = LibOrgBouncycastleGpgSXprUtils_readBytesWithJavaIoInputStream_withInt_(keyIn, [keyIn read]);
  LibOrgBouncycastleGpgSXprUtils_skipCloseParenthesisWithJavaIoInputStream_(keyIn);
  if (self->digestProvider_ != nil) {
    id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> digestCalculator = [self->digestProvider_ getWithInt:LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1];
    JavaIoOutputStream *dOut = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator>) nil_chk(digestCalculator)) getOutputStream];
    [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@"(3:rsa")];
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"n", n);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"e", e);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"d", d);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"p", p);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"q", q);
    LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(self, dOut, @"u", u);
    if (protectedAt != nil) {
      [dOut writeWithByteArray:protectedAt];
    }
    [dOut writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@")")];
    IOSByteArray *check = [digestCalculator getDigest];
    if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(check, hashBytes)) {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"checksum on protected data failed in SExpr");
    }
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ d, p, q, u } count:4 type:JavaMathBigInteger_class_()];
}

void LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withJavaMathBigInteger_(LibOrgBouncycastleGpgSExprParser *self, JavaIoOutputStream *dOut, NSString *label, JavaMathBigInteger *i) {
  LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withByteArray_(self, dOut, label, [((JavaMathBigInteger *) nil_chk(i)) toByteArray]);
}

void LibOrgBouncycastleGpgSExprParser_writeCanonicalWithJavaIoOutputStream_withNSString_withByteArray_(LibOrgBouncycastleGpgSExprParser *self, JavaIoOutputStream *dOut, NSString *label, IOSByteArray *data) {
  [((JavaIoOutputStream *) nil_chk(dOut)) writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(JreStrcat("CIC$IC", '(', [((NSString *) nil_chk(label)) java_length], ':', label, ((IOSByteArray *) nil_chk(data))->size_, ':'))];
  [dOut writeWithByteArray:data];
  [dOut writeWithByteArray:LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@")")];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleGpgSExprParser)
