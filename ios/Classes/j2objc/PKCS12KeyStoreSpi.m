//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java
//

#include "ASN1Dump.h"
#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Encoding.h"
#include "ASN1InputStream.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1Set.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "AuthenticatedSafe.h"
#include "AuthorityKeyIdentifier.h"
#include "BCJcaJceHelper.h"
#include "BEROctetString.h"
#include "BEROutputStream.h"
#include "BouncyCastleProvider.h"
#include "CertBag.h"
#include "ContentInfo.h"
#include "CryptoProObjectIdentifiers.h"
#include "CryptoServicesRegistrar.h"
#include "DERBMPString.h"
#include "DERBitString.h"
#include "DERNull.h"
#include "DEROctetString.h"
#include "DEROutputStream.h"
#include "DERSequence.h"
#include "DERSet.h"
#include "DefaultJcaJceHelper.h"
#include "Digest.h"
#include "DigestFactory.h"
#include "DigestInfo.h"
#include "EncryptedData.h"
#include "EncryptedPrivateKeyInfo.h"
#include "EncryptionScheme.h"
#include "Extension.h"
#include "GOST28147Parameters.h"
#include "Hex.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "JDKPKCS12StoreParameter.h"
#include "JcaJceHelper.h"
#include "JcajceGOST28147ParameterSpec.h"
#include "KeyDerivationFunc.h"
#include "MacData.h"
#include "NISTObjectIdentifiers.h"
#include "NTTObjectIdentifiers.h"
#include "OIWObjectIdentifiers.h"
#include "PBES2Parameters.h"
#include "PBKDF2KeySpec.h"
#include "PBKDF2Params.h"
#include "PKCS12BagAttributeCarrier.h"
#include "PKCS12Key.h"
#include "PKCS12KeyStoreSpi.h"
#include "PKCS12PBEParams.h"
#include "PKCS12StoreParameter.h"
#include "PKCSObjectIdentifiers.h"
#include "Pfx.h"
#include "PrivateKeyInfo.h"
#include "Properties.h"
#include "SafeBag.h"
#include "Strings.h"
#include "SubjectKeyIdentifier.h"
#include "SubjectPublicKeyInfo.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/Key.h"
#include "java/security/KeyStore.h"
#include "java/security/KeyStoreException.h"
#include "java/security/KeyStoreSpi.h"
#include "java/security/Principal.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Hashtable.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/Mac.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/SecretKeyFactory.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "javax/crypto/spec/PBEKeySpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"

@class LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider;
@class LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable;

@interface LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi () {
 @public
  id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper_;
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *keys_;
  JavaUtilHashtable *localIds_;
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *certs_;
  JavaUtilHashtable *chainCerts_;
  JavaUtilHashtable *keyCerts_;
  JavaSecurityCertCertificateFactory *certFact_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *keyAlgorithm_;
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *certAlgorithm_;
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *macAlgorithm_;
  jint itCount_;
  jint saltLength_;
}

- (LibOrgBouncycastleAsn1X509SubjectKeyIdentifier *)createSubjectKeyIdWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pubKey;

+ (IOSByteArray *)getDigestWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)spki;

- (JavaxCryptoCipher *)createCipherWithInt:(jint)mode
                             withCharArray:(IOSCharArray *)password
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algId;

- (jint)validateIterationCountWithJavaMathBigInteger:(JavaMathBigInteger *)i;

- (void)doStoreWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                        withCharArray:(IOSCharArray *)password
                          withBoolean:(jboolean)useDEREncoding;

- (id<JavaUtilSet>)getUsedCertificateSet;

- (IOSByteArray *)calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                                  withByteArray:(IOSByteArray *)salt
                                                                        withInt:(jint)itCount
                                                                  withCharArray:(IOSCharArray *)password
                                                                    withBoolean:(jboolean)wrongPkcs12Zero
                                                                  withByteArray:(IOSByteArray *)data;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, helper_, id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, keys_, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, localIds_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, certs_, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, chainCerts_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, keyCerts_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, certFact_, JavaSecurityCertCertificateFactory *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, keyAlgorithm_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, certAlgorithm_, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, macAlgorithm_, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)

inline jint LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_get_SALT_SIZE(void);
#define LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_SALT_SIZE 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, SALT_SIZE, jint)

inline jint LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_get_MIN_ITERATIONS(void);
#define LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_MIN_ITERATIONS 51200
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, MIN_ITERATIONS, jint)

inline LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_get_keySizeProvider(void);
static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_keySizeProvider;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, keySizeProvider, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *)

__attribute__((unused)) static LibOrgBouncycastleAsn1X509SubjectKeyIdentifier *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, id<JavaSecurityPublicKey> pubKey);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_getDigestWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *spki);

__attribute__((unused)) static JavaxCryptoCipher *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createCipherWithInt_withCharArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, jint mode, IOSCharArray *password, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId);

__attribute__((unused)) static jint LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_validateIterationCountWithJavaMathBigInteger_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, JavaMathBigInteger *i);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_doStoreWithJavaIoOutputStream_withCharArray_withBoolean_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, JavaIoOutputStream *stream, IOSCharArray *password, jboolean useDEREncoding);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_getUsedCertificateSet(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_withInt_withCharArray_withBoolean_withByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, IOSByteArray *salt, jint itCount, IOSCharArray *password, jboolean wrongPkcs12Zero, IOSByteArray *data);

@interface LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId : NSObject {
 @public
  IOSByteArray *id__;
}

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *)outer$
                                                              withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *)outer$
                                                                          withByteArray:(IOSByteArray *)id_;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)o;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId, id__, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *self, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, id<JavaSecurityPublicKey> key);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, id<JavaSecurityPublicKey> key) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, id<JavaSecurityPublicKey> key);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *self, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, IOSByteArray *id_);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, IOSByteArray *id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, IOSByteArray *id_);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId)

@interface LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable : NSObject {
 @public
  JavaUtilHashtable *orig_;
  JavaUtilHashtable *keys_;
}

- (instancetype)init;

- (void)putWithNSString:(NSString *)key
                 withId:(id)value;

- (id<JavaUtilEnumeration>)keys;

- (id)removeWithNSString:(NSString *)alias;

- (id)getWithNSString:(NSString *)alias;

- (id<JavaUtilEnumeration>)elements;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable, orig_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable, keys_, JavaUtilHashtable *)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable)

@interface LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider : NSObject {
 @public
  id<JavaUtilMap> KEY_SIZES_;
}

- (instancetype)init;

- (jint)getKeySizeWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algorithmIdentifier;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider, KEY_SIZES_, id<JavaUtilMap>)

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider_init(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi)

NSString *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_PKCS12_MAX_IT_COUNT_PROPERTY = @"lib.org.bouncycastle.pkcs12.max_it_count";

@implementation LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi

+ (NSString *)PKCS12_MAX_IT_COUNT_PROPERTY {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_PKCS12_MAX_IT_COUNT_PROPERTY;
}

+ (jint)NULL_ {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_NULL;
}

+ (jint)CERTIFICATE {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CERTIFICATE;
}

+ (jint)KEY {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_KEY;
}

+ (jint)SECRET {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_SECRET;
}

+ (jint)SEALED {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_SEALED;
}

+ (jint)KEY_PRIVATE {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_KEY_PRIVATE;
}

+ (jint)KEY_PUBLIC {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_KEY_PUBLIC;
}

+ (jint)KEY_SECRET {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_KEY_SECRET;
}

- (instancetype)initWithLibOrgBouncycastleJcajceUtilJcaJceHelper:(id<LibOrgBouncycastleJcajceUtilJcaJceHelper>)helper
                  withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)keyAlgorithm
                  withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)certAlgorithm {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, helper, keyAlgorithm, certAlgorithm);
  return self;
}

- (LibOrgBouncycastleAsn1X509SubjectKeyIdentifier *)createSubjectKeyIdWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pubKey {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(self, pubKey);
}

+ (IOSByteArray *)getDigestWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)spki {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_getDigestWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(spki);
}

- (void)setRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand {
  self->random_ = rand;
}

- (id<JavaUtilEnumeration>)engineAliases {
  JavaUtilHashtable *tab = new_JavaUtilHashtable_init();
  id<JavaUtilEnumeration> e = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    (void) [tab putWithId:[e nextElement] withId:@"cert"];
  }
  e = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    NSString *a = (NSString *) cast_chk([e nextElement], [NSString class]);
    if ([tab getWithId:a] == nil) {
      (void) [tab putWithId:a withId:@"key"];
    }
  }
  return [tab keys];
}

- (jboolean)engineContainsAliasWithNSString:(NSString *)alias {
  return ([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) getWithNSString:alias] != nil || [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) getWithNSString:alias] != nil);
}

- (void)engineDeleteEntryWithNSString:(NSString *)alias {
  id<JavaSecurityKey> k = (id<JavaSecurityKey>) cast_check([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) removeWithNSString:alias], JavaSecurityKey_class_());
  JavaSecurityCertCertificate *c = (JavaSecurityCertCertificate *) cast_chk([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) removeWithNSString:alias], [JavaSecurityCertCertificate class]);
  if (c != nil) {
    (void) [((JavaUtilHashtable *) nil_chk(chainCerts_)) removeWithId:new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(self, [c getPublicKey])];
  }
  if (k != nil) {
    NSString *id_ = (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(localIds_)) removeWithId:alias], [NSString class]);
    if (id_ != nil) {
      c = (JavaSecurityCertCertificate *) cast_chk([((JavaUtilHashtable *) nil_chk(keyCerts_)) removeWithId:id_], [JavaSecurityCertCertificate class]);
    }
    if (c != nil) {
      (void) [((JavaUtilHashtable *) nil_chk(chainCerts_)) removeWithId:new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(self, [c getPublicKey])];
    }
  }
}

- (JavaSecurityCertCertificate *)engineGetCertificateWithNSString:(NSString *)alias {
  if (alias == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"null alias passed to getCertificate.");
  }
  JavaSecurityCertCertificate *c = (JavaSecurityCertCertificate *) cast_chk([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) getWithNSString:alias], [JavaSecurityCertCertificate class]);
  if (c == nil) {
    NSString *id_ = (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(localIds_)) getWithId:alias], [NSString class]);
    if (id_ != nil) {
      c = (JavaSecurityCertCertificate *) cast_chk([((JavaUtilHashtable *) nil_chk(keyCerts_)) getWithId:id_], [JavaSecurityCertCertificate class]);
    }
    else {
      c = (JavaSecurityCertCertificate *) cast_chk([((JavaUtilHashtable *) nil_chk(keyCerts_)) getWithId:alias], [JavaSecurityCertCertificate class]);
    }
  }
  return c;
}

- (NSString *)engineGetCertificateAliasWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  id<JavaUtilEnumeration> c = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) elements];
  id<JavaUtilEnumeration> k = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(c)) hasMoreElements]) {
    JavaSecurityCertCertificate *tc = (JavaSecurityCertCertificate *) cast_chk([c nextElement], [JavaSecurityCertCertificate class]);
    NSString *ta = (NSString *) cast_chk([((id<JavaUtilEnumeration>) nil_chk(k)) nextElement], [NSString class]);
    if ([((JavaSecurityCertCertificate *) nil_chk(tc)) isEqual:cert]) {
      return ta;
    }
  }
  c = [((JavaUtilHashtable *) nil_chk(keyCerts_)) elements];
  k = [((JavaUtilHashtable *) nil_chk(keyCerts_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(c)) hasMoreElements]) {
    JavaSecurityCertCertificate *tc = (JavaSecurityCertCertificate *) cast_chk([c nextElement], [JavaSecurityCertCertificate class]);
    NSString *ta = (NSString *) cast_chk([((id<JavaUtilEnumeration>) nil_chk(k)) nextElement], [NSString class]);
    if ([((JavaSecurityCertCertificate *) nil_chk(tc)) isEqual:cert]) {
      return ta;
    }
  }
  return nil;
}

- (IOSObjectArray *)engineGetCertificateChainWithNSString:(NSString *)alias {
  if (alias == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"null alias passed to getCertificateChain.");
  }
  if (![self engineIsKeyEntryWithNSString:alias]) {
    return nil;
  }
  JavaSecurityCertCertificate *c = [self engineGetCertificateWithNSString:alias];
  if (c != nil) {
    JavaUtilVector *cs = new_JavaUtilVector_init();
    while (c != nil) {
      JavaSecurityCertX509Certificate *x509c = (JavaSecurityCertX509Certificate *) cast_chk(c, [JavaSecurityCertX509Certificate class]);
      JavaSecurityCertCertificate *nextC = nil;
      IOSByteArray *bytes = [x509c getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, authorityKeyIdentifier))) getId]];
      if (bytes != nil) {
        @try {
          LibOrgBouncycastleAsn1ASN1InputStream *aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(bytes);
          IOSByteArray *authBytes = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(((LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([aIn readObject], [LibOrgBouncycastleAsn1ASN1OctetString class])))) getOctets];
          aIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(authBytes);
          LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier *id_ = LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier_getInstanceWithId_([aIn readObject]);
          if ([((LibOrgBouncycastleAsn1X509AuthorityKeyIdentifier *) nil_chk(id_)) getKeyIdentifier] != nil) {
            nextC = (JavaSecurityCertCertificate *) cast_chk([((JavaUtilHashtable *) nil_chk(chainCerts_)) getWithId:new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_(self, [id_ getKeyIdentifier])], [JavaSecurityCertCertificate class]);
          }
        }
        @catch (JavaIoIOException *e) {
          @throw new_JavaLangRuntimeException_initWithNSString_([e description]);
        }
      }
      if (nextC == nil) {
        id<JavaSecurityPrincipal> i = [x509c getIssuerDN];
        id<JavaSecurityPrincipal> s = [x509c getSubjectDN];
        if (![((id<JavaSecurityPrincipal>) nil_chk(i)) isEqual:s]) {
          id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(chainCerts_)) keys];
          while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
            JavaSecurityCertX509Certificate *crt = (JavaSecurityCertX509Certificate *) cast_chk([((JavaUtilHashtable *) nil_chk(chainCerts_)) getWithId:[e nextElement]], [JavaSecurityCertX509Certificate class]);
            id<JavaSecurityPrincipal> sub = [((JavaSecurityCertX509Certificate *) nil_chk(crt)) getSubjectDN];
            if ([((id<JavaSecurityPrincipal>) nil_chk(sub)) isEqual:i]) {
              @try {
                [x509c verifyWithJavaSecurityPublicKey:[crt getPublicKey]];
                nextC = crt;
                break;
              }
              @catch (JavaLangException *ex) {
              }
            }
          }
        }
      }
      if ([cs containsWithId:c]) {
        c = nil;
      }
      else {
        [cs addElementWithId:c];
        if (nextC != c) {
          c = nextC;
        }
        else {
          c = nil;
        }
      }
    }
    IOSObjectArray *certChain = [IOSObjectArray newArrayWithLength:[cs size] type:JavaSecurityCertCertificate_class_()];
    for (jint i = 0; i != certChain->size_; i++) {
      (void) IOSObjectArray_Set(certChain, i, (JavaSecurityCertCertificate *) cast_chk([cs elementAtWithInt:i], [JavaSecurityCertCertificate class]));
    }
    return certChain;
  }
  return nil;
}

- (JavaUtilDate *)engineGetCreationDateWithNSString:(NSString *)alias {
  if (alias == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"alias == null");
  }
  if ([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) getWithNSString:alias] == nil && [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) getWithNSString:alias] == nil) {
    return nil;
  }
  return new_JavaUtilDate_init();
}

- (id<JavaSecurityKey>)engineGetKeyWithNSString:(NSString *)alias
                                  withCharArray:(IOSCharArray *)password {
  if (alias == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"null alias passed to getKey.");
  }
  return (id<JavaSecurityKey>) cast_check([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) getWithNSString:alias], JavaSecurityKey_class_());
}

- (jboolean)engineIsCertificateEntryWithNSString:(NSString *)alias {
  return ([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) getWithNSString:alias] != nil && [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) getWithNSString:alias] == nil);
}

- (jboolean)engineIsKeyEntryWithNSString:(NSString *)alias {
  return ([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) getWithNSString:alias] != nil);
}

- (void)engineSetCertificateEntryWithNSString:(NSString *)alias
              withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  if ([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) getWithNSString:alias] != nil) {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_(JreStrcat("$$C", @"There is a key entry with the name ", alias, '.'));
  }
  [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) putWithNSString:alias withId:cert];
  (void) [((JavaUtilHashtable *) nil_chk(chainCerts_)) putWithId:new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(self, [((JavaSecurityCertCertificate *) nil_chk(cert)) getPublicKey]) withId:cert];
}

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                        withByteArray:(IOSByteArray *)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"operation not supported");
}

- (void)engineSetKeyEntryWithNSString:(NSString *)alias
                  withJavaSecurityKey:(id<JavaSecurityKey>)key
                        withCharArray:(IOSCharArray *)password
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain {
  if (!([JavaSecurityPrivateKey_class_() isInstance:key])) {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"PKCS12 does not support non-PrivateKeys");
  }
  if (([JavaSecurityPrivateKey_class_() isInstance:key]) && (chain == nil)) {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_(@"no certificate chain for private key");
  }
  if ([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) getWithNSString:alias] != nil) {
    [self engineDeleteEntryWithNSString:alias];
  }
  [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:alias withId:key];
  if (chain != nil) {
    [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) putWithNSString:alias withId:IOSObjectArray_Get(chain, 0)];
    for (jint i = 0; i != chain->size_; i++) {
      (void) [((JavaUtilHashtable *) nil_chk(chainCerts_)) putWithId:new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(self, [((JavaSecurityCertCertificate *) nil_chk(IOSObjectArray_Get(chain, i))) getPublicKey]) withId:IOSObjectArray_Get(chain, i)];
    }
  }
}

- (jint)engineSize {
  JavaUtilHashtable *tab = new_JavaUtilHashtable_init();
  id<JavaUtilEnumeration> e = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    (void) [tab putWithId:[e nextElement] withId:@"cert"];
  }
  e = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    NSString *a = (NSString *) cast_chk([e nextElement], [NSString class]);
    if ([tab getWithId:a] == nil) {
      (void) [tab putWithId:a withId:@"key"];
    }
  }
  return [tab size];
}

- (id<JavaSecurityPrivateKey>)unwrapKeyWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algId
                                                                           withByteArray:(IOSByteArray *)data
                                                                           withCharArray:(IOSCharArray *)password
                                                                             withBoolean:(jboolean)wrongPKCS12Zero {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm];
  @try {
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algorithm)) onWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_12PbeIds)]) {
      LibOrgBouncycastleAsn1PkcsPKCS12PBEParams *pbeParams = LibOrgBouncycastleAsn1PkcsPKCS12PBEParams_getInstanceWithId_([algId getParameters]);
      JavaxCryptoSpecPBEParameterSpec *defParams = new_JavaxCryptoSpecPBEParameterSpec_initWithByteArray_withInt_([((LibOrgBouncycastleAsn1PkcsPKCS12PBEParams *) nil_chk(pbeParams)) getIV], LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_validateIterationCountWithJavaMathBigInteger_(self, [pbeParams getIterations]));
      JavaxCryptoCipher *cipher = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createCipherWithNSString:[algorithm getId]];
      LibOrgBouncycastleJcajcePKCS12Key *key = new_LibOrgBouncycastleJcajcePKCS12Key_initWithCharArray_withBoolean_(password, wrongPKCS12Zero);
      [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_UNWRAP_MODE withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:defParams];
      return (id<JavaSecurityPrivateKey>) cast_check([cipher unwrapWithByteArray:data withNSString:@"" withInt:JavaxCryptoCipher_PRIVATE_KEY], JavaSecurityPrivateKey_class_());
    }
    else if ([algorithm isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2)]) {
      JavaxCryptoCipher *cipher = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createCipherWithInt_withCharArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(self, JavaxCryptoCipher_UNWRAP_MODE, password, algId);
      return (id<JavaSecurityPrivateKey>) cast_check([((JavaxCryptoCipher *) nil_chk(cipher)) unwrapWithByteArray:data withNSString:@"" withInt:JavaxCryptoCipher_PRIVATE_KEY], JavaSecurityPrivateKey_class_());
    }
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"exception unwrapping private key - ", [e description]));
  }
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"exception unwrapping private key - cannot recognise: ", algorithm));
}

- (IOSByteArray *)wrapKeyWithNSString:(NSString *)algorithm
                  withJavaSecurityKey:(id<JavaSecurityKey>)key
withLibOrgBouncycastleAsn1PkcsPKCS12PBEParams:(LibOrgBouncycastleAsn1PkcsPKCS12PBEParams *)pbeParams
                        withCharArray:(IOSCharArray *)password {
  JavaxCryptoSpecPBEKeySpec *pbeSpec = new_JavaxCryptoSpecPBEKeySpec_initWithCharArray_(password);
  IOSByteArray *out;
  @try {
    JavaxCryptoSecretKeyFactory *keyFact = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createSecretKeyFactoryWithNSString:algorithm];
    JavaxCryptoSpecPBEParameterSpec *defParams = new_JavaxCryptoSpecPBEParameterSpec_initWithByteArray_withInt_([((LibOrgBouncycastleAsn1PkcsPKCS12PBEParams *) nil_chk(pbeParams)) getIV], [((JavaMathBigInteger *) nil_chk([pbeParams getIterations])) intValue]);
    JavaxCryptoCipher *cipher = [helper_ createCipherWithNSString:algorithm];
    [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_WRAP_MODE withJavaSecurityKey:[((JavaxCryptoSecretKeyFactory *) nil_chk(keyFact)) generateSecretWithJavaSecuritySpecKeySpec:pbeSpec] withJavaSecuritySpecAlgorithmParameterSpec:defParams];
    out = [cipher wrapWithJavaSecurityKey:key];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"exception encrypting data - ", [e description]));
  }
  return out;
}

- (IOSByteArray *)cryptDataWithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algId
                         withCharArray:(IOSCharArray *)password
                           withBoolean:(jboolean)wrongPKCS12Zero
                         withByteArray:(IOSByteArray *)data {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm];
  jint mode = forEncryption ? JavaxCryptoCipher_ENCRYPT_MODE : JavaxCryptoCipher_DECRYPT_MODE;
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algorithm)) onWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_12PbeIds)]) {
    LibOrgBouncycastleAsn1PkcsPKCS12PBEParams *pbeParams = LibOrgBouncycastleAsn1PkcsPKCS12PBEParams_getInstanceWithId_([algId getParameters]);
    @try {
      JavaxCryptoSpecPBEParameterSpec *defParams = new_JavaxCryptoSpecPBEParameterSpec_initWithByteArray_withInt_([((LibOrgBouncycastleAsn1PkcsPKCS12PBEParams *) nil_chk(pbeParams)) getIV], [((JavaMathBigInteger *) nil_chk([pbeParams getIterations])) intValue]);
      LibOrgBouncycastleJcajcePKCS12Key *key = new_LibOrgBouncycastleJcajcePKCS12Key_initWithCharArray_withBoolean_(password, wrongPKCS12Zero);
      JavaxCryptoCipher *cipher = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper_)) createCipherWithNSString:[algorithm getId]];
      [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:mode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:defParams];
      return [cipher doFinalWithByteArray:data];
    }
    @catch (JavaLangException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"exception decrypting data - ", [e description]));
    }
  }
  else if ([algorithm isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_PBES2)]) {
    @try {
      JavaxCryptoCipher *cipher = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createCipherWithInt_withCharArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(self, mode, password, algId);
      return [((JavaxCryptoCipher *) nil_chk(cipher)) doFinalWithByteArray:data];
    }
    @catch (JavaLangException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"exception decrypting data - ", [e description]));
    }
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"unknown PBE algorithm: ", algorithm));
  }
}

- (JavaxCryptoCipher *)createCipherWithInt:(jint)mode
                             withCharArray:(IOSCharArray *)password
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algId {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createCipherWithInt_withCharArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(self, mode, password, algId);
}

- (void)engineLoadWithJavaIoInputStream:(JavaIoInputStream *)stream
                          withCharArray:(IOSCharArray *)password {
  if (stream == nil) {
    return;
  }
  if (password == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"No password supplied for PKCS#12 KeyStore.");
  }
  JavaIoBufferedInputStream *bufIn = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(stream);
  [bufIn markWithInt:10];
  jint head = [bufIn read];
  if (head != (jint) 0x30) {
    @throw new_JavaIoIOException_initWithNSString_(@"stream does not represent a PKCS12 key store");
  }
  [bufIn reset];
  LibOrgBouncycastleAsn1ASN1InputStream *bIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(bufIn);
  LibOrgBouncycastleAsn1PkcsPfx *bag;
  @try {
    bag = LibOrgBouncycastleAsn1PkcsPfx_getInstanceWithId_([bIn readObject]);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_([e getMessage]);
  }
  LibOrgBouncycastleAsn1PkcsContentInfo *info = [((LibOrgBouncycastleAsn1PkcsPfx *) nil_chk(bag)) getAuthSafe];
  JavaUtilVector *chain = new_JavaUtilVector_init();
  jboolean unmarkedKey = false;
  jboolean wrongPKCS12Zero = false;
  if ([bag getMacData] != nil) {
    LibOrgBouncycastleAsn1PkcsMacData *mData = [bag getMacData];
    LibOrgBouncycastleAsn1X509DigestInfo *dInfo = [((LibOrgBouncycastleAsn1PkcsMacData *) nil_chk(mData)) getMac];
    macAlgorithm_ = [((LibOrgBouncycastleAsn1X509DigestInfo *) nil_chk(dInfo)) getAlgorithmId];
    IOSByteArray *salt = [mData getSalt];
    itCount_ = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_validateIterationCountWithJavaMathBigInteger_(self, [mData getIterationCount]);
    saltLength_ = ((IOSByteArray *) nil_chk(salt))->size_;
    IOSByteArray *data = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(((LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([((LibOrgBouncycastleAsn1PkcsContentInfo *) nil_chk(info)) getContent], [LibOrgBouncycastleAsn1ASN1OctetString class])))) getOctets];
    @try {
      IOSByteArray *res = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_withInt_withCharArray_withBoolean_withByteArray_(self, [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(macAlgorithm_)) getAlgorithm], salt, itCount_, password, false, data);
      IOSByteArray *dig = [dInfo getDigest];
      if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(res, dig)) {
        if (password->size_ > 0) {
          @throw new_JavaIoIOException_initWithNSString_(@"PKCS12 key store mac invalid - wrong password or corrupted file.");
        }
        res = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_withInt_withCharArray_withBoolean_withByteArray_(self, [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(macAlgorithm_)) getAlgorithm], salt, itCount_, password, true, data);
        if (!LibOrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(res, dig)) {
          @throw new_JavaIoIOException_initWithNSString_(@"PKCS12 key store mac invalid - wrong password or corrupted file.");
        }
        wrongPKCS12Zero = true;
      }
    }
    @catch (JavaIoIOException *e) {
      @throw e;
    }
    @catch (JavaLangException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"error constructing MAC: ", [e description]));
    }
  }
  keys_ = new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init();
  localIds_ = new_JavaUtilHashtable_init();
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsContentInfo *) nil_chk(info)) getContentType])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, data)]) {
    bIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(((LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([info getContent], [LibOrgBouncycastleAsn1ASN1OctetString class])))) getOctets]);
    LibOrgBouncycastleAsn1PkcsAuthenticatedSafe *authSafe = LibOrgBouncycastleAsn1PkcsAuthenticatedSafe_getInstanceWithId_([bIn readObject]);
    IOSObjectArray *c = [((LibOrgBouncycastleAsn1PkcsAuthenticatedSafe *) nil_chk(authSafe)) getContentInfo];
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(c))->size_; i++) {
      if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsContentInfo *) nil_chk(IOSObjectArray_Get(c, i))) getContentType])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, data)]) {
        LibOrgBouncycastleAsn1ASN1InputStream *dIn = new_LibOrgBouncycastleAsn1ASN1InputStream_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(((LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([((LibOrgBouncycastleAsn1PkcsContentInfo *) nil_chk(IOSObjectArray_Get(c, i))) getContent], [LibOrgBouncycastleAsn1ASN1OctetString class])))) getOctets]);
        LibOrgBouncycastleAsn1ASN1Sequence *seq = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([dIn readObject], [LibOrgBouncycastleAsn1ASN1Sequence class]);
        for (jint j = 0; j != [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size]; j++) {
          LibOrgBouncycastleAsn1PkcsSafeBag *b = LibOrgBouncycastleAsn1PkcsSafeBag_getInstanceWithId_([seq getObjectAtWithInt:j]);
          if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsSafeBag *) nil_chk(b)) getBagId])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs8ShroudedKeyBag)]) {
            LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *eIn = LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_getInstanceWithId_([b getBagValue]);
            id<JavaSecurityPrivateKey> privKey = [self unwrapKeyWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:[((LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *) nil_chk(eIn)) getEncryptionAlgorithm] withByteArray:[eIn getEncryptedData] withCharArray:password withBoolean:wrongPKCS12Zero];
            NSString *alias = nil;
            LibOrgBouncycastleAsn1ASN1OctetString *localId = nil;
            if ([b getBagAttributes] != nil) {
              id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Set *) nil_chk([b getBagAttributes])) getObjects];
              while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
                LibOrgBouncycastleAsn1ASN1Sequence *sq = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Sequence class]);
                LibOrgBouncycastleAsn1ASN1ObjectIdentifier *aOid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(sq)) getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
                LibOrgBouncycastleAsn1ASN1Set *attrSet = (LibOrgBouncycastleAsn1ASN1Set *) cast_chk([sq getObjectAtWithInt:1], [LibOrgBouncycastleAsn1ASN1Set class]);
                LibOrgBouncycastleAsn1ASN1Primitive *attr = nil;
                if ([((LibOrgBouncycastleAsn1ASN1Set *) nil_chk(attrSet)) size] > 0) {
                  attr = (LibOrgBouncycastleAsn1ASN1Primitive *) cast_chk([attrSet getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1Primitive class]);
                  if ([LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_() isInstance:privKey]) {
                    id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> bagAttr = (id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) cast_check(privKey, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_());
                    id<LibOrgBouncycastleAsn1ASN1Encodable> existing = [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(bagAttr)) getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:aOid];
                    if (existing != nil) {
                      if (![((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([existing toASN1Primitive])) isEqual:attr]) {
                        @throw new_JavaIoIOException_initWithNSString_(@"attempt to add existing attribute with different value");
                      }
                    }
                    else {
                      [bagAttr setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:aOid withLibOrgBouncycastleAsn1ASN1Encodable:attr];
                    }
                  }
                }
                if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(aOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)]) {
                  alias = [((LibOrgBouncycastleAsn1DERBMPString *) nil_chk(((LibOrgBouncycastleAsn1DERBMPString *) cast_chk(attr, [LibOrgBouncycastleAsn1DERBMPString class])))) getString];
                  [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:alias withId:privKey];
                }
                else if ([aOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)]) {
                  localId = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(attr, [LibOrgBouncycastleAsn1ASN1OctetString class]);
                }
              }
            }
            if (localId != nil) {
              NSString *name = [NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_([localId getOctets])];
              if (alias == nil) {
                [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:name withId:privKey];
              }
              else {
                (void) [((JavaUtilHashtable *) nil_chk(localIds_)) putWithId:alias withId:name];
              }
            }
            else {
              unmarkedKey = true;
              [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:@"unmarked" withId:privKey];
            }
          }
          else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([b getBagId])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, certBag)]) {
            [chain addElementWithId:b];
          }
          else {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"extra in data ", [b getBagId])];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:LibOrgBouncycastleAsn1UtilASN1Dump_dumpAsStringWithId_(b)];
          }
        }
      }
      else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsContentInfo *) nil_chk(IOSObjectArray_Get(c, i))) getContentType])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, encryptedData)]) {
        LibOrgBouncycastleAsn1PkcsEncryptedData *d = LibOrgBouncycastleAsn1PkcsEncryptedData_getInstanceWithId_([((LibOrgBouncycastleAsn1PkcsContentInfo *) nil_chk(IOSObjectArray_Get(c, i))) getContent]);
        IOSByteArray *octets = [self cryptDataWithBoolean:false withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:[((LibOrgBouncycastleAsn1PkcsEncryptedData *) nil_chk(d)) getEncryptionAlgorithm] withCharArray:password withBoolean:wrongPKCS12Zero withByteArray:[((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk([d getContent])) getOctets]];
        LibOrgBouncycastleAsn1ASN1Sequence *seq = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(octets), [LibOrgBouncycastleAsn1ASN1Sequence class]);
        for (jint j = 0; j != [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size]; j++) {
          LibOrgBouncycastleAsn1PkcsSafeBag *b = LibOrgBouncycastleAsn1PkcsSafeBag_getInstanceWithId_([seq getObjectAtWithInt:j]);
          if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsSafeBag *) nil_chk(b)) getBagId])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, certBag)]) {
            [chain addElementWithId:b];
          }
          else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([b getBagId])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs8ShroudedKeyBag)]) {
            LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *eIn = LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_getInstanceWithId_([b getBagValue]);
            id<JavaSecurityPrivateKey> privKey = [self unwrapKeyWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:[((LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *) nil_chk(eIn)) getEncryptionAlgorithm] withByteArray:[eIn getEncryptedData] withCharArray:password withBoolean:wrongPKCS12Zero];
            id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> bagAttr = (id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) cast_check(privKey, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_());
            NSString *alias = nil;
            LibOrgBouncycastleAsn1ASN1OctetString *localId = nil;
            id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Set *) nil_chk([b getBagAttributes])) getObjects];
            while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
              LibOrgBouncycastleAsn1ASN1Sequence *sq = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1Sequence class]);
              LibOrgBouncycastleAsn1ASN1ObjectIdentifier *aOid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(sq)) getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
              LibOrgBouncycastleAsn1ASN1Set *attrSet = (LibOrgBouncycastleAsn1ASN1Set *) cast_chk([sq getObjectAtWithInt:1], [LibOrgBouncycastleAsn1ASN1Set class]);
              LibOrgBouncycastleAsn1ASN1Primitive *attr = nil;
              if ([((LibOrgBouncycastleAsn1ASN1Set *) nil_chk(attrSet)) size] > 0) {
                attr = (LibOrgBouncycastleAsn1ASN1Primitive *) cast_chk([attrSet getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1Primitive class]);
                id<LibOrgBouncycastleAsn1ASN1Encodable> existing = [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(bagAttr)) getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:aOid];
                if (existing != nil) {
                  if (![((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([existing toASN1Primitive])) isEqual:attr]) {
                    @throw new_JavaIoIOException_initWithNSString_(@"attempt to add existing attribute with different value");
                  }
                }
                else {
                  [bagAttr setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:aOid withLibOrgBouncycastleAsn1ASN1Encodable:attr];
                }
              }
              if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(aOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)]) {
                alias = [((LibOrgBouncycastleAsn1DERBMPString *) nil_chk(((LibOrgBouncycastleAsn1DERBMPString *) cast_chk(attr, [LibOrgBouncycastleAsn1DERBMPString class])))) getString];
                [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:alias withId:privKey];
              }
              else if ([aOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)]) {
                localId = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(attr, [LibOrgBouncycastleAsn1ASN1OctetString class]);
              }
            }
            NSString *name = [NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(localId)) getOctets])];
            if (alias == nil) {
              [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:name withId:privKey];
            }
            else {
              (void) [((JavaUtilHashtable *) nil_chk(localIds_)) putWithId:alias withId:name];
            }
          }
          else if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([b getBagId])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, keyBag)]) {
            LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *kInfo = LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_([b getBagValue]);
            id<JavaSecurityPrivateKey> privKey = LibOrgBouncycastleJceProviderBouncyCastleProvider_getPrivateKeyWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(kInfo);
            id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> bagAttr = (id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) cast_check(privKey, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_());
            NSString *alias = nil;
            LibOrgBouncycastleAsn1ASN1OctetString *localId = nil;
            id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Set *) nil_chk([b getBagAttributes])) getObjects];
            while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
              LibOrgBouncycastleAsn1ASN1Sequence *sq = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([e nextElement]);
              LibOrgBouncycastleAsn1ASN1ObjectIdentifier *aOid = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(sq)) getObjectAtWithInt:0]);
              LibOrgBouncycastleAsn1ASN1Set *attrSet = LibOrgBouncycastleAsn1ASN1Set_getInstanceWithId_([sq getObjectAtWithInt:1]);
              LibOrgBouncycastleAsn1ASN1Primitive *attr = nil;
              if ([((LibOrgBouncycastleAsn1ASN1Set *) nil_chk(attrSet)) size] > 0) {
                attr = (LibOrgBouncycastleAsn1ASN1Primitive *) cast_chk([attrSet getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1Primitive class]);
                id<LibOrgBouncycastleAsn1ASN1Encodable> existing = [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(bagAttr)) getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:aOid];
                if (existing != nil) {
                  if (![((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([existing toASN1Primitive])) isEqual:attr]) {
                    @throw new_JavaIoIOException_initWithNSString_(@"attempt to add existing attribute with different value");
                  }
                }
                else {
                  [bagAttr setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:aOid withLibOrgBouncycastleAsn1ASN1Encodable:attr];
                }
                if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(aOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)]) {
                  alias = [((LibOrgBouncycastleAsn1DERBMPString *) nil_chk(((LibOrgBouncycastleAsn1DERBMPString *) cast_chk(attr, [LibOrgBouncycastleAsn1DERBMPString class])))) getString];
                  [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:alias withId:privKey];
                }
                else if ([aOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)]) {
                  localId = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(attr, [LibOrgBouncycastleAsn1ASN1OctetString class]);
                }
              }
            }
            NSString *name = [NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(localId)) getOctets])];
            if (alias == nil) {
              [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:name withId:privKey];
            }
            else {
              (void) [((JavaUtilHashtable *) nil_chk(localIds_)) putWithId:alias withId:name];
            }
          }
          else {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"extra in encryptedData ", [b getBagId])];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:LibOrgBouncycastleAsn1UtilASN1Dump_dumpAsStringWithId_(b)];
          }
        }
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"extra ", [((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsContentInfo *) nil_chk(IOSObjectArray_Get(c, i))) getContentType])) getId])];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"extra ", LibOrgBouncycastleAsn1UtilASN1Dump_dumpAsStringWithId_([((LibOrgBouncycastleAsn1PkcsContentInfo *) nil_chk(IOSObjectArray_Get(c, i))) getContent]))];
      }
    }
  }
  certs_ = new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init();
  chainCerts_ = new_JavaUtilHashtable_init();
  keyCerts_ = new_JavaUtilHashtable_init();
  for (jint i = 0; i != [chain size]; i++) {
    LibOrgBouncycastleAsn1PkcsSafeBag *b = (LibOrgBouncycastleAsn1PkcsSafeBag *) cast_chk([chain elementAtWithInt:i], [LibOrgBouncycastleAsn1PkcsSafeBag class]);
    LibOrgBouncycastleAsn1PkcsCertBag *cb = LibOrgBouncycastleAsn1PkcsCertBag_getInstanceWithId_([((LibOrgBouncycastleAsn1PkcsSafeBag *) nil_chk(b)) getBagValue]);
    if (![((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsCertBag *) nil_chk(cb)) getCertId])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, x509Certificate)]) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Unsupported certificate type: ", [cb getCertId]));
    }
    JavaSecurityCertCertificate *cert;
    @try {
      JavaIoByteArrayInputStream *cIn = new_JavaIoByteArrayInputStream_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(((LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([cb getCertValue], [LibOrgBouncycastleAsn1ASN1OctetString class])))) getOctets]);
      cert = [((JavaSecurityCertCertificateFactory *) nil_chk(certFact_)) generateCertificateWithJavaIoInputStream:cIn];
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_([e description]);
    }
    LibOrgBouncycastleAsn1ASN1OctetString *localId = nil;
    NSString *alias = nil;
    if ([b getBagAttributes] != nil) {
      id<JavaUtilEnumeration> e = [((LibOrgBouncycastleAsn1ASN1Set *) nil_chk([b getBagAttributes])) getObjects];
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        LibOrgBouncycastleAsn1ASN1Sequence *sq = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([e nextElement]);
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(sq)) getObjectAtWithInt:0]);
        LibOrgBouncycastleAsn1ASN1Set *attrSet = LibOrgBouncycastleAsn1ASN1Set_getInstanceWithId_([sq getObjectAtWithInt:1]);
        if ([((LibOrgBouncycastleAsn1ASN1Set *) nil_chk(attrSet)) size] > 0) {
          LibOrgBouncycastleAsn1ASN1Primitive *attr = (LibOrgBouncycastleAsn1ASN1Primitive *) cast_chk([attrSet getObjectAtWithInt:0], [LibOrgBouncycastleAsn1ASN1Primitive class]);
          id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> bagAttr = nil;
          if ([LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_() isInstance:cert]) {
            bagAttr = (id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) cast_check(cert, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_());
            id<LibOrgBouncycastleAsn1ASN1Encodable> existing = [((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(bagAttr)) getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
            if (existing != nil) {
              if (![((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([existing toASN1Primitive])) isEqual:attr]) {
                @throw new_JavaIoIOException_initWithNSString_(@"attempt to add existing attribute with different value");
              }
            }
            else {
              [bagAttr setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withLibOrgBouncycastleAsn1ASN1Encodable:attr];
            }
          }
          if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)]) {
            alias = [((LibOrgBouncycastleAsn1DERBMPString *) nil_chk(((LibOrgBouncycastleAsn1DERBMPString *) cast_chk(attr, [LibOrgBouncycastleAsn1DERBMPString class])))) getString];
          }
          else if ([oid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)]) {
            localId = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(attr, [LibOrgBouncycastleAsn1ASN1OctetString class]);
          }
        }
      }
    }
    (void) [((JavaUtilHashtable *) nil_chk(chainCerts_)) putWithId:new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(self, [((JavaSecurityCertCertificate *) nil_chk(cert)) getPublicKey]) withId:cert];
    if (unmarkedKey) {
      if ([((JavaUtilHashtable *) nil_chk(keyCerts_)) isEmpty]) {
        NSString *name = [NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_([((LibOrgBouncycastleAsn1X509SubjectKeyIdentifier *) nil_chk(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(self, [cert getPublicKey]))) getKeyIdentifier])];
        (void) [((JavaUtilHashtable *) nil_chk(keyCerts_)) putWithId:name withId:cert];
        [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(keys_)) putWithNSString:name withId:[keys_ removeWithNSString:@"unmarked"]];
      }
    }
    else {
      if (localId != nil) {
        NSString *name = [NSString java_stringWithBytes:LibOrgBouncycastleUtilEncodersHex_encodeWithByteArray_([localId getOctets])];
        (void) [((JavaUtilHashtable *) nil_chk(keyCerts_)) putWithId:name withId:cert];
      }
      if (alias != nil) {
        [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(certs_)) putWithNSString:alias withId:cert];
      }
    }
  }
}

- (jint)validateIterationCountWithJavaMathBigInteger:(JavaMathBigInteger *)i {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_validateIterationCountWithJavaMathBigInteger_(self, i);
}

- (void)engineStoreWithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)param {
  if (param == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'param' arg cannot be null");
  }
  if (!([param isKindOfClass:[LibOrgBouncycastleJcajcePKCS12StoreParameter class]] || [param isKindOfClass:[LibOrgBouncycastleJceProviderJDKPKCS12StoreParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"No support for 'param' of type ", [[param java_getClass] getName]));
  }
  LibOrgBouncycastleJcajcePKCS12StoreParameter *bcParam;
  if ([param isKindOfClass:[LibOrgBouncycastleJcajcePKCS12StoreParameter class]]) {
    bcParam = (LibOrgBouncycastleJcajcePKCS12StoreParameter *) param;
  }
  else {
    bcParam = new_LibOrgBouncycastleJcajcePKCS12StoreParameter_initWithJavaIoOutputStream_withJavaSecurityKeyStore_ProtectionParameter_withBoolean_([((LibOrgBouncycastleJceProviderJDKPKCS12StoreParameter *) cast_chk(param, [LibOrgBouncycastleJceProviderJDKPKCS12StoreParameter class])) getOutputStream], [param getProtectionParameter], [((LibOrgBouncycastleJceProviderJDKPKCS12StoreParameter *) cast_chk(param, [LibOrgBouncycastleJceProviderJDKPKCS12StoreParameter class])) isUseDEREncoding]);
  }
  IOSCharArray *password;
  id<JavaSecurityKeyStore_ProtectionParameter> protParam = [param getProtectionParameter];
  if (protParam == nil) {
    password = nil;
  }
  else if ([protParam isKindOfClass:[JavaSecurityKeyStore_PasswordProtection class]]) {
    password = [((JavaSecurityKeyStore_PasswordProtection *) protParam) getPassword];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"No support for protection parameter of type ", [[protParam java_getClass] getName]));
  }
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_doStoreWithJavaIoOutputStream_withCharArray_withBoolean_(self, [bcParam getOutputStream], password, [bcParam isForDEREncoding]);
}

- (void)engineStoreWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                            withCharArray:(IOSCharArray *)password {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_doStoreWithJavaIoOutputStream_withCharArray_withBoolean_(self, stream, password, false);
}

- (void)doStoreWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                        withCharArray:(IOSCharArray *)password
                          withBoolean:(jboolean)useDEREncoding {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_doStoreWithJavaIoOutputStream_withCharArray_withBoolean_(self, stream, password, useDEREncoding);
}

- (id<JavaUtilSet>)getUsedCertificateSet {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_getUsedCertificateSet(self);
}

- (IOSByteArray *)calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                                  withByteArray:(IOSByteArray *)salt
                                                                        withInt:(jint)itCount
                                                                  withCharArray:(IOSCharArray *)password
                                                                    withBoolean:(jboolean)wrongPkcs12Zero
                                                                  withByteArray:(IOSByteArray *)data {
  return LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_withInt_withCharArray_withBoolean_withByteArray_(self, oid, salt, itCount, password, wrongPkcs12Zero, data);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleAsn1X509SubjectKeyIdentifier;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, 10, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertCertificate;", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 15, 8, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x1, 16, 17, 18, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 25, 10, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x4, 26, 27, 28, -1, -1, -1 },
    { NULL, "[B", 0x4, 29, 30, 28, -1, -1, -1 },
    { NULL, "[B", 0x4, 31, 32, 28, -1, -1, -1 },
    { NULL, "LJavaxCryptoCipher;", 0x2, 33, 34, 35, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, 28, -1, -1, -1 },
    { NULL, "I", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, 42, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 43, 28, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 45, 28, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 46, 47, 48, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleJcajceUtilJcaJceHelper:withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[1].selector = @selector(createSubjectKeyIdWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(getDigestWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[3].selector = @selector(setRandomWithJavaSecuritySecureRandom:);
  methods[4].selector = @selector(engineAliases);
  methods[5].selector = @selector(engineContainsAliasWithNSString:);
  methods[6].selector = @selector(engineDeleteEntryWithNSString:);
  methods[7].selector = @selector(engineGetCertificateWithNSString:);
  methods[8].selector = @selector(engineGetCertificateAliasWithJavaSecurityCertCertificate:);
  methods[9].selector = @selector(engineGetCertificateChainWithNSString:);
  methods[10].selector = @selector(engineGetCreationDateWithNSString:);
  methods[11].selector = @selector(engineGetKeyWithNSString:withCharArray:);
  methods[12].selector = @selector(engineIsCertificateEntryWithNSString:);
  methods[13].selector = @selector(engineIsKeyEntryWithNSString:);
  methods[14].selector = @selector(engineSetCertificateEntryWithNSString:withJavaSecurityCertCertificate:);
  methods[15].selector = @selector(engineSetKeyEntryWithNSString:withByteArray:withJavaSecurityCertCertificateArray:);
  methods[16].selector = @selector(engineSetKeyEntryWithNSString:withJavaSecurityKey:withCharArray:withJavaSecurityCertCertificateArray:);
  methods[17].selector = @selector(engineSize);
  methods[18].selector = @selector(unwrapKeyWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withByteArray:withCharArray:withBoolean:);
  methods[19].selector = @selector(wrapKeyWithNSString:withJavaSecurityKey:withLibOrgBouncycastleAsn1PkcsPKCS12PBEParams:withCharArray:);
  methods[20].selector = @selector(cryptDataWithBoolean:withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:withCharArray:withBoolean:withByteArray:);
  methods[21].selector = @selector(createCipherWithInt:withCharArray:withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  methods[22].selector = @selector(engineLoadWithJavaIoInputStream:withCharArray:);
  methods[23].selector = @selector(validateIterationCountWithJavaMathBigInteger:);
  methods[24].selector = @selector(engineStoreWithJavaSecurityKeyStore_LoadStoreParameter:);
  methods[25].selector = @selector(engineStoreWithJavaIoOutputStream:withCharArray:);
  methods[26].selector = @selector(doStoreWithJavaIoOutputStream:withCharArray:withBoolean:);
  methods[27].selector = @selector(getUsedCertificateSet);
  methods[28].selector = @selector(calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withByteArray:withInt:withCharArray:withBoolean:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PKCS12_MAX_IT_COUNT_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 49, -1, -1 },
    { "helper_", "LLibOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SALT_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_SALT_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MIN_ITERATIONS", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_MIN_ITERATIONS, 0x1a, -1, -1, -1, -1 },
    { "keySizeProvider", "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "keys_", "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localIds_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certs_", "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "chainCerts_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyCerts_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NULL", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_NULL, 0x18, -1, -1, -1, -1 },
    { "CERTIFICATE", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CERTIFICATE, 0x18, -1, -1, -1, -1 },
    { "KEY", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_KEY, 0x18, -1, -1, -1, -1 },
    { "SECRET", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_SECRET, 0x18, -1, -1, -1, -1 },
    { "SEALED", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_SEALED, 0x18, -1, -1, -1, -1 },
    { "KEY_PRIVATE", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_KEY_PRIVATE, 0x18, -1, -1, -1, -1 },
    { "KEY_PUBLIC", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_KEY_PUBLIC, 0x18, -1, -1, -1, -1 },
    { "KEY_SECRET", "I", .constantValue.asInt = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_KEY_SECRET, 0x18, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "certFact_", "LJavaSecurityCertCertificateFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyAlgorithm_", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certAlgorithm_", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macAlgorithm_", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "saltLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceUtilJcaJceHelper;LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "createSubjectKeyId", "LJavaSecurityPublicKey;", "getDigest", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "setRandom", "LJavaSecuritySecureRandom;", "engineContainsAlias", "LNSString;", "engineDeleteEntry", "LJavaSecurityKeyStoreException;", "engineGetCertificate", "engineGetCertificateAlias", "LJavaSecurityCertCertificate;", "engineGetCertificateChain", "engineGetCreationDate", "engineGetKey", "LNSString;[C", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityUnrecoverableKeyException;", "engineIsCertificateEntry", "engineIsKeyEntry", "engineSetCertificateEntry", "LNSString;LJavaSecurityCertCertificate;", "engineSetKeyEntry", "LNSString;[B[LJavaSecurityCertCertificate;", "LNSString;LJavaSecurityKey;[C[LJavaSecurityCertCertificate;", "unwrapKey", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[B[CZ", "LJavaIoIOException;", "wrapKey", "LNSString;LJavaSecurityKey;LLibOrgBouncycastleAsn1PkcsPKCS12PBEParams;[C", "cryptData", "ZLLibOrgBouncycastleAsn1X509AlgorithmIdentifier;[CZ[B", "createCipher", "I[CLLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySpecInvalidKeySpecException;LJavaxCryptoNoSuchPaddingException;LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;LJavaSecurityNoSuchProviderException;", "engineLoad", "LJavaIoInputStream;[C", "validateIterationCount", "LJavaMathBigInteger;", "engineStore", "LJavaSecurityKeyStore_LoadStoreParameter;", "LJavaIoIOException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityCertCertificateException;", "LJavaIoOutputStream;[C", "doStore", "LJavaIoOutputStream;[CZ", "calculatePbeMac", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;[BI[CZ[B", "LJavaLangException;", &LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_PKCS12_MAX_IT_COUNT_PROPERTY, &LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_keySizeProvider, "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId;LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore;LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES;LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore;LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES;LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable;LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi = { "PKCS12KeyStoreSpi", "lib.org.bouncycastle.jcajce.provider.keystore.pkcs12", ptrTable, methods, fields, 7, 0x1, 29, 25, -1, 51, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi class]) {
    LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_keySizeProvider = new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider_init();
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi)
  }
}

@end

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *keyAlgorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *certAlgorithm) {
  JavaSecurityKeyStoreSpi_init(self);
  self->helper_ = new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->keys_ = new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init();
  self->localIds_ = new_JavaUtilHashtable_init();
  self->certs_ = new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init();
  self->chainCerts_ = new_JavaUtilHashtable_init();
  self->keyCerts_ = new_JavaUtilHashtable_init();
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->macAlgorithm_ = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, idSHA1), JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE));
  self->itCount_ = 2 * LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_MIN_ITERATIONS;
  self->saltLength_ = 20;
  self->keyAlgorithm_ = keyAlgorithm;
  self->certAlgorithm_ = certAlgorithm;
  @try {
    self->certFact_ = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(helper)) createCertificateFactoryWithNSString:@"X.509"];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"can't create cert factory - ", [e description]));
  }
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *keyAlgorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *certAlgorithm) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_, helper, keyAlgorithm, certAlgorithm)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(id<LibOrgBouncycastleJcajceUtilJcaJceHelper> helper, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *keyAlgorithm, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *certAlgorithm) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi, initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_, helper, keyAlgorithm, certAlgorithm)
}

LibOrgBouncycastleAsn1X509SubjectKeyIdentifier *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, id<JavaSecurityPublicKey> pubKey) {
  @try {
    LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([((id<JavaSecurityPublicKey>) nil_chk(pubKey)) getEncoded]);
    return new_LibOrgBouncycastleAsn1X509SubjectKeyIdentifier_initWithByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_getDigestWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(info));
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"error creating key");
  }
}

IOSByteArray *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_getDigestWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *spki) {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initialize();
  id<LibOrgBouncycastleCryptoDigest> digest = LibOrgBouncycastleCryptoUtilDigestFactory_createSHA1();
  IOSByteArray *resBuf = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize]];
  IOSByteArray *bytes = [((LibOrgBouncycastleAsn1DERBitString *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(spki)) getPublicKeyData])) getBytes];
  [digest updateWithByteArray:bytes withInt:0 withInt:((IOSByteArray *) nil_chk(bytes))->size_];
  [digest doFinalWithByteArray:resBuf withInt:0];
  return resBuf;
}

JavaxCryptoCipher *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createCipherWithInt_withCharArray_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, jint mode, IOSCharArray *password, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId) {
  LibOrgBouncycastleAsn1PkcsPBES2Parameters *alg = LibOrgBouncycastleAsn1PkcsPBES2Parameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getParameters]);
  LibOrgBouncycastleAsn1PkcsPBKDF2Params *func = LibOrgBouncycastleAsn1PkcsPBKDF2Params_getInstanceWithId_([((LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *) nil_chk([((LibOrgBouncycastleAsn1PkcsPBES2Parameters *) nil_chk(alg)) getKeyDerivationFunc])) getParameters]);
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *encScheme = LibOrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([alg getEncryptionScheme]);
  JavaxCryptoSecretKeyFactory *keyFact = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createSecretKeyFactoryWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsKeyDerivationFunc *) nil_chk([alg getKeyDerivationFunc])) getAlgorithm])) getId]];
  id<JavaxCryptoSecretKey> key;
  if ([((LibOrgBouncycastleAsn1PkcsPBKDF2Params *) nil_chk(func)) isDefaultPrf]) {
    key = [((JavaxCryptoSecretKeyFactory *) nil_chk(keyFact)) generateSecretWithJavaSecuritySpecKeySpec:new_JavaxCryptoSpecPBEKeySpec_initWithCharArray_withByteArray_withInt_withInt_(password, [func getSalt], LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_validateIterationCountWithJavaMathBigInteger_(self, [func getIterationCount]), [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *) nil_chk(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_keySizeProvider)) getKeySizeWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:encScheme])];
  }
  else {
    key = [((JavaxCryptoSecretKeyFactory *) nil_chk(keyFact)) generateSecretWithJavaSecuritySpecKeySpec:new_LibOrgBouncycastleJcajceSpecPBKDF2KeySpec_initWithCharArray_withByteArray_withInt_withInt_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(password, [func getSalt], LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_validateIterationCountWithJavaMathBigInteger_(self, [func getIterationCount]), [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *) nil_chk(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_keySizeProvider)) getKeySizeWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:encScheme], [func getPrf])];
  }
  JavaxCryptoCipher *cipher = JavaxCryptoCipher_getInstanceWithNSString_([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsEncryptionScheme *) nil_chk([alg getEncryptionScheme])) getAlgorithm])) getId]);
  id<LibOrgBouncycastleAsn1ASN1Encodable> encParams = [((LibOrgBouncycastleAsn1PkcsEncryptionScheme *) nil_chk([alg getEncryptionScheme])) getParameters];
  if ([encParams isKindOfClass:[LibOrgBouncycastleAsn1ASN1OctetString class]]) {
    [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:mode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_(encParams))) getOctets])];
  }
  else {
    LibOrgBouncycastleAsn1CryptoproGOST28147Parameters *gParams = LibOrgBouncycastleAsn1CryptoproGOST28147Parameters_getInstanceWithId_(encParams);
    [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:mode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:new_LibOrgBouncycastleJcajceSpecJcajceGOST28147ParameterSpec_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_([((LibOrgBouncycastleAsn1CryptoproGOST28147Parameters *) nil_chk(gParams)) getEncryptionParamSet], [gParams getIV])];
  }
  return cipher;
}

jint LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_validateIterationCountWithJavaMathBigInteger_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, JavaMathBigInteger *i) {
  jint count = [((JavaMathBigInteger *) nil_chk(i)) intValue];
  if (count < 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"negative iteration count found");
  }
  JavaMathBigInteger *maxValue = LibOrgBouncycastleUtilProperties_asBigIntegerWithNSString_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_PKCS12_MAX_IT_COUNT_PROPERTY);
  if (maxValue != nil) {
    if ([maxValue intValue] < count) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"iteration count ", count, @" greater than ", [maxValue intValue]));
    }
  }
  return count;
}

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_doStoreWithJavaIoOutputStream_withCharArray_withBoolean_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, JavaIoOutputStream *stream, IOSCharArray *password, jboolean useDEREncoding) {
  if (password == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"No password supplied for PKCS#12 KeyStore.");
  }
  LibOrgBouncycastleAsn1ASN1EncodableVector *keyS = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  id<JavaUtilEnumeration> ks = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(self->keys_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(ks)) hasMoreElements]) {
    IOSByteArray *kSalt = [IOSByteArray newArrayWithLength:LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_SALT_SIZE];
    [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextBytesWithByteArray:kSalt];
    NSString *name = (NSString *) cast_chk([ks nextElement], [NSString class]);
    id<JavaSecurityPrivateKey> privKey = (id<JavaSecurityPrivateKey>) cast_check([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(self->keys_)) getWithNSString:name], JavaSecurityPrivateKey_class_());
    LibOrgBouncycastleAsn1PkcsPKCS12PBEParams *kParams = new_LibOrgBouncycastleAsn1PkcsPKCS12PBEParams_initWithByteArray_withInt_(kSalt, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_MIN_ITERATIONS);
    IOSByteArray *kBytes = [self wrapKeyWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(self->keyAlgorithm_)) getId] withJavaSecurityKey:privKey withLibOrgBouncycastleAsn1PkcsPKCS12PBEParams:kParams withCharArray:password];
    LibOrgBouncycastleAsn1X509AlgorithmIdentifier *kAlgId = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(self->keyAlgorithm_, [kParams toASN1Primitive]);
    LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo *kInfo = new_LibOrgBouncycastleAsn1PkcsEncryptedPrivateKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(kAlgId, kBytes);
    jboolean attrSet = false;
    LibOrgBouncycastleAsn1ASN1EncodableVector *kName = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
    if ([LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_() isInstance:privKey]) {
      id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> bagAttrs = (id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) cast_check(privKey, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_());
      LibOrgBouncycastleAsn1DERBMPString *nm = (LibOrgBouncycastleAsn1DERBMPString *) cast_chk([((id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(bagAttrs)) getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)], [LibOrgBouncycastleAsn1DERBMPString class]);
      if (nm == nil || ![((NSString *) nil_chk([nm getString])) isEqual:name]) {
        [bagAttrs setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName) withLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERBMPString_initWithNSString_(name)];
      }
      if ([bagAttrs getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)] == nil) {
        JavaSecurityCertCertificate *ct = [self engineGetCertificateWithNSString:name];
        [bagAttrs setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId) withLibOrgBouncycastleAsn1ASN1Encodable:LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(self, [((JavaSecurityCertCertificate *) nil_chk(ct)) getPublicKey])];
      }
      id<JavaUtilEnumeration> e = [bagAttrs getBagAttributeKeys];
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        LibOrgBouncycastleAsn1ASN1EncodableVector *kSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
        [kSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:oid];
        [kSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_([bagAttrs getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid])];
        attrSet = true;
        [kName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(kSeq)];
      }
    }
    if (!attrSet) {
      LibOrgBouncycastleAsn1ASN1EncodableVector *kSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
      JavaSecurityCertCertificate *ct = [self engineGetCertificateWithNSString:name];
      [kSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)];
      [kSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(self, [((JavaSecurityCertCertificate *) nil_chk(ct)) getPublicKey]))];
      [kName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(kSeq)];
      kSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
      [kSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)];
      [kSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1DERBMPString_initWithNSString_(name))];
      [kName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(kSeq)];
    }
    LibOrgBouncycastleAsn1PkcsSafeBag *kBag = new_LibOrgBouncycastleAsn1PkcsSafeBag_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1ASN1Set_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs8ShroudedKeyBag), [kInfo toASN1Primitive], new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(kName));
    [keyS addWithLibOrgBouncycastleAsn1ASN1Encodable:kBag];
  }
  IOSByteArray *keySEncoded = [new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(keyS) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
  LibOrgBouncycastleAsn1BEROctetString *keyString = new_LibOrgBouncycastleAsn1BEROctetString_initWithByteArray_(keySEncoded);
  IOSByteArray *cSalt = [IOSByteArray newArrayWithLength:LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_SALT_SIZE];
  [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextBytesWithByteArray:cSalt];
  LibOrgBouncycastleAsn1ASN1EncodableVector *certSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
  LibOrgBouncycastleAsn1PkcsPKCS12PBEParams *cParams = new_LibOrgBouncycastleAsn1PkcsPKCS12PBEParams_initWithByteArray_withInt_(cSalt, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_MIN_ITERATIONS);
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *cAlgId = new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(self->certAlgorithm_, [cParams toASN1Primitive]);
  JavaUtilHashtable *doneCerts = new_JavaUtilHashtable_init();
  id<JavaUtilEnumeration> cs = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(self->keys_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(cs)) hasMoreElements]) {
    @try {
      NSString *name = (NSString *) cast_chk([cs nextElement], [NSString class]);
      JavaSecurityCertCertificate *cert = [self engineGetCertificateWithNSString:name];
      jboolean cAttrSet = false;
      LibOrgBouncycastleAsn1PkcsCertBag *cBag = new_LibOrgBouncycastleAsn1PkcsCertBag_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, x509Certificate), new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_([((JavaSecurityCertCertificate *) nil_chk(cert)) getEncoded]));
      LibOrgBouncycastleAsn1ASN1EncodableVector *fName = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
      if ([LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_() isInstance:cert]) {
        id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> bagAttrs = (id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) cast_check(cert, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_());
        LibOrgBouncycastleAsn1DERBMPString *nm = (LibOrgBouncycastleAsn1DERBMPString *) cast_chk([bagAttrs getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)], [LibOrgBouncycastleAsn1DERBMPString class]);
        if (nm == nil || ![((NSString *) nil_chk([nm getString])) isEqual:name]) {
          [bagAttrs setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName) withLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERBMPString_initWithNSString_(name)];
        }
        if ([bagAttrs getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)] == nil) {
          [bagAttrs setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId) withLibOrgBouncycastleAsn1ASN1Encodable:LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(self, [cert getPublicKey])];
        }
        id<JavaUtilEnumeration> e = [bagAttrs getBagAttributeKeys];
        while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
          LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
          LibOrgBouncycastleAsn1ASN1EncodableVector *fSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
          [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:oid];
          [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_([bagAttrs getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid])];
          [fName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fSeq)];
          cAttrSet = true;
        }
      }
      if (!cAttrSet) {
        LibOrgBouncycastleAsn1ASN1EncodableVector *fSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
        [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)];
        [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(self, [cert getPublicKey]))];
        [fName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fSeq)];
        fSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
        [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)];
        [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1DERBMPString_initWithNSString_(name))];
        [fName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fSeq)];
      }
      LibOrgBouncycastleAsn1PkcsSafeBag *sBag = new_LibOrgBouncycastleAsn1PkcsSafeBag_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1ASN1Set_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, certBag), [cBag toASN1Primitive], new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fName));
      [certSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:sBag];
      (void) [doneCerts putWithId:cert withId:cert];
    }
    @catch (JavaSecurityCertCertificateEncodingException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Error encoding certificate: ", [e description]));
    }
  }
  cs = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(self->certs_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(cs)) hasMoreElements]) {
    @try {
      NSString *certId = (NSString *) cast_chk([cs nextElement], [NSString class]);
      JavaSecurityCertCertificate *cert = (JavaSecurityCertCertificate *) cast_chk([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(self->certs_)) getWithNSString:certId], [JavaSecurityCertCertificate class]);
      jboolean cAttrSet = false;
      if ([((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(self->keys_)) getWithNSString:certId] != nil) {
        continue;
      }
      LibOrgBouncycastleAsn1PkcsCertBag *cBag = new_LibOrgBouncycastleAsn1PkcsCertBag_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, x509Certificate), new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_([((JavaSecurityCertCertificate *) nil_chk(cert)) getEncoded]));
      LibOrgBouncycastleAsn1ASN1EncodableVector *fName = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
      if ([LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_() isInstance:cert]) {
        id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> bagAttrs = (id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) cast_check(cert, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_());
        LibOrgBouncycastleAsn1DERBMPString *nm = (LibOrgBouncycastleAsn1DERBMPString *) cast_chk([bagAttrs getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)], [LibOrgBouncycastleAsn1DERBMPString class]);
        if (nm == nil || ![((NSString *) nil_chk([nm getString])) isEqual:certId]) {
          [bagAttrs setBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName) withLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERBMPString_initWithNSString_(certId)];
        }
        id<JavaUtilEnumeration> e = [bagAttrs getBagAttributeKeys];
        while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
          LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
          if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)]) {
            continue;
          }
          LibOrgBouncycastleAsn1ASN1EncodableVector *fSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
          [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:oid];
          [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_([bagAttrs getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid])];
          [fName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fSeq)];
          cAttrSet = true;
        }
      }
      if (!cAttrSet) {
        LibOrgBouncycastleAsn1ASN1EncodableVector *fSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
        [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_friendlyName)];
        [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1DERBMPString_initWithNSString_(certId))];
        [fName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fSeq)];
      }
      LibOrgBouncycastleAsn1PkcsSafeBag *sBag = new_LibOrgBouncycastleAsn1PkcsSafeBag_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1ASN1Set_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, certBag), [cBag toASN1Primitive], new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fName));
      [certSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:sBag];
      (void) [doneCerts putWithId:cert withId:cert];
    }
    @catch (JavaSecurityCertCertificateEncodingException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Error encoding certificate: ", [e description]));
    }
  }
  id<JavaUtilSet> usedSet = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_getUsedCertificateSet(self);
  cs = [((JavaUtilHashtable *) nil_chk(self->chainCerts_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(cs)) hasMoreElements]) {
    @try {
      LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *certId = (LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *) cast_chk([cs nextElement], [LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId class]);
      JavaSecurityCertCertificate *cert = (JavaSecurityCertCertificate *) cast_chk([((JavaUtilHashtable *) nil_chk(self->chainCerts_)) getWithId:certId], [JavaSecurityCertCertificate class]);
      if (![((id<JavaUtilSet>) nil_chk(usedSet)) containsWithId:cert]) {
        continue;
      }
      if ([doneCerts getWithId:cert] != nil) {
        continue;
      }
      LibOrgBouncycastleAsn1PkcsCertBag *cBag = new_LibOrgBouncycastleAsn1PkcsCertBag_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, x509Certificate), new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_([((JavaSecurityCertCertificate *) nil_chk(cert)) getEncoded]));
      LibOrgBouncycastleAsn1ASN1EncodableVector *fName = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
      if ([LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_() isInstance:cert]) {
        id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier> bagAttrs = (id<LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier>) cast_check(cert, LibOrgBouncycastleJceInterfacesPKCS12BagAttributeCarrier_class_());
        id<JavaUtilEnumeration> e = [bagAttrs getBagAttributeKeys];
        while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
          LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
          if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pkcs_9_at_localKeyId)]) {
            continue;
          }
          LibOrgBouncycastleAsn1ASN1EncodableVector *fSeq = new_LibOrgBouncycastleAsn1ASN1EncodableVector_init();
          [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:oid];
          [fSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1Encodable_([bagAttrs getBagAttributeWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:oid])];
          [fName addWithLibOrgBouncycastleAsn1ASN1Encodable:new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fSeq)];
        }
      }
      LibOrgBouncycastleAsn1PkcsSafeBag *sBag = new_LibOrgBouncycastleAsn1PkcsSafeBag_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_withLibOrgBouncycastleAsn1ASN1Set_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, certBag), [cBag toASN1Primitive], new_LibOrgBouncycastleAsn1DERSet_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(fName));
      [certSeq addWithLibOrgBouncycastleAsn1ASN1Encodable:sBag];
    }
    @catch (JavaSecurityCertCertificateEncodingException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Error encoding certificate: ", [e description]));
    }
  }
  IOSByteArray *certSeqEncoded = [new_LibOrgBouncycastleAsn1DERSequence_initWithLibOrgBouncycastleAsn1ASN1EncodableVector_(certSeq) getEncodedWithNSString:LibOrgBouncycastleAsn1ASN1Encoding_DER];
  IOSByteArray *certBytes = [self cryptDataWithBoolean:true withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:cAlgId withCharArray:password withBoolean:false withByteArray:certSeqEncoded];
  LibOrgBouncycastleAsn1PkcsEncryptedData *cInfo = new_LibOrgBouncycastleAsn1PkcsEncryptedData_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, data), cAlgId, new_LibOrgBouncycastleAsn1BEROctetString_initWithByteArray_(certBytes));
  IOSObjectArray *info = [IOSObjectArray newArrayWithObjects:(id[]){ create_LibOrgBouncycastleAsn1PkcsContentInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, data), keyString), create_LibOrgBouncycastleAsn1PkcsContentInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, encryptedData), [cInfo toASN1Primitive]) } count:2 type:LibOrgBouncycastleAsn1PkcsContentInfo_class_()];
  LibOrgBouncycastleAsn1PkcsAuthenticatedSafe *auth = new_LibOrgBouncycastleAsn1PkcsAuthenticatedSafe_initWithLibOrgBouncycastleAsn1PkcsContentInfoArray_(info);
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  LibOrgBouncycastleAsn1DEROutputStream *asn1Out;
  if (useDEREncoding) {
    asn1Out = new_LibOrgBouncycastleAsn1DEROutputStream_initWithJavaIoOutputStream_(bOut);
  }
  else {
    asn1Out = new_LibOrgBouncycastleAsn1BEROutputStream_initWithJavaIoOutputStream_(bOut);
  }
  [asn1Out writeObjectWithLibOrgBouncycastleAsn1ASN1Encodable:auth];
  IOSByteArray *pkg = [bOut toByteArray];
  LibOrgBouncycastleAsn1PkcsContentInfo *mainInfo = new_LibOrgBouncycastleAsn1PkcsContentInfo_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, data), new_LibOrgBouncycastleAsn1BEROctetString_initWithByteArray_(pkg));
  IOSByteArray *mSalt = [IOSByteArray newArrayWithLength:self->saltLength_];
  [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextBytesWithByteArray:mSalt];
  IOSByteArray *data = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(((LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk([mainInfo getContent], [LibOrgBouncycastleAsn1ASN1OctetString class])))) getOctets];
  LibOrgBouncycastleAsn1PkcsMacData *mData;
  @try {
    IOSByteArray *res = LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_withInt_withCharArray_withBoolean_withByteArray_(self, [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(self->macAlgorithm_)) getAlgorithm], mSalt, self->itCount_, password, false, data);
    LibOrgBouncycastleAsn1X509DigestInfo *dInfo = new_LibOrgBouncycastleAsn1X509DigestInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(self->macAlgorithm_, res);
    mData = new_LibOrgBouncycastleAsn1PkcsMacData_initWithLibOrgBouncycastleAsn1X509DigestInfo_withByteArray_withInt_(dInfo, mSalt, self->itCount_);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"error constructing MAC: ", [e description]));
  }
  LibOrgBouncycastleAsn1PkcsPfx *pfx = new_LibOrgBouncycastleAsn1PkcsPfx_initWithLibOrgBouncycastleAsn1PkcsContentInfo_withLibOrgBouncycastleAsn1PkcsMacData_(mainInfo, mData);
  if (useDEREncoding) {
    asn1Out = new_LibOrgBouncycastleAsn1DEROutputStream_initWithJavaIoOutputStream_(stream);
  }
  else {
    asn1Out = new_LibOrgBouncycastleAsn1BEROutputStream_initWithJavaIoOutputStream_(stream);
  }
  [asn1Out writeObjectWithLibOrgBouncycastleAsn1ASN1Encodable:pfx];
}

id<JavaUtilSet> LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_getUsedCertificateSet(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self) {
  id<JavaUtilSet> usedSet = new_JavaUtilHashSet_init();
  for (id<JavaUtilEnumeration> en = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(self->keys_)) keys]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    NSString *alias = (NSString *) cast_chk([en nextElement], [NSString class]);
    IOSObjectArray *certs = [self engineGetCertificateChainWithNSString:alias];
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(certs))->size_; i++) {
      [usedSet addWithId:IOSObjectArray_Get(certs, i)];
    }
  }
  for (id<JavaUtilEnumeration> en = [((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *) nil_chk(self->certs_)) keys]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    NSString *alias = (NSString *) cast_chk([en nextElement], [NSString class]);
    JavaSecurityCertCertificate *cert = [self engineGetCertificateWithNSString:alias];
    [usedSet addWithId:cert];
  }
  return usedSet;
}

IOSByteArray *LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_calculatePbeMacWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_withInt_withCharArray_withBoolean_withByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid, IOSByteArray *salt, jint itCount, IOSCharArray *password, jboolean wrongPkcs12Zero, IOSByteArray *data) {
  JavaxCryptoSpecPBEParameterSpec *defParams = new_JavaxCryptoSpecPBEParameterSpec_initWithByteArray_withInt_(salt, itCount);
  JavaxCryptoMac *mac = [((id<LibOrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(self->helper_)) createMacWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
  [((JavaxCryptoMac *) nil_chk(mac)) init__WithJavaSecurityKey:new_LibOrgBouncycastleJcajcePKCS12Key_initWithCharArray_withBoolean_(password, wrongPkcs12Zero) withJavaSecuritySpecAlgorithmParameterSpec:defParams];
  [mac updateWithByteArray:data];
  return [mac doFinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi)

@implementation LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *)outer$
                                                              withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(self, outer$, key);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi:(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *)outer$
                                                                          withByteArray:(IOSByteArray *)id_ {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_(self, outer$, id_);
  return self;
}

- (NSUInteger)hash {
  return LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_(id__);
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([o isKindOfClass:[LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId class]])) {
    return false;
  }
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *cId = (LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *) cast_chk(o, [LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId class]);
  return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(id__, ((LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *) nil_chk(cId))->id__);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi:withJavaSecurityPublicKey:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi:withByteArray:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "[B", .constantValue.asLong = 0, 0x0, 5, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityPublicKey;", "[B", "hashCode", "equals", "LNSObject;", "id", "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId = { "CertId", "lib.org.bouncycastle.jcajce.provider.keystore.pkcs12", ptrTable, methods, fields, 7, 0x2, 4, 1, 6, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId;
}

@end

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *self, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, id<JavaSecurityPublicKey> key) {
  NSObject_init(self);
  self->id__ = [((LibOrgBouncycastleAsn1X509SubjectKeyIdentifier *) nil_chk(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_createSubjectKeyIdWithJavaSecurityPublicKey_(outer$, key))) getKeyIdentifier];
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, id<JavaSecurityPublicKey> key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId, initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_, outer$, key)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, id<JavaSecurityPublicKey> key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId, initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withJavaSecurityPublicKey_, outer$, key)
}

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *self, LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, IOSByteArray *id_) {
  NSObject_init(self);
  self->id__ = id_;
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, IOSByteArray *id_) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId, initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_, outer$, id_)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId_initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi *outer$, IOSByteArray *id_) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId, initWithLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_withByteArray_, outer$, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_CertId)

@implementation LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore = { "BCPKCS12KeyStore", "lib.org.bouncycastle.jcajce.provider.keystore.pkcs12", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore;
}

@end

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore_init(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore *self) {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init(), JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pbeWithSHAAnd3_KeyTripleDES_CBC), JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pbeWithSHAAnd40BitRC2_CBC));
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore, init)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore)

@implementation LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES = { "BCPKCS12KeyStore3DES", "lib.org.bouncycastle.jcajce.provider.keystore.pkcs12", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES;
}

@end

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES_init(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES *self) {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, new_LibOrgBouncycastleJcajceUtilBCJcaJceHelper_init(), JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pbeWithSHAAnd3_KeyTripleDES_CBC), JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pbeWithSHAAnd3_KeyTripleDES_CBC));
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES, init)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_BCPKCS12KeyStore3DES)

@implementation LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore = { "DefPKCS12KeyStore", "lib.org.bouncycastle.jcajce.provider.keystore.pkcs12", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore;
}

@end

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore_init(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore *self) {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init(), JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pbeWithSHAAnd3_KeyTripleDES_CBC), JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pbeWithSHAAnd40BitRC2_CBC));
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore, init)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore)

@implementation LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES = { "DefPKCS12KeyStore3DES", "lib.org.bouncycastle.jcajce.provider.keystore.pkcs12", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES;
}

@end

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES_init(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES *self) {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init(), JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pbeWithSHAAnd3_KeyTripleDES_CBC), JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, pbeWithSHAAnd3_KeyTripleDES_CBC));
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES, init)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefPKCS12KeyStore3DES)

@implementation LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putWithNSString:(NSString *)key
                 withId:(id)value {
  NSString *lower = (key == nil) ? nil : LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(key);
  NSString *k = (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(keys_)) getWithId:lower], [NSString class]);
  if (k != nil) {
    (void) [((JavaUtilHashtable *) nil_chk(orig_)) removeWithId:k];
  }
  (void) [((JavaUtilHashtable *) nil_chk(keys_)) putWithId:lower withId:key];
  (void) [((JavaUtilHashtable *) nil_chk(orig_)) putWithId:key withId:value];
}

- (id<JavaUtilEnumeration>)keys {
  return [((JavaUtilHashtable *) nil_chk(orig_)) keys];
}

- (id)removeWithNSString:(NSString *)alias {
  NSString *k = (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(keys_)) removeWithId:alias == nil ? nil : LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(alias)], [NSString class]);
  if (k == nil) {
    return nil;
  }
  return [((JavaUtilHashtable *) nil_chk(orig_)) removeWithId:k];
}

- (id)getWithNSString:(NSString *)alias {
  NSString *k = (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(keys_)) getWithId:alias == nil ? nil : LibOrgBouncycastleUtilStrings_toLowerCaseWithNSString_(alias)], [NSString class]);
  if (k == nil) {
    return nil;
  }
  return [((JavaUtilHashtable *) nil_chk(orig_)) getWithId:k];
}

- (id<JavaUtilEnumeration>)elements {
  return [((JavaUtilHashtable *) nil_chk(orig_)) elements];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putWithNSString:withId:);
  methods[2].selector = @selector(keys);
  methods[3].selector = @selector(removeWithNSString:);
  methods[4].selector = @selector(getWithNSString:);
  methods[5].selector = @selector(elements);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "orig_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keys_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "put", "LNSString;LNSObject;", "remove", "LNSString;", "get", "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable = { "IgnoresCaseHashtable", "lib.org.bouncycastle.jcajce.provider.keystore.pkcs12", ptrTable, methods, fields, 7, 0xa, 6, 2, 5, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable;
}

@end

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *self) {
  NSObject_init(self);
  self->orig_ = new_JavaUtilHashtable_init();
  self->keys_ = new_JavaUtilHashtable_init();
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable, init)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_IgnoresCaseHashtable)

@implementation LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getKeySizeWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)algorithmIdentifier {
  JavaLangInteger *keySize = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(KEY_SIZES_)) getWithId:[((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algorithmIdentifier)) getAlgorithm]], [JavaLangInteger class]);
  if (keySize != nil) {
    return [keySize intValue];
  }
  return -1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getKeySizeWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KEY_SIZES_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getKeySize", "LLibOrgBouncycastleAsn1X509AlgorithmIdentifier;", "LLibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider = { "DefaultSecretKeyProvider", "lib.org.bouncycastle.jcajce.provider.keystore.pkcs12", ptrTable, methods, fields, 7, 0xa, 2, 1, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider;
}

@end

void LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider_init(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *self) {
  NSObject_init(self);
  id<JavaUtilMap> keySizes = new_JavaUtilHashMap_init();
  (void) [keySizes putWithId:new_LibOrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(@"1.2.840.113533.7.66.10") withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(128)];
  (void) [keySizes putWithId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, des_EDE3_CBC) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(192)];
  (void) [keySizes putWithId:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes128_CBC) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(128)];
  (void) [keySizes putWithId:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes192_CBC) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(192)];
  (void) [keySizes putWithId:JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_aes256_CBC) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(256)];
  (void) [keySizes putWithId:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia128_cbc) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(128)];
  (void) [keySizes putWithId:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia192_cbc) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(192)];
  (void) [keySizes putWithId:JreLoadStatic(LibOrgBouncycastleAsn1NttNTTObjectIdentifiers, id_camellia256_cbc) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(256)];
  (void) [keySizes putWithId:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR28147_gcfb) withId:LibOrgBouncycastleUtilIntegers_valueOfWithInt_(256)];
  self->KEY_SIZES_ = JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(keySizes);
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *new_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider, init)
}

LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider *create_LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderKeystorePkcs12PKCS12KeyStoreSpi_DefaultSecretKeyProvider)
