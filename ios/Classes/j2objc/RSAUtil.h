//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/rsa/RSAUtil.java
//

#ifndef RSAUtil_H
#define RSAUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleCryptoParamsRSAKeyParameters;
@protocol JavaSecurityInterfacesRSAPrivateKey;
@protocol JavaSecurityInterfacesRSAPublicKey;

@interface LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil : NSObject
@property (readonly, class) IOSObjectArray *rsaOids NS_SWIFT_NAME(rsaOids);

+ (IOSObjectArray *)rsaOids;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jboolean)isRsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)algOid;

#pragma mark Package-Private

+ (NSString *)generateExponentFingerprintWithJavaMathBigInteger:(JavaMathBigInteger *)exponent;

+ (NSString *)generateKeyFingerprintWithJavaMathBigInteger:(JavaMathBigInteger *)modulus;

+ (LibOrgBouncycastleCryptoParamsRSAKeyParameters *)generatePrivateKeyParameterWithJavaSecurityInterfacesRSAPrivateKey:(id<JavaSecurityInterfacesRSAPrivateKey>)key;

+ (LibOrgBouncycastleCryptoParamsRSAKeyParameters *)generatePublicKeyParameterWithJavaSecurityInterfacesRSAPublicKey:(id<JavaSecurityInterfacesRSAPublicKey>)key;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil)

inline IOSObjectArray *LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_get_rsaOids(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_rsaOids;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil, rsaOids, IOSObjectArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_init(LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil *new_LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil *create_LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_init(void);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_isRsaOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsRSAKeyParameters *LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_generatePublicKeyParameterWithJavaSecurityInterfacesRSAPublicKey_(id<JavaSecurityInterfacesRSAPublicKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsRSAKeyParameters *LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_generatePrivateKeyParameterWithJavaSecurityInterfacesRSAPrivateKey_(id<JavaSecurityInterfacesRSAPrivateKey> key);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_generateKeyFingerprintWithJavaMathBigInteger_(JavaMathBigInteger *modulus);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil_generateExponentFingerprintWithJavaMathBigInteger_(JavaMathBigInteger *exponent);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricRsaRSAUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // RSAUtil_H
