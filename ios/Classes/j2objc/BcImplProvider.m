//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcImplProvider.java
//

#include "AESEngine.h"
#include "AsymmetricBlockCipher.h"
#include "BcImplProvider.h"
#include "BlockCipher.h"
#include "BlowfishEngine.h"
#include "CAST5Engine.h"
#include "CamelliaEngine.h"
#include "DESEngine.h"
#include "DESedeEngine.h"
#include "DSADigestSigner.h"
#include "DSASigner.h"
#include "Digest.h"
#include "ECDSASigner.h"
#include "ElGamalEngine.h"
#include "HashAlgorithmTags.h"
#include "IDEAEngine.h"
#include "J2ObjC_source.h"
#include "MD2Digest.h"
#include "MD5Digest.h"
#include "PGPException.h"
#include "PKCS1Encoding.h"
#include "PublicKeyAlgorithmTags.h"
#include "RFC3394WrapEngine.h"
#include "RIPEMD160Digest.h"
#include "RSABlindedEngine.h"
#include "RSADigestSigner.h"
#include "SHA1Digest.h"
#include "SHA224Digest.h"
#include "SHA256Digest.h"
#include "SHA384Digest.h"
#include "SHA512Digest.h"
#include "Signer.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "TigerDigest.h"
#include "TwofishEngine.h"
#include "Wrapper.h"

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<LibOrgBouncycastleCryptoDigest>)createDigestWithInt:(jint)algorithm {
  return LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createDigestWithInt_(algorithm);
}

+ (id<LibOrgBouncycastleCryptoSigner>)createSignerWithInt:(jint)keyAlgorithm
                                                  withInt:(jint)hashAlgorithm {
  return LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createSignerWithInt_withInt_(keyAlgorithm, hashAlgorithm);
}

+ (id<LibOrgBouncycastleCryptoBlockCipher>)createBlockCipherWithInt:(jint)encAlgorithm {
  return LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createBlockCipherWithInt_(encAlgorithm);
}

+ (id<LibOrgBouncycastleCryptoWrapper>)createWrapperWithInt:(jint)encAlgorithm {
  return LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createWrapperWithInt_(encAlgorithm);
}

+ (id<LibOrgBouncycastleCryptoAsymmetricBlockCipher>)createPublicKeyCipherWithInt:(jint)encAlgorithm {
  return LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createPublicKeyCipherWithInt_(encAlgorithm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoSigner;", 0x8, 3, 4, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoBlockCipher;", 0x8, 5, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoWrapper;", 0x8, 6, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricBlockCipher;", 0x8, 7, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createDigestWithInt:);
  methods[2].selector = @selector(createSignerWithInt:withInt:);
  methods[3].selector = @selector(createBlockCipherWithInt:);
  methods[4].selector = @selector(createWrapperWithInt:);
  methods[5].selector = @selector(createPublicKeyCipherWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createDigest", "I", "LLibOrgBouncycastleOpenpgpPGPException;", "createSigner", "II", "createBlockCipher", "createWrapper", "createPublicKeyCipher" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider = { "BcImplProvider", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, NULL, 7, 0x0, 6, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider;
}

@end

void LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_init(LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider *new_LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider, init)
}

LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider *create_LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider, init)
}

id<LibOrgBouncycastleCryptoDigest> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createDigestWithInt_(jint algorithm) {
  LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_initialize();
  switch (algorithm) {
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1:
    return new_LibOrgBouncycastleCryptoDigestsSHA1Digest_init();
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA224:
    return new_LibOrgBouncycastleCryptoDigestsSHA224Digest_init();
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA256:
    return new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init();
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA384:
    return new_LibOrgBouncycastleCryptoDigestsSHA384Digest_init();
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA512:
    return new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init();
    case LibOrgBouncycastleBcpgHashAlgorithmTags_MD2:
    return new_LibOrgBouncycastleCryptoDigestsMD2Digest_init();
    case LibOrgBouncycastleBcpgHashAlgorithmTags_MD5:
    return new_LibOrgBouncycastleCryptoDigestsMD5Digest_init();
    case LibOrgBouncycastleBcpgHashAlgorithmTags_RIPEMD160:
    return new_LibOrgBouncycastleCryptoDigestsRIPEMD160Digest_init();
    case LibOrgBouncycastleBcpgHashAlgorithmTags_TIGER_192:
    return new_LibOrgBouncycastleCryptoDigestsTigerDigest_init();
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"cannot recognise digest");
  }
}

id<LibOrgBouncycastleCryptoSigner> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createSignerWithInt_withInt_(jint keyAlgorithm, jint hashAlgorithm) {
  LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_initialize();
  switch (keyAlgorithm) {
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN:
    return new_LibOrgBouncycastleCryptoSignersRSADigestSigner_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createDigestWithInt_(hashAlgorithm));
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
    return new_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoSignersDSASigner_init(), LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createDigestWithInt_(hashAlgorithm));
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA:
    return new_LibOrgBouncycastleCryptoSignersDSADigestSigner_initWithLibOrgBouncycastleCryptoDSA_withLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoSignersECDSASigner_init(), LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createDigestWithInt_(hashAlgorithm));
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"cannot recognise keyAlgorithm: ", keyAlgorithm));
  }
}

id<LibOrgBouncycastleCryptoBlockCipher> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createBlockCipherWithInt_(jint encAlgorithm) {
  LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_initialize();
  id<LibOrgBouncycastleCryptoBlockCipher> engine;
  switch (encAlgorithm) {
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_192:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256:
    engine = new_LibOrgBouncycastleCryptoEnginesAESEngine_init();
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_128:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_192:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_256:
    engine = new_LibOrgBouncycastleCryptoEnginesCamelliaEngine_init();
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_BLOWFISH:
    engine = new_LibOrgBouncycastleCryptoEnginesBlowfishEngine_init();
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAST5:
    engine = new_LibOrgBouncycastleCryptoEnginesCAST5Engine_init();
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_DES:
    engine = new_LibOrgBouncycastleCryptoEnginesDESEngine_init();
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_IDEA:
    engine = new_LibOrgBouncycastleCryptoEnginesIDEAEngine_init();
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_TWOFISH:
    engine = new_LibOrgBouncycastleCryptoEnginesTwofishEngine_init();
    break;
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_TRIPLE_DES:
    engine = new_LibOrgBouncycastleCryptoEnginesDESedeEngine_init();
    break;
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"cannot recognise cipher");
  }
  return engine;
}

id<LibOrgBouncycastleCryptoWrapper> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createWrapperWithInt_(jint encAlgorithm) {
  LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_initialize();
  switch (encAlgorithm) {
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_192:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256:
    return new_LibOrgBouncycastleCryptoEnginesRFC3394WrapEngine_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesAESEngine_init());
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_128:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_192:
    case LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_CAMELLIA_256:
    return new_LibOrgBouncycastleCryptoEnginesRFC3394WrapEngine_initWithLibOrgBouncycastleCryptoBlockCipher_(new_LibOrgBouncycastleCryptoEnginesCamelliaEngine_init());
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown wrap algorithm: ", encAlgorithm));
  }
}

id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_createPublicKeyCipherWithInt_(jint encAlgorithm) {
  LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider_initialize();
  id<LibOrgBouncycastleCryptoAsymmetricBlockCipher> c;
  switch (encAlgorithm) {
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT:
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
    c = new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesRSABlindedEngine_init());
    break;
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
    c = new_LibOrgBouncycastleCryptoEncodingsPKCS1Encoding_initWithLibOrgBouncycastleCryptoAsymmetricBlockCipher_(new_LibOrgBouncycastleCryptoEnginesElGamalEngine_init());
    break;
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"Can't use DSA for encryption.");
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"Can't use ECDSA for encryption.");
    case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"Not implemented.");
    default:
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(JreStrcat("$I", @"unknown asymmetric algorithm: ", encAlgorithm));
  }
  return c;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcImplProvider)
