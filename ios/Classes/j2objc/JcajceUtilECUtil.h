//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/util/JcajceUtilECUtil.java
//

#ifndef JcajceUtilECUtil_H
#define JcajceUtilECUtil_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSIntArray;
@class JavaMathBigInteger;
@class LibOrgBouncycastleAsn1ASN1ObjectIdentifier;
@class LibOrgBouncycastleAsn1X9X962Parameters;
@class LibOrgBouncycastleAsn1X9X9ECParameters;
@class LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class LibOrgBouncycastleCryptoParamsECDomainParameters;
@class LibOrgBouncycastleJceSpecECParameterSpec;
@class LibOrgBouncycastleMathEcECPoint;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol LibOrgBouncycastleJcajceProviderConfigProviderConfiguration;

@interface LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (NSString *)generateKeyFingerprintWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)publicPoint
                           withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key;

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

+ (NSString *)getCurveNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                            withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)params;

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                              withLibOrgBouncycastleAsn1X9X962Parameters:(LibOrgBouncycastleAsn1X9X962Parameters *)params;

+ (LibOrgBouncycastleAsn1X9X9ECParameters *)getNamedCurveByNameWithNSString:(NSString *)curveName;

+ (LibOrgBouncycastleAsn1X9X9ECParameters *)getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)ecParameterSpec;

+ (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithNSString:(NSString *)curveName;

+ (jint)getOrderBitLengthWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)order
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)privateValue;

+ (NSString *)privateKeyToStringWithNSString:(NSString *)algorithm
                      withJavaMathBigInteger:(JavaMathBigInteger *)d
withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec;

+ (NSString *)publicKeyToStringWithNSString:(NSString *)algorithm
        withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)q
withLibOrgBouncycastleJceSpecECParameterSpec:(LibOrgBouncycastleJceSpecECParameterSpec *)spec;

#pragma mark Package-Private

+ (IOSIntArray *)convertMidTermsWithIntArray:(IOSIntArray *)k;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil)

FOUNDATION_EXPORT void LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_init(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil *self);

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil *new_LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil *create_LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_init(void);

FOUNDATION_EXPORT IOSIntArray *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_convertMidTermsWithIntArray_(IOSIntArray *k);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleJceSpecECParameterSpec_(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, LibOrgBouncycastleJceSpecECParameterSpec *params);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getDomainParametersWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withLibOrgBouncycastleAsn1X9X962Parameters_(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, LibOrgBouncycastleAsn1X9X962Parameters *params);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key);

FOUNDATION_EXPORT jint LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getOrderBitLengthWithLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaMathBigInteger_withJavaMathBigInteger_(id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, JavaMathBigInteger *order, JavaMathBigInteger *privateValue);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithNSString_(NSString *curveName);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1ASN1ObjectIdentifier *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveOidWithLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJceSpecECParameterSpec *ecParameterSpec);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByOidWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X9X9ECParameters *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getNamedCurveByNameWithNSString_(NSString *curveName);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_getCurveNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_privateKeyToStringWithNSString_withJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, JavaMathBigInteger *d, LibOrgBouncycastleJceSpecECParameterSpec *spec);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_publicKeyToStringWithNSString_withLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, LibOrgBouncycastleMathEcECPoint *q, LibOrgBouncycastleJceSpecECParameterSpec *spec);

FOUNDATION_EXPORT NSString *LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generateKeyFingerprintWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleMathEcECPoint *publicPoint, LibOrgBouncycastleJceSpecECParameterSpec *spec);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // JcajceUtilECUtil_H
