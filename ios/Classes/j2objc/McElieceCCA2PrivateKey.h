//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/asn1/McElieceCCA2PrivateKey.java
//

#ifndef McElieceCCA2PrivateKey_H
#define McElieceCCA2PrivateKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@class LibOrgBouncycastlePqcMathLinearalgebraGF2mField;
@class LibOrgBouncycastlePqcMathLinearalgebraPermutation;
@class LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;

@interface LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)n
                              withInt:(jint)k
withLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM:(LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)goppaPoly
withLibOrgBouncycastlePqcMathLinearalgebraPermutation:(LibOrgBouncycastlePqcMathLinearalgebraPermutation *)p
withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)digest;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getDigest;

- (LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)getField;

- (LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)getGoppaPoly;

+ (LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *)getInstanceWithId:(id)o;

- (jint)getK;

- (jint)getN;

- (LibOrgBouncycastlePqcMathLinearalgebraPermutation *)getP;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey_initWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withLibOrgBouncycastlePqcMathLinearalgebraPermutation_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *self, jint n, jint k, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *goppaPoly, LibOrgBouncycastlePqcMathLinearalgebraPermutation *p, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *digest);

FOUNDATION_EXPORT LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *new_LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey_initWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withLibOrgBouncycastlePqcMathLinearalgebraPermutation_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(jint n, jint k, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *goppaPoly, LibOrgBouncycastlePqcMathLinearalgebraPermutation *p, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *create_LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey_initWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withLibOrgBouncycastlePqcMathLinearalgebraPermutation_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_(jint n, jint k, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *goppaPoly, LibOrgBouncycastlePqcMathLinearalgebraPermutation *p, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *digest);

FOUNDATION_EXPORT LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey_getInstanceWithId_(id o);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcAsn1McElieceCCA2PrivateKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // McElieceCCA2PrivateKey_H
