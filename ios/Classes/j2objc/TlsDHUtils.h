//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsDHUtils.java
//

#ifndef TlsDHUtils_H
#define TlsDHUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@class JavaUtilHashtable;
@class LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;
@class LibOrgBouncycastleCryptoParamsDHParameters;
@class LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters;
@class LibOrgBouncycastleCryptoParamsDHPublicKeyParameters;
@protocol LibOrgBouncycastleCryptoTlsTlsDHVerifier;

@interface LibOrgBouncycastleCryptoTlsTlsDHUtils : NSObject
@property (readonly, class) JavaMathBigInteger *TWO NS_SWIFT_NAME(TWO);
@property (readonly, class) JavaLangInteger *EXT_negotiated_ff_dhe_groups NS_SWIFT_NAME(EXT_negotiated_ff_dhe_groups);
@property (readonly, class) LibOrgBouncycastleCryptoParamsDHParameters *draft_ffdhe2432 NS_SWIFT_NAME(draft_ffdhe2432);
@property (readonly, class) LibOrgBouncycastleCryptoParamsDHParameters *draft_ffdhe3072 NS_SWIFT_NAME(draft_ffdhe3072);
@property (readonly, class) LibOrgBouncycastleCryptoParamsDHParameters *draft_ffdhe4096 NS_SWIFT_NAME(draft_ffdhe4096);
@property (readonly, class) LibOrgBouncycastleCryptoParamsDHParameters *draft_ffdhe6144 NS_SWIFT_NAME(draft_ffdhe6144);
@property (readonly, class) LibOrgBouncycastleCryptoParamsDHParameters *draft_ffdhe8192 NS_SWIFT_NAME(draft_ffdhe8192);

+ (JavaMathBigInteger *)TWO;

+ (JavaLangInteger *)EXT_negotiated_ff_dhe_groups;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)draft_ffdhe2432;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)draft_ffdhe3072;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)draft_ffdhe4096;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)draft_ffdhe6144;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)draft_ffdhe8192;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)addNegotiatedDHEGroupsClientExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                    withShortArray:(IOSShortArray *)dheGroups;

+ (void)addNegotiatedDHEGroupsServerExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                         withShort:(jshort)dheGroup;

+ (jboolean)areCompatibleParametersWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)a
                                   withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)b;

+ (IOSByteArray *)calculateDHBasicAgreementWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters:(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *)publicKey
                                          withLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)privateKey;

+ (jboolean)containsDHECipherSuitesWithIntArray:(IOSIntArray *)cipherSuites;

+ (IOSByteArray *)createNegotiatedDHEGroupsClientExtensionWithShortArray:(IOSShortArray *)dheGroups;

+ (IOSByteArray *)createNegotiatedDHEGroupsServerExtensionWithShort:(jshort)dheGroup;

+ (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateDHKeyPairWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                    withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParams;

+ (LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                          withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParams
                                                                                                  withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                          withLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParams
                                                                                                  withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (IOSShortArray *)getNegotiatedDHEGroupsClientExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jshort)getNegotiatedDHEGroupsServerExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)getParametersForDHEGroupWithShort:(jshort)dheGroup;

+ (jboolean)isDHECipherSuiteWithInt:(jint)cipherSuite;

+ (JavaMathBigInteger *)readDHParameterWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)readDHParametersWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSShortArray *)readNegotiatedDHEGroupsClientExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jshort)readNegotiatedDHEGroupsServerExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (LibOrgBouncycastleCryptoParamsDHParameters *)receiveDHParametersWithLibOrgBouncycastleCryptoTlsTlsDHVerifier:(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier>)dhVerifier
                                                                                          withJavaIoInputStream:(JavaIoInputStream *)input;

+ (void)writeDHParameterWithJavaMathBigInteger:(JavaMathBigInteger *)x
                        withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeDHParametersWithLibOrgBouncycastleCryptoParamsDHParameters:(LibOrgBouncycastleCryptoParamsDHParameters *)dhParameters
                                                 withJavaIoOutputStream:(JavaIoOutputStream *)output;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsTlsDHUtils)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsDHUtils_get_TWO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsDHUtils_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsDHUtils, TWO, JavaMathBigInteger *)

inline JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsDHUtils_get_EXT_negotiated_ff_dhe_groups(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsDHUtils_EXT_negotiated_ff_dhe_groups;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsDHUtils, EXT_negotiated_ff_dhe_groups, JavaLangInteger *)

inline LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_get_draft_ffdhe2432(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_draft_ffdhe2432;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsDHUtils, draft_ffdhe2432, LibOrgBouncycastleCryptoParamsDHParameters *)

inline LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_get_draft_ffdhe3072(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_draft_ffdhe3072;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsDHUtils, draft_ffdhe3072, LibOrgBouncycastleCryptoParamsDHParameters *)

inline LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_get_draft_ffdhe4096(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_draft_ffdhe4096;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsDHUtils, draft_ffdhe4096, LibOrgBouncycastleCryptoParamsDHParameters *)

inline LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_get_draft_ffdhe6144(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_draft_ffdhe6144;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsDHUtils, draft_ffdhe6144, LibOrgBouncycastleCryptoParamsDHParameters *)

inline LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_get_draft_ffdhe8192(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_draft_ffdhe8192;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsDHUtils, draft_ffdhe8192, LibOrgBouncycastleCryptoParamsDHParameters *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHUtils_init(LibOrgBouncycastleCryptoTlsTlsDHUtils *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHUtils *new_LibOrgBouncycastleCryptoTlsTlsDHUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsTlsDHUtils *create_LibOrgBouncycastleCryptoTlsTlsDHUtils_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHUtils_addNegotiatedDHEGroupsClientExtensionWithJavaUtilHashtable_withShortArray_(JavaUtilHashtable *extensions, IOSShortArray *dheGroups);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHUtils_addNegotiatedDHEGroupsServerExtensionWithJavaUtilHashtable_withShort_(JavaUtilHashtable *extensions, jshort dheGroup);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleCryptoTlsTlsDHUtils_getNegotiatedDHEGroupsClientExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jshort LibOrgBouncycastleCryptoTlsTlsDHUtils_getNegotiatedDHEGroupsServerExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsDHUtils_createNegotiatedDHEGroupsClientExtensionWithShortArray_(IOSShortArray *dheGroups);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsDHUtils_createNegotiatedDHEGroupsServerExtensionWithShort_(jshort dheGroup);

FOUNDATION_EXPORT IOSShortArray *LibOrgBouncycastleCryptoTlsTlsDHUtils_readNegotiatedDHEGroupsClientExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jshort LibOrgBouncycastleCryptoTlsTlsDHUtils_readNegotiatedDHEGroupsServerExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_getParametersForDHEGroupWithShort_(jshort dheGroup);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsDHUtils_containsDHECipherSuitesWithIntArray_(IOSIntArray *cipherSuites);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsDHUtils_isDHECipherSuiteWithInt_(jint cipherSuite);

FOUNDATION_EXPORT jboolean LibOrgBouncycastleCryptoTlsTlsDHUtils_areCompatibleParametersWithLibOrgBouncycastleCryptoParamsDHParameters_withLibOrgBouncycastleCryptoParamsDHParameters_(LibOrgBouncycastleCryptoParamsDHParameters *a, LibOrgBouncycastleCryptoParamsDHParameters *b);

FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleCryptoTlsTlsDHUtils_calculateDHBasicAgreementWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters_withLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *publicKey, LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *privateKey);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *LibOrgBouncycastleCryptoTlsTlsDHUtils_generateDHKeyPairWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsDHParameters_(JavaSecuritySecureRandom *random, LibOrgBouncycastleCryptoParamsDHParameters *dhParams);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsDHParameters_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, LibOrgBouncycastleCryptoParamsDHParameters *dhParams, JavaIoOutputStream *output);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsDHParameters_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, LibOrgBouncycastleCryptoParamsDHParameters *dhParams, JavaIoOutputStream *output);

FOUNDATION_EXPORT JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsDHUtils_readDHParameterWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_readDHParametersWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoParamsDHParameters *LibOrgBouncycastleCryptoTlsTlsDHUtils_receiveDHParametersWithLibOrgBouncycastleCryptoTlsTlsDHVerifier_withJavaIoInputStream_(id<LibOrgBouncycastleCryptoTlsTlsDHVerifier> dhVerifier, JavaIoInputStream *input);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHUtils_writeDHParameterWithJavaMathBigInteger_withJavaIoOutputStream_(JavaMathBigInteger *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsTlsDHUtils_writeDHParametersWithLibOrgBouncycastleCryptoParamsDHParameters_withJavaIoOutputStream_(LibOrgBouncycastleCryptoParamsDHParameters *dhParameters, JavaIoOutputStream *output);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsTlsDHUtils)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TlsDHUtils_H
