//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "BigDecimalPolynomial.h"
#include "BigIntEuclidean.h"
#include "BigIntPolynomial.h"
#include "CryptoServicesRegistrar.h"
#include "DenseTernaryPolynomial.h"
#include "IOSPrimitiveArray.h"
#include "IntegerPolynomial.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "ModularResultant.h"
#include "NTRUParameters.h"
#include "NTRUSigningKeyGenerationParameters.h"
#include "NTRUSigningKeyPairGenerator.h"
#include "NTRUSigningParameters.h"
#include "NTRUSigningPrivateKeyParameters.h"
#include "NTRUSigningPublicKeyParameters.h"
#include "PqcMathPolynomial.h"
#include "ProductFormPolynomial.h"
#include "Resultant.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"

@interface LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator () {
 @public
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params_;
}

- (void)minimizeFGWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)f
                  withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)g
                  withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)F
                  withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)G
                                                                       withInt:(jint)N;

- (LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *)generateBasis;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator, params_, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_minimizeFGWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *self, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *f, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *g, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G, jint N);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_generateBasis(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *self);

@interface LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask : NSObject < JavaUtilConcurrentCallable > {
 @public
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *this$0_;
}

- (instancetype)initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *)outer$;

- (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask *self, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$);

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask)

@implementation LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  self->params_ = (LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters class]);
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *pub = nil;
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newCachedThreadPool();
  id<JavaUtilList> bases = new_JavaUtilArrayList_init();
  for (jint k = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_))->B_; k >= 0; k--) {
    [bases addWithId:[((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaUtilConcurrentCallable:new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_(self)]];
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) shutdown];
  id<JavaUtilList> basises = new_JavaUtilArrayList_init();
  for (jint k = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_))->B_; k >= 0; k--) {
    id<JavaUtilConcurrentFuture> basis = [bases getWithInt:k];
    @try {
      [basises addWithId:[((id<JavaUtilConcurrentFuture>) nil_chk(basis)) get]];
      if (k == ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_))->B_) {
        pub = new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(((LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *) nil_chk([basis get]))->h_, [((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_)) getSigningParameters]);
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangIllegalStateException_initWithJavaLangThrowable_(e);
    }
  }
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *priv = new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaUtilList_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_(basises, pub);
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *kp = new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pub, priv);
  return kp;
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPairSingleThread {
  id<JavaUtilList> basises = new_JavaUtilArrayList_init();
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters *pub = nil;
  for (jint k = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_))->B_; k >= 0; k--) {
    LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *basis = [self generateBoundedBasis];
    [basises addWithId:basis];
    if (k == 0) {
      pub = new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_initWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningParameters_(((LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *) nil_chk(basis))->h_, [((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_)) getSigningParameters]);
    }
  }
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters *priv = new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_initWithJavaUtilList_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningPublicKeyParameters_(basises, pub);
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pub, priv);
}

- (void)minimizeFGWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)f
                  withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)g
                  withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)F
                  withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)G
                                                                       withInt:(jint)N {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_minimizeFGWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, f, g, F, G, N);
}

- (LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *)generateBasis {
  return LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_generateBasis(self);
}

- (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *)generateBoundedBasis {
  while (true) {
    LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *basis = LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_generateBasis(self);
    if ([((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *) nil_chk(basis)) isNormOk]) {
      return basis;
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(generateKeyPairSingleThread);
  methods[4].selector = @selector(minimizeFGWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[5].selector = @selector(generateBasis);
  methods[6].selector = @selector(generateBoundedBasis);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;", "minimizeFG", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;I", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask;LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator = { "NTRUSigningKeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, 4, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_init(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *self) {
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator, init)
}

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_minimizeFGWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *self, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *f, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *g, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G, jint N) {
  jint E = 0;
  for (jint j = 0; j < N; j++) {
    E += 2 * N * (IOSIntArray_Get(nil_chk(((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(f))->coeffs_), j) * IOSIntArray_Get(f->coeffs_, j) + IOSIntArray_Get(((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(g))->coeffs_, j) * IOSIntArray_Get(g->coeffs_, j));
  }
  E -= 4;
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *u = (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(f)) java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]);
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *v = (LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(g)) java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]);
  jint j = 0;
  jint k = 0;
  jint maxAdjustment = N;
  while (k < maxAdjustment && j < N) {
    jint D = 0;
    jint i = 0;
    while (i < N) {
      jint D1 = IOSIntArray_Get(nil_chk(((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(F))->coeffs_), i) * IOSIntArray_Get(f->coeffs_, i);
      jint D2 = IOSIntArray_Get(((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(G))->coeffs_, i) * IOSIntArray_Get(g->coeffs_, i);
      jint D3 = 4 * N * (D1 + D2);
      D += D3;
      i++;
    }
    jint D1 = 4 * ([((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(F)) sumCoeffs] + [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(G)) sumCoeffs]);
    D -= D1;
    if (D > E) {
      [F subWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:u];
      [G subWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:v];
      k++;
      j = 0;
    }
    else if (D < -E) {
      [F addWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:u];
      [G addWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:v];
      k++;
      j = 0;
    }
    j++;
    [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(u)) rotate1];
    [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(v)) rotate1];
  }
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_generateBasis(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *self) {
  jint N = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(self->params_))->N_;
  jint q = self->params_->q_;
  jint d = self->params_->d_;
  jint d1 = self->params_->d1_;
  jint d2 = self->params_->d2_;
  jint d3 = self->params_->d3_;
  jint basisType = self->params_->basisType_;
  id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f;
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *fInt;
  id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> g;
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *gInt;
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *fq;
  LibOrgBouncycastlePqcMathNtruPolynomialResultant *rf;
  LibOrgBouncycastlePqcMathNtruPolynomialResultant *rg;
  LibOrgBouncycastlePqcMathNtruEuclidBigIntEuclidean *r;
  jint _2n1 = 2 * N + 1;
  jboolean primeCheck = self->params_->primeCheck_;
  do {
    do {
      f = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(self->params_))->polyType_ == LibOrgBouncycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE ? LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, d + 1, d, LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom()) : (id) LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_generateRandomWithInt_withInt_withInt_withInt_withInt_withJavaSecuritySecureRandom_(N, d1, d2, d3 + 1, d3, LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom());
      fInt = [f toIntegerPolynomial];
    }
    while (primeCheck && [((JavaMathBigInteger *) nil_chk(((LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk([((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(fInt)) resultantWithInt:_2n1]))->res_)) isEqual:JreLoadStatic(JavaMathBigInteger, ZERO)]);
    fq = [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(fInt)) invertFqWithInt:q];
  }
  while (fq == nil);
  rf = [fInt resultant];
  do {
    do {
      do {
        g = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(self->params_))->polyType_ == LibOrgBouncycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE ? LibOrgBouncycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, d + 1, d, LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom()) : (id) LibOrgBouncycastlePqcMathNtruPolynomialProductFormPolynomial_generateRandomWithInt_withInt_withInt_withInt_withInt_withJavaSecuritySecureRandom_(N, d1, d2, d3 + 1, d3, LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom());
        gInt = [g toIntegerPolynomial];
      }
      while (primeCheck && [((JavaMathBigInteger *) nil_chk(((LibOrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk([((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(gInt)) resultantWithInt:_2n1]))->res_)) isEqual:JreLoadStatic(JavaMathBigInteger, ZERO)]);
    }
    while ([((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(gInt)) invertFqWithInt:q] == nil);
    rg = [gInt resultant];
    r = LibOrgBouncycastlePqcMathNtruEuclidBigIntEuclidean_calculateWithJavaMathBigInteger_withJavaMathBigInteger_(((LibOrgBouncycastlePqcMathNtruPolynomialResultant *) nil_chk(rf))->res_, ((LibOrgBouncycastlePqcMathNtruPolynomialResultant *) nil_chk(rg))->res_);
  }
  while (![((JavaMathBigInteger *) nil_chk(((LibOrgBouncycastlePqcMathNtruEuclidBigIntEuclidean *) nil_chk(r))->gcd_)) isEqual:JreLoadStatic(JavaMathBigInteger, ONE)]);
  LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *A = (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) cast_chk([((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rf->rho_)) java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial class]);
  [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(A)) multWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r->x_)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(q)]];
  LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *B = (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) cast_chk([((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rg->rho_)) java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial class]);
  [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(B)) multWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r->y_)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(-q)]];
  LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *C;
  if (((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(self->params_))->keyGenAlg_ == LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_RESULTANT) {
    IOSIntArray *fRevCoeffs = [IOSIntArray newArrayWithLength:N];
    IOSIntArray *gRevCoeffs = [IOSIntArray newArrayWithLength:N];
    *IOSIntArray_GetRef(fRevCoeffs, 0) = IOSIntArray_Get(nil_chk(fInt->coeffs_), 0);
    *IOSIntArray_GetRef(gRevCoeffs, 0) = IOSIntArray_Get(gInt->coeffs_, 0);
    for (jint i = 1; i < N; i++) {
      *IOSIntArray_GetRef(fRevCoeffs, i) = IOSIntArray_Get(fInt->coeffs_, N - i);
      *IOSIntArray_GetRef(gRevCoeffs, i) = IOSIntArray_Get(gInt->coeffs_, N - i);
    }
    LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *fRev = new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(fRevCoeffs);
    LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *gRev = new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(gRevCoeffs);
    LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *t = [f multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:fRev];
    [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(t)) addWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:[g multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:gRev]];
    LibOrgBouncycastlePqcMathNtruPolynomialResultant *rt = [t resultant];
    C = [fRev multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:B];
    [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(C)) addWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:[gRev multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:A]];
    C = [C multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:((LibOrgBouncycastlePqcMathNtruPolynomialResultant *) nil_chk(rt))->rho_];
    [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(C)) divWithJavaMathBigInteger:rt->res_];
  }
  else {
    jint log10N = 0;
    for (jint i = 1; i < N; i *= 10) {
      log10N++;
    }
    LibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *fInv = [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rf->rho_)) divWithJavaMathBigDecimal:new_JavaMathBigDecimal_initWithJavaMathBigInteger_(rf->res_) withInt:[B getMaxCoeffLength] + 1 + log10N];
    LibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *gInv = [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rg->rho_)) divWithJavaMathBigDecimal:new_JavaMathBigDecimal_initWithJavaMathBigInteger_(rg->res_) withInt:[A getMaxCoeffLength] + 1 + log10N];
    LibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *Cdec = [((LibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *) nil_chk(fInv)) multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:B];
    [((LibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *) nil_chk(Cdec)) addWithLibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial:[((LibOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *) nil_chk(gInv)) multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:A]];
    [Cdec halve];
    C = [Cdec round];
  }
  LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *F = (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) cast_chk([B java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial class]);
  [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(F)) subWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:[f multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:C]];
  LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *G = (LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) cast_chk([A java_clone], [LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial class]);
  [((LibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(G)) subWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:[g multWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:C]];
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *FInt = new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(F);
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *GInt = new_LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithLibOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(G);
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_minimizeFGWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, fInt, gInt, FInt, GInt, N);
  id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime;
  LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h;
  if (basisType == LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_STANDARD) {
    fPrime = FInt;
    h = [g multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:fq withInt:q];
  }
  else {
    fPrime = g;
    h = [FInt multWithLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:fq withInt:q];
  }
  [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(h)) modPositiveWithInt:q];
  return new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(self, f, fPrime, h, FInt, GInt, self->params_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator)

@implementation LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask

- (instancetype)initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *)outer$ {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_(self, outer$);
  return self;
}

- (LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis *)call {
  return [this$0_ generateBoundedBasis];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis;", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Llib/org/bouncycastle/pqc/crypto/ntru/NTRUSigningPrivateKeyParameters$Basis;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask = { "BasisGenerationTask", "lib.org.bouncycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x2, 2, 1, 1, -1, -1, 2, -1 };
  return &_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask;
}

@end

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask *self, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask, initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_, outer$)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask, initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_BasisGenerationTask)

@implementation LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis

- (instancetype)initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *)outer$
                      withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)f
                      withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:(id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial>)fPrime
                      withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)h
                      withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)F
                      withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)G
             withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)params {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(self, outer$, f, fPrime, h, F, G, params);
  return self;
}

- (jboolean)isNormOk {
  jdouble keyNormBoundSq = ((LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) nil_chk(params_))->keyNormBoundSq_;
  jint q = params_->q_;
  return ([((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(F_)) centeredNormSqWithInt:q] < keyNormBoundSq && [((LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(G_)) centeredNormSqWithInt:q] < keyNormBoundSq);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator:withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters:);
  methods[1].selector = @selector(isNormOk);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "F_", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "G_", "LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;LLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", "LLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis = { "FGBasis", "lib.org.bouncycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 2, 2, 1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis;
}

@end

void LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *self, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  LibOrgBouncycastlePqcCryptoNtruNTRUSigningPrivateKeyParameters_Basis_initWithLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(self, f, fPrime, h, params);
  self->F_ = F;
  self->G_ = G;
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *new_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis, initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_, outer$, f, fPrime, h, F, G, params)
}

LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis *create_LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis_initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator *outer$, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> f, id<LibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial> fPrime, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *h, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *F, LibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *G, LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis, initWithLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialPqcMathPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withLibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_, outer$, f, fPrime, h, F, G, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoNtruNTRUSigningKeyPairGenerator_FGBasis)
