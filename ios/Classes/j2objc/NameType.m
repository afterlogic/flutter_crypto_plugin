//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/NameType.java
//

#include "J2ObjC_source.h"
#include "NameType.h"

@implementation LibOrgBouncycastleCryptoTlsNameType

+ (jshort)host_name {
  return LibOrgBouncycastleCryptoTlsNameType_host_name;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsNameType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isValidWithShort:(jshort)nameType {
  return LibOrgBouncycastleCryptoTlsNameType_isValidWithShort_(nameType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isValidWithShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "host_name", "S", .constantValue.asShort = LibOrgBouncycastleCryptoTlsNameType_host_name, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isValid", "S" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsNameType = { "NameType", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsNameType;
}

@end

void LibOrgBouncycastleCryptoTlsNameType_init(LibOrgBouncycastleCryptoTlsNameType *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsNameType *new_LibOrgBouncycastleCryptoTlsNameType_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsNameType, init)
}

LibOrgBouncycastleCryptoTlsNameType *create_LibOrgBouncycastleCryptoTlsNameType_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsNameType, init)
}

jboolean LibOrgBouncycastleCryptoTlsNameType_isValidWithShort_(jshort nameType) {
  LibOrgBouncycastleCryptoTlsNameType_initialize();
  return nameType == LibOrgBouncycastleCryptoTlsNameType_host_name;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsNameType)
