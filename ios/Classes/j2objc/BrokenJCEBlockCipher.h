//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/BrokenJCEBlockCipher.java
//

#ifndef BrokenJCEBlockCipher_H
#define BrokenJCEBlockCipher_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "BrokenPBE.h"
#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol LibOrgBouncycastleCryptoBlockCipher;

@interface LibOrgBouncycastleJceProviderBrokenJCEBlockCipher : NSObject < LibOrgBouncycastleJceProviderBrokenPBE >

#pragma mark Protected

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                              withInt:(jint)pbeType
                                                              withInt:(jint)pbeHash
                                                              withInt:(jint)pbeKeySize
                                                              withInt:(jint)pbeIvSize;

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen;

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset;

- (jint)engineGetBlockSize;

- (IOSByteArray *)engineGetIV;

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (jint)engineGetOutputSizeWithInt:(jint)inputLen;

- (JavaSecurityAlgorithmParameters *)engineGetParameters;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineSetModeWithNSString:(NSString *)mode;

- (void)engineSetPaddingWithNSString:(NSString *)padding;

- (id<JavaSecurityKey>)engineUnwrapWithByteArray:(IOSByteArray *)wrappedKey
                                    withNSString:(NSString *)wrappedKeyAlgorithm
                                         withInt:(jint)wrappedKeyType;

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen;

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset;

- (IOSByteArray *)engineWrapWithJavaSecurityKey:(id<JavaSecurityKey>)key;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> engine);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> engine) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> engine);

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *self, id<LibOrgBouncycastleCryptoBlockCipher> engine, jint pbeType, jint pbeHash, jint pbeKeySize, jint pbeIvSize);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jint pbeType, jint pbeHash, jint pbeKeySize, jint pbeIvSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withInt_withInt_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> engine, jint pbeType, jint pbeHash, jint pbeKeySize, jint pbeIvSize);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher)

@interface LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES : LibOrgBouncycastleJceProviderBrokenJCEBlockCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0
                                                              withInt:(jint)arg1
                                                              withInt:(jint)arg2
                                                              withInt:(jint)arg3
                                                              withInt:(jint)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithMD5AndDES)

@interface LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES : LibOrgBouncycastleJceProviderBrokenJCEBlockCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0
                                                              withInt:(jint)arg1
                                                              withInt:(jint)arg2
                                                              withInt:(jint)arg3
                                                              withInt:(jint)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHA1AndDES)

@interface LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key : LibOrgBouncycastleJceProviderBrokenJCEBlockCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0
                                                              withInt:(jint)arg1
                                                              withInt:(jint)arg2
                                                              withInt:(jint)arg3
                                                              withInt:(jint)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES3Key)

@interface LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key : LibOrgBouncycastleJceProviderBrokenJCEBlockCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0
                                                              withInt:(jint)arg1
                                                              withInt:(jint)arg2
                                                              withInt:(jint)arg3
                                                              withInt:(jint)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndDES3Key)

@interface LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key : LibOrgBouncycastleJceProviderBrokenJCEBlockCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0
                                                              withInt:(jint)arg1
                                                              withInt:(jint)arg2
                                                              withInt:(jint)arg3
                                                              withInt:(jint)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_BrokePBEWithSHAAndDES2Key)

@interface LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish : LibOrgBouncycastleJceProviderBrokenJCEBlockCipher

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)arg0
                                                              withInt:(jint)arg1
                                                              withInt:(jint)arg2
                                                              withInt:(jint)arg3
                                                              withInt:(jint)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish)

FOUNDATION_EXPORT void LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish_init(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish *self);

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish *new_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish *create_LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleJceProviderBrokenJCEBlockCipher_OldPBEWithSHAAndTwofish)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BrokenJCEBlockCipher_H
