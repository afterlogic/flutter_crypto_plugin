//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/macs/ISO9797Alg3Mac.java
//

#include "BlockCipher.h"
#include "BlockCipherPadding.h"
#include "CBCBlockCipher.h"
#include "CipherParameters.h"
#include "DESEngine.h"
#include "IOSPrimitiveArray.h"
#include "ISO9797Alg3Mac.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "ParametersWithIV.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

@interface LibOrgBouncycastleCryptoMacsISO9797Alg3Mac () {
 @public
  IOSByteArray *mac_;
  IOSByteArray *buf_;
  jint bufOff_;
  id<LibOrgBouncycastleCryptoBlockCipher> cipher_;
  id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding_;
  jint macSize_;
  LibOrgBouncycastleCryptoParamsKeyParameter *lastKey2_;
  LibOrgBouncycastleCryptoParamsKeyParameter *lastKey3_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, mac_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, buf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, cipher_, id<LibOrgBouncycastleCryptoBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, padding_, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, lastKey2_, LibOrgBouncycastleCryptoParamsKeyParameter *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, lastKey3_, LibOrgBouncycastleCryptoParamsKeyParameter *)

@implementation LibOrgBouncycastleCryptoMacsISO9797Alg3Mac

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher {
  LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
     withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding:(id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>)padding {
  LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self, cipher, padding);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                    withInt:(jint)macSizeInBits {
  LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(self, cipher, macSizeInBits);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)cipher
                                                    withInt:(jint)macSizeInBits
     withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding:(id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>)padding {
  LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self, cipher, macSizeInBits, padding);
  return self;
}

- (NSString *)getAlgorithmName {
  return @"ISO9797Alg3";
}

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  [self reset];
  if (!([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]] || [params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"params must be an instance of KeyParameter or ParametersWithIV");
  }
  LibOrgBouncycastleCryptoParamsKeyParameter *kp;
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]]) {
    kp = (LibOrgBouncycastleCryptoParamsKeyParameter *) params;
  }
  else {
    kp = (LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(params, [LibOrgBouncycastleCryptoParamsParametersWithIV class])))) getParameters], [LibOrgBouncycastleCryptoParamsKeyParameter class]);
  }
  LibOrgBouncycastleCryptoParamsKeyParameter *key1;
  IOSByteArray *keyvalue = [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(kp)) getKey];
  if (((IOSByteArray *) nil_chk(keyvalue))->size_ == 16) {
    key1 = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(keyvalue, 0, 8);
    self->lastKey2_ = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(keyvalue, 8, 8);
    self->lastKey3_ = key1;
  }
  else if (keyvalue->size_ == 24) {
    key1 = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(keyvalue, 0, 8);
    self->lastKey2_ = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(keyvalue, 8, 8);
    self->lastKey3_ = new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(keyvalue, 16, 8);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Key must be either 112 or 168 bit long");
  }
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]]) {
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_(key1, [((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(((LibOrgBouncycastleCryptoParamsParametersWithIV *) params))) getIV])];
  }
  else {
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:key1];
  }
}

- (jint)getMacSize {
  return macSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
    bufOff_ = 0;
  }
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  jint blockSize = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  jint resultLen = 0;
  jint gapLen = blockSize - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    resultLen += [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > blockSize) {
      resultLen += [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:mac_ withInt:0];
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  jint blockSize = [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  if (padding_ == nil) {
    while (bufOff_ < blockSize) {
      *IOSByteArray_GetRef(nil_chk(buf_), bufOff_) = 0;
      bufOff_++;
    }
  }
  else {
    if (bufOff_ == blockSize) {
      [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
      bufOff_ = 0;
    }
    [((id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) addPaddingWithByteArray:buf_ withInt:bufOff_];
  }
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
  LibOrgBouncycastleCryptoEnginesDESEngine *deseng = new_LibOrgBouncycastleCryptoEnginesDESEngine_init();
  [deseng init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:self->lastKey2_];
  [deseng processBlockWithByteArray:mac_ withInt:0 withByteArray:mac_ withInt:0];
  [deseng init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:self->lastKey3_];
  [deseng processBlockWithByteArray:mac_ withInt:0 withByteArray:mac_ withInt:0];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mac_, 0, outArg, outOff, macSize_);
  [self reset];
  return macSize_;
}

- (void)reset {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i++) {
    *IOSByteArray_GetRef(buf_, i) = 0;
  }
  bufOff_ = 0;
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withInt:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:withInt:withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding:);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[6].selector = @selector(getMacSize);
  methods[7].selector = @selector(updateWithByte:);
  methods[8].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mac_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LLibOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padding_", "LLibOrgBouncycastleCryptoPaddingsBlockCipherPadding;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastKey2_", "LLibOrgBouncycastleCryptoParamsKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastKey3_", "LLibOrgBouncycastleCryptoParamsKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "LLibOrgBouncycastleCryptoBlockCipher;LLibOrgBouncycastleCryptoPaddingsBlockCipherPadding;", "LLibOrgBouncycastleCryptoBlockCipher;I", "LLibOrgBouncycastleCryptoBlockCipher;ILLibOrgBouncycastleCryptoPaddingsBlockCipherPadding;", "init", "LLibOrgBouncycastleCryptoCipherParameters;", "update", "B", "[BII", "doFinal", "[BI" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoMacsISO9797Alg3Mac = { "ISO9797Alg3Mac", "lib.org.bouncycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac;
}

@end

void LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self, cipher, [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8, nil);
}

LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *new_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *create_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, initWithLibOrgBouncycastleCryptoBlockCipher_, cipher)
}

void LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self, cipher, [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8, padding);
}

LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *new_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}

LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *create_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, initWithLibOrgBouncycastleCryptoBlockCipher_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}

void LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self, cipher, macSizeInBits, nil);
}

LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *new_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, macSizeInBits)
}

LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *create_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_, cipher, macSizeInBits)
}

void LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *self, id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  NSObject_init(self);
  if ((macSizeInBits % 8) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"MAC size must be multiple of 8");
  }
  if (!([cipher isKindOfClass:[LibOrgBouncycastleCryptoEnginesDESEngine class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cipher must be instance of DESEngine");
  }
  self->cipher_ = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(cipher);
  self->padding_ = padding;
  self->macSize_ = macSizeInBits / 8;
  self->mac_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->buf_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->bufOff_ = 0;
}

LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *new_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_, cipher, macSizeInBits, padding)
}

LibOrgBouncycastleCryptoMacsISO9797Alg3Mac *create_LibOrgBouncycastleCryptoMacsISO9797Alg3Mac_initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<LibOrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits, id<LibOrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac, initWithLibOrgBouncycastleCryptoBlockCipher_withInt_withLibOrgBouncycastleCryptoPaddingsBlockCipherPadding_, cipher, macSizeInBits, padding)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoMacsISO9797Alg3Mac)
