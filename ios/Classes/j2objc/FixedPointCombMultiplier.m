//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/math/ec/FixedPointCombMultiplier.java
//

#include "AbstractECMultiplier.h"
#include "ECCurve.h"
#include "ECLookupTable.h"
#include "ECPoint.h"
#include "FixedPointCombMultiplier.h"
#include "FixedPointPreCompInfo.h"
#include "FixedPointUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Nat.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"

@implementation LibOrgBouncycastleMathEcFixedPointCombMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleMathEcFixedPointCombMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleMathEcECPoint *)multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)p
                                                                  withJavaMathBigInteger:(JavaMathBigInteger *)k {
  LibOrgBouncycastleMathEcECCurve *c = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  jint size = LibOrgBouncycastleMathEcFixedPointUtil_getCombSizeWithLibOrgBouncycastleMathEcECCurve_(c);
  if ([((JavaMathBigInteger *) nil_chk(k)) bitLength] > size) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"fixed-point comb doesn't support scalars larger than the curve order");
  }
  LibOrgBouncycastleMathEcFixedPointPreCompInfo *info = LibOrgBouncycastleMathEcFixedPointUtil_precomputeWithLibOrgBouncycastleMathEcECPoint_(p);
  id<LibOrgBouncycastleMathEcECLookupTable> lookupTable = [((LibOrgBouncycastleMathEcFixedPointPreCompInfo *) nil_chk(info)) getLookupTable];
  jint width = [info getWidth];
  jint d = (size + width - 1) / width;
  LibOrgBouncycastleMathEcECPoint *R = [((LibOrgBouncycastleMathEcECCurve *) nil_chk(c)) getInfinity];
  jint fullComb = d * width;
  IOSIntArray *K = LibOrgBouncycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(fullComb, k);
  jint top = fullComb - 1;
  for (jint i = 0; i < d; ++i) {
    jint secretIndex = 0;
    for (jint j = top - i; j >= 0; j -= d) {
      jint secretBit = JreURShift32(IOSIntArray_Get(nil_chk(K), JreURShift32(j, 5)), (j & (jint) 0x1F));
      secretIndex ^= JreURShift32(secretBit, 1);
      JreLShiftAssignInt(&secretIndex, 1);
      secretIndex ^= secretBit;
    }
    LibOrgBouncycastleMathEcECPoint *add = [((id<LibOrgBouncycastleMathEcECLookupTable>) nil_chk(lookupTable)) lookupWithInt:secretIndex];
    R = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithLibOrgBouncycastleMathEcECPoint:add];
  }
  return [((LibOrgBouncycastleMathEcECPoint *) nil_chk(R)) addWithLibOrgBouncycastleMathEcECPoint:[info getOffset]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithLibOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiplyPositive", "LLibOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleMathEcFixedPointCombMultiplier = { "FixedPointCombMultiplier", "lib.org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleMathEcFixedPointCombMultiplier;
}

@end

void LibOrgBouncycastleMathEcFixedPointCombMultiplier_init(LibOrgBouncycastleMathEcFixedPointCombMultiplier *self) {
  LibOrgBouncycastleMathEcAbstractECMultiplier_init(self);
}

LibOrgBouncycastleMathEcFixedPointCombMultiplier *new_LibOrgBouncycastleMathEcFixedPointCombMultiplier_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleMathEcFixedPointCombMultiplier, init)
}

LibOrgBouncycastleMathEcFixedPointCombMultiplier *create_LibOrgBouncycastleMathEcFixedPointCombMultiplier_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleMathEcFixedPointCombMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleMathEcFixedPointCombMultiplier)
