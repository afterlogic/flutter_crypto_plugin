//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/PGPObjectFactory.java
//

#include "BCPGInputStream.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFingerPrintCalculator.h"
#include "PGPCompressedData.h"
#include "PGPEncryptedDataList.h"
#include "PGPException.h"
#include "PGPLiteralData.h"
#include "PGPMarker.h"
#include "PGPObjectFactory.h"
#include "PGPOnePassSignature.h"
#include "PGPOnePassSignatureList.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPRuntimeOperationException.h"
#include "PGPSecretKeyRing.h"
#include "PGPSignature.h"
#include "PGPSignatureList.h"
#include "Packet.h"
#include "PacketTags.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Iterable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@interface LibOrgBouncycastleOpenpgpPGPObjectFactory () {
 @public
  LibOrgBouncycastleBcpgBCPGInputStream *in_;
  id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPObjectFactory, in_, LibOrgBouncycastleBcpgBCPGInputStream *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPObjectFactory, fingerPrintCalculator_, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)

@interface LibOrgBouncycastleOpenpgpPGPObjectFactory_1 : NSObject < JavaUtilIterator > {
 @public
  LibOrgBouncycastleOpenpgpPGPObjectFactory *this$0_;
  jboolean triedNext_;
  id obj_;
}

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPObjectFactory:(LibOrgBouncycastleOpenpgpPGPObjectFactory *)outer$;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (id)getObject;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpPGPObjectFactory_1)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpPGPObjectFactory_1, obj_, id)

__attribute__((unused)) static void LibOrgBouncycastleOpenpgpPGPObjectFactory_1_initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_(LibOrgBouncycastleOpenpgpPGPObjectFactory_1 *self, LibOrgBouncycastleOpenpgpPGPObjectFactory *outer$);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPObjectFactory_1 *new_LibOrgBouncycastleOpenpgpPGPObjectFactory_1_initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_(LibOrgBouncycastleOpenpgpPGPObjectFactory *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPObjectFactory_1 *create_LibOrgBouncycastleOpenpgpPGPObjectFactory_1_initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_(LibOrgBouncycastleOpenpgpPGPObjectFactory *outer$);

__attribute__((unused)) static id LibOrgBouncycastleOpenpgpPGPObjectFactory_1_getObject(LibOrgBouncycastleOpenpgpPGPObjectFactory_1 *self);

@implementation LibOrgBouncycastleOpenpgpPGPObjectFactory

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, inArg, fingerPrintCalculator);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)bytes
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)fingerPrintCalculator {
  LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, bytes, fingerPrintCalculator);
  return self;
}

- (id)nextObject {
  id<JavaUtilList> l;
  switch ([((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(in_)) nextPacketTag]) {
    case -1:
    return nil;
    case LibOrgBouncycastleBcpgPacketTags_SIGNATURE:
    l = new_JavaUtilArrayList_init();
    while ([((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(in_)) nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_SIGNATURE) {
      @try {
        [l addWithId:new_LibOrgBouncycastleOpenpgpPGPSignature_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in_)];
      }
      @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"can't create signature object: ", e));
      }
    }
    return new_LibOrgBouncycastleOpenpgpPGPSignatureList_initWithLibOrgBouncycastleOpenpgpPGPSignatureArray_((IOSObjectArray *) cast_check([l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:LibOrgBouncycastleOpenpgpPGPSignature_class_()]], IOSClass_arrayType(LibOrgBouncycastleOpenpgpPGPSignature_class_(), 1)));
    case LibOrgBouncycastleBcpgPacketTags_SECRET_KEY:
    @try {
      return new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(in_, fingerPrintCalculator_);
    }
    @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"can't create secret key object: ", e));
    }
    case LibOrgBouncycastleBcpgPacketTags_PUBLIC_KEY:
    return new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(in_, fingerPrintCalculator_);
    case LibOrgBouncycastleBcpgPacketTags_PUBLIC_SUBKEY:
    @try {
      return LibOrgBouncycastleOpenpgpPGPPublicKeyRing_readSubkeyWithLibOrgBouncycastleBcpgBCPGInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(in_, fingerPrintCalculator_);
    }
    @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"processing error: ", [e getMessage]));
    }
    case LibOrgBouncycastleBcpgPacketTags_COMPRESSED_DATA:
    return new_LibOrgBouncycastleOpenpgpPGPCompressedData_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in_);
    case LibOrgBouncycastleBcpgPacketTags_LITERAL_DATA:
    return new_LibOrgBouncycastleOpenpgpPGPLiteralData_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in_);
    case LibOrgBouncycastleBcpgPacketTags_PUBLIC_KEY_ENC_SESSION:
    case LibOrgBouncycastleBcpgPacketTags_SYMMETRIC_KEY_ENC_SESSION:
    return new_LibOrgBouncycastleOpenpgpPGPEncryptedDataList_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in_);
    case LibOrgBouncycastleBcpgPacketTags_ONE_PASS_SIGNATURE:
    l = new_JavaUtilArrayList_init();
    while ([((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(in_)) nextPacketTag] == LibOrgBouncycastleBcpgPacketTags_ONE_PASS_SIGNATURE) {
      @try {
        [l addWithId:new_LibOrgBouncycastleOpenpgpPGPOnePassSignature_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in_)];
      }
      @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"can't create one pass signature object: ", e));
      }
    }
    return new_LibOrgBouncycastleOpenpgpPGPOnePassSignatureList_initWithLibOrgBouncycastleOpenpgpPGPOnePassSignatureArray_((IOSObjectArray *) cast_check([l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:LibOrgBouncycastleOpenpgpPGPOnePassSignature_class_()]], IOSClass_arrayType(LibOrgBouncycastleOpenpgpPGPOnePassSignature_class_(), 1)));
    case LibOrgBouncycastleBcpgPacketTags_MARKER:
    return new_LibOrgBouncycastleOpenpgpPGPMarker_initWithLibOrgBouncycastleBcpgBCPGInputStream_(in_);
    case LibOrgBouncycastleBcpgPacketTags_EXPERIMENTAL_1:
    case LibOrgBouncycastleBcpgPacketTags_EXPERIMENTAL_2:
    case LibOrgBouncycastleBcpgPacketTags_EXPERIMENTAL_3:
    case LibOrgBouncycastleBcpgPacketTags_EXPERIMENTAL_4:
    return [((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(in_)) readPacket];
  }
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"unknown object in stream: ", [((LibOrgBouncycastleBcpgBCPGInputStream *) nil_chk(in_)) nextPacketTag]));
}

- (id<JavaUtilIterator>)iterator {
  return new_LibOrgBouncycastleOpenpgpPGPObjectFactory_1_initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[1].selector = @selector(initWithByteArray:withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:);
  methods[2].selector = @selector(nextObject);
  methods[3].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LLibOrgBouncycastleBcpgBCPGInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fingerPrintCalculator_", "LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "[BLLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPObjectFactory = { "PGPObjectFactory", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPObjectFactory;
}

@end

void LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPObjectFactory *self, JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  NSObject_init(self);
  self->in_ = new_LibOrgBouncycastleBcpgBCPGInputStream_initWithJavaIoInputStream_(inArg);
  self->fingerPrintCalculator_ = fingerPrintCalculator;
}

LibOrgBouncycastleOpenpgpPGPObjectFactory *new_LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPObjectFactory, initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, inArg, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPObjectFactory *create_LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(JavaIoInputStream *inArg, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPObjectFactory, initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, inArg, fingerPrintCalculator)
}

void LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPObjectFactory *self, IOSByteArray *bytes, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(self, new_JavaIoByteArrayInputStream_initWithByteArray_(bytes), fingerPrintCalculator);
}

LibOrgBouncycastleOpenpgpPGPObjectFactory *new_LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *bytes, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPObjectFactory, initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, bytes, fingerPrintCalculator)
}

LibOrgBouncycastleOpenpgpPGPObjectFactory *create_LibOrgBouncycastleOpenpgpPGPObjectFactory_initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(IOSByteArray *bytes, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPObjectFactory, initWithByteArray_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_, bytes, fingerPrintCalculator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpPGPObjectFactory)

@implementation LibOrgBouncycastleOpenpgpPGPObjectFactory_1

- (instancetype)initWithLibOrgBouncycastleOpenpgpPGPObjectFactory:(LibOrgBouncycastleOpenpgpPGPObjectFactory *)outer$ {
  LibOrgBouncycastleOpenpgpPGPObjectFactory_1_initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_(self, outer$);
  return self;
}

- (jboolean)hasNext {
  if (!triedNext_) {
    triedNext_ = true;
    obj_ = LibOrgBouncycastleOpenpgpPGPObjectFactory_1_getObject(self);
  }
  return obj_ != nil;
}

- (id)next {
  if (![self hasNext]) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  triedNext_ = false;
  return obj_;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot remove element from factory.");
}

- (id)getObject {
  return LibOrgBouncycastleOpenpgpPGPObjectFactory_1_getObject(self);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleOpenpgpPGPObjectFactory:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(getObject);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibOrgBouncycastleOpenpgpPGPObjectFactory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "triedNext_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "obj_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleOpenpgpPGPObjectFactory;", "iterator" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpPGPObjectFactory_1 = { "", "lib.org.bouncycastle.openpgp", ptrTable, methods, fields, 7, 0x8010, 5, 3, 0, -1, 1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpPGPObjectFactory_1;
}

@end

void LibOrgBouncycastleOpenpgpPGPObjectFactory_1_initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_(LibOrgBouncycastleOpenpgpPGPObjectFactory_1 *self, LibOrgBouncycastleOpenpgpPGPObjectFactory *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->triedNext_ = false;
  self->obj_ = nil;
}

LibOrgBouncycastleOpenpgpPGPObjectFactory_1 *new_LibOrgBouncycastleOpenpgpPGPObjectFactory_1_initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_(LibOrgBouncycastleOpenpgpPGPObjectFactory *outer$) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpPGPObjectFactory_1, initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_, outer$)
}

LibOrgBouncycastleOpenpgpPGPObjectFactory_1 *create_LibOrgBouncycastleOpenpgpPGPObjectFactory_1_initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_(LibOrgBouncycastleOpenpgpPGPObjectFactory *outer$) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpPGPObjectFactory_1, initWithLibOrgBouncycastleOpenpgpPGPObjectFactory_, outer$)
}

id LibOrgBouncycastleOpenpgpPGPObjectFactory_1_getObject(LibOrgBouncycastleOpenpgpPGPObjectFactory_1 *self) {
  @try {
    return [self->this$0_ nextObject];
  }
  @catch (JavaIoIOException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPRuntimeOperationException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Iterator failed to get next object: ", [e getMessage]), e);
  }
}
