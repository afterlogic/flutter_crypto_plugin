//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/prng/X931SecureRandomBuilder.java
//

#include "Arrays.h"
#include "BasicEntropySourceProvider.h"
#include "BlockCipher.h"
#include "CryptoServicesRegistrar.h"
#include "EntropySource.h"
#include "EntropySourceProvider.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "Pack.h"
#include "X931RNG.h"
#include "X931SecureRandom.h"
#include "X931SecureRandomBuilder.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder () {
 @public
  JavaSecuritySecureRandom *random_;
  id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider_;
  IOSByteArray *dateTimeVector_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, entropySourceProvider_, id<LibOrgBouncycastleCryptoPrngEntropySourceProvider>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, dateTimeVector_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)entropySource
                                     withBoolean:(jboolean)predictionResistant {
  LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(self, entropySource, predictionResistant);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider:(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider>)entropySourceProvider {
  LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(self, entropySourceProvider);
  return self;
}

- (LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *)setDateTimeVectorWithByteArray:(IOSByteArray *)dateTimeVector {
  self->dateTimeVector_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(dateTimeVector);
  return self;
}

- (LibOrgBouncycastleCryptoPrngX931SecureRandom *)buildWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine
                                                withLibOrgBouncycastleCryptoParamsKeyParameter:(LibOrgBouncycastleCryptoParamsKeyParameter *)key
                                                                                   withBoolean:(jboolean)predictionResistant {
  if (dateTimeVector_ == nil) {
    dateTimeVector_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(engine)) getBlockSize]];
    LibOrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(JavaLangSystem_currentTimeMillis(), dateTimeVector_, 0);
  }
  [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk(engine)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:key];
  return new_LibOrgBouncycastleCryptoPrngX931SecureRandom_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoPrngX931RNG_withBoolean_(random_, new_LibOrgBouncycastleCryptoPrngX931RNG_initWithLibOrgBouncycastleCryptoBlockCipher_withByteArray_withLibOrgBouncycastleCryptoPrngEntropySource_(engine, dateTimeVector_, [((id<LibOrgBouncycastleCryptoPrngEntropySourceProvider>) nil_chk(entropySourceProvider_)) getWithInt:[engine getBlockSize] * 8]), predictionResistant);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoPrngX931SecureRandomBuilder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoPrngX931SecureRandom;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaSecuritySecureRandom:withBoolean:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider:);
  methods[3].selector = @selector(setDateTimeVectorWithByteArray:);
  methods[4].selector = @selector(buildWithLibOrgBouncycastleCryptoBlockCipher:withLibOrgBouncycastleCryptoParamsKeyParameter:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "entropySourceProvider_", "LLibOrgBouncycastleCryptoPrngEntropySourceProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dateTimeVector_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;Z", "LLibOrgBouncycastleCryptoPrngEntropySourceProvider;", "setDateTimeVector", "[B", "build", "LLibOrgBouncycastleCryptoBlockCipher;LLibOrgBouncycastleCryptoParamsKeyParameter;Z" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder = { "X931SecureRandomBuilder", "lib.org.bouncycastle.crypto.prng", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder;
}

@end

void LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_init(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *self) {
  LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(self, LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom(), false);
}

LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, init)
}

LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, init)
}

void LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *self, JavaSecuritySecureRandom *entropySource, jboolean predictionResistant) {
  NSObject_init(self);
  self->random_ = entropySource;
  self->entropySourceProvider_ = new_LibOrgBouncycastleCryptoPrngBasicEntropySourceProvider_initWithJavaSecuritySecureRandom_withBoolean_(self->random_, predictionResistant);
}

LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(JavaSecuritySecureRandom *entropySource, jboolean predictionResistant) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, initWithJavaSecuritySecureRandom_withBoolean_, entropySource, predictionResistant)
}

LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithJavaSecuritySecureRandom_withBoolean_(JavaSecuritySecureRandom *entropySource, jboolean predictionResistant) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, initWithJavaSecuritySecureRandom_withBoolean_, entropySource, predictionResistant)
}

void LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *self, id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider) {
  NSObject_init(self);
  self->random_ = nil;
  self->entropySourceProvider_ = entropySourceProvider;
}

LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *new_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_, entropySourceProvider)
}

LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder *create_LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder_initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_(id<LibOrgBouncycastleCryptoPrngEntropySourceProvider> entropySourceProvider) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder, initWithLibOrgBouncycastleCryptoPrngEntropySourceProvider_, entropySourceProvider)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoPrngX931SecureRandomBuilder)
