//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/generators/DHParametersHelper.java
//

#include "BigIntegers.h"
#include "DHParametersHelper.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "WNafUtil.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

inline JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper, ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_get_TWO(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper, TWO, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper)

@implementation LibOrgBouncycastleCryptoGeneratorsDHParametersHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)generateSafePrimesWithInt:(jint)size
                                      withInt:(jint)certainty
                 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_generateSafePrimesWithInt_withInt_withJavaSecuritySecureRandom_(size, certainty, random);
}

+ (JavaMathBigInteger *)selectGeneratorWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                       withJavaMathBigInteger:(JavaMathBigInteger *)q
                                 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_selectGeneratorWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(p, q, random);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x8, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateSafePrimesWithInt:withInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(selectGeneratorWithJavaMathBigInteger:withJavaMathBigInteger:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "generateSafePrimes", "IILJavaSecuritySecureRandom;", "selectGenerator", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaSecuritySecureRandom;", &LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_ONE, &LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_TWO };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoGeneratorsDHParametersHelper = { "DHParametersHelper", "lib.org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoGeneratorsDHParametersHelper;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoGeneratorsDHParametersHelper class]) {
    LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_TWO = JavaMathBigInteger_valueOfWithLong_(2);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper)
  }
}

@end

void LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_init(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoGeneratorsDHParametersHelper *new_LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper, init)
}

LibOrgBouncycastleCryptoGeneratorsDHParametersHelper *create_LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper, init)
}

IOSObjectArray *LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_generateSafePrimesWithInt_withInt_withJavaSecuritySecureRandom_(jint size, jint certainty, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_initialize();
  JavaMathBigInteger *p;
  JavaMathBigInteger *q;
  jint qLength = size - 1;
  jint minWeight = JreURShift32(size, 2);
  for (; ; ) {
    q = LibOrgBouncycastleUtilBigIntegers_createRandomPrimeWithInt_withInt_withJavaSecuritySecureRandom_(qLength, 2, random);
    p = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(q)) shiftLeftWithInt:1])) addWithJavaMathBigInteger:LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_ONE];
    if (![((JavaMathBigInteger *) nil_chk(p)) isProbablePrimeWithInt:certainty]) {
      continue;
    }
    if (certainty > 2 && ![q isProbablePrimeWithInt:certainty - 2]) {
      continue;
    }
    if (LibOrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(p) < minWeight) {
      continue;
    }
    break;
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ p, q } count:2 type:JavaMathBigInteger_class_()];
}

JavaMathBigInteger *LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_selectGeneratorWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaSecuritySecureRandom *random) {
  LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_initialize();
  JavaMathBigInteger *pMinusTwo = [((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_TWO];
  JavaMathBigInteger *g;
  do {
    JavaMathBigInteger *h = LibOrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_TWO, pMinusTwo, random);
    g = [((JavaMathBigInteger *) nil_chk(h)) modPowWithJavaMathBigInteger:LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_TWO withJavaMathBigInteger:p];
  }
  while ([((JavaMathBigInteger *) nil_chk(g)) isEqual:LibOrgBouncycastleCryptoGeneratorsDHParametersHelper_ONE]);
  return g;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoGeneratorsDHParametersHelper)
