//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/QTESLASecurityCategory.java
//

#ifndef QTESLASecurityCategory_H
#define QTESLASecurityCategory_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory : NSObject
@property (readonly, class) jint HEURISTIC_I NS_SWIFT_NAME(HEURISTIC_I);
@property (readonly, class) jint HEURISTIC_III_SIZE NS_SWIFT_NAME(HEURISTIC_III_SIZE);
@property (readonly, class) jint HEURISTIC_III_SPEED NS_SWIFT_NAME(HEURISTIC_III_SPEED);
@property (readonly, class) jint PROVABLY_SECURE_I NS_SWIFT_NAME(PROVABLY_SECURE_I);
@property (readonly, class) jint PROVABLY_SECURE_III NS_SWIFT_NAME(PROVABLY_SECURE_III);

+ (jint)HEURISTIC_I;

+ (jint)HEURISTIC_III_SIZE;

+ (jint)HEURISTIC_III_SPEED;

+ (jint)PROVABLY_SECURE_I;

+ (jint)PROVABLY_SECURE_III;

#pragma mark Public

+ (NSString *)getNameWithInt:(jint)securityCategory;

#pragma mark Package-Private

+ (jint)getPrivateSizeWithInt:(jint)securityCategory;

+ (jint)getPublicSizeWithInt:(jint)securityCategory;

+ (jint)getSignatureSizeWithInt:(jint)securityCategory;

+ (void)validateWithInt:(jint)securityCategory;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory)

inline jint LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_get_HEURISTIC_I(void);
#define LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_I 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory, HEURISTIC_I, jint)

inline jint LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_get_HEURISTIC_III_SIZE(void);
#define LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SIZE 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory, HEURISTIC_III_SIZE, jint)

inline jint LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_get_HEURISTIC_III_SPEED(void);
#define LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_HEURISTIC_III_SPEED 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory, HEURISTIC_III_SPEED, jint)

inline jint LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_get_PROVABLY_SECURE_I(void);
#define LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_I 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory, PROVABLY_SECURE_I, jint)

inline jint LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_get_PROVABLY_SECURE_III(void);
#define LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_III 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory, PROVABLY_SECURE_III, jint)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_validateWithInt_(jint securityCategory);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getPrivateSizeWithInt_(jint securityCategory);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getPublicSizeWithInt_(jint securityCategory);

FOUNDATION_EXPORT jint LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getSignatureSizeWithInt_(jint securityCategory);

FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getNameWithInt_(jint securityCategory);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // QTESLASecurityCategory_H
