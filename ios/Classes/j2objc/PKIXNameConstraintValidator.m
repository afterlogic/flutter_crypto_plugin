//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/PKIXNameConstraintValidator.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "Arrays.h"
#include "DERIA5String.h"
#include "GeneralName.h"
#include "GeneralSubtree.h"
#include "Hex.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "NameConstraintValidatorException.h"
#include "OtherName.h"
#include "PKIXNameConstraintValidator.h"
#include "Strings.h"
#include "X500Name.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator () {
 @public
  id<JavaUtilSet> excludedSubtreesDN_;
  id<JavaUtilSet> excludedSubtreesDNS_;
  id<JavaUtilSet> excludedSubtreesEmail_;
  id<JavaUtilSet> excludedSubtreesURI_;
  id<JavaUtilSet> excludedSubtreesIP_;
  id<JavaUtilSet> excludedSubtreesOtherName_;
  id<JavaUtilSet> permittedSubtreesDN_;
  id<JavaUtilSet> permittedSubtreesDNS_;
  id<JavaUtilSet> permittedSubtreesEmail_;
  id<JavaUtilSet> permittedSubtreesURI_;
  id<JavaUtilSet> permittedSubtreesIP_;
  id<JavaUtilSet> permittedSubtreesOtherName_;
}

- (void)checkPermittedDNWithLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)dns;

- (void)checkExcludedDNWithLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)dns;

+ (jboolean)withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)dns
                           withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)subtree;

- (void)checkPermittedDNWithJavaUtilSet:(id<JavaUtilSet>)permitted
 withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)dns;

- (void)checkExcludedDNWithJavaUtilSet:(id<JavaUtilSet>)excluded
withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)dns;

- (id<JavaUtilSet>)intersectDNWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withJavaUtilSet:(id<JavaUtilSet>)dns;

- (id<JavaUtilSet>)unionDNWithJavaUtilSet:(id<JavaUtilSet>)excluded
   withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)dn;

- (id<JavaUtilSet>)intersectOtherNameWithJavaUtilSet:(id<JavaUtilSet>)permitted
                                     withJavaUtilSet:(id<JavaUtilSet>)otherNames;

- (id<JavaUtilSet>)unionOtherNameWithJavaUtilSet:(id<JavaUtilSet>)permitted
         withLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)otherName;

- (id<JavaUtilSet>)intersectEmailWithJavaUtilSet:(id<JavaUtilSet>)permitted
                                 withJavaUtilSet:(id<JavaUtilSet>)emails;

- (id<JavaUtilSet>)unionEmailWithJavaUtilSet:(id<JavaUtilSet>)excluded
                                withNSString:(NSString *)email;

- (id<JavaUtilSet>)intersectIPWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withJavaUtilSet:(id<JavaUtilSet>)ips;

- (id<JavaUtilSet>)unionIPWithJavaUtilSet:(id<JavaUtilSet>)excluded
                            withByteArray:(IOSByteArray *)ip;

- (id<JavaUtilSet>)unionIPRangeWithByteArray:(IOSByteArray *)ipWithSubmask1
                               withByteArray:(IOSByteArray *)ipWithSubmask2;

- (id<JavaUtilSet>)intersectIPRangeWithByteArray:(IOSByteArray *)ipWithSubmask1
                                   withByteArray:(IOSByteArray *)ipWithSubmask2;

- (IOSByteArray *)ipWithSubnetMaskWithByteArray:(IOSByteArray *)ip
                                  withByteArray:(IOSByteArray *)subnetMask;

- (IOSObjectArray *)extractIPsAndSubnetMasksWithByteArray:(IOSByteArray *)ipWithSubmask1
                                            withByteArray:(IOSByteArray *)ipWithSubmask2;

- (IOSObjectArray *)minMaxIPsWithByteArray:(IOSByteArray *)ip1
                             withByteArray:(IOSByteArray *)subnetmask1
                             withByteArray:(IOSByteArray *)ip2
                             withByteArray:(IOSByteArray *)subnetmask2;

- (void)checkPermittedEmailWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withNSString:(NSString *)email;

- (void)checkPermittedOtherNameWithJavaUtilSet:(id<JavaUtilSet>)permitted
       withLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)name;

- (void)checkExcludedOtherNameWithJavaUtilSet:(id<JavaUtilSet>)excluded
      withLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)name;

- (void)checkExcludedEmailWithJavaUtilSet:(id<JavaUtilSet>)excluded
                             withNSString:(NSString *)email;

- (void)checkPermittedIPWithJavaUtilSet:(id<JavaUtilSet>)permitted
                          withByteArray:(IOSByteArray *)ip;

- (void)checkExcludedIPWithJavaUtilSet:(id<JavaUtilSet>)excluded
                         withByteArray:(IOSByteArray *)ip;

- (jboolean)isIPConstrainedWithByteArray:(IOSByteArray *)ip
                           withByteArray:(IOSByteArray *)constraint;

- (jboolean)otherNameIsConstrainedWithLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)name
                                  withLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)constraint;

- (jboolean)emailIsConstrainedWithNSString:(NSString *)email
                              withNSString:(NSString *)constraint;

- (jboolean)withinDomainWithNSString:(NSString *)testDomain
                        withNSString:(NSString *)domain;

- (void)checkPermittedDNSWithJavaUtilSet:(id<JavaUtilSet>)permitted
                            withNSString:(NSString *)dns;

- (void)checkExcludedDNSWithJavaUtilSet:(id<JavaUtilSet>)excluded
                           withNSString:(NSString *)dns;

- (void)unionEmailWithNSString:(NSString *)email1
                  withNSString:(NSString *)email2
               withJavaUtilSet:(id<JavaUtilSet>)union_;

- (void)unionURIWithNSString:(NSString *)email1
                withNSString:(NSString *)email2
             withJavaUtilSet:(id<JavaUtilSet>)union_;

- (id<JavaUtilSet>)intersectDNSWithJavaUtilSet:(id<JavaUtilSet>)permitted
                               withJavaUtilSet:(id<JavaUtilSet>)dnss;

- (id<JavaUtilSet>)unionDNSWithJavaUtilSet:(id<JavaUtilSet>)excluded
                              withNSString:(NSString *)dns;

- (void)intersectEmailWithNSString:(NSString *)email1
                      withNSString:(NSString *)email2
                   withJavaUtilSet:(id<JavaUtilSet>)intersect;

- (void)checkExcludedURIWithJavaUtilSet:(id<JavaUtilSet>)excluded
                           withNSString:(NSString *)uri;

- (id<JavaUtilSet>)intersectURIWithJavaUtilSet:(id<JavaUtilSet>)permitted
                               withJavaUtilSet:(id<JavaUtilSet>)uris;

- (id<JavaUtilSet>)unionURIWithJavaUtilSet:(id<JavaUtilSet>)excluded
                              withNSString:(NSString *)uri;

- (void)intersectURIWithNSString:(NSString *)email1
                    withNSString:(NSString *)email2
                 withJavaUtilSet:(id<JavaUtilSet>)intersect;

- (void)checkPermittedURIWithJavaUtilSet:(id<JavaUtilSet>)permitted
                            withNSString:(NSString *)uri;

- (jboolean)isUriConstrainedWithNSString:(NSString *)uri
                            withNSString:(NSString *)constraint;

+ (NSString *)extractHostFromURLWithNSString:(NSString *)url;

- (NSString *)extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)name;

+ (IOSByteArray *)maxWithByteArray:(IOSByteArray *)ip1
                     withByteArray:(IOSByteArray *)ip2;

+ (IOSByteArray *)minWithByteArray:(IOSByteArray *)ip1
                     withByteArray:(IOSByteArray *)ip2;

+ (jint)compareToWithByteArray:(IOSByteArray *)ip1
                 withByteArray:(IOSByteArray *)ip2;

+ (IOSByteArray *)or__WithByteArray:(IOSByteArray *)ip1
                      withByteArray:(IOSByteArray *)ip2;

- (jint)hashCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)coll;

- (jboolean)collectionsAreEqualWithJavaUtilCollection:(id<JavaUtilCollection>)coll1
                               withJavaUtilCollection:(id<JavaUtilCollection>)coll2;

- (jboolean)equalsWithId:(id)o1
                  withId:(id)o2;

- (NSString *)stringifyIPWithByteArray:(IOSByteArray *)ip;

- (NSString *)stringifyIPCollectionWithJavaUtilSet:(id<JavaUtilSet>)ips;

- (NSString *)stringifyOtherNameCollectionWithJavaUtilSet:(id<JavaUtilSet>)otherNames;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, excludedSubtreesDN_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, excludedSubtreesDNS_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, excludedSubtreesEmail_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, excludedSubtreesURI_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, excludedSubtreesIP_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, excludedSubtreesOtherName_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, permittedSubtreesDN_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, permittedSubtreesDNS_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, permittedSubtreesEmail_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, permittedSubtreesURI_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, permittedSubtreesIP_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, permittedSubtreesOtherName_, id<JavaUtilSet>)

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, LibOrgBouncycastleAsn1X500X500Name *dns);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, LibOrgBouncycastleAsn1X500X500Name *dns);

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *dns, LibOrgBouncycastleAsn1ASN1Sequence *subtree);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, LibOrgBouncycastleAsn1ASN1Sequence *dns);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, LibOrgBouncycastleAsn1ASN1Sequence *dns);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectDNWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> dns);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, LibOrgBouncycastleAsn1ASN1Sequence *dn);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectOtherNameWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> otherNames);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, LibOrgBouncycastleAsn1X509OtherName *otherName);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectEmailWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> emails);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionEmailWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *email);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectIPWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> ips);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionIPWithJavaUtilSet_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, IOSByteArray *ip);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionIPRangeWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectIPRangeWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_ipWithSubnetMaskWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ip, IOSByteArray *subnetMask);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractIPsAndSubnetMasksWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2);

__attribute__((unused)) static IOSObjectArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_minMaxIPsWithByteArray_withByteArray_withByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ip1, IOSByteArray *subnetmask1, IOSByteArray *ip2, IOSByteArray *subnetmask2);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedEmailWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *email);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, LibOrgBouncycastleAsn1X509OtherName *name);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, LibOrgBouncycastleAsn1X509OtherName *name);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedEmailWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *email);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedIPWithJavaUtilSet_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, IOSByteArray *ip);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedIPWithJavaUtilSet_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, IOSByteArray *ip);

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ip, IOSByteArray *constraint);

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_otherNameIsConstrainedWithLibOrgBouncycastleAsn1X509OtherName_withLibOrgBouncycastleAsn1X509OtherName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, LibOrgBouncycastleAsn1X509OtherName *name, LibOrgBouncycastleAsn1X509OtherName *constraint);

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email, NSString *constraint);

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *testDomain, NSString *domain);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNSWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *dns);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNSWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *dns);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionEmailWithNSString_withNSString_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> union_);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionURIWithNSString_withNSString_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> union_);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectDNSWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> dnss);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionDNSWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *dns);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectEmailWithNSString_withNSString_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> intersect);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedURIWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *uri);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectURIWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> uris);

__attribute__((unused)) static id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionURIWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *uri);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectURIWithNSString_withNSString_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> intersect);

__attribute__((unused)) static void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedURIWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *uri);

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *uri, NSString *constraint);

__attribute__((unused)) static NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractHostFromURLWithNSString_(NSString *url);

__attribute__((unused)) static NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, LibOrgBouncycastleAsn1X509GeneralName *name);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_maxWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_minWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static jint LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_compareToWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_or__WithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static jint LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilCollection> coll);

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilCollection> coll1, id<JavaUtilCollection> coll2);

__attribute__((unused)) static jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_equalsWithId_withId_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id o1, id o2);

__attribute__((unused)) static NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPWithByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ip);

__attribute__((unused)) static NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> ips);

__attribute__((unused)) static NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyOtherNameCollectionWithJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> otherNames);

@implementation LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)checkPermittedWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)name {
  {
    IOSByteArray *ip;
    switch ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(name)) getTagNo]) {
      case LibOrgBouncycastleAsn1X509GeneralName_otherName:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(self, permittedSubtreesOtherName_, LibOrgBouncycastleAsn1X509OtherName_getInstanceWithId_([name getName]));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_rfc822Name:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedEmailWithJavaUtilSet_withNSString_(self, permittedSubtreesEmail_, LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, name));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_dNSName:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNSWithJavaUtilSet_withNSString_(self, permittedSubtreesDNS_, [((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(LibOrgBouncycastleAsn1DERIA5String_getInstanceWithId_([name getName]))) getString]);
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_directoryName:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNWithLibOrgBouncycastleAsn1X500X500Name_(self, LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_([name getName]));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedURIWithJavaUtilSet_withNSString_(self, permittedSubtreesURI_, [((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(LibOrgBouncycastleAsn1DERIA5String_getInstanceWithId_([name getName]))) getString]);
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_iPAddress:
      ip = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([name getName]))) getOctets];
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedIPWithJavaUtilSet_withByteArray_(self, permittedSubtreesIP_, ip);
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Unknown tag encountered: ", [name getTagNo]));
    }
  }
}

- (void)checkExcludedWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)name {
  {
    IOSByteArray *ip;
    switch ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(name)) getTagNo]) {
      case LibOrgBouncycastleAsn1X509GeneralName_otherName:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(self, excludedSubtreesOtherName_, LibOrgBouncycastleAsn1X509OtherName_getInstanceWithId_([name getName]));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_rfc822Name:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedEmailWithJavaUtilSet_withNSString_(self, excludedSubtreesEmail_, LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, name));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_dNSName:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNSWithJavaUtilSet_withNSString_(self, excludedSubtreesDNS_, [((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(LibOrgBouncycastleAsn1DERIA5String_getInstanceWithId_([name getName]))) getString]);
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_directoryName:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNWithLibOrgBouncycastleAsn1X500X500Name_(self, LibOrgBouncycastleAsn1X500X500Name_getInstanceWithId_([name getName]));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedURIWithJavaUtilSet_withNSString_(self, excludedSubtreesURI_, [((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(LibOrgBouncycastleAsn1DERIA5String_getInstanceWithId_([name getName]))) getString]);
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_iPAddress:
      ip = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([name getName]))) getOctets];
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedIPWithJavaUtilSet_withByteArray_(self, excludedSubtreesIP_, ip);
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Unknown tag encountered: ", [name getTagNo]));
    }
  }
}

- (void)intersectPermittedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtree:(LibOrgBouncycastleAsn1X509GeneralSubtree *)permitted {
  [self intersectPermittedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtreeArray:[IOSObjectArray newArrayWithObjects:(id[]){ permitted } count:1 type:LibOrgBouncycastleAsn1X509GeneralSubtree_class_()]];
}

- (void)intersectPermittedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtreeArray:(IOSObjectArray *)permitted {
  id<JavaUtilMap> subtreesMap = new_JavaUtilHashMap_init();
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(permitted))->size_; i++) {
    LibOrgBouncycastleAsn1X509GeneralSubtree *subtree = IOSObjectArray_Get(permitted, i);
    JavaLangInteger *tagNo = LibOrgBouncycastleUtilIntegers_valueOfWithInt_([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk([((LibOrgBouncycastleAsn1X509GeneralSubtree *) nil_chk(subtree)) getBase])) getTagNo]);
    if ([subtreesMap getWithId:tagNo] == nil) {
      (void) [subtreesMap putWithId:tagNo withId:new_JavaUtilHashSet_init()];
    }
    [((id<JavaUtilSet>) nil_chk(((id<JavaUtilSet>) cast_check([subtreesMap getWithId:tagNo], JavaUtilSet_class_())))) addWithId:subtree];
  }
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([subtreesMap entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([it next], JavaUtilMap_Entry_class_());
    jint nameType = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [JavaLangInteger class])))) intValue];
    switch (nameType) {
      case LibOrgBouncycastleAsn1X509GeneralName_otherName:
      permittedSubtreesOtherName_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectOtherNameWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesOtherName_, (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_rfc822Name:
      permittedSubtreesEmail_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectEmailWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesEmail_, (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_dNSName:
      permittedSubtreesDNS_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectDNSWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesDNS_, (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_directoryName:
      permittedSubtreesDN_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectDNWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesDN_, (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
      permittedSubtreesURI_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectURIWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesURI_, (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case LibOrgBouncycastleAsn1X509GeneralName_iPAddress:
      permittedSubtreesIP_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectIPWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesIP_, (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Unknown tag encountered: ", nameType));
    }
  }
}

- (void)intersectEmptyPermittedSubtreeWithInt:(jint)nameType {
  switch (nameType) {
    case LibOrgBouncycastleAsn1X509GeneralName_otherName:
    permittedSubtreesOtherName_ = new_JavaUtilHashSet_init();
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_rfc822Name:
    permittedSubtreesEmail_ = new_JavaUtilHashSet_init();
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_dNSName:
    permittedSubtreesDNS_ = new_JavaUtilHashSet_init();
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_directoryName:
    permittedSubtreesDN_ = new_JavaUtilHashSet_init();
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
    permittedSubtreesURI_ = new_JavaUtilHashSet_init();
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_iPAddress:
    permittedSubtreesIP_ = new_JavaUtilHashSet_init();
    break;
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Unknown tag encountered: ", nameType));
  }
}

- (void)addExcludedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtree:(LibOrgBouncycastleAsn1X509GeneralSubtree *)subtree {
  LibOrgBouncycastleAsn1X509GeneralName *base = [((LibOrgBouncycastleAsn1X509GeneralSubtree *) nil_chk(subtree)) getBase];
  switch ([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(base)) getTagNo]) {
    case LibOrgBouncycastleAsn1X509GeneralName_otherName:
    excludedSubtreesOtherName_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(self, excludedSubtreesOtherName_, LibOrgBouncycastleAsn1X509OtherName_getInstanceWithId_([base getName]));
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_rfc822Name:
    excludedSubtreesEmail_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionEmailWithJavaUtilSet_withNSString_(self, excludedSubtreesEmail_, LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, base));
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_dNSName:
    excludedSubtreesDNS_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionDNSWithJavaUtilSet_withNSString_(self, excludedSubtreesDNS_, LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, base));
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_directoryName:
    excludedSubtreesDN_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(self, excludedSubtreesDN_, (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([base getName])) toASN1Primitive], [LibOrgBouncycastleAsn1ASN1Sequence class]));
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
    excludedSubtreesURI_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionURIWithJavaUtilSet_withNSString_(self, excludedSubtreesURI_, LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, base));
    break;
    case LibOrgBouncycastleAsn1X509GeneralName_iPAddress:
    excludedSubtreesIP_ = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionIPWithJavaUtilSet_withByteArray_(self, excludedSubtreesIP_, [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([base getName]))) getOctets]);
    break;
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Unknown tag encountered: ", [base getTagNo]));
  }
}

- (NSUInteger)hash {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, excludedSubtreesDN_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, excludedSubtreesDNS_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, excludedSubtreesEmail_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, excludedSubtreesIP_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, excludedSubtreesURI_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, excludedSubtreesOtherName_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, permittedSubtreesDN_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, permittedSubtreesDNS_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, permittedSubtreesEmail_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, permittedSubtreesIP_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, permittedSubtreesURI_) + LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, permittedSubtreesOtherName_);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator class]])) {
    return false;
  }
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *constraintValidator = (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *) cast_chk(o, [LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator class]);
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, ((LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *) nil_chk(constraintValidator))->excludedSubtreesDN_, excludedSubtreesDN_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->excludedSubtreesDNS_, excludedSubtreesDNS_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->excludedSubtreesEmail_, excludedSubtreesEmail_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->excludedSubtreesIP_, excludedSubtreesIP_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->excludedSubtreesURI_, excludedSubtreesURI_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->excludedSubtreesOtherName_, excludedSubtreesOtherName_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->permittedSubtreesDN_, permittedSubtreesDN_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->permittedSubtreesDNS_, permittedSubtreesDNS_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->permittedSubtreesEmail_, permittedSubtreesEmail_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->permittedSubtreesIP_, permittedSubtreesIP_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->permittedSubtreesURI_, permittedSubtreesURI_) && LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, constraintValidator->permittedSubtreesOtherName_, permittedSubtreesOtherName_);
}

- (NSString *)description {
  NSString *temp = @"";
  (void) JreStrAppendStrong(&temp, "$", @"permitted:\n");
  if (permittedSubtreesDN_ != nil) {
    (void) JreStrAppendStrong(&temp, "$", @"DN:\n");
    (void) JreStrAppendStrong(&temp, "$C", [permittedSubtreesDN_ description], 0x000a);
  }
  if (permittedSubtreesDNS_ != nil) {
    (void) JreStrAppendStrong(&temp, "$", @"DNS:\n");
    (void) JreStrAppendStrong(&temp, "$C", [permittedSubtreesDNS_ description], 0x000a);
  }
  if (permittedSubtreesEmail_ != nil) {
    (void) JreStrAppendStrong(&temp, "$", @"Email:\n");
    (void) JreStrAppendStrong(&temp, "$C", [permittedSubtreesEmail_ description], 0x000a);
  }
  if (permittedSubtreesURI_ != nil) {
    (void) JreStrAppendStrong(&temp, "$", @"URI:\n");
    (void) JreStrAppendStrong(&temp, "$C", [permittedSubtreesURI_ description], 0x000a);
  }
  if (permittedSubtreesIP_ != nil) {
    (void) JreStrAppendStrong(&temp, "$", @"IP:\n");
    (void) JreStrAppendStrong(&temp, "$C", LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(self, permittedSubtreesIP_), 0x000a);
  }
  if (permittedSubtreesOtherName_ != nil) {
    (void) JreStrAppendStrong(&temp, "$", @"OtherName:\n");
    (void) JreStrAppendStrong(&temp, "$C", LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyOtherNameCollectionWithJavaUtilSet_(self, permittedSubtreesOtherName_), 0x000a);
  }
  (void) JreStrAppendStrong(&temp, "$", @"excluded:\n");
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesDN_)) isEmpty]) {
    (void) JreStrAppendStrong(&temp, "$", @"DN:\n");
    (void) JreStrAppendStrong(&temp, "$C", [((id<JavaUtilSet>) nil_chk(excludedSubtreesDN_)) description], 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesDNS_)) isEmpty]) {
    (void) JreStrAppendStrong(&temp, "$", @"DNS:\n");
    (void) JreStrAppendStrong(&temp, "$C", [((id<JavaUtilSet>) nil_chk(excludedSubtreesDNS_)) description], 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesEmail_)) isEmpty]) {
    (void) JreStrAppendStrong(&temp, "$", @"Email:\n");
    (void) JreStrAppendStrong(&temp, "$C", [((id<JavaUtilSet>) nil_chk(excludedSubtreesEmail_)) description], 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesURI_)) isEmpty]) {
    (void) JreStrAppendStrong(&temp, "$", @"URI:\n");
    (void) JreStrAppendStrong(&temp, "$C", [((id<JavaUtilSet>) nil_chk(excludedSubtreesURI_)) description], 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesIP_)) isEmpty]) {
    (void) JreStrAppendStrong(&temp, "$", @"IP:\n");
    (void) JreStrAppendStrong(&temp, "$C", LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(self, excludedSubtreesIP_), 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesOtherName_)) isEmpty]) {
    (void) JreStrAppendStrong(&temp, "$", @"OtherName:\n");
    (void) JreStrAppendStrong(&temp, "$C", LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyOtherNameCollectionWithJavaUtilSet_(self, excludedSubtreesOtherName_), 0x000a);
  }
  return temp;
}

- (void)checkPermittedDNWithLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)dns {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNWithLibOrgBouncycastleAsn1X500X500Name_(self, dns);
}

- (void)checkExcludedDNWithLibOrgBouncycastleAsn1X500X500Name:(LibOrgBouncycastleAsn1X500X500Name *)dns {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNWithLibOrgBouncycastleAsn1X500X500Name_(self, dns);
}

+ (jboolean)withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)dns
                           withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)subtree {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(dns, subtree);
}

- (void)checkPermittedDNWithJavaUtilSet:(id<JavaUtilSet>)permitted
 withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)dns {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(self, permitted, dns);
}

- (void)checkExcludedDNWithJavaUtilSet:(id<JavaUtilSet>)excluded
withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)dns {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(self, excluded, dns);
}

- (id<JavaUtilSet>)intersectDNWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withJavaUtilSet:(id<JavaUtilSet>)dns {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectDNWithJavaUtilSet_withJavaUtilSet_(self, permitted, dns);
}

- (id<JavaUtilSet>)unionDNWithJavaUtilSet:(id<JavaUtilSet>)excluded
   withLibOrgBouncycastleAsn1ASN1Sequence:(LibOrgBouncycastleAsn1ASN1Sequence *)dn {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(self, excluded, dn);
}

- (id<JavaUtilSet>)intersectOtherNameWithJavaUtilSet:(id<JavaUtilSet>)permitted
                                     withJavaUtilSet:(id<JavaUtilSet>)otherNames {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectOtherNameWithJavaUtilSet_withJavaUtilSet_(self, permitted, otherNames);
}

- (id<JavaUtilSet>)unionOtherNameWithJavaUtilSet:(id<JavaUtilSet>)permitted
         withLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)otherName {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(self, permitted, otherName);
}

- (id<JavaUtilSet>)intersectEmailWithJavaUtilSet:(id<JavaUtilSet>)permitted
                                 withJavaUtilSet:(id<JavaUtilSet>)emails {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectEmailWithJavaUtilSet_withJavaUtilSet_(self, permitted, emails);
}

- (id<JavaUtilSet>)unionEmailWithJavaUtilSet:(id<JavaUtilSet>)excluded
                                withNSString:(NSString *)email {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionEmailWithJavaUtilSet_withNSString_(self, excluded, email);
}

- (id<JavaUtilSet>)intersectIPWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withJavaUtilSet:(id<JavaUtilSet>)ips {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectIPWithJavaUtilSet_withJavaUtilSet_(self, permitted, ips);
}

- (id<JavaUtilSet>)unionIPWithJavaUtilSet:(id<JavaUtilSet>)excluded
                            withByteArray:(IOSByteArray *)ip {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionIPWithJavaUtilSet_withByteArray_(self, excluded, ip);
}

- (id<JavaUtilSet>)unionIPRangeWithByteArray:(IOSByteArray *)ipWithSubmask1
                               withByteArray:(IOSByteArray *)ipWithSubmask2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionIPRangeWithByteArray_withByteArray_(self, ipWithSubmask1, ipWithSubmask2);
}

- (id<JavaUtilSet>)intersectIPRangeWithByteArray:(IOSByteArray *)ipWithSubmask1
                                   withByteArray:(IOSByteArray *)ipWithSubmask2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectIPRangeWithByteArray_withByteArray_(self, ipWithSubmask1, ipWithSubmask2);
}

- (IOSByteArray *)ipWithSubnetMaskWithByteArray:(IOSByteArray *)ip
                                  withByteArray:(IOSByteArray *)subnetMask {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_ipWithSubnetMaskWithByteArray_withByteArray_(self, ip, subnetMask);
}

- (IOSObjectArray *)extractIPsAndSubnetMasksWithByteArray:(IOSByteArray *)ipWithSubmask1
                                            withByteArray:(IOSByteArray *)ipWithSubmask2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractIPsAndSubnetMasksWithByteArray_withByteArray_(self, ipWithSubmask1, ipWithSubmask2);
}

- (IOSObjectArray *)minMaxIPsWithByteArray:(IOSByteArray *)ip1
                             withByteArray:(IOSByteArray *)subnetmask1
                             withByteArray:(IOSByteArray *)ip2
                             withByteArray:(IOSByteArray *)subnetmask2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_minMaxIPsWithByteArray_withByteArray_withByteArray_withByteArray_(self, ip1, subnetmask1, ip2, subnetmask2);
}

- (void)checkPermittedEmailWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withNSString:(NSString *)email {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedEmailWithJavaUtilSet_withNSString_(self, permitted, email);
}

- (void)checkPermittedOtherNameWithJavaUtilSet:(id<JavaUtilSet>)permitted
       withLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)name {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(self, permitted, name);
}

- (void)checkExcludedOtherNameWithJavaUtilSet:(id<JavaUtilSet>)excluded
      withLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)name {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(self, excluded, name);
}

- (void)checkExcludedEmailWithJavaUtilSet:(id<JavaUtilSet>)excluded
                             withNSString:(NSString *)email {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedEmailWithJavaUtilSet_withNSString_(self, excluded, email);
}

- (void)checkPermittedIPWithJavaUtilSet:(id<JavaUtilSet>)permitted
                          withByteArray:(IOSByteArray *)ip {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedIPWithJavaUtilSet_withByteArray_(self, permitted, ip);
}

- (void)checkExcludedIPWithJavaUtilSet:(id<JavaUtilSet>)excluded
                         withByteArray:(IOSByteArray *)ip {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedIPWithJavaUtilSet_withByteArray_(self, excluded, ip);
}

- (jboolean)isIPConstrainedWithByteArray:(IOSByteArray *)ip
                           withByteArray:(IOSByteArray *)constraint {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(self, ip, constraint);
}

- (jboolean)otherNameIsConstrainedWithLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)name
                                  withLibOrgBouncycastleAsn1X509OtherName:(LibOrgBouncycastleAsn1X509OtherName *)constraint {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_otherNameIsConstrainedWithLibOrgBouncycastleAsn1X509OtherName_withLibOrgBouncycastleAsn1X509OtherName_(self, name, constraint);
}

- (jboolean)emailIsConstrainedWithNSString:(NSString *)email
                              withNSString:(NSString *)constraint {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(self, email, constraint);
}

- (jboolean)withinDomainWithNSString:(NSString *)testDomain
                        withNSString:(NSString *)domain {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, testDomain, domain);
}

- (void)checkPermittedDNSWithJavaUtilSet:(id<JavaUtilSet>)permitted
                            withNSString:(NSString *)dns {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNSWithJavaUtilSet_withNSString_(self, permitted, dns);
}

- (void)checkExcludedDNSWithJavaUtilSet:(id<JavaUtilSet>)excluded
                           withNSString:(NSString *)dns {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNSWithJavaUtilSet_withNSString_(self, excluded, dns);
}

- (void)unionEmailWithNSString:(NSString *)email1
                  withNSString:(NSString *)email2
               withJavaUtilSet:(id<JavaUtilSet>)union_ {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionEmailWithNSString_withNSString_withJavaUtilSet_(self, email1, email2, union_);
}

- (void)unionURIWithNSString:(NSString *)email1
                withNSString:(NSString *)email2
             withJavaUtilSet:(id<JavaUtilSet>)union_ {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionURIWithNSString_withNSString_withJavaUtilSet_(self, email1, email2, union_);
}

- (id<JavaUtilSet>)intersectDNSWithJavaUtilSet:(id<JavaUtilSet>)permitted
                               withJavaUtilSet:(id<JavaUtilSet>)dnss {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectDNSWithJavaUtilSet_withJavaUtilSet_(self, permitted, dnss);
}

- (id<JavaUtilSet>)unionDNSWithJavaUtilSet:(id<JavaUtilSet>)excluded
                              withNSString:(NSString *)dns {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionDNSWithJavaUtilSet_withNSString_(self, excluded, dns);
}

- (void)intersectEmailWithNSString:(NSString *)email1
                      withNSString:(NSString *)email2
                   withJavaUtilSet:(id<JavaUtilSet>)intersect {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectEmailWithNSString_withNSString_withJavaUtilSet_(self, email1, email2, intersect);
}

- (void)checkExcludedURIWithJavaUtilSet:(id<JavaUtilSet>)excluded
                           withNSString:(NSString *)uri {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedURIWithJavaUtilSet_withNSString_(self, excluded, uri);
}

- (id<JavaUtilSet>)intersectURIWithJavaUtilSet:(id<JavaUtilSet>)permitted
                               withJavaUtilSet:(id<JavaUtilSet>)uris {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectURIWithJavaUtilSet_withJavaUtilSet_(self, permitted, uris);
}

- (id<JavaUtilSet>)unionURIWithJavaUtilSet:(id<JavaUtilSet>)excluded
                              withNSString:(NSString *)uri {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionURIWithJavaUtilSet_withNSString_(self, excluded, uri);
}

- (void)intersectURIWithNSString:(NSString *)email1
                    withNSString:(NSString *)email2
                 withJavaUtilSet:(id<JavaUtilSet>)intersect {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectURIWithNSString_withNSString_withJavaUtilSet_(self, email1, email2, intersect);
}

- (void)checkPermittedURIWithJavaUtilSet:(id<JavaUtilSet>)permitted
                            withNSString:(NSString *)uri {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedURIWithJavaUtilSet_withNSString_(self, permitted, uri);
}

- (jboolean)isUriConstrainedWithNSString:(NSString *)uri
                            withNSString:(NSString *)constraint {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(self, uri, constraint);
}

+ (NSString *)extractHostFromURLWithNSString:(NSString *)url {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractHostFromURLWithNSString_(url);
}

- (NSString *)extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName:(LibOrgBouncycastleAsn1X509GeneralName *)name {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, name);
}

+ (IOSByteArray *)maxWithByteArray:(IOSByteArray *)ip1
                     withByteArray:(IOSByteArray *)ip2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_maxWithByteArray_withByteArray_(ip1, ip2);
}

+ (IOSByteArray *)minWithByteArray:(IOSByteArray *)ip1
                     withByteArray:(IOSByteArray *)ip2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_minWithByteArray_withByteArray_(ip1, ip2);
}

+ (jint)compareToWithByteArray:(IOSByteArray *)ip1
                 withByteArray:(IOSByteArray *)ip2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_compareToWithByteArray_withByteArray_(ip1, ip2);
}

+ (IOSByteArray *)or__WithByteArray:(IOSByteArray *)ip1
                      withByteArray:(IOSByteArray *)ip2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_or__WithByteArray_withByteArray_(ip1, ip2);
}

- (jint)hashCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, coll);
}

- (jboolean)collectionsAreEqualWithJavaUtilCollection:(id<JavaUtilCollection>)coll1
                               withJavaUtilCollection:(id<JavaUtilCollection>)coll2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, coll1, coll2);
}

- (jboolean)equalsWithId:(id)o1
                  withId:(id)o2 {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_equalsWithId_withId_(self, o1, o2);
}

- (NSString *)stringifyIPWithByteArray:(IOSByteArray *)ip {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPWithByteArray_(self, ip);
}

- (NSString *)stringifyIPCollectionWithJavaUtilSet:(id<JavaUtilSet>)ips {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(self, ips);
}

- (NSString *)stringifyOtherNameCollectionWithJavaUtilSet:(id<JavaUtilSet>)otherNames {
  return LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyOtherNameCollectionWithJavaUtilSet_(self, otherNames);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 15, 2, -1, -1, -1 },
    { NULL, "Z", 0xa, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 19, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 19, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 22, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 23, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 26, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 29, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 34, 33, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 35, 33, -1, -1, -1, -1 },
    { NULL, "[[B", 0x2, 36, 33, -1, -1, -1, -1 },
    { NULL, "[[B", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 28, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 25, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 25, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 28, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 31, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 31, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 45, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 48, 49, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 50, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 28, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 28, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 53, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 55, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 56, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 28, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 58, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 54, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 28, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 60, 49, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 61, 62, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 63, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 64, 33, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 65, 33, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 66, 33, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 67, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 68, 69, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 70, 71, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 72, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 73, 74, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 75, 76, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 77, 76, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkPermittedWithLibOrgBouncycastleAsn1X509GeneralName:);
  methods[2].selector = @selector(checkExcludedWithLibOrgBouncycastleAsn1X509GeneralName:);
  methods[3].selector = @selector(intersectPermittedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtree:);
  methods[4].selector = @selector(intersectPermittedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtreeArray:);
  methods[5].selector = @selector(intersectEmptyPermittedSubtreeWithInt:);
  methods[6].selector = @selector(addExcludedSubtreeWithLibOrgBouncycastleAsn1X509GeneralSubtree:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(checkPermittedDNWithLibOrgBouncycastleAsn1X500X500Name:);
  methods[11].selector = @selector(checkExcludedDNWithLibOrgBouncycastleAsn1X500X500Name:);
  methods[12].selector = @selector(withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence:withLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[13].selector = @selector(checkPermittedDNWithJavaUtilSet:withLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[14].selector = @selector(checkExcludedDNWithJavaUtilSet:withLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[15].selector = @selector(intersectDNWithJavaUtilSet:withJavaUtilSet:);
  methods[16].selector = @selector(unionDNWithJavaUtilSet:withLibOrgBouncycastleAsn1ASN1Sequence:);
  methods[17].selector = @selector(intersectOtherNameWithJavaUtilSet:withJavaUtilSet:);
  methods[18].selector = @selector(unionOtherNameWithJavaUtilSet:withLibOrgBouncycastleAsn1X509OtherName:);
  methods[19].selector = @selector(intersectEmailWithJavaUtilSet:withJavaUtilSet:);
  methods[20].selector = @selector(unionEmailWithJavaUtilSet:withNSString:);
  methods[21].selector = @selector(intersectIPWithJavaUtilSet:withJavaUtilSet:);
  methods[22].selector = @selector(unionIPWithJavaUtilSet:withByteArray:);
  methods[23].selector = @selector(unionIPRangeWithByteArray:withByteArray:);
  methods[24].selector = @selector(intersectIPRangeWithByteArray:withByteArray:);
  methods[25].selector = @selector(ipWithSubnetMaskWithByteArray:withByteArray:);
  methods[26].selector = @selector(extractIPsAndSubnetMasksWithByteArray:withByteArray:);
  methods[27].selector = @selector(minMaxIPsWithByteArray:withByteArray:withByteArray:withByteArray:);
  methods[28].selector = @selector(checkPermittedEmailWithJavaUtilSet:withNSString:);
  methods[29].selector = @selector(checkPermittedOtherNameWithJavaUtilSet:withLibOrgBouncycastleAsn1X509OtherName:);
  methods[30].selector = @selector(checkExcludedOtherNameWithJavaUtilSet:withLibOrgBouncycastleAsn1X509OtherName:);
  methods[31].selector = @selector(checkExcludedEmailWithJavaUtilSet:withNSString:);
  methods[32].selector = @selector(checkPermittedIPWithJavaUtilSet:withByteArray:);
  methods[33].selector = @selector(checkExcludedIPWithJavaUtilSet:withByteArray:);
  methods[34].selector = @selector(isIPConstrainedWithByteArray:withByteArray:);
  methods[35].selector = @selector(otherNameIsConstrainedWithLibOrgBouncycastleAsn1X509OtherName:withLibOrgBouncycastleAsn1X509OtherName:);
  methods[36].selector = @selector(emailIsConstrainedWithNSString:withNSString:);
  methods[37].selector = @selector(withinDomainWithNSString:withNSString:);
  methods[38].selector = @selector(checkPermittedDNSWithJavaUtilSet:withNSString:);
  methods[39].selector = @selector(checkExcludedDNSWithJavaUtilSet:withNSString:);
  methods[40].selector = @selector(unionEmailWithNSString:withNSString:withJavaUtilSet:);
  methods[41].selector = @selector(unionURIWithNSString:withNSString:withJavaUtilSet:);
  methods[42].selector = @selector(intersectDNSWithJavaUtilSet:withJavaUtilSet:);
  methods[43].selector = @selector(unionDNSWithJavaUtilSet:withNSString:);
  methods[44].selector = @selector(intersectEmailWithNSString:withNSString:withJavaUtilSet:);
  methods[45].selector = @selector(checkExcludedURIWithJavaUtilSet:withNSString:);
  methods[46].selector = @selector(intersectURIWithJavaUtilSet:withJavaUtilSet:);
  methods[47].selector = @selector(unionURIWithJavaUtilSet:withNSString:);
  methods[48].selector = @selector(intersectURIWithNSString:withNSString:withJavaUtilSet:);
  methods[49].selector = @selector(checkPermittedURIWithJavaUtilSet:withNSString:);
  methods[50].selector = @selector(isUriConstrainedWithNSString:withNSString:);
  methods[51].selector = @selector(extractHostFromURLWithNSString:);
  methods[52].selector = @selector(extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName:);
  methods[53].selector = @selector(maxWithByteArray:withByteArray:);
  methods[54].selector = @selector(minWithByteArray:withByteArray:);
  methods[55].selector = @selector(compareToWithByteArray:withByteArray:);
  methods[56].selector = @selector(or__WithByteArray:withByteArray:);
  methods[57].selector = @selector(hashCollectionWithJavaUtilCollection:);
  methods[58].selector = @selector(collectionsAreEqualWithJavaUtilCollection:withJavaUtilCollection:);
  methods[59].selector = @selector(equalsWithId:withId:);
  methods[60].selector = @selector(stringifyIPWithByteArray:);
  methods[61].selector = @selector(stringifyIPCollectionWithJavaUtilSet:);
  methods[62].selector = @selector(stringifyOtherNameCollectionWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "excludedSubtreesDN_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesDNS_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesEmail_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesURI_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesIP_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesOtherName_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesDN_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesDNS_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesEmail_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesURI_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesIP_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesOtherName_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "checkPermitted", "LLibOrgBouncycastleAsn1X509GeneralName;", "LLibOrgBouncycastleAsn1X509NameConstraintValidatorException;", "checkExcluded", "intersectPermittedSubtree", "LLibOrgBouncycastleAsn1X509GeneralSubtree;", "[LLibOrgBouncycastleAsn1X509GeneralSubtree;", "intersectEmptyPermittedSubtree", "I", "addExcludedSubtree", "hashCode", "equals", "LNSObject;", "toString", "checkPermittedDN", "LLibOrgBouncycastleAsn1X500X500Name;", "checkExcludedDN", "withinDNSubtree", "LLibOrgBouncycastleAsn1ASN1Sequence;LLibOrgBouncycastleAsn1ASN1Sequence;", "LJavaUtilSet;LLibOrgBouncycastleAsn1ASN1Sequence;", "intersectDN", "LJavaUtilSet;LJavaUtilSet;", "unionDN", "intersectOtherName", "unionOtherName", "LJavaUtilSet;LLibOrgBouncycastleAsn1X509OtherName;", "intersectEmail", "unionEmail", "LJavaUtilSet;LNSString;", "intersectIP", "unionIP", "LJavaUtilSet;[B", "unionIPRange", "[B[B", "intersectIPRange", "ipWithSubnetMask", "extractIPsAndSubnetMasks", "minMaxIPs", "[B[B[B[B", "checkPermittedEmail", "checkPermittedOtherName", "checkExcludedOtherName", "checkExcludedEmail", "checkPermittedIP", "checkExcludedIP", "isIPConstrained", "otherNameIsConstrained", "LLibOrgBouncycastleAsn1X509OtherName;LLibOrgBouncycastleAsn1X509OtherName;", "emailIsConstrained", "LNSString;LNSString;", "withinDomain", "checkPermittedDNS", "checkExcludedDNS", "LNSString;LNSString;LJavaUtilSet;", "unionURI", "intersectDNS", "unionDNS", "checkExcludedURI", "intersectURI", "checkPermittedURI", "isUriConstrained", "extractHostFromURL", "LNSString;", "extractNameAsString", "max", "min", "compareTo", "or", "hashCollection", "LJavaUtilCollection;", "collectionsAreEqual", "LJavaUtilCollection;LJavaUtilCollection;", "LNSObject;LNSObject;", "stringifyIP", "[B", "stringifyIPCollection", "LJavaUtilSet;", "stringifyOtherNameCollection" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator = { "PKIXNameConstraintValidator", "lib.org.bouncycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 63, 12, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator;
}

@end

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_init(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self) {
  NSObject_init(self);
  self->excludedSubtreesDN_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesDNS_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesEmail_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesURI_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesIP_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesOtherName_ = new_JavaUtilHashSet_init();
}

LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *new_LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, init)
}

LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *create_LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator, init)
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, LibOrgBouncycastleAsn1X500X500Name *dns) {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(self, self->permittedSubtreesDN_, LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((LibOrgBouncycastleAsn1X500X500Name *) nil_chk(dns)) toASN1Primitive]));
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNWithLibOrgBouncycastleAsn1X500X500Name_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, LibOrgBouncycastleAsn1X500X500Name *dns) {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(self, self->excludedSubtreesDN_, LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(dns));
}

jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1ASN1Sequence *dns, LibOrgBouncycastleAsn1ASN1Sequence *subtree) {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_initialize();
  if ([((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(subtree)) size] < 1) {
    return false;
  }
  if ([subtree size] > [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(dns)) size]) {
    return false;
  }
  for (jint j = [subtree size] - 1; j >= 0; j--) {
    if (![((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([subtree getObjectAtWithInt:j])) isEqual:[dns getObjectAtWithInt:j]]) {
      return false;
    }
  }
  return true;
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, LibOrgBouncycastleAsn1ASN1Sequence *dns) {
  if (permitted == nil) {
    return;
  }
  if ([permitted isEmpty] && [((LibOrgBouncycastleAsn1ASN1Sequence *) nil_chk(dns)) size] == 0) {
    return;
  }
  id<JavaUtilIterator> it = [permitted iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleAsn1ASN1Sequence *subtree = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([it next], [LibOrgBouncycastleAsn1ASN1Sequence class]);
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(dns, subtree)) {
      return;
    }
  }
  @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"Subject distinguished name is not from a permitted subtree");
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, LibOrgBouncycastleAsn1ASN1Sequence *dns) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    return;
  }
  id<JavaUtilIterator> it = [excluded iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleAsn1ASN1Sequence *subtree = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([it next], [LibOrgBouncycastleAsn1ASN1Sequence class]);
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(dns, subtree)) {
      @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"Subject distinguished name is from an excluded subtree");
    }
  }
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectDNWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> dns) {
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(dns)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    LibOrgBouncycastleAsn1ASN1Sequence *dn = LibOrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk([((LibOrgBouncycastleAsn1X509GeneralSubtree *) nil_chk(((LibOrgBouncycastleAsn1X509GeneralSubtree *) cast_chk([it next], [LibOrgBouncycastleAsn1X509GeneralSubtree class])))) getBase])) getName])) toASN1Primitive]);
    if (permitted == nil) {
      if (dn != nil) {
        [intersect addWithId:dn];
      }
    }
    else {
      id<JavaUtilIterator> _iter = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
        LibOrgBouncycastleAsn1ASN1Sequence *subtree = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([_iter next], [LibOrgBouncycastleAsn1ASN1Sequence class]);
        if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(dn, subtree)) {
          [intersect addWithId:dn];
        }
        else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(subtree, dn)) {
          [intersect addWithId:subtree];
        }
      }
    }
  }
  return intersect;
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionDNWithJavaUtilSet_withLibOrgBouncycastleAsn1ASN1Sequence_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, LibOrgBouncycastleAsn1ASN1Sequence *dn) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    if (dn == nil) {
      return excluded;
    }
    [excluded addWithId:dn];
    return excluded;
  }
  else {
    id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
    id<JavaUtilIterator> it = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      LibOrgBouncycastleAsn1ASN1Sequence *subtree = (LibOrgBouncycastleAsn1ASN1Sequence *) cast_chk([it next], [LibOrgBouncycastleAsn1ASN1Sequence class]);
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(dn, subtree)) {
        [intersect addWithId:subtree];
      }
      else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDNSubtreeWithLibOrgBouncycastleAsn1ASN1Sequence_withLibOrgBouncycastleAsn1ASN1Sequence_(subtree, dn)) {
        [intersect addWithId:dn];
      }
      else {
        [intersect addWithId:subtree];
        [intersect addWithId:dn];
      }
    }
    return intersect;
  }
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectOtherNameWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> otherNames) {
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_initWithJavaUtilCollection_(permitted);
  [intersect retainAllWithJavaUtilCollection:otherNames];
  return intersect;
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, LibOrgBouncycastleAsn1X509OtherName *otherName) {
  id<JavaUtilSet> union_ = new_JavaUtilHashSet_initWithJavaUtilCollection_(permitted);
  [union_ addWithId:otherName];
  return union_;
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectEmailWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> emails) {
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(emails)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    NSString *email = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, [((LibOrgBouncycastleAsn1X509GeneralSubtree *) nil_chk(((LibOrgBouncycastleAsn1X509GeneralSubtree *) cast_chk([it next], [LibOrgBouncycastleAsn1X509GeneralSubtree class])))) getBase]);
    if (permitted == nil) {
      if (email != nil) {
        [intersect addWithId:email];
      }
    }
    else {
      id<JavaUtilIterator> it2 = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
        NSString *_permitted = (NSString *) cast_chk([it2 next], [NSString class]);
        LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectEmailWithNSString_withNSString_withJavaUtilSet_(self, email, _permitted, intersect);
      }
    }
  }
  return intersect;
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionEmailWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *email) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    if (email == nil) {
      return excluded;
    }
    [excluded addWithId:email];
    return excluded;
  }
  else {
    id<JavaUtilSet> union_ = new_JavaUtilHashSet_init();
    id<JavaUtilIterator> it = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      NSString *_excluded = (NSString *) cast_chk([it next], [NSString class]);
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionEmailWithNSString_withNSString_withJavaUtilSet_(self, _excluded, email, union_);
    }
    return union_;
  }
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectIPWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> ips) {
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(ips)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    IOSByteArray *ip = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(LibOrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk([((LibOrgBouncycastleAsn1X509GeneralSubtree *) nil_chk(((LibOrgBouncycastleAsn1X509GeneralSubtree *) cast_chk([it next], [LibOrgBouncycastleAsn1X509GeneralSubtree class])))) getBase])) getName]))) getOctets];
    if (permitted == nil) {
      if (ip != nil) {
        [intersect addWithId:ip];
      }
    }
    else {
      id<JavaUtilIterator> it2 = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
        IOSByteArray *_permitted = (IOSByteArray *) cast_chk([it2 next], [IOSByteArray class]);
        [intersect addAllWithJavaUtilCollection:LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectIPRangeWithByteArray_withByteArray_(self, _permitted, ip)];
      }
    }
  }
  return intersect;
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionIPWithJavaUtilSet_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, IOSByteArray *ip) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    if (ip == nil) {
      return excluded;
    }
    [excluded addWithId:ip];
    return excluded;
  }
  else {
    id<JavaUtilSet> union_ = new_JavaUtilHashSet_init();
    id<JavaUtilIterator> it = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      IOSByteArray *_excluded = (IOSByteArray *) cast_chk([it next], [IOSByteArray class]);
      [union_ addAllWithJavaUtilCollection:LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionIPRangeWithByteArray_withByteArray_(self, _excluded, ip)];
    }
    return union_;
  }
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionIPRangeWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2) {
  id<JavaUtilSet> set = new_JavaUtilHashSet_init();
  if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(ipWithSubmask1, ipWithSubmask2)) {
    [set addWithId:ipWithSubmask1];
  }
  else {
    [set addWithId:ipWithSubmask1];
    [set addWithId:ipWithSubmask2];
  }
  return set;
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectIPRangeWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2) {
  if (((IOSByteArray *) nil_chk(ipWithSubmask1))->size_ != ((IOSByteArray *) nil_chk(ipWithSubmask2))->size_) {
    return JreLoadStatic(JavaUtilCollections, EMPTY_SET);
  }
  IOSObjectArray *temp = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractIPsAndSubnetMasksWithByteArray_withByteArray_(self, ipWithSubmask1, ipWithSubmask2);
  IOSByteArray *ip1 = IOSObjectArray_Get(nil_chk(temp), 0);
  IOSByteArray *subnetmask1 = IOSObjectArray_Get(temp, 1);
  IOSByteArray *ip2 = IOSObjectArray_Get(temp, 2);
  IOSByteArray *subnetmask2 = IOSObjectArray_Get(temp, 3);
  IOSObjectArray *minMax = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_minMaxIPsWithByteArray_withByteArray_withByteArray_withByteArray_(self, ip1, subnetmask1, ip2, subnetmask2);
  IOSByteArray *min;
  IOSByteArray *max;
  max = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_minWithByteArray_withByteArray_(IOSObjectArray_Get(nil_chk(minMax), 1), IOSObjectArray_Get(minMax, 3));
  min = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_maxWithByteArray_withByteArray_(IOSObjectArray_Get(minMax, 0), IOSObjectArray_Get(minMax, 2));
  if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_compareToWithByteArray_withByteArray_(min, max) == 1) {
    return JreLoadStatic(JavaUtilCollections, EMPTY_SET);
  }
  IOSByteArray *ip = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_or__WithByteArray_withByteArray_(IOSObjectArray_Get(minMax, 0), IOSObjectArray_Get(minMax, 2));
  IOSByteArray *subnetmask = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_or__WithByteArray_withByteArray_(subnetmask1, subnetmask2);
  return JavaUtilCollections_singletonWithId_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_ipWithSubnetMaskWithByteArray_withByteArray_(self, ip, subnetmask));
}

IOSByteArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_ipWithSubnetMaskWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ip, IOSByteArray *subnetMask) {
  jint ipLength = ((IOSByteArray *) nil_chk(ip))->size_;
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:ipLength * 2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ip, 0, temp, 0, ipLength);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(subnetMask, 0, temp, ipLength, ipLength);
  return temp;
}

IOSObjectArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractIPsAndSubnetMasksWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2) {
  jint ipLength = ((IOSByteArray *) nil_chk(ipWithSubmask1))->size_ / 2;
  IOSByteArray *ip1 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *subnetmask1 = [IOSByteArray newArrayWithLength:ipLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ipWithSubmask1, 0, ip1, 0, ipLength);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ipWithSubmask1, ipLength, subnetmask1, 0, ipLength);
  IOSByteArray *ip2 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *subnetmask2 = [IOSByteArray newArrayWithLength:ipLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ipWithSubmask2, 0, ip2, 0, ipLength);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ipWithSubmask2, ipLength, subnetmask2, 0, ipLength);
  return [IOSObjectArray newArrayWithObjects:(id[]){ ip1, subnetmask1, ip2, subnetmask2 } count:4 type:IOSClass_byteArray(1)];
}

IOSObjectArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_minMaxIPsWithByteArray_withByteArray_withByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ip1, IOSByteArray *subnetmask1, IOSByteArray *ip2, IOSByteArray *subnetmask2) {
  jint ipLength = ((IOSByteArray *) nil_chk(ip1))->size_;
  IOSByteArray *min1 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *max1 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *min2 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *max2 = [IOSByteArray newArrayWithLength:ipLength];
  for (jint i = 0; i < ipLength; i++) {
    *IOSByteArray_GetRef(min1, i) = (jbyte) (IOSByteArray_Get(ip1, i) & IOSByteArray_Get(nil_chk(subnetmask1), i));
    *IOSByteArray_GetRef(max1, i) = (jbyte) ((IOSByteArray_Get(ip1, i) & IOSByteArray_Get(subnetmask1, i)) | ~IOSByteArray_Get(subnetmask1, i));
    *IOSByteArray_GetRef(min2, i) = (jbyte) (IOSByteArray_Get(nil_chk(ip2), i) & IOSByteArray_Get(nil_chk(subnetmask2), i));
    *IOSByteArray_GetRef(max2, i) = (jbyte) ((IOSByteArray_Get(ip2, i) & IOSByteArray_Get(subnetmask2, i)) | ~IOSByteArray_Get(subnetmask2, i));
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ min1, max1, min2, max2 } count:4 type:IOSClass_byteArray(1)];
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedEmailWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *email) {
  if (permitted == nil) {
    return;
  }
  id<JavaUtilIterator> it = [permitted iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(self, email, str)) {
      return;
    }
  }
  if ([((NSString *) nil_chk(email)) java_length] == 0 && [permitted size] == 0) {
    return;
  }
  @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"Subject email address is not from a permitted subtree.");
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, LibOrgBouncycastleAsn1X509OtherName *name) {
  if (permitted == nil) {
    return;
  }
  id<JavaUtilIterator> it = [permitted iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleAsn1X509OtherName *str = ((LibOrgBouncycastleAsn1X509OtherName *) cast_chk([it next], [LibOrgBouncycastleAsn1X509OtherName class]));
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_otherNameIsConstrainedWithLibOrgBouncycastleAsn1X509OtherName_withLibOrgBouncycastleAsn1X509OtherName_(self, name, str)) {
      return;
    }
  }
  @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"Subject OtherName is not from a permitted subtree.");
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedOtherNameWithJavaUtilSet_withLibOrgBouncycastleAsn1X509OtherName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, LibOrgBouncycastleAsn1X509OtherName *name) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    return;
  }
  id<JavaUtilIterator> it = [excluded iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    LibOrgBouncycastleAsn1X509OtherName *str = LibOrgBouncycastleAsn1X509OtherName_getInstanceWithId_([it next]);
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_otherNameIsConstrainedWithLibOrgBouncycastleAsn1X509OtherName_withLibOrgBouncycastleAsn1X509OtherName_(self, name, str)) {
      @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"OtherName is from an excluded subtree.");
    }
  }
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedEmailWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *email) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    return;
  }
  id<JavaUtilIterator> it = [excluded iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *str = (NSString *) cast_chk([it next], [NSString class]);
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(self, email, str)) {
      @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"Email address is from an excluded subtree.");
    }
  }
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedIPWithJavaUtilSet_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, IOSByteArray *ip) {
  if (permitted == nil) {
    return;
  }
  id<JavaUtilIterator> it = [permitted iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSByteArray *ipWithSubnet = (IOSByteArray *) cast_chk([it next], [IOSByteArray class]);
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(self, ip, ipWithSubnet)) {
      return;
    }
  }
  if (((IOSByteArray *) nil_chk(ip))->size_ == 0 && [permitted size] == 0) {
    return;
  }
  @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"IP is not from a permitted subtree.");
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedIPWithJavaUtilSet_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, IOSByteArray *ip) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    return;
  }
  id<JavaUtilIterator> it = [excluded iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSByteArray *ipWithSubnet = (IOSByteArray *) cast_chk([it next], [IOSByteArray class]);
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(self, ip, ipWithSubnet)) {
      @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"IP is from an excluded subtree.");
    }
  }
}

jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ip, IOSByteArray *constraint) {
  jint ipLength = ((IOSByteArray *) nil_chk(ip))->size_;
  if (ipLength != (((IOSByteArray *) nil_chk(constraint))->size_ / 2)) {
    return false;
  }
  IOSByteArray *subnetMask = [IOSByteArray newArrayWithLength:ipLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(constraint, ipLength, subnetMask, 0, ipLength);
  IOSByteArray *permittedSubnetAddress = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *ipSubnetAddress = [IOSByteArray newArrayWithLength:ipLength];
  for (jint i = 0; i < ipLength; i++) {
    *IOSByteArray_GetRef(permittedSubnetAddress, i) = (jbyte) (IOSByteArray_Get(constraint, i) & IOSByteArray_Get(subnetMask, i));
    *IOSByteArray_GetRef(ipSubnetAddress, i) = (jbyte) (IOSByteArray_Get(ip, i) & IOSByteArray_Get(subnetMask, i));
  }
  return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(permittedSubnetAddress, ipSubnetAddress);
}

jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_otherNameIsConstrainedWithLibOrgBouncycastleAsn1X509OtherName_withLibOrgBouncycastleAsn1X509OtherName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, LibOrgBouncycastleAsn1X509OtherName *name, LibOrgBouncycastleAsn1X509OtherName *constraint) {
  if ([((LibOrgBouncycastleAsn1X509OtherName *) nil_chk(constraint)) isEqual:name]) {
    return true;
  }
  return false;
}

jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email, NSString *constraint) {
  NSString *sub = [((NSString *) nil_chk(email)) java_substring:[email java_indexOf:'@'] + 1];
  if ([((NSString *) nil_chk(constraint)) java_indexOf:'@'] != -1) {
    if ([email java_equalsIgnoreCase:constraint]) {
      return true;
    }
  }
  else if (!([constraint charAtWithInt:0] == '.')) {
    if ([((NSString *) nil_chk(sub)) java_equalsIgnoreCase:constraint]) {
      return true;
    }
  }
  else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, sub, constraint)) {
    return true;
  }
  return false;
}

jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *testDomain, NSString *domain) {
  NSString *tempDomain = domain;
  if ([((NSString *) nil_chk(tempDomain)) java_hasPrefix:@"."]) {
    tempDomain = [tempDomain java_substring:1];
  }
  IOSObjectArray *domainParts = LibOrgBouncycastleUtilStrings_splitWithNSString_withChar_(tempDomain, '.');
  IOSObjectArray *testDomainParts = LibOrgBouncycastleUtilStrings_splitWithNSString_withChar_(testDomain, '.');
  if (((IOSObjectArray *) nil_chk(testDomainParts))->size_ <= ((IOSObjectArray *) nil_chk(domainParts))->size_) {
    return false;
  }
  jint d = testDomainParts->size_ - domainParts->size_;
  for (jint i = -1; i < domainParts->size_; i++) {
    if (i == -1) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(testDomainParts, i + d))) isEqual:@""]) {
        return false;
      }
    }
    else if (![((NSString *) nil_chk(IOSObjectArray_Get(domainParts, i))) java_equalsIgnoreCase:IOSObjectArray_Get(testDomainParts, i + d)]) {
      return false;
    }
  }
  return true;
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedDNSWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *dns) {
  if (permitted == nil) {
    return;
  }
  id<JavaUtilIterator> it = [permitted iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, dns, str) || [((NSString *) nil_chk(dns)) java_equalsIgnoreCase:str]) {
      return;
    }
  }
  if ([((NSString *) nil_chk(dns)) java_length] == 0 && [permitted size] == 0) {
    return;
  }
  @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"DNS is not from a permitted subtree.");
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedDNSWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *dns) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    return;
  }
  id<JavaUtilIterator> it = [excluded iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, dns, str) || [((NSString *) nil_chk(dns)) java_equalsIgnoreCase:str]) {
      @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"DNS is from an excluded subtree.");
    }
  }
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionEmailWithNSString_withNSString_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> union_) {
  if ([((NSString *) nil_chk(email1)) java_indexOf:'@'] != -1) {
    NSString *_sub = [email1 java_substring:[email1 java_indexOf:'@'] + 1];
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      if ([email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email2)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
  else if ([email1 java_hasPrefix:@"."]) {
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email1)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2) || [email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
  else {
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email1]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      if ([email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionURIWithNSString_withNSString_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> union_) {
  if ([((NSString *) nil_chk(email1)) java_indexOf:'@'] != -1) {
    NSString *_sub = [email1 java_substring:[email1 java_indexOf:'@'] + 1];
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      if ([email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email2)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
  else if ([email1 java_hasPrefix:@"."]) {
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email1)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2) || [email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
  else {
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email1]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      if ([email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectDNSWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> dnss) {
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(dnss)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    NSString *dns = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, [((LibOrgBouncycastleAsn1X509GeneralSubtree *) nil_chk(((LibOrgBouncycastleAsn1X509GeneralSubtree *) cast_chk([it next], [LibOrgBouncycastleAsn1X509GeneralSubtree class])))) getBase]);
    if (permitted == nil) {
      if (dns != nil) {
        [intersect addWithId:dns];
      }
    }
    else {
      id<JavaUtilIterator> _iter = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
        NSString *_permitted = (NSString *) cast_chk([_iter next], [NSString class]);
        if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _permitted, dns)) {
          [intersect addWithId:_permitted];
        }
        else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, dns, _permitted)) {
          [intersect addWithId:dns];
        }
      }
    }
  }
  return intersect;
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionDNSWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *dns) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    if (dns == nil) {
      return excluded;
    }
    [excluded addWithId:dns];
    return excluded;
  }
  else {
    id<JavaUtilSet> union_ = new_JavaUtilHashSet_init();
    id<JavaUtilIterator> _iter = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
      NSString *_permitted = (NSString *) cast_chk([_iter next], [NSString class]);
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _permitted, dns)) {
        [union_ addWithId:dns];
      }
      else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, dns, _permitted)) {
        [union_ addWithId:_permitted];
      }
      else {
        [union_ addWithId:_permitted];
        [union_ addWithId:dns];
      }
    }
    return union_;
  }
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectEmailWithNSString_withNSString_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> intersect) {
  if ([((NSString *) nil_chk(email1)) java_indexOf:'@'] != -1) {
    NSString *_sub = [email1 java_substring:[email1 java_indexOf:'@'] + 1];
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      if ([email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email2)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else {
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
  }
  else if ([email1 java_hasPrefix:@"."]) {
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email1)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2) || [email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
      else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
  }
  else {
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      NSString *_sub = [email2 java_substring:[email2 java_indexOf:'@'] + 1];
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email1]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else {
      if ([email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
  }
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkExcludedURIWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *uri) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    return;
  }
  id<JavaUtilIterator> it = [excluded iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(self, uri, str)) {
      @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"URI is from an excluded subtree.");
    }
  }
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectURIWithJavaUtilSet_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> uris) {
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(uris)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    NSString *uri = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(self, [((LibOrgBouncycastleAsn1X509GeneralSubtree *) nil_chk(((LibOrgBouncycastleAsn1X509GeneralSubtree *) cast_chk([it next], [LibOrgBouncycastleAsn1X509GeneralSubtree class])))) getBase]);
    if (permitted == nil) {
      if (uri != nil) {
        [intersect addWithId:uri];
      }
    }
    else {
      id<JavaUtilIterator> _iter = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
        NSString *_permitted = (NSString *) cast_chk([_iter next], [NSString class]);
        LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectURIWithNSString_withNSString_withJavaUtilSet_(self, _permitted, uri, intersect);
      }
    }
  }
  return intersect;
}

id<JavaUtilSet> LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionURIWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *uri) {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    if (uri == nil) {
      return excluded;
    }
    [excluded addWithId:uri];
    return excluded;
  }
  else {
    id<JavaUtilSet> union_ = new_JavaUtilHashSet_init();
    id<JavaUtilIterator> _iter = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
      NSString *_excluded = (NSString *) cast_chk([_iter next], [NSString class]);
      LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_unionURIWithNSString_withNSString_withJavaUtilSet_(self, _excluded, uri, union_);
    }
    return union_;
  }
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_intersectURIWithNSString_withNSString_withJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> intersect) {
  if ([((NSString *) nil_chk(email1)) java_indexOf:'@'] != -1) {
    NSString *_sub = [email1 java_substring:[email1 java_indexOf:'@'] + 1];
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      if ([email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email2)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else {
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
  }
  else if ([email1 java_hasPrefix:@"."]) {
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email1)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2) || [email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
      else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
  }
  else {
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      NSString *_sub = [email2 java_substring:[email2 java_indexOf:'@'] + 1];
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email1]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else if ([email2 java_hasPrefix:@"."]) {
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2)) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else {
      if ([email1 java_equalsIgnoreCase:email2]) {
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
  }
}

void LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_checkPermittedURIWithJavaUtilSet_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *uri) {
  if (permitted == nil) {
    return;
  }
  id<JavaUtilIterator> it = [permitted iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(self, uri, str)) {
      return;
    }
  }
  if ([((NSString *) nil_chk(uri)) java_length] == 0 && [permitted size] == 0) {
    return;
  }
  @throw new_LibOrgBouncycastleAsn1X509NameConstraintValidatorException_initWithNSString_(@"URI is not from a permitted subtree.");
}

jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, NSString *uri, NSString *constraint) {
  NSString *host = LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractHostFromURLWithNSString_(uri);
  if (![((NSString *) nil_chk(constraint)) java_hasPrefix:@"."]) {
    if ([((NSString *) nil_chk(host)) java_equalsIgnoreCase:constraint]) {
      return true;
    }
  }
  else if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, host, constraint)) {
    return true;
  }
  return false;
}

NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractHostFromURLWithNSString_(NSString *url) {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_initialize();
  NSString *sub = [((NSString *) nil_chk(url)) java_substring:[url java_indexOf:':'] + 1];
  if ([((NSString *) nil_chk(sub)) java_indexOfString:@"//"] != -1) {
    sub = [sub java_substring:[sub java_indexOfString:@"//"] + 2];
  }
  if ([((NSString *) nil_chk(sub)) java_lastIndexOf:':'] != -1) {
    sub = [sub java_substring:0 endIndex:[sub java_lastIndexOf:':']];
  }
  sub = [((NSString *) nil_chk(sub)) java_substring:[sub java_indexOf:':'] + 1];
  sub = [((NSString *) nil_chk(sub)) java_substring:[sub java_indexOf:'@'] + 1];
  if ([((NSString *) nil_chk(sub)) java_indexOf:'/'] != -1) {
    sub = [sub java_substring:0 endIndex:[sub java_indexOf:'/']];
  }
  return sub;
}

NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_extractNameAsStringWithLibOrgBouncycastleAsn1X509GeneralName_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, LibOrgBouncycastleAsn1X509GeneralName *name) {
  return [((LibOrgBouncycastleAsn1DERIA5String *) nil_chk(LibOrgBouncycastleAsn1DERIA5String_getInstanceWithId_([((LibOrgBouncycastleAsn1X509GeneralName *) nil_chk(name)) getName]))) getString];
}

IOSByteArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_maxWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_initialize();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(ip1))->size_; i++) {
    if ((IOSByteArray_Get(ip1, i) & (jint) 0xFFFF) > (IOSByteArray_Get(nil_chk(ip2), i) & (jint) 0xFFFF)) {
      return ip1;
    }
  }
  return ip2;
}

IOSByteArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_minWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_initialize();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(ip1))->size_; i++) {
    if ((IOSByteArray_Get(ip1, i) & (jint) 0xFFFF) < (IOSByteArray_Get(nil_chk(ip2), i) & (jint) 0xFFFF)) {
      return ip1;
    }
  }
  return ip2;
}

jint LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_compareToWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_initialize();
  if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(ip1, ip2)) {
    return 0;
  }
  if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_maxWithByteArray_withByteArray_(ip1, ip2), ip1)) {
    return 1;
  }
  return -1;
}

IOSByteArray *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_or__WithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_initialize();
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(ip1))->size_];
  for (jint i = 0; i < ip1->size_; i++) {
    *IOSByteArray_GetRef(temp, i) = (jbyte) (IOSByteArray_Get(ip1, i) | IOSByteArray_Get(nil_chk(ip2), i));
  }
  return temp;
}

jint LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilCollection> coll) {
  if (coll == nil) {
    return 0;
  }
  jint hash_ = 0;
  id<JavaUtilIterator> it1 = [coll iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it1)) hasNext]) {
    id o = [it1 next];
    if ([o isKindOfClass:[IOSByteArray class]]) {
      hash_ += LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_((IOSByteArray *) cast_chk(o, [IOSByteArray class]));
    }
    else {
      hash_ += ((jint) [nil_chk(o) hash]);
    }
  }
  return hash_;
}

jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilCollection> coll1, id<JavaUtilCollection> coll2) {
  if (coll1 == coll2) {
    return true;
  }
  if (coll1 == nil || coll2 == nil) {
    return false;
  }
  if ([coll1 size] != [coll2 size]) {
    return false;
  }
  id<JavaUtilIterator> it1 = [coll1 iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it1)) hasNext]) {
    id a = [it1 next];
    id<JavaUtilIterator> it2 = [coll2 iterator];
    jboolean found = false;
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      id b = [it2 next];
      if (LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_equalsWithId_withId_(self, a, b)) {
        found = true;
        break;
      }
    }
    if (!found) {
      return false;
    }
  }
  return true;
}

jboolean LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_equalsWithId_withId_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id o1, id o2) {
  if (o1 == o2) {
    return true;
  }
  if (o1 == nil || o2 == nil) {
    return false;
  }
  if ([o1 isKindOfClass:[IOSByteArray class]] && [o2 isKindOfClass:[IOSByteArray class]]) {
    return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_((IOSByteArray *) cast_chk(o1, [IOSByteArray class]), (IOSByteArray *) cast_chk(o2, [IOSByteArray class]));
  }
  else {
    return [o1 isEqual:o2];
  }
}

NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPWithByteArray_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, IOSByteArray *ip) {
  JavaLangStringBuilder *temp = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(ip))->size_ / 2; i++) {
    if ([temp java_length] > 0) {
      (void) [temp appendWithNSString:@"."];
    }
    (void) [temp appendWithNSString:JavaLangInteger_toStringWithInt_(IOSByteArray_Get(ip, i) & (jint) 0x00FF)];
  }
  (void) [temp appendWithNSString:@"/"];
  jboolean first = true;
  for (jint i = ip->size_ / 2; i < ip->size_; i++) {
    if (first) {
      first = false;
    }
    else {
      (void) [temp appendWithNSString:@"."];
    }
    (void) [temp appendWithNSString:JavaLangInteger_toStringWithInt_(IOSByteArray_Get(ip, i) & (jint) 0x00FF)];
  }
  return [temp description];
}

NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> ips) {
  JavaLangStringBuilder *temp = new_JavaLangStringBuilder_init();
  (void) [temp appendWithNSString:@"["];
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(ips)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    if ([temp java_length] > 1) {
      (void) [temp appendWithNSString:@","];
    }
    (void) [temp appendWithNSString:LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyIPWithByteArray_(self, (IOSByteArray *) cast_chk([it next], [IOSByteArray class]))];
  }
  (void) [temp appendWithNSString:@"]"];
  return [temp description];
}

NSString *LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator_stringifyOtherNameCollectionWithJavaUtilSet_(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator *self, id<JavaUtilSet> otherNames) {
  JavaLangStringBuilder *temp = new_JavaLangStringBuilder_init();
  (void) [temp appendWithNSString:@"["];
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(otherNames)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    if ([temp java_length] > 1) {
      (void) [temp appendWithNSString:@","];
    }
    LibOrgBouncycastleAsn1X509OtherName *name = LibOrgBouncycastleAsn1X509OtherName_getInstanceWithId_([it next]);
    (void) [temp appendWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509OtherName *) nil_chk(name)) getTypeID])) getId]];
    (void) [temp appendWithNSString:@":"];
    @try {
      (void) [temp appendWithNSString:LibOrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_([((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<LibOrgBouncycastleAsn1ASN1Encodable>) nil_chk([name getValue])) toASN1Primitive])) getEncoded])];
    }
    @catch (JavaIoIOException *e) {
      (void) [temp appendWithNSString:[e description]];
    }
  }
  (void) [temp appendWithNSString:@"]"];
  return [temp description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1X509PKIXNameConstraintValidator)
