//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/ecgost/JcajceEcgostKeyFactorySpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "BCECGOST3410PrivateKey.h"
#include "BCECGOST3410PublicKey.h"
#include "BaseKeyFactorySpi.h"
#include "BouncyCastleProvider.h"
#include "CryptoProObjectIdentifiers.h"
#include "EC5Util.h"
#include "ECCurve.h"
#include "ECParameterSpec.h"
#include "ECPoint.h"
#include "ECPrivateKeySpec.h"
#include "ECPublicKeySpec.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceEcgostKeyFactorySpi.h"
#include "PrivateKeyInfo.h"
#include "ProviderConfiguration.h"
#include "SubjectPublicKeyInfo.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/ECPrivateKey.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/ECPrivateKeySpec.h"
#include "java/security/spec/ECPublicKeySpec.h"
#include "java/security/spec/EllipticCurve.h"
#include "java/security/spec/KeySpec.h"

@implementation LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)spec {
  if ([((IOSClass *) nil_chk(spec)) isAssignableFrom:JavaSecuritySpecECPublicKeySpec_class_()] && [JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPublicKey> k = (id<JavaSecurityInterfacesECPublicKey>) cast_check(key, JavaSecurityInterfacesECPublicKey_class_());
    if ([((id<JavaSecurityInterfacesECPublicKey>) nil_chk(k)) getParams] != nil) {
      return new_JavaSecuritySpecECPublicKeySpec_initWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_([k getW], [k getParams]);
    }
    else {
      LibOrgBouncycastleJceSpecECParameterSpec *implicitSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_JavaSecuritySpecECPublicKeySpec_initWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_([k getW], LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(implicitSpec)) getCurve], [implicitSpec getSeed]), implicitSpec));
    }
  }
  else if ([spec isAssignableFrom:JavaSecuritySpecECPrivateKeySpec_class_()] && [JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPrivateKey> k = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(key, JavaSecurityInterfacesECPrivateKey_class_());
    if ([((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(k)) getParams] != nil) {
      return new_JavaSecuritySpecECPrivateKeySpec_initWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_([k getS], [k getParams]);
    }
    else {
      LibOrgBouncycastleJceSpecECParameterSpec *implicitSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_JavaSecuritySpecECPrivateKeySpec_initWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_([k getS], LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleJceSpecECParameterSpec *) nil_chk(implicitSpec)) getCurve], [implicitSpec getSeed]), implicitSpec));
    }
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecECPublicKeySpec_class_()] && [JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPublicKey> k = (id<JavaSecurityInterfacesECPublicKey>) cast_check(key, JavaSecurityInterfacesECPublicKey_class_());
    if ([((id<JavaSecurityInterfacesECPublicKey>) nil_chk(k)) getParams] != nil) {
      return new_LibOrgBouncycastleJceSpecECPublicKeySpec_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_([k getParams], [k getW], false), LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_([k getParams], false));
    }
    else {
      LibOrgBouncycastleJceSpecECParameterSpec *implicitSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_LibOrgBouncycastleJceSpecECPublicKeySpec_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleJceSpecECParameterSpec_(LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_([k getParams], [k getW], false), implicitSpec);
    }
  }
  else if ([spec isAssignableFrom:LibOrgBouncycastleJceSpecECPrivateKeySpec_class_()] && [JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPrivateKey> k = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(key, JavaSecurityInterfacesECPrivateKey_class_());
    if ([((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(k)) getParams] != nil) {
      return new_LibOrgBouncycastleJceSpecECPrivateKeySpec_initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_([k getS], LibOrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_([k getParams], false));
    }
    else {
      LibOrgBouncycastleJceSpecECParameterSpec *implicitSpec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_LibOrgBouncycastleJceSpecECPrivateKeySpec_initWithJavaMathBigInteger_withLibOrgBouncycastleJceSpecECParameterSpec_([k getS], implicitSpec);
    }
  }
  return [super engineGetKeySpecWithJavaSecurityKey:key withIOSClass:spec];
}

- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"key type unknown");
}

- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecECPrivateKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PrivateKey_initWithLibOrgBouncycastleJceSpecECPrivateKeySpec_((LibOrgBouncycastleJceSpecECPrivateKeySpec *) keySpec);
  }
  else if ([keySpec isKindOfClass:[JavaSecuritySpecECPrivateKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PrivateKey_initWithJavaSecuritySpecECPrivateKeySpec_((JavaSecuritySpecECPrivateKeySpec *) keySpec);
  }
  return [super engineGeneratePrivateWithJavaSecuritySpecKeySpec:keySpec];
}

- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[LibOrgBouncycastleJceSpecECPublicKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PublicKey_initWithLibOrgBouncycastleJceSpecECPublicKeySpec_withLibOrgBouncycastleJcajceProviderConfigProviderConfiguration_((LibOrgBouncycastleJceSpecECPublicKeySpec *) keySpec, JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
  }
  else if ([keySpec isKindOfClass:[JavaSecuritySpecECPublicKeySpec class]]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PublicKey_initWithJavaSecuritySpecECPublicKeySpec_((JavaSecuritySpecECPublicKeySpec *) keySpec);
  }
  return [super engineGeneratePublicWithJavaSecuritySpecKeySpec:keySpec];
}

- (id<JavaSecurityPrivateKey>)generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:(LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) getPrivateKeyAlgorithm])) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
  }
  else if ([algOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001DH)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
  }
  else if ([algOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001_CryptoPro_ESDH)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PrivateKey_initWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

- (id<JavaSecurityPublicKey>)generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getAlgorithm];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
  }
  else if ([algOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001DH)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
  }
  else if ([algOid isEqual:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001_CryptoPro_ESDH)]) {
    return new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostBCECGOST3410PublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@$", @"algorithm identifier ", algOid, @" in key not recognised"));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 3, 4, 5, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x4, 6, 7, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x4, 8, 7, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 12, 13, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGetKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[2].selector = @selector(engineTranslateKeyWithJavaSecurityKey:);
  methods[3].selector = @selector(engineGeneratePrivateWithJavaSecuritySpecKeySpec:);
  methods[4].selector = @selector(engineGeneratePublicWithJavaSecuritySpecKeySpec:);
  methods[5].selector = @selector(generatePrivateWithLibOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[6].selector = @selector(generatePublicWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "engineGetKeySpec", "LJavaSecurityKey;LIOSClass;", "LJavaSecuritySpecInvalidKeySpecException;", "engineTranslateKey", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "engineGeneratePrivate", "LJavaSecuritySpecKeySpec;", "engineGeneratePublic", "generatePrivate", "LLibOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "LJavaIoIOException;", "generatePublic", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi = { "JcajceEcgostKeyFactorySpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.ecgost", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi_init(LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi *self) {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilBaseKeyFactorySpi_init(self);
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi *new_LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi *create_LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricEcgostJcajceEcgostKeyFactorySpi)
