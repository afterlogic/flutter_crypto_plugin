//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/SHA224.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCMessageDigest.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestAlgorithmProvider.h"
#include "HMac.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NISTObjectIdentifiers.h"
#include "PKCSObjectIdentifiers.h"
#include "SHA224.h"
#include "SHA224Digest.h"

@interface LibOrgBouncycastleJcajceProviderDigestSHA224 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderDigestSHA224_init(LibOrgBouncycastleJcajceProviderDigestSHA224 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSHA224 *new_LibOrgBouncycastleJcajceProviderDigestSHA224_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSHA224 *create_LibOrgBouncycastleJcajceProviderDigestSHA224_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA224

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA224_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA224_Digest;LLibOrgBouncycastleJcajceProviderDigestSHA224_HashMac;LLibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator;LLibOrgBouncycastleJcajceProviderDigestSHA224_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA224 = { "SHA224", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA224;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA224_init(LibOrgBouncycastleJcajceProviderDigestSHA224 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSHA224 *new_LibOrgBouncycastleJcajceProviderDigestSHA224_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA224 *create_LibOrgBouncycastleJcajceProviderDigestSHA224_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA224)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA224_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA224_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestSHA224_Digest *d = (LibOrgBouncycastleJcajceProviderDigestSHA224_Digest *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestSHA224_Digest class]);
  ((LibOrgBouncycastleJcajceProviderDigestSHA224_Digest *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsSHA224Digest_initWithLibOrgBouncycastleCryptoDigestsSHA224Digest_((LibOrgBouncycastleCryptoDigestsSHA224Digest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsSHA224Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestSHA224;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA224_Digest = { "Digest", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA224_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA224_Digest_init(LibOrgBouncycastleJcajceProviderDigestSHA224_Digest *self) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsSHA224Digest_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA224_Digest *new_LibOrgBouncycastleJcajceProviderDigestSHA224_Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224_Digest, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA224_Digest *create_LibOrgBouncycastleJcajceProviderDigestSHA224_Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA224_Digest)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA224;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac = { "HashMac", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac_init(LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA224Digest_init()));
}

LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac *new_LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac *create_LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA224_HashMac)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA224;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator = { "KeyGenerator", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator_init(LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACSHA224", 224, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator *new_LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator *create_LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA224_KeyGenerator)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.SHA-224" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SHA224" withNSString:@"SHA-224"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha224)) withNSString:@"SHA-224"];
  [provider addAlgorithmWithNSString:@"Mac.PBEWITHHMACSHA224" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_PREFIX, @"$HashMac")];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA224" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_PREFIX, @"$HashMac") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_PREFIX, @"$KeyGenerator")];
  [self addHMACAliasWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA224" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA224)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderDigestSHA224;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings class]) {
    LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderDigestSHA224_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_init(LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings *self) {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings *new_LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings *create_LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA224_Mappings)
