//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/DSASigner.java
//

#include "BigIntegers.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "DSAKCalculator.h"
#include "DSAKeyParameters.h"
#include "DSAParameters.h"
#include "DSAPrivateKeyParameters.h"
#include "DSAPublicKeyParameters.h"
#include "DSASigner.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "RandomDSAKCalculator.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoSignersDSASigner () {
 @public
  id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator_;
  LibOrgBouncycastleCryptoParamsDSAKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

- (JavaMathBigInteger *)calculateEWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                           withByteArray:(IOSByteArray *)message;

- (JavaMathBigInteger *)getRandomizerWithJavaMathBigInteger:(JavaMathBigInteger *)q
                               withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)provided;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersDSASigner, kCalculator_, id<LibOrgBouncycastleCryptoSignersDSAKCalculator>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersDSASigner, key_, LibOrgBouncycastleCryptoParamsDSAKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersDSASigner, random_, JavaSecuritySecureRandom *)

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoSignersDSASigner_calculateEWithJavaMathBigInteger_withByteArray_(LibOrgBouncycastleCryptoSignersDSASigner *self, JavaMathBigInteger *n, IOSByteArray *message);

__attribute__((unused)) static JavaMathBigInteger *LibOrgBouncycastleCryptoSignersDSASigner_getRandomizerWithJavaMathBigInteger_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoSignersDSASigner *self, JavaMathBigInteger *q, JavaSecuritySecureRandom *provided);

@implementation LibOrgBouncycastleCryptoSignersDSASigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoSignersDSASigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLibOrgBouncycastleCryptoSignersDSAKCalculator:(id<LibOrgBouncycastleCryptoSignersDSAKCalculator>)kCalculator {
  LibOrgBouncycastleCryptoSignersDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(self, kCalculator);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  JavaSecuritySecureRandom *providedRandom = nil;
  if (forSigning) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->key_ = (LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters class]);
      providedRandom = [rParam getRandom];
    }
    else {
      self->key_ = (LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters class]);
  }
  self->random_ = [self initSecureRandomWithBoolean:forSigning && ![((id<LibOrgBouncycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) isDeterministic] withJavaSecuritySecureRandom:providedRandom];
}

- (JavaMathBigInteger *)getOrder {
  return [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAKeyParameters *) nil_chk(key_)) getParameters])) getQ];
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  LibOrgBouncycastleCryptoParamsDSAParameters *params = [((LibOrgBouncycastleCryptoParamsDSAKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *q = [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk(params)) getQ];
  JavaMathBigInteger *m = LibOrgBouncycastleCryptoSignersDSASigner_calculateEWithJavaMathBigInteger_withByteArray_(self, q, message);
  JavaMathBigInteger *x = [((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters class])))) getX];
  if ([((id<LibOrgBouncycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) isDeterministic]) {
    [kCalculator_ init__WithJavaMathBigInteger:q withJavaMathBigInteger:x withByteArray:message];
  }
  else {
    [kCalculator_ init__WithJavaMathBigInteger:q withJavaSecuritySecureRandom:random_];
  }
  JavaMathBigInteger *k = [kCalculator_ nextK];
  JavaMathBigInteger *r = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([params getG])) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(k)) addWithJavaMathBigInteger:LibOrgBouncycastleCryptoSignersDSASigner_getRandomizerWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, q, random_)] withJavaMathBigInteger:[params getP]])) modWithJavaMathBigInteger:q];
  k = [((JavaMathBigInteger *) nil_chk([k modInverseWithJavaMathBigInteger:q])) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(m)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x)) multiplyWithJavaMathBigInteger:r]]];
  JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk(k)) modWithJavaMathBigInteger:q];
  return [IOSObjectArray newArrayWithObjects:(id[]){ r, s } count:2 type:JavaMathBigInteger_class_()];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  LibOrgBouncycastleCryptoParamsDSAParameters *params = [((LibOrgBouncycastleCryptoParamsDSAKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *q = [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk(params)) getQ];
  JavaMathBigInteger *m = LibOrgBouncycastleCryptoSignersDSASigner_calculateEWithJavaMathBigInteger_withByteArray_(self, q, message);
  JavaMathBigInteger *zero = JavaMathBigInteger_valueOfWithLong_(0);
  if ([((JavaMathBigInteger *) nil_chk(zero)) compareToWithId:r] >= 0 || [((JavaMathBigInteger *) nil_chk(q)) compareToWithId:r] <= 0) {
    return false;
  }
  if ([zero compareToWithId:s] >= 0 || [((JavaMathBigInteger *) nil_chk(q)) compareToWithId:s] <= 0) {
    return false;
  }
  JavaMathBigInteger *w = [((JavaMathBigInteger *) nil_chk(s)) modInverseWithJavaMathBigInteger:q];
  JavaMathBigInteger *u1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(m)) multiplyWithJavaMathBigInteger:w])) modWithJavaMathBigInteger:q];
  JavaMathBigInteger *u2 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) multiplyWithJavaMathBigInteger:w])) modWithJavaMathBigInteger:q];
  JavaMathBigInteger *p = [params getP];
  u1 = [((JavaMathBigInteger *) nil_chk([params getG])) modPowWithJavaMathBigInteger:u1 withJavaMathBigInteger:p];
  u2 = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters class])))) getY])) modPowWithJavaMathBigInteger:u2 withJavaMathBigInteger:p];
  JavaMathBigInteger *v = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(u1)) multiplyWithJavaMathBigInteger:u2])) modWithJavaMathBigInteger:p])) modWithJavaMathBigInteger:q];
  return [((JavaMathBigInteger *) nil_chk(v)) isEqual:r];
}

- (JavaMathBigInteger *)calculateEWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                           withByteArray:(IOSByteArray *)message {
  return LibOrgBouncycastleCryptoSignersDSASigner_calculateEWithJavaMathBigInteger_withByteArray_(self, n, message);
}

- (JavaSecuritySecureRandom *)initSecureRandomWithBoolean:(jboolean)needed
                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)provided {
  return !needed ? nil : (provided != nil) ? provided : LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
}

- (JavaMathBigInteger *)getRandomizerWithJavaMathBigInteger:(JavaMathBigInteger *)q
                               withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)provided {
  return LibOrgBouncycastleCryptoSignersDSASigner_getRandomizerWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, q, provided);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoSignersDSAKCalculator:);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getOrder);
  methods[4].selector = @selector(generateSignatureWithByteArray:);
  methods[5].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[6].selector = @selector(calculateEWithJavaMathBigInteger:withByteArray:);
  methods[7].selector = @selector(initSecureRandomWithBoolean:withJavaSecuritySecureRandom:);
  methods[8].selector = @selector(getRandomizerWithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "kCalculator_", "LLibOrgBouncycastleCryptoSignersDSAKCalculator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsDSAKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoSignersDSAKCalculator;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;", "calculateE", "LJavaMathBigInteger;[B", "initSecureRandom", "ZLJavaSecuritySecureRandom;", "getRandomizer", "LJavaMathBigInteger;LJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoSignersDSASigner = { "DSASigner", "lib.org.bouncycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoSignersDSASigner;
}

@end

void LibOrgBouncycastleCryptoSignersDSASigner_init(LibOrgBouncycastleCryptoSignersDSASigner *self) {
  NSObject_init(self);
  self->kCalculator_ = new_LibOrgBouncycastleCryptoSignersRandomDSAKCalculator_init();
}

LibOrgBouncycastleCryptoSignersDSASigner *new_LibOrgBouncycastleCryptoSignersDSASigner_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersDSASigner, init)
}

LibOrgBouncycastleCryptoSignersDSASigner *create_LibOrgBouncycastleCryptoSignersDSASigner_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersDSASigner, init)
}

void LibOrgBouncycastleCryptoSignersDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(LibOrgBouncycastleCryptoSignersDSASigner *self, id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator) {
  NSObject_init(self);
  self->kCalculator_ = kCalculator;
}

LibOrgBouncycastleCryptoSignersDSASigner *new_LibOrgBouncycastleCryptoSignersDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersDSASigner, initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_, kCalculator)
}

LibOrgBouncycastleCryptoSignersDSASigner *create_LibOrgBouncycastleCryptoSignersDSASigner_initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_(id<LibOrgBouncycastleCryptoSignersDSAKCalculator> kCalculator) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersDSASigner, initWithLibOrgBouncycastleCryptoSignersDSAKCalculator_, kCalculator)
}

JavaMathBigInteger *LibOrgBouncycastleCryptoSignersDSASigner_calculateEWithJavaMathBigInteger_withByteArray_(LibOrgBouncycastleCryptoSignersDSASigner *self, JavaMathBigInteger *n, IOSByteArray *message) {
  if ([((JavaMathBigInteger *) nil_chk(n)) bitLength] >= ((IOSByteArray *) nil_chk(message))->size_ * 8) {
    return new_JavaMathBigInteger_initWithInt_withByteArray_(1, message);
  }
  else {
    IOSByteArray *trunc = [IOSByteArray newArrayWithLength:[n bitLength] / 8];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(message, 0, trunc, 0, trunc->size_);
    return new_JavaMathBigInteger_initWithInt_withByteArray_(1, trunc);
  }
}

JavaMathBigInteger *LibOrgBouncycastleCryptoSignersDSASigner_getRandomizerWithJavaMathBigInteger_withJavaSecuritySecureRandom_(LibOrgBouncycastleCryptoSignersDSASigner *self, JavaMathBigInteger *q, JavaSecuritySecureRandom *provided) {
  jint randomBits = 7;
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(LibOrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(randomBits, provided != nil ? provided : LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom()))) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(128)])) multiplyWithJavaMathBigInteger:q];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoSignersDSASigner)
