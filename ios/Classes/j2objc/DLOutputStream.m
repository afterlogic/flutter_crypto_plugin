//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/DLOutputStream.java
//

#include "ASN1Encodable.h"
#include "ASN1OutputStream.h"
#include "ASN1Primitive.h"
#include "DLOutputStream.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"

@implementation LibOrgBouncycastleAsn1DLOutputStream

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  LibOrgBouncycastleAsn1DLOutputStream_initWithJavaIoOutputStream_(self, os);
  return self;
}

- (void)writeObjectWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)obj {
  if (obj != nil) {
    [((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([((LibOrgBouncycastleAsn1ASN1Primitive *) nil_chk([obj toASN1Primitive])) toDLObject])) encodeWithLibOrgBouncycastleAsn1ASN1OutputStream:self];
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"null object detected");
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:);
  methods[1].selector = @selector(writeObjectWithLibOrgBouncycastleAsn1ASN1Encodable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoOutputStream;", "writeObject", "LLibOrgBouncycastleAsn1ASN1Encodable;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleAsn1DLOutputStream = { "DLOutputStream", "lib.org.bouncycastle.asn1", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleAsn1DLOutputStream;
}

@end

void LibOrgBouncycastleAsn1DLOutputStream_initWithJavaIoOutputStream_(LibOrgBouncycastleAsn1DLOutputStream *self, JavaIoOutputStream *os) {
  LibOrgBouncycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(self, os);
}

LibOrgBouncycastleAsn1DLOutputStream *new_LibOrgBouncycastleAsn1DLOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *os) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleAsn1DLOutputStream, initWithJavaIoOutputStream_, os)
}

LibOrgBouncycastleAsn1DLOutputStream *create_LibOrgBouncycastleAsn1DLOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *os) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleAsn1DLOutputStream, initWithJavaIoOutputStream_, os)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleAsn1DLOutputStream)
