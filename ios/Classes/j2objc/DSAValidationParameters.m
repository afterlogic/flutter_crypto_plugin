//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/params/DSAValidationParameters.java
//

#include "Arrays.h"
#include "DSAValidationParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastleCryptoParamsDSAValidationParameters () {
 @public
  jint usageIndex_;
  IOSByteArray *seed_;
  jint counter_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoParamsDSAValidationParameters, seed_, IOSByteArray *)

@implementation LibOrgBouncycastleCryptoParamsDSAValidationParameters

- (instancetype)initWithByteArray:(IOSByteArray *)seed
                          withInt:(jint)counter {
  LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(self, seed, counter);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)seed
                          withInt:(jint)counter
                          withInt:(jint)usageIndex {
  LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_withInt_(self, seed, counter, usageIndex);
  return self;
}

- (jint)getCounter {
  return counter_;
}

- (IOSByteArray *)getSeed {
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(seed_);
}

- (jint)getUsageIndex {
  return usageIndex_;
}

- (NSUInteger)hash {
  return counter_ ^ LibOrgBouncycastleUtilArrays_hashCodeWithByteArray_(seed_);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[LibOrgBouncycastleCryptoParamsDSAValidationParameters class]])) {
    return false;
  }
  LibOrgBouncycastleCryptoParamsDSAValidationParameters *other = (LibOrgBouncycastleCryptoParamsDSAValidationParameters *) cast_chk(o, [LibOrgBouncycastleCryptoParamsDSAValidationParameters class]);
  if (((LibOrgBouncycastleCryptoParamsDSAValidationParameters *) nil_chk(other))->counter_ != self->counter_) {
    return false;
  }
  return LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(self->seed_, other->seed_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withInt:);
  methods[1].selector = @selector(initWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(getCounter);
  methods[3].selector = @selector(getSeed);
  methods[4].selector = @selector(getUsageIndex);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "usageIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BI", "[BII", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoParamsDSAValidationParameters = { "DSAValidationParameters", "lib.org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoParamsDSAValidationParameters;
}

@end

void LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoParamsDSAValidationParameters *self, IOSByteArray *seed, jint counter) {
  LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_withInt_(self, seed, counter, -1);
}

LibOrgBouncycastleCryptoParamsDSAValidationParameters *new_LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(IOSByteArray *seed, jint counter) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsDSAValidationParameters, initWithByteArray_withInt_, seed, counter)
}

LibOrgBouncycastleCryptoParamsDSAValidationParameters *create_LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(IOSByteArray *seed, jint counter) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsDSAValidationParameters, initWithByteArray_withInt_, seed, counter)
}

void LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_withInt_(LibOrgBouncycastleCryptoParamsDSAValidationParameters *self, IOSByteArray *seed, jint counter, jint usageIndex) {
  NSObject_init(self);
  self->seed_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(seed);
  self->counter_ = counter;
  self->usageIndex_ = usageIndex;
}

LibOrgBouncycastleCryptoParamsDSAValidationParameters *new_LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_withInt_(IOSByteArray *seed, jint counter, jint usageIndex) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoParamsDSAValidationParameters, initWithByteArray_withInt_withInt_, seed, counter, usageIndex)
}

LibOrgBouncycastleCryptoParamsDSAValidationParameters *create_LibOrgBouncycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_withInt_(IOSByteArray *seed, jint counter, jint usageIndex) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoParamsDSAValidationParameters, initWithByteArray_withInt_withInt_, seed, counter, usageIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoParamsDSAValidationParameters)
