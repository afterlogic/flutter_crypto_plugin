//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/util/PublicKeyFactory.java
//

#include "ASN1Encodable.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "AsymmetricKeyParameter.h"
#include "CryptoProObjectIdentifiers.h"
#include "CustomNamedCurves.h"
#include "DERBitString.h"
#include "DEROctetString.h"
#include "DHParameter.h"
#include "DHParameters.h"
#include "DHPublicKey.h"
#include "DHPublicKeyParameters.h"
#include "DHValidationParameters.h"
#include "DSAParameter.h"
#include "DSAParameters.h"
#include "DSAPublicKeyParameters.h"
#include "DSTU4145BinaryField.h"
#include "DSTU4145ECBinary.h"
#include "DSTU4145NamedCurves.h"
#include "DSTU4145Params.h"
#include "DSTU4145PointEncoder.h"
#include "DomainParameters.h"
#include "ECCurve.h"
#include "ECDomainParameters.h"
#include "ECGOST3410NamedCurves.h"
#include "ECGOST3410Parameters.h"
#include "ECNamedCurveTable.h"
#include "ECNamedDomainParameters.h"
#include "ECPoint.h"
#include "ECPublicKeyParameters.h"
#include "Ed25519PublicKeyParameters.h"
#include "Ed448PublicKeyParameters.h"
#include "EdECObjectIdentifiers.h"
#include "ElGamalParameter.h"
#include "ElGamalParameters.h"
#include "ElGamalPublicKeyParameters.h"
#include "GOST3410PublicKeyAlgParameters.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OIWObjectIdentifiers.h"
#include "PKCSObjectIdentifiers.h"
#include "PublicKeyFactory.h"
#include "RSAKeyParameters.h"
#include "RSAPublicKey.h"
#include "RosstandartObjectIdentifiers.h"
#include "SubjectPublicKeyInfo.h"
#include "UAObjectIdentifiers.h"
#include "ValidationParams.h"
#include "X25519PublicKeyParameters.h"
#include "X448PublicKeyParameters.h"
#include "X509ObjectIdentifiers.h"
#include "X962Parameters.h"
#include "X9ECParameters.h"
#include "X9ECPoint.h"
#include "X9IntegerConverter.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory ()

+ (IOSByteArray *)getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                       withId:(id)defaultParams
                                                                      withInt:(jint)expectedSize;

@end

inline id<JavaUtilMap> LibOrgBouncycastleCryptoUtilPublicKeyFactory_get_converters(void);
inline id<JavaUtilMap> LibOrgBouncycastleCryptoUtilPublicKeyFactory_set_converters(id<JavaUtilMap> value);
static id<JavaUtilMap> LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoUtilPublicKeyFactory, converters, id<JavaUtilMap>)

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoUtilPublicKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_withInt_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo, id defaultParams, jint expectedSize);

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter : NSObject

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter *self);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

- (void)reverseBytesWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init(void);

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_reverseBytesWithByteArray_(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter *self, IOSByteArray *bytes);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter)

@interface LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter : LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

- (instancetype)init;

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter)

__attribute__((unused)) static void LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter *self);

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoUtilPublicKeyFactory)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)keyInfoData {
  return LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithByteArray_(keyInfoData);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithJavaIoInputStream_(inStr);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  return LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
}

+ (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                               withId:(id)defaultParams {
  return LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_(keyInfo, defaultParams);
}

+ (IOSByteArray *)getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                       withId:(id)defaultParams
                                                                      withInt:(jint)expectedSize {
  return LibOrgBouncycastleCryptoUtilPublicKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_withInt_(keyInfo, defaultParams, expectedSize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 5, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createKeyWithByteArray:);
  methods[2].selector = @selector(createKeyWithJavaIoInputStream:);
  methods[3].selector = @selector(createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[4].selector = @selector(createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  methods[5].selector = @selector(getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "converters", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "createKey", "[B", "LJavaIoIOException;", "LJavaIoInputStream;", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "getRawKey", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;I", &LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters, "LLibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter;LLibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory = { "PublicKeyFactory", "lib.org.bouncycastle.crypto.util", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, 9, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoUtilPublicKeyFactory class]) {
    LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters = new_JavaUtilHashMap_init();
    {
      (void) [LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters putWithId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, rsaEncryption) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_RSASSA_PSS) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1X509X509ObjectIdentifiers, id_ea_rsa) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, dhpublicnumber) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_dsa) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, dsaWithSHA1) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1CryptoproCryptoProObjectIdentifiers, gostR3410_2001) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1RosstandartRosstandartObjectIdentifiers, id_tc26_gost_3410_12_256) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1RosstandartRosstandartObjectIdentifiers, id_tc26_gost_3410_12_512) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1UaUAObjectIdentifiers, dstu4145be) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1UaUAObjectIdentifiers, dstu4145le) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_X25519) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_X448) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_Ed25519) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter_init()];
      (void) [((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) putWithId:JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_Ed448) withId:new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter_init()];
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoUtilPublicKeyFactory)
  }
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory, init)
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithByteArray_(IOSByteArray *keyInfoData) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_initialize();
  return LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(keyInfoData)));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_initialize();
  return LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([new_LibOrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inStr) readObject]));
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_initialize();
  return LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_(keyInfo, nil);
}

LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *LibOrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo, id defaultParams) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_initialize();
  LibOrgBouncycastleAsn1X509AlgorithmIdentifier *algId = [((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm];
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter *converter = (LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter *) cast_chk([((id<JavaUtilMap>) nil_chk(LibOrgBouncycastleCryptoUtilPublicKeyFactory_converters)) getWithId:[((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm]], [LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter class]);
  if (converter != nil) {
    return [converter getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:keyInfo withId:defaultParams];
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"algorithm identifier in public key not recognised: ", [algId getAlgorithm]));
  }
}

IOSByteArray *LibOrgBouncycastleCryptoUtilPublicKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_withInt_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo, id defaultParams, jint expectedSize) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_initialize();
  IOSByteArray *result = [((LibOrgBouncycastleAsn1DERBitString *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getPublicKeyData])) getOctets];
  if (expectedSize != ((IOSByteArray *) nil_chk(result))->size_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"public key encoding has incorrect length");
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x400, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter = { "SubjectPublicKeyInfoConverter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0x40a, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1PkcsRSAPublicKey *pubKey = LibOrgBouncycastleAsn1PkcsRSAPublicKey_getInstanceWithId_([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) parsePublicKey]);
  return new_LibOrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(false, [((LibOrgBouncycastleAsn1PkcsRSAPublicKey *) nil_chk(pubKey)) getModulus], [pubKey getPublicExponent]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter = { "RSAConverter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_RSAConverter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1X9DHPublicKey *dhPublicKey = LibOrgBouncycastleAsn1X9DHPublicKey_getInstanceWithId_([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) parsePublicKey]);
  JavaMathBigInteger *y = [((LibOrgBouncycastleAsn1X9DHPublicKey *) nil_chk(dhPublicKey)) getY];
  LibOrgBouncycastleAsn1X9DomainParameters *dhParams = LibOrgBouncycastleAsn1X9DomainParameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getAlgorithm])) getParameters]);
  JavaMathBigInteger *p = [((LibOrgBouncycastleAsn1X9DomainParameters *) nil_chk(dhParams)) getP];
  JavaMathBigInteger *g = [dhParams getG];
  JavaMathBigInteger *q = [dhParams getQ];
  JavaMathBigInteger *j = nil;
  if ([dhParams getJ] != nil) {
    j = [dhParams getJ];
  }
  LibOrgBouncycastleCryptoParamsDHValidationParameters *validation = nil;
  LibOrgBouncycastleAsn1X9ValidationParams *dhValidationParms = [dhParams getValidationParams];
  if (dhValidationParms != nil) {
    IOSByteArray *seed = [dhValidationParms getSeed];
    JavaMathBigInteger *pgenCounter = [dhValidationParms getPgenCounter];
    validation = new_LibOrgBouncycastleCryptoParamsDHValidationParameters_initWithByteArray_withInt_(seed, [((JavaMathBigInteger *) nil_chk(pgenCounter)) intValue]);
  }
  return new_LibOrgBouncycastleCryptoParamsDHPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDHParameters_(y, new_LibOrgBouncycastleCryptoParamsDHParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDHValidationParameters_(p, g, q, j, validation));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter = { "DHPublicNumberConverter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHPublicNumberConverter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1PkcsDHParameter *params = LibOrgBouncycastleAsn1PkcsDHParameter_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getParameters]);
  LibOrgBouncycastleAsn1ASN1Integer *derY = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([keyInfo parsePublicKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
  JavaMathBigInteger *lVal = [((LibOrgBouncycastleAsn1PkcsDHParameter *) nil_chk(params)) getL];
  jint l = lVal == nil ? 0 : [lVal intValue];
  LibOrgBouncycastleCryptoParamsDHParameters *dhParams = new_LibOrgBouncycastleCryptoParamsDHParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_([params getP], [params getG], nil, l);
  return new_LibOrgBouncycastleCryptoParamsDHPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDHParameters_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue], dhParams);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter = { "DHAgreementConverter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DHAgreementConverter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1OiwElGamalParameter *params = LibOrgBouncycastleAsn1OiwElGamalParameter_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getParameters]);
  LibOrgBouncycastleAsn1ASN1Integer *derY = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([keyInfo parsePublicKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
  return new_LibOrgBouncycastleCryptoParamsElGamalPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsElGamalParameters_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue], new_LibOrgBouncycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1OiwElGamalParameter *) nil_chk(params)) getP], [params getG]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter = { "ElGamalConverter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ElGamalConverter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1ASN1Integer *derY = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) parsePublicKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
  id<LibOrgBouncycastleAsn1ASN1Encodable> de = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getAlgorithm])) getParameters];
  LibOrgBouncycastleCryptoParamsDSAParameters *parameters = nil;
  if (de != nil) {
    LibOrgBouncycastleAsn1X509DSAParameter *params = LibOrgBouncycastleAsn1X509DSAParameter_getInstanceWithId_([de toASN1Primitive]);
    parameters = new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1X509DSAParameter *) nil_chk(params)) getP], [params getQ], [params getG]);
  }
  return new_LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_([((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue], parameters);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter = { "DSAConverter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSAConverter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1X9X962Parameters *params = LibOrgBouncycastleAsn1X9X962Parameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getParameters]);
  LibOrgBouncycastleCryptoParamsECDomainParameters *dParams;
  if ([((LibOrgBouncycastleAsn1X9X962Parameters *) nil_chk(params)) isNamedCurve]) {
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([params getParameters], [LibOrgBouncycastleAsn1ASN1ObjectIdentifier class]);
    LibOrgBouncycastleAsn1X9X9ECParameters *x9 = LibOrgBouncycastleCryptoEcCustomNamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
    if (x9 == nil) {
      x9 = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
    }
    dParams = new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(oid, [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve], [x9 getG], [x9 getN], [x9 getH], [x9 getSeed]);
  }
  else if ([params isImplicitlyCA]) {
    dParams = (LibOrgBouncycastleCryptoParamsECDomainParameters *) cast_chk(defaultParams, [LibOrgBouncycastleCryptoParamsECDomainParameters class]);
  }
  else {
    LibOrgBouncycastleAsn1X9X9ECParameters *x9 = LibOrgBouncycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
    dParams = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve], [x9 getG], [x9 getN], [x9 getH], [x9 getSeed]);
  }
  LibOrgBouncycastleAsn1DERBitString *bits = [keyInfo getPublicKeyData];
  IOSByteArray *data = [((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bits)) getBytes];
  LibOrgBouncycastleAsn1ASN1OctetString *key = new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(data);
  if (IOSByteArray_Get(nil_chk(data), 0) == (jint) 0x04 && IOSByteArray_Get(data, 1) == data->size_ - 2 && (IOSByteArray_Get(data, 2) == (jint) 0x02 || IOSByteArray_Get(data, 2) == (jint) 0x03)) {
    jint qLength = [new_LibOrgBouncycastleAsn1X9X9IntegerConverter_init() getByteLengthWithLibOrgBouncycastleMathEcECCurve:[((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dParams)) getCurve]];
    if (qLength >= data->size_ - 3) {
      @try {
        key = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(data), [LibOrgBouncycastleAsn1ASN1OctetString class]);
      }
      @catch (JavaIoIOException *ex) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
      }
    }
  }
  LibOrgBouncycastleAsn1X9X9ECPoint *derQ = new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleAsn1ASN1OctetString_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dParams)) getCurve], key);
  return new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([derQ getPoint], dParams);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter = { "ECConverter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_ECConverter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1DERBitString *bits = [((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getPublicKeyData];
  LibOrgBouncycastleAsn1ASN1OctetString *key;
  @try {
    key = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_([((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bits)) getBytes]), [LibOrgBouncycastleAsn1ASN1OctetString class]);
  }
  @catch (JavaIoIOException *ex) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
  }
  IOSByteArray *keyEnc = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(key)) getOctets];
  IOSByteArray *x9Encoding = [IOSByteArray newArrayWithLength:65];
  *IOSByteArray_GetRef(x9Encoding, 0) = (jint) 0x04;
  for (jint i = 1; i <= 32; ++i) {
    *IOSByteArray_GetRef(x9Encoding, i) = IOSByteArray_Get(nil_chk(keyEnc), 32 - i);
    *IOSByteArray_GetRef(x9Encoding, i + 32) = IOSByteArray_Get(keyEnc, 64 - i);
  }
  LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *gostParams = LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getAlgorithm])) getParameters]);
  LibOrgBouncycastleCryptoParamsECGOST3410Parameters *ecDomainParameters = new_LibOrgBouncycastleCryptoParamsECGOST3410Parameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *) nil_chk(gostParams)) getPublicKeyParamSet], LibOrgBouncycastleAsn1CryptoproECGOST3410NamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([gostParams getPublicKeyParamSet])), [gostParams getPublicKeyParamSet], [gostParams getDigestParamSet], [gostParams getEncryptionParamSet]);
  return new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleMathEcECCurve *) nil_chk([ecDomainParameters getCurve])) decodePointWithByteArray:x9Encoding], ecDomainParameters);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter = { "GOST3410_2001Converter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2001Converter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1ASN1ObjectIdentifier *algOid = [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getAlgorithm];
  LibOrgBouncycastleAsn1DERBitString *bits = [keyInfo getPublicKeyData];
  LibOrgBouncycastleAsn1ASN1OctetString *key;
  @try {
    key = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_([((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bits)) getBytes]), [LibOrgBouncycastleAsn1ASN1OctetString class]);
  }
  @catch (JavaIoIOException *ex) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
  }
  IOSByteArray *keyEnc = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(key)) getOctets];
  jint fieldSize = 32;
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOid)) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1RosstandartRosstandartObjectIdentifiers, id_tc26_gost_3410_12_512)]) {
    fieldSize = 64;
  }
  jint keySize = 2 * fieldSize;
  IOSByteArray *x9Encoding = [IOSByteArray newArrayWithLength:1 + keySize];
  *IOSByteArray_GetRef(x9Encoding, 0) = (jint) 0x04;
  for (jint i = 1; i <= fieldSize; ++i) {
    *IOSByteArray_GetRef(x9Encoding, i) = IOSByteArray_Get(nil_chk(keyEnc), fieldSize - i);
    *IOSByteArray_GetRef(x9Encoding, i + fieldSize) = IOSByteArray_Get(keyEnc, keySize - i);
  }
  LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *gostParams = LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getAlgorithm])) getParameters]);
  LibOrgBouncycastleCryptoParamsECGOST3410Parameters *ecDomainParameters = new_LibOrgBouncycastleCryptoParamsECGOST3410Parameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(new_LibOrgBouncycastleCryptoParamsECNamedDomainParameters_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleAsn1CryptoproGOST3410PublicKeyAlgParameters *) nil_chk(gostParams)) getPublicKeyParamSet], LibOrgBouncycastleAsn1CryptoproECGOST3410NamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([gostParams getPublicKeyParamSet])), [gostParams getPublicKeyParamSet], [gostParams getDigestParamSet], [gostParams getEncryptionParamSet]);
  return new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_([((LibOrgBouncycastleMathEcECCurve *) nil_chk([ecDomainParameters getCurve])) decodePointWithByteArray:x9Encoding], ecDomainParameters);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter = { "GOST3410_2012Converter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_GOST3410_2012Converter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  LibOrgBouncycastleAsn1DERBitString *bits = [((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getPublicKeyData];
  LibOrgBouncycastleAsn1ASN1OctetString *key;
  @try {
    key = (LibOrgBouncycastleAsn1ASN1OctetString *) cast_chk(LibOrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_([((LibOrgBouncycastleAsn1DERBitString *) nil_chk(bits)) getBytes]), [LibOrgBouncycastleAsn1ASN1OctetString class]);
  }
  @catch (JavaIoIOException *ex) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
  }
  IOSByteArray *keyEnc = [((LibOrgBouncycastleAsn1ASN1OctetString *) nil_chk(key)) getOctets];
  if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getAlgorithm])) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1UaUAObjectIdentifiers, dstu4145le)]) {
    LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_reverseBytesWithByteArray_(self, keyEnc);
  }
  LibOrgBouncycastleAsn1UaDSTU4145Params *dstuParams = LibOrgBouncycastleAsn1UaDSTU4145Params_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getAlgorithm])) getParameters]);
  LibOrgBouncycastleCryptoParamsECDomainParameters *ecDomain;
  if ([((LibOrgBouncycastleAsn1UaDSTU4145Params *) nil_chk(dstuParams)) isNamedCurve]) {
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid = [dstuParams getNamedCurve];
    ecDomain = LibOrgBouncycastleAsn1UaDSTU4145NamedCurves_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOid);
  }
  else {
    LibOrgBouncycastleAsn1UaDSTU4145ECBinary *binary = [dstuParams getECBinary];
    IOSByteArray *b_bytes = [((LibOrgBouncycastleAsn1UaDSTU4145ECBinary *) nil_chk(binary)) getB];
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getAlgorithm])) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1UaUAObjectIdentifiers, dstu4145le)]) {
      LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_reverseBytesWithByteArray_(self, b_bytes);
    }
    LibOrgBouncycastleAsn1UaDSTU4145BinaryField *field = [binary getField];
    LibOrgBouncycastleMathEcECCurve *curve = new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1UaDSTU4145BinaryField *) nil_chk(field)) getM], [field getK1], [field getK2], [field getK3], [binary getA], new_JavaMathBigInteger_initWithInt_withByteArray_(1, b_bytes));
    IOSByteArray *g_bytes = [binary getG];
    if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getAlgorithm])) getAlgorithm])) isEqual:JreLoadStatic(LibOrgBouncycastleAsn1UaUAObjectIdentifiers, dstu4145le)]) {
      LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_reverseBytesWithByteArray_(self, g_bytes);
    }
    ecDomain = new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(curve, LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_decodePointWithLibOrgBouncycastleMathEcECCurve_withByteArray_(curve, g_bytes), [binary getN]);
  }
  return new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleAsn1UaDSTU4145PointEncoder_decodePointWithLibOrgBouncycastleMathEcECCurve_withByteArray_([((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecDomain)) getCurve], keyEnc), ecDomain);
}

- (void)reverseBytesWithByteArray:(IOSByteArray *)bytes {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_reverseBytesWithByteArray_(self, bytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  methods[2].selector = @selector(reverseBytesWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LJavaIoIOException;", "reverseBytes", "[B", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter = { "DSTUConverter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 3, 0, 5, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter, init)
}

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter_reverseBytesWithByteArray_(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter *self, IOSByteArray *bytes) {
  jbyte tmp;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(bytes))->size_ / 2; i++) {
    tmp = IOSByteArray_Get(bytes, i);
    *IOSByteArray_GetRef(bytes, i) = IOSByteArray_Get(bytes, bytes->size_ - 1 - i);
    *IOSByteArray_GetRef(bytes, bytes->size_ - 1 - i) = tmp;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_DSTUConverter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  return new_LibOrgBouncycastleCryptoParamsX25519PublicKeyParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoUtilPublicKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_withInt_(keyInfo, defaultParams, LibOrgBouncycastleCryptoParamsX25519PublicKeyParameters_KEY_SIZE), 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter = { "X25519Converter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X25519Converter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  return new_LibOrgBouncycastleCryptoParamsX448PublicKeyParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoUtilPublicKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_withInt_(keyInfo, defaultParams, LibOrgBouncycastleCryptoParamsX448PublicKeyParameters_KEY_SIZE), 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter = { "X448Converter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_X448Converter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  return new_LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoUtilPublicKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_withInt_(keyInfo, defaultParams, LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters_KEY_SIZE), 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter = { "Ed25519Converter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed25519Converter)

@implementation LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                            withId:(id)defaultParams {
  return new_LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters_initWithByteArray_withInt_(LibOrgBouncycastleCryptoUtilPublicKeyFactory_getRawKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_withInt_(keyInfo, defaultParams, LibOrgBouncycastleCryptoParamsEd448PublicKeyParameters_KEY_SIZE), 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPublicKeyParametersWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKeyParameters", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LNSObject;", "LLibOrgBouncycastleCryptoUtilPublicKeyFactory;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter = { "Ed448Converter", "lib.org.bouncycastle.crypto.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter;
}

@end

void LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter_init(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter *self) {
  LibOrgBouncycastleCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_init(self);
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter *new_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter, init)
}

LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter *create_LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoUtilPublicKeyFactory_Ed448Converter)
