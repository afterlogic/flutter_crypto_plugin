//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/modes/kgcm/KGCMUtil_512.java
//

#include "IOSPrimitiveArray.h"
#include "Interleave.h"
#include "J2ObjC_source.h"
#include "KGCMUtil_512.h"

@implementation LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512

+ (jint)SIZE {
  return LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)addWithLongArray:(IOSLongArray *)x
           withLongArray:(IOSLongArray *)y
           withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_addWithLongArray_withLongArray_withLongArray_(x, y, z);
}

+ (void)copy__WithLongArray:(IOSLongArray *)x
              withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_copy__WithLongArray_withLongArray_(x, z);
}

+ (jboolean)equalWithLongArray:(IOSLongArray *)x
                 withLongArray:(IOSLongArray *)y {
  return LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_equalWithLongArray_withLongArray_(x, y);
}

+ (void)multiplyWithLongArray:(IOSLongArray *)x
                withLongArray:(IOSLongArray *)y
                withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_multiplyWithLongArray_withLongArray_withLongArray_(x, y, z);
}

+ (void)multiplyXWithLongArray:(IOSLongArray *)x
                 withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_multiplyXWithLongArray_withLongArray_(x, z);
}

+ (void)multiplyX8WithLongArray:(IOSLongArray *)x
                  withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_multiplyX8WithLongArray_withLongArray_(x, z);
}

+ (void)oneWithLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_oneWithLongArray_(z);
}

+ (void)squareWithLongArray:(IOSLongArray *)x
              withLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_squareWithLongArray_withLongArray_(x, z);
}

+ (void)xWithLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_xWithLongArray_(z);
}

+ (void)zeroWithLongArray:(IOSLongArray *)z {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_zeroWithLongArray_(z);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithLongArray:withLongArray:withLongArray:);
  methods[2].selector = @selector(copy__WithLongArray:withLongArray:);
  methods[3].selector = @selector(equalWithLongArray:withLongArray:);
  methods[4].selector = @selector(multiplyWithLongArray:withLongArray:withLongArray:);
  methods[5].selector = @selector(multiplyXWithLongArray:withLongArray:);
  methods[6].selector = @selector(multiplyX8WithLongArray:withLongArray:);
  methods[7].selector = @selector(oneWithLongArray:);
  methods[8].selector = @selector(squareWithLongArray:withLongArray:);
  methods[9].selector = @selector(xWithLongArray:);
  methods[10].selector = @selector(zeroWithLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "[J[J[J", "copy", "[J[J", "equal", "multiply", "multiplyX", "multiplyX8", "one", "[J", "square", "x", "zero" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512 = { "KGCMUtil_512", "lib.org.bouncycastle.crypto.modes.kgcm", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512;
}

@end

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_init(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512 *new_LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512, init)
}

LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512 *create_LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512, init)
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_addWithLongArray_withLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *y, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = IOSLongArray_Get(nil_chk(x), 0) ^ IOSLongArray_Get(nil_chk(y), 0);
  *IOSLongArray_GetRef(z, 1) = IOSLongArray_Get(x, 1) ^ IOSLongArray_Get(y, 1);
  *IOSLongArray_GetRef(z, 2) = IOSLongArray_Get(x, 2) ^ IOSLongArray_Get(y, 2);
  *IOSLongArray_GetRef(z, 3) = IOSLongArray_Get(x, 3) ^ IOSLongArray_Get(y, 3);
  *IOSLongArray_GetRef(z, 4) = IOSLongArray_Get(x, 4) ^ IOSLongArray_Get(y, 4);
  *IOSLongArray_GetRef(z, 5) = IOSLongArray_Get(x, 5) ^ IOSLongArray_Get(y, 5);
  *IOSLongArray_GetRef(z, 6) = IOSLongArray_Get(x, 6) ^ IOSLongArray_Get(y, 6);
  *IOSLongArray_GetRef(z, 7) = IOSLongArray_Get(x, 7) ^ IOSLongArray_Get(y, 7);
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_copy__WithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = IOSLongArray_Get(nil_chk(x), 0);
  *IOSLongArray_GetRef(z, 1) = IOSLongArray_Get(x, 1);
  *IOSLongArray_GetRef(z, 2) = IOSLongArray_Get(x, 2);
  *IOSLongArray_GetRef(z, 3) = IOSLongArray_Get(x, 3);
  *IOSLongArray_GetRef(z, 4) = IOSLongArray_Get(x, 4);
  *IOSLongArray_GetRef(z, 5) = IOSLongArray_Get(x, 5);
  *IOSLongArray_GetRef(z, 6) = IOSLongArray_Get(x, 6);
  *IOSLongArray_GetRef(z, 7) = IOSLongArray_Get(x, 7);
}

jboolean LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_equalWithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *y) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  jlong d = 0LL;
  d |= IOSLongArray_Get(nil_chk(x), 0) ^ IOSLongArray_Get(nil_chk(y), 0);
  d |= IOSLongArray_Get(x, 1) ^ IOSLongArray_Get(y, 1);
  d |= IOSLongArray_Get(x, 2) ^ IOSLongArray_Get(y, 2);
  d |= IOSLongArray_Get(x, 3) ^ IOSLongArray_Get(y, 3);
  d |= IOSLongArray_Get(x, 4) ^ IOSLongArray_Get(y, 4);
  d |= IOSLongArray_Get(x, 5) ^ IOSLongArray_Get(y, 5);
  d |= IOSLongArray_Get(x, 6) ^ IOSLongArray_Get(y, 6);
  d |= IOSLongArray_Get(x, 7) ^ IOSLongArray_Get(y, 7);
  return d == 0LL;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_multiplyWithLongArray_withLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *y, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  jlong y0 = IOSLongArray_Get(nil_chk(y), 0);
  jlong y1 = IOSLongArray_Get(y, 1);
  jlong y2 = IOSLongArray_Get(y, 2);
  jlong y3 = IOSLongArray_Get(y, 3);
  jlong y4 = IOSLongArray_Get(y, 4);
  jlong y5 = IOSLongArray_Get(y, 5);
  jlong y6 = IOSLongArray_Get(y, 6);
  jlong y7 = IOSLongArray_Get(y, 7);
  jlong z0 = 0;
  jlong z1 = 0;
  jlong z2 = 0;
  jlong z3 = 0;
  jlong z4 = 0;
  jlong z5 = 0;
  jlong z6 = 0;
  jlong z7 = 0;
  jlong z8 = 0;
  for (jint i = 0; i < 8; i += 2) {
    jlong x0 = IOSLongArray_Get(nil_chk(x), i);
    jlong x1 = IOSLongArray_Get(x, i + 1);
    for (jint j = 0; j < 64; ++j) {
      jlong m0 = -(x0 & 1LL);
      JreURShiftAssignLong(&x0, 1);
      z0 ^= (y0 & m0);
      z1 ^= (y1 & m0);
      z2 ^= (y2 & m0);
      z3 ^= (y3 & m0);
      z4 ^= (y4 & m0);
      z5 ^= (y5 & m0);
      z6 ^= (y6 & m0);
      z7 ^= (y7 & m0);
      jlong m1 = -(x1 & 1LL);
      JreURShiftAssignLong(&x1, 1);
      z1 ^= (y0 & m1);
      z2 ^= (y1 & m1);
      z3 ^= (y2 & m1);
      z4 ^= (y3 & m1);
      z5 ^= (y4 & m1);
      z6 ^= (y5 & m1);
      z7 ^= (y6 & m1);
      z8 ^= (y7 & m1);
      jlong c = JreRShift64(y7, 63);
      y7 = (JreLShift64(y7, 1)) | (JreURShift64(y6, 63));
      y6 = (JreLShift64(y6, 1)) | (JreURShift64(y5, 63));
      y5 = (JreLShift64(y5, 1)) | (JreURShift64(y4, 63));
      y4 = (JreLShift64(y4, 1)) | (JreURShift64(y3, 63));
      y3 = (JreLShift64(y3, 1)) | (JreURShift64(y2, 63));
      y2 = (JreLShift64(y2, 1)) | (JreURShift64(y1, 63));
      y1 = (JreLShift64(y1, 1)) | (JreURShift64(y0, 63));
      y0 = (JreLShift64(y0, 1)) ^ (c & (jlong) 0x125LL);
    }
    jlong y8 = y7;
    y7 = y6;
    y6 = y5;
    y5 = y4;
    y4 = y3;
    y3 = y2;
    y2 = y1;
    y1 = y0 ^ (JreURShift64(y8, 62)) ^ (JreURShift64(y8, 59)) ^ (JreURShift64(y8, 56));
    y0 = y8 ^ (JreLShift64(y8, 2)) ^ (JreLShift64(y8, 5)) ^ (JreLShift64(y8, 8));
  }
  z0 ^= z8 ^ (JreLShift64(z8, 2)) ^ (JreLShift64(z8, 5)) ^ (JreLShift64(z8, 8));
  z1 ^= (JreURShift64(z8, 62)) ^ (JreURShift64(z8, 59)) ^ (JreURShift64(z8, 56));
  *IOSLongArray_GetRef(nil_chk(z), 0) = z0;
  *IOSLongArray_GetRef(z, 1) = z1;
  *IOSLongArray_GetRef(z, 2) = z2;
  *IOSLongArray_GetRef(z, 3) = z3;
  *IOSLongArray_GetRef(z, 4) = z4;
  *IOSLongArray_GetRef(z, 5) = z5;
  *IOSLongArray_GetRef(z, 6) = z6;
  *IOSLongArray_GetRef(z, 7) = z7;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_multiplyXWithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  jlong x0 = IOSLongArray_Get(nil_chk(x), 0);
  jlong x1 = IOSLongArray_Get(x, 1);
  jlong x2 = IOSLongArray_Get(x, 2);
  jlong x3 = IOSLongArray_Get(x, 3);
  jlong x4 = IOSLongArray_Get(x, 4);
  jlong x5 = IOSLongArray_Get(x, 5);
  jlong x6 = IOSLongArray_Get(x, 6);
  jlong x7 = IOSLongArray_Get(x, 7);
  jlong m = JreRShift64(x7, 63);
  *IOSLongArray_GetRef(nil_chk(z), 0) = (JreLShift64(x0, 1)) ^ (m & (jlong) 0x125LL);
  *IOSLongArray_GetRef(z, 1) = (JreLShift64(x1, 1)) | (JreURShift64(x0, 63));
  *IOSLongArray_GetRef(z, 2) = (JreLShift64(x2, 1)) | (JreURShift64(x1, 63));
  *IOSLongArray_GetRef(z, 3) = (JreLShift64(x3, 1)) | (JreURShift64(x2, 63));
  *IOSLongArray_GetRef(z, 4) = (JreLShift64(x4, 1)) | (JreURShift64(x3, 63));
  *IOSLongArray_GetRef(z, 5) = (JreLShift64(x5, 1)) | (JreURShift64(x4, 63));
  *IOSLongArray_GetRef(z, 6) = (JreLShift64(x6, 1)) | (JreURShift64(x5, 63));
  *IOSLongArray_GetRef(z, 7) = (JreLShift64(x7, 1)) | (JreURShift64(x6, 63));
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_multiplyX8WithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  jlong x0 = IOSLongArray_Get(nil_chk(x), 0);
  jlong x1 = IOSLongArray_Get(x, 1);
  jlong x2 = IOSLongArray_Get(x, 2);
  jlong x3 = IOSLongArray_Get(x, 3);
  jlong x4 = IOSLongArray_Get(x, 4);
  jlong x5 = IOSLongArray_Get(x, 5);
  jlong x6 = IOSLongArray_Get(x, 6);
  jlong x7 = IOSLongArray_Get(x, 7);
  jlong c = JreURShift64(x7, 56);
  *IOSLongArray_GetRef(nil_chk(z), 0) = (JreLShift64(x0, 8)) ^ c ^ (JreLShift64(c, 2)) ^ (JreLShift64(c, 5)) ^ (JreLShift64(c, 8));
  *IOSLongArray_GetRef(z, 1) = (JreLShift64(x1, 8)) | (JreURShift64(x0, 56));
  *IOSLongArray_GetRef(z, 2) = (JreLShift64(x2, 8)) | (JreURShift64(x1, 56));
  *IOSLongArray_GetRef(z, 3) = (JreLShift64(x3, 8)) | (JreURShift64(x2, 56));
  *IOSLongArray_GetRef(z, 4) = (JreLShift64(x4, 8)) | (JreURShift64(x3, 56));
  *IOSLongArray_GetRef(z, 5) = (JreLShift64(x5, 8)) | (JreURShift64(x4, 56));
  *IOSLongArray_GetRef(z, 6) = (JreLShift64(x6, 8)) | (JreURShift64(x5, 56));
  *IOSLongArray_GetRef(z, 7) = (JreLShift64(x7, 8)) | (JreURShift64(x6, 56));
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_oneWithLongArray_(IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = 1;
  *IOSLongArray_GetRef(z, 1) = 0;
  *IOSLongArray_GetRef(z, 2) = 0;
  *IOSLongArray_GetRef(z, 3) = 0;
  *IOSLongArray_GetRef(z, 4) = 0;
  *IOSLongArray_GetRef(z, 5) = 0;
  *IOSLongArray_GetRef(z, 6) = 0;
  *IOSLongArray_GetRef(z, 7) = 0;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_squareWithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  IOSLongArray *t = [IOSLongArray newArrayWithLength:JreLShift32(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_SIZE, 1)];
  for (jint i = 0; i < LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_SIZE; ++i) {
    LibOrgBouncycastleMathRawInterleave_expand64To128WithLong_withLongArray_withInt_(IOSLongArray_Get(nil_chk(x), i), t, JreLShift32(i, 1));
  }
  jint j = JreLShift32(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_SIZE, 1);
  while (--j >= LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_SIZE) {
    jlong n = IOSLongArray_Get(t, j);
    *IOSLongArray_GetRef(t, j - LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_SIZE) ^= n ^ (JreLShift64(n, 2)) ^ (JreLShift64(n, 5)) ^ (JreLShift64(n, 8));
    *IOSLongArray_GetRef(t, j - LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_SIZE + 1) ^= (JreURShift64(n, 62)) ^ (JreURShift64(n, 59)) ^ (JreURShift64(n, 56));
  }
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_copy__WithLongArray_withLongArray_(t, z);
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_xWithLongArray_(IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = 2;
  *IOSLongArray_GetRef(z, 1) = 0;
  *IOSLongArray_GetRef(z, 2) = 0;
  *IOSLongArray_GetRef(z, 3) = 0;
  *IOSLongArray_GetRef(z, 4) = 0;
  *IOSLongArray_GetRef(z, 5) = 0;
  *IOSLongArray_GetRef(z, 6) = 0;
  *IOSLongArray_GetRef(z, 7) = 0;
}

void LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_zeroWithLongArray_(IOSLongArray *z) {
  LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512_initialize();
  *IOSLongArray_GetRef(nil_chk(z), 0) = 0;
  *IOSLongArray_GetRef(z, 1) = 0;
  *IOSLongArray_GetRef(z, 2) = 0;
  *IOSLongArray_GetRef(z, 3) = 0;
  *IOSLongArray_GetRef(z, 4) = 0;
  *IOSLongArray_GetRef(z, 5) = 0;
  *IOSLongArray_GetRef(z, 6) = 0;
  *IOSLongArray_GetRef(z, 7) = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoModesKgcmKGCMUtil_512)
