//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dsa/JcajceDsaKeyPairGeneratorSpi.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BCDSAPrivateKey.h"
#include "BCDSAPublicKey.h"
#include "BouncyCastleProvider.h"
#include "CryptoServicesRegistrar.h"
#include "DSAKeyGenerationParameters.h"
#include "DSAKeyPairGenerator.h"
#include "DSAParameterGenerationParameters.h"
#include "DSAParameters.h"
#include "DSAParametersGenerator.h"
#include "DSAPrivateKeyParameters.h"
#include "DSAPublicKeyParameters.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "JcajceDsaKeyPairGeneratorSpi.h"
#include "PrimeCertaintyCalculator.h"
#include "Properties.h"
#include "ProviderConfiguration.h"
#include "SHA256Digest.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/DSAParameterSpec.h"
#include "java/util/Hashtable.h"

inline JavaUtilHashtable *LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_get_params(void);
inline JavaUtilHashtable *LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_set_params(JavaUtilHashtable *value);
static JavaUtilHashtable *LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_params;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi, params, JavaUtilHashtable *)

inline id LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_get_lock(void);
inline id LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_set_lock(id value);
static id LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_lock;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi, lock, id)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (strength < 512 || strength > 4096 || ((strength < 1024) && strength % 64 != 0) || (strength >= 1024 && strength % 1024 != 0)) {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"strength must be from 512 - 4096 and a multiple of 1024 above 1024");
  }
  JavaSecuritySpecDSAParameterSpec *spec = [((id<LibOrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(LibOrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getDSADefaultParametersWithInt:strength];
  if (spec != nil) {
    param_ = new_LibOrgBouncycastleCryptoParamsDSAKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsDSAParameters_(random, new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([spec getP], [spec getQ], [spec getG]));
    [((LibOrgBouncycastleCryptoGeneratorsDSAKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param_];
    self->initialised_ = true;
  }
  else {
    self->strength_ = strength;
    self->random_ = random;
    self->initialised_ = false;
  }
}

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (!([params isKindOfClass:[JavaSecuritySpecDSAParameterSpec class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not a DSAParameterSpec");
  }
  JavaSecuritySpecDSAParameterSpec *dsaParams = (JavaSecuritySpecDSAParameterSpec *) cast_chk(params, [JavaSecuritySpecDSAParameterSpec class]);
  param_ = new_LibOrgBouncycastleCryptoParamsDSAKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsDSAParameters_(random, new_LibOrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((JavaSecuritySpecDSAParameterSpec *) nil_chk(dsaParams)) getP], [dsaParams getQ], [dsaParams getG]));
  [((LibOrgBouncycastleCryptoGeneratorsDSAKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param_];
  initialised_ = true;
}

- (JavaSecurityKeyPair *)generateKeyPair {
  if (!initialised_) {
    JavaLangInteger *paramStrength = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(strength_);
    if ([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_params)) containsKeyWithId:paramStrength]) {
      param_ = (LibOrgBouncycastleCryptoParamsDSAKeyGenerationParameters *) cast_chk([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_params)) getWithId:paramStrength], [LibOrgBouncycastleCryptoParamsDSAKeyGenerationParameters class]);
    }
    else {
      @synchronized(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_lock) {
        if ([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_params)) containsKeyWithId:paramStrength]) {
          param_ = (LibOrgBouncycastleCryptoParamsDSAKeyGenerationParameters *) cast_chk([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_params)) getWithId:paramStrength], [LibOrgBouncycastleCryptoParamsDSAKeyGenerationParameters class]);
        }
        else {
          LibOrgBouncycastleCryptoGeneratorsDSAParametersGenerator *pGen;
          LibOrgBouncycastleCryptoParamsDSAParameterGenerationParameters *dsaParams;
          jint certainty = LibOrgBouncycastleJcajceProviderAsymmetricUtilPrimeCertaintyCalculator_getDefaultCertaintyWithInt_(strength_);
          if (strength_ == 1024) {
            pGen = new_LibOrgBouncycastleCryptoGeneratorsDSAParametersGenerator_init();
            if (LibOrgBouncycastleUtilProperties_isOverrideSetWithNSString_(@"lib.org.bouncycastle.dsa.FIPS186-2for1024bits")) {
              [pGen init__WithInt:strength_ withInt:certainty withJavaSecuritySecureRandom:random_];
            }
            else {
              dsaParams = new_LibOrgBouncycastleCryptoParamsDSAParameterGenerationParameters_initWithInt_withInt_withInt_withJavaSecuritySecureRandom_(1024, 160, certainty, random_);
              [pGen init__WithLibOrgBouncycastleCryptoParamsDSAParameterGenerationParameters:dsaParams];
            }
          }
          else if (strength_ > 1024) {
            dsaParams = new_LibOrgBouncycastleCryptoParamsDSAParameterGenerationParameters_initWithInt_withInt_withInt_withJavaSecuritySecureRandom_(strength_, 256, certainty, random_);
            pGen = new_LibOrgBouncycastleCryptoGeneratorsDSAParametersGenerator_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA256Digest_init());
            [pGen init__WithLibOrgBouncycastleCryptoParamsDSAParameterGenerationParameters:dsaParams];
          }
          else {
            pGen = new_LibOrgBouncycastleCryptoGeneratorsDSAParametersGenerator_init();
            [pGen init__WithInt:strength_ withInt:certainty withJavaSecuritySecureRandom:random_];
          }
          param_ = new_LibOrgBouncycastleCryptoParamsDSAKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsDSAParameters_(random_, [pGen generateParameters]);
          (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_params)) putWithId:paramStrength withId:param_];
        }
      }
    }
    [((LibOrgBouncycastleCryptoGeneratorsDSAKeyPairGenerator *) nil_chk(engine_)) init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((LibOrgBouncycastleCryptoGeneratorsDSAKeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *pub = (LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters class]);
  LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *priv = (LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters *) cast_chk([pair getPrivate], [LibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters class]);
  return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_(pub), new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPrivateKey_initWithLibOrgBouncycastleCryptoParamsDSAPrivateKeyParameters_(priv));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
    { "lock", "LNSObject;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "param_", "LLibOrgBouncycastleCryptoParamsDSAKeyGenerationParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "engine_", "LLibOrgBouncycastleCryptoGeneratorsDSAKeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", &LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_params, &LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_lock };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi = { "JcajceDsaKeyPairGeneratorSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.dsa", ptrTable, methods, fields, 7, 0x1, 4, 7, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi class]) {
    LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_params = new_JavaUtilHashtable_init();
    LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_lock = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi)
  }
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_init(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self, @"DSA");
  self->engine_ = new_LibOrgBouncycastleCryptoGeneratorsDSAKeyPairGenerator_init();
  self->strength_ = 2048;
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricDsaJcajceDsaKeyPairGeneratorSpi)
