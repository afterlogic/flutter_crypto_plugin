//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/io/CryptoIoCipherOutputStream.java
//

#include "AEADBlockCipher.h"
#include "BufferedBlockCipher.h"
#include "CipherIOException.h"
#include "CryptoIoCipherOutputStream.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "InvalidCipherTextIOException.h"
#include "J2ObjC_source.h"
#include "StreamCipher.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"

@interface LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream () {
 @public
  LibOrgBouncycastleCryptoBufferedBlockCipher *bufferedBlockCipher_;
  id<LibOrgBouncycastleCryptoStreamCipher> streamCipher_;
  id<LibOrgBouncycastleCryptoModesAEADBlockCipher> aeadBlockCipher_;
  IOSByteArray *oneByte_;
  IOSByteArray *buf_;
}

- (void)ensureCapacityWithInt:(jint)updateSize
                  withBoolean:(jboolean)finalOutput;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, bufferedBlockCipher_, LibOrgBouncycastleCryptoBufferedBlockCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, streamCipher_, id<LibOrgBouncycastleCryptoStreamCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, aeadBlockCipher_, id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, oneByte_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, buf_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_ensureCapacityWithInt_withBoolean_(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *self, jint updateSize, jboolean finalOutput);

@implementation LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
withLibOrgBouncycastleCryptoBufferedBlockCipher:(LibOrgBouncycastleCryptoBufferedBlockCipher *)cipher {
  LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(self, os, cipher);
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
  withLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)cipher {
  LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_(self, os, cipher);
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
withLibOrgBouncycastleCryptoModesAEADBlockCipher:(id<LibOrgBouncycastleCryptoModesAEADBlockCipher>)cipher {
  LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(self, os, cipher);
  return self;
}

- (void)writeWithInt:(jint)b {
  *IOSByteArray_GetRef(nil_chk(oneByte_), 0) = (jbyte) b;
  if (streamCipher_ != nil) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[streamCipher_ returnByteWithByte:(jbyte) b]];
  }
  else {
    [self writeWithByteArray:oneByte_ withInt:0 withInt:1];
  }
}

- (void)writeWithByteArray:(IOSByteArray *)b {
  [self writeWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_ensureCapacityWithInt_withBoolean_(self, len, false);
  if (bufferedBlockCipher_ != nil) {
    jint outLen = [bufferedBlockCipher_ processBytesWithByteArray:b withInt:off withInt:len withByteArray:buf_ withInt:0];
    if (outLen != 0) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buf_ withInt:0 withInt:outLen];
    }
  }
  else if (aeadBlockCipher_ != nil) {
    jint outLen = [aeadBlockCipher_ processBytesWithByteArray:b withInt:off withInt:len withByteArray:buf_ withInt:0];
    if (outLen != 0) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buf_ withInt:0 withInt:outLen];
    }
  }
  else {
    [((id<LibOrgBouncycastleCryptoStreamCipher>) nil_chk(streamCipher_)) processBytesWithByteArray:b withInt:off withInt:len withByteArray:buf_ withInt:0];
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buf_ withInt:0 withInt:len];
  }
}

- (void)ensureCapacityWithInt:(jint)updateSize
                  withBoolean:(jboolean)finalOutput {
  LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_ensureCapacityWithInt_withBoolean_(self, updateSize, finalOutput);
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(out_)) flush];
}

- (void)close {
  LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_ensureCapacityWithInt_withBoolean_(self, 0, true);
  JavaIoIOException *error = nil;
  @try {
    if (bufferedBlockCipher_ != nil) {
      jint outLen = [bufferedBlockCipher_ doFinalWithByteArray:buf_ withInt:0];
      if (outLen != 0) {
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buf_ withInt:0 withInt:outLen];
      }
    }
    else if (aeadBlockCipher_ != nil) {
      jint outLen = [aeadBlockCipher_ doFinalWithByteArray:buf_ withInt:0];
      if (outLen != 0) {
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buf_ withInt:0 withInt:outLen];
      }
    }
    else if (streamCipher_ != nil) {
      [streamCipher_ reset];
    }
  }
  @catch (LibOrgBouncycastleCryptoInvalidCipherTextException *e) {
    error = new_LibOrgBouncycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(@"Error finalising cipher data", e);
  }
  @catch (JavaLangException *e) {
    error = new_LibOrgBouncycastleCryptoIoCipherIOException_initWithNSString_withJavaLangThrowable_(@"Error closing stream: ", e);
  }
  @try {
    [self flush];
    [((JavaIoOutputStream *) nil_chk(out_)) close];
  }
  @catch (JavaIoIOException *e) {
    if (error == nil) {
      error = e;
    }
  }
  if (error != nil) {
    @throw error;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 6, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:withLibOrgBouncycastleCryptoBufferedBlockCipher:);
  methods[1].selector = @selector(initWithJavaIoOutputStream:withLibOrgBouncycastleCryptoStreamCipher:);
  methods[2].selector = @selector(initWithJavaIoOutputStream:withLibOrgBouncycastleCryptoModesAEADBlockCipher:);
  methods[3].selector = @selector(writeWithInt:);
  methods[4].selector = @selector(writeWithByteArray:);
  methods[5].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(ensureCapacityWithInt:withBoolean:);
  methods[7].selector = @selector(flush);
  methods[8].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferedBlockCipher_", "LLibOrgBouncycastleCryptoBufferedBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "streamCipher_", "LLibOrgBouncycastleCryptoStreamCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "aeadBlockCipher_", "LLibOrgBouncycastleCryptoModesAEADBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oneByte_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;LLibOrgBouncycastleCryptoBufferedBlockCipher;", "LJavaIoOutputStream;LLibOrgBouncycastleCryptoStreamCipher;", "LJavaIoOutputStream;LLibOrgBouncycastleCryptoModesAEADBlockCipher;", "write", "I", "LJavaIoIOException;", "[B", "[BII", "ensureCapacity", "IZ" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream = { "CryptoIoCipherOutputStream", "lib.org.bouncycastle.crypto.io", ptrTable, methods, fields, 7, 0x1, 9, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream;
}

@end

void LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *self, JavaIoOutputStream *os, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher) {
  JavaIoFilterOutputStream_initWithJavaIoOutputStream_(self, os);
  self->oneByte_ = [IOSByteArray newArrayWithLength:1];
  self->bufferedBlockCipher_ = cipher;
}

LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(JavaIoOutputStream *os, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_, os, cipher)
}

LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_(JavaIoOutputStream *os, LibOrgBouncycastleCryptoBufferedBlockCipher *cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoBufferedBlockCipher_, os, cipher)
}

void LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *self, JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoStreamCipher> cipher) {
  JavaIoFilterOutputStream_initWithJavaIoOutputStream_(self, os);
  self->oneByte_ = [IOSByteArray newArrayWithLength:1];
  self->streamCipher_ = cipher;
}

LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_(JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoStreamCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_, os, cipher)
}

LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_(JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoStreamCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoStreamCipher_, os, cipher)
}

void LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *self, JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher) {
  JavaIoFilterOutputStream_initWithJavaIoOutputStream_(self, os);
  self->oneByte_ = [IOSByteArray newArrayWithLength:1];
  self->aeadBlockCipher_ = cipher;
}

LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *new_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_, os, cipher)
}

LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *create_LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_(JavaIoOutputStream *os, id<LibOrgBouncycastleCryptoModesAEADBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream, initWithJavaIoOutputStream_withLibOrgBouncycastleCryptoModesAEADBlockCipher_, os, cipher)
}

void LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream_ensureCapacityWithInt_withBoolean_(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream *self, jint updateSize, jboolean finalOutput) {
  jint bufLen = updateSize;
  if (finalOutput) {
    if (self->bufferedBlockCipher_ != nil) {
      bufLen = [self->bufferedBlockCipher_ getOutputSizeWithInt:updateSize];
    }
    else if (self->aeadBlockCipher_ != nil) {
      bufLen = [self->aeadBlockCipher_ getOutputSizeWithInt:updateSize];
    }
  }
  else {
    if (self->bufferedBlockCipher_ != nil) {
      bufLen = [self->bufferedBlockCipher_ getUpdateOutputSizeWithInt:updateSize];
    }
    else if (self->aeadBlockCipher_ != nil) {
      bufLen = [self->aeadBlockCipher_ getUpdateOutputSizeWithInt:updateSize];
    }
  }
  if ((self->buf_ == nil) || (((IOSByteArray *) nil_chk(self->buf_))->size_ < bufLen)) {
    self->buf_ = [IOSByteArray newArrayWithLength:bufLen];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoIoCryptoIoCipherOutputStream)
