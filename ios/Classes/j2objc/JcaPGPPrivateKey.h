//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcaPGPPrivateKey.java
//

#ifndef JcaPGPPrivateKey_H
#define JcaPGPPrivateKey_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "PGPPrivateKey.h"

@class LibOrgBouncycastleBcpgPublicKeyPacket;
@class LibOrgBouncycastleOpenpgpPGPPublicKey;
@protocol JavaSecurityPrivateKey;
@protocol LibOrgBouncycastleBcpgBCPGKey;

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey : LibOrgBouncycastleOpenpgpPGPPrivateKey

#pragma mark Public

- (instancetype __nonnull)initWithLong:(jlong)keyID
            withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey;

- (instancetype __nonnull)initWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pubKey
                                             withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey;

- (id<JavaSecurityPrivateKey>)getPrivateKey;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLong:(jlong)arg0
withLibOrgBouncycastleBcpgPublicKeyPacket:(LibOrgBouncycastleBcpgPublicKeyPacket *)arg1
     withLibOrgBouncycastleBcpgBCPGKey:(id<LibOrgBouncycastleBcpgBCPGKey>)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey)

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey_initWithLong_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey *self, jlong keyID, id<JavaSecurityPrivateKey> privateKey);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey_initWithLong_withJavaSecurityPrivateKey_(jlong keyID, id<JavaSecurityPrivateKey> privateKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey_initWithLong_withJavaSecurityPrivateKey_(jlong keyID, id<JavaSecurityPrivateKey> privateKey);

FOUNDATION_EXPORT void LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey *self, LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<JavaSecurityPrivateKey> privateKey);

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<JavaSecurityPrivateKey> privateKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey_initWithLibOrgBouncycastleOpenpgpPGPPublicKey_withJavaSecurityPrivateKey_(LibOrgBouncycastleOpenpgpPGPPublicKey *pubKey, id<JavaSecurityPrivateKey> privateKey);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // JcaPGPPrivateKey_H
