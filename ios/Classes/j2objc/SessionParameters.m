//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SessionParameters.java
//

#include "Arrays.h"
#include "Certificate.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SessionParameters.h"
#include "TlsProtocol.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Hashtable.h"

@interface LibOrgBouncycastleCryptoTlsSessionParameters () {
 @public
  jint cipherSuite_;
  jshort compressionAlgorithm_;
  IOSByteArray *masterSecret_;
  LibOrgBouncycastleCryptoTlsCertificate *peerCertificate_;
  IOSByteArray *pskIdentity_;
  IOSByteArray *srpIdentity_;
  IOSByteArray *encodedServerExtensions_;
  jboolean extendedMasterSecret_;
}

- (instancetype)initWithInt:(jint)cipherSuite
                  withShort:(jshort)compressionAlgorithm
              withByteArray:(IOSByteArray *)masterSecret
withLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)peerCertificate
              withByteArray:(IOSByteArray *)pskIdentity
              withByteArray:(IOSByteArray *)srpIdentity
              withByteArray:(IOSByteArray *)encodedServerExtensions
                withBoolean:(jboolean)extendedMasterSecret;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters, masterSecret_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters, peerCertificate_, LibOrgBouncycastleCryptoTlsCertificate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters, pskIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters, srpIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters, encodedServerExtensions_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(LibOrgBouncycastleCryptoTlsSessionParameters *self, jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, LibOrgBouncycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions, jboolean extendedMasterSecret);

__attribute__((unused)) static LibOrgBouncycastleCryptoTlsSessionParameters *new_LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, LibOrgBouncycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions, jboolean extendedMasterSecret) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleCryptoTlsSessionParameters *create_LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, LibOrgBouncycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions, jboolean extendedMasterSecret);

@interface LibOrgBouncycastleCryptoTlsSessionParameters_Builder () {
 @public
  jint cipherSuite_;
  jshort compressionAlgorithm_;
  IOSByteArray *masterSecret_;
  LibOrgBouncycastleCryptoTlsCertificate *peerCertificate_;
  IOSByteArray *pskIdentity_;
  IOSByteArray *srpIdentity_;
  IOSByteArray *encodedServerExtensions_;
  jboolean extendedMasterSecret_;
}

- (void)validateWithBoolean:(jboolean)condition
               withNSString:(NSString *)parameter;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters_Builder, masterSecret_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters_Builder, peerCertificate_, LibOrgBouncycastleCryptoTlsCertificate *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters_Builder, pskIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters_Builder, srpIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsSessionParameters_Builder, encodedServerExtensions_, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(LibOrgBouncycastleCryptoTlsSessionParameters_Builder *self, jboolean condition, NSString *parameter);

@implementation LibOrgBouncycastleCryptoTlsSessionParameters

- (instancetype)initWithInt:(jint)cipherSuite
                  withShort:(jshort)compressionAlgorithm
              withByteArray:(IOSByteArray *)masterSecret
withLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)peerCertificate
              withByteArray:(IOSByteArray *)pskIdentity
              withByteArray:(IOSByteArray *)srpIdentity
              withByteArray:(IOSByteArray *)encodedServerExtensions
                withBoolean:(jboolean)extendedMasterSecret {
  LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(self, cipherSuite, compressionAlgorithm, masterSecret, peerCertificate, pskIdentity, srpIdentity, encodedServerExtensions, extendedMasterSecret);
  return self;
}

- (void)clear {
  if (self->masterSecret_ != nil) {
    LibOrgBouncycastleUtilArrays_fillWithByteArray_withByte_(self->masterSecret_, (jbyte) 0);
  }
}

- (LibOrgBouncycastleCryptoTlsSessionParameters *)copy__ {
  return new_LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(cipherSuite_, compressionAlgorithm_, masterSecret_, peerCertificate_, pskIdentity_, srpIdentity_, encodedServerExtensions_, extendedMasterSecret_);
}

- (jint)getCipherSuite {
  return cipherSuite_;
}

- (jshort)getCompressionAlgorithm {
  return compressionAlgorithm_;
}

- (IOSByteArray *)getMasterSecret {
  return masterSecret_;
}

- (LibOrgBouncycastleCryptoTlsCertificate *)getPeerCertificate {
  return peerCertificate_;
}

- (IOSByteArray *)getPskIdentity {
  return pskIdentity_;
}

- (IOSByteArray *)getPSKIdentity {
  return pskIdentity_;
}

- (IOSByteArray *)getSRPIdentity {
  return srpIdentity_;
}

- (jboolean)isExtendedMasterSecret {
  return extendedMasterSecret_;
}

- (JavaUtilHashtable *)readServerExtensions {
  if (encodedServerExtensions_ == nil) {
    return nil;
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(encodedServerExtensions_);
  return LibOrgBouncycastleCryptoTlsTlsProtocol_readExtensionsWithJavaIoByteArrayInputStream_(buf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withShort:withByteArray:withLibOrgBouncycastleCryptoTlsCertificate:withByteArray:withByteArray:withByteArray:withBoolean:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(copy__);
  methods[3].selector = @selector(getCipherSuite);
  methods[4].selector = @selector(getCompressionAlgorithm);
  methods[5].selector = @selector(getMasterSecret);
  methods[6].selector = @selector(getPeerCertificate);
  methods[7].selector = @selector(getPskIdentity);
  methods[8].selector = @selector(getPSKIdentity);
  methods[9].selector = @selector(getSRPIdentity);
  methods[10].selector = @selector(isExtendedMasterSecret);
  methods[11].selector = @selector(readServerExtensions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipherSuite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compressionAlgorithm_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "masterSecret_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerCertificate_", "LLibOrgBouncycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pskIdentity_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "srpIdentity_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encodedServerExtensions_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extendedMasterSecret_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IS[BLLibOrgBouncycastleCryptoTlsCertificate;[B[B[BZ", "copy", "LJavaIoIOException;", "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsSessionParameters = { "SessionParameters", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x11, 12, 8, -1, 3, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsSessionParameters;
}

@end

void LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(LibOrgBouncycastleCryptoTlsSessionParameters *self, jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, LibOrgBouncycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions, jboolean extendedMasterSecret) {
  NSObject_init(self);
  self->pskIdentity_ = nil;
  self->srpIdentity_ = nil;
  self->cipherSuite_ = cipherSuite;
  self->compressionAlgorithm_ = compressionAlgorithm;
  self->masterSecret_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(masterSecret);
  self->peerCertificate_ = peerCertificate;
  self->pskIdentity_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(pskIdentity);
  self->srpIdentity_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(srpIdentity);
  self->encodedServerExtensions_ = encodedServerExtensions;
  self->extendedMasterSecret_ = extendedMasterSecret;
}

LibOrgBouncycastleCryptoTlsSessionParameters *new_LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, LibOrgBouncycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions, jboolean extendedMasterSecret) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsSessionParameters, initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_, cipherSuite, compressionAlgorithm, masterSecret, peerCertificate, pskIdentity, srpIdentity, encodedServerExtensions, extendedMasterSecret)
}

LibOrgBouncycastleCryptoTlsSessionParameters *create_LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, LibOrgBouncycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions, jboolean extendedMasterSecret) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsSessionParameters, initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_, cipherSuite, compressionAlgorithm, masterSecret, peerCertificate, pskIdentity, srpIdentity, encodedServerExtensions, extendedMasterSecret)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsSessionParameters)

@implementation LibOrgBouncycastleCryptoTlsSessionParameters_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsSessionParameters_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleCryptoTlsSessionParameters *)build {
  LibOrgBouncycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(self, self->cipherSuite_ >= 0, @"cipherSuite");
  LibOrgBouncycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(self, self->compressionAlgorithm_ >= 0, @"compressionAlgorithm");
  LibOrgBouncycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(self, self->masterSecret_ != nil, @"masterSecret");
  return new_LibOrgBouncycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withLibOrgBouncycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_withBoolean_(cipherSuite_, compressionAlgorithm_, masterSecret_, peerCertificate_, pskIdentity_, srpIdentity_, encodedServerExtensions_, extendedMasterSecret_);
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setCipherSuiteWithInt:(jint)cipherSuite {
  self->cipherSuite_ = cipherSuite;
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setCompressionAlgorithmWithShort:(jshort)compressionAlgorithm {
  self->compressionAlgorithm_ = compressionAlgorithm;
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setExtendedMasterSecretWithBoolean:(jboolean)extendedMasterSecret {
  self->extendedMasterSecret_ = extendedMasterSecret;
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setMasterSecretWithByteArray:(IOSByteArray *)masterSecret {
  self->masterSecret_ = masterSecret;
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setPeerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:(LibOrgBouncycastleCryptoTlsCertificate *)peerCertificate {
  self->peerCertificate_ = peerCertificate;
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setPskIdentityWithByteArray:(IOSByteArray *)pskIdentity {
  self->pskIdentity_ = pskIdentity;
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setPSKIdentityWithByteArray:(IOSByteArray *)pskIdentity {
  self->pskIdentity_ = pskIdentity;
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setSRPIdentityWithByteArray:(IOSByteArray *)srpIdentity {
  self->srpIdentity_ = srpIdentity;
  return self;
}

- (LibOrgBouncycastleCryptoTlsSessionParameters_Builder *)setServerExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions {
  if (serverExtensions == nil) {
    encodedServerExtensions_ = nil;
  }
  else {
    JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
    LibOrgBouncycastleCryptoTlsTlsProtocol_writeExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_(buf, serverExtensions);
    encodedServerExtensions_ = [buf toByteArray];
  }
  return self;
}

- (void)validateWithBoolean:(jboolean)condition
               withNSString:(NSString *)parameter {
  LibOrgBouncycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(self, condition, parameter);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsSessionParameters_Builder;", 0x1, 13, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(setCipherSuiteWithInt:);
  methods[3].selector = @selector(setCompressionAlgorithmWithShort:);
  methods[4].selector = @selector(setExtendedMasterSecretWithBoolean:);
  methods[5].selector = @selector(setMasterSecretWithByteArray:);
  methods[6].selector = @selector(setPeerCertificateWithLibOrgBouncycastleCryptoTlsCertificate:);
  methods[7].selector = @selector(setPskIdentityWithByteArray:);
  methods[8].selector = @selector(setPSKIdentityWithByteArray:);
  methods[9].selector = @selector(setSRPIdentityWithByteArray:);
  methods[10].selector = @selector(setServerExtensionsWithJavaUtilHashtable:);
  methods[11].selector = @selector(validateWithBoolean:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipherSuite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compressionAlgorithm_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "masterSecret_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerCertificate_", "LLibOrgBouncycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pskIdentity_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "srpIdentity_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encodedServerExtensions_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extendedMasterSecret_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setCipherSuite", "I", "setCompressionAlgorithm", "S", "setExtendedMasterSecret", "Z", "setMasterSecret", "[B", "setPeerCertificate", "LLibOrgBouncycastleCryptoTlsCertificate;", "setPskIdentity", "setPSKIdentity", "setSRPIdentity", "setServerExtensions", "LJavaUtilHashtable;", "LJavaIoIOException;", "validate", "ZLNSString;", "LLibOrgBouncycastleCryptoTlsSessionParameters;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsSessionParameters_Builder = { "Builder", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x19, 12, 8, 18, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsSessionParameters_Builder;
}

@end

void LibOrgBouncycastleCryptoTlsSessionParameters_Builder_init(LibOrgBouncycastleCryptoTlsSessionParameters_Builder *self) {
  NSObject_init(self);
  self->cipherSuite_ = -1;
  self->compressionAlgorithm_ = -1;
  self->masterSecret_ = nil;
  self->peerCertificate_ = nil;
  self->pskIdentity_ = nil;
  self->srpIdentity_ = nil;
  self->encodedServerExtensions_ = nil;
  self->extendedMasterSecret_ = false;
}

LibOrgBouncycastleCryptoTlsSessionParameters_Builder *new_LibOrgBouncycastleCryptoTlsSessionParameters_Builder_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsSessionParameters_Builder, init)
}

LibOrgBouncycastleCryptoTlsSessionParameters_Builder *create_LibOrgBouncycastleCryptoTlsSessionParameters_Builder_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsSessionParameters_Builder, init)
}

void LibOrgBouncycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(LibOrgBouncycastleCryptoTlsSessionParameters_Builder *self, jboolean condition, NSString *parameter) {
  if (!condition) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"Required session parameter '", parameter, @"' not configured"));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsSessionParameters_Builder)
