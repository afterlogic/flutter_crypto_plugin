//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/ec/ECElGamalDecryptor.java
//

#ifndef ECElGamalDecryptor_H
#define ECElGamalDecryptor_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ECDecryptor.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleCryptoEcECPair;
@class LibOrgBouncycastleMathEcECPoint;
@protocol LibOrgBouncycastleCryptoCipherParameters;

@interface LibOrgBouncycastleCryptoEcECElGamalDecryptor : NSObject < LibOrgBouncycastleCryptoEcECDecryptor >

#pragma mark Public

- (instancetype __nonnull)init;

- (LibOrgBouncycastleMathEcECPoint *)decryptWithLibOrgBouncycastleCryptoEcECPair:(LibOrgBouncycastleCryptoEcECPair *)pair;

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEcECElGamalDecryptor)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEcECElGamalDecryptor_init(LibOrgBouncycastleCryptoEcECElGamalDecryptor *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEcECElGamalDecryptor *new_LibOrgBouncycastleCryptoEcECElGamalDecryptor_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEcECElGamalDecryptor *create_LibOrgBouncycastleCryptoEcECElGamalDecryptor_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEcECElGamalDecryptor)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // ECElGamalDecryptor_H
