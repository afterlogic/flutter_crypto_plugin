//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/EncryptionAlgorithm.java
//

#ifndef EncryptionAlgorithm_H
#define EncryptionAlgorithm_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@interface LibOrgBouncycastleCryptoTlsEncryptionAlgorithm : NSObject
@property (readonly, class) jint NULL_ NS_SWIFT_NAME(NULL_);
@property (readonly, class) jint RC4_40 NS_SWIFT_NAME(RC4_40);
@property (readonly, class) jint RC4_128 NS_SWIFT_NAME(RC4_128);
@property (readonly, class) jint RC2_CBC_40 NS_SWIFT_NAME(RC2_CBC_40);
@property (readonly, class) jint IDEA_CBC NS_SWIFT_NAME(IDEA_CBC);
@property (readonly, class) jint DES40_CBC NS_SWIFT_NAME(DES40_CBC);
@property (readonly, class) jint DES_CBC NS_SWIFT_NAME(DES_CBC);
@property (readonly, class) jint _3DES_EDE_CBC NS_SWIFT_NAME(_3DES_EDE_CBC);
@property (readonly, class) jint AES_128_CBC NS_SWIFT_NAME(AES_128_CBC);
@property (readonly, class) jint AES_256_CBC NS_SWIFT_NAME(AES_256_CBC);
@property (readonly, class) jint AES_128_GCM NS_SWIFT_NAME(AES_128_GCM);
@property (readonly, class) jint AES_256_GCM NS_SWIFT_NAME(AES_256_GCM);
@property (readonly, class) jint CAMELLIA_128_CBC NS_SWIFT_NAME(CAMELLIA_128_CBC);
@property (readonly, class) jint CAMELLIA_256_CBC NS_SWIFT_NAME(CAMELLIA_256_CBC);
@property (readonly, class) jint SEED_CBC NS_SWIFT_NAME(SEED_CBC);
@property (readonly, class) jint AES_128_CCM NS_SWIFT_NAME(AES_128_CCM);
@property (readonly, class) jint AES_128_CCM_8 NS_SWIFT_NAME(AES_128_CCM_8);
@property (readonly, class) jint AES_256_CCM NS_SWIFT_NAME(AES_256_CCM);
@property (readonly, class) jint AES_256_CCM_8 NS_SWIFT_NAME(AES_256_CCM_8);
@property (readonly, class) jint CAMELLIA_128_GCM NS_SWIFT_NAME(CAMELLIA_128_GCM);
@property (readonly, class) jint CAMELLIA_256_GCM NS_SWIFT_NAME(CAMELLIA_256_GCM);
@property (readonly, class) jint CHACHA20_POLY1305 NS_SWIFT_NAME(CHACHA20_POLY1305);
@property (readonly, class) jint AES_128_OCB_TAGLEN96 NS_SWIFT_NAME(AES_128_OCB_TAGLEN96);
@property (readonly, class) jint AES_256_OCB_TAGLEN96 NS_SWIFT_NAME(AES_256_OCB_TAGLEN96);

+ (jint)NULL_;

+ (jint)RC4_40;

+ (jint)RC4_128;

+ (jint)RC2_CBC_40;

+ (jint)IDEA_CBC;

+ (jint)DES40_CBC;

+ (jint)DES_CBC;

+ (jint)_3DES_EDE_CBC;

+ (jint)AES_128_CBC;

+ (jint)AES_256_CBC;

+ (jint)AES_128_GCM;

+ (jint)AES_256_GCM;

+ (jint)CAMELLIA_128_CBC;

+ (jint)CAMELLIA_256_CBC;

+ (jint)SEED_CBC;

+ (jint)AES_128_CCM;

+ (jint)AES_128_CCM_8;

+ (jint)AES_256_CCM;

+ (jint)AES_256_CCM_8;

+ (jint)CAMELLIA_128_GCM;

+ (jint)CAMELLIA_256_GCM;

+ (jint)CHACHA20_POLY1305;

+ (jint)AES_128_OCB_TAGLEN96;

+ (jint)AES_256_OCB_TAGLEN96;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_NULL(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_NULL 0
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, NULL, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_RC4_40(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_RC4_40 1
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, RC4_40, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_RC4_128(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_RC4_128 2
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, RC4_128, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_RC2_CBC_40(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_RC2_CBC_40 3
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, RC2_CBC_40, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_IDEA_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_IDEA_CBC 4
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, IDEA_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_DES40_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_DES40_CBC 5
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, DES40_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_DES_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_DES_CBC 6
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, DES_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get__3DES_EDE_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm__3DES_EDE_CBC 7
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, _3DES_EDE_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_128_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_128_CBC 8
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_128_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_256_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_256_CBC 9
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_256_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_128_GCM(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_128_GCM 10
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_128_GCM, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_256_GCM(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_256_GCM 11
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_256_GCM, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_CAMELLIA_128_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_128_CBC 12
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, CAMELLIA_128_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_CAMELLIA_256_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_256_CBC 13
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, CAMELLIA_256_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_SEED_CBC(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_SEED_CBC 14
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, SEED_CBC, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_128_CCM(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_128_CCM 15
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_128_CCM, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_128_CCM_8(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_128_CCM_8 16
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_128_CCM_8, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_256_CCM(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_256_CCM 17
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_256_CCM, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_256_CCM_8(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_256_CCM_8 18
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_256_CCM_8, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_CAMELLIA_128_GCM(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_128_GCM 19
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, CAMELLIA_128_GCM, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_CAMELLIA_256_GCM(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_256_GCM 20
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, CAMELLIA_256_GCM, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_CHACHA20_POLY1305(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_CHACHA20_POLY1305 21
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, CHACHA20_POLY1305, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_128_OCB_TAGLEN96(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_128_OCB_TAGLEN96 103
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_128_OCB_TAGLEN96, jint)

inline jint LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_get_AES_256_OCB_TAGLEN96(void);
#define LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_AES_256_OCB_TAGLEN96 104
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm, AES_256_OCB_TAGLEN96, jint)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_init(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsEncryptionAlgorithm *new_LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsEncryptionAlgorithm *create_LibOrgBouncycastleCryptoTlsEncryptionAlgorithm_init(void);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsEncryptionAlgorithm)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // EncryptionAlgorithm_H
