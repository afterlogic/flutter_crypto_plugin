//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/qtesla/PqcCryptoQteslaPack.java
//

#ifndef PqcCryptoQteslaPack_H
#define PqcCryptoQteslaPack_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSShortArray;

@interface LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack : NSObject

#pragma mark Public

+ (void)decodePrivateKeyIWithByteArray:(IOSByteArray *)seed
                        withShortArray:(IOSShortArray *)secretPolynomial
                        withShortArray:(IOSShortArray *)errorPolynomial
                         withByteArray:(IOSByteArray *)privateKey;

+ (void)decodePrivateKeyIIISizeWithByteArray:(IOSByteArray *)seed
                              withShortArray:(IOSShortArray *)secretPolynomial
                              withShortArray:(IOSShortArray *)errorPolynomial
                               withByteArray:(IOSByteArray *)privateKey;

+ (void)decodePrivateKeyIIISpeedWithByteArray:(IOSByteArray *)seed
                               withShortArray:(IOSShortArray *)secretPolynomial
                               withShortArray:(IOSShortArray *)errorPolynomial
                                withByteArray:(IOSByteArray *)privateKey;

+ (void)decodePublicKeyWithIntArray:(IOSIntArray *)publicKey
                      withByteArray:(IOSByteArray *)seedA
                            withInt:(jint)seedAOffset
                      withByteArray:(IOSByteArray *)publicKeyInput
                            withInt:(jint)n
                            withInt:(jint)qLogarithm;

+ (void)decodePublicKeyIIIPWithIntArray:(IOSIntArray *)publicKey
                          withByteArray:(IOSByteArray *)seedA
                                withInt:(jint)seedAOffset
                          withByteArray:(IOSByteArray *)publicKeyInput;

+ (void)decodePublicKeyIIISpeedWithIntArray:(IOSIntArray *)publicKey
                              withByteArray:(IOSByteArray *)seedA
                                    withInt:(jint)seedAOffset
                              withByteArray:(IOSByteArray *)publicKeyInput;

+ (void)decodePublicKeyIPWithIntArray:(IOSIntArray *)publicKey
                        withByteArray:(IOSByteArray *)seedA
                              withInt:(jint)seedAOffset
                        withByteArray:(IOSByteArray *)publicKeyInput;

+ (void)decodeSignatureWithByteArray:(IOSByteArray *)C
                        withIntArray:(IOSIntArray *)Z
                       withByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset
                             withInt:(jint)n
                             withInt:(jint)d;

+ (void)decodeSignatureIIIPWithByteArray:(IOSByteArray *)C
                           withLongArray:(IOSLongArray *)Z
                           withByteArray:(IOSByteArray *)signature
                                 withInt:(jint)signatureOffset;

+ (void)decodeSignatureIIISpeedWithByteArray:(IOSByteArray *)C
                                withIntArray:(IOSIntArray *)Z
                               withByteArray:(IOSByteArray *)signature
                                     withInt:(jint)signatureOffset;

+ (void)decodeSignatureIPWithByteArray:(IOSByteArray *)C
                         withLongArray:(IOSLongArray *)Z
                         withByteArray:(IOSByteArray *)signature
                               withInt:(jint)signatureOffset;

+ (void)encodePrivateKeyIWithByteArray:(IOSByteArray *)privateKey
                          withIntArray:(IOSIntArray *)secretPolynomial
                          withIntArray:(IOSIntArray *)errorPolynomial
                         withByteArray:(IOSByteArray *)seed
                               withInt:(jint)seedOffset;

+ (void)encodePrivateKeyIIISizeWithByteArray:(IOSByteArray *)privateKey
                                withIntArray:(IOSIntArray *)secretPolynomial
                                withIntArray:(IOSIntArray *)errorPolynomial
                               withByteArray:(IOSByteArray *)seed
                                     withInt:(jint)seedOffset;

+ (void)encodePrivateKeyIIISpeedWithByteArray:(IOSByteArray *)privateKey
                                 withIntArray:(IOSIntArray *)secretPolynomial
                                 withIntArray:(IOSIntArray *)errorPolynomial
                                withByteArray:(IOSByteArray *)seed
                                      withInt:(jint)seedOffset;

+ (void)encodePublicKeyWithByteArray:(IOSByteArray *)publicKey
                        withIntArray:(IOSIntArray *)T
                       withByteArray:(IOSByteArray *)seedA
                             withInt:(jint)seedAOffset
                             withInt:(jint)n
                             withInt:(jint)qLogarithm;

+ (void)encodePublicKeyIIIPWithByteArray:(IOSByteArray *)publicKey
                           withLongArray:(IOSLongArray *)T
                           withByteArray:(IOSByteArray *)seedA
                                 withInt:(jint)seedAOffset;

+ (void)encodePublicKeyIIISpeedWithByteArray:(IOSByteArray *)publicKey
                                withIntArray:(IOSIntArray *)T
                               withByteArray:(IOSByteArray *)seedA
                                     withInt:(jint)seedAOffset;

+ (void)encodePublicKeyIPWithByteArray:(IOSByteArray *)publicKey
                         withLongArray:(IOSLongArray *)T
                         withByteArray:(IOSByteArray *)seedA
                               withInt:(jint)seedAOffset;

+ (void)encodeSignatureWithByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset
                       withByteArray:(IOSByteArray *)C
                             withInt:(jint)cOffset
                        withIntArray:(IOSIntArray *)Z
                             withInt:(jint)n
                             withInt:(jint)d;

+ (void)encodeSignatureIIIPWithByteArray:(IOSByteArray *)signature
                                 withInt:(jint)signatureOffset
                           withByteArray:(IOSByteArray *)C
                                 withInt:(jint)cOffset
                           withLongArray:(IOSLongArray *)Z;

+ (void)encodeSignatureIIISpeedWithByteArray:(IOSByteArray *)signature
                                     withInt:(jint)signatureOffset
                               withByteArray:(IOSByteArray *)C
                                     withInt:(jint)cOffset
                                withIntArray:(IOSIntArray *)Z;

+ (void)encodeSignatureIPWithByteArray:(IOSByteArray *)signature
                               withInt:(jint)signatureOffset
                         withByteArray:(IOSByteArray *)C
                               withInt:(jint)cOffset
                         withLongArray:(IOSLongArray *)Z;

+ (void)packPrivateKeyWithByteArray:(IOSByteArray *)privateKey
                      withLongArray:(IOSLongArray *)secretPolynomial
                      withLongArray:(IOSLongArray *)errorPolynomial
                      withByteArray:(IOSByteArray *)seed
                            withInt:(jint)seedOffset
                            withInt:(jint)n
                            withInt:(jint)k;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_init(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack *self);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack *new_LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack *create_LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePrivateKeyIWithByteArray_withIntArray_withIntArray_withByteArray_withInt_(IOSByteArray *privateKey, IOSIntArray *secretPolynomial, IOSIntArray *errorPolynomial, IOSByteArray *seed, jint seedOffset);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePrivateKeyIIISizeWithByteArray_withIntArray_withIntArray_withByteArray_withInt_(IOSByteArray *privateKey, IOSIntArray *secretPolynomial, IOSIntArray *errorPolynomial, IOSByteArray *seed, jint seedOffset);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePrivateKeyIIISpeedWithByteArray_withIntArray_withIntArray_withByteArray_withInt_(IOSByteArray *privateKey, IOSIntArray *secretPolynomial, IOSIntArray *errorPolynomial, IOSByteArray *seed, jint seedOffset);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePrivateKeyIWithByteArray_withShortArray_withShortArray_withByteArray_(IOSByteArray *seed, IOSShortArray *secretPolynomial, IOSShortArray *errorPolynomial, IOSByteArray *privateKey);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePrivateKeyIIISizeWithByteArray_withShortArray_withShortArray_withByteArray_(IOSByteArray *seed, IOSShortArray *secretPolynomial, IOSShortArray *errorPolynomial, IOSByteArray *privateKey);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePrivateKeyIIISpeedWithByteArray_withShortArray_withShortArray_withByteArray_(IOSByteArray *seed, IOSShortArray *secretPolynomial, IOSShortArray *errorPolynomial, IOSByteArray *privateKey);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_packPrivateKeyWithByteArray_withLongArray_withLongArray_withByteArray_withInt_withInt_withInt_(IOSByteArray *privateKey, IOSLongArray *secretPolynomial, IOSLongArray *errorPolynomial, IOSByteArray *seed, jint seedOffset, jint n, jint k);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyWithByteArray_withIntArray_withByteArray_withInt_withInt_withInt_(IOSByteArray *publicKey, IOSIntArray *T, IOSByteArray *seedA, jint seedAOffset, jint n, jint qLogarithm);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyIIISpeedWithByteArray_withIntArray_withByteArray_withInt_(IOSByteArray *publicKey, IOSIntArray *T, IOSByteArray *seedA, jint seedAOffset);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyIPWithByteArray_withLongArray_withByteArray_withInt_(IOSByteArray *publicKey, IOSLongArray *T, IOSByteArray *seedA, jint seedAOffset);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodePublicKeyIIIPWithByteArray_withLongArray_withByteArray_withInt_(IOSByteArray *publicKey, IOSLongArray *T, IOSByteArray *seedA, jint seedAOffset);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_withInt_withInt_(IOSIntArray *publicKey, IOSByteArray *seedA, jint seedAOffset, IOSByteArray *publicKeyInput, jint n, jint qLogarithm);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePublicKeyIIISpeedWithIntArray_withByteArray_withInt_withByteArray_(IOSIntArray *publicKey, IOSByteArray *seedA, jint seedAOffset, IOSByteArray *publicKeyInput);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePublicKeyIPWithIntArray_withByteArray_withInt_withByteArray_(IOSIntArray *publicKey, IOSByteArray *seedA, jint seedAOffset, IOSByteArray *publicKeyInput);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodePublicKeyIIIPWithIntArray_withByteArray_withInt_withByteArray_(IOSIntArray *publicKey, IOSByteArray *seedA, jint seedAOffset, IOSByteArray *publicKeyInput);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withIntArray_withInt_withInt_(IOSByteArray *signature, jint signatureOffset, IOSByteArray *C, jint cOffset, IOSIntArray *Z, jint n, jint d);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureIIISpeedWithByteArray_withInt_withByteArray_withInt_withIntArray_(IOSByteArray *signature, jint signatureOffset, IOSByteArray *C, jint cOffset, IOSIntArray *Z);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureIPWithByteArray_withInt_withByteArray_withInt_withLongArray_(IOSByteArray *signature, jint signatureOffset, IOSByteArray *C, jint cOffset, IOSLongArray *Z);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_encodeSignatureIIIPWithByteArray_withInt_withByteArray_withInt_withLongArray_(IOSByteArray *signature, jint signatureOffset, IOSByteArray *C, jint cOffset, IOSLongArray *Z);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodeSignatureWithByteArray_withIntArray_withByteArray_withInt_withInt_withInt_(IOSByteArray *C, IOSIntArray *Z, IOSByteArray *signature, jint signatureOffset, jint n, jint d);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodeSignatureIIISpeedWithByteArray_withIntArray_withByteArray_withInt_(IOSByteArray *C, IOSIntArray *Z, IOSByteArray *signature, jint signatureOffset);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodeSignatureIPWithByteArray_withLongArray_withByteArray_withInt_(IOSByteArray *C, IOSLongArray *Z, IOSByteArray *signature, jint signatureOffset);

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack_decodeSignatureIIIPWithByteArray_withLongArray_withByteArray_withInt_(IOSByteArray *C, IOSLongArray *Z, IOSByteArray *signature, jint signatureOffset);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoQteslaPqcCryptoQteslaPack)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // PqcCryptoQteslaPack_H
