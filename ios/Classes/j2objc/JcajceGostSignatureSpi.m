//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/gost/JcajceGostSignatureSpi.java
//

#include "AsymmetricKeyParameter.h"
#include "BouncyCastleProvider.h"
#include "CipherParameters.h"
#include "DSAExt.h"
#include "Digest.h"
#include "ECKey.h"
#include "ECPublicKey.h"
#include "GOST3410Key.h"
#include "GOST3410Signer.h"
#include "GOST3410Util.h"
#include "GOST3411Digest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceGostSignatureSpi.h"
#include "JcajceUtilECUtil.h"
#include "ParametersWithRandom.h"
#include "SubjectPublicKeyInfo.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/SignatureException.h"
#include "java/security/SignatureSpi.h"
#include "java/security/spec/AlgorithmParameterSpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi () {
 @public
  id<LibOrgBouncycastleCryptoDigest> digest_;
  id<LibOrgBouncycastleCryptoDSAExt> signer_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi, digest_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi, signer_, id<LibOrgBouncycastleCryptoDSAExt>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi, random_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  if ([LibOrgBouncycastleJceInterfacesECPublicKey_class_() isInstance:publicKey]) {
    param = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
  }
  else if ([LibOrgBouncycastleJceInterfacesGOST3410Key_class_() isInstance:publicKey]) {
    param = LibOrgBouncycastleJcajceProviderAsymmetricUtilGOST3410Util_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
  }
  else {
    @try {
      IOSByteArray *bytes = [((id<JavaSecurityPublicKey>) nil_chk(publicKey)) getEncoded];
      publicKey = LibOrgBouncycastleJceProviderBouncyCastleProvider_getPublicKeyWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(bytes));
      if ([LibOrgBouncycastleJceInterfacesECPublicKey_class_() isInstance:publicKey]) {
        param = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
      }
      else {
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't recognise key type in DSA based signer");
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't recognise key type in DSA based signer");
    }
  }
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  [((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param];
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  [self engineInitSignWithJavaSecurityPrivateKey:privateKey];
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey {
  id<LibOrgBouncycastleCryptoCipherParameters> param;
  if ([LibOrgBouncycastleJceInterfacesECKey_class_() isInstance:privateKey]) {
    param = LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(privateKey);
  }
  else {
    param = LibOrgBouncycastleJcajceProviderAsymmetricUtilGOST3410Util_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(privateKey);
  }
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  if (random_ != nil) {
    [((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithRandom_initWithLibOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(param, random_)];
  }
  else {
    [((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param];
  }
}

- (void)engineUpdateWithByte:(jbyte)b {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:b withInt:off withInt:len];
}

- (IOSByteArray *)engineSign {
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  @try {
    IOSByteArray *sigBytes = [IOSByteArray newArrayWithLength:64];
    IOSObjectArray *sig = [((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) generateSignatureWithByteArray:hash_];
    IOSByteArray *r = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(sig), 0))) toByteArray];
    IOSByteArray *s = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(sig, 1))) toByteArray];
    if (IOSByteArray_Get(nil_chk(s), 0) != 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(s, 0, sigBytes, 32 - s->size_, s->size_);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(s, 1, sigBytes, 32 - (s->size_ - 1), s->size_ - 1);
    }
    if (IOSByteArray_Get(nil_chk(r), 0) != 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(r, 0, sigBytes, 64 - r->size_, r->size_);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(r, 1, sigBytes, 64 - (r->size_ - 1), r->size_ - 1);
    }
    return sigBytes;
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_([e description]);
  }
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes {
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  IOSObjectArray *sig;
  @try {
    IOSByteArray *r = [IOSByteArray newArrayWithLength:32];
    IOSByteArray *s = [IOSByteArray newArrayWithLength:32];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigBytes, 0, s, 0, 32);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigBytes, 32, r, 0, 32);
    sig = [IOSObjectArray newArrayWithLength:2 type:JavaMathBigInteger_class_()];
    (void) IOSObjectArray_SetAndConsume(sig, 0, new_JavaMathBigInteger_initWithInt_withByteArray_(1, r));
    (void) IOSObjectArray_SetAndConsume(sig, 1, new_JavaMathBigInteger_initWithInt_withByteArray_(1, s));
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"error decoding signature bytes.");
  }
  return [((id<LibOrgBouncycastleCryptoDSAExt>) nil_chk(signer_)) verifySignatureWithByteArray:hash_ withJavaMathBigInteger:IOSObjectArray_Get(nil_chk(sig), 0) withJavaMathBigInteger:IOSObjectArray_Get(sig, 1)];
}

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)param {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 9, 8, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x4, 10, 11, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineInitVerifyWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:);
  methods[4].selector = @selector(engineUpdateWithByte:);
  methods[5].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(engineSign);
  methods[7].selector = @selector(engineVerifyWithByteArray:);
  methods[8].selector = @selector(engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[9].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[10].selector = @selector(engineGetParameterWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signer_", "LLibOrgBouncycastleCryptoDSAExt;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineInitVerify", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "engineInitSign", "LJavaSecurityPrivateKey;LJavaSecuritySecureRandom;", "LJavaSecurityPrivateKey;", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "[B", "engineSetParameter", "LJavaSecuritySpecAlgorithmParameterSpec;", "LNSString;LNSObject;", "engineGetParameter", "LNSString;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi = { "JcajceGostSignatureSpi", "lib.org.bouncycastle.jcajce.provider.asymmetric.gost", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi_init(LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi *self) {
  JavaSecuritySignatureSpi_init(self);
  self->digest_ = new_LibOrgBouncycastleCryptoDigestsGOST3411Digest_init();
  self->signer_ = new_LibOrgBouncycastleCryptoSignersGOST3410Signer_init();
}

LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi *new_LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi, init)
}

LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi *create_LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricGostJcajceGostSignatureSpi)
