//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/digests/CSHAKEDigest.java
//

#include "Arrays.h"
#include "CSHAKEDigest.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SHAKEDigest.h"

@interface LibOrgBouncycastleCryptoDigestsCSHAKEDigest () {
 @public
  IOSByteArray *diff_;
}

- (void)diffPadAndAbsorb;

- (IOSByteArray *)encodeStringWithByteArray:(IOSByteArray *)str;

+ (IOSByteArray *)leftEncodeWithLong:(jlong)strLen;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoDigestsCSHAKEDigest, diff_, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoDigestsCSHAKEDigest_get_padding(void);
static IOSByteArray *LibOrgBouncycastleCryptoDigestsCSHAKEDigest_padding;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoDigestsCSHAKEDigest, padding, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(LibOrgBouncycastleCryptoDigestsCSHAKEDigest *self);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(LibOrgBouncycastleCryptoDigestsCSHAKEDigest *self, IOSByteArray *str);

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleCryptoDigestsCSHAKEDigest_leftEncodeWithLong_(jlong strLen);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoDigestsCSHAKEDigest)

@implementation LibOrgBouncycastleCryptoDigestsCSHAKEDigest

- (instancetype)initWithInt:(jint)bitLength
              withByteArray:(IOSByteArray *)N
              withByteArray:(IOSByteArray *)S {
  LibOrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(self, bitLength, N, S);
  return self;
}

- (void)diffPadAndAbsorb {
  LibOrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(self);
}

- (IOSByteArray *)encodeStringWithByteArray:(IOSByteArray *)str {
  return LibOrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(self, str);
}

+ (IOSByteArray *)leftEncodeWithLong:(jlong)strLen {
  return LibOrgBouncycastleCryptoDigestsCSHAKEDigest_leftEncodeWithLong_(strLen);
}

- (jint)doOutputWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                      withInt:(jint)outLen {
  if (diff_ != nil) {
    if (!squeezing_) {
      [self absorbBitsWithInt:(jint) 0x00 withInt:2];
    }
    [self squeezeWithByteArray:outArg withInt:outOff withLong:((jlong) outLen) * 8];
    return outLen;
  }
  else {
    return [super doOutputWithByteArray:outArg withInt:outOff withInt:outLen];
  }
}

- (void)reset {
  [super reset];
  if (diff_ != nil) {
    LibOrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(self);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withByteArray:withByteArray:);
  methods[1].selector = @selector(diffPadAndAbsorb);
  methods[2].selector = @selector(encodeStringWithByteArray:);
  methods[3].selector = @selector(leftEncodeWithLong:);
  methods[4].selector = @selector(doOutputWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "padding", "[B", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "diff_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[B[B", "encodeString", "[B", "leftEncode", "J", "doOutput", "[BII", &LibOrgBouncycastleCryptoDigestsCSHAKEDigest_padding };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoDigestsCSHAKEDigest = { "CSHAKEDigest", "lib.org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoDigestsCSHAKEDigest;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoDigestsCSHAKEDigest class]) {
    LibOrgBouncycastleCryptoDigestsCSHAKEDigest_padding = [IOSByteArray newArrayWithLength:100];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoDigestsCSHAKEDigest)
  }
}

@end

void LibOrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(LibOrgBouncycastleCryptoDigestsCSHAKEDigest *self, jint bitLength, IOSByteArray *N, IOSByteArray *S) {
  LibOrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(self, bitLength);
  if ((N == nil || N->size_ == 0) && (S == nil || S->size_ == 0)) {
    self->diff_ = nil;
  }
  else {
    self->diff_ = LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(LibOrgBouncycastleCryptoDigestsCSHAKEDigest_leftEncodeWithLong_(self->rate_ / 8), LibOrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(self, N), LibOrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(self, S));
    LibOrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(self);
  }
}

LibOrgBouncycastleCryptoDigestsCSHAKEDigest *new_LibOrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(jint bitLength, IOSByteArray *N, IOSByteArray *S) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoDigestsCSHAKEDigest, initWithInt_withByteArray_withByteArray_, bitLength, N, S)
}

LibOrgBouncycastleCryptoDigestsCSHAKEDigest *create_LibOrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(jint bitLength, IOSByteArray *N, IOSByteArray *S) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoDigestsCSHAKEDigest, initWithInt_withByteArray_withByteArray_, bitLength, N, S)
}

void LibOrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(LibOrgBouncycastleCryptoDigestsCSHAKEDigest *self) {
  jint blockSize = self->rate_ / 8;
  [self absorbWithByteArray:self->diff_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->diff_))->size_];
  jint required = blockSize - (self->diff_->size_ % blockSize);
  while (required > ((IOSByteArray *) nil_chk(LibOrgBouncycastleCryptoDigestsCSHAKEDigest_padding))->size_) {
    [self absorbWithByteArray:LibOrgBouncycastleCryptoDigestsCSHAKEDigest_padding withInt:0 withInt:LibOrgBouncycastleCryptoDigestsCSHAKEDigest_padding->size_];
    required -= LibOrgBouncycastleCryptoDigestsCSHAKEDigest_padding->size_;
  }
  [self absorbWithByteArray:LibOrgBouncycastleCryptoDigestsCSHAKEDigest_padding withInt:0 withInt:required];
}

IOSByteArray *LibOrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(LibOrgBouncycastleCryptoDigestsCSHAKEDigest *self, IOSByteArray *str) {
  if (str == nil || str->size_ == 0) {
    return LibOrgBouncycastleCryptoDigestsCSHAKEDigest_leftEncodeWithLong_(0);
  }
  return LibOrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(LibOrgBouncycastleCryptoDigestsCSHAKEDigest_leftEncodeWithLong_(str->size_ * 8LL), str);
}

IOSByteArray *LibOrgBouncycastleCryptoDigestsCSHAKEDigest_leftEncodeWithLong_(jlong strLen) {
  LibOrgBouncycastleCryptoDigestsCSHAKEDigest_initialize();
  jbyte n = 1;
  jlong v = strLen;
  while ((JreRShiftAssignLong(&v, 8)) != 0) {
    n++;
  }
  IOSByteArray *b = [IOSByteArray newArrayWithLength:n + 1];
  *IOSByteArray_GetRef(b, 0) = n;
  for (jint i = 1; i <= n; i++) {
    *IOSByteArray_GetRef(b, i) = (jbyte) (JreRShift64(strLen, (8 * (n - i))));
  }
  return b;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoDigestsCSHAKEDigest)
