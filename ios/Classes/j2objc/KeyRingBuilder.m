//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/key/generation/KeyRingBuilder.java
//

#include "ECDH.h"
#include "ECDSA.h"
#include "EllipticCurve.h"
#include "HashAlgorithmUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaPGPContentSignerBuilder.h"
#include "JcaPGPDigestCalculatorProviderBuilder.h"
#include "JcaPGPKeyPair.h"
#include "JcePBESecretKeyEncryptorBuilder.h"
#include "KeyFlag.h"
#include "KeyFlags.h"
#include "KeyRingBuilder.h"
#include "KeyRingBuilderInterface.h"
#include "KeySpec.h"
#include "KeySpecBuilder.h"
#include "KeySpecBuilderInterface.h"
#include "KeyType.h"
#include "PBESecretKeyEncryptor.h"
#include "PGPContentSignerBuilder.h"
#include "PGPDigestCalculator.h"
#include "PGPDigestCalculatorProvider.h"
#include "PGPKeyPair.h"
#include "PGPKeyRingGenerator.h"
#include "PGPKeyRingUtil.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPSecretKeyRing.h"
#include "PGPSignature.h"
#include "PGPSignatureSubpacketVector.h"
#include "Passphrase.h"
#include "PublicKeyAlgorithm.h"
#include "RSA_GENERAL.h"
#include "RsaLength.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/nio/charset/Charset.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"

@interface LibComAfterlogicPgpKeyGenerationKeyRingBuilder () {
 @public
  JavaNioCharsetCharset *UTF8_;
  id<JavaUtilList> keySpecs_;
  NSString *userId_;
  LibComAfterlogicPgpUtilPassphrase *passphrase_;
}

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpKeyGenerationKeyRingBuilder, UTF8_, JavaNioCharsetCharset *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpKeyGenerationKeyRingBuilder, keySpecs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpKeyGenerationKeyRingBuilder, userId_, NSString *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpKeyGenerationKeyRingBuilder, passphrase_, LibComAfterlogicPgpUtilPassphrase *)

@interface LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl () {
 @public
  LibComAfterlogicPgpKeyGenerationKeyRingBuilder *this$0_;
}

@end

@interface LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl () {
 @public
  LibComAfterlogicPgpKeyGenerationKeyRingBuilder *this$0_;
}

@end

@interface LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl () {
 @public
  LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl *this$0_;
}

- (LibOrgBouncycastleOpenpgpPGPKeyPair *)generateKeyPairWithLibComAfterlogicPgpKeyGenerationKeySpec:(LibComAfterlogicPgpKeyGenerationKeySpec *)spec;

@end

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPKeyPair *LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_generateKeyPairWithLibComAfterlogicPgpKeyGenerationKeySpec_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl *self, LibComAfterlogicPgpKeyGenerationKeySpec *spec);

@implementation LibComAfterlogicPgpKeyGenerationKeyRingBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibComAfterlogicPgpKeyGenerationKeyRingBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *)simpleRsaKeyRingWithNSString:(NSString *)userId
                         withLibComAfterlogicPgpKeyGenerationTypeLengthRsaLength:(LibComAfterlogicPgpKeyGenerationTypeLengthRsaLength *)length {
  return [((id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_Build>) nil_chk([((id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPassphrase>) nil_chk([((id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPrimaryUserId>) nil_chk([self withMasterKeyWithLibComAfterlogicPgpKeyGenerationKeySpec:[((id<LibComAfterlogicPgpKeyGenerationKeySpecBuilderInterface_WithDetailedConfiguration>) nil_chk([((LibComAfterlogicPgpKeyGenerationKeySpecBuilder *) nil_chk(LibComAfterlogicPgpKeyGenerationKeySpec_getBuilderWithLibComAfterlogicPgpKeyGenerationTypeKeyType_(LibComAfterlogicPgpKeyGenerationTypeRSA_GENERAL_withLengthWithLibComAfterlogicPgpKeyGenerationTypeLengthRsaLength_(length)))) withDefaultKeyFlags])) withDefaultAlgorithms]])) withPrimaryUserIdWithNSString:userId])) withoutPassphrase])) build];
}

- (LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *)simpleEcKeyRingWithNSString:(NSString *)userId {
  return [((id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_Build>) nil_chk([((id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPassphrase>) nil_chk([((id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPrimaryUserId>) nil_chk([((id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface>) nil_chk([self withSubKeyWithLibComAfterlogicPgpKeyGenerationKeySpec:[((id<LibComAfterlogicPgpKeyGenerationKeySpecBuilderInterface_WithDetailedConfiguration>) nil_chk(([((LibComAfterlogicPgpKeyGenerationKeySpecBuilder *) nil_chk(LibComAfterlogicPgpKeyGenerationKeySpec_getBuilderWithLibComAfterlogicPgpKeyGenerationTypeKeyType_(LibComAfterlogicPgpKeyGenerationTypeECDH_fromCurveWithLibComAfterlogicPgpKeyGenerationTypeCurveEllipticCurve_(JreLoadEnum(LibComAfterlogicPgpKeyGenerationTypeCurveEllipticCurve, _P256))))) withKeyFlagsWithLibComAfterlogicPgpAlgorithmKeyFlagArray:[IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(LibComAfterlogicPgpAlgorithmKeyFlag, ENCRYPT_STORAGE), JreLoadEnum(LibComAfterlogicPgpAlgorithmKeyFlag, ENCRYPT_COMMS) } count:2 type:LibComAfterlogicPgpAlgorithmKeyFlag_class_()]]))) withDefaultAlgorithms]])) withMasterKeyWithLibComAfterlogicPgpKeyGenerationKeySpec:[((id<LibComAfterlogicPgpKeyGenerationKeySpecBuilderInterface_WithDetailedConfiguration>) nil_chk(([((LibComAfterlogicPgpKeyGenerationKeySpecBuilder *) nil_chk(LibComAfterlogicPgpKeyGenerationKeySpec_getBuilderWithLibComAfterlogicPgpKeyGenerationTypeKeyType_(LibComAfterlogicPgpKeyGenerationTypeECDSA_fromCurveWithLibComAfterlogicPgpKeyGenerationTypeCurveEllipticCurve_(JreLoadEnum(LibComAfterlogicPgpKeyGenerationTypeCurveEllipticCurve, _P256))))) withKeyFlagsWithLibComAfterlogicPgpAlgorithmKeyFlagArray:[IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(LibComAfterlogicPgpAlgorithmKeyFlag, AUTHENTICATION), JreLoadEnum(LibComAfterlogicPgpAlgorithmKeyFlag, CERTIFY_OTHER), JreLoadEnum(LibComAfterlogicPgpAlgorithmKeyFlag, SIGN_DATA) } count:3 type:LibComAfterlogicPgpAlgorithmKeyFlag_class_()]]))) withDefaultAlgorithms]])) withPrimaryUserIdWithNSString:userId])) withoutPassphrase])) build];
}

- (id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface>)withSubKeyWithLibComAfterlogicPgpKeyGenerationKeySpec:(LibComAfterlogicPgpKeyGenerationKeySpec *)type {
  [((id<JavaUtilList>) nil_chk(self->keySpecs_)) addWithId:type];
  return self;
}

- (id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPrimaryUserId>)withMasterKeyWithLibComAfterlogicPgpKeyGenerationKeySpec:(LibComAfterlogicPgpKeyGenerationKeySpec *)spec {
  if (([((LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *) nil_chk([((LibComAfterlogicPgpKeyGenerationKeySpec *) nil_chk(spec)) getSubpackets])) getKeyFlags] & LibOrgBouncycastleBcpgSigKeyFlags_CERTIFY_OTHER) == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Certification Key MUST have KeyFlag CERTIFY_OTHER");
  }
  [((id<JavaUtilList>) nil_chk(self->keySpecs_)) addWithInt:0 withId:spec];
  return new_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyCollectionPGPKeyRingUtil;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyCollectionPGPKeyRingUtil;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPrimaryUserId;", 0x1, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(simpleRsaKeyRingWithNSString:withLibComAfterlogicPgpKeyGenerationTypeLengthRsaLength:);
  methods[2].selector = @selector(simpleEcKeyRingWithNSString:);
  methods[3].selector = @selector(withSubKeyWithLibComAfterlogicPgpKeyGenerationKeySpec:);
  methods[4].selector = @selector(withMasterKeyWithLibComAfterlogicPgpKeyGenerationKeySpec:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UTF8_", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keySpecs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "userId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "passphrase_", "LLibComAfterlogicPgpUtilPassphrase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "simpleRsaKeyRing", "LNSString;LLibComAfterlogicPgpKeyGenerationTypeLengthRsaLength;", "LLibOrgBouncycastleOpenpgpPGPException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidAlgorithmParameterException;", "simpleEcKeyRing", "LNSString;", "withSubKey", "LLibComAfterlogicPgpKeyGenerationKeySpec;", "withMasterKey", "Ljava/util/List<Llib/com/afterlogic/pgp/key/generation/KeySpec;>;", "LLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl;LLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpKeyGenerationKeyRingBuilder = { "KeyRingBuilder", "lib.com.afterlogic.pgp.key.generation", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, 9, -1, -1, -1 };
  return &_LibComAfterlogicPgpKeyGenerationKeyRingBuilder;
}

@end

void LibComAfterlogicPgpKeyGenerationKeyRingBuilder_init(LibComAfterlogicPgpKeyGenerationKeyRingBuilder *self) {
  NSObject_init(self);
  self->UTF8_ = JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8");
  self->keySpecs_ = new_JavaUtilArrayList_init();
}

LibComAfterlogicPgpKeyGenerationKeyRingBuilder *new_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_init() {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeyGenerationKeyRingBuilder, init)
}

LibComAfterlogicPgpKeyGenerationKeyRingBuilder *create_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_init() {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeyGenerationKeyRingBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpKeyGenerationKeyRingBuilder)

@implementation LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl

- (instancetype)initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder:(LibComAfterlogicPgpKeyGenerationKeyRingBuilder *)outer$ {
  LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(self, outer$);
  return self;
}

- (id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPassphrase>)withPrimaryUserIdWithNSString:(NSString *)userId {
  this$0_->userId_ = userId;
  return new_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(this$0_);
}

- (id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPassphrase>)withPrimaryUserIdWithByteArray:(IOSByteArray *)userId {
  return [self withPrimaryUserIdWithNSString:[NSString java_stringWithBytes:userId charset:this$0_->UTF8_]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPassphrase;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_WithPassphrase;", 0x1, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder:);
  methods[1].selector = @selector(withPrimaryUserIdWithNSString:);
  methods[2].selector = @selector(withPrimaryUserIdWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibComAfterlogicPgpKeyGenerationKeyRingBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withPrimaryUserId", "LNSString;", "[B", "LLibComAfterlogicPgpKeyGenerationKeyRingBuilder;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl = { "WithPrimaryUserIdImpl", "lib.com.afterlogic.pgp.key.generation", ptrTable, methods, fields, 7, 0x0, 3, 1, 3, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl;
}

@end

void LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl *self, LibComAfterlogicPgpKeyGenerationKeyRingBuilder *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl *new_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder *outer$) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl, initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_, outer$)
}

LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl *create_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder *outer$) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl, initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPrimaryUserIdImpl)

@implementation LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl

- (instancetype)initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder:(LibComAfterlogicPgpKeyGenerationKeyRingBuilder *)outer$ {
  LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(self, outer$);
  return self;
}

- (id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_Build>)withPassphraseWithLibComAfterlogicPgpUtilPassphrase:(LibComAfterlogicPgpUtilPassphrase *)passphrase {
  this$0_->passphrase_ = passphrase;
  return new_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_(self);
}

- (id<LibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_Build>)withoutPassphrase {
  this$0_->passphrase_ = nil;
  return new_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_Build;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyGenerationKeyRingBuilderInterface_Build;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder:);
  methods[1].selector = @selector(withPassphraseWithLibComAfterlogicPgpUtilPassphrase:);
  methods[2].selector = @selector(withoutPassphrase);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibComAfterlogicPgpKeyGenerationKeyRingBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withPassphrase", "LLibComAfterlogicPgpUtilPassphrase;", "LLibComAfterlogicPgpKeyGenerationKeyRingBuilder;", "LLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl = { "WithPassphraseImpl", "lib.com.afterlogic.pgp.key.generation", ptrTable, methods, fields, 7, 0x0, 3, 1, 2, 3, -1, -1, -1 };
  return &_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl;
}

@end

void LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl *self, LibComAfterlogicPgpKeyGenerationKeyRingBuilder *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl *new_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder *outer$) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl, initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_, outer$)
}

LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl *create_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder *outer$) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl, initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl)

@implementation LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl

- (instancetype)initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl:(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl *)outer$ {
  LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_(self, outer$);
  return self;
}

- (LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil *)build {
  id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator> calculator = [((id<LibOrgBouncycastleOpenpgpOperatorPGPDigestCalculatorProvider>) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPDigestCalculatorProviderBuilder_init() build])) getWithInt:[((LibComAfterlogicPgpAlgorithmHashAlgorithmUtil *) nil_chk(JreLoadEnum(LibComAfterlogicPgpAlgorithmHashAlgorithmUtil, SHA1))) getAlgorithmId]];
  LibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor *encryptor = this$0_->this$0_->passphrase_ == nil ? nil : [new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyEncryptorBuilder_initWithInt_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_(LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_256, calculator) buildWithCharArray:this$0_->this$0_->passphrase_ != nil ? [this$0_->this$0_->passphrase_ getChars] : nil];
  if (this$0_->this$0_->passphrase_ != nil) {
    [this$0_->this$0_->passphrase_ clear];
  }
  LibComAfterlogicPgpKeyGenerationKeySpec *certKeySpec = [((id<JavaUtilList>) nil_chk(this$0_->this$0_->keySpecs_)) getWithInt:0];
  (void) [((id<JavaUtilList>) nil_chk(this$0_->this$0_->keySpecs_)) removeWithInt:0];
  LibOrgBouncycastleOpenpgpPGPKeyPair *certKey = LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_generateKeyPairWithLibComAfterlogicPgpKeyGenerationKeySpec_(self, certKeySpec);
  id<LibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder> signer = new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentSignerBuilder_initWithInt_withInt_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([((LibOrgBouncycastleOpenpgpPGPKeyPair *) nil_chk(certKey)) getPublicKey])) getAlgorithm], [((LibComAfterlogicPgpAlgorithmHashAlgorithmUtil *) nil_chk(JreLoadEnum(LibComAfterlogicPgpAlgorithmHashAlgorithmUtil, SHA512))) getAlgorithmId]);
  LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *hashedSubPackets = [((LibComAfterlogicPgpKeyGenerationKeySpec *) nil_chk(certKeySpec)) getSubpackets];
  LibOrgBouncycastleOpenpgpPGPKeyRingGenerator *ringGenerator = new_LibOrgBouncycastleOpenpgpPGPKeyRingGenerator_initWithInt_withLibOrgBouncycastleOpenpgpPGPKeyPair_withNSString_withLibOrgBouncycastleOpenpgpOperatorPGPDigestCalculator_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector_withLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_withLibOrgBouncycastleOpenpgpOperatorPBESecretKeyEncryptor_(LibOrgBouncycastleOpenpgpPGPSignature_POSITIVE_CERTIFICATION, certKey, this$0_->this$0_->userId_, calculator, hashedSubPackets, nil, signer, encryptor);
  for (LibComAfterlogicPgpKeyGenerationKeySpec * __strong subKeySpec in nil_chk(this$0_->this$0_->keySpecs_)) {
    LibOrgBouncycastleOpenpgpPGPKeyPair *subKey = LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_generateKeyPairWithLibComAfterlogicPgpKeyGenerationKeySpec_(self, subKeySpec);
    if ([((LibComAfterlogicPgpKeyGenerationKeySpec *) nil_chk(subKeySpec)) isInheritedSubPackets]) {
      [ringGenerator addSubKeyWithLibOrgBouncycastleOpenpgpPGPKeyPair:subKey];
    }
    else {
      [ringGenerator addSubKeyWithLibOrgBouncycastleOpenpgpPGPKeyPair:subKey withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:[subKeySpec getSubpackets] withLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:nil];
    }
  }
  LibOrgBouncycastleOpenpgpPGPPublicKeyRing *publicKeys = [ringGenerator generatePublicKeyRing];
  LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secretKeys = [ringGenerator generateSecretKeyRing];
  return new_LibComAfterlogicPgpKeyCollectionPGPKeyRingUtil_initWithLibOrgBouncycastleOpenpgpPGPPublicKeyRing_withLibOrgBouncycastleOpenpgpPGPSecretKeyRing_(publicKeys, secretKeys);
}

- (LibOrgBouncycastleOpenpgpPGPKeyPair *)generateKeyPairWithLibComAfterlogicPgpKeyGenerationKeySpec:(LibComAfterlogicPgpKeyGenerationKeySpec *)spec {
  return LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_generateKeyPairWithLibComAfterlogicPgpKeyGenerationKeySpec_(self, spec);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpKeyCollectionPGPKeyRingUtil;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPKeyPair;", 0x2, 1, 2, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(generateKeyPairWithLibComAfterlogicPgpKeyGenerationKeySpec:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityNoSuchAlgorithmException;LLibOrgBouncycastleOpenpgpPGPException;LJavaSecurityInvalidAlgorithmParameterException;", "generateKeyPair", "LLibComAfterlogicPgpKeyGenerationKeySpec;", "LLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl = { "BuildImpl", "lib.com.afterlogic.pgp.key.generation", ptrTable, methods, fields, 7, 0x0, 3, 1, 3, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl;
}

@end

void LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl *self, LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl *new_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl *outer$) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl, initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_, outer$)
}

LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl *create_LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl *outer$) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl, initWithLibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_, outer$)
}

LibOrgBouncycastleOpenpgpPGPKeyPair *LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl_generateKeyPairWithLibComAfterlogicPgpKeyGenerationKeySpec_(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl *self, LibComAfterlogicPgpKeyGenerationKeySpec *spec) {
  id<LibComAfterlogicPgpKeyGenerationTypeKeyType> type = [((LibComAfterlogicPgpKeyGenerationKeySpec *) nil_chk(spec)) getKeyType];
  JavaSecurityKeyPairGenerator *certKeyGenerator = JavaSecurityKeyPairGenerator_getInstanceWithNSString_([((id<LibComAfterlogicPgpKeyGenerationTypeKeyType>) nil_chk(type)) getName]);
  [((JavaSecurityKeyPairGenerator *) nil_chk(certKeyGenerator)) initialize__WithJavaSecuritySpecAlgorithmParameterSpec:[type getAlgorithmSpec]];
  JavaSecurityKeyPair *keyPair = [certKeyGenerator generateKeyPair];
  LibOrgBouncycastleOpenpgpPGPKeyPair *pgpKeyPair = new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyPair_initWithInt_withJavaSecurityKeyPair_withJavaUtilDate_([((LibComAfterlogicPgpAlgorithmPublicKeyAlgorithm *) nil_chk([type getAlgorithm])) getAlgorithmId], keyPair, new_JavaUtilDate_init());
  return pgpKeyPair;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpKeyGenerationKeyRingBuilder_WithPassphraseImpl_BuildImpl)
