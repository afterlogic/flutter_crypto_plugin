//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/bc/BcPGPKeyPair.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BcPGPKeyConverter.h"
#include "BcPGPKeyPair.h"
#include "J2ObjC_source.h"
#include "PGPAlgorithmParameters.h"
#include "PGPKeyPair.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "java/util/Date.h"

@interface LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair ()

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithInt:(jint)algorithm
           withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:(id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters>)parameters
      withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)pubKey
                                              withJavaUtilDate:(JavaUtilDate *)date;

+ (LibOrgBouncycastleOpenpgpPGPPrivateKey *)getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pub
                                          withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privKey;

@end

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withJavaUtilDate_(jint algorithm, id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters> parameters, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *pubKey, JavaUtilDate *date);

__attribute__((unused)) static LibOrgBouncycastleOpenpgpPGPPrivateKey *LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleOpenpgpPGPPublicKey *pub, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privKey);

@implementation LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair

+ (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPublicKeyWithInt:(jint)algorithm
           withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:(id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters>)parameters
      withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)pubKey
                                              withJavaUtilDate:(JavaUtilDate *)date {
  return LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withJavaUtilDate_(algorithm, parameters, pubKey, date);
}

+ (LibOrgBouncycastleOpenpgpPGPPrivateKey *)getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pub
                                          withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privKey {
  return LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pub, privKey);
}

- (instancetype)initWithInt:(jint)algorithm
withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)keyPair
           withJavaUtilDate:(JavaUtilDate *)date {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(self, algorithm, keyPair, date);
  return self;
}

- (instancetype)initWithInt:(jint)algorithm
withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:(id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters>)parameters
withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)keyPair
           withJavaUtilDate:(JavaUtilDate *)date {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(self, algorithm, parameters, keyPair, date);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPrivateKey;", 0xa, 3, 4, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getPublicKeyWithInt:withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:withJavaUtilDate:);
  methods[1].selector = @selector(getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[2].selector = @selector(initWithInt:withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:withJavaUtilDate:);
  methods[3].selector = @selector(initWithInt:withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:withJavaUtilDate:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPublicKey", "ILLibOrgBouncycastleOpenpgpPGPAlgorithmParameters;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;LJavaUtilDate;", "LLibOrgBouncycastleOpenpgpPGPException;", "getPrivateKey", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "ILLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;LJavaUtilDate;", "ILLibOrgBouncycastleOpenpgpPGPAlgorithmParameters;LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;LJavaUtilDate;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair = { "BcPGPKeyPair", "lib.org.bouncycastle.openpgp.operator.bc", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair;
}

@end

LibOrgBouncycastleOpenpgpPGPPublicKey *LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withJavaUtilDate_(jint algorithm, id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters> parameters, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *pubKey, JavaUtilDate *date) {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initialize();
  return [new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter_init() getPGPPublicKeyWithInt:algorithm withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:parameters withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:pubKey withJavaUtilDate:date];
}

LibOrgBouncycastleOpenpgpPGPPrivateKey *LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(LibOrgBouncycastleOpenpgpPGPPublicKey *pub, LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *privKey) {
  LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initialize();
  return [new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyConverter_init() getPGPPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:pub withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter:privKey];
}

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *self, jint algorithm, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date) {
  LibOrgBouncycastleOpenpgpPGPKeyPair_init(self);
  self->pub_ = LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withJavaUtilDate_(algorithm, nil, [((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(keyPair)) getPublic], date);
  self->priv_ = LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(self->pub_, [keyPair getPrivate]);
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(jint algorithm, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair, initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_, algorithm, keyPair, date)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(jint algorithm, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair, initWithInt_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_, algorithm, keyPair, date)
}

void LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *self, jint algorithm, id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters> parameters, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date) {
  LibOrgBouncycastleOpenpgpPGPKeyPair_init(self);
  self->pub_ = LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPublicKeyWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withJavaUtilDate_(algorithm, parameters, [((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(keyPair)) getPublic], date);
  self->priv_ = LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(self->pub_, [keyPair getPrivate]);
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *new_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(jint algorithm, id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters> parameters, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair, initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_, algorithm, parameters, keyPair, date)
}

LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair *create_LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair_initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_(jint algorithm, id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters> parameters, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, JavaUtilDate *date) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair, initWithInt_withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters_withLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withJavaUtilDate_, algorithm, parameters, keyPair, date)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorBcBcPGPKeyPair)
