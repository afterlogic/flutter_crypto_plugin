//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/DefaultTlsSRPGroupVerifier.java
//

#ifndef DefaultTlsSRPGroupVerifier_H
#define DefaultTlsSRPGroupVerifier_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsSRPGroupVerifier.h"

@class JavaMathBigInteger;
@class JavaUtilVector;
@class LibOrgBouncycastleCryptoParamsSRP6GroupParameters;

@interface LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier : NSObject < LibOrgBouncycastleCryptoTlsTlsSRPGroupVerifier > {
 @public
  JavaUtilVector *groups_;
}
@property (readonly, class) JavaUtilVector *DEFAULT_GROUPS NS_SWIFT_NAME(DEFAULT_GROUPS);

+ (JavaUtilVector *)DEFAULT_GROUPS;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaUtilVector:(JavaUtilVector *)groups;

- (jboolean)acceptWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)group;

#pragma mark Protected

- (jboolean)areGroupsEqualWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)a
                          withLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)b;

- (jboolean)areParametersEqualWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier, groups_, JavaUtilVector *)

inline JavaUtilVector *LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_get_DEFAULT_GROUPS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilVector *LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier, DEFAULT_GROUPS, JavaUtilVector *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *self);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(void);

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *self, JavaUtilVector *groups);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *new_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(JavaUtilVector *groups) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier *create_LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(JavaUtilVector *groups);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsDefaultTlsSRPGroupVerifier)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DefaultTlsSRPGroupVerifier_H
