//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/Ed25519phSigner.java
//

#include "Arrays.h"
#include "CipherParameters.h"
#include "Digest.h"
#include "Ed25519.h"
#include "Ed25519PrivateKeyParameters.h"
#include "Ed25519PublicKeyParameters.h"
#include "Ed25519phSigner.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"

@interface LibOrgBouncycastleCryptoSignersEd25519phSigner () {
 @public
  id<LibOrgBouncycastleCryptoDigest> prehash_;
  IOSByteArray *context_;
  jboolean forSigning_;
  LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters *privateKey_;
  LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *publicKey_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersEd25519phSigner, prehash_, id<LibOrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersEd25519phSigner, context_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersEd25519phSigner, privateKey_, LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoSignersEd25519phSigner, publicKey_, LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *)

@implementation LibOrgBouncycastleCryptoSignersEd25519phSigner

- (instancetype)initWithByteArray:(IOSByteArray *)context {
  LibOrgBouncycastleCryptoSignersEd25519phSigner_initWithByteArray_(self, context);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)parameters {
  self->forSigning_ = forSigning;
  if (forSigning) {
    self->privateKey_ = (LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters *) cast_chk(parameters, [LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters class]);
    self->publicKey_ = [((LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters *) nil_chk(privateKey_)) generatePublicKey];
  }
  else {
    self->privateKey_ = nil;
    self->publicKey_ = (LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters *) cast_chk(parameters, [LibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters class]);
  }
  [self reset];
}

- (void)updateWithByte:(jbyte)b {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(prehash_)) updateWithByte:b];
}

- (void)updateWithByteArray:(IOSByteArray *)buf
                    withInt:(jint)off
                    withInt:(jint)len {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(prehash_)) updateWithByteArray:buf withInt:off withInt:len];
}

- (IOSByteArray *)generateSignature {
  if (!forSigning_ || nil == privateKey_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Ed25519phSigner not initialised for signature generation.");
  }
  IOSByteArray *msg = [IOSByteArray newArrayWithLength:LibOrgBouncycastleMathEcRfc8032Ed25519_PREHASH_SIZE];
  if (LibOrgBouncycastleMathEcRfc8032Ed25519_PREHASH_SIZE != [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(prehash_)) doFinalWithByteArray:msg withInt:0]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Prehash digest failed");
  }
  IOSByteArray *signature = [IOSByteArray newArrayWithLength:LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters_SIGNATURE_SIZE];
  [((LibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters *) nil_chk(privateKey_)) signWithInt:LibOrgBouncycastleMathEcRfc8032Ed25519_Algorithm_Ed25519ph withLibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters:publicKey_ withByteArray:context_ withByteArray:msg withInt:0 withInt:LibOrgBouncycastleMathEcRfc8032Ed25519_PREHASH_SIZE withByteArray:signature withInt:0];
  return signature;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  if (forSigning_ || nil == publicKey_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Ed25519phSigner not initialised for verification");
  }
  IOSByteArray *pk = [publicKey_ getEncoded];
  return LibOrgBouncycastleMathEcRfc8032Ed25519_verifyPrehashWithByteArray_withInt_withByteArray_withInt_withByteArray_withLibOrgBouncycastleCryptoDigest_(signature, 0, pk, 0, context_, prehash_);
}

- (void)reset {
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(prehash_)) reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(updateWithByte:);
  methods[3].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(generateSignature);
  methods[5].selector = @selector(verifySignatureWithByteArray:);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prehash_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "context_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forSigning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "LLibOrgBouncycastleCryptoParamsEd25519PrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LLibOrgBouncycastleCryptoParamsEd25519PublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "update", "B", "[BII", "verifySignature" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoSignersEd25519phSigner = { "Ed25519phSigner", "lib.org.bouncycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoSignersEd25519phSigner;
}

@end

void LibOrgBouncycastleCryptoSignersEd25519phSigner_initWithByteArray_(LibOrgBouncycastleCryptoSignersEd25519phSigner *self, IOSByteArray *context) {
  NSObject_init(self);
  self->prehash_ = LibOrgBouncycastleMathEcRfc8032Ed25519_createPrehash();
  self->context_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(context);
}

LibOrgBouncycastleCryptoSignersEd25519phSigner *new_LibOrgBouncycastleCryptoSignersEd25519phSigner_initWithByteArray_(IOSByteArray *context) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersEd25519phSigner, initWithByteArray_, context)
}

LibOrgBouncycastleCryptoSignersEd25519phSigner *create_LibOrgBouncycastleCryptoSignersEd25519phSigner_initWithByteArray_(IOSByteArray *context) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersEd25519phSigner, initWithByteArray_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoSignersEd25519phSigner)
