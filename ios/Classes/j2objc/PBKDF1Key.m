//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/PBKDF1Key.java
//

#include "CharToByteConverter.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PBKDF1Key.h"
#include "java/lang/System.h"
#include "javax/security/auth/Destroyable.h"

@interface LibOrgBouncycastleJcajcePBKDF1Key () {
 @public
  IOSCharArray *password_;
  id<LibOrgBouncycastleCryptoCharToByteConverter> converter_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajcePBKDF1Key, password_, IOSCharArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajcePBKDF1Key, converter_, id<LibOrgBouncycastleCryptoCharToByteConverter>)

@implementation LibOrgBouncycastleJcajcePBKDF1Key

- (instancetype)initWithCharArray:(IOSCharArray *)password
withLibOrgBouncycastleCryptoCharToByteConverter:(id<LibOrgBouncycastleCryptoCharToByteConverter>)converter {
  LibOrgBouncycastleJcajcePBKDF1Key_initWithCharArray_withLibOrgBouncycastleCryptoCharToByteConverter_(self, password, converter);
  return self;
}

- (IOSCharArray *)getPassword {
  return password_;
}

- (NSString *)getAlgorithm {
  return @"PBKDF1";
}

- (NSString *)getFormat {
  return [((id<LibOrgBouncycastleCryptoCharToByteConverter>) nil_chk(converter_)) getType];
}

- (IOSByteArray *)getEncoded {
  return [((id<LibOrgBouncycastleCryptoCharToByteConverter>) nil_chk(converter_)) convertWithCharArray:password_];
}

- (void)destroy {
  JavaxSecurityAuthDestroyable_destroy(self);
}

- (jboolean)isDestroyed {
  return JavaxSecurityAuthDestroyable_isDestroyed(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:withLibOrgBouncycastleCryptoCharToByteConverter:);
  methods[1].selector = @selector(getPassword);
  methods[2].selector = @selector(getAlgorithm);
  methods[3].selector = @selector(getFormat);
  methods[4].selector = @selector(getEncoded);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "password_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "converter_", "LLibOrgBouncycastleCryptoCharToByteConverter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[CLLibOrgBouncycastleCryptoCharToByteConverter;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajcePBKDF1Key = { "PBKDF1Key", "lib.org.bouncycastle.jcajce", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajcePBKDF1Key;
}

@end

void LibOrgBouncycastleJcajcePBKDF1Key_initWithCharArray_withLibOrgBouncycastleCryptoCharToByteConverter_(LibOrgBouncycastleJcajcePBKDF1Key *self, IOSCharArray *password, id<LibOrgBouncycastleCryptoCharToByteConverter> converter) {
  NSObject_init(self);
  self->password_ = [IOSCharArray newArrayWithLength:((IOSCharArray *) nil_chk(password))->size_];
  self->converter_ = converter;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(password, 0, self->password_, 0, password->size_);
}

LibOrgBouncycastleJcajcePBKDF1Key *new_LibOrgBouncycastleJcajcePBKDF1Key_initWithCharArray_withLibOrgBouncycastleCryptoCharToByteConverter_(IOSCharArray *password, id<LibOrgBouncycastleCryptoCharToByteConverter> converter) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajcePBKDF1Key, initWithCharArray_withLibOrgBouncycastleCryptoCharToByteConverter_, password, converter)
}

LibOrgBouncycastleJcajcePBKDF1Key *create_LibOrgBouncycastleJcajcePBKDF1Key_initWithCharArray_withLibOrgBouncycastleCryptoCharToByteConverter_(IOSCharArray *password, id<LibOrgBouncycastleCryptoCharToByteConverter> converter) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajcePBKDF1Key, initWithCharArray_withLibOrgBouncycastleCryptoCharToByteConverter_, password, converter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajcePBKDF1Key)
