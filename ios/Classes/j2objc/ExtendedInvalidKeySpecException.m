//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/util/ExtendedInvalidKeySpecException.java
//

#include "ExtendedInvalidKeySpecException.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/security/spec/InvalidKeySpecException.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException () {
 @public
  JavaLangThrowable *cause_ExtendedInvalidKeySpecException_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException, cause_ExtendedInvalidKeySpecException_, JavaLangThrowable *)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException

- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException_initWithNSString_withJavaLangThrowable_(self, msg, cause);
  return self;
}

- (JavaLangThrowable *)getCause {
  return cause_ExtendedInvalidKeySpecException_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaLangThrowable:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cause_ExtendedInvalidKeySpecException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaLangThrowable;", "cause" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException = { "ExtendedInvalidKeySpecException", "lib.org.bouncycastle.jcajce.provider.asymmetric.util", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException;
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException_initWithNSString_withJavaLangThrowable_(LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException *self, NSString *msg, JavaLangThrowable *cause) {
  JavaSecuritySpecInvalidKeySpecException_initWithNSString_(self, msg);
  self->cause_ExtendedInvalidKeySpecException_ = cause;
}

LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException *new_LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException, initWithNSString_withJavaLangThrowable_, msg, cause)
}

LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException *create_LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException, initWithNSString_withJavaLangThrowable_, msg, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricUtilExtendedInvalidKeySpecException)
