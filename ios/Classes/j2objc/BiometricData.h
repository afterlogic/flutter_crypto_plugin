//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/x509/qualified/BiometricData.java
//

#ifndef BiometricData_H
#define BiometricData_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1OctetString;
@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1DERIA5String;
@class LibOrgBouncycastleAsn1X509AlgorithmIdentifier;
@class LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData;

@interface LibOrgBouncycastleAsn1X509QualifiedBiometricData : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData:(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *)typeOfBiometricData
                                       withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)hashAlgorithm
                                               withLibOrgBouncycastleAsn1ASN1OctetString:(LibOrgBouncycastleAsn1ASN1OctetString *)biometricDataHash;

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData:(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *)typeOfBiometricData
                                       withLibOrgBouncycastleAsn1X509AlgorithmIdentifier:(LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)hashAlgorithm
                                               withLibOrgBouncycastleAsn1ASN1OctetString:(LibOrgBouncycastleAsn1ASN1OctetString *)biometricDataHash
                                                  withLibOrgBouncycastleAsn1DERIA5String:(LibOrgBouncycastleAsn1DERIA5String *)sourceDataUri;

- (LibOrgBouncycastleAsn1ASN1OctetString *)getBiometricDataHash;

- (LibOrgBouncycastleAsn1X509AlgorithmIdentifier *)getHashAlgorithm;

+ (LibOrgBouncycastleAsn1X509QualifiedBiometricData *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1DERIA5String *)getSourceDataUri;

- (LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *)getTypeOfBiometricData;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1X509QualifiedBiometricData)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509QualifiedBiometricData *LibOrgBouncycastleAsn1X509QualifiedBiometricData_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509QualifiedBiometricData_initWithLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_withLibOrgBouncycastleAsn1DERIA5String_(LibOrgBouncycastleAsn1X509QualifiedBiometricData *self, LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *typeOfBiometricData, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *biometricDataHash, LibOrgBouncycastleAsn1DERIA5String *sourceDataUri);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509QualifiedBiometricData *new_LibOrgBouncycastleAsn1X509QualifiedBiometricData_initWithLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_withLibOrgBouncycastleAsn1DERIA5String_(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *typeOfBiometricData, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *biometricDataHash, LibOrgBouncycastleAsn1DERIA5String *sourceDataUri) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509QualifiedBiometricData *create_LibOrgBouncycastleAsn1X509QualifiedBiometricData_initWithLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_withLibOrgBouncycastleAsn1DERIA5String_(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *typeOfBiometricData, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *biometricDataHash, LibOrgBouncycastleAsn1DERIA5String *sourceDataUri);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1X509QualifiedBiometricData_initWithLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1X509QualifiedBiometricData *self, LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *typeOfBiometricData, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *biometricDataHash);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509QualifiedBiometricData *new_LibOrgBouncycastleAsn1X509QualifiedBiometricData_initWithLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *typeOfBiometricData, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *biometricDataHash) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1X509QualifiedBiometricData *create_LibOrgBouncycastleAsn1X509QualifiedBiometricData_initWithLibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData_withLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1OctetString_(LibOrgBouncycastleAsn1X509QualifiedTypeOfBiometricData *typeOfBiometricData, LibOrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm, LibOrgBouncycastleAsn1ASN1OctetString *biometricDataHash);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1X509QualifiedBiometricData)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // BiometricData_H
