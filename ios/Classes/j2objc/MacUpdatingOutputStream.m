//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/io/MacUpdatingOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MacUpdatingOutputStream.h"
#include "java/io/OutputStream.h"
#include "javax/crypto/Mac.h"

@interface LibOrgBouncycastleJcajceIoMacUpdatingOutputStream () {
 @public
  JavaxCryptoMac *mac_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceIoMacUpdatingOutputStream, mac_, JavaxCryptoMac *)

@implementation LibOrgBouncycastleJcajceIoMacUpdatingOutputStream

- (instancetype)initWithJavaxCryptoMac:(JavaxCryptoMac *)mac {
  LibOrgBouncycastleJcajceIoMacUpdatingOutputStream_initWithJavaxCryptoMac_(self, mac);
  return self;
}

- (void)writeWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)off
                   withInt:(jint)len {
  [((JavaxCryptoMac *) nil_chk(mac_)) updateWithByteArray:bytes withInt:off withInt:len];
}

- (void)writeWithByteArray:(IOSByteArray *)bytes {
  [((JavaxCryptoMac *) nil_chk(mac_)) updateWithByteArray:bytes];
}

- (void)writeWithInt:(jint)b {
  [((JavaxCryptoMac *) nil_chk(mac_)) updateWithByte:(jbyte) b];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxCryptoMac:);
  methods[1].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(writeWithByteArray:);
  methods[3].selector = @selector(writeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mac_", "LJavaxCryptoMac;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxCryptoMac;", "write", "[BII", "LJavaIoIOException;", "[B", "I" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceIoMacUpdatingOutputStream = { "MacUpdatingOutputStream", "lib.org.bouncycastle.jcajce.io", ptrTable, methods, fields, 7, 0x0, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceIoMacUpdatingOutputStream;
}

@end

void LibOrgBouncycastleJcajceIoMacUpdatingOutputStream_initWithJavaxCryptoMac_(LibOrgBouncycastleJcajceIoMacUpdatingOutputStream *self, JavaxCryptoMac *mac) {
  JavaIoOutputStream_init(self);
  self->mac_ = mac;
}

LibOrgBouncycastleJcajceIoMacUpdatingOutputStream *new_LibOrgBouncycastleJcajceIoMacUpdatingOutputStream_initWithJavaxCryptoMac_(JavaxCryptoMac *mac) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceIoMacUpdatingOutputStream, initWithJavaxCryptoMac_, mac)
}

LibOrgBouncycastleJcajceIoMacUpdatingOutputStream *create_LibOrgBouncycastleJcajceIoMacUpdatingOutputStream_initWithJavaxCryptoMac_(JavaxCryptoMac *mac) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceIoMacUpdatingOutputStream, initWithJavaxCryptoMac_, mac)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceIoMacUpdatingOutputStream)
