//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/util/CollectionStore.java
//

#include "CollectionStore.h"
#include "J2ObjC_source.h"
#include "Selector.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@interface LibOrgBouncycastleUtilCollectionStore () {
 @public
  id<JavaUtilCollection> _local_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleUtilCollectionStore, _local_, id<JavaUtilCollection>)

@implementation LibOrgBouncycastleUtilCollectionStore

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  LibOrgBouncycastleUtilCollectionStore_initWithJavaUtilCollection_(self, collection);
  return self;
}

- (id<JavaUtilCollection>)getMatchesWithLibOrgBouncycastleUtilSelector:(id<LibOrgBouncycastleUtilSelector>)selector {
  if (selector == nil) {
    return new_JavaUtilArrayList_initWithJavaUtilCollection_(_local_);
  }
  else {
    id<JavaUtilList> col = new_JavaUtilArrayList_init();
    id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk(_local_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      id obj = [iter next];
      if ([selector matchWithId:obj]) {
        [col addWithId:obj];
      }
    }
    return col;
  }
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk([self getMatchesWithLibOrgBouncycastleUtilSelector:nil])) iterator];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCollection:);
  methods[1].selector = @selector(getMatchesWithLibOrgBouncycastleUtilSelector:);
  methods[2].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_local_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;", "(Ljava/util/Collection<TT;>;)V", "getMatches", "LLibOrgBouncycastleUtilSelector;", "(Llib/org/bouncycastle/util/Selector<TT;>;)Ljava/util/Collection<TT;>;", "()Ljava/util/Iterator<TT;>;", "Ljava/util/Collection<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Llib/org/bouncycastle/util/Store<TT;>;Llib/org/bouncycastle/util/Iterable<TT;>;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleUtilCollectionStore = { "CollectionStore", "lib.org.bouncycastle.util", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, 7, -1 };
  return &_LibOrgBouncycastleUtilCollectionStore;
}

@end

void LibOrgBouncycastleUtilCollectionStore_initWithJavaUtilCollection_(LibOrgBouncycastleUtilCollectionStore *self, id<JavaUtilCollection> collection) {
  NSObject_init(self);
  self->_local_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(collection);
}

LibOrgBouncycastleUtilCollectionStore *new_LibOrgBouncycastleUtilCollectionStore_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleUtilCollectionStore, initWithJavaUtilCollection_, collection)
}

LibOrgBouncycastleUtilCollectionStore *create_LibOrgBouncycastleUtilCollectionStore_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleUtilCollectionStore, initWithJavaUtilCollection_, collection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleUtilCollectionStore)
