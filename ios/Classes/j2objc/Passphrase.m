//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/util/Passphrase.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Passphrase.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@interface LibComAfterlogicPgpUtilPassphrase () {
 @public
  id lock_;
  IOSCharArray *chars_;
  jboolean valid_;
}

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpUtilPassphrase, lock_, id)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpUtilPassphrase, chars_, IOSCharArray *)

@implementation LibComAfterlogicPgpUtilPassphrase

- (instancetype)initWithCharArray:(IOSCharArray *)chars {
  LibComAfterlogicPgpUtilPassphrase_initWithCharArray_(self, chars);
  return self;
}

- (void)clear {
  @synchronized(lock_) {
    if (chars_ != nil) {
      JavaUtilArrays_fillWithCharArray_withChar_(chars_, ' ');
    }
    valid_ = false;
  }
}

- (void)java_finalize {
  [self clear];
  [super java_finalize];
}

- (IOSCharArray *)getChars {
  @synchronized(lock_) {
    if (!valid_) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Passphrase has been cleared.");
    }
    if (chars_ == nil) {
      return nil;
    }
    IOSCharArray *copy_ = [IOSCharArray newArrayWithLength:chars_->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(chars_, 0, copy_, 0, chars_->size_);
    return copy_;
  }
}

- (jboolean)isValid {
  @synchronized(lock_) {
    return valid_;
  }
}

+ (LibComAfterlogicPgpUtilPassphrase *)emptyPassphrase {
  return LibComAfterlogicPgpUtilPassphrase_emptyPassphrase();
}

- (void)dealloc {
  JreCheckFinalize(self, [LibComAfterlogicPgpUtilPassphrase class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, 2, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpUtilPassphrase;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(java_finalize);
  methods[3].selector = @selector(getChars);
  methods[4].selector = @selector(isValid);
  methods[5].selector = @selector(emptyPassphrase);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "chars_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "valid_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[C", "finalize", "LJavaLangThrowable;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpUtilPassphrase = { "Passphrase", "lib.com.afterlogic.pgp.util", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpUtilPassphrase;
}

@end

void LibComAfterlogicPgpUtilPassphrase_initWithCharArray_(LibComAfterlogicPgpUtilPassphrase *self, IOSCharArray *chars) {
  NSObject_init(self);
  self->lock_ = new_NSObject_init();
  self->valid_ = true;
  self->chars_ = chars;
}

LibComAfterlogicPgpUtilPassphrase *new_LibComAfterlogicPgpUtilPassphrase_initWithCharArray_(IOSCharArray *chars) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpUtilPassphrase, initWithCharArray_, chars)
}

LibComAfterlogicPgpUtilPassphrase *create_LibComAfterlogicPgpUtilPassphrase_initWithCharArray_(IOSCharArray *chars) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpUtilPassphrase, initWithCharArray_, chars)
}

LibComAfterlogicPgpUtilPassphrase *LibComAfterlogicPgpUtilPassphrase_emptyPassphrase() {
  LibComAfterlogicPgpUtilPassphrase_initialize();
  return new_LibComAfterlogicPgpUtilPassphrase_initWithCharArray_(nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpUtilPassphrase)
