//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/gpg/keybox/Blob.java
//

#ifndef Blob_H
#define Blob_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleGpgKeyboxBlobType;
@protocol LibOrgBouncycastleGpgKeyboxBlobVerifier;
@protocol LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;

@interface LibOrgBouncycastleGpgKeyboxBlob : NSObject {
 @public
  jint base_;
  jlong length_;
  LibOrgBouncycastleGpgKeyboxBlobType *type_;
  jint version__;
}
@property (readonly, class) IOSByteArray *magicBytes NS_SWIFT_NAME(magicBytes);

+ (IOSByteArray *)magicBytes;

#pragma mark Public

- (LibOrgBouncycastleGpgKeyboxBlobType *)getType;

- (jint)getVersion;

#pragma mark Protected

- (instancetype __nonnull)initWithInt:(jint)base
                             withLong:(jlong)length
withLibOrgBouncycastleGpgKeyboxBlobType:(LibOrgBouncycastleGpgKeyboxBlobType *)type
                              withInt:(jint)version_;

#pragma mark Package-Private

+ (LibOrgBouncycastleGpgKeyboxBlob *)getInstanceWithId:(id)source
withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator:(id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)keyFingerPrintCalculator
           withLibOrgBouncycastleGpgKeyboxBlobVerifier:(id<LibOrgBouncycastleGpgKeyboxBlobVerifier>)blobVerifier;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleGpgKeyboxBlob)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleGpgKeyboxBlob, type_, LibOrgBouncycastleGpgKeyboxBlobType *)

inline IOSByteArray *LibOrgBouncycastleGpgKeyboxBlob_get_magicBytes(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *LibOrgBouncycastleGpgKeyboxBlob_magicBytes;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleGpgKeyboxBlob, magicBytes, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleGpgKeyboxBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_(LibOrgBouncycastleGpgKeyboxBlob *self, jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_);

FOUNDATION_EXPORT LibOrgBouncycastleGpgKeyboxBlob *new_LibOrgBouncycastleGpgKeyboxBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleGpgKeyboxBlob *create_LibOrgBouncycastleGpgKeyboxBlob_initWithInt_withLong_withLibOrgBouncycastleGpgKeyboxBlobType_withInt_(jint base, jlong length, LibOrgBouncycastleGpgKeyboxBlobType *type, jint version_);

FOUNDATION_EXPORT LibOrgBouncycastleGpgKeyboxBlob *LibOrgBouncycastleGpgKeyboxBlob_getInstanceWithId_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_withLibOrgBouncycastleGpgKeyboxBlobVerifier_(id source, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> keyFingerPrintCalculator, id<LibOrgBouncycastleGpgKeyboxBlobVerifier> blobVerifier);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleGpgKeyboxBlob)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Blob_H
