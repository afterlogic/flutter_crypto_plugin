//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/Chacha20Poly1305.java
//

#ifndef Chacha20Poly1305_H
#define Chacha20Poly1305_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TlsCipher.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoEnginesChaCha7539Engine;
@class LibOrgBouncycastleCryptoParamsKeyParameter;
@protocol LibOrgBouncycastleCryptoMac;
@protocol LibOrgBouncycastleCryptoStreamCipher;
@protocol LibOrgBouncycastleCryptoTlsTlsContext;

@interface LibOrgBouncycastleCryptoTlsChacha20Poly1305 : NSObject < LibOrgBouncycastleCryptoTlsTlsCipher > {
 @public
  id<LibOrgBouncycastleCryptoTlsTlsContext> context_;
  LibOrgBouncycastleCryptoEnginesChaCha7539Engine *encryptCipher_;
  LibOrgBouncycastleCryptoEnginesChaCha7539Engine *decryptCipher_;
  IOSByteArray *encryptIV_;
  IOSByteArray *decryptIV_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoTlsTlsContext:(id<LibOrgBouncycastleCryptoTlsTlsContext>)context;

- (IOSByteArray *)decodeCiphertextWithLong:(jlong)seqNo
                                 withShort:(jshort)type
                             withByteArray:(IOSByteArray *)ciphertext
                                   withInt:(jint)offset
                                   withInt:(jint)len;

- (IOSByteArray *)encodePlaintextWithLong:(jlong)seqNo
                                withShort:(jshort)type
                            withByteArray:(IOSByteArray *)plaintext
                                  withInt:(jint)offset
                                  withInt:(jint)len;

- (jint)getPlaintextLimitWithInt:(jint)ciphertextLimit;

#pragma mark Protected

- (IOSByteArray *)calculateNonceWithLong:(jlong)seqNo
                           withByteArray:(IOSByteArray *)iv;

- (IOSByteArray *)calculateRecordMACWithLibOrgBouncycastleCryptoParamsKeyParameter:(LibOrgBouncycastleCryptoParamsKeyParameter *)macKey
                                                                     withByteArray:(IOSByteArray *)additionalData
                                                                     withByteArray:(IOSByteArray *)buf
                                                                           withInt:(jint)off
                                                                           withInt:(jint)len;

- (LibOrgBouncycastleCryptoParamsKeyParameter *)generateRecordMACKeyWithLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)cipher;

- (IOSByteArray *)getAdditionalDataWithLong:(jlong)seqNo
                                  withShort:(jshort)type
                                    withInt:(jint)len;

- (LibOrgBouncycastleCryptoParamsKeyParameter *)initRecordWithLibOrgBouncycastleCryptoStreamCipher:(id<LibOrgBouncycastleCryptoStreamCipher>)cipher
                                                                                       withBoolean:(jboolean)forEncryption
                                                                                          withLong:(jlong)seqNo
                                                                                     withByteArray:(IOSByteArray *)iv OBJC_METHOD_FAMILY_NONE;

- (void)updateRecordMACLengthWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                                                     withInt:(jint)len;

- (void)updateRecordMACTextWithLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac
                                             withByteArray:(IOSByteArray *)buf
                                                   withInt:(jint)off
                                                   withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(LibOrgBouncycastleCryptoTlsChacha20Poly1305)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsChacha20Poly1305, context_, id<LibOrgBouncycastleCryptoTlsTlsContext>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsChacha20Poly1305, encryptCipher_, LibOrgBouncycastleCryptoEnginesChaCha7539Engine *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsChacha20Poly1305, decryptCipher_, LibOrgBouncycastleCryptoEnginesChaCha7539Engine *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsChacha20Poly1305, encryptIV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoTlsChacha20Poly1305, decryptIV_, IOSByteArray *)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoTlsChacha20Poly1305_initWithLibOrgBouncycastleCryptoTlsTlsContext_(LibOrgBouncycastleCryptoTlsChacha20Poly1305 *self, id<LibOrgBouncycastleCryptoTlsTlsContext> context);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsChacha20Poly1305 *new_LibOrgBouncycastleCryptoTlsChacha20Poly1305_initWithLibOrgBouncycastleCryptoTlsTlsContext_(id<LibOrgBouncycastleCryptoTlsTlsContext> context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoTlsChacha20Poly1305 *create_LibOrgBouncycastleCryptoTlsChacha20Poly1305_initWithLibOrgBouncycastleCryptoTlsTlsContext_(id<LibOrgBouncycastleCryptoTlsTlsContext> context);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoTlsChacha20Poly1305)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Chacha20Poly1305_H
