//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/agreement/DHAgreement.java
//

#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "DHAgreement.h"
#include "DHKeyGenerationParameters.h"
#include "DHKeyPairGenerator.h"
#include "DHParameters.h"
#include "DHPrivateKeyParameters.h"
#include "DHPublicKeyParameters.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoAgreementDHAgreement () {
 @public
  LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *key_;
  LibOrgBouncycastleCryptoParamsDHParameters *dhParams_;
  JavaMathBigInteger *privateValue_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementDHAgreement, key_, LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementDHAgreement, dhParams_, LibOrgBouncycastleCryptoParamsDHParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementDHAgreement, privateValue_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoAgreementDHAgreement, random_, JavaSecuritySecureRandom *)

inline JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementDHAgreement_get_ONE(void);
static JavaMathBigInteger *LibOrgBouncycastleCryptoAgreementDHAgreement_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoAgreementDHAgreement, ONE, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoAgreementDHAgreement)

@implementation LibOrgBouncycastleCryptoAgreementDHAgreement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoAgreementDHAgreement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *kParam;
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
    self->random_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
    kParam = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk([rParam getParameters], [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  else {
    self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
    kParam = (LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk(param, [LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  if (!([kParam isKindOfClass:[LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"DHEngine expects DHPrivateKeyParameters");
  }
  self->key_ = (LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) cast_chk(kParam, [LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters class]);
  self->dhParams_ = [((LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) nil_chk(key_)) getParameters];
}

- (JavaMathBigInteger *)calculateMessage {
  LibOrgBouncycastleCryptoGeneratorsDHKeyPairGenerator *dhGen = new_LibOrgBouncycastleCryptoGeneratorsDHKeyPairGenerator_init();
  [dhGen init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoParamsDHKeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsDHParameters_(random_, dhParams_)];
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *dhPair = [dhGen generateKeyPair];
  self->privateValue_ = [((LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(dhPair)) getPrivate], [LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters class])))) getX];
  return [((LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *) cast_chk([dhPair getPublic], [LibOrgBouncycastleCryptoParamsDHPublicKeyParameters class])))) getY];
}

- (JavaMathBigInteger *)calculateAgreementWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters:(LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *)pub
                                                                           withJavaMathBigInteger:(JavaMathBigInteger *)message {
  if (![((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsDHPublicKeyParameters *) nil_chk(pub)) getParameters])) isEqual:dhParams_]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Diffie-Hellman public key has wrong parameters.");
  }
  JavaMathBigInteger *p = [((LibOrgBouncycastleCryptoParamsDHParameters *) nil_chk(dhParams_)) getP];
  JavaMathBigInteger *peerY = [pub getY];
  if (peerY == nil || [peerY compareToWithId:LibOrgBouncycastleCryptoAgreementDHAgreement_ONE] <= 0 || [peerY compareToWithId:[((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:LibOrgBouncycastleCryptoAgreementDHAgreement_ONE]] >= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Diffie-Hellman public key is weak");
  }
  JavaMathBigInteger *result = [peerY modPowWithJavaMathBigInteger:privateValue_ withJavaMathBigInteger:p];
  if ([((JavaMathBigInteger *) nil_chk(result)) isEqual:LibOrgBouncycastleCryptoAgreementDHAgreement_ONE]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Shared key can't be 1");
  }
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(message)) modPowWithJavaMathBigInteger:[((LibOrgBouncycastleCryptoParamsDHPrivateKeyParameters *) nil_chk(key_)) getX] withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:result])) modWithJavaMathBigInteger:p];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(calculateMessage);
  methods[3].selector = @selector(calculateAgreementWithLibOrgBouncycastleCryptoParamsDHPublicKeyParameters:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "key_", "LLibOrgBouncycastleCryptoParamsDHPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dhParams_", "LLibOrgBouncycastleCryptoParamsDHParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateValue_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoCipherParameters;", "calculateAgreement", "LLibOrgBouncycastleCryptoParamsDHPublicKeyParameters;LJavaMathBigInteger;", &LibOrgBouncycastleCryptoAgreementDHAgreement_ONE };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoAgreementDHAgreement = { "DHAgreement", "lib.org.bouncycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoAgreementDHAgreement;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoAgreementDHAgreement class]) {
    LibOrgBouncycastleCryptoAgreementDHAgreement_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoAgreementDHAgreement)
  }
}

@end

void LibOrgBouncycastleCryptoAgreementDHAgreement_init(LibOrgBouncycastleCryptoAgreementDHAgreement *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoAgreementDHAgreement *new_LibOrgBouncycastleCryptoAgreementDHAgreement_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoAgreementDHAgreement, init)
}

LibOrgBouncycastleCryptoAgreementDHAgreement *create_LibOrgBouncycastleCryptoAgreementDHAgreement_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoAgreementDHAgreement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoAgreementDHAgreement)
