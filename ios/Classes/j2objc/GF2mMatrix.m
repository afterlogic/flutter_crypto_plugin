//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/math/linearalgebra/GF2mMatrix.java
//

#include "GF2mField.h"
#include "GF2mMatrix.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntUtils.h"
#include "J2ObjC_source.h"
#include "Matrix.h"
#include "Permutation.h"
#include "Vector.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"

@interface LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix ()

+ (void)swapColumnsWithIntArray2:(IOSObjectArray *)matrix
                         withInt:(jint)first
                         withInt:(jint)second;

- (void)multRowWithElementThisWithIntArray:(IOSIntArray *)row
                                   withInt:(jint)element;

- (IOSIntArray *)multRowWithElementWithIntArray:(IOSIntArray *)row
                                        withInt:(jint)element;

- (void)addToRowWithIntArray:(IOSIntArray *)fromRow
                withIntArray:(IOSIntArray *)toRow;

@end

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(IOSObjectArray *matrix, jint first, jint second);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *row, jint element);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *row, jint element);

__attribute__((unused)) static void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *fromRow, IOSIntArray *toRow);

@implementation LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                          withByteArray:(IOSByteArray *)enc {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(self, field, enc);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix:(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *)other {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_(self, other);
  return self;
}

- (instancetype)initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                          withIntArray2:(IOSObjectArray *)matrix {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(self, field, matrix);
  return self;
}

- (IOSByteArray *)getEncoded {
  jint d = 8;
  jint count = 1;
  while ([((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) getDegree] > d) {
    count++;
    d += 8;
  }
  IOSByteArray *bf = [IOSByteArray newArrayWithLength:self->numRows_ * self->numColumns_ * count + 4];
  *IOSByteArray_GetRef(bf, 0) = (jbyte) (self->numRows_ & (jint) 0xff);
  *IOSByteArray_GetRef(bf, 1) = (jbyte) ((JreURShift32(self->numRows_, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(bf, 2) = (jbyte) ((JreURShift32(self->numRows_, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(bf, 3) = (jbyte) ((JreURShift32(self->numRows_, 24)) & (jint) 0xff);
  count = 4;
  for (jint i = 0; i < self->numRows_; i++) {
    for (jint j = 0; j < self->numColumns_; j++) {
      for (jint jj = 0; jj < d; jj += 8) {
        *IOSByteArray_GetRef(bf, count++) = (jbyte) (JreURShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j), jj));
      }
    }
  }
  return bf;
}

- (jboolean)isZero {
  for (jint i = 0; i < numRows_; i++) {
    for (jint j = 0; j < numColumns_; j++) {
      if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j) != 0) {
        return false;
      }
    }
  }
  return true;
}

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)computeInverse {
  if (numRows_ != numColumns_) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Matrix is not invertible.");
  }
  IOSObjectArray *tmpMatrix = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ numRows_, numRows_ }];
  for (jint i = numRows_ - 1; i >= 0; i--) {
    (void) IOSObjectArray_Set(tmpMatrix, i, LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(IOSObjectArray_Get(nil_chk(matrix_), i)));
  }
  IOSObjectArray *invMatrix = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ numRows_, numRows_ }];
  for (jint i = numRows_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(invMatrix, i)), i) = 1;
  }
  for (jint i = 0; i < numRows_; i++) {
    if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, i)), i) == 0) {
      jboolean foundNonZero = false;
      for (jint j = i + 1; j < numRows_; j++) {
        if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, j)), i) != 0) {
          foundNonZero = true;
          LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(tmpMatrix, i, j);
          LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(invMatrix, i, j);
          j = numRows_;
          continue;
        }
      }
      if (!foundNonZero) {
        @throw new_JavaLangArithmeticException_initWithNSString_(@"Matrix is not invertible.");
      }
    }
    jint coef = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, i)), i);
    jint invCoef = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) inverseWithInt:coef];
    LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(self, IOSObjectArray_Get(tmpMatrix, i), invCoef);
    LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(self, IOSObjectArray_Get(invMatrix, i), invCoef);
    for (jint j = 0; j < numRows_; j++) {
      if (j != i) {
        coef = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, j)), i);
        if (coef != 0) {
          IOSIntArray *tmpRow = LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(self, IOSObjectArray_Get(tmpMatrix, i), coef);
          IOSIntArray *tmpInvRow = LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(self, IOSObjectArray_Get(invMatrix, i), coef);
          LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(self, tmpRow, IOSObjectArray_Get(tmpMatrix, j));
          LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(self, tmpInvRow, IOSObjectArray_Get(invMatrix, j));
        }
      }
    }
  }
  return new_LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(field_, invMatrix);
}

+ (void)swapColumnsWithIntArray2:(IOSObjectArray *)matrix
                         withInt:(jint)first
                         withInt:(jint)second {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(matrix, first, second);
}

- (void)multRowWithElementThisWithIntArray:(IOSIntArray *)row
                                   withInt:(jint)element {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(self, row, element);
}

- (IOSIntArray *)multRowWithElementWithIntArray:(IOSIntArray *)row
                                        withInt:(jint)element {
  return LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(self, row, element);
}

- (void)addToRowWithIntArray:(IOSIntArray *)fromRow
                withIntArray:(IOSIntArray *)toRow {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(self, fromRow, toRow);
}

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:(LibOrgBouncycastlePqcMathLinearalgebraMatrix *)a {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented.");
}

- (LibOrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:(LibOrgBouncycastlePqcMathLinearalgebraPermutation *)perm {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented.");
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)vector {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented.");
}

- (LibOrgBouncycastlePqcMathLinearalgebraVector *)rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:(LibOrgBouncycastlePqcMathLinearalgebraVector *)vector {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented.");
}

- (jboolean)isEqual:(id)other {
  if (other == nil || !([other isKindOfClass:[LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix class]])) {
    return false;
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *otherMatrix = (LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *) cast_chk(other, [LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix class]);
  if ((![((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) isEqual:otherMatrix->field_]) || (otherMatrix->numRows_ != self->numColumns_) || (otherMatrix->numColumns_ != self->numColumns_)) {
    return false;
  }
  for (jint i = 0; i < self->numRows_; i++) {
    for (jint j = 0; j < self->numColumns_; j++) {
      if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j) != IOSIntArray_Get(nil_chk(IOSObjectArray_Get(otherMatrix->matrix_, i)), j)) {
        return false;
      }
    }
  }
  return true;
}

- (NSUInteger)hash {
  jint hash_ = (((jint) [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) hash]) * 31 + numRows_) * 31 + numColumns_;
  for (jint i = 0; i < self->numRows_; i++) {
    for (jint j = 0; j < self->numColumns_; j++) {
      hash_ = hash_ * 31 + IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j);
    }
  }
  return hash_;
}

- (NSString *)description {
  NSString *str = JreStrcat("I$I$$$", self->numRows_, @" x ", self->numColumns_, @" Matrix over ", [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) description], @": \n");
  for (jint i = 0; i < self->numRows_; i++) {
    for (jint j = 0; j < self->numColumns_; j++) {
      str = JreStrcat("$$$", str, [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) elementToStrWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j)], @" : ");
    }
    str = JreStrcat("$C", str, 0x000a);
  }
  return str;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 10, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:withByteArray:);
  methods[1].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix:);
  methods[2].selector = @selector(initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField:withIntArray2:);
  methods[3].selector = @selector(getEncoded);
  methods[4].selector = @selector(isZero);
  methods[5].selector = @selector(computeInverse);
  methods[6].selector = @selector(swapColumnsWithIntArray2:withInt:withInt:);
  methods[7].selector = @selector(multRowWithElementThisWithIntArray:withInt:);
  methods[8].selector = @selector(multRowWithElementWithIntArray:withInt:);
  methods[9].selector = @selector(addToRowWithIntArray:withIntArray:);
  methods[10].selector = @selector(rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraMatrix:);
  methods[11].selector = @selector(rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraPermutation:);
  methods[12].selector = @selector(leftMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[13].selector = @selector(rightMultiplyWithLibOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "matrix_", "[[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;[B", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix;", "LLibOrgBouncycastlePqcMathLinearalgebraGF2mField;[[I", "swapColumns", "[[III", "multRowWithElementThis", "[II", "multRowWithElement", "addToRow", "[I[I", "rightMultiply", "LLibOrgBouncycastlePqcMathLinearalgebraMatrix;", "LLibOrgBouncycastlePqcMathLinearalgebraPermutation;", "leftMultiply", "LLibOrgBouncycastlePqcMathLinearalgebraVector;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix = { "GF2mMatrix", "lib.org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 17, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix;
}

@end

void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  self->field_ = field;
  jint d = 8;
  jint count = 1;
  while ([((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field)) getDegree] > d) {
    count++;
    d += 8;
  }
  if (((IOSByteArray *) nil_chk(enc))->size_ < 5) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@" Error: given array is not encoded matrix over GF(2^m)");
  }
  self->numRows_ = (JreLShift32((IOSByteArray_Get(enc, 3) & (jint) 0xff), 24)) ^ (JreLShift32((IOSByteArray_Get(enc, 2) & (jint) 0xff), 16)) ^ (JreLShift32((IOSByteArray_Get(enc, 1) & (jint) 0xff), 8)) ^ (IOSByteArray_Get(enc, 0) & (jint) 0xff);
  jint n = count * self->numRows_;
  if ((self->numRows_ <= 0) || (((enc->size_ - 4) % n) != 0)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@" Error: given array is not encoded matrix over GF(2^m)");
  }
  self->numColumns_ = (enc->size_ - 4) / n;
  self->matrix_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->numRows_, self->numColumns_ }];
  count = 4;
  for (jint i = 0; i < self->numRows_; i++) {
    for (jint j = 0; j < self->numColumns_; j++) {
      for (jint jj = 0; jj < d; jj += 8) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j) ^= JreLShift32((IOSByteArray_Get(enc, count++) & (jint) 0x000000ff), jj);
      }
      if (![((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) isElementOfThisFieldWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j)]) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@" Error: given array is not encoded matrix over GF(2^m)");
      }
    }
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_, field, enc)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_, field, enc)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *other) {
  LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  self->numRows_ = ((LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *) nil_chk(other))->numRows_;
  self->numColumns_ = other->numColumns_;
  self->field_ = other->field_;
  self->matrix_ = [IOSObjectArray newArrayWithLength:self->numRows_ type:IOSClass_intArray(1)];
  for (jint i = 0; i < self->numRows_; i++) {
    (void) IOSObjectArray_Set(nil_chk(self->matrix_), i, LibOrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(IOSObjectArray_Get(other->matrix_, i)));
  }
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *other) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_, other)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *other) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_, other)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSObjectArray *matrix) {
  LibOrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  self->field_ = field;
  self->matrix_ = matrix;
  self->numRows_ = ((IOSObjectArray *) nil_chk(matrix))->size_;
  self->numColumns_ = ((IOSIntArray *) nil_chk(IOSObjectArray_Get(matrix, 0)))->size_;
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *new_LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSObjectArray *matrix) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_, field, matrix)
}

LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *create_LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSObjectArray *matrix) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_, field, matrix)
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(IOSObjectArray *matrix, jint first, jint second) {
  LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initialize();
  IOSIntArray *tmp = IOSObjectArray_Get(nil_chk(matrix), first);
  (void) IOSObjectArray_Set(matrix, first, IOSObjectArray_Get(matrix, second));
  (void) IOSObjectArray_Set(matrix, second, tmp);
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *row, jint element) {
  for (jint i = ((IOSIntArray *) nil_chk(row))->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(row, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) multWithInt:IOSIntArray_Get(row, i) withInt:element];
  }
}

IOSIntArray *LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *row, jint element) {
  IOSIntArray *result = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(row))->size_];
  for (jint i = row->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(result, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) multWithInt:IOSIntArray_Get(row, i) withInt:element];
  }
  return result;
}

void LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *fromRow, IOSIntArray *toRow) {
  for (jint i = ((IOSIntArray *) nil_chk(toRow))->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(toRow, i) = [((LibOrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) addWithInt:IOSIntArray_Get(nil_chk(fromRow), i) withInt:IOSIntArray_Get(toRow, i)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcMathLinearalgebraGF2mMatrix)
