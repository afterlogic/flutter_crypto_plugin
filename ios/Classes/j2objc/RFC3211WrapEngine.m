//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/RFC3211WrapEngine.java
//

#include "Arrays.h"
#include "BlockCipher.h"
#include "CBCBlockCipher.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "IOSPrimitiveArray.h"
#include "InvalidCipherTextException.h"
#include "J2ObjC_source.h"
#include "ParametersWithIV.h"
#include "ParametersWithRandom.h"
#include "RFC3211WrapEngine.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine () {
 @public
  LibOrgBouncycastleCryptoModesCBCBlockCipher *engine_;
  LibOrgBouncycastleCryptoParamsParametersWithIV *param_;
  jboolean forWrapping_;
  JavaSecuritySecureRandom *rand_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine, engine_, LibOrgBouncycastleCryptoModesCBCBlockCipher *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine, param_, LibOrgBouncycastleCryptoParamsParametersWithIV *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine, rand_, JavaSecuritySecureRandom *)

@implementation LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine

- (instancetype)initWithLibOrgBouncycastleCryptoBlockCipher:(id<LibOrgBouncycastleCryptoBlockCipher>)engine {
  LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine_initWithLibOrgBouncycastleCryptoBlockCipher_(self, engine);
  return self;
}

- (void)init__WithBoolean:(jboolean)forWrapping
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  self->forWrapping_ = forWrapping;
  if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithRandom *p = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
    rand_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getRandom];
    if (!([[p getParameters] isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"RFC3211Wrap requires an IV");
    }
    self->param_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk([p getParameters], [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
  }
  else {
    if (forWrapping) {
      rand_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
    }
    if (!([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithIV class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"RFC3211Wrap requires an IV");
    }
    self->param_ = (LibOrgBouncycastleCryptoParamsParametersWithIV *) cast_chk(param, [LibOrgBouncycastleCryptoParamsParametersWithIV class]);
  }
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<LibOrgBouncycastleCryptoBlockCipher>) nil_chk([((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) getUnderlyingCipher])) getAlgorithmName], @"/RFC3211Wrap");
}

- (IOSByteArray *)wrapWithByteArray:(IOSByteArray *)inArg
                            withInt:(jint)inOff
                            withInt:(jint)inLen {
  if (!forWrapping_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not set for wrapping");
  }
  if (inLen > 255 || inLen < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"input must be from 0 to 255 bytes");
  }
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) init__WithBoolean:true withLibOrgBouncycastleCryptoCipherParameters:param_];
  jint blockSize = [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) getBlockSize];
  IOSByteArray *cekBlock;
  if (inLen + 4 < blockSize * 2) {
    cekBlock = [IOSByteArray newArrayWithLength:blockSize * 2];
  }
  else {
    cekBlock = [IOSByteArray newArrayWithLength:(inLen + 4) % blockSize == 0 ? inLen + 4 : ((inLen + 4) / blockSize + 1) * blockSize];
  }
  *IOSByteArray_GetRef(cekBlock, 0) = (jbyte) inLen;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, cekBlock, 4, inLen);
  IOSByteArray *pad = [IOSByteArray newArrayWithLength:cekBlock->size_ - (inLen + 4)];
  [((JavaSecuritySecureRandom *) nil_chk(rand_)) nextBytesWithByteArray:pad];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pad, 0, cekBlock, inLen + 4, pad->size_);
  *IOSByteArray_GetRef(cekBlock, 1) = (jbyte) ~IOSByteArray_Get(cekBlock, 4);
  *IOSByteArray_GetRef(cekBlock, 2) = (jbyte) ~IOSByteArray_Get(cekBlock, 4 + 1);
  *IOSByteArray_GetRef(cekBlock, 3) = (jbyte) ~IOSByteArray_Get(cekBlock, 4 + 2);
  for (jint i = 0; i < cekBlock->size_; i += blockSize) {
    [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:cekBlock withInt:i withByteArray:cekBlock withInt:i];
  }
  for (jint i = 0; i < cekBlock->size_; i += blockSize) {
    [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:cekBlock withInt:i withByteArray:cekBlock withInt:i];
  }
  return cekBlock;
}

- (IOSByteArray *)unwrapWithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff
                              withInt:(jint)inLen {
  if (forWrapping_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not set for unwrapping");
  }
  jint blockSize = [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) getBlockSize];
  if (inLen < 2 * blockSize) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"input too short");
  }
  IOSByteArray *cekBlock = [IOSByteArray newArrayWithLength:inLen];
  IOSByteArray *iv = [IOSByteArray newArrayWithLength:blockSize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, cekBlock, 0, inLen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, iv, 0, iv->size_);
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_([((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(param_)) getParameters], iv)];
  for (jint i = blockSize; i < cekBlock->size_; i += blockSize) {
    [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:cekBlock withInt:i withByteArray:cekBlock withInt:i];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cekBlock, cekBlock->size_ - iv->size_, iv, 0, iv->size_);
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsParametersWithIV_initWithLibOrgBouncycastleCryptoCipherParameters_withByteArray_([((LibOrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(param_)) getParameters], iv)];
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:cekBlock withInt:0 withByteArray:cekBlock withInt:0];
  [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) init__WithBoolean:false withLibOrgBouncycastleCryptoCipherParameters:param_];
  for (jint i = 0; i < cekBlock->size_; i += blockSize) {
    [((LibOrgBouncycastleCryptoModesCBCBlockCipher *) nil_chk(engine_)) processBlockWithByteArray:cekBlock withInt:i withByteArray:cekBlock withInt:i];
  }
  jboolean invalidLength = ((IOSByteArray_Get(cekBlock, 0) & (jint) 0xff) > cekBlock->size_ - 4);
  IOSByteArray *key;
  if (invalidLength) {
    key = [IOSByteArray newArrayWithLength:cekBlock->size_ - 4];
  }
  else {
    key = [IOSByteArray newArrayWithLength:IOSByteArray_Get(cekBlock, 0) & (jint) 0xff];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cekBlock, 4, key, 0, key->size_);
  jint nonEqual = 0;
  for (jint i = 0; i != 3; i++) {
    jbyte check = (jbyte) ~IOSByteArray_Get(cekBlock, 1 + i);
    nonEqual |= (check ^ IOSByteArray_Get(cekBlock, 4 + i));
  }
  LibOrgBouncycastleUtilArrays_clearWithByteArray_(cekBlock);
  if ((nonEqual != 0) | invalidLength) {
    @throw new_LibOrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"wrapped key corrupted");
  }
  return key;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 4, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(wrapWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(unwrapWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "engine_", "LLibOrgBouncycastleCryptoModesCBCBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "param_", "LLibOrgBouncycastleCryptoParamsParametersWithIV;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forWrapping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rand_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoBlockCipher;", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "wrap", "[BII", "unwrap", "LLibOrgBouncycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine = { "RFC3211WrapEngine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine;
}

@end

void LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine_initWithLibOrgBouncycastleCryptoBlockCipher_(LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine *self, id<LibOrgBouncycastleCryptoBlockCipher> engine) {
  NSObject_init(self);
  self->engine_ = new_LibOrgBouncycastleCryptoModesCBCBlockCipher_initWithLibOrgBouncycastleCryptoBlockCipher_(engine);
}

LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine *new_LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> engine) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine, initWithLibOrgBouncycastleCryptoBlockCipher_, engine)
}

LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine *create_LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine_initWithLibOrgBouncycastleCryptoBlockCipher_(id<LibOrgBouncycastleCryptoBlockCipher> engine) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine, initWithLibOrgBouncycastleCryptoBlockCipher_, engine)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesRFC3211WrapEngine)
