//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSKeyParameters.java
//

#ifndef XMSSKeyParameters_H
#define XMSSKeyParameters_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "AsymmetricKeyParameter.h"
#include "J2ObjC_header.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters : LibOrgBouncycastleCryptoParamsAsymmetricKeyParameter
@property (readonly, copy, class) NSString *SHA_256 NS_SWIFT_NAME(SHA_256);
@property (readonly, copy, class) NSString *SHA_512 NS_SWIFT_NAME(SHA_512);
@property (readonly, copy, class) NSString *SHAKE128 NS_SWIFT_NAME(SHAKE128);
@property (readonly, copy, class) NSString *SHAKE256 NS_SWIFT_NAME(SHAKE256);

+ (NSString *)SHA_256;

+ (NSString *)SHA_512;

+ (NSString *)SHAKE128;

+ (NSString *)SHAKE256;

#pragma mark Public

- (instancetype __nonnull)initWithBoolean:(jboolean)isPrivateKey
                             withNSString:(NSString *)treeDigest;

- (NSString *)getTreeDigest;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters)

inline NSString *LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_get_SHA_256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_SHA_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters, SHA_256, NSString *)

inline NSString *LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_get_SHA_512(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_SHA_512;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters, SHA_512, NSString *)

inline NSString *LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_get_SHAKE128(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_SHAKE128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters, SHAKE128, NSString *)

inline NSString *LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_get_SHAKE256(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_SHAKE256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters, SHAKE256, NSString *)

FOUNDATION_EXPORT void LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_initWithBoolean_withNSString_(LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters *self, jboolean isPrivateKey, NSString *treeDigest);

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters *new_LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_initWithBoolean_withNSString_(jboolean isPrivateKey, NSString *treeDigest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters *create_LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters_initWithBoolean_withNSString_(jboolean isPrivateKey, NSString *treeDigest);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastlePqcCryptoXmssXMSSKeyParameters)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // XMSSKeyParameters_H
