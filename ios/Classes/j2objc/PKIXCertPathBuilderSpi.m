//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/provider/PKIXCertPathBuilderSpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AnnotatedException.h"
#include "CertificateFactory.h"
#include "ExtCertPathBuilderException.h"
#include "ExtendedPKIXBuilderParameters.h"
#include "ExtendedPKIXParameters.h"
#include "Extension.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JceProviderCertPathValidatorUtilities.h"
#include "PKIXCertPathBuilderSpi.h"
#include "PKIXCertPathValidatorSpi.h"
#include "PKIXCertStore.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathBuilderException.h"
#include "java/security/cert/CertPathBuilderResult.h"
#include "java/security/cert/CertPathBuilderSpi.h"
#include "java/security/cert/CertPathParameters.h"
#include "java/security/cert/CertPathValidatorResult.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/PKIXBuilderParameters.h"
#include "java/security/cert/PKIXCertPathBuilderResult.h"
#include "java/security/cert/PKIXCertPathValidatorResult.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi () {
 @public
  JavaLangException *certPathException_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi, certPathException_, JavaLangException *)

@implementation LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaSecurityCertCertPathBuilderResult>)engineBuildWithJavaSecurityCertCertPathParameters:(id<JavaSecurityCertCertPathParameters>)params {
  LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *paramsPKIX;
  if ([params isKindOfClass:[JavaSecurityCertPKIXBuilderParameters class]]) {
    LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder *paramsPKIXBldr = new_LibOrgBouncycastleJcajcePKIXExtendedParameters_Builder_initWithJavaSecurityCertPKIXParameters_((JavaSecurityCertPKIXBuilderParameters *) params);
    LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_Builder *paramsBldrPKIXBldr;
    if ([params isKindOfClass:[LibOrgBouncycastleX509ExtendedPKIXParameters class]]) {
      LibOrgBouncycastleX509ExtendedPKIXBuilderParameters *extPKIX = (LibOrgBouncycastleX509ExtendedPKIXBuilderParameters *) cast_chk(params, [LibOrgBouncycastleX509ExtendedPKIXBuilderParameters class]);
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk([((LibOrgBouncycastleX509ExtendedPKIXBuilderParameters *) nil_chk(extPKIX)) getAdditionalStores])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        (void) [paramsPKIXBldr addCertificateStoreWithLibOrgBouncycastleJcajcePKIXCertStore:(id<LibOrgBouncycastleJcajcePKIXCertStore>) cast_check([it next], LibOrgBouncycastleJcajcePKIXCertStore_class_())];
      }
      paramsBldrPKIXBldr = new_LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithLibOrgBouncycastleJcajcePKIXExtendedParameters_([paramsPKIXBldr build]);
      (void) [paramsBldrPKIXBldr addExcludedCertsWithJavaUtilSet:[extPKIX getExcludedCerts]];
      (void) [paramsBldrPKIXBldr setMaxPathLengthWithInt:[extPKIX getMaxPathLength]];
    }
    else {
      paramsBldrPKIXBldr = new_LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithJavaSecurityCertPKIXBuilderParameters_((JavaSecurityCertPKIXBuilderParameters *) cast_chk(params, [JavaSecurityCertPKIXBuilderParameters class]));
    }
    paramsPKIX = [paramsBldrPKIXBldr build];
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters class]]) {
    paramsPKIX = (LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *) params;
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$$C", @"Parameters must be an instance of ", [JavaSecurityCertPKIXBuilderParameters_class_() getName], @" or ", [LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters_class_() getName], '.'));
  }
  id<JavaUtilCollection> targets;
  id<JavaUtilIterator> targetIter;
  id<JavaUtilList> certPathList = new_JavaUtilArrayList_init();
  JavaSecurityCertX509Certificate *cert;
  LibOrgBouncycastleJcajcePKIXCertStoreSelector *certSelect = [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([((LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(paramsPKIX)) getBaseParameters])) getTargetConstraints];
  @try {
    targets = LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([paramsPKIX getBaseParameters])) getCertificateStores]);
    [((id<JavaUtilCollection>) nil_chk(targets)) addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findCertificatesWithLibOrgBouncycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([paramsPKIX getBaseParameters])) getCertStores])];
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    @throw new_LibOrgBouncycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(@"Error finding target certificate.", e);
  }
  if ([((id<JavaUtilCollection>) nil_chk(targets)) isEmpty]) {
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(@"No certificate found matching targetContraints.");
  }
  id<JavaSecurityCertCertPathBuilderResult> result = nil;
  targetIter = [targets iterator];
  while ([((id<JavaUtilIterator>) nil_chk(targetIter)) hasNext] && result == nil) {
    cert = (JavaSecurityCertX509Certificate *) cast_chk([targetIter next], [JavaSecurityCertX509Certificate class]);
    result = [self buildWithJavaSecurityCertX509Certificate:cert withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters:paramsPKIX withJavaUtilList:certPathList];
  }
  if (result == nil && certPathException_ != nil) {
    if ([certPathException_ isKindOfClass:[LibOrgBouncycastleJceProviderAnnotatedException class]]) {
      @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_withJavaLangThrowable_([certPathException_ getMessage], [((JavaLangException *) nil_chk(certPathException_)) getCause]);
    }
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_withJavaLangThrowable_(@"Possible certificate chain could not be validated.", certPathException_);
  }
  if (result == nil && certPathException_ == nil) {
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(@"Unable to find certificate chain.");
  }
  return result;
}

- (id<JavaSecurityCertCertPathBuilderResult>)buildWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)tbvCert
                            withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters:(LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *)pkixParams
                                                                     withJavaUtilList:(id<JavaUtilList>)tbvPath {
  if ([((id<JavaUtilList>) nil_chk(tbvPath)) containsWithId:tbvCert]) {
    return nil;
  }
  if ([((id<JavaUtilSet>) nil_chk([((LibOrgBouncycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(pkixParams)) getExcludedCerts])) containsWithId:tbvCert]) {
    return nil;
  }
  if ([pkixParams getMaxPathLength] != -1) {
    if ([tbvPath size] - 1 > [pkixParams getMaxPathLength]) {
      return nil;
    }
  }
  [tbvPath addWithId:tbvCert];
  LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *cFact;
  LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi *validator;
  id<JavaSecurityCertCertPathBuilderResult> builderResult = nil;
  @try {
    cFact = new_LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_init();
    validator = new_LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi_init();
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Exception creating support classes.");
  }
  @try {
    if (LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(tbvCert, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getTrustAnchors], [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getSigProvider])) {
      JavaSecurityCertCertPath *certPath = nil;
      JavaSecurityCertPKIXCertPathValidatorResult *result = nil;
      @try {
        certPath = [((LibOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *) nil_chk(cFact)) engineGenerateCertPathWithJavaUtilList:tbvPath];
      }
      @catch (JavaLangException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Certification path could not be constructed from certificate list.", e);
      }
      @try {
        result = (JavaSecurityCertPKIXCertPathValidatorResult *) cast_chk([((LibOrgBouncycastleJceProviderPKIXCertPathValidatorSpi *) nil_chk(validator)) engineValidateWithJavaSecurityCertCertPath:certPath withJavaSecurityCertCertPathParameters:pkixParams], [JavaSecurityCertPKIXCertPathValidatorResult class]);
      }
      @catch (JavaLangException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Certification path could not be validated.", e);
      }
      return new_JavaSecurityCertPKIXCertPathBuilderResult_initWithJavaSecurityCertCertPath_withJavaSecurityCertTrustAnchor_withJavaSecurityCertPolicyNode_withJavaSecurityPublicKey_(certPath, [((JavaSecurityCertPKIXCertPathValidatorResult *) nil_chk(result)) getTrustAnchor], [result getPolicyTree], [result getPublicKey]);
    }
    else {
      id<JavaUtilList> stores = new_JavaUtilArrayList_init();
      [stores addAllWithJavaUtilCollection:[((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getCertificateStores]];
      @try {
        [stores addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_([((JavaSecurityCertX509Certificate *) nil_chk(tbvCert)) getExtensionValueWithNSString:[((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1X509Extension, issuerAlternativeName))) getId]], [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getNamedCertificateStoreMap])];
      }
      @catch (JavaSecurityCertCertificateParsingException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No additional X.509 stores can be added from certificate locations.", e);
      }
      id<JavaUtilCollection> issuers = new_JavaUtilHashSet_init();
      @try {
        [issuers addAllWithJavaUtilCollection:LibOrgBouncycastleJceProviderJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(tbvCert, [((LibOrgBouncycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getCertStores], stores)];
      }
      @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot find issuer certificate for certificate in certification path.", e);
      }
      if ([issuers isEmpty]) {
        @throw new_LibOrgBouncycastleJceProviderAnnotatedException_initWithNSString_(@"No issuer certificate for certificate in certification path found.");
      }
      id<JavaUtilIterator> it = [issuers iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && builderResult == nil) {
        JavaSecurityCertX509Certificate *issuer = (JavaSecurityCertX509Certificate *) cast_chk([it next], [JavaSecurityCertX509Certificate class]);
        builderResult = [self buildWithJavaSecurityCertX509Certificate:issuer withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters:pkixParams withJavaUtilList:tbvPath];
      }
    }
  }
  @catch (LibOrgBouncycastleJceProviderAnnotatedException *e) {
    certPathException_ = e;
  }
  if (builderResult == nil) {
    [tbvPath removeWithId:tbvCert];
  }
  return builderResult;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilderResult;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilderResult;", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineBuildWithJavaSecurityCertCertPathParameters:);
  methods[2].selector = @selector(buildWithJavaSecurityCertX509Certificate:withLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certPathException_", "LJavaLangException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineBuild", "LJavaSecurityCertCertPathParameters;", "LJavaSecurityCertCertPathBuilderException;LJavaSecurityInvalidAlgorithmParameterException;", "build", "LJavaSecurityCertX509Certificate;LLibOrgBouncycastleJcajcePKIXExtendedBuilderParameters;LJavaUtilList;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi = { "PKIXCertPathBuilderSpi", "lib.org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi;
}

@end

void LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi_init(LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi *self) {
  JavaSecurityCertCertPathBuilderSpi_init(self);
}

LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi *new_LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi, init)
}

LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi *create_LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceProviderPKIXCertPathBuilderSpi)
