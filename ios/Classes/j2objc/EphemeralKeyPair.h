//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/EphemeralKeyPair.java
//

#ifndef EphemeralKeyPair_H
#define EphemeralKeyPair_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class LibOrgBouncycastleCryptoAsymmetricCipherKeyPair;
@protocol LibOrgBouncycastleCryptoKeyEncoder;

@interface LibOrgBouncycastleCryptoEphemeralKeyPair : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair:(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)keyPair
                                           withLibOrgBouncycastleCryptoKeyEncoder:(id<LibOrgBouncycastleCryptoKeyEncoder>)publicKeyEncoder;

- (IOSByteArray *)getEncodedPublicKey;

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)getKeyPair;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoEphemeralKeyPair)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoEphemeralKeyPair_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_(LibOrgBouncycastleCryptoEphemeralKeyPair *self, LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, id<LibOrgBouncycastleCryptoKeyEncoder> publicKeyEncoder);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEphemeralKeyPair *new_LibOrgBouncycastleCryptoEphemeralKeyPair_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, id<LibOrgBouncycastleCryptoKeyEncoder> publicKeyEncoder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoEphemeralKeyPair *create_LibOrgBouncycastleCryptoEphemeralKeyPair_initWithLibOrgBouncycastleCryptoAsymmetricCipherKeyPair_withLibOrgBouncycastleCryptoKeyEncoder_(LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *keyPair, id<LibOrgBouncycastleCryptoKeyEncoder> publicKeyEncoder);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoEphemeralKeyPair)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // EphemeralKeyPair_H
