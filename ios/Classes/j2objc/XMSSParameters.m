//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/xmss/XMSSParameters.java
//

#include "DefaultXMSSOid.h"
#include "Digest.h"
#include "J2ObjC_source.h"
#include "WOTSPlus.h"
#include "WOTSPlusParameters.h"
#include "XMSSOid.h"
#include "XMSSParameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"

@interface LibOrgBouncycastlePqcCryptoXmssXMSSParameters () {
 @public
  id<LibOrgBouncycastlePqcCryptoXmssXMSSOid> oid_;
  LibOrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  jint height_;
  jint k_;
}

- (jint)determineMinK;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSParameters, oid_, id<LibOrgBouncycastlePqcCryptoXmssXMSSOid>)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoXmssXMSSParameters, wotsPlus_, LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)

__attribute__((unused)) static jint LibOrgBouncycastlePqcCryptoXmssXMSSParameters_determineMinK(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *self);

@implementation LibOrgBouncycastlePqcCryptoXmssXMSSParameters

- (instancetype)initWithInt:(jint)height
withLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)digest {
  LibOrgBouncycastlePqcCryptoXmssXMSSParameters_initWithInt_withLibOrgBouncycastleCryptoDigest_(self, height, digest);
  return self;
}

- (jint)determineMinK {
  return LibOrgBouncycastlePqcCryptoXmssXMSSParameters_determineMinK(self);
}

- (id<LibOrgBouncycastleCryptoDigest>)getDigest {
  return [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getParams])) getDigest];
}

- (jint)getDigestSize {
  return [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getParams])) getDigestSize];
}

- (jint)getWinternitzParameter {
  return [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([((LibOrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getParams])) getWinternitzParameter];
}

- (jint)getHeight {
  return height_;
}

- (LibOrgBouncycastlePqcCryptoXmssWOTSPlus *)getWOTSPlus {
  return wotsPlus_;
}

- (jint)getK {
  return k_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoDigest;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(determineMinK);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(getDigestSize);
  methods[4].selector = @selector(getWinternitzParameter);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(getWOTSPlus);
  methods[7].selector = @selector(getK);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "oid_", "LLibOrgBouncycastlePqcCryptoXmssXMSSOid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wotsPlus_", "LLibOrgBouncycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILLibOrgBouncycastleCryptoDigest;" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoXmssXMSSParameters = { "XMSSParameters", "lib.org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 8, 4, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoXmssXMSSParameters;
}

@end

void LibOrgBouncycastlePqcCryptoXmssXMSSParameters_initWithInt_withLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *self, jint height, id<LibOrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  if (height < 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"height must be >= 2");
  }
  if (digest == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"digest == null");
  }
  self->wotsPlus_ = new_LibOrgBouncycastlePqcCryptoXmssWOTSPlus_initWithLibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(new_LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_initWithLibOrgBouncycastleCryptoDigest_(digest));
  self->height_ = height;
  self->k_ = LibOrgBouncycastlePqcCryptoXmssXMSSParameters_determineMinK(self);
  self->oid_ = LibOrgBouncycastlePqcCryptoXmssDefaultXMSSOid_lookupWithNSString_withInt_withInt_withInt_withInt_([((id<LibOrgBouncycastleCryptoDigest>) nil_chk([self getDigest])) getAlgorithmName], [self getDigestSize], [self getWinternitzParameter], [((LibOrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([self->wotsPlus_ getParams])) getLen], height);
}

LibOrgBouncycastlePqcCryptoXmssXMSSParameters *new_LibOrgBouncycastlePqcCryptoXmssXMSSParameters_initWithInt_withLibOrgBouncycastleCryptoDigest_(jint height, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSParameters, initWithInt_withLibOrgBouncycastleCryptoDigest_, height, digest)
}

LibOrgBouncycastlePqcCryptoXmssXMSSParameters *create_LibOrgBouncycastlePqcCryptoXmssXMSSParameters_initWithInt_withLibOrgBouncycastleCryptoDigest_(jint height, id<LibOrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoXmssXMSSParameters, initWithInt_withLibOrgBouncycastleCryptoDigest_, height, digest)
}

jint LibOrgBouncycastlePqcCryptoXmssXMSSParameters_determineMinK(LibOrgBouncycastlePqcCryptoXmssXMSSParameters *self) {
  for (jint k = 2; k <= self->height_; k++) {
    if ((self->height_ - k) % 2 == 0) {
      return k;
    }
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"should never happen...");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoXmssXMSSParameters)
