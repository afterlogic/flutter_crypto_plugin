//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/asymmetric/dsa/BCDSAPublicKey.java
//

#include "ASN1Encodable.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "BCDSAPublicKey.h"
#include "DERNull.h"
#include "DSAParameter.h"
#include "DSAParameters.h"
#include "DSAPublicKeyParameters.h"
#include "DSAUtil.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcajceUtilKeyUtil.h"
#include "Strings.h"
#include "SubjectPublicKeyInfo.h"
#include "X9ObjectIdentifiers.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigInteger.h"
#include "java/security/interfaces/DSAParams.h"
#include "java/security/interfaces/DSAPublicKey.h"
#include "java/security/spec/DSAParameterSpec.h"
#include "java/security/spec/DSAPublicKeySpec.h"

@interface LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey () {
 @public
  JavaMathBigInteger *y_;
  LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *lwKeyParams_;
  id<JavaSecurityInterfacesDSAParams> dsaSpec_;
}

- (jboolean)isNotNullWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)parameters;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, y_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, lwKeyParams_, LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, dsaSpec_, id<JavaSecurityInterfacesDSAParams>)

inline jlong LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_get_serialVersionUID(void);
#define LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_serialVersionUID 1752452449903495175LL
J2OBJC_STATIC_FIELD_CONSTANT(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, serialVersionUID, jlong)

inline JavaMathBigInteger *LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_get_ZERO(void);
inline JavaMathBigInteger *LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_set_ZERO(JavaMathBigInteger *value);
static JavaMathBigInteger *LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_ZERO;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, ZERO, JavaMathBigInteger *)

__attribute__((unused)) static jboolean LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_isNotNullWithLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, id<LibOrgBouncycastleAsn1ASN1Encodable> parameters);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, JavaIoObjectOutputStream *outArg);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey)

@implementation LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey

- (instancetype)initWithJavaSecuritySpecDSAPublicKeySpec:(JavaSecuritySpecDSAPublicKeySpec *)spec {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecuritySpecDSAPublicKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithJavaSecurityInterfacesDSAPublicKey:(id<JavaSecurityInterfacesDSAPublicKey>)key {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_(self, key);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters:(LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *)params {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_(self, params);
  return self;
}

- (instancetype)initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
  return self;
}

- (jboolean)isNotNullWithLibOrgBouncycastleAsn1ASN1Encodable:(id<LibOrgBouncycastleAsn1ASN1Encodable>)parameters {
  return LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_isNotNullWithLibOrgBouncycastleAsn1ASN1Encodable_(self, parameters);
}

- (NSString *)getAlgorithm {
  return @"DSA";
}

- (NSString *)getFormat {
  return @"X.509";
}

- (LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *)engineGetKeyParameters {
  return lwKeyParams_;
}

- (IOSByteArray *)getEncoded {
  if (dsaSpec_ == nil) {
    return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilKeyUtil_getEncodedSubjectPublicKeyInfoWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_dsa)), new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(y_));
  }
  return LibOrgBouncycastleJcajceProviderAsymmetricUtilJcajceUtilKeyUtil_getEncodedSubjectPublicKeyInfoWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(LibOrgBouncycastleAsn1X9X9ObjectIdentifiers, id_dsa), [new_LibOrgBouncycastleAsn1X509DSAParameter_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([dsaSpec_ getP], [((id<JavaSecurityInterfacesDSAParams>) nil_chk(dsaSpec_)) getQ], [((id<JavaSecurityInterfacesDSAParams>) nil_chk(dsaSpec_)) getG]) toASN1Primitive]), new_LibOrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(y_));
}

- (id<JavaSecurityInterfacesDSAParams>)getParams {
  return dsaSpec_;
}

- (JavaMathBigInteger *)getY {
  return y_;
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = LibOrgBouncycastleUtilStrings_lineSeparator();
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"DSA Public Key ["])) appendWithNSString:LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_generateKeyFingerprintWithJavaMathBigInteger_withJavaSecurityInterfacesDSAParams_(y_, [self getParams])])) appendWithNSString:@"]"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Y: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([self getY])) toStringWithInt:16]])) appendWithNSString:nl];
  return [buf description];
}

- (NSUInteger)hash {
  if (dsaSpec_ != nil) {
    return ((jint) [((JavaMathBigInteger *) nil_chk([self getY])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesDSAParams>) nil_chk([self getParams])) getG])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesDSAParams>) nil_chk([self getParams])) getP])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesDSAParams>) nil_chk([self getParams])) getQ])) hash]);
  }
  else {
    return ((jint) [((JavaMathBigInteger *) nil_chk([self getY])) hash]);
  }
}

- (jboolean)isEqual:(id)o {
  if (!([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:o])) {
    return false;
  }
  id<JavaSecurityInterfacesDSAPublicKey> other = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(o, JavaSecurityInterfacesDSAPublicKey_class_());
  if (self->dsaSpec_ != nil) {
    return [((JavaMathBigInteger *) nil_chk([self getY])) isEqual:[((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(other)) getY]] && [other getParams] != nil && [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesDSAParams>) nil_chk([self getParams])) getG])) isEqual:[((id<JavaSecurityInterfacesDSAParams>) nil_chk([other getParams])) getG]] && [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesDSAParams>) nil_chk([self getParams])) getP])) isEqual:[((id<JavaSecurityInterfacesDSAParams>) nil_chk([other getParams])) getP]] && [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesDSAParams>) nil_chk([self getParams])) getQ])) isEqual:[((id<JavaSecurityInterfacesDSAParams>) nil_chk([other getParams])) getQ]];
  }
  else {
    return [((JavaMathBigInteger *) nil_chk([self getY])) isEqual:[((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(other)) getY]] && [other getParams] == nil;
  }
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesDSAParams;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySpecDSAPublicKeySpec:);
  methods[1].selector = @selector(initWithJavaSecurityInterfacesDSAPublicKey:);
  methods[2].selector = @selector(initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters:);
  methods[3].selector = @selector(initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[4].selector = @selector(isNotNullWithLibOrgBouncycastleAsn1ASN1Encodable:);
  methods[5].selector = @selector(getAlgorithm);
  methods[6].selector = @selector(getFormat);
  methods[7].selector = @selector(engineGetKeyParameters);
  methods[8].selector = @selector(getEncoded);
  methods[9].selector = @selector(getParams);
  methods[10].selector = @selector(getY);
  methods[11].selector = @selector(description);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(isEqual:);
  methods[14].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[15].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "y_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lwKeyParams_", "LLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "dsaSpec_", "LJavaSecurityInterfacesDSAParams;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySpecDSAPublicKeySpec;", "LJavaSecurityInterfacesDSAPublicKey;", "LLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters;", "LLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "isNotNull", "LLibOrgBouncycastleAsn1ASN1Encodable;", "toString", "hashCode", "equals", "LNSObject;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", &LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_ZERO };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey = { "BCDSAPublicKey", "lib.org.bouncycastle.jcajce.provider.asymmetric.dsa", ptrTable, methods, fields, 7, 0x1, 16, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey class]) {
    LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey)
  }
}

@end

void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecuritySpecDSAPublicKeySpec_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, JavaSecuritySpecDSAPublicKeySpec *spec) {
  NSObject_init(self);
  self->y_ = [((JavaSecuritySpecDSAPublicKeySpec *) nil_chk(spec)) getY];
  self->dsaSpec_ = new_JavaSecuritySpecDSAParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([spec getP], [spec getQ], [spec getG]);
  self->lwKeyParams_ = new_LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_(self->y_, LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_toDSAParametersWithJavaSecurityInterfacesDSAParams_(self->dsaSpec_));
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecuritySpecDSAPublicKeySpec_(JavaSecuritySpecDSAPublicKeySpec *spec) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, initWithJavaSecuritySpecDSAPublicKeySpec_, spec)
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecuritySpecDSAPublicKeySpec_(JavaSecuritySpecDSAPublicKeySpec *spec) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, initWithJavaSecuritySpecDSAPublicKeySpec_, spec)
}

void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, id<JavaSecurityInterfacesDSAPublicKey> key) {
  NSObject_init(self);
  self->y_ = [((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(key)) getY];
  self->dsaSpec_ = [key getParams];
  self->lwKeyParams_ = new_LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_(self->y_, LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_toDSAParametersWithJavaSecurityInterfacesDSAParams_(self->dsaSpec_));
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_(id<JavaSecurityInterfacesDSAPublicKey> key) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, initWithJavaSecurityInterfacesDSAPublicKey_, key)
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithJavaSecurityInterfacesDSAPublicKey_(id<JavaSecurityInterfacesDSAPublicKey> key) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, initWithJavaSecurityInterfacesDSAPublicKey_, key)
}

void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *params) {
  NSObject_init(self);
  self->y_ = [((LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *) nil_chk(params)) getY];
  if (params != nil) {
    self->dsaSpec_ = new_JavaSecuritySpecDSAParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([params getParameters])) getP], [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([params getParameters])) getQ], [((LibOrgBouncycastleCryptoParamsDSAParameters *) nil_chk([params getParameters])) getG]);
  }
  else {
    self->dsaSpec_ = nil;
  }
  self->lwKeyParams_ = params;
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_(LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *params) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_, params)
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_(LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters *params) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, initWithLibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_, params)
}

void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  NSObject_init(self);
  LibOrgBouncycastleAsn1ASN1Integer *derY;
  @try {
    derY = (LibOrgBouncycastleAsn1ASN1Integer *) cast_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) parsePublicKey], [LibOrgBouncycastleAsn1ASN1Integer class]);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid info structure in DSA public key");
  }
  self->y_ = [((LibOrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue];
  if (LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_isNotNullWithLibOrgBouncycastleAsn1ASN1Encodable_(self, [((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getAlgorithm])) getParameters])) {
    LibOrgBouncycastleAsn1X509DSAParameter *params = LibOrgBouncycastleAsn1X509DSAParameter_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([info getAlgorithm])) getParameters]);
    self->dsaSpec_ = new_JavaSecuritySpecDSAParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleAsn1X509DSAParameter *) nil_chk(params)) getP], [params getQ], [params getG]);
  }
  else {
    self->dsaSpec_ = nil;
  }
  self->lwKeyParams_ = new_LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_(self->y_, LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_toDSAParametersWithJavaSecurityInterfacesDSAParams_(self->dsaSpec_));
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *new_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, info)
}

LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *create_LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey, initWithLibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, info)
}

jboolean LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_isNotNullWithLibOrgBouncycastleAsn1ASN1Encodable_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, id<LibOrgBouncycastleAsn1ASN1Encodable> parameters) {
  return parameters != nil && ![((LibOrgBouncycastleAsn1DERNull *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1DERNull, INSTANCE))) isEqual:[parameters toASN1Primitive]];
}

void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_readObjectWithJavaIoObjectInputStream_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  JavaMathBigInteger *p = (JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]);
  if ([((JavaMathBigInteger *) nil_chk(p)) isEqual:LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_ZERO]) {
    self->dsaSpec_ = nil;
  }
  else {
    self->dsaSpec_ = new_JavaSecuritySpecDSAParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, (JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]), (JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]));
  }
  self->lwKeyParams_ = new_LibOrgBouncycastleCryptoParamsDSAPublicKeyParameters_initWithJavaMathBigInteger_withLibOrgBouncycastleCryptoParamsDSAParameters_(self->y_, LibOrgBouncycastleJcajceProviderAsymmetricDsaDSAUtil_toDSAParametersWithJavaSecurityInterfacesDSAParams_(self->dsaSpec_));
}

void LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_writeObjectWithJavaIoObjectOutputStream_(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  if (self->dsaSpec_ == nil) {
    [outArg writeObjectWithId:LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey_ZERO];
  }
  else {
    [outArg writeObjectWithId:[self->dsaSpec_ getP]];
    [outArg writeObjectWithId:[((id<JavaSecurityInterfacesDSAParams>) nil_chk(self->dsaSpec_)) getQ]];
    [outArg writeObjectWithId:[((id<JavaSecurityInterfacesDSAParams>) nil_chk(self->dsaSpec_)) getG]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderAsymmetricDsaBCDSAPublicKey)
