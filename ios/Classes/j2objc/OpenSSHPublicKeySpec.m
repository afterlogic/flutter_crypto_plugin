//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jce/spec/OpenSSHPublicKeySpec.java
//

#include "Arrays.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OpenSSHPublicKeySpec.h"
#include "Strings.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/spec/EncodedKeySpec.h"

@interface LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec () {
 @public
  NSString *type_;
}

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec, type_, NSString *)

inline IOSObjectArray *LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_get_allowedTypes(void);
static IOSObjectArray *LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_allowedTypes;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec, allowedTypes, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec)

@implementation LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec

- (instancetype)initWithByteArray:(IOSByteArray *)encodedKey {
  LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_initWithByteArray_(self, encodedKey);
  return self;
}

- (NSString *)getFormat {
  return @"OpenSSH";
}

- (NSString *)getType {
  return type_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(getFormat);
  methods[2].selector = @selector(getType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "allowedTypes", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", &LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_allowedTypes };
  static const J2ObjcClassInfo _LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec = { "OpenSSHPublicKeySpec", "lib.org.bouncycastle.jce.spec", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec class]) {
    LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_allowedTypes = [IOSObjectArray newArrayWithObjects:(id[]){ @"ssh-rsa", @"ssh-ed25519", @"ssh-dss" } count:3 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec)
  }
}

@end

void LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_initWithByteArray_(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *self, IOSByteArray *encodedKey) {
  JavaSecuritySpecEncodedKeySpec_initWithByteArray_(self, encodedKey);
  jint pos = 0;
  jint i = JreLShift32((IOSByteArray_Get(nil_chk(encodedKey), pos++) & (jint) 0xFF), 24);
  i |= JreLShift32((IOSByteArray_Get(encodedKey, pos++) & (jint) 0xFF), 16);
  i |= JreLShift32((IOSByteArray_Get(encodedKey, pos++) & (jint) 0xFF), 8);
  i |= (IOSByteArray_Get(encodedKey, pos++) & (jint) 0xFF);
  if ((pos + i) >= encodedKey->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid public key blob: type field longer than blob");
  }
  self->type_ = LibOrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(LibOrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(encodedKey, pos, pos + i));
  if ([((NSString *) nil_chk(self->type_)) java_hasPrefix:@"ecdsa"]) {
    return;
  }
  for (jint t = 0; t < ((IOSObjectArray *) nil_chk(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_allowedTypes))->size_; t++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_allowedTypes, t))) isEqual:self->type_]) {
      return;
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unrecognised public key type ", self->type_));
}

LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *new_LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_initWithByteArray_(IOSByteArray *encodedKey) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec, initWithByteArray_, encodedKey)
}

LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec *create_LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec_initWithByteArray_(IOSByteArray *encodedKey) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec, initWithByteArray_, encodedKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJceSpecOpenSSHPublicKeySpec)
