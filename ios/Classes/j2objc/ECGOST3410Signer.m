//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/signers/ECGOST3410Signer.java
//

#include "BigIntegers.h"
#include "CipherParameters.h"
#include "CryptoServicesRegistrar.h"
#include "ECAlgorithms.h"
#include "ECConstants.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECGOST3410Signer.h"
#include "ECKeyParameters.h"
#include "ECMultiplier.h"
#include "ECPoint.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "FixedPointCombMultiplier.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParametersWithRandom.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"

@implementation LibOrgBouncycastleCryptoSignersECGOST3410Signer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoSignersECGOST3410Signer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)param {
  if (forSigning) {
    if ([param isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      LibOrgBouncycastleCryptoParamsParametersWithRandom *rParam = (LibOrgBouncycastleCryptoParamsParametersWithRandom *) param;
      self->random_ = [((LibOrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([rParam getParameters], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    }
    else {
      self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  }
}

- (JavaMathBigInteger *)getOrder {
  return [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters])) getN];
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  IOSByteArray *mRev = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(message))->size_];
  for (jint i = 0; i != mRev->size_; i++) {
    *IOSByteArray_GetRef(mRev, i) = IOSByteArray_Get(message, mRev->size_ - 1 - i);
  }
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, mRev);
  LibOrgBouncycastleCryptoParamsECDomainParameters *ec = [((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  JavaMathBigInteger *d = [((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class])))) getD];
  JavaMathBigInteger *r;
  JavaMathBigInteger *s;
  id<LibOrgBouncycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  do {
    JavaMathBigInteger *k;
    do {
      do {
        k = LibOrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_([((JavaMathBigInteger *) nil_chk(n)) bitLength], random_);
      }
      while ([((JavaMathBigInteger *) nil_chk(k)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]);
      LibOrgBouncycastleMathEcECPoint *p = [((LibOrgBouncycastleMathEcECPoint *) nil_chk([((id<LibOrgBouncycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithLibOrgBouncycastleMathEcECPoint:[ec getG] withJavaMathBigInteger:k])) normalize];
      r = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(p)) getAffineXCoord])) toBigInteger])) modWithJavaMathBigInteger:n];
    }
    while ([((JavaMathBigInteger *) nil_chk(r)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]);
    s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(([k multiplyWithJavaMathBigInteger:e]))) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(d)) multiplyWithJavaMathBigInteger:r]])) modWithJavaMathBigInteger:n];
  }
  while ([((JavaMathBigInteger *) nil_chk(s)) isEqual:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ZERO)]);
  return [IOSObjectArray newArrayWithObjects:(id[]){ r, s } count:2 type:JavaMathBigInteger_class_()];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  IOSByteArray *mRev = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(message))->size_];
  for (jint i = 0; i != mRev->size_; i++) {
    *IOSByteArray_GetRef(mRev, i) = IOSByteArray_Get(message, mRev->size_ - 1 - i);
  }
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, mRev);
  JavaMathBigInteger *n = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters])) getN];
  if ([((JavaMathBigInteger *) nil_chk(r)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] < 0 || [r compareToWithId:n] >= 0) {
    return false;
  }
  if ([((JavaMathBigInteger *) nil_chk(s)) compareToWithId:JreLoadStatic(LibOrgBouncycastleMathEcECConstants, ONE)] < 0 || [s compareToWithId:n] >= 0) {
    return false;
  }
  JavaMathBigInteger *v = [e modInverseWithJavaMathBigInteger:n];
  JavaMathBigInteger *z1 = [((JavaMathBigInteger *) nil_chk([s multiplyWithJavaMathBigInteger:v])) modWithJavaMathBigInteger:n];
  JavaMathBigInteger *z2 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:r]))) multiplyWithJavaMathBigInteger:v])) modWithJavaMathBigInteger:n];
  LibOrgBouncycastleMathEcECPoint *G = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk([((LibOrgBouncycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters])) getG];
  LibOrgBouncycastleMathEcECPoint *Q = [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk(key_, [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class])))) getQ];
  LibOrgBouncycastleMathEcECPoint *point = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(LibOrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(G, z1, Q, z2))) normalize];
  if ([((LibOrgBouncycastleMathEcECPoint *) nil_chk(point)) isInfinity]) {
    return false;
  }
  JavaMathBigInteger *R = [((JavaMathBigInteger *) nil_chk([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([point getAffineXCoord])) toBigInteger])) modWithJavaMathBigInteger:n];
  return [((JavaMathBigInteger *) nil_chk(R)) isEqual:r];
}

- (id<LibOrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_LibOrgBouncycastleMathEcFixedPointCombMultiplier_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getOrder);
  methods[3].selector = @selector(generateSignatureWithByteArray:);
  methods[4].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(createBasePointMultiplier);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LLibOrgBouncycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoSignersECGOST3410Signer = { "ECGOST3410Signer", "lib.org.bouncycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoSignersECGOST3410Signer;
}

@end

void LibOrgBouncycastleCryptoSignersECGOST3410Signer_init(LibOrgBouncycastleCryptoSignersECGOST3410Signer *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoSignersECGOST3410Signer *new_LibOrgBouncycastleCryptoSignersECGOST3410Signer_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoSignersECGOST3410Signer, init)
}

LibOrgBouncycastleCryptoSignersECGOST3410Signer *create_LibOrgBouncycastleCryptoSignersECGOST3410Signer_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoSignersECGOST3410Signer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoSignersECGOST3410Signer)
