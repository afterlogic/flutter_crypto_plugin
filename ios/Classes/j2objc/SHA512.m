//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/jcajce/provider/digest/SHA512.java
//

#include "ASN1ObjectIdentifier.h"
#include "BCMessageDigest.h"
#include "BaseKeyGenerator.h"
#include "BaseMac.h"
#include "CipherKeyGenerator.h"
#include "ConfigurableProvider.h"
#include "Digest.h"
#include "DigestAlgorithmProvider.h"
#include "HMac.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NISTObjectIdentifiers.h"
#include "OldHMac.h"
#include "PKCSObjectIdentifiers.h"
#include "SHA512.h"
#include "SHA512Digest.h"
#include "SHA512tDigest.h"

@interface LibOrgBouncycastleJcajceProviderDigestSHA512 ()

- (instancetype)init;

@end

__attribute__((unused)) static void LibOrgBouncycastleJcajceProviderDigestSHA512_init(LibOrgBouncycastleJcajceProviderDigestSHA512 *self);

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSHA512 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static LibOrgBouncycastleJcajceProviderDigestSHA512 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_init(void);

inline NSString *LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_get_PREFIX(void);
static NSString *LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings, PREFIX, NSString *)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512_Digest;LLibOrgBouncycastleJcajceProviderDigestSHA512_DigestT;LLibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224;LLibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256;LLibOrgBouncycastleJcajceProviderDigestSHA512_HashMac;LLibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224;LLibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256;LLibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512;LLibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator;LLibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224;LLibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256;LLibOrgBouncycastleJcajceProviderDigestSHA512_Mappings;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512 = { "SHA512", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_init(LibOrgBouncycastleJcajceProviderDigestSHA512 *self) {
  NSObject_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSHA512 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestSHA512_Digest *d = (LibOrgBouncycastleJcajceProviderDigestSHA512_Digest *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestSHA512_Digest class]);
  ((LibOrgBouncycastleJcajceProviderDigestSHA512_Digest *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsSHA512Digest_initWithLibOrgBouncycastleCryptoDigestsSHA512Digest_((LibOrgBouncycastleCryptoDigestsSHA512Digest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsSHA512Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_Digest = { "Digest", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_Digest_init(LibOrgBouncycastleJcajceProviderDigestSHA512_Digest *self) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA512_Digest *new_LibOrgBouncycastleJcajceProviderDigestSHA512_Digest_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_Digest, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_Digest *create_LibOrgBouncycastleJcajceProviderDigestSHA512_Digest_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_Digest)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT

- (instancetype)initWithInt:(jint)bitLength {
  LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT_initWithInt_(self, bitLength);
  return self;
}

- (id)java_clone {
  LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT *d = (LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT *) cast_chk([super java_clone], [LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT class]);
  ((LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT *) nil_chk(d))->digest_ = new_LibOrgBouncycastleCryptoDigestsSHA512tDigest_initWithLibOrgBouncycastleCryptoDigestsSHA512tDigest_((LibOrgBouncycastleCryptoDigestsSHA512tDigest *) cast_chk(digest_, [LibOrgBouncycastleCryptoDigestsSHA512tDigest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "clone", "LJavaLangCloneNotSupportedException;", "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT = { "DigestT", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT_initWithInt_(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT *self, jint bitLength) {
  LibOrgBouncycastleJcajceProviderDigestBCMessageDigest_initWithLibOrgBouncycastleCryptoDigest_(self, new_LibOrgBouncycastleCryptoDigestsSHA512tDigest_initWithInt_(bitLength));
}

LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT *new_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT_initWithInt_(jint bitLength) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT, initWithInt_, bitLength)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT *create_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT_initWithInt_(jint bitLength) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT, initWithInt_, bitLength)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224 = { "DigestT224", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224_init(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224 *self) {
  LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT_initWithInt_(self, 224);
}

LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT224)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256 = { "DigestT256", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256_init(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256 *self) {
  LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT_initWithInt_(self, 256);
}

LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_DigestT256)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac = { "HashMac", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac_init(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init()));
}

LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac *new_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac *create_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMac)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224 = { "HashMacT224", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224_init(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA512tDigest_initWithInt_(224)));
}

LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT224)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256 = { "HashMacT256", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256_init(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA512tDigest_initWithInt_(256)));
}

LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_HashMacT256)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512 = { "OldSHA512", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512_init(LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseMac_initWithLibOrgBouncycastleCryptoMac_(self, new_LibOrgBouncycastleCryptoMacsOldHMac_initWithLibOrgBouncycastleCryptoDigest_(new_LibOrgBouncycastleCryptoDigestsSHA512Digest_init()));
}

LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_OldSHA512)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator = { "KeyGenerator", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator_init(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACSHA512", 512, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator *new_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator *create_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGenerator)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224 = { "KeyGeneratorT224", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224_init(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACSHA512/224", 224, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT224)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256 = { "KeyGeneratorT256", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256;
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256_init(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256 *self) {
  LibOrgBouncycastleJcajceProviderSymmetricUtilBaseKeyGenerator_initWithNSString_withInt_withLibOrgBouncycastleCryptoCipherKeyGenerator_(self, @"HMACSHA512/256", 256, new_LibOrgBouncycastleCryptoCipherKeyGenerator_init());
}

LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256 *new_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256 *create_LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_KeyGeneratorT256)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings)

@implementation LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:(id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>)provider {
  [((id<LibOrgBouncycastleJcajceProviderConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.SHA-512" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SHA512" withNSString:@"SHA-512"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512)) withNSString:@"SHA-512"];
  [provider addAlgorithmWithNSString:@"MessageDigest.SHA-512/224" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$DigestT224")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SHA512/224" withNSString:@"SHA-512/224"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512_224)) withNSString:@"SHA-512/224"];
  [provider addAlgorithmWithNSString:@"MessageDigest.SHA-512/256" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$DigestT256")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SHA512256" withNSString:@"SHA-512/256"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(LibOrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512_256)) withNSString:@"SHA-512/256"];
  [provider addAlgorithmWithNSString:@"Mac.OLDHMACSHA512" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$OldSHA512")];
  [provider addAlgorithmWithNSString:@"Mac.PBEWITHHMACSHA512" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$HashMac")];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA512" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$HashMac") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$KeyGenerator")];
  [self addHMACAliasWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA512" withLibOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(LibOrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA512)];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA512/224" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$HashMacT224") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$KeyGeneratorT224")];
  [self addHMACAlgorithmWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:provider withNSString:@"SHA512/256" withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$HashMacT256") withNSString:JreStrcat("$$", LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, @"$KeyGeneratorT256")];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithLibOrgBouncycastleJcajceProviderConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LLibOrgBouncycastleJcajceProviderConfigConfigurableProvider;", &LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX, "LLibOrgBouncycastleJcajceProviderDigestSHA512;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings = { "Mappings", "lib.org.bouncycastle.jcajce.provider.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings class]) {
    LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_PREFIX = [LibOrgBouncycastleJcajceProviderDigestSHA512_class_() getName];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings)
  }
}

@end

void LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_init(LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings *self) {
  LibOrgBouncycastleJcajceProviderDigestDigestAlgorithmProvider_init(self);
}

LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings *new_LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings, init)
}

LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings *create_LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleJcajceProviderDigestSHA512_Mappings)
