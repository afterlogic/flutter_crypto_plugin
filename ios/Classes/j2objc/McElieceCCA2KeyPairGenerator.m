//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyPairGenerator.java
//

#include "AsymmetricCipherKeyPair.h"
#include "CryptoServicesRegistrar.h"
#include "GF2Matrix.h"
#include "GF2mField.h"
#include "GoppaCode.h"
#include "J2ObjC_source.h"
#include "KeyGenerationParameters.h"
#include "Matrix.h"
#include "McElieceCCA2KeyGenerationParameters.h"
#include "McElieceCCA2KeyPairGenerator.h"
#include "McElieceCCA2Parameters.h"
#include "McElieceCCA2PrivateKeyParameters.h"
#include "McElieceCCA2PublicKeyParameters.h"
#include "Permutation.h"
#include "PolynomialGF2mSmallM.h"
#include "java/security/SecureRandom.h"

@interface LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator () {
 @public
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *mcElieceCCA2Params_;
  jint m_;
  jint n_;
  jint t_;
  jint fieldPoly_;
  JavaSecuritySecureRandom *random_;
  jboolean initialized_;
}

- (void)initializeDefault OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator, mcElieceCCA2Params_, LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator, random_, JavaSecuritySecureRandom *)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_initializeDefault(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *self);

NSString *LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2";

@implementation LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator

+ (NSString *)OID {
  return LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_OID;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initializeDefault {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_initializeDefault(self);
}

- (void)init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:(LibOrgBouncycastleCryptoKeyGenerationParameters *)param {
  self->mcElieceCCA2Params_ = (LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) cast_chk(param, [LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters class]);
  self->random_ = LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->m_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(self->mcElieceCCA2Params_)) getParameters])) getM];
  self->n_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(self->mcElieceCCA2Params_)) getParameters])) getN];
  self->t_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(self->mcElieceCCA2Params_)) getParameters])) getT];
  self->fieldPoly_ = [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(self->mcElieceCCA2Params_)) getParameters])) getFieldPoly];
  self->initialized_ = true;
}

- (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  if (!initialized_) {
    LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_initializeDefault(self);
  }
  LibOrgBouncycastlePqcMathLinearalgebraGF2mField *field = new_LibOrgBouncycastlePqcMathLinearalgebraGF2mField_initWithInt_withInt_(m_, fieldPoly_);
  LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *gp = new_LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_(field, t_, LibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_RANDOM_IRREDUCIBLE_POLYNOMIAL, random_);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *h = LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_createCanonicalCheckMatrixWithLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(field, gp);
  LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_MaMaPe *mmp = LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_computeSystematicFormWithLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_withJavaSecuritySecureRandom_(h, random_);
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *shortH = [((LibOrgBouncycastlePqcMathLinearalgebraGoppaCode_MaMaPe *) nil_chk(mmp)) getSecondMatrix];
  LibOrgBouncycastlePqcMathLinearalgebraPermutation *p = [mmp getPermutation];
  LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *shortG = (LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(shortH)) computeTranspose], [LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  jint k = [((LibOrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(shortG)) getNumRows];
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey = new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_initWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2Matrix_withNSString_(n_, t_, shortG, [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(mcElieceCCA2Params_)) getParameters])) getDigest]);
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey = new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_initWithInt_withInt_withLibOrgBouncycastlePqcMathLinearalgebraGF2mField_withLibOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withLibOrgBouncycastlePqcMathLinearalgebraPermutation_withNSString_(n_, k, field, gp, p, [((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(mcElieceCCA2Params_)) getParameters])) getDigest]);
  return new_LibOrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withLibOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pubKey, privKey);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initializeDefault);
  methods[2].selector = @selector(init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "mcElieceCCA2Params_", "LLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldPoly_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LLibOrgBouncycastleCryptoKeyGenerationParameters;", &LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_OID };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator = { "McElieceCCA2KeyPairGenerator", "lib.org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 4, 8, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator;
}

@end

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_init(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *self) {
  NSObject_init(self);
  self->initialized_ = false;
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator, init)
}

LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *create_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator, init)
}

void LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_initializeDefault(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *self) {
  LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *mcCCA2Params = new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters_initWithJavaSecuritySecureRandom_withLibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters_(LibOrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom(), new_LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters_init());
  [self init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:mcCCA2Params];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator)
