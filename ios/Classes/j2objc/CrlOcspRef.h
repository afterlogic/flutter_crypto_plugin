//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/asn1/esf/CrlOcspRef.java
//

#ifndef CrlOcspRef_H
#define CrlOcspRef_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "ASN1Object.h"
#include "J2ObjC_header.h"

@class LibOrgBouncycastleAsn1ASN1Primitive;
@class LibOrgBouncycastleAsn1EsfCrlListID;
@class LibOrgBouncycastleAsn1EsfOcspListID;
@class LibOrgBouncycastleAsn1EsfOtherRevRefs;

@interface LibOrgBouncycastleAsn1EsfCrlOcspRef : LibOrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleAsn1EsfCrlListID:(LibOrgBouncycastleAsn1EsfCrlListID *)crlids
                             withLibOrgBouncycastleAsn1EsfOcspListID:(LibOrgBouncycastleAsn1EsfOcspListID *)ocspids
                           withLibOrgBouncycastleAsn1EsfOtherRevRefs:(LibOrgBouncycastleAsn1EsfOtherRevRefs *)otherRev;

- (LibOrgBouncycastleAsn1EsfCrlListID *)getCrlids;

+ (LibOrgBouncycastleAsn1EsfCrlOcspRef *)getInstanceWithId:(id)obj;

- (LibOrgBouncycastleAsn1EsfOcspListID *)getOcspids;

- (LibOrgBouncycastleAsn1EsfOtherRevRefs *)getOtherRev;

- (LibOrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleAsn1EsfCrlOcspRef)

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EsfCrlOcspRef *LibOrgBouncycastleAsn1EsfCrlOcspRef_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void LibOrgBouncycastleAsn1EsfCrlOcspRef_initWithLibOrgBouncycastleAsn1EsfCrlListID_withLibOrgBouncycastleAsn1EsfOcspListID_withLibOrgBouncycastleAsn1EsfOtherRevRefs_(LibOrgBouncycastleAsn1EsfCrlOcspRef *self, LibOrgBouncycastleAsn1EsfCrlListID *crlids, LibOrgBouncycastleAsn1EsfOcspListID *ocspids, LibOrgBouncycastleAsn1EsfOtherRevRefs *otherRev);

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EsfCrlOcspRef *new_LibOrgBouncycastleAsn1EsfCrlOcspRef_initWithLibOrgBouncycastleAsn1EsfCrlListID_withLibOrgBouncycastleAsn1EsfOcspListID_withLibOrgBouncycastleAsn1EsfOtherRevRefs_(LibOrgBouncycastleAsn1EsfCrlListID *crlids, LibOrgBouncycastleAsn1EsfOcspListID *ocspids, LibOrgBouncycastleAsn1EsfOtherRevRefs *otherRev) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleAsn1EsfCrlOcspRef *create_LibOrgBouncycastleAsn1EsfCrlOcspRef_initWithLibOrgBouncycastleAsn1EsfCrlListID_withLibOrgBouncycastleAsn1EsfOcspListID_withLibOrgBouncycastleAsn1EsfOtherRevRefs_(LibOrgBouncycastleAsn1EsfCrlListID *crlids, LibOrgBouncycastleAsn1EsfOcspListID *ocspids, LibOrgBouncycastleAsn1EsfOtherRevRefs *otherRev);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleAsn1EsfCrlOcspRef)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CrlOcspRef_H
