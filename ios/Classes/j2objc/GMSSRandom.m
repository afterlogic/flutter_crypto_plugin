//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/pqc/crypto/gmss/util/GMSSRandom.java
//

#include "Digest.h"
#include "GMSSRandom.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

@interface LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom () {
 @public
  id<LibOrgBouncycastleCryptoDigest> messDigestTree_;
}

- (void)addByteArraysWithByteArray:(IOSByteArray *)a
                     withByteArray:(IOSByteArray *)b;

- (void)addOneWithByteArray:(IOSByteArray *)a;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom, messDigestTree_, id<LibOrgBouncycastleCryptoDigest>)

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_addByteArraysWithByteArray_withByteArray_(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *self, IOSByteArray *a, IOSByteArray *b);

__attribute__((unused)) static void LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_addOneWithByteArray_(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *self, IOSByteArray *a);

@implementation LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom

- (instancetype)initWithLibOrgBouncycastleCryptoDigest:(id<LibOrgBouncycastleCryptoDigest>)messDigestTree2 {
  LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_initWithLibOrgBouncycastleCryptoDigest_(self, messDigestTree2);
  return self;
}

- (IOSByteArray *)nextSeedWithByteArray:(IOSByteArray *)outseed {
  IOSByteArray *rand = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(outseed))->size_];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigestTree_)) updateWithByteArray:outseed withInt:0 withInt:outseed->size_];
  rand = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigestTree_)) getDigestSize]];
  [((id<LibOrgBouncycastleCryptoDigest>) nil_chk(messDigestTree_)) doFinalWithByteArray:rand withInt:0];
  LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_addByteArraysWithByteArray_withByteArray_(self, outseed, rand);
  LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_addOneWithByteArray_(self, outseed);
  return rand;
}

- (void)addByteArraysWithByteArray:(IOSByteArray *)a
                     withByteArray:(IOSByteArray *)b {
  LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_addByteArraysWithByteArray_withByteArray_(self, a, b);
}

- (void)addOneWithByteArray:(IOSByteArray *)a {
  LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_addOneWithByteArray_(self, a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(nextSeedWithByteArray:);
  methods[2].selector = @selector(addByteArraysWithByteArray:withByteArray:);
  methods[3].selector = @selector(addOneWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "messDigestTree_", "LLibOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibOrgBouncycastleCryptoDigest;", "nextSeed", "[B", "addByteArrays", "[B[B", "addOne" };
  static const J2ObjcClassInfo _LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom = { "GMSSRandom", "lib.org.bouncycastle.pqc.crypto.gmss.util", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom;
}

@end

void LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *self, id<LibOrgBouncycastleCryptoDigest> messDigestTree2) {
  NSObject_init(self);
  self->messDigestTree_ = messDigestTree2;
}

LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *new_LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> messDigestTree2) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom, initWithLibOrgBouncycastleCryptoDigest_, messDigestTree2)
}

LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *create_LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_initWithLibOrgBouncycastleCryptoDigest_(id<LibOrgBouncycastleCryptoDigest> messDigestTree2) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom, initWithLibOrgBouncycastleCryptoDigest_, messDigestTree2)
}

void LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_addByteArraysWithByteArray_withByteArray_(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *self, IOSByteArray *a, IOSByteArray *b) {
  jbyte overflow = 0;
  jint temp;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(a))->size_; i++) {
    temp = ((jint) 0xFF & IOSByteArray_Get(a, i)) + ((jint) 0xFF & IOSByteArray_Get(nil_chk(b), i)) + overflow;
    *IOSByteArray_GetRef(a, i) = (jbyte) temp;
    overflow = (jbyte) (JreRShift32(temp, 8));
  }
}

void LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom_addOneWithByteArray_(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom *self, IOSByteArray *a) {
  jbyte overflow = 1;
  jint temp;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(a))->size_; i++) {
    temp = ((jint) 0xFF & IOSByteArray_Get(a, i)) + overflow;
    *IOSByteArray_GetRef(a, i) = (jbyte) temp;
    overflow = (jbyte) (JreRShift32(temp, 8));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastlePqcCryptoGmssUtilGMSSRandom)
