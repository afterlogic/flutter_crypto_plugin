//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/io/CryptoIoSignerOutputStream.java
//

#ifndef CryptoIoSignerOutputStream_H
#define CryptoIoSignerOutputStream_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/io/OutputStream.h"

@class IOSByteArray;
@protocol LibOrgBouncycastleCryptoSigner;

@interface LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream : JavaIoOutputStream {
 @public
  id<LibOrgBouncycastleCryptoSigner> signer_;
}

#pragma mark Public

- (instancetype __nonnull)initWithLibOrgBouncycastleCryptoSigner:(id<LibOrgBouncycastleCryptoSigner>)Signer;

- (id<LibOrgBouncycastleCryptoSigner>)getSigner;

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeWithInt:(jint)b;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream)

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream, signer_, id<LibOrgBouncycastleCryptoSigner>)

FOUNDATION_EXPORT void LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream_initWithLibOrgBouncycastleCryptoSigner_(LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream *self, id<LibOrgBouncycastleCryptoSigner> Signer);

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream *new_LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream_initWithLibOrgBouncycastleCryptoSigner_(id<LibOrgBouncycastleCryptoSigner> Signer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream *create_LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream_initWithLibOrgBouncycastleCryptoSigner_(id<LibOrgBouncycastleCryptoSigner> Signer);

J2OBJC_TYPE_LITERAL_HEADER(LibOrgBouncycastleCryptoIoCryptoIoSignerOutputStream)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // CryptoIoSignerOutputStream_H
