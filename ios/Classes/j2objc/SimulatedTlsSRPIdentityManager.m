//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/SimulatedTlsSRPIdentityManager.java
//

#include "Digest.h"
#include "HMac.h"
#include "HashAlgorithm.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "Mac.h"
#include "SRP6GroupParameters.h"
#include "SRP6VerifierGenerator.h"
#include "SimulatedTlsSRPIdentityManager.h"
#include "Strings.h"
#include "TlsSRPLoginParameters.h"
#include "TlsUtils.h"
#include "java/math/BigInteger.h"

inline IOSByteArray *LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_get_PREFIX_PASSWORD(void);
static IOSByteArray *LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager, PREFIX_PASSWORD, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_get_PREFIX_SALT(void);
static IOSByteArray *LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager, PREFIX_SALT, IOSByteArray *)

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager)

@implementation LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager

+ (LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *)getRFC5054DefaultWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)group
                                                                                                                        withByteArray:(IOSByteArray *)seedKey {
  return LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_getRFC5054DefaultWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withByteArray_(group, seedKey);
}

- (instancetype)initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *)group
            withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator:(LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *)verifierGenerator
                                          withLibOrgBouncycastleCryptoMac:(id<LibOrgBouncycastleCryptoMac>)mac {
  LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_(self, group, verifierGenerator, mac);
  return self;
}

- (LibOrgBouncycastleCryptoTlsTlsSRPLoginParameters *)getLoginParametersWithByteArray:(IOSByteArray *)identity {
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT withInt:0 withInt:((IOSByteArray *) nil_chk(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT))->size_];
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:identity withInt:0 withInt:((IOSByteArray *) nil_chk(identity))->size_];
  IOSByteArray *salt = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) getMacSize]];
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) doFinalWithByteArray:salt withInt:0];
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD withInt:0 withInt:((IOSByteArray *) nil_chk(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD))->size_];
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:identity withInt:0 withInt:identity->size_];
  IOSByteArray *password = [IOSByteArray newArrayWithLength:[((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) getMacSize]];
  [((id<LibOrgBouncycastleCryptoMac>) nil_chk(mac_)) doFinalWithByteArray:password withInt:0];
  JavaMathBigInteger *verifier = [((LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *) nil_chk(verifierGenerator_)) generateVerifierWithByteArray:salt withByteArray:identity withByteArray:password];
  return new_LibOrgBouncycastleCryptoTlsTlsSRPLoginParameters_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withJavaMathBigInteger_withByteArray_(group_, verifier, salt);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LLibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoTlsTlsSRPLoginParameters;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getRFC5054DefaultWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:withByteArray:);
  methods[1].selector = @selector(initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator:withLibOrgBouncycastleCryptoMac:);
  methods[2].selector = @selector(getLoginParametersWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX_PASSWORD", "[B", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "PREFIX_SALT", "[B", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "group_", "LLibOrgBouncycastleCryptoParamsSRP6GroupParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "verifierGenerator_", "LLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mac_", "LLibOrgBouncycastleCryptoMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getRFC5054Default", "LLibOrgBouncycastleCryptoParamsSRP6GroupParameters;[B", "LLibOrgBouncycastleCryptoParamsSRP6GroupParameters;LLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator;LLibOrgBouncycastleCryptoMac;", "getLoginParameters", "[B", &LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD, &LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager = { "SimulatedTlsSRPIdentityManager", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 5, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager class]) {
    LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD = LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@"password");
    LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT = LibOrgBouncycastleUtilStrings_toByteArrayWithNSString_(@"salt");
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager)
  }
}

@end

LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_getRFC5054DefaultWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withByteArray_(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group, IOSByteArray *seedKey) {
  LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initialize();
  LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator = new_LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_init();
  [verifierGenerator init__WithLibOrgBouncycastleCryptoParamsSRP6GroupParameters:group withLibOrgBouncycastleCryptoDigest:LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_(LibOrgBouncycastleCryptoTlsHashAlgorithm_sha1)];
  LibOrgBouncycastleCryptoMacsHMac *mac = new_LibOrgBouncycastleCryptoMacsHMac_initWithLibOrgBouncycastleCryptoDigest_(LibOrgBouncycastleCryptoTlsTlsUtils_createHashWithShort_(LibOrgBouncycastleCryptoTlsHashAlgorithm_sha1));
  [mac init__WithLibOrgBouncycastleCryptoCipherParameters:new_LibOrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(seedKey)];
  return new_LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_(group, verifierGenerator, mac);
}

void LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *self, LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group, LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<LibOrgBouncycastleCryptoMac> mac) {
  NSObject_init(self);
  self->group_ = group;
  self->verifierGenerator_ = verifierGenerator;
  self->mac_ = mac;
}

LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *new_LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group, LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<LibOrgBouncycastleCryptoMac> mac) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager, initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_, group, verifierGenerator, mac)
}

LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager *create_LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_(LibOrgBouncycastleCryptoParamsSRP6GroupParameters *group, LibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<LibOrgBouncycastleCryptoMac> mac) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager, initWithLibOrgBouncycastleCryptoParamsSRP6GroupParameters_withLibOrgBouncycastleCryptoAgreementSrpSRP6VerifierGenerator_withLibOrgBouncycastleCryptoMac_, group, verifierGenerator, mac)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsSimulatedTlsSRPIdentityManager)
