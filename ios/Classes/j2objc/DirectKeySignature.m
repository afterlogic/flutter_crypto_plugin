//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/examples/DirectKeySignature.java
//

#include "ArmoredOutputStream.h"
#include "BouncyCastleProvider.h"
#include "DirectKeySignature.h"
#include "HashAlgorithmTags.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaKeyFingerprintCalculator.h"
#include "JcaPGPContentSignerBuilder.h"
#include "JcePBESecretKeyDecryptorBuilder.h"
#include "NotationData.h"
#include "PBESecretKeyDecryptor.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "PGPPublicKeyRing.h"
#include "PGPSecretKey.h"
#include "PGPSecretKeyRing.h"
#include "PGPSignature.h"
#include "PGPSignatureGenerator.h"
#include "PGPSignatureSubpacketGenerator.h"
#include "PGPSignatureSubpacketVector.h"
#include "PGPUtil.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/security/Security.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"

@interface LibOrgBouncycastleOpenpgpExamplesDirectKeySignature ()

+ (IOSByteArray *)signPublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey:(LibOrgBouncycastleOpenpgpPGPSecretKey *)secretKey
                                                            withNSString:(NSString *)secretKeyPass
                               withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)keyToBeSigned
                                                            withNSString:(NSString *)notationName
                                                            withNSString:(NSString *)notationValue;

@end

__attribute__((unused)) static IOSByteArray *LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_signPublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey_withNSString_withLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withNSString_(LibOrgBouncycastleOpenpgpPGPSecretKey *secretKey, NSString *secretKeyPass, LibOrgBouncycastleOpenpgpPGPPublicKey *keyToBeSigned, NSString *notationName, NSString *notationValue);

@implementation LibOrgBouncycastleOpenpgpExamplesDirectKeySignature

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_mainWithNSStringArray_(args);
}

+ (IOSByteArray *)signPublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey:(LibOrgBouncycastleOpenpgpPGPSecretKey *)secretKey
                                                            withNSString:(NSString *)secretKeyPass
                               withLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)keyToBeSigned
                                                            withNSString:(NSString *)notationName
                                                            withNSString:(NSString *)notationValue {
  return LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_signPublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey_withNSString_withLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withNSString_(secretKey, secretKeyPass, keyToBeSigned, notationName, notationValue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(signPublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey:withNSString:withLibOrgBouncycastleOpenpgpPGPPublicKey:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaLangException;", "signPublicKey", "LLibOrgBouncycastleOpenpgpPGPSecretKey;LNSString;LLibOrgBouncycastleOpenpgpPGPPublicKey;LNSString;LNSString;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpExamplesDirectKeySignature = { "DirectKeySignature", "lib.org.bouncycastle.openpgp.examples", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpExamplesDirectKeySignature;
}

@end

void LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_init(LibOrgBouncycastleOpenpgpExamplesDirectKeySignature *self) {
  NSObject_init(self);
}

LibOrgBouncycastleOpenpgpExamplesDirectKeySignature *new_LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpExamplesDirectKeySignature, init)
}

LibOrgBouncycastleOpenpgpExamplesDirectKeySignature *create_LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpExamplesDirectKeySignature, init)
}

void LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_mainWithNSStringArray_(IOSObjectArray *args) {
  LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_initialize();
  JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_LibOrgBouncycastleJceProviderBouncyCastleProvider_init());
  if (((IOSObjectArray *) nil_chk(args))->size_ == 1) {
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *ring = new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 0))), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
    LibOrgBouncycastleOpenpgpPGPPublicKey *key = [ring getPublicKey];
    id<JavaUtilIterator> iter = [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(key)) getSignaturesOfTypeWithInt:LibOrgBouncycastleOpenpgpPGPSignature_DIRECT_KEY];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      LibOrgBouncycastleOpenpgpPGPSignature *sig = (LibOrgBouncycastleOpenpgpPGPSignature *) cast_chk([iter next], [LibOrgBouncycastleOpenpgpPGPSignature class]);
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Signature date is: ", [((LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *) nil_chk([((LibOrgBouncycastleOpenpgpPGPSignature *) nil_chk(sig)) getHashedSubPackets])) getSignatureCreationTime])];
      IOSObjectArray *data = [((LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *) nil_chk([sig getHashedSubPackets])) getNotationDataOccurrences];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data))->size_; i++) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$$", @"Found Notation named '", [((LibOrgBouncycastleBcpgSigNotationData *) nil_chk(IOSObjectArray_Get(data, i))) getNotationName], @"' with content '", [((LibOrgBouncycastleBcpgSigNotationData *) nil_chk(IOSObjectArray_Get(data, i))) getNotationValue], @"'.")];
      }
    }
  }
  else if (args->size_ == 5) {
    LibOrgBouncycastleOpenpgpPGPSecretKeyRing *secRing = new_LibOrgBouncycastleOpenpgpPGPSecretKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 0))), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
    NSString *secretKeyPass = IOSObjectArray_Get(args, 1);
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *ring = new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(LibOrgBouncycastleOpenpgpPGPUtil_getDecoderStreamWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 2))), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
    NSString *notationName = IOSObjectArray_Get(args, 3);
    NSString *notationValue = IOSObjectArray_Get(args, 4);
    LibOrgBouncycastleOpenpgpPGPPublicKeyRing *sRing = new_LibOrgBouncycastleOpenpgpPGPPublicKeyRing_initWithJavaIoInputStream_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(new_JavaIoByteArrayInputStream_initWithByteArray_(LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_signPublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey_withNSString_withLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withNSString_([secRing getSecretKey], secretKeyPass, [ring getPublicKey], notationName, notationValue)), new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init());
    ring = sRing;
    LibOrgBouncycastleBcpgArmoredOutputStream *out = new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(@"SignedKey.asc"));
    [sRing encodeWithJavaIoOutputStream:out];
    [out flush];
    [out close];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: DirectKeySignature secretKeyFile secretKeyPass publicKeyFile(key to be signed) NotationName NotationValue"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"or: DirectKeySignature signedPublicKeyFile"];
  }
}

IOSByteArray *LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_signPublicKeyWithLibOrgBouncycastleOpenpgpPGPSecretKey_withNSString_withLibOrgBouncycastleOpenpgpPGPPublicKey_withNSString_withNSString_(LibOrgBouncycastleOpenpgpPGPSecretKey *secretKey, NSString *secretKeyPass, LibOrgBouncycastleOpenpgpPGPPublicKey *keyToBeSigned, NSString *notationName, NSString *notationValue) {
  LibOrgBouncycastleOpenpgpExamplesDirectKeySignature_initialize();
  LibOrgBouncycastleOpenpgpPGPPrivateKey *pgpPrivKey = [((LibOrgBouncycastleOpenpgpPGPSecretKey *) nil_chk(secretKey)) extractPrivateKeyWithLibOrgBouncycastleOpenpgpOperatorPBESecretKeyDecryptor:[((LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyDecryptorBuilder *) nil_chk([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcePBESecretKeyDecryptorBuilder_init() setProviderWithNSString:@"BC"])) buildWithCharArray:[((NSString *) nil_chk(secretKeyPass)) java_toCharArray]]];
  LibOrgBouncycastleOpenpgpPGPSignatureGenerator *sGen = new_LibOrgBouncycastleOpenpgpPGPSignatureGenerator_initWithLibOrgBouncycastleOpenpgpOperatorPGPContentSignerBuilder_([new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPContentSignerBuilder_initWithInt_withInt_([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk([secretKey getPublicKey])) getAlgorithm], LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1) setProviderWithNSString:@"BC"]);
  [sGen init__WithInt:LibOrgBouncycastleOpenpgpPGPSignature_DIRECT_KEY withLibOrgBouncycastleOpenpgpPGPPrivateKey:pgpPrivKey];
  LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator *spGen = new_LibOrgBouncycastleOpenpgpPGPSignatureSubpacketGenerator_init();
  jboolean isHumanReadable = true;
  [spGen setNotationDataWithBoolean:true withBoolean:isHumanReadable withNSString:notationName withNSString:notationValue];
  LibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector *packetVector = [spGen generate];
  [sGen setHashedSubpacketsWithLibOrgBouncycastleOpenpgpPGPSignatureSubpacketVector:packetVector];
  return [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(LibOrgBouncycastleOpenpgpPGPPublicKey_addCertificationWithLibOrgBouncycastleOpenpgpPGPPublicKey_withLibOrgBouncycastleOpenpgpPGPSignature_(keyToBeSigned, [sGen generate]))) getEncoded];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpExamplesDirectKeySignature)
