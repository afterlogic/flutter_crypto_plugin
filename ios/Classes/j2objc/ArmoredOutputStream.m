//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/bcpg/ArmoredOutputStream.java
//

#include "ArmoredOutputStream.h"
#include "CRC24.h"
#include "HashAlgorithmTags.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PacketTags.h"
#include "Strings.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"

@interface LibOrgBouncycastleBcpgArmoredOutputStream ()

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                        withIntArray:(IOSIntArray *)data
                             withInt:(jint)len;

- (void)writeHeaderEntryWithNSString:(NSString *)name
                        withNSString:(NSString *)value;

@end

inline IOSByteArray *LibOrgBouncycastleBcpgArmoredOutputStream_get_encodingTable(void);
static IOSByteArray *LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleBcpgArmoredOutputStream, encodingTable, IOSByteArray *)

__attribute__((unused)) static void LibOrgBouncycastleBcpgArmoredOutputStream_encodeWithJavaIoOutputStream_withIntArray_withInt_(LibOrgBouncycastleBcpgArmoredOutputStream *self, JavaIoOutputStream *outArg, IOSIntArray *data, jint len);

__attribute__((unused)) static void LibOrgBouncycastleBcpgArmoredOutputStream_writeHeaderEntryWithNSString_withNSString_(LibOrgBouncycastleBcpgArmoredOutputStream *self, NSString *name, NSString *value);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleBcpgArmoredOutputStream)

NSString *LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR = @"Version";

@implementation LibOrgBouncycastleBcpgArmoredOutputStream

+ (NSString *)VERSION_HDR {
  return LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                        withIntArray:(IOSIntArray *)data
                             withInt:(jint)len {
  LibOrgBouncycastleBcpgArmoredOutputStream_encodeWithJavaIoOutputStream_withIntArray_withInt_(self, outArg, data, len);
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(self, outArg);
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                     withJavaUtilHashtable:(JavaUtilHashtable *)headers {
  LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_withJavaUtilHashtable_(self, outArg, headers);
  return self;
}

- (void)setHeaderWithNSString:(NSString *)name
                 withNSString:(NSString *)value {
  if (value == nil) {
    (void) [((JavaUtilHashtable *) nil_chk(self->headers_)) removeWithId:name];
  }
  else {
    (void) [((JavaUtilHashtable *) nil_chk(self->headers_)) putWithId:name withId:value];
  }
}

- (void)resetHeaders {
  NSString *version_ = (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(headers_)) getWithId:LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR], [NSString class]);
  [((JavaUtilHashtable *) nil_chk(headers_)) clear];
  if (version_ != nil) {
    (void) [((JavaUtilHashtable *) nil_chk(headers_)) putWithId:LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR withId:version_];
  }
}

- (void)beginClearTextWithInt:(jint)hashAlgorithm {
  NSString *hash_;
  switch (hashAlgorithm) {
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA1:
    hash_ = @"SHA1";
    break;
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA256:
    hash_ = @"SHA256";
    break;
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA384:
    hash_ = @"SHA384";
    break;
    case LibOrgBouncycastleBcpgHashAlgorithmTags_SHA512:
    hash_ = @"SHA512";
    break;
    case LibOrgBouncycastleBcpgHashAlgorithmTags_MD2:
    hash_ = @"MD2";
    break;
    case LibOrgBouncycastleBcpgHashAlgorithmTags_MD5:
    hash_ = @"MD5";
    break;
    case LibOrgBouncycastleBcpgHashAlgorithmTags_RIPEMD160:
    hash_ = @"RIPEMD160";
    break;
    default:
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"unknown hash algorithm tag in beginClearText: ", hashAlgorithm));
  }
  NSString *armorHdr = JreStrcat("$$", @"-----BEGIN PGP SIGNED MESSAGE-----", nl_);
  NSString *hdrs = JreStrcat("$$$$", @"Hash: ", hash_, nl_, nl_);
  for (jint i = 0; i != [armorHdr java_length]; i++) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[armorHdr charAtWithInt:i]];
  }
  for (jint i = 0; i != [hdrs java_length]; i++) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[hdrs charAtWithInt:i]];
  }
  clearText_ = true;
  newLine_ = true;
  lastb_ = 0;
}

- (void)endClearText {
  clearText_ = false;
}

- (void)writeHeaderEntryWithNSString:(NSString *)name
                        withNSString:(NSString *)value {
  LibOrgBouncycastleBcpgArmoredOutputStream_writeHeaderEntryWithNSString_withNSString_(self, name, value);
}

- (void)writeWithInt:(jint)b {
  if (clearText_) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:b];
    if (newLine_) {
      if (!(b == 0x000a && lastb_ == 0x000d)) {
        newLine_ = false;
      }
      if (b == '-') {
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:' '];
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:'-'];
      }
    }
    if (b == 0x000d || (b == 0x000a && lastb_ != 0x000d)) {
      newLine_ = true;
    }
    lastb_ = b;
    return;
  }
  if (start_) {
    jboolean newPacket = (b & (jint) 0x40) != 0;
    jint tag = 0;
    if (newPacket) {
      tag = b & (jint) 0x3f;
    }
    else {
      tag = JreRShift32((b & (jint) 0x3f), 2);
    }
    switch (tag) {
      case LibOrgBouncycastleBcpgPacketTags_PUBLIC_KEY:
      type_ = @"PUBLIC KEY BLOCK";
      break;
      case LibOrgBouncycastleBcpgPacketTags_SECRET_KEY:
      type_ = @"PRIVATE KEY BLOCK";
      break;
      case LibOrgBouncycastleBcpgPacketTags_SIGNATURE:
      type_ = @"SIGNATURE";
      break;
      default:
      type_ = @"MESSAGE";
    }
    for (jint i = 0; i != [((NSString *) nil_chk(headerStart_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(headerStart_)) charAtWithInt:i]];
    }
    for (jint i = 0; i != [((NSString *) nil_chk(type_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(type_)) charAtWithInt:i]];
    }
    for (jint i = 0; i != [((NSString *) nil_chk(headerTail_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(headerTail_)) charAtWithInt:i]];
    }
    for (jint i = 0; i != [((NSString *) nil_chk(nl_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(nl_)) charAtWithInt:i]];
    }
    if ([((JavaUtilHashtable *) nil_chk(headers_)) containsKeyWithId:LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR]) {
      LibOrgBouncycastleBcpgArmoredOutputStream_writeHeaderEntryWithNSString_withNSString_(self, LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR, (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(headers_)) getWithId:LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR], [NSString class]));
    }
    id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(headers_)) keys];
    while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      NSString *key = (NSString *) cast_chk([e nextElement], [NSString class]);
      if (![((NSString *) nil_chk(key)) isEqual:LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR]) {
        LibOrgBouncycastleBcpgArmoredOutputStream_writeHeaderEntryWithNSString_withNSString_(self, key, (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(headers_)) getWithId:key], [NSString class]));
      }
    }
    for (jint i = 0; i != [((NSString *) nil_chk(nl_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(nl_)) charAtWithInt:i]];
    }
    start_ = false;
  }
  if (bufPtr_ == 3) {
    LibOrgBouncycastleBcpgArmoredOutputStream_encodeWithJavaIoOutputStream_withIntArray_withInt_(self, out_, buf_, bufPtr_);
    bufPtr_ = 0;
    if ((++chunkCount_ & (jint) 0xf) == 0) {
      for (jint i = 0; i != [((NSString *) nil_chk(nl_)) java_length]; i++) {
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(nl_)) charAtWithInt:i]];
      }
    }
  }
  [((LibOrgBouncycastleBcpgCRC24 *) nil_chk(crc_)) updateWithInt:b];
  *IOSIntArray_GetRef(nil_chk(buf_), bufPtr_++) = b & (jint) 0xff;
}

- (void)flush {
}

- (void)close {
  if (type_ != nil) {
    LibOrgBouncycastleBcpgArmoredOutputStream_encodeWithJavaIoOutputStream_withIntArray_withInt_(self, out_, buf_, bufPtr_);
    for (jint i = 0; i != [((NSString *) nil_chk(nl_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(nl_)) charAtWithInt:i]];
    }
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:'='];
    jint crcV = [((LibOrgBouncycastleBcpgCRC24 *) nil_chk(crc_)) getValue];
    *IOSIntArray_GetRef(nil_chk(buf_), 0) = ((JreRShift32(crcV, 16)) & (jint) 0xff);
    *IOSIntArray_GetRef(buf_, 1) = ((JreRShift32(crcV, 8)) & (jint) 0xff);
    *IOSIntArray_GetRef(buf_, 2) = (crcV & (jint) 0xff);
    LibOrgBouncycastleBcpgArmoredOutputStream_encodeWithJavaIoOutputStream_withIntArray_withInt_(self, out_, buf_, 3);
    for (jint i = 0; i != [((NSString *) nil_chk(nl_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(nl_)) charAtWithInt:i]];
    }
    for (jint i = 0; i != [((NSString *) nil_chk(footerStart_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(footerStart_)) charAtWithInt:i]];
    }
    for (jint i = 0; i != [((NSString *) nil_chk(type_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(type_)) charAtWithInt:i]];
    }
    for (jint i = 0; i != [((NSString *) nil_chk(footerTail_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(footerTail_)) charAtWithInt:i]];
    }
    for (jint i = 0; i != [((NSString *) nil_chk(nl_)) java_length]; i++) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[((NSString *) nil_chk(nl_)) charAtWithInt:i]];
    }
    [((JavaIoOutputStream *) nil_chk(out_)) flush];
    type_ = nil;
    start_ = true;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(encodeWithJavaIoOutputStream:withIntArray:withInt:);
  methods[1].selector = @selector(initWithJavaIoOutputStream:);
  methods[2].selector = @selector(initWithJavaIoOutputStream:withJavaUtilHashtable:);
  methods[3].selector = @selector(setHeaderWithNSString:withNSString:);
  methods[4].selector = @selector(resetHeaders);
  methods[5].selector = @selector(beginClearTextWithInt:);
  methods[6].selector = @selector(endClearText);
  methods[7].selector = @selector(writeHeaderEntryWithNSString:withNSString:);
  methods[8].selector = @selector(writeWithInt:);
  methods[9].selector = @selector(flush);
  methods[10].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VERSION_HDR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "encodingTable", "[B", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buf_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufPtr_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "crc_", "LLibOrgBouncycastleBcpgCRC24;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "chunkCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastb_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "start_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clearText_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "newLine_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nl_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headerStart_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headerTail_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "footerStart_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "footerTail_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "version__", "LNSString;", .constantValue.asLong = 0, 0x0, 13, -1, -1, -1 },
    { "headers_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "LJavaIoOutputStream;[II", "LJavaIoIOException;", "LJavaIoOutputStream;", "LJavaIoOutputStream;LJavaUtilHashtable;", "setHeader", "LNSString;LNSString;", "beginClearText", "I", "writeHeaderEntry", "write", &LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR, &LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable, "version" };
  static const J2ObjcClassInfo _LibOrgBouncycastleBcpgArmoredOutputStream = { "ArmoredOutputStream", "lib.org.bouncycastle.bcpg", ptrTable, methods, fields, 7, 0x1, 11, 19, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleBcpgArmoredOutputStream;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleBcpgArmoredOutputStream class]) {
    LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G', (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N', (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U', (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z', (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g', (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n', (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u', (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z', (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5', (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '+', (jbyte) '/' } count:64];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleBcpgArmoredOutputStream)
  }
}

@end

void LibOrgBouncycastleBcpgArmoredOutputStream_encodeWithJavaIoOutputStream_withIntArray_withInt_(LibOrgBouncycastleBcpgArmoredOutputStream *self, JavaIoOutputStream *outArg, IOSIntArray *data, jint len) {
  jint d1;
  jint d2;
  jint d3;
  switch (len) {
    case 0:
    break;
    case 1:
    d1 = IOSIntArray_Get(nil_chk(data), 0);
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:IOSByteArray_Get(nil_chk(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable), (JreURShift32(d1, 2)) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable, (JreLShift32(d1, 4)) & (jint) 0x3f)];
    [outArg writeWithInt:'='];
    [outArg writeWithInt:'='];
    break;
    case 2:
    d1 = IOSIntArray_Get(nil_chk(data), 0);
    d2 = IOSIntArray_Get(data, 1);
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:IOSByteArray_Get(nil_chk(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable), (JreURShift32(d1, 2)) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable, ((JreLShift32(d1, 4)) | (JreURShift32(d2, 4))) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable, (JreLShift32(d2, 2)) & (jint) 0x3f)];
    [outArg writeWithInt:'='];
    break;
    case 3:
    d1 = IOSIntArray_Get(nil_chk(data), 0);
    d2 = IOSIntArray_Get(data, 1);
    d3 = IOSIntArray_Get(data, 2);
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:IOSByteArray_Get(nil_chk(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable), (JreURShift32(d1, 2)) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable, ((JreLShift32(d1, 4)) | (JreURShift32(d2, 4))) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable, ((JreLShift32(d2, 2)) | (JreURShift32(d3, 6))) & (jint) 0x3f)];
    [outArg writeWithInt:IOSByteArray_Get(LibOrgBouncycastleBcpgArmoredOutputStream_encodingTable, d3 & (jint) 0x3f)];
    break;
    default:
    @throw new_JavaIoIOException_initWithNSString_(@"unknown length in encode");
  }
}

void LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(LibOrgBouncycastleBcpgArmoredOutputStream *self, JavaIoOutputStream *outArg) {
  JavaIoOutputStream_init(self);
  self->buf_ = [IOSIntArray newArrayWithLength:3];
  self->bufPtr_ = 0;
  self->crc_ = new_LibOrgBouncycastleBcpgCRC24_init();
  self->chunkCount_ = 0;
  self->start_ = true;
  self->clearText_ = false;
  self->newLine_ = false;
  self->nl_ = LibOrgBouncycastleUtilStrings_lineSeparator();
  self->headerStart_ = @"-----BEGIN PGP ";
  self->headerTail_ = @"-----";
  self->footerStart_ = @"-----END PGP ";
  self->footerTail_ = @"-----";
  self->version__ = @"BCPG v1.61";
  self->headers_ = new_JavaUtilHashtable_init();
  self->out_ = outArg;
  if (self->nl_ == nil) {
    self->nl_ = @"\x0d\n";
  }
  (void) [self->headers_ putWithId:LibOrgBouncycastleBcpgArmoredOutputStream_VERSION_HDR withId:self->version__];
}

LibOrgBouncycastleBcpgArmoredOutputStream *new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgArmoredOutputStream, initWithJavaIoOutputStream_, outArg)
}

LibOrgBouncycastleBcpgArmoredOutputStream *create_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgArmoredOutputStream, initWithJavaIoOutputStream_, outArg)
}

void LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_withJavaUtilHashtable_(LibOrgBouncycastleBcpgArmoredOutputStream *self, JavaIoOutputStream *outArg, JavaUtilHashtable *headers) {
  LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_(self, outArg);
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(headers)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    id key = [e nextElement];
    (void) [((JavaUtilHashtable *) nil_chk(self->headers_)) putWithId:key withId:[headers getWithId:key]];
  }
}

LibOrgBouncycastleBcpgArmoredOutputStream *new_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_withJavaUtilHashtable_(JavaIoOutputStream *outArg, JavaUtilHashtable *headers) {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleBcpgArmoredOutputStream, initWithJavaIoOutputStream_withJavaUtilHashtable_, outArg, headers)
}

LibOrgBouncycastleBcpgArmoredOutputStream *create_LibOrgBouncycastleBcpgArmoredOutputStream_initWithJavaIoOutputStream_withJavaUtilHashtable_(JavaIoOutputStream *outArg, JavaUtilHashtable *headers) {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleBcpgArmoredOutputStream, initWithJavaIoOutputStream_withJavaUtilHashtable_, outArg, headers)
}

void LibOrgBouncycastleBcpgArmoredOutputStream_writeHeaderEntryWithNSString_withNSString_(LibOrgBouncycastleBcpgArmoredOutputStream *self, NSString *name, NSString *value) {
  for (jint i = 0; i != [((NSString *) nil_chk(name)) java_length]; i++) {
    [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:[name charAtWithInt:i]];
  }
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:':'];
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:' '];
  for (jint i = 0; i != [((NSString *) nil_chk(value)) java_length]; i++) {
    [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:[value charAtWithInt:i]];
  }
  for (jint i = 0; i != [((NSString *) nil_chk(self->nl_)) java_length]; i++) {
    [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:[((NSString *) nil_chk(self->nl_)) charAtWithInt:i]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleBcpgArmoredOutputStream)
