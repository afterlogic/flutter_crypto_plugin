//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/engines/GOST28147Engine.java
//

#include "Arrays.h"
#include "CipherParameters.h"
#include "DataLengthException.h"
#include "GOST28147Engine.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyParameter.h"
#include "OutputLengthException.h"
#include "ParametersWithSBox.h"
#include "Strings.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"

@interface LibOrgBouncycastleCryptoEnginesGOST28147Engine () {
 @public
  IOSIntArray *workingKey_;
  jboolean forEncryption_;
  IOSByteArray *S_;
}

+ (void)addSBoxWithNSString:(NSString *)sBoxName
              withByteArray:(IOSByteArray *)sBox;

- (IOSIntArray *)generateWorkingKeyWithBoolean:(jboolean)forEncryption
                                 withByteArray:(IOSByteArray *)userKey;

- (jint)GOST28147_mainStepWithInt:(jint)n1
                          withInt:(jint)key;

- (void)GOST28147FuncWithIntArray:(IOSIntArray *)workingKey
                    withByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)bytesTointWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff;

- (void)intTobytesWithInt:(jint)num
            withByteArray:(IOSByteArray *)outArg
                  withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGOST28147Engine, workingKey_, IOSIntArray *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleCryptoEnginesGOST28147Engine, S_, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_Sbox_Default(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_Sbox_Default(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_Sbox_Default;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, Sbox_Default, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_ESbox_Test(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_ESbox_Test(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_Test;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, ESbox_Test, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_ESbox_A(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_ESbox_A(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_A;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, ESbox_A, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_ESbox_B(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_ESbox_B(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_B;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, ESbox_B, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_ESbox_C(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_ESbox_C(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_C;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, ESbox_C, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_ESbox_D(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_ESbox_D(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_D;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, ESbox_D, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_Param_Z(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_Param_Z(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_Param_Z;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, Param_Z, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_DSbox_Test(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_DSbox_Test(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_DSbox_Test;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, DSbox_Test, IOSByteArray *)

inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_DSbox_A(void);
inline IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_DSbox_A(IOSByteArray *value);
static IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_DSbox_A;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, DSbox_A, IOSByteArray *)

inline JavaUtilHashtable *LibOrgBouncycastleCryptoEnginesGOST28147Engine_get_sBoxes(void);
inline JavaUtilHashtable *LibOrgBouncycastleCryptoEnginesGOST28147Engine_set_sBoxes(JavaUtilHashtable *value);
static JavaUtilHashtable *LibOrgBouncycastleCryptoEnginesGOST28147Engine_sBoxes;
J2OBJC_STATIC_FIELD_OBJ(LibOrgBouncycastleCryptoEnginesGOST28147Engine, sBoxes, JavaUtilHashtable *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(NSString *sBoxName, IOSByteArray *sBox);

__attribute__((unused)) static IOSIntArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_generateWorkingKeyWithBoolean_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, jboolean forEncryption, IOSByteArray *userKey);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147_mainStepWithInt_withInt_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, jint n1, jint key);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147FuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, IOSIntArray *workingKey, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint LibOrgBouncycastleCryptoEnginesGOST28147Engine_bytesTointWithByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, IOSByteArray *inArg, jint inOff);

__attribute__((unused)) static void LibOrgBouncycastleCryptoEnginesGOST28147Engine_intTobytesWithInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, jint num, IOSByteArray *outArg, jint outOff);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoEnginesGOST28147Engine)

@implementation LibOrgBouncycastleCryptoEnginesGOST28147Engine

+ (jint)BLOCK_SIZE {
  return LibOrgBouncycastleCryptoEnginesGOST28147Engine_BLOCK_SIZE;
}

+ (void)addSBoxWithNSString:(NSString *)sBoxName
              withByteArray:(IOSByteArray *)sBox {
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(sBoxName, sBox);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withLibOrgBouncycastleCryptoCipherParameters:(id<LibOrgBouncycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsParametersWithSBox class]]) {
    LibOrgBouncycastleCryptoParamsParametersWithSBox *param = (LibOrgBouncycastleCryptoParamsParametersWithSBox *) params;
    IOSByteArray *sBox = [((LibOrgBouncycastleCryptoParamsParametersWithSBox *) nil_chk(param)) getSBox];
    if (((IOSByteArray *) nil_chk(sBox))->size_ != ((IOSByteArray *) nil_chk(LibOrgBouncycastleCryptoEnginesGOST28147Engine_Sbox_Default))->size_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid S-box passed to GOST28147 init");
    }
    self->S_ = LibOrgBouncycastleUtilArrays_cloneWithByteArray_(sBox);
    if ([param getParameters] != nil) {
      workingKey_ = LibOrgBouncycastleCryptoEnginesGOST28147Engine_generateWorkingKeyWithBoolean_withByteArray_(self, forEncryption, [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) cast_chk([param getParameters], [LibOrgBouncycastleCryptoParamsKeyParameter class])))) getKey]);
    }
  }
  else if ([params isKindOfClass:[LibOrgBouncycastleCryptoParamsKeyParameter class]]) {
    workingKey_ = LibOrgBouncycastleCryptoEnginesGOST28147Engine_generateWorkingKeyWithBoolean_withByteArray_(self, forEncryption, [((LibOrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((LibOrgBouncycastleCryptoParamsKeyParameter *) params))) getKey]);
  }
  else if (params != nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to GOST28147 init - ", [[params java_getClass] getName]));
  }
}

- (NSString *)getAlgorithmName {
  return @"GOST28147";
}

- (jint)getBlockSize {
  return LibOrgBouncycastleCryptoEnginesGOST28147Engine_BLOCK_SIZE;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (workingKey_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"GOST28147 engine not initialised");
  }
  if ((inOff + LibOrgBouncycastleCryptoEnginesGOST28147Engine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + LibOrgBouncycastleCryptoEnginesGOST28147Engine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_LibOrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147FuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(self, workingKey_, inArg, inOff, outArg, outOff);
  return LibOrgBouncycastleCryptoEnginesGOST28147Engine_BLOCK_SIZE;
}

- (void)reset {
}

- (IOSIntArray *)generateWorkingKeyWithBoolean:(jboolean)forEncryption
                                 withByteArray:(IOSByteArray *)userKey {
  return LibOrgBouncycastleCryptoEnginesGOST28147Engine_generateWorkingKeyWithBoolean_withByteArray_(self, forEncryption, userKey);
}

- (jint)GOST28147_mainStepWithInt:(jint)n1
                          withInt:(jint)key {
  return LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147_mainStepWithInt_withInt_(self, n1, key);
}

- (void)GOST28147FuncWithIntArray:(IOSIntArray *)workingKey
                    withByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147FuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(self, workingKey, inArg, inOff, outArg, outOff);
}

- (jint)bytesTointWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff {
  return LibOrgBouncycastleCryptoEnginesGOST28147Engine_bytesTointWithByteArray_withInt_(self, inArg, inOff);
}

- (void)intTobytesWithInt:(jint)num
            withByteArray:(IOSByteArray *)outArg
                  withInt:(jint)outOff {
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_intTobytesWithInt_withByteArray_withInt_(self, num, outArg, outOff);
}

+ (IOSByteArray *)getSBoxWithNSString:(NSString *)sBoxName {
  return LibOrgBouncycastleCryptoEnginesGOST28147Engine_getSBoxWithNSString_(sBoxName);
}

+ (NSString *)getSBoxNameWithByteArray:(IOSByteArray *)sBox {
  return LibOrgBouncycastleCryptoEnginesGOST28147Engine_getSBoxNameWithByteArray_(sBox);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addSBoxWithNSString:withByteArray:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(init__WithBoolean:withLibOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(generateWorkingKeyWithBoolean:withByteArray:);
  methods[8].selector = @selector(GOST28147_mainStepWithInt:withInt:);
  methods[9].selector = @selector(GOST28147FuncWithIntArray:withByteArray:withInt:withByteArray:withInt:);
  methods[10].selector = @selector(bytesTointWithByteArray:withInt:);
  methods[11].selector = @selector(intTobytesWithInt:withByteArray:withInt:);
  methods[12].selector = @selector(getSBoxWithNSString:);
  methods[13].selector = @selector(getSBoxNameWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE", "I", .constantValue.asInt = LibOrgBouncycastleCryptoEnginesGOST28147Engine_BLOCK_SIZE, 0x1c, -1, -1, -1, -1 },
    { "workingKey_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "S_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Sbox_Default", "[B", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "ESbox_Test", "[B", .constantValue.asLong = 0, 0xa, -1, 21, -1, -1 },
    { "ESbox_A", "[B", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
    { "ESbox_B", "[B", .constantValue.asLong = 0, 0xa, -1, 23, -1, -1 },
    { "ESbox_C", "[B", .constantValue.asLong = 0, 0xa, -1, 24, -1, -1 },
    { "ESbox_D", "[B", .constantValue.asLong = 0, 0xa, -1, 25, -1, -1 },
    { "Param_Z", "[B", .constantValue.asLong = 0, 0xa, -1, 26, -1, -1 },
    { "DSbox_Test", "[B", .constantValue.asLong = 0, 0xa, -1, 27, -1, -1 },
    { "DSbox_A", "[B", .constantValue.asLong = 0, 0xa, -1, 28, -1, -1 },
    { "sBoxes", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 29, -1, -1 },
  };
  static const void *ptrTable[] = { "addSBox", "LNSString;[B", "init", "ZLLibOrgBouncycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "generateWorkingKey", "Z[B", "GOST28147_mainStep", "II", "GOST28147Func", "[I[BI[BI", "bytesToint", "[BI", "intTobytes", "I[BI", "getSBox", "LNSString;", "getSBoxName", "[B", &LibOrgBouncycastleCryptoEnginesGOST28147Engine_Sbox_Default, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_Test, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_A, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_B, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_C, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_D, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_Param_Z, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_DSbox_Test, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_DSbox_A, &LibOrgBouncycastleCryptoEnginesGOST28147Engine_sBoxes };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoEnginesGOST28147Engine = { "GOST28147Engine", "lib.org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 14, 14, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoEnginesGOST28147Engine;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoEnginesGOST28147Engine class]) {
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_Sbox_Default = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x4, (jint) 0xA, (jint) 0x9, (jint) 0x2, (jint) 0xD, (jint) 0x8, (jint) 0x0, (jint) 0xE, (jint) 0x6, (jint) 0xB, (jint) 0x1, (jint) 0xC, (jint) 0x7, (jint) 0xF, (jint) 0x5, (jint) 0x3, (jint) 0xE, (jint) 0xB, (jint) 0x4, (jint) 0xC, (jint) 0x6, (jint) 0xD, (jint) 0xF, (jint) 0xA, (jint) 0x2, (jint) 0x3, (jint) 0x8, (jint) 0x1, (jint) 0x0, (jint) 0x7, (jint) 0x5, (jint) 0x9, (jint) 0x5, (jint) 0x8, (jint) 0x1, (jint) 0xD, (jint) 0xA, (jint) 0x3, (jint) 0x4, (jint) 0x2, (jint) 0xE, (jint) 0xF, (jint) 0xC, (jint) 0x7, (jint) 0x6, (jint) 0x0, (jint) 0x9, (jint) 0xB, (jint) 0x7, (jint) 0xD, (jint) 0xA, (jint) 0x1, (jint) 0x0, (jint) 0x8, (jint) 0x9, (jint) 0xF, (jint) 0xE, (jint) 0x4, (jint) 0x6, (jint) 0xC, (jint) 0xB, (jint) 0x2, (jint) 0x5, (jint) 0x3, (jint) 0x6, (jint) 0xC, (jint) 0x7, (jint) 0x1, (jint) 0x5, (jint) 0xF, (jint) 0xD, (jint) 0x8, (jint) 0x4, (jint) 0xA, (jint) 0x9, (jint) 0xE, (jint) 0x0, (jint) 0x3, (jint) 0xB, (jint) 0x2, (jint) 0x4, (jint) 0xB, (jint) 0xA, (jint) 0x0, (jint) 0x7, (jint) 0x2, (jint) 0x1, (jint) 0xD, (jint) 0x3, (jint) 0x6, (jint) 0x8, (jint) 0x5, (jint) 0x9, (jint) 0xC, (jint) 0xF, (jint) 0xE, (jint) 0xD, (jint) 0xB, (jint) 0x4, (jint) 0x1, (jint) 0x3, (jint) 0xF, (jint) 0x5, (jint) 0x9, (jint) 0x0, (jint) 0xA, (jint) 0xE, (jint) 0x7, (jint) 0x6, (jint) 0x8, (jint) 0x2, (jint) 0xC, (jint) 0x1, (jint) 0xF, (jint) 0xD, (jint) 0x0, (jint) 0x5, (jint) 0x7, (jint) 0xA, (jint) 0x4, (jint) 0x9, (jint) 0x2, (jint) 0x3, (jint) 0xE, (jint) 0x6, (jint) 0xB, (jint) 0x8, (jint) 0xC } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_Test = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x4, (jint) 0x2, (jint) 0xF, (jint) 0x5, (jint) 0x9, (jint) 0x1, (jint) 0x0, (jint) 0x8, (jint) 0xE, (jint) 0x3, (jint) 0xB, (jint) 0xC, (jint) 0xD, (jint) 0x7, (jint) 0xA, (jint) 0x6, (jint) 0xC, (jint) 0x9, (jint) 0xF, (jint) 0xE, (jint) 0x8, (jint) 0x1, (jint) 0x3, (jint) 0xA, (jint) 0x2, (jint) 0x7, (jint) 0x4, (jint) 0xD, (jint) 0x6, (jint) 0x0, (jint) 0xB, (jint) 0x5, (jint) 0xD, (jint) 0x8, (jint) 0xE, (jint) 0xC, (jint) 0x7, (jint) 0x3, (jint) 0x9, (jint) 0xA, (jint) 0x1, (jint) 0x5, (jint) 0x2, (jint) 0x4, (jint) 0x6, (jint) 0xF, (jint) 0x0, (jint) 0xB, (jint) 0xE, (jint) 0x9, (jint) 0xB, (jint) 0x2, (jint) 0x5, (jint) 0xF, (jint) 0x7, (jint) 0x1, (jint) 0x0, (jint) 0xD, (jint) 0xC, (jint) 0x6, (jint) 0xA, (jint) 0x4, (jint) 0x3, (jint) 0x8, (jint) 0x3, (jint) 0xE, (jint) 0x5, (jint) 0x9, (jint) 0x6, (jint) 0x8, (jint) 0x0, (jint) 0xD, (jint) 0xA, (jint) 0xB, (jint) 0x7, (jint) 0xC, (jint) 0x2, (jint) 0x1, (jint) 0xF, (jint) 0x4, (jint) 0x8, (jint) 0xF, (jint) 0x6, (jint) 0xB, (jint) 0x1, (jint) 0x9, (jint) 0xC, (jint) 0x5, (jint) 0xD, (jint) 0x3, (jint) 0x7, (jint) 0xA, (jint) 0x0, (jint) 0xE, (jint) 0x2, (jint) 0x4, (jint) 0x9, (jint) 0xB, (jint) 0xC, (jint) 0x0, (jint) 0x3, (jint) 0x6, (jint) 0x7, (jint) 0x5, (jint) 0x4, (jint) 0x8, (jint) 0xE, (jint) 0xF, (jint) 0x1, (jint) 0xA, (jint) 0x2, (jint) 0xD, (jint) 0xC, (jint) 0x6, (jint) 0x5, (jint) 0x2, (jint) 0xB, (jint) 0x0, (jint) 0x9, (jint) 0xD, (jint) 0x3, (jint) 0xE, (jint) 0x7, (jint) 0xA, (jint) 0xF, (jint) 0x4, (jint) 0x1, (jint) 0x8 } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_A = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x9, (jint) 0x6, (jint) 0x3, (jint) 0x2, (jint) 0x8, (jint) 0xB, (jint) 0x1, (jint) 0x7, (jint) 0xA, (jint) 0x4, (jint) 0xE, (jint) 0xF, (jint) 0xC, (jint) 0x0, (jint) 0xD, (jint) 0x5, (jint) 0x3, (jint) 0x7, (jint) 0xE, (jint) 0x9, (jint) 0x8, (jint) 0xA, (jint) 0xF, (jint) 0x0, (jint) 0x5, (jint) 0x2, (jint) 0x6, (jint) 0xC, (jint) 0xB, (jint) 0x4, (jint) 0xD, (jint) 0x1, (jint) 0xE, (jint) 0x4, (jint) 0x6, (jint) 0x2, (jint) 0xB, (jint) 0x3, (jint) 0xD, (jint) 0x8, (jint) 0xC, (jint) 0xF, (jint) 0x5, (jint) 0xA, (jint) 0x0, (jint) 0x7, (jint) 0x1, (jint) 0x9, (jint) 0xE, (jint) 0x7, (jint) 0xA, (jint) 0xC, (jint) 0xD, (jint) 0x1, (jint) 0x3, (jint) 0x9, (jint) 0x0, (jint) 0x2, (jint) 0xB, (jint) 0x4, (jint) 0xF, (jint) 0x8, (jint) 0x5, (jint) 0x6, (jint) 0xB, (jint) 0x5, (jint) 0x1, (jint) 0x9, (jint) 0x8, (jint) 0xD, (jint) 0xF, (jint) 0x0, (jint) 0xE, (jint) 0x4, (jint) 0x2, (jint) 0x3, (jint) 0xC, (jint) 0x7, (jint) 0xA, (jint) 0x6, (jint) 0x3, (jint) 0xA, (jint) 0xD, (jint) 0xC, (jint) 0x1, (jint) 0x2, (jint) 0x0, (jint) 0xB, (jint) 0x7, (jint) 0x5, (jint) 0x9, (jint) 0x4, (jint) 0x8, (jint) 0xF, (jint) 0xE, (jint) 0x6, (jint) 0x1, (jint) 0xD, (jint) 0x2, (jint) 0x9, (jint) 0x7, (jint) 0xA, (jint) 0x6, (jint) 0x0, (jint) 0x8, (jint) 0xC, (jint) 0x4, (jint) 0x5, (jint) 0xF, (jint) 0x3, (jint) 0xB, (jint) 0xE, (jint) 0xB, (jint) 0xA, (jint) 0xF, (jint) 0x5, (jint) 0x0, (jint) 0xC, (jint) 0xE, (jint) 0x8, (jint) 0x6, (jint) 0x2, (jint) 0x3, (jint) 0x9, (jint) 0x1, (jint) 0x7, (jint) 0xD, (jint) 0x4 } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_B = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x8, (jint) 0x4, (jint) 0xB, (jint) 0x1, (jint) 0x3, (jint) 0x5, (jint) 0x0, (jint) 0x9, (jint) 0x2, (jint) 0xE, (jint) 0xA, (jint) 0xC, (jint) 0xD, (jint) 0x6, (jint) 0x7, (jint) 0xF, (jint) 0x0, (jint) 0x1, (jint) 0x2, (jint) 0xA, (jint) 0x4, (jint) 0xD, (jint) 0x5, (jint) 0xC, (jint) 0x9, (jint) 0x7, (jint) 0x3, (jint) 0xF, (jint) 0xB, (jint) 0x8, (jint) 0x6, (jint) 0xE, (jint) 0xE, (jint) 0xC, (jint) 0x0, (jint) 0xA, (jint) 0x9, (jint) 0x2, (jint) 0xD, (jint) 0xB, (jint) 0x7, (jint) 0x5, (jint) 0x8, (jint) 0xF, (jint) 0x3, (jint) 0x6, (jint) 0x1, (jint) 0x4, (jint) 0x7, (jint) 0x5, (jint) 0x0, (jint) 0xD, (jint) 0xB, (jint) 0x6, (jint) 0x1, (jint) 0x2, (jint) 0x3, (jint) 0xA, (jint) 0xC, (jint) 0xF, (jint) 0x4, (jint) 0xE, (jint) 0x9, (jint) 0x8, (jint) 0x2, (jint) 0x7, (jint) 0xC, (jint) 0xF, (jint) 0x9, (jint) 0x5, (jint) 0xA, (jint) 0xB, (jint) 0x1, (jint) 0x4, (jint) 0x0, (jint) 0xD, (jint) 0x6, (jint) 0x8, (jint) 0xE, (jint) 0x3, (jint) 0x8, (jint) 0x3, (jint) 0x2, (jint) 0x6, (jint) 0x4, (jint) 0xD, (jint) 0xE, (jint) 0xB, (jint) 0xC, (jint) 0x1, (jint) 0x7, (jint) 0xF, (jint) 0xA, (jint) 0x0, (jint) 0x9, (jint) 0x5, (jint) 0x5, (jint) 0x2, (jint) 0xA, (jint) 0xB, (jint) 0x9, (jint) 0x1, (jint) 0xC, (jint) 0x3, (jint) 0x7, (jint) 0x4, (jint) 0xD, (jint) 0x0, (jint) 0x6, (jint) 0xF, (jint) 0x8, (jint) 0xE, (jint) 0x0, (jint) 0x4, (jint) 0xB, (jint) 0xE, (jint) 0x8, (jint) 0x3, (jint) 0x7, (jint) 0x1, (jint) 0xA, (jint) 0x2, (jint) 0x9, (jint) 0x6, (jint) 0xF, (jint) 0xD, (jint) 0x5, (jint) 0xC } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_C = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x1, (jint) 0xB, (jint) 0xC, (jint) 0x2, (jint) 0x9, (jint) 0xD, (jint) 0x0, (jint) 0xF, (jint) 0x4, (jint) 0x5, (jint) 0x8, (jint) 0xE, (jint) 0xA, (jint) 0x7, (jint) 0x6, (jint) 0x3, (jint) 0x0, (jint) 0x1, (jint) 0x7, (jint) 0xD, (jint) 0xB, (jint) 0x4, (jint) 0x5, (jint) 0x2, (jint) 0x8, (jint) 0xE, (jint) 0xF, (jint) 0xC, (jint) 0x9, (jint) 0xA, (jint) 0x6, (jint) 0x3, (jint) 0x8, (jint) 0x2, (jint) 0x5, (jint) 0x0, (jint) 0x4, (jint) 0x9, (jint) 0xF, (jint) 0xA, (jint) 0x3, (jint) 0x7, (jint) 0xC, (jint) 0xD, (jint) 0x6, (jint) 0xE, (jint) 0x1, (jint) 0xB, (jint) 0x3, (jint) 0x6, (jint) 0x0, (jint) 0x1, (jint) 0x5, (jint) 0xD, (jint) 0xA, (jint) 0x8, (jint) 0xB, (jint) 0x2, (jint) 0x9, (jint) 0x7, (jint) 0xE, (jint) 0xF, (jint) 0xC, (jint) 0x4, (jint) 0x8, (jint) 0xD, (jint) 0xB, (jint) 0x0, (jint) 0x4, (jint) 0x5, (jint) 0x1, (jint) 0x2, (jint) 0x9, (jint) 0x3, (jint) 0xC, (jint) 0xE, (jint) 0x6, (jint) 0xF, (jint) 0xA, (jint) 0x7, (jint) 0xC, (jint) 0x9, (jint) 0xB, (jint) 0x1, (jint) 0x8, (jint) 0xE, (jint) 0x2, (jint) 0x4, (jint) 0x7, (jint) 0x3, (jint) 0x6, (jint) 0x5, (jint) 0xA, (jint) 0x0, (jint) 0xF, (jint) 0xD, (jint) 0xA, (jint) 0x9, (jint) 0x6, (jint) 0x8, (jint) 0xD, (jint) 0xE, (jint) 0x2, (jint) 0x0, (jint) 0xF, (jint) 0x3, (jint) 0x5, (jint) 0xB, (jint) 0x4, (jint) 0x1, (jint) 0xC, (jint) 0x7, (jint) 0x7, (jint) 0x4, (jint) 0x0, (jint) 0x5, (jint) 0xA, (jint) 0x2, (jint) 0xF, (jint) 0xE, (jint) 0xC, (jint) 0x6, (jint) 0x1, (jint) 0xB, (jint) 0xD, (jint) 0x9, (jint) 0x3, (jint) 0x8 } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_D = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0xF, (jint) 0xC, (jint) 0x2, (jint) 0xA, (jint) 0x6, (jint) 0x4, (jint) 0x5, (jint) 0x0, (jint) 0x7, (jint) 0x9, (jint) 0xE, (jint) 0xD, (jint) 0x1, (jint) 0xB, (jint) 0x8, (jint) 0x3, (jint) 0xB, (jint) 0x6, (jint) 0x3, (jint) 0x4, (jint) 0xC, (jint) 0xF, (jint) 0xE, (jint) 0x2, (jint) 0x7, (jint) 0xD, (jint) 0x8, (jint) 0x0, (jint) 0x5, (jint) 0xA, (jint) 0x9, (jint) 0x1, (jint) 0x1, (jint) 0xC, (jint) 0xB, (jint) 0x0, (jint) 0xF, (jint) 0xE, (jint) 0x6, (jint) 0x5, (jint) 0xA, (jint) 0xD, (jint) 0x4, (jint) 0x8, (jint) 0x9, (jint) 0x3, (jint) 0x7, (jint) 0x2, (jint) 0x1, (jint) 0x5, (jint) 0xE, (jint) 0xC, (jint) 0xA, (jint) 0x7, (jint) 0x0, (jint) 0xD, (jint) 0x6, (jint) 0x2, (jint) 0xB, (jint) 0x4, (jint) 0x9, (jint) 0x3, (jint) 0xF, (jint) 0x8, (jint) 0x0, (jint) 0xC, (jint) 0x8, (jint) 0x9, (jint) 0xD, (jint) 0x2, (jint) 0xA, (jint) 0xB, (jint) 0x7, (jint) 0x3, (jint) 0x6, (jint) 0x5, (jint) 0x4, (jint) 0xE, (jint) 0xF, (jint) 0x1, (jint) 0x8, (jint) 0x0, (jint) 0xF, (jint) 0x3, (jint) 0x2, (jint) 0x5, (jint) 0xE, (jint) 0xB, (jint) 0x1, (jint) 0xA, (jint) 0x4, (jint) 0x7, (jint) 0xC, (jint) 0x9, (jint) 0xD, (jint) 0x6, (jint) 0x3, (jint) 0x0, (jint) 0x6, (jint) 0xF, (jint) 0x1, (jint) 0xE, (jint) 0x9, (jint) 0x2, (jint) 0xD, (jint) 0x8, (jint) 0xC, (jint) 0x4, (jint) 0xB, (jint) 0xA, (jint) 0x5, (jint) 0x7, (jint) 0x1, (jint) 0xA, (jint) 0x6, (jint) 0x8, (jint) 0xF, (jint) 0xB, (jint) 0x0, (jint) 0x4, (jint) 0xC, (jint) 0x3, (jint) 0x5, (jint) 0x9, (jint) 0x7, (jint) 0xD, (jint) 0x2, (jint) 0xE } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_Param_Z = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0xc, (jint) 0x4, (jint) 0x6, (jint) 0x2, (jint) 0xa, (jint) 0x5, (jint) 0xb, (jint) 0x9, (jint) 0xe, (jint) 0x8, (jint) 0xd, (jint) 0x7, (jint) 0x0, (jint) 0x3, (jint) 0xf, (jint) 0x1, (jint) 0x6, (jint) 0x8, (jint) 0x2, (jint) 0x3, (jint) 0x9, (jint) 0xa, (jint) 0x5, (jint) 0xc, (jint) 0x1, (jint) 0xe, (jint) 0x4, (jint) 0x7, (jint) 0xb, (jint) 0xd, (jint) 0x0, (jint) 0xf, (jint) 0xb, (jint) 0x3, (jint) 0x5, (jint) 0x8, (jint) 0x2, (jint) 0xf, (jint) 0xa, (jint) 0xd, (jint) 0xe, (jint) 0x1, (jint) 0x7, (jint) 0x4, (jint) 0xc, (jint) 0x9, (jint) 0x6, (jint) 0x0, (jint) 0xc, (jint) 0x8, (jint) 0x2, (jint) 0x1, (jint) 0xd, (jint) 0x4, (jint) 0xf, (jint) 0x6, (jint) 0x7, (jint) 0x0, (jint) 0xa, (jint) 0x5, (jint) 0x3, (jint) 0xe, (jint) 0x9, (jint) 0xb, (jint) 0x7, (jint) 0xf, (jint) 0x5, (jint) 0xa, (jint) 0x8, (jint) 0x1, (jint) 0x6, (jint) 0xd, (jint) 0x0, (jint) 0x9, (jint) 0x3, (jint) 0xe, (jint) 0xb, (jint) 0x4, (jint) 0x2, (jint) 0xc, (jint) 0x5, (jint) 0xd, (jint) 0xf, (jint) 0x6, (jint) 0x9, (jint) 0x2, (jint) 0xc, (jint) 0xa, (jint) 0xb, (jint) 0x7, (jint) 0x8, (jint) 0x1, (jint) 0x4, (jint) 0x3, (jint) 0xe, (jint) 0x0, (jint) 0x8, (jint) 0xe, (jint) 0x2, (jint) 0x5, (jint) 0x6, (jint) 0x9, (jint) 0x1, (jint) 0xc, (jint) 0xf, (jint) 0x4, (jint) 0xb, (jint) 0x0, (jint) 0xd, (jint) 0xa, (jint) 0x3, (jint) 0x7, (jint) 0x1, (jint) 0x7, (jint) 0xe, (jint) 0xd, (jint) 0x0, (jint) 0x5, (jint) 0x8, (jint) 0x3, (jint) 0x4, (jint) 0xf, (jint) 0xa, (jint) 0x6, (jint) 0x9, (jint) 0xc, (jint) 0xb, (jint) 0x2 } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_DSbox_Test = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x4, (jint) 0xA, (jint) 0x9, (jint) 0x2, (jint) 0xD, (jint) 0x8, (jint) 0x0, (jint) 0xE, (jint) 0x6, (jint) 0xB, (jint) 0x1, (jint) 0xC, (jint) 0x7, (jint) 0xF, (jint) 0x5, (jint) 0x3, (jint) 0xE, (jint) 0xB, (jint) 0x4, (jint) 0xC, (jint) 0x6, (jint) 0xD, (jint) 0xF, (jint) 0xA, (jint) 0x2, (jint) 0x3, (jint) 0x8, (jint) 0x1, (jint) 0x0, (jint) 0x7, (jint) 0x5, (jint) 0x9, (jint) 0x5, (jint) 0x8, (jint) 0x1, (jint) 0xD, (jint) 0xA, (jint) 0x3, (jint) 0x4, (jint) 0x2, (jint) 0xE, (jint) 0xF, (jint) 0xC, (jint) 0x7, (jint) 0x6, (jint) 0x0, (jint) 0x9, (jint) 0xB, (jint) 0x7, (jint) 0xD, (jint) 0xA, (jint) 0x1, (jint) 0x0, (jint) 0x8, (jint) 0x9, (jint) 0xF, (jint) 0xE, (jint) 0x4, (jint) 0x6, (jint) 0xC, (jint) 0xB, (jint) 0x2, (jint) 0x5, (jint) 0x3, (jint) 0x6, (jint) 0xC, (jint) 0x7, (jint) 0x1, (jint) 0x5, (jint) 0xF, (jint) 0xD, (jint) 0x8, (jint) 0x4, (jint) 0xA, (jint) 0x9, (jint) 0xE, (jint) 0x0, (jint) 0x3, (jint) 0xB, (jint) 0x2, (jint) 0x4, (jint) 0xB, (jint) 0xA, (jint) 0x0, (jint) 0x7, (jint) 0x2, (jint) 0x1, (jint) 0xD, (jint) 0x3, (jint) 0x6, (jint) 0x8, (jint) 0x5, (jint) 0x9, (jint) 0xC, (jint) 0xF, (jint) 0xE, (jint) 0xD, (jint) 0xB, (jint) 0x4, (jint) 0x1, (jint) 0x3, (jint) 0xF, (jint) 0x5, (jint) 0x9, (jint) 0x0, (jint) 0xA, (jint) 0xE, (jint) 0x7, (jint) 0x6, (jint) 0x8, (jint) 0x2, (jint) 0xC, (jint) 0x1, (jint) 0xF, (jint) 0xD, (jint) 0x0, (jint) 0x5, (jint) 0x7, (jint) 0xA, (jint) 0x4, (jint) 0x9, (jint) 0x2, (jint) 0x3, (jint) 0xE, (jint) 0x6, (jint) 0xB, (jint) 0x8, (jint) 0xC } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_DSbox_A = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0xA, (jint) 0x4, (jint) 0x5, (jint) 0x6, (jint) 0x8, (jint) 0x1, (jint) 0x3, (jint) 0x7, (jint) 0xD, (jint) 0xC, (jint) 0xE, (jint) 0x0, (jint) 0x9, (jint) 0x2, (jint) 0xB, (jint) 0xF, (jint) 0x5, (jint) 0xF, (jint) 0x4, (jint) 0x0, (jint) 0x2, (jint) 0xD, (jint) 0xB, (jint) 0x9, (jint) 0x1, (jint) 0x7, (jint) 0x6, (jint) 0x3, (jint) 0xC, (jint) 0xE, (jint) 0xA, (jint) 0x8, (jint) 0x7, (jint) 0xF, (jint) 0xC, (jint) 0xE, (jint) 0x9, (jint) 0x4, (jint) 0x1, (jint) 0x0, (jint) 0x3, (jint) 0xB, (jint) 0x5, (jint) 0x2, (jint) 0x6, (jint) 0xA, (jint) 0x8, (jint) 0xD, (jint) 0x4, (jint) 0xA, (jint) 0x7, (jint) 0xC, (jint) 0x0, (jint) 0xF, (jint) 0x2, (jint) 0x8, (jint) 0xE, (jint) 0x1, (jint) 0x6, (jint) 0x5, (jint) 0xD, (jint) 0xB, (jint) 0x9, (jint) 0x3, (jint) 0x7, (jint) 0x6, (jint) 0x4, (jint) 0xB, (jint) 0x9, (jint) 0xC, (jint) 0x2, (jint) 0xA, (jint) 0x1, (jint) 0x8, (jint) 0x0, (jint) 0xE, (jint) 0xF, (jint) 0xD, (jint) 0x3, (jint) 0x5, (jint) 0x7, (jint) 0x6, (jint) 0x2, (jint) 0x4, (jint) 0xD, (jint) 0x9, (jint) 0xF, (jint) 0x0, (jint) 0xA, (jint) 0x1, (jint) 0x5, (jint) 0xB, (jint) 0x8, (jint) 0xE, (jint) 0xC, (jint) 0x3, (jint) 0xD, (jint) 0xE, (jint) 0x4, (jint) 0x1, (jint) 0x7, (jint) 0x0, (jint) 0x5, (jint) 0xA, (jint) 0x3, (jint) 0xC, (jint) 0x8, (jint) 0xF, (jint) 0x6, (jint) 0x2, (jint) 0x9, (jint) 0xB, (jint) 0x1, (jint) 0x3, (jint) 0xA, (jint) 0x9, (jint) 0x5, (jint) 0xB, (jint) 0x4, (jint) 0xF, (jint) 0x8, (jint) 0x6, (jint) 0x7, (jint) 0xE, (jint) 0xD, (jint) 0x0, (jint) 0x2, (jint) 0xC } count:128];
    LibOrgBouncycastleCryptoEnginesGOST28147Engine_sBoxes = new_JavaUtilHashtable_init();
    {
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"Default", LibOrgBouncycastleCryptoEnginesGOST28147Engine_Sbox_Default);
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"E-TEST", LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_Test);
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"E-A", LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_A);
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"E-B", LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_B);
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"E-C", LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_C);
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"E-D", LibOrgBouncycastleCryptoEnginesGOST28147Engine_ESbox_D);
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"Param-Z", LibOrgBouncycastleCryptoEnginesGOST28147Engine_Param_Z);
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"D-TEST", LibOrgBouncycastleCryptoEnginesGOST28147Engine_DSbox_Test);
      LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(@"D-A", LibOrgBouncycastleCryptoEnginesGOST28147Engine_DSbox_A);
    }
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoEnginesGOST28147Engine)
  }
}

@end

void LibOrgBouncycastleCryptoEnginesGOST28147Engine_addSBoxWithNSString_withByteArray_(NSString *sBoxName, IOSByteArray *sBox) {
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoEnginesGOST28147Engine_sBoxes)) putWithId:LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_(sBoxName) withId:sBox];
}

void LibOrgBouncycastleCryptoEnginesGOST28147Engine_init(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self) {
  NSObject_init(self);
  self->workingKey_ = nil;
  self->S_ = LibOrgBouncycastleCryptoEnginesGOST28147Engine_Sbox_Default;
}

LibOrgBouncycastleCryptoEnginesGOST28147Engine *new_LibOrgBouncycastleCryptoEnginesGOST28147Engine_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoEnginesGOST28147Engine, init)
}

LibOrgBouncycastleCryptoEnginesGOST28147Engine *create_LibOrgBouncycastleCryptoEnginesGOST28147Engine_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoEnginesGOST28147Engine, init)
}

IOSIntArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_generateWorkingKeyWithBoolean_withByteArray_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, jboolean forEncryption, IOSByteArray *userKey) {
  self->forEncryption_ = forEncryption;
  if (((IOSByteArray *) nil_chk(userKey))->size_ != 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Key length invalid. Key needs to be 32 byte - 256 bit!!!");
  }
  IOSIntArray *key = [IOSIntArray newArrayWithLength:8];
  for (jint i = 0; i != 8; i++) {
    *IOSIntArray_GetRef(key, i) = LibOrgBouncycastleCryptoEnginesGOST28147Engine_bytesTointWithByteArray_withInt_(self, userKey, i * 4);
  }
  return key;
}

jint LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147_mainStepWithInt_withInt_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, jint n1, jint key) {
  jint cm = (key + n1);
  jint om = JreLShift32(IOSByteArray_Get(nil_chk(self->S_), 0 + ((JreRShift32(cm, (0 * 4))) & (jint) 0xF)), (0 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 16 + ((JreRShift32(cm, (1 * 4))) & (jint) 0xF)), (1 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 32 + ((JreRShift32(cm, (2 * 4))) & (jint) 0xF)), (2 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 48 + ((JreRShift32(cm, (3 * 4))) & (jint) 0xF)), (3 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 64 + ((JreRShift32(cm, (4 * 4))) & (jint) 0xF)), (4 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 80 + ((JreRShift32(cm, (5 * 4))) & (jint) 0xF)), (5 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 96 + ((JreRShift32(cm, (6 * 4))) & (jint) 0xF)), (6 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 112 + ((JreRShift32(cm, (7 * 4))) & (jint) 0xF)), (7 * 4));
  return (JreLShift32(om, 11)) | (JreURShift32(om, (32 - 11)));
}

void LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147FuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, IOSIntArray *workingKey, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jint N1;
  jint N2;
  jint tmp;
  N1 = LibOrgBouncycastleCryptoEnginesGOST28147Engine_bytesTointWithByteArray_withInt_(self, inArg, inOff);
  N2 = LibOrgBouncycastleCryptoEnginesGOST28147Engine_bytesTointWithByteArray_withInt_(self, inArg, inOff + 4);
  if (self->forEncryption_) {
    for (jint k = 0; k < 3; k++) {
      for (jint j = 0; j < 8; j++) {
        tmp = N1;
        N1 = N2 ^ LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147_mainStepWithInt_withInt_(self, N1, IOSIntArray_Get(nil_chk(workingKey), j));
        N2 = tmp;
      }
    }
    for (jint j = 7; j > 0; j--) {
      tmp = N1;
      N1 = N2 ^ LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147_mainStepWithInt_withInt_(self, N1, IOSIntArray_Get(nil_chk(workingKey), j));
      N2 = tmp;
    }
  }
  else {
    for (jint j = 0; j < 8; j++) {
      tmp = N1;
      N1 = N2 ^ LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147_mainStepWithInt_withInt_(self, N1, IOSIntArray_Get(nil_chk(workingKey), j));
      N2 = tmp;
    }
    for (jint k = 0; k < 3; k++) {
      for (jint j = 7; j >= 0; j--) {
        if ((k == 2) && (j == 0)) {
          break;
        }
        tmp = N1;
        N1 = N2 ^ LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147_mainStepWithInt_withInt_(self, N1, IOSIntArray_Get(nil_chk(workingKey), j));
        N2 = tmp;
      }
    }
  }
  N2 = N2 ^ LibOrgBouncycastleCryptoEnginesGOST28147Engine_GOST28147_mainStepWithInt_withInt_(self, N1, IOSIntArray_Get(nil_chk(workingKey), 0));
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_intTobytesWithInt_withByteArray_withInt_(self, N1, outArg, outOff);
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_intTobytesWithInt_withByteArray_withInt_(self, N2, outArg, outOff + 4);
}

jint LibOrgBouncycastleCryptoEnginesGOST28147Engine_bytesTointWithByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, IOSByteArray *inArg, jint inOff) {
  return ((JreLShift32(IOSByteArray_Get(nil_chk(inArg), inOff + 3), 24)) & (jint) 0xff000000) + ((JreLShift32(IOSByteArray_Get(inArg, inOff + 2), 16)) & (jint) 0xff0000) + ((JreLShift32(IOSByteArray_Get(inArg, inOff + 1), 8)) & (jint) 0xff00) + (IOSByteArray_Get(inArg, inOff) & (jint) 0xff);
}

void LibOrgBouncycastleCryptoEnginesGOST28147Engine_intTobytesWithInt_withByteArray_withInt_(LibOrgBouncycastleCryptoEnginesGOST28147Engine *self, jint num, IOSByteArray *outArg, jint outOff) {
  *IOSByteArray_GetRef(nil_chk(outArg), outOff + 3) = (jbyte) (JreURShift32(num, 24));
  *IOSByteArray_GetRef(outArg, outOff + 2) = (jbyte) (JreURShift32(num, 16));
  *IOSByteArray_GetRef(outArg, outOff + 1) = (jbyte) (JreURShift32(num, 8));
  *IOSByteArray_GetRef(outArg, outOff) = (jbyte) num;
}

IOSByteArray *LibOrgBouncycastleCryptoEnginesGOST28147Engine_getSBoxWithNSString_(NSString *sBoxName) {
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_initialize();
  IOSByteArray *sBox = (IOSByteArray *) cast_chk([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoEnginesGOST28147Engine_sBoxes)) getWithId:LibOrgBouncycastleUtilStrings_toUpperCaseWithNSString_(sBoxName)], [IOSByteArray class]);
  if (sBox == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Unknown S-Box - possible types: \"Default\", \"E-Test\", \"E-A\", \"E-B\", \"E-C\", \"E-D\", \"Param-Z\", \"D-Test\", \"D-A\".");
  }
  return LibOrgBouncycastleUtilArrays_cloneWithByteArray_(sBox);
}

NSString *LibOrgBouncycastleCryptoEnginesGOST28147Engine_getSBoxNameWithByteArray_(IOSByteArray *sBox) {
  LibOrgBouncycastleCryptoEnginesGOST28147Engine_initialize();
  for (id<JavaUtilEnumeration> en = [((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoEnginesGOST28147Engine_sBoxes)) keys]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    NSString *name = (NSString *) cast_chk([en nextElement], [NSString class]);
    IOSByteArray *sb = (IOSByteArray *) cast_chk([((JavaUtilHashtable *) nil_chk(LibOrgBouncycastleCryptoEnginesGOST28147Engine_sBoxes)) getWithId:name], [IOSByteArray class]);
    if (LibOrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(sb, sBox)) {
      return name;
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"SBOX provided did not map to a known one");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoEnginesGOST28147Engine)
