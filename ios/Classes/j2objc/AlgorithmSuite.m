//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/algorithm/AlgorithmSuite.java
//

#include "AlgorithmSuite.h"
#include "CompressionAlgorithm.h"
#include "HashAlgorithmUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SymmetricKeyAlgorithm.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface LibComAfterlogicPgpAlgorithmAlgorithmSuite () {
 @public
  id<JavaUtilList> symmetricKeyAlgorithms_;
  id<JavaUtilList> hashAlgorithmUtils_;
  id<JavaUtilList> compressionAlgorithms_;
}

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpAlgorithmAlgorithmSuite, symmetricKeyAlgorithms_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpAlgorithmAlgorithmSuite, hashAlgorithmUtils_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpAlgorithmAlgorithmSuite, compressionAlgorithms_, id<JavaUtilList>)

inline LibComAfterlogicPgpAlgorithmAlgorithmSuite *LibComAfterlogicPgpAlgorithmAlgorithmSuite_get_defaultAlgorithmSuite(void);
inline LibComAfterlogicPgpAlgorithmAlgorithmSuite *LibComAfterlogicPgpAlgorithmAlgorithmSuite_set_defaultAlgorithmSuite(LibComAfterlogicPgpAlgorithmAlgorithmSuite *value);
static LibComAfterlogicPgpAlgorithmAlgorithmSuite *LibComAfterlogicPgpAlgorithmAlgorithmSuite_defaultAlgorithmSuite;
J2OBJC_STATIC_FIELD_OBJ(LibComAfterlogicPgpAlgorithmAlgorithmSuite, defaultAlgorithmSuite, LibComAfterlogicPgpAlgorithmAlgorithmSuite *)

J2OBJC_INITIALIZED_DEFN(LibComAfterlogicPgpAlgorithmAlgorithmSuite)

@implementation LibComAfterlogicPgpAlgorithmAlgorithmSuite

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)symmetricKeyAlgorithms
                    withJavaUtilList:(id<JavaUtilList>)hashAlgorithmUtils
                    withJavaUtilList:(id<JavaUtilList>)compressionAlgorithms {
  LibComAfterlogicPgpAlgorithmAlgorithmSuite_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(self, symmetricKeyAlgorithms, hashAlgorithmUtils, compressionAlgorithms);
  return self;
}

- (void)setSymmetricKeyAlgorithmsWithJavaUtilList:(id<JavaUtilList>)symmetricKeyAlgorithms {
  self->symmetricKeyAlgorithms_ = symmetricKeyAlgorithms;
}

- (id<JavaUtilList>)getSymmetricKeyAlgorithms {
  return new_JavaUtilArrayList_initWithJavaUtilCollection_(symmetricKeyAlgorithms_);
}

- (IOSIntArray *)getSymmetricKeyAlgorithmIds {
  IOSIntArray *array = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(symmetricKeyAlgorithms_)) size]];
  for (jint i = 0; i < array->size_; i++) {
    *IOSIntArray_GetRef(array, i) = [((LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm *) nil_chk([((id<JavaUtilList>) nil_chk(symmetricKeyAlgorithms_)) getWithInt:i])) getAlgorithmId];
  }
  return array;
}

- (void)setHashAlgorithmUtilsWithJavaUtilList:(id<JavaUtilList>)hashAlgorithmUtils {
  self->hashAlgorithmUtils_ = hashAlgorithmUtils;
}

- (id<JavaUtilList>)getHashAlgorithmUtils {
  return hashAlgorithmUtils_;
}

- (IOSIntArray *)getHashAlgorithmIds {
  IOSIntArray *array = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(hashAlgorithmUtils_)) size]];
  for (jint i = 0; i < array->size_; i++) {
    *IOSIntArray_GetRef(array, i) = [((LibComAfterlogicPgpAlgorithmHashAlgorithmUtil *) nil_chk([((id<JavaUtilList>) nil_chk(hashAlgorithmUtils_)) getWithInt:i])) getAlgorithmId];
  }
  return array;
}

- (void)setCompressionAlgorithmsWithJavaUtilList:(id<JavaUtilList>)compressionAlgorithms {
  self->compressionAlgorithms_ = compressionAlgorithms;
}

- (id<JavaUtilList>)getCompressionAlgorithms {
  return compressionAlgorithms_;
}

- (IOSIntArray *)getCompressionAlgorithmIds {
  IOSIntArray *array = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(compressionAlgorithms_)) size]];
  for (jint i = 0; i < array->size_; i++) {
    *IOSIntArray_GetRef(array, i) = [((LibComAfterlogicPgpAlgorithmCompressionAlgorithm *) nil_chk([((id<JavaUtilList>) nil_chk(compressionAlgorithms_)) getWithInt:i])) getAlgorithmId];
  }
  return array;
}

+ (LibComAfterlogicPgpAlgorithmAlgorithmSuite *)getDefaultAlgorithmSuite {
  return LibComAfterlogicPgpAlgorithmAlgorithmSuite_getDefaultAlgorithmSuite();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, 10, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibComAfterlogicPgpAlgorithmAlgorithmSuite;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(setSymmetricKeyAlgorithmsWithJavaUtilList:);
  methods[2].selector = @selector(getSymmetricKeyAlgorithms);
  methods[3].selector = @selector(getSymmetricKeyAlgorithmIds);
  methods[4].selector = @selector(setHashAlgorithmUtilsWithJavaUtilList:);
  methods[5].selector = @selector(getHashAlgorithmUtils);
  methods[6].selector = @selector(getHashAlgorithmIds);
  methods[7].selector = @selector(setCompressionAlgorithmsWithJavaUtilList:);
  methods[8].selector = @selector(getCompressionAlgorithms);
  methods[9].selector = @selector(getCompressionAlgorithmIds);
  methods[10].selector = @selector(getDefaultAlgorithmSuite);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultAlgorithmSuite", "LLibComAfterlogicPgpAlgorithmAlgorithmSuite;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "symmetricKeyAlgorithms_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
    { "hashAlgorithmUtils_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 14, -1 },
    { "compressionAlgorithms_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/SymmetricKeyAlgorithm;>;Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/HashAlgorithmUtil;>;Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/CompressionAlgorithm;>;)V", "setSymmetricKeyAlgorithms", "LJavaUtilList;", "(Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/SymmetricKeyAlgorithm;>;)V", "()Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/SymmetricKeyAlgorithm;>;", "setHashAlgorithmUtils", "(Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/HashAlgorithmUtil;>;)V", "()Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/HashAlgorithmUtil;>;", "setCompressionAlgorithms", "(Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/CompressionAlgorithm;>;)V", "()Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/CompressionAlgorithm;>;", &LibComAfterlogicPgpAlgorithmAlgorithmSuite_defaultAlgorithmSuite, "Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/SymmetricKeyAlgorithm;>;", "Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/HashAlgorithmUtil;>;", "Ljava/util/List<Llib/com/afterlogic/pgp/algorithm/CompressionAlgorithm;>;" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpAlgorithmAlgorithmSuite = { "AlgorithmSuite", "lib.com.afterlogic.pgp.algorithm", ptrTable, methods, fields, 7, 0x1, 11, 4, -1, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpAlgorithmAlgorithmSuite;
}

+ (void)initialize {
  if (self == [LibComAfterlogicPgpAlgorithmAlgorithmSuite class]) {
    LibComAfterlogicPgpAlgorithmAlgorithmSuite_defaultAlgorithmSuite = new_LibComAfterlogicPgpAlgorithmAlgorithmSuite_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm, AES_256), JreLoadEnum(LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm, AES_192), JreLoadEnum(LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm, AES_128) } count:3 type:LibComAfterlogicPgpAlgorithmSymmetricKeyAlgorithm_class_()]), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(LibComAfterlogicPgpAlgorithmHashAlgorithmUtil, SHA512), JreLoadEnum(LibComAfterlogicPgpAlgorithmHashAlgorithmUtil, SHA384), JreLoadEnum(LibComAfterlogicPgpAlgorithmHashAlgorithmUtil, SHA256), JreLoadEnum(LibComAfterlogicPgpAlgorithmHashAlgorithmUtil, SHA224) } count:4 type:LibComAfterlogicPgpAlgorithmHashAlgorithmUtil_class_()]), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, ZLIB), JreLoadEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, BZIP2), JreLoadEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, ZIP), JreLoadEnum(LibComAfterlogicPgpAlgorithmCompressionAlgorithm, UNCOMPRESSED) } count:4 type:LibComAfterlogicPgpAlgorithmCompressionAlgorithm_class_()]));
    J2OBJC_SET_INITIALIZED(LibComAfterlogicPgpAlgorithmAlgorithmSuite)
  }
}

@end

void LibComAfterlogicPgpAlgorithmAlgorithmSuite_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(LibComAfterlogicPgpAlgorithmAlgorithmSuite *self, id<JavaUtilList> symmetricKeyAlgorithms, id<JavaUtilList> hashAlgorithmUtils, id<JavaUtilList> compressionAlgorithms) {
  NSObject_init(self);
  self->symmetricKeyAlgorithms_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(symmetricKeyAlgorithms);
  self->hashAlgorithmUtils_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(hashAlgorithmUtils);
  self->compressionAlgorithms_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(compressionAlgorithms);
}

LibComAfterlogicPgpAlgorithmAlgorithmSuite *new_LibComAfterlogicPgpAlgorithmAlgorithmSuite_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(id<JavaUtilList> symmetricKeyAlgorithms, id<JavaUtilList> hashAlgorithmUtils, id<JavaUtilList> compressionAlgorithms) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpAlgorithmAlgorithmSuite, initWithJavaUtilList_withJavaUtilList_withJavaUtilList_, symmetricKeyAlgorithms, hashAlgorithmUtils, compressionAlgorithms)
}

LibComAfterlogicPgpAlgorithmAlgorithmSuite *create_LibComAfterlogicPgpAlgorithmAlgorithmSuite_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(id<JavaUtilList> symmetricKeyAlgorithms, id<JavaUtilList> hashAlgorithmUtils, id<JavaUtilList> compressionAlgorithms) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpAlgorithmAlgorithmSuite, initWithJavaUtilList_withJavaUtilList_withJavaUtilList_, symmetricKeyAlgorithms, hashAlgorithmUtils, compressionAlgorithms)
}

LibComAfterlogicPgpAlgorithmAlgorithmSuite *LibComAfterlogicPgpAlgorithmAlgorithmSuite_getDefaultAlgorithmSuite() {
  LibComAfterlogicPgpAlgorithmAlgorithmSuite_initialize();
  return LibComAfterlogicPgpAlgorithmAlgorithmSuite_defaultAlgorithmSuite;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpAlgorithmAlgorithmSuite)
