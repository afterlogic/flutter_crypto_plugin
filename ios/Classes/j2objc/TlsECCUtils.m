//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/crypto/tls/TlsECCUtils.java
//

#include "AlertDescription.h"
#include "Arrays.h"
#include "AsymmetricCipherKeyPair.h"
#include "AsymmetricKeyParameter.h"
#include "BigIntegers.h"
#include "CipherSuite.h"
#include "CustomNamedCurves.h"
#include "ECAlgorithms.h"
#include "ECBasisType.h"
#include "ECCurve.h"
#include "ECCurveType.h"
#include "ECDHBasicAgreement.h"
#include "ECDomainParameters.h"
#include "ECFieldElement.h"
#include "ECKeyGenerationParameters.h"
#include "ECKeyPairGenerator.h"
#include "ECNamedCurveTable.h"
#include "ECPoint.h"
#include "ECPointFormat.h"
#include "ECPrivateKeyParameters.h"
#include "ECPublicKeyParameters.h"
#include "ExtensionType.h"
#include "FiniteField.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "NamedCurve.h"
#include "Polynomial.h"
#include "PolynomialExtensionField.h"
#include "TlsECCUtils.h"
#include "TlsFatalAlert.h"
#include "TlsProtocol.h"
#include "TlsUtils.h"
#include "X9ECParameters.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Hashtable.h"

@interface LibOrgBouncycastleCryptoTlsTlsECCUtils ()

+ (void)checkNamedCurveWithIntArray:(IOSIntArray *)namedCurves
                            withInt:(jint)namedCurve;

@end

inline IOSObjectArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_get_CURVE_NAMES(void);
static IOSObjectArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_CURVE_NAMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(LibOrgBouncycastleCryptoTlsTlsECCUtils, CURVE_NAMES, IOSObjectArray *)

__attribute__((unused)) static void LibOrgBouncycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(IOSIntArray *namedCurves, jint namedCurve);

J2OBJC_INITIALIZED_DEFN(LibOrgBouncycastleCryptoTlsTlsECCUtils)

JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves;
JavaLangInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats;

@implementation LibOrgBouncycastleCryptoTlsTlsECCUtils

+ (JavaLangInteger *)EXT_elliptic_curves {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves;
}

+ (JavaLangInteger *)EXT_ec_point_formats {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)addSupportedEllipticCurvesExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                    withIntArray:(IOSIntArray *)namedCurves {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_addSupportedEllipticCurvesExtensionWithJavaUtilHashtable_withIntArray_(extensions, namedCurves);
}

+ (void)addSupportedPointFormatsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                withShortArray:(IOSShortArray *)ecPointFormats {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_(extensions, ecPointFormats);
}

+ (IOSIntArray *)getSupportedEllipticCurvesExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_getSupportedEllipticCurvesExtensionWithJavaUtilHashtable_(extensions);
}

+ (IOSShortArray *)getSupportedPointFormatsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(extensions);
}

+ (IOSByteArray *)createSupportedEllipticCurvesExtensionWithIntArray:(IOSIntArray *)namedCurves {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_createSupportedEllipticCurvesExtensionWithIntArray_(namedCurves);
}

+ (IOSByteArray *)createSupportedPointFormatsExtensionWithShortArray:(IOSShortArray *)ecPointFormats {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_createSupportedPointFormatsExtensionWithShortArray_(ecPointFormats);
}

+ (IOSIntArray *)readSupportedEllipticCurvesExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(extensionData);
}

+ (IOSShortArray *)readSupportedPointFormatsExtensionWithByteArray:(IOSByteArray *)extensionData {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(extensionData);
}

+ (NSString *)getNameOfNamedCurveWithInt:(jint)namedCurve {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_getNameOfNamedCurveWithInt_(namedCurve);
}

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)getParametersForNamedCurveWithInt:(jint)namedCurve {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(namedCurve);
}

+ (jboolean)hasAnySupportedNamedCurves {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_hasAnySupportedNamedCurves();
}

+ (jboolean)containsECCCipherSuitesWithIntArray:(IOSIntArray *)cipherSuites {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_(cipherSuites);
}

+ (jboolean)isECCCipherSuiteWithInt:(jint)cipherSuite {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(cipherSuite);
}

+ (jboolean)areOnSameCurveWithLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)a
                          withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)b {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_areOnSameCurveWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleCryptoParamsECDomainParameters_(a, b);
}

+ (jboolean)isSupportedNamedCurveWithInt:(jint)namedCurve {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(namedCurve);
}

+ (jboolean)isCompressionPreferredWithShortArray:(IOSShortArray *)ecPointFormats
                                       withShort:(jshort)compressionFormat {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(ecPointFormats, compressionFormat);
}

+ (IOSByteArray *)serializeECFieldElementWithInt:(jint)fieldSize
                          withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECFieldElementWithInt_withJavaMathBigInteger_(fieldSize, x);
}

+ (IOSByteArray *)serializeECPointWithShortArray:(IOSShortArray *)ecPointFormats
             withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_(ecPointFormats, point);
}

+ (IOSByteArray *)serializeECPublicKeyWithShortArray:(IOSShortArray *)ecPointFormats
withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)keyParameters {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPublicKeyWithShortArray_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(ecPointFormats, keyParameters);
}

+ (JavaMathBigInteger *)deserializeECFieldElementWithInt:(jint)fieldSize
                                           withByteArray:(IOSByteArray *)encoding {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECFieldElementWithInt_withByteArray_(fieldSize, encoding);
}

+ (LibOrgBouncycastleMathEcECPoint *)deserializeECPointWithShortArray:(IOSShortArray *)ecPointFormats
                                  withLibOrgBouncycastleMathEcECCurve:(LibOrgBouncycastleMathEcECCurve *)curve
                                                        withByteArray:(IOSByteArray *)encoding {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withLibOrgBouncycastleMathEcECCurve_withByteArray_(ecPointFormats, curve, encoding);
}

+ (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)deserializeECPublicKeyWithShortArray:(IOSShortArray *)ecPointFormats
                                         withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)curve_params
                                                                                withByteArray:(IOSByteArray *)encoding {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withByteArray_(ecPointFormats, curve_params, encoding);
}

+ (IOSByteArray *)calculateECDHBasicAgreementWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)publicKey
                                            withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:(LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)privateKey {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_calculateECDHBasicAgreementWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(publicKey, privateKey);
}

+ (LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateECKeyPairWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                              withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)ecParams {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_generateECKeyPairWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsECDomainParameters_(random, ecParams);
}

+ (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                          withShortArray:(IOSShortArray *)ecPointFormats
                                                                    withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)ecParams
                                                                                                  withJavaIoOutputStream:(JavaIoOutputStream *)output {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(random, ecPointFormats, ecParams, output);
}

+ (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *)generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                            withIntArray:(IOSIntArray *)namedCurves
                                                                                                          withShortArray:(IOSShortArray *)ecPointFormats
                                                                                                  withJavaIoOutputStream:(JavaIoOutputStream *)output {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withIntArray_withShortArray_withJavaIoOutputStream_(random, namedCurves, ecPointFormats, output);
}

+ (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)validateECPublicKeyWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters:(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *)key {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(key);
}

+ (jint)readECExponentWithInt:(jint)fieldSize
        withJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(fieldSize, input);
}

+ (JavaMathBigInteger *)readECFieldElementWithInt:(jint)fieldSize
                            withJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(fieldSize, input);
}

+ (JavaMathBigInteger *)readECParameterWithJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
}

+ (LibOrgBouncycastleCryptoParamsECDomainParameters *)readECParametersWithIntArray:(IOSIntArray *)namedCurves
                                                                    withShortArray:(IOSShortArray *)ecPointFormats
                                                             withJavaIoInputStream:(JavaIoInputStream *)input {
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParametersWithIntArray_withShortArray_withJavaIoInputStream_(namedCurves, ecPointFormats, input);
}

+ (void)checkNamedCurveWithIntArray:(IOSIntArray *)namedCurves
                            withInt:(jint)namedCurve {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(namedCurves, namedCurve);
}

+ (void)writeECExponentWithInt:(jint)k
        withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(k, output);
}

+ (void)writeECFieldElementWithLibOrgBouncycastleMathEcECFieldElement:(LibOrgBouncycastleMathEcECFieldElement *)x
                                               withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECFieldElementWithLibOrgBouncycastleMathEcECFieldElement_withJavaIoOutputStream_(x, output);
}

+ (void)writeECFieldElementWithInt:(jint)fieldSize
            withJavaMathBigInteger:(JavaMathBigInteger *)x
            withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECFieldElementWithInt_withJavaMathBigInteger_withJavaIoOutputStream_(fieldSize, x, output);
}

+ (void)writeECParameterWithJavaMathBigInteger:(JavaMathBigInteger *)x
                        withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_(x, output);
}

+ (void)writeExplicitECParametersWithShortArray:(IOSShortArray *)ecPointFormats
withLibOrgBouncycastleCryptoParamsECDomainParameters:(LibOrgBouncycastleCryptoParamsECDomainParameters *)ecParameters
                         withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeExplicitECParametersWithShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(ecPointFormats, ecParameters, output);
}

+ (void)writeECPointWithShortArray:(IOSShortArray *)ecPointFormats
withLibOrgBouncycastleMathEcECPoint:(LibOrgBouncycastleMathEcECPoint *)point
            withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_withJavaIoOutputStream_(ecPointFormats, point, output);
}

+ (void)writeNamedECParametersWithInt:(jint)namedCurve
               withJavaIoOutputStream:(JavaIoOutputStream *)output {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeNamedECParametersWithInt_withJavaIoOutputStream_(namedCurve, output);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 2, -1, -1, -1 },
    { NULL, "[I", 0x9, 5, 6, 2, -1, -1, -1 },
    { NULL, "[S", 0x9, 7, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 11, 2, -1, -1, -1 },
    { NULL, "[I", 0x9, 12, 13, 2, -1, -1, -1 },
    { NULL, "[S", 0x9, 14, 13, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECDomainParameters;", 0x9, 17, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 19, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 22, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 25, 26, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 27, 28, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 29, 30, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 31, 32, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleMathEcECPoint;", 0x9, 33, 34, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", 0x9, 35, 36, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 37, 38, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x9, 39, 40, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", 0x9, 41, 42, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", 0x8, 43, 44, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", 0x9, 45, 46, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 47, 48, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 49, 48, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 50, 51, 2, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleCryptoParamsECDomainParameters;", 0x9, 52, 53, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 54, 55, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 56, 57, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 58, 59, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 58, 60, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 61, 62, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 63, 64, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 65, 66, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 67, 57, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addSupportedEllipticCurvesExtensionWithJavaUtilHashtable:withIntArray:);
  methods[2].selector = @selector(addSupportedPointFormatsExtensionWithJavaUtilHashtable:withShortArray:);
  methods[3].selector = @selector(getSupportedEllipticCurvesExtensionWithJavaUtilHashtable:);
  methods[4].selector = @selector(getSupportedPointFormatsExtensionWithJavaUtilHashtable:);
  methods[5].selector = @selector(createSupportedEllipticCurvesExtensionWithIntArray:);
  methods[6].selector = @selector(createSupportedPointFormatsExtensionWithShortArray:);
  methods[7].selector = @selector(readSupportedEllipticCurvesExtensionWithByteArray:);
  methods[8].selector = @selector(readSupportedPointFormatsExtensionWithByteArray:);
  methods[9].selector = @selector(getNameOfNamedCurveWithInt:);
  methods[10].selector = @selector(getParametersForNamedCurveWithInt:);
  methods[11].selector = @selector(hasAnySupportedNamedCurves);
  methods[12].selector = @selector(containsECCCipherSuitesWithIntArray:);
  methods[13].selector = @selector(isECCCipherSuiteWithInt:);
  methods[14].selector = @selector(areOnSameCurveWithLibOrgBouncycastleCryptoParamsECDomainParameters:withLibOrgBouncycastleCryptoParamsECDomainParameters:);
  methods[15].selector = @selector(isSupportedNamedCurveWithInt:);
  methods[16].selector = @selector(isCompressionPreferredWithShortArray:withShort:);
  methods[17].selector = @selector(serializeECFieldElementWithInt:withJavaMathBigInteger:);
  methods[18].selector = @selector(serializeECPointWithShortArray:withLibOrgBouncycastleMathEcECPoint:);
  methods[19].selector = @selector(serializeECPublicKeyWithShortArray:withLibOrgBouncycastleCryptoParamsECPublicKeyParameters:);
  methods[20].selector = @selector(deserializeECFieldElementWithInt:withByteArray:);
  methods[21].selector = @selector(deserializeECPointWithShortArray:withLibOrgBouncycastleMathEcECCurve:withByteArray:);
  methods[22].selector = @selector(deserializeECPublicKeyWithShortArray:withLibOrgBouncycastleCryptoParamsECDomainParameters:withByteArray:);
  methods[23].selector = @selector(calculateECDHBasicAgreementWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters:withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters:);
  methods[24].selector = @selector(generateECKeyPairWithJavaSecuritySecureRandom:withLibOrgBouncycastleCryptoParamsECDomainParameters:);
  methods[25].selector = @selector(generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom:withShortArray:withLibOrgBouncycastleCryptoParamsECDomainParameters:withJavaIoOutputStream:);
  methods[26].selector = @selector(generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom:withIntArray:withShortArray:withJavaIoOutputStream:);
  methods[27].selector = @selector(validateECPublicKeyWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters:);
  methods[28].selector = @selector(readECExponentWithInt:withJavaIoInputStream:);
  methods[29].selector = @selector(readECFieldElementWithInt:withJavaIoInputStream:);
  methods[30].selector = @selector(readECParameterWithJavaIoInputStream:);
  methods[31].selector = @selector(readECParametersWithIntArray:withShortArray:withJavaIoInputStream:);
  methods[32].selector = @selector(checkNamedCurveWithIntArray:withInt:);
  methods[33].selector = @selector(writeECExponentWithInt:withJavaIoOutputStream:);
  methods[34].selector = @selector(writeECFieldElementWithLibOrgBouncycastleMathEcECFieldElement:withJavaIoOutputStream:);
  methods[35].selector = @selector(writeECFieldElementWithInt:withJavaMathBigInteger:withJavaIoOutputStream:);
  methods[36].selector = @selector(writeECParameterWithJavaMathBigInteger:withJavaIoOutputStream:);
  methods[37].selector = @selector(writeExplicitECParametersWithShortArray:withLibOrgBouncycastleCryptoParamsECDomainParameters:withJavaIoOutputStream:);
  methods[38].selector = @selector(writeECPointWithShortArray:withLibOrgBouncycastleMathEcECPoint:withJavaIoOutputStream:);
  methods[39].selector = @selector(writeNamedECParametersWithInt:withJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXT_elliptic_curves", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 68, -1, -1 },
    { "EXT_ec_point_formats", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 69, -1, -1 },
    { "CURVE_NAMES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
  };
  static const void *ptrTable[] = { "addSupportedEllipticCurvesExtension", "LJavaUtilHashtable;[I", "LJavaIoIOException;", "addSupportedPointFormatsExtension", "LJavaUtilHashtable;[S", "getSupportedEllipticCurvesExtension", "LJavaUtilHashtable;", "getSupportedPointFormatsExtension", "createSupportedEllipticCurvesExtension", "[I", "createSupportedPointFormatsExtension", "[S", "readSupportedEllipticCurvesExtension", "[B", "readSupportedPointFormatsExtension", "getNameOfNamedCurve", "I", "getParametersForNamedCurve", "containsECCCipherSuites", "isECCCipherSuite", "areOnSameCurve", "LLibOrgBouncycastleCryptoParamsECDomainParameters;LLibOrgBouncycastleCryptoParamsECDomainParameters;", "isSupportedNamedCurve", "isCompressionPreferred", "[SS", "serializeECFieldElement", "ILJavaMathBigInteger;", "serializeECPoint", "[SLLibOrgBouncycastleMathEcECPoint;", "serializeECPublicKey", "[SLLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", "deserializeECFieldElement", "I[B", "deserializeECPoint", "[SLLibOrgBouncycastleMathEcECCurve;[B", "deserializeECPublicKey", "[SLLibOrgBouncycastleCryptoParamsECDomainParameters;[B", "calculateECDHBasicAgreement", "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;LLibOrgBouncycastleCryptoParamsECPrivateKeyParameters;", "generateECKeyPair", "LJavaSecuritySecureRandom;LLibOrgBouncycastleCryptoParamsECDomainParameters;", "generateEphemeralClientKeyExchange", "LJavaSecuritySecureRandom;[SLLibOrgBouncycastleCryptoParamsECDomainParameters;LJavaIoOutputStream;", "generateEphemeralServerKeyExchange", "LJavaSecuritySecureRandom;[I[SLJavaIoOutputStream;", "validateECPublicKey", "LLibOrgBouncycastleCryptoParamsECPublicKeyParameters;", "readECExponent", "ILJavaIoInputStream;", "readECFieldElement", "readECParameter", "LJavaIoInputStream;", "readECParameters", "[I[SLJavaIoInputStream;", "checkNamedCurve", "[II", "writeECExponent", "ILJavaIoOutputStream;", "writeECFieldElement", "LLibOrgBouncycastleMathEcECFieldElement;LJavaIoOutputStream;", "ILJavaMathBigInteger;LJavaIoOutputStream;", "writeECParameter", "LJavaMathBigInteger;LJavaIoOutputStream;", "writeExplicitECParameters", "[SLLibOrgBouncycastleCryptoParamsECDomainParameters;LJavaIoOutputStream;", "writeECPoint", "[SLLibOrgBouncycastleMathEcECPoint;LJavaIoOutputStream;", "writeNamedECParameters", &LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves, &LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats, &LibOrgBouncycastleCryptoTlsTlsECCUtils_CURVE_NAMES };
  static const J2ObjcClassInfo _LibOrgBouncycastleCryptoTlsTlsECCUtils = { "TlsECCUtils", "lib.org.bouncycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 40, 3, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleCryptoTlsTlsECCUtils;
}

+ (void)initialize {
  if (self == [LibOrgBouncycastleCryptoTlsTlsECCUtils class]) {
    LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_elliptic_curves);
    LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats = LibOrgBouncycastleUtilIntegers_valueOfWithInt_(LibOrgBouncycastleCryptoTlsExtensionType_ec_point_formats);
    LibOrgBouncycastleCryptoTlsTlsECCUtils_CURVE_NAMES = [IOSObjectArray newArrayWithObjects:(id[]){ @"sect163k1", @"sect163r1", @"sect163r2", @"sect193r1", @"sect193r2", @"sect233k1", @"sect233r1", @"sect239k1", @"sect283k1", @"sect283r1", @"sect409k1", @"sect409r1", @"sect571k1", @"sect571r1", @"secp160k1", @"secp160r1", @"secp160r2", @"secp192k1", @"secp192r1", @"secp224k1", @"secp224r1", @"secp256k1", @"secp256r1", @"secp384r1", @"secp521r1", @"brainpoolP256r1", @"brainpoolP384r1", @"brainpoolP512r1" } count:28 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(LibOrgBouncycastleCryptoTlsTlsECCUtils)
  }
}

@end

void LibOrgBouncycastleCryptoTlsTlsECCUtils_init(LibOrgBouncycastleCryptoTlsTlsECCUtils *self) {
  NSObject_init(self);
}

LibOrgBouncycastleCryptoTlsTlsECCUtils *new_LibOrgBouncycastleCryptoTlsTlsECCUtils_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleCryptoTlsTlsECCUtils, init)
}

LibOrgBouncycastleCryptoTlsTlsECCUtils *create_LibOrgBouncycastleCryptoTlsTlsECCUtils_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleCryptoTlsTlsECCUtils, init)
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_addSupportedEllipticCurvesExtensionWithJavaUtilHashtable_withIntArray_(JavaUtilHashtable *extensions, IOSIntArray *namedCurves) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves withId:LibOrgBouncycastleCryptoTlsTlsECCUtils_createSupportedEllipticCurvesExtensionWithIntArray_(namedCurves)];
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_(JavaUtilHashtable *extensions, IOSShortArray *ecPointFormats) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats withId:LibOrgBouncycastleCryptoTlsTlsECCUtils_createSupportedPointFormatsExtensionWithShortArray_(ecPointFormats)];
}

IOSIntArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_getSupportedEllipticCurvesExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves);
  return extensionData == nil ? nil : LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(extensionData);
}

IOSShortArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  IOSByteArray *extensionData = LibOrgBouncycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, LibOrgBouncycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats);
  return extensionData == nil ? nil : LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(extensionData);
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_createSupportedEllipticCurvesExtensionWithIntArray_(IOSIntArray *namedCurves) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  if (namedCurves == nil || namedCurves->size_ < 1) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  return LibOrgBouncycastleCryptoTlsTlsUtils_encodeUint16ArrayWithUint16LengthWithIntArray_(namedCurves);
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_createSupportedPointFormatsExtensionWithShortArray_(IOSShortArray *ecPointFormats) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  if (ecPointFormats == nil || !LibOrgBouncycastleUtilArrays_containsWithShortArray_withShort_(ecPointFormats, LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed)) {
    ecPointFormats = LibOrgBouncycastleUtilArrays_appendWithShortArray_withShort_(ecPointFormats, LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed);
  }
  return LibOrgBouncycastleCryptoTlsTlsUtils_encodeUint8ArrayWithUint8LengthWithShortArray_(ecPointFormats);
}

IOSIntArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  jint length = LibOrgBouncycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(buf);
  if (length < 2 || (length & 1) != 0) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decode_error);
  }
  IOSIntArray *namedCurves = LibOrgBouncycastleCryptoTlsTlsUtils_readUint16ArrayWithInt_withJavaIoInputStream_(length / 2, buf);
  LibOrgBouncycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  return namedCurves;
}

IOSShortArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(IOSByteArray *extensionData) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  jshort length = LibOrgBouncycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(buf);
  if (length < 1) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decode_error);
  }
  IOSShortArray *ecPointFormats = LibOrgBouncycastleCryptoTlsTlsUtils_readUint8ArrayWithInt_withJavaIoInputStream_(length, buf);
  LibOrgBouncycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  if (!LibOrgBouncycastleUtilArrays_containsWithShortArray_withShort_(ecPointFormats, LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed)) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return ecPointFormats;
}

NSString *LibOrgBouncycastleCryptoTlsTlsECCUtils_getNameOfNamedCurveWithInt_(jint namedCurve) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(namedCurve) ? IOSObjectArray_Get(nil_chk(LibOrgBouncycastleCryptoTlsTlsECCUtils_CURVE_NAMES), namedCurve - 1) : nil;
}

LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(jint namedCurve) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  NSString *curveName = LibOrgBouncycastleCryptoTlsTlsECCUtils_getNameOfNamedCurveWithInt_(namedCurve);
  if (curveName == nil) {
    return nil;
  }
  LibOrgBouncycastleAsn1X9X9ECParameters *ecP = LibOrgBouncycastleCryptoEcCustomNamedCurves_getByNameWithNSString_(curveName);
  if (ecP == nil) {
    ecP = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(curveName);
    if (ecP == nil) {
      return nil;
    }
  }
  return new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([ecP getCurve], [ecP getG], [ecP getN], [ecP getH], [ecP getSeed]);
}

jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_hasAnySupportedNamedCurves() {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return ((IOSObjectArray *) nil_chk(LibOrgBouncycastleCryptoTlsTlsECCUtils_CURVE_NAMES))->size_ > 0;
}

jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_(IOSIntArray *cipherSuites) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(cipherSuites))->size_; ++i) {
    if (LibOrgBouncycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(IOSIntArray_Get(cipherSuites, i))) {
      return true;
    }
  }
  return false;
}

jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(jint cipherSuite) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  switch (cipherSuite) {
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_NULL_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_RC4_128_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_NULL_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_NULL_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_RC4_128_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_NULL_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_RC4_128_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_NULL_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_RC4_128_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_256_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_RC4_128_SHA:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM:
    case LibOrgBouncycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_128_OCB:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_256_OCB:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_128_OCB:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_256_OCB:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_128_OCB:
    case LibOrgBouncycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_256_OCB:
    return true;
    default:
    return false;
  }
}

jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_areOnSameCurveWithLibOrgBouncycastleCryptoParamsECDomainParameters_withLibOrgBouncycastleCryptoParamsECDomainParameters_(LibOrgBouncycastleCryptoParamsECDomainParameters *a, LibOrgBouncycastleCryptoParamsECDomainParameters *b) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return a != nil && [a isEqual:b];
}

jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(jint namedCurve) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return (namedCurve > 0 && namedCurve <= ((IOSObjectArray *) nil_chk(LibOrgBouncycastleCryptoTlsTlsECCUtils_CURVE_NAMES))->size_);
}

jboolean LibOrgBouncycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(IOSShortArray *ecPointFormats, jshort compressionFormat) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  if (ecPointFormats == nil) {
    return false;
  }
  for (jint i = 0; i < ecPointFormats->size_; ++i) {
    jshort ecPointFormat = IOSShortArray_Get(ecPointFormats, i);
    if (ecPointFormat == LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed) {
      return false;
    }
    if (ecPointFormat == compressionFormat) {
      return true;
    }
  }
  return false;
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECFieldElementWithInt_withJavaMathBigInteger_(jint fieldSize, JavaMathBigInteger *x) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_((fieldSize + 7) / 8, x);
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_(IOSShortArray *ecPointFormats, LibOrgBouncycastleMathEcECPoint *point) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleMathEcECPoint *) nil_chk(point)) getCurve];
  jboolean compressed = false;
  if (LibOrgBouncycastleMathEcECAlgorithms_isFpCurveWithLibOrgBouncycastleMathEcECCurve_(curve)) {
    compressed = LibOrgBouncycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(ecPointFormats, LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_prime);
  }
  else if (LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_(curve)) {
    compressed = LibOrgBouncycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(ecPointFormats, LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_char2);
  }
  return [point getEncodedWithBoolean:compressed];
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPublicKeyWithShortArray_withLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(IOSShortArray *ecPointFormats, LibOrgBouncycastleCryptoParamsECPublicKeyParameters *keyParameters) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_(ecPointFormats, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(keyParameters)) getQ]);
}

JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECFieldElementWithInt_withByteArray_(jint fieldSize, IOSByteArray *encoding) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  jint requiredLength = (fieldSize + 7) / 8;
  if (((IOSByteArray *) nil_chk(encoding))->size_ != requiredLength) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_decode_error);
  }
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, encoding);
}

LibOrgBouncycastleMathEcECPoint *LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withLibOrgBouncycastleMathEcECCurve_withByteArray_(IOSShortArray *ecPointFormats, LibOrgBouncycastleMathEcECCurve *curve, IOSByteArray *encoding) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  if (encoding == nil || encoding->size_ < 1) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  jshort actualFormat;
  switch (IOSByteArray_Get(encoding, 0)) {
    case (jint) 0x02:
    case (jint) 0x03:
    {
      if (LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_(curve)) {
        actualFormat = LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_char2;
      }
      else if (LibOrgBouncycastleMathEcECAlgorithms_isFpCurveWithLibOrgBouncycastleMathEcECCurve_(curve)) {
        actualFormat = LibOrgBouncycastleCryptoTlsECPointFormat_ansiX962_compressed_prime;
      }
      else {
        @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
      }
      break;
    }
    case (jint) 0x04:
    {
      actualFormat = LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed;
      break;
    }
    case (jint) 0x00:
    case (jint) 0x06:
    case (jint) 0x07:
    default:
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  if (actualFormat != LibOrgBouncycastleCryptoTlsECPointFormat_uncompressed && (ecPointFormats == nil || !LibOrgBouncycastleUtilArrays_containsWithShortArray_withShort_(ecPointFormats, actualFormat))) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return [((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) decodePointWithByteArray:encoding];
}

LibOrgBouncycastleCryptoParamsECPublicKeyParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withByteArray_(IOSShortArray *ecPointFormats, LibOrgBouncycastleCryptoParamsECDomainParameters *curve_params, IOSByteArray *encoding) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  @try {
    LibOrgBouncycastleMathEcECPoint *Y = LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withLibOrgBouncycastleMathEcECCurve_withByteArray_(ecPointFormats, [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(curve_params)) getCurve], encoding);
    return new_LibOrgBouncycastleCryptoParamsECPublicKeyParameters_initWithLibOrgBouncycastleMathEcECPoint_withLibOrgBouncycastleCryptoParamsECDomainParameters_(Y, curve_params);
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter, e);
  }
}

IOSByteArray *LibOrgBouncycastleCryptoTlsTlsECCUtils_calculateECDHBasicAgreementWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_withLibOrgBouncycastleCryptoParamsECPrivateKeyParameters_(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *publicKey, LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *privateKey) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleCryptoAgreementECDHBasicAgreement *basicAgreement = new_LibOrgBouncycastleCryptoAgreementECDHBasicAgreement_init();
  [basicAgreement init__WithLibOrgBouncycastleCryptoCipherParameters:privateKey];
  JavaMathBigInteger *agreementValue = [basicAgreement calculateAgreementWithLibOrgBouncycastleCryptoCipherParameters:publicKey];
  return LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_([basicAgreement getFieldSize], agreementValue);
}

LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *LibOrgBouncycastleCryptoTlsTlsECCUtils_generateECKeyPairWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsECDomainParameters_(JavaSecuritySecureRandom *random, LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator *keyPairGenerator = new_LibOrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init();
  [keyPairGenerator init__WithLibOrgBouncycastleCryptoKeyGenerationParameters:new_LibOrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(ecParams, random)];
  return [keyPairGenerator generateKeyPair];
}

LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, IOSShortArray *ecPointFormats, LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *kp = LibOrgBouncycastleCryptoTlsTlsECCUtils_generateECKeyPairWithJavaSecuritySecureRandom_withLibOrgBouncycastleCryptoParamsECDomainParameters_(random, ecParams);
  LibOrgBouncycastleCryptoParamsECPublicKeyParameters *ecPublicKey = (LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk([((LibOrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPublic], [LibOrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_withJavaIoOutputStream_(ecPointFormats, [((LibOrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey)) getQ], output);
  return (LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([kp getPrivate], [LibOrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
}

LibOrgBouncycastleCryptoParamsECPrivateKeyParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withIntArray_withShortArray_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, IOSIntArray *namedCurves, IOSShortArray *ecPointFormats, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  jint namedCurve = -1;
  if (namedCurves == nil) {
    namedCurve = LibOrgBouncycastleCryptoTlsNamedCurve_secp256r1;
  }
  else {
    for (jint i = 0; i < namedCurves->size_; ++i) {
      jint entry_ = IOSIntArray_Get(namedCurves, i);
      if (LibOrgBouncycastleCryptoTlsNamedCurve_isValidWithInt_(entry_) && LibOrgBouncycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(entry_)) {
        namedCurve = entry_;
        break;
      }
    }
  }
  LibOrgBouncycastleCryptoParamsECDomainParameters *ecParams = nil;
  if (namedCurve >= 0) {
    ecParams = LibOrgBouncycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(namedCurve);
  }
  else {
    if (LibOrgBouncycastleUtilArrays_containsWithIntArray_withInt_(namedCurves, LibOrgBouncycastleCryptoTlsNamedCurve_arbitrary_explicit_prime_curves)) {
      ecParams = LibOrgBouncycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(LibOrgBouncycastleCryptoTlsNamedCurve_secp256r1);
    }
    else if (LibOrgBouncycastleUtilArrays_containsWithIntArray_withInt_(namedCurves, LibOrgBouncycastleCryptoTlsNamedCurve_arbitrary_explicit_char2_curves)) {
      ecParams = LibOrgBouncycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(LibOrgBouncycastleCryptoTlsNamedCurve_sect283r1);
    }
  }
  if (ecParams == nil) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  if (namedCurve < 0) {
    LibOrgBouncycastleCryptoTlsTlsECCUtils_writeExplicitECParametersWithShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(ecPointFormats, ecParams, output);
  }
  else {
    LibOrgBouncycastleCryptoTlsTlsECCUtils_writeNamedECParametersWithInt_withJavaIoOutputStream_(namedCurve, output);
  }
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(random, ecPointFormats, ecParams, output);
}

LibOrgBouncycastleCryptoParamsECPublicKeyParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithLibOrgBouncycastleCryptoParamsECPublicKeyParameters_(LibOrgBouncycastleCryptoParamsECPublicKeyParameters *key) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return key;
}

jint LibOrgBouncycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(jint fieldSize, JavaIoInputStream *input) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  JavaMathBigInteger *K = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
  if ([((JavaMathBigInteger *) nil_chk(K)) bitLength] < 32) {
    jint k = [K intValue];
    if (k > 0 && k < fieldSize) {
      return k;
    }
  }
  @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
}

JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(jint fieldSize, JavaIoInputStream *input) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECFieldElementWithInt_withByteArray_(fieldSize, LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input));
}

JavaMathBigInteger *LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(JavaIoInputStream *input) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input));
}

LibOrgBouncycastleCryptoParamsECDomainParameters *LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParametersWithIntArray_withShortArray_withJavaIoInputStream_(IOSIntArray *namedCurves, IOSShortArray *ecPointFormats, JavaIoInputStream *input) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  @try {
    jshort curveType = LibOrgBouncycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
    switch (curveType) {
      case LibOrgBouncycastleCryptoTlsECCurveType_explicit_prime:
      {
        LibOrgBouncycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(namedCurves, LibOrgBouncycastleCryptoTlsNamedCurve_arbitrary_explicit_prime_curves);
        JavaMathBigInteger *prime_p = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        JavaMathBigInteger *a = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_([((JavaMathBigInteger *) nil_chk(prime_p)) bitLength], input);
        JavaMathBigInteger *b = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_([prime_p bitLength], input);
        IOSByteArray *baseEncoding = LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input);
        JavaMathBigInteger *order = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        JavaMathBigInteger *cofactor = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        LibOrgBouncycastleMathEcECCurve *curve = new_LibOrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(prime_p, a, b, order, cofactor);
        LibOrgBouncycastleMathEcECPoint *base = LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withLibOrgBouncycastleMathEcECCurve_withByteArray_(ecPointFormats, curve, baseEncoding);
        return new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(curve, base, order, cofactor);
      }
      case LibOrgBouncycastleCryptoTlsECCurveType_explicit_char2:
      {
        LibOrgBouncycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(namedCurves, LibOrgBouncycastleCryptoTlsNamedCurve_arbitrary_explicit_char2_curves);
        jint m = LibOrgBouncycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
        jshort basis = LibOrgBouncycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
        if (!LibOrgBouncycastleCryptoTlsECBasisType_isValidWithShort_(basis)) {
          @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
        }
        jint k1 = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(m, input);
        jint k2 = -1;
        jint k3 = -1;
        if (basis == LibOrgBouncycastleCryptoTlsECBasisType_ec_basis_pentanomial) {
          k2 = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(m, input);
          k3 = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(m, input);
        }
        JavaMathBigInteger *a = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(m, input);
        JavaMathBigInteger *b = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(m, input);
        IOSByteArray *baseEncoding = LibOrgBouncycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input);
        JavaMathBigInteger *order = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        JavaMathBigInteger *cofactor = LibOrgBouncycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        LibOrgBouncycastleMathEcECCurve *curve = (basis == LibOrgBouncycastleCryptoTlsECBasisType_ec_basis_pentanomial) ? new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(m, k1, k2, k3, a, b, order, cofactor) : new_LibOrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(m, k1, a, b, order, cofactor);
        LibOrgBouncycastleMathEcECPoint *base = LibOrgBouncycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withLibOrgBouncycastleMathEcECCurve_withByteArray_(ecPointFormats, curve, baseEncoding);
        return new_LibOrgBouncycastleCryptoParamsECDomainParameters_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(curve, base, order, cofactor);
      }
      case LibOrgBouncycastleCryptoTlsECCurveType_named_curve:
      {
        jint namedCurve = LibOrgBouncycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
        if (!LibOrgBouncycastleCryptoTlsNamedCurve_refersToASpecificNamedCurveWithInt_(namedCurve)) {
          @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
        }
        LibOrgBouncycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(namedCurves, namedCurve);
        return LibOrgBouncycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(namedCurve);
      }
      default:
      @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter, e);
  }
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(IOSIntArray *namedCurves, jint namedCurve) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  if (namedCurves != nil && !LibOrgBouncycastleUtilArrays_containsWithIntArray_withInt_(namedCurves, namedCurve)) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_illegal_parameter);
  }
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(jint k, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  JavaMathBigInteger *K = JavaMathBigInteger_valueOfWithLong_(k);
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_(K, output);
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECFieldElementWithLibOrgBouncycastleMathEcECFieldElement_withJavaIoOutputStream_(LibOrgBouncycastleMathEcECFieldElement *x, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk(x)) getEncoded], output);
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECFieldElementWithInt_withJavaMathBigInteger_withJavaIoOutputStream_(jint fieldSize, JavaMathBigInteger *x, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECFieldElementWithInt_withJavaMathBigInteger_(fieldSize, x), output);
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_(JavaMathBigInteger *x, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(x), output);
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeExplicitECParametersWithShortArray_withLibOrgBouncycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(IOSShortArray *ecPointFormats, LibOrgBouncycastleCryptoParamsECDomainParameters *ecParameters, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleMathEcECCurve *curve = [((LibOrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(ecParameters)) getCurve];
  if (LibOrgBouncycastleMathEcECAlgorithms_isFpCurveWithLibOrgBouncycastleMathEcECCurve_(curve)) {
    LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsECCurveType_explicit_prime, output);
    LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_([((id<LibOrgBouncycastleMathFieldFiniteField>) nil_chk([((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getField])) getCharacteristic], output);
  }
  else if (LibOrgBouncycastleMathEcECAlgorithms_isF2mCurveWithLibOrgBouncycastleMathEcECCurve_(curve)) {
    id<LibOrgBouncycastleMathFieldPolynomialExtensionField> field = (id<LibOrgBouncycastleMathFieldPolynomialExtensionField>) cast_check([((LibOrgBouncycastleMathEcECCurve *) nil_chk(curve)) getField], LibOrgBouncycastleMathFieldPolynomialExtensionField_class_());
    IOSIntArray *exponents = [((id<LibOrgBouncycastleMathFieldPolynomial>) nil_chk([((id<LibOrgBouncycastleMathFieldPolynomialExtensionField>) nil_chk(field)) getMinimalPolynomial])) getExponentsPresent];
    LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsECCurveType_explicit_char2, output);
    jint m = IOSIntArray_Get(exponents, ((IOSIntArray *) nil_chk(exponents))->size_ - 1);
    LibOrgBouncycastleCryptoTlsTlsUtils_checkUint16WithInt_(m);
    LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(m, output);
    if (exponents->size_ == 3) {
      LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsECBasisType_ec_basis_trinomial, output);
      LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(IOSIntArray_Get(exponents, 1), output);
    }
    else if (exponents->size_ == 5) {
      LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsECBasisType_ec_basis_pentanomial, output);
      LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(IOSIntArray_Get(exponents, 1), output);
      LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(IOSIntArray_Get(exponents, 2), output);
      LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(IOSIntArray_Get(exponents, 3), output);
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only trinomial and pentomial curves are supported");
    }
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'ecParameters' not a known curve type");
  }
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECFieldElementWithLibOrgBouncycastleMathEcECFieldElement_withJavaIoOutputStream_([curve getA], output);
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECFieldElementWithLibOrgBouncycastleMathEcECFieldElement_withJavaIoOutputStream_([curve getB], output);
  LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_(ecPointFormats, [ecParameters getG]), output);
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_([ecParameters getN], output);
  LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_([ecParameters getH], output);
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_withJavaIoOutputStream_(IOSShortArray *ecPointFormats, LibOrgBouncycastleMathEcECPoint *point, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  LibOrgBouncycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withLibOrgBouncycastleMathEcECPoint_(ecPointFormats, point), output);
}

void LibOrgBouncycastleCryptoTlsTlsECCUtils_writeNamedECParametersWithInt_withJavaIoOutputStream_(jint namedCurve, JavaIoOutputStream *output) {
  LibOrgBouncycastleCryptoTlsTlsECCUtils_initialize();
  if (!LibOrgBouncycastleCryptoTlsNamedCurve_refersToASpecificNamedCurveWithInt_(namedCurve)) {
    @throw new_LibOrgBouncycastleCryptoTlsTlsFatalAlert_initWithShort_(LibOrgBouncycastleCryptoTlsAlertDescription_internal_error);
  }
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(LibOrgBouncycastleCryptoTlsECCurveType_named_curve, output);
  LibOrgBouncycastleCryptoTlsTlsUtils_checkUint16WithInt_(namedCurve);
  LibOrgBouncycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(namedCurve, output);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleCryptoTlsTlsECCUtils)
